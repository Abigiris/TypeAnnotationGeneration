{
    "AA_Logbook_Export_old-master/Setup.py": {},
    "AA_Logbook_Export_old-master/setup_old.py": {},
    "AA_Logbook_Export_old-master/src/aaLogbook/cli.py": {
        "main": {
            "name": "main",
            "location": 46,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "export": {
            "name": "export",
            "location": 71,
            "return": [],
            "arguments": {
                "ctx": [],
                "filein": [],
                "fileout": [],
                "export_format": []
            }
        },
        "saveRawLogbookAsJson": {
            "name": "saveRawLogbookAsJson",
            "location": 120,
            "return": [],
            "arguments": {
                "ctx": [
                    "dict"
                ],
                "fileIn": [
                    "Path"
                ],
                "fileOut": [
                    "Path"
                ]
            }
        },
        "saveFlattenedRawLogbookAsJson": {
            "name": "saveFlattenedRawLogbookAsJson",
            "location": 125,
            "return": [],
            "arguments": {
                "ctx": [
                    "dict"
                ],
                "fileIn": [
                    "Path"
                ],
                "fileOut": [
                    "Path"
                ]
            }
        },
        "saveFlattenedRawLogbookAsCsv": {
            "name": "saveFlattenedRawLogbookAsCsv",
            "location": 130,
            "return": [],
            "arguments": {
                "ctx": [
                    "dict"
                ],
                "fileIn": [
                    "Path"
                ],
                "fileOut": [
                    "Path"
                ]
            }
        },
        "saveTranslatedLogbookAsJson": {
            "name": "saveTranslatedLogbookAsJson",
            "location": 135,
            "return": [],
            "arguments": {
                "ctx": [
                    "dict"
                ],
                "fileIn": [
                    "Path"
                ],
                "fileOut": [
                    "Path"
                ]
            }
        },
        "saveTranslatedLogbookAsCsv": {
            "name": "saveTranslatedLogbookAsCsv",
            "location": 142,
            "return": [],
            "arguments": {
                "ctx": [
                    "dict"
                ],
                "fileIn": [
                    "Path"
                ],
                "fileOut": [
                    "Path"
                ]
            }
        }
    },
    "AA_Logbook_Export_old-master/src/aaLogbook/logbookTranslation.py": {
        "buildLogbook": {
            "name": "buildLogbook",
            "location": 53,
            "return": [
                "ltm.Logbook"
            ],
            "arguments": {
                "logbookElement": [
                    "LogbookElement"
                ]
            }
        },
        "buildYear": {
            "name": "buildYear",
            "location": 65,
            "return": [
                "ltm.Year"
            ],
            "arguments": {
                "yearElement": [
                    "YearElement"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "buildMonth": {
            "name": "buildMonth",
            "location": 74,
            "return": [
                "ltm.Month"
            ],
            "arguments": {
                "monthElement": [
                    "MonthElement"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "buildTrip": {
            "name": "buildTrip",
            "location": 83,
            "return": [
                "ltm.Trip"
            ],
            "arguments": {
                "tripElement": [
                    "TripElement"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "buildDutyPeriod": {
            "name": "buildDutyPeriod",
            "location": 102,
            "return": [
                "ltm.DutyPeriod"
            ],
            "arguments": {
                "dutyPeriodElement": [
                    "DutyPeriodElement"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "buildFlight": {
            "name": "buildFlight",
            "location": 113,
            "return": [
                "ltm.Flight"
            ],
            "arguments": {
                "flightElement": [
                    "FlightElement"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "durationFormatterBasic": {
            "name": "durationFormatterBasic",
            "location": 169,
            "return": [],
            "arguments": {
                "dur": [
                    "ltm.Duration"
                ]
            }
        },
        "buildFlightRowDict": {
            "name": "buildFlightRowDict",
            "location": 173,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "logbook": [
                    "ltm.Logbook"
                ],
                "durationFormatter": [
                    "Optional[Any]"
                ]
            }
        },
        "parse_HHdotMM_To_Duration": {
            "name": "parse_HHdotMM_To_Duration",
            "location": 237,
            "return": [
                "ltm.Duration"
            ],
            "arguments": {
                "durationString": [
                    "str"
                ],
                "separator": [
                    "str"
                ]
            }
        },
        "buildStation": {
            "name": "buildStation",
            "location": 256,
            "return": [
                "ltm.Station"
            ],
            "arguments": {
                "iataCode": [
                    "str"
                ],
                "airportDB": [
                    "dict"
                ]
            }
        },
        "buildOutTimeUTC": {
            "name": "buildOutTimeUTC",
            "location": 264,
            "return": [
                "arrow.Arrow"
            ],
            "arguments": {
                "dateString": [
                    "str"
                ],
                "timeZoneString": [
                    "str"
                ]
            }
        },
        "buildInTimeUTC": {
            "name": "buildInTimeUTC",
            "location": 270,
            "return": [
                "arrow.Arrow"
            ],
            "arguments": {
                "inDateString": [
                    "str"
                ],
                "flightTime": [
                    "timedelta"
                ],
                "outDatetime": [
                    "arrow.Arrow"
                ],
                "inTimeZone": [
                    "str"
                ]
            }
        },
        "splitTripInfo": {
            "name": "splitTripInfo",
            "location": 279,
            "return": [],
            "arguments": {
                "sequenceInfo": [
                    "str"
                ]
            }
        },
        "save_logbookJson": {
            "name": "save_logbookJson",
            "location": 284,
            "return": [],
            "arguments": {
                "logbook": [
                    "ltm.Logbook"
                ],
                "savePath": [
                    "Path"
                ],
                "parseContext": [
                    "dict"
                ]
            }
        },
        "save_logbookCsv": {
            "name": "save_logbookCsv",
            "location": 290,
            "return": [],
            "arguments": {
                "logbook": [
                    "ltm.Logbook"
                ],
                "savePath": [
                    "Path"
                ],
                "parseContext": [
                    "dict"
                ],
                "fieldList": [
                    "Optional[Sequence[str]]"
                ]
            }
        }
    },
    "AA_Logbook_Export_old-master/src/aaLogbook/xmlTranslation.py": {
        "parseXML": {
            "name": "parseXML",
            "location": 56,
            "return": [],
            "arguments": {
                "path": [],
                "parseContext": []
            }
        },
        "logbookStats": {
            "name": "logbookStats",
            "location": 94,
            "return": [],
            "arguments": {
                "logbook": [
                    "xem.LogbookElement"
                ],
                "parseContext": [
                    "dict"
                ]
            }
        },
        "handleYear": {
            "name": "handleYear",
            "location": 106,
            "return": [],
            "arguments": {
                "yearElement": [],
                "parseContext": []
            }
        },
        "handleMonth": {
            "name": "handleMonth",
            "location": 142,
            "return": [],
            "arguments": {
                "monthElement": [],
                "parseContext": []
            }
        },
        "handleTrip": {
            "name": "handleTrip",
            "location": 177,
            "return": [],
            "arguments": {
                "tripElement": [],
                "parseContext": []
            }
        },
        "handleDutyPeriod": {
            "name": "handleDutyPeriod",
            "location": 212,
            "return": [],
            "arguments": {
                "dutyPeriodElement": [],
                "parseContext": []
            }
        },
        "handleFlight": {
            "name": "handleFlight",
            "location": 242,
            "return": [],
            "arguments": {
                "flightElement": [],
                "parseContext": []
            }
        },
        "validateYear": {
            "name": "validateYear",
            "location": 365,
            "return": [],
            "arguments": {
                "year": [],
                "yearElement": []
            }
        },
        "validateMonth": {
            "name": "validateMonth",
            "location": 369,
            "return": [],
            "arguments": {
                "month": [],
                "monthElement": []
            }
        },
        "validateTrip": {
            "name": "validateTrip",
            "location": 373,
            "return": [],
            "arguments": {
                "trip": [],
                "tripElement": []
            }
        },
        "validateDutyPeriod": {
            "name": "validateDutyPeriod",
            "location": 377,
            "return": [],
            "arguments": {
                "dutyPeriod": [],
                "dutyPeriodElement": []
            }
        },
        "validateFlight": {
            "name": "validateFlight",
            "location": 381,
            "return": [],
            "arguments": {
                "flight": [],
                "flightElement": []
            }
        },
        "buildFlightRows": {
            "name": "buildFlightRows",
            "location": 385,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "logbook": [
                    "xem.LogbookElement"
                ]
            }
        },
        "saveRawJson": {
            "name": "saveRawJson",
            "location": 406,
            "return": [],
            "arguments": {
                "xmlPath": [
                    "Path"
                ],
                "savePath": [
                    "Path"
                ],
                "parseContext": [
                    "dict"
                ]
            }
        },
        "saveRawFlatJson": {
            "name": "saveRawFlatJson",
            "location": 414,
            "return": [],
            "arguments": {
                "xmlPath": [
                    "Path"
                ],
                "savePath": [
                    "Path"
                ],
                "parseContext": [
                    "dict"
                ]
            }
        },
        "saveRawCsv": {
            "name": "saveRawCsv",
            "location": 420,
            "return": [],
            "arguments": {
                "xmlPath": [
                    "Path"
                ],
                "savePath": [
                    "Path"
                ],
                "parseContext": [
                    "dict"
                ]
            }
        }
    },
    "AA_Logbook_Export_old-master/src/aaLogbook/__about__.py": {},
    "AA_Logbook_Export_old-master/src/aaLogbook/__init__.py": {},
    "AA_Logbook_Export_old-master/src/aaLogbook/models/logbookTranslationModel.py": {
        "Duration.to_timedelta": {
            "name": "to_timedelta",
            "location": 71,
            "return": [
                "timedelta"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AA_Logbook_Export_old-master/src/aaLogbook/models/xmlElementModel.py": {
        "LogbookElement.__post_init__": {
            "name": "__post_init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YearElement.__post_init__": {
            "name": "__post_init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonthElement.__post_init__": {
            "name": "__post_init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TripElement.__post_init__": {
            "name": "__post_init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DutyPeriodElement.__post_init__": {
            "name": "__post_init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlightElement.__post_init__": {
            "name": "__post_init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AA_Logbook_Export_old-master/src/aaLogbook/models/__init__.py": {},
    "AA_Logbook_Export_old-master/src/airportsDB/airportsDB.py": {
        "load_airports_json": {
            "name": "load_airports_json",
            "location": 95,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {}
        },
        "load_airports_IATA_json": {
            "name": "load_airports_IATA_json",
            "location": 101,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {}
        },
        "load_OpenFLightsCSV": {
            "name": "load_OpenFLightsCSV",
            "location": 108,
            "return": [
                "List[Airport]"
            ],
            "arguments": {
                "filePath": [
                    "Path"
                ]
            }
        },
        "pathTo_airports_IATA_json": {
            "name": "pathTo_airports_IATA_json",
            "location": 113,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "pathTo_airports_json": {
            "name": "pathTo_airports_json",
            "location": 124,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "pathTo_OpenFlightsCSV": {
            "name": "pathTo_OpenFlightsCSV",
            "location": 135,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "pathToDataDirectory": {
            "name": "pathToDataDirectory",
            "location": 140,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "create_airports_IATA_json": {
            "name": "create_airports_IATA_json",
            "location": 145,
            "return": [],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "create_airports_json": {
            "name": "create_airports_json",
            "location": 153,
            "return": [],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "validateAirport": {
            "name": "validateAirport",
            "location": 160,
            "return": [],
            "arguments": {
                "airports": [
                    "List[Airport]"
                ]
            }
        },
        "build_IATA_dict": {
            "name": "build_IATA_dict",
            "location": 167,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "airports": [
                    "List[Airport]"
                ]
            }
        },
        "filter_Non_IATA_Airports": {
            "name": "filter_Non_IATA_Airports",
            "location": 189,
            "return": [
                "List[Airport]"
            ],
            "arguments": {
                "airports": [
                    "List[Airport]"
                ]
            }
        },
        "validateIATA_Code": {
            "name": "validateIATA_Code",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "iata": [
                    "str"
                ]
            }
        },
        "maincli": {
            "name": "maincli",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "Airport.__post_init__": {
            "name": "__post_init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Airport.translateNULL": {
            "name": "translateNULL",
            "location": 82,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "AirportsDB.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "pathToMainDB": [],
                "pathToIATADB": []
            }
        }
    },
    "AA_Logbook_Export_old-master/src/airportsDB/__init__.py": {},
    "AA_Logbook_Export_old-master/src/airportsDB/data/__init__.py": {},
    "AA_Logbook_Export_old-master/src/airportsDB/data/airports/__init__.py": {},
    "AA_Logbook_Export_old-master/src/utilities/csv_util.py": {
        "writeNamedTuplesToCsv": {
            "name": "writeNamedTuplesToCsv",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "outPath": [
                    "Path"
                ],
                "data": [
                    "Sequence[NamedTuple]"
                ],
                "useColumnHeaders": [],
                "customColumnHeaders": [
                    "Sequence[str]"
                ]
            }
        },
        "writeListToCsv": {
            "name": "writeListToCsv",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "outPath": [
                    "Path"
                ],
                "data": [
                    "Sequence[Sequence]"
                ],
                "customColumnHeaders": [
                    "Sequence[str]"
                ]
            }
        },
        "writeDictToCsv": {
            "name": "writeDictToCsv",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "outPath": [
                    "Path"
                ],
                "data": [
                    "Sequence[Dict[(str, str)]]"
                ],
                "keyList": [
                    "Optional[Sequence[str]]"
                ],
                "useColumnHeaders": []
            }
        },
        "readCsv": {
            "name": "readCsv",
            "location": 150,
            "return": [
                "list"
            ],
            "arguments": {
                "inPath": [
                    "Path"
                ],
                "rowFactory": []
            }
        }
    },
    "AA_Logbook_Export_old-master/src/utilities/json_util.py": {
        "loadJson": {
            "name": "loadJson",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "saveJson": {
            "name": "saveJson",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "Any"
                ],
                "path": [
                    "Path"
                ],
                "indent": [],
                "sort_keys": []
            }
        }
    },
    "AA_Logbook_Export_old-master/src/utilities/str_util.py": {
        "safeStrip": {
            "name": "safeStrip",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        }
    },
    "AA_Logbook_Export_old-master/src/utilities/timedelta_util.py": {
        "parse_isoformatDuration": {
            "name": "parse_isoformatDuration",
            "location": 5,
            "return": [
                "timedelta"
            ],
            "arguments": {
                "durationString": [
                    "str"
                ]
            }
        },
        "parse_HHMMSS": {
            "name": "parse_HHMMSS",
            "location": 9,
            "return": [
                "timedelta"
            ],
            "arguments": {
                "durationString": [
                    "str"
                ],
                "separator": [
                    "str"
                ]
            }
        },
        "parse_HHdotMM_To_timedelta": {
            "name": "parse_HHdotMM_To_timedelta",
            "location": 13,
            "return": [
                "timedelta"
            ],
            "arguments": {
                "durationString": [
                    "str"
                ],
                "separator": [
                    "str"
                ]
            }
        },
        "timedelta_split": {
            "name": "timedelta_split",
            "location": 31,
            "return": [
                "TimeDeltaSplit"
            ],
            "arguments": {
                "timeDelta": [
                    "timedelta"
                ]
            }
        },
        "timeDelta_TO_HHMMSS": {
            "name": "timeDelta_TO_HHMMSS",
            "location": 50,
            "return": [],
            "arguments": {
                "timeDelta": [
                    "timedelta"
                ],
                "separator": [
                    "str"
                ]
            }
        },
        "timedelta_To_isoformat": {
            "name": "timedelta_To_isoformat",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "timeDelta": [
                    "timedelta"
                ],
                "strict": []
            }
        }
    },
    "AA_Logbook_Export_old-master/src/utilities/__init__.py": {},
    "AA_Logbook_Export_old-master/tests/test_airportsDB.py": {
        "loadOpenFlightsCSV": {
            "name": "loadOpenFlightsCSV",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_readOpenFlightsCSV": {
            "name": "test_readOpenFlightsCSV",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_filterOpenFlights_iata": {
            "name": "test_filterOpenFlights_iata",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_load_airports_IATA_json": {
            "name": "test_load_airports_IATA_json",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_load_airports_json": {
            "name": "test_load_airports_json",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_pathToDataDirectory": {
            "name": "test_pathToDataDirectory",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_loadandsaveairports": {
            "name": "test_loadandsaveairports",
            "location": 85,
            "return": [],
            "arguments": {}
        }
    },
    "AA_Logbook_Export_old-master/tests/test_logbookTranslation.py": {
        "test_Arrow": {
            "name": "test_Arrow",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "loadXml": {
            "name": "loadXml",
            "location": 20,
            "return": [
                "LogbookElement"
            ],
            "arguments": {}
        },
        "pathToXmlInput": {
            "name": "pathToXmlInput",
            "location": 26,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "pathToDataDirectory": {
            "name": "pathToDataDirectory",
            "location": 31,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "translateParsedXml": {
            "name": "translateParsedXml",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_translatedLogToStdOut": {
            "name": "test_translatedLogToStdOut",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_saveLogbookJson": {
            "name": "test_saveLogbookJson",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_saveLogbookCsv": {
            "name": "test_saveLogbookCsv",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_buildFlightRowDict": {
            "name": "test_buildFlightRowDict",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_lambda": {
            "name": "test_lambda",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "lambdaFunc": {
            "name": "lambdaFunc",
            "location": 80,
            "return": [],
            "arguments": {}
        }
    },
    "AA_Logbook_Export_old-master/tests/test_timeDelta.py": {
        "test_TimeDelta_toiso_1": {
            "name": "test_TimeDelta_toiso_1",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_TimeDelta_toiso_2": {
            "name": "test_TimeDelta_toiso_2",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_TimeDelta_toiso_3": {
            "name": "test_TimeDelta_toiso_3",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_TimeDelta_toiso_4": {
            "name": "test_TimeDelta_toiso_4",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_TimeDelta_toiso_5": {
            "name": "test_TimeDelta_toiso_5",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_stringTo_timedelta": {
            "name": "test_stringTo_timedelta",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "AA_Logbook_Export_old-master/tests/test_xmlTranslation.py": {
        "loadXml": {
            "name": "loadXml",
            "location": 15,
            "return": [
                "LogbookElement"
            ],
            "arguments": {}
        },
        "pathToDataDirectory": {
            "name": "pathToDataDirectory",
            "location": 22,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "pathToXmlInput": {
            "name": "pathToXmlInput",
            "location": 27,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "test_saveRawJson": {
            "name": "test_saveRawJson",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_saveRawFlatJson": {
            "name": "test_saveRawFlatJson",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_saveRawCsv": {
            "name": "test_saveRawCsv",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_rawFlat": {
            "name": "test_rawFlat",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_printParsedXmlToStdOut": {
            "name": "test_printParsedXmlToStdOut",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "AA_Logbook_Export_old-master/tests/__init__.py": {}
}
{
    "AlgoStructuresPy-master/anagrams/index.py": {
        "are_anagrams": {
            "name": "are_anagrams",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_a": [
                    "str"
                ],
                "string_b": [
                    "str"
                ]
            }
        }
    },
    "AlgoStructuresPy-master/anagrams/test_.py": {
        "test_are_anagrams_true": {
            "name": "test_are_anagrams_true",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_are_anagrams_false": {
            "name": "test_are_anagrams_false",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/anagrams/__init__.py": {},
    "AlgoStructuresPy-master/bst/index.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "left": [],
                "right": []
            }
        },
        "Node.insert": {
            "name": "insert",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Node.contains": {
            "name": "contains",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "AlgoStructuresPy-master/bst/test_.py": {
        "TestBinarySearchTree.test_insert": {
            "name": "test_insert",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinarySearchTree.test_contains_found_node": {
            "name": "test_contains_found_node",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinarySearchTree.test_contains_return_none": {
            "name": "test_contains_return_none",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/bst/__init__.py": {},
    "AlgoStructuresPy-master/capitalize/index.py": {
        "capitalize": {
            "name": "capitalize",
            "location": 12,
            "return": [],
            "arguments": {
                "sentence": []
            }
        }
    },
    "AlgoStructuresPy-master/capitalize/test_.py": {
        "test_capitalize": {
            "name": "test_capitalize",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/capitalize/__init__.py": {},
    "AlgoStructuresPy-master/chunk/index.py": {
        "chunk": {
            "name": "chunk",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "array": [
                    "list"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "AlgoStructuresPy-master/chunk/test_.py": {
        "test_chunk": {
            "name": "test_chunk",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/chunk/__init__.py": {},
    "AlgoStructuresPy-master/circular/index.py": {
        "is_circular": {
            "name": "is_circular",
            "location": 17,
            "return": [],
            "arguments": {
                "llst": []
            }
        }
    },
    "AlgoStructuresPy-master/circular/linkedlist.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "next": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LinkedList.clear": {
            "name": "clear",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.size": {
            "name": "size",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_at": {
            "name": "get_at",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.get_first": {
            "name": "get_first",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_last": {
            "name": "get_last",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.insert_at": {
            "name": "insert_at",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "data": []
            }
        },
        "LinkedList.insert_first": {
            "name": "insert_first",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.insert_last": {
            "name": "insert_last",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.remove_at": {
            "name": "remove_at",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.remove_first": {
            "name": "remove_first",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.remove_last": {
            "name": "remove_last",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.every": {
            "name": "every",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "LinkedList.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__next__": {
            "name": "__next__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/circular/test_.py": {
        "TestIsCircular.test_circular": {
            "name": "test_circular",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsCircular.test_non_circular": {
            "name": "test_non_circular",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/circular/__init__.py": {},
    "AlgoStructuresPy-master/fib/index.py": {
        "memoize": {
            "name": "memoize",
            "location": 1,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "fib": {
            "name": "fib",
            "location": 18,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "memoize.wrapped": {
            "name": "wrapped",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/fib/test_.py": {
        "test_fib": {
            "name": "test_fib",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/fib/__init__.py": {},
    "AlgoStructuresPy-master/fizzbuzz/index.py": {
        "fizzbuzz": {
            "name": "fizzbuzz",
            "location": 17,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "AlgoStructuresPy-master/fizzbuzz/test_.py": {
        "test_fizzbuzz_success": {
            "name": "test_fizzbuzz_success",
            "location": 4,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_fizzbuzz_fail": {
            "name": "test_fizzbuzz_fail",
            "location": 11,
            "return": [],
            "arguments": {
                "capsys": []
            }
        }
    },
    "AlgoStructuresPy-master/fizzbuzz/__init__.py": {},
    "AlgoStructuresPy-master/fromlast/index.py": {
        "get_nth_node_from_last": {
            "name": "get_nth_node_from_last",
            "location": 1,
            "return": [],
            "arguments": {
                "llst": [],
                "n": []
            }
        }
    },
    "AlgoStructuresPy-master/fromlast/linkedlist.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "next": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LinkedList.clear": {
            "name": "clear",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.size": {
            "name": "size",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_at": {
            "name": "get_at",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.get_first": {
            "name": "get_first",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_last": {
            "name": "get_last",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.insert_at": {
            "name": "insert_at",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "data": []
            }
        },
        "LinkedList.insert_first": {
            "name": "insert_first",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.insert_last": {
            "name": "insert_last",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.remove_at": {
            "name": "remove_at",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.remove_first": {
            "name": "remove_first",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.remove_last": {
            "name": "remove_last",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.every": {
            "name": "every",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "LinkedList.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__next__": {
            "name": "__next__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/fromlast/test_.py": {
        "TestFromLast.setup_method": {
            "name": "setup_method",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFromLast.test_empty": {
            "name": "test_empty",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFromLast.test_zeroth": {
            "name": "test_zeroth",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFromLast.test_normal": {
            "name": "test_normal",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/fromlast/__init__.py": {},
    "AlgoStructuresPy-master/levelwidth/index.py": {
        "get_level_width": {
            "name": "get_level_width",
            "location": 28,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "children": []
            }
        },
        "Node.add": {
            "name": "add",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "AlgoStructuresPy-master/levelwidth/test_.py": {
        "test_get_level_width": {
            "name": "test_get_level_width",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/levelwidth/__init__.py": {},
    "AlgoStructuresPy-master/linkedlist/index.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "next": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LinkedList.clear": {
            "name": "clear",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.size": {
            "name": "size",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_at": {
            "name": "get_at",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.get_first": {
            "name": "get_first",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_last": {
            "name": "get_last",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.insert_at": {
            "name": "insert_at",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "data": []
            }
        },
        "LinkedList.insert_first": {
            "name": "insert_first",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.insert_last": {
            "name": "insert_last",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.remove_at": {
            "name": "remove_at",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.remove_first": {
            "name": "remove_first",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.remove_last": {
            "name": "remove_last",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.every": {
            "name": "every",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "LinkedList.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__next__": {
            "name": "__next__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/linkedlist/test_.py": {
        "TestLinkedList.setup_method": {
            "name": "setup_method",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_node_class": {
            "name": "test_node_class",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_linkedlist_class": {
            "name": "test_linkedlist_class",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_size": {
            "name": "test_size",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_clear": {
            "name": "test_clear",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_get_at": {
            "name": "test_get_at",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_get_first": {
            "name": "test_get_first",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_get_last": {
            "name": "test_get_last",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_insert_at": {
            "name": "test_insert_at",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_insert_first": {
            "name": "test_insert_first",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_insert_last": {
            "name": "test_insert_last",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_remove_at": {
            "name": "test_remove_at",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_remove_first": {
            "name": "test_remove_first",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_remove_last": {
            "name": "test_remove_last",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_every": {
            "name": "test_every",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_iteration": {
            "name": "test_iteration",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkedList.test_every.f": {
            "name": "f",
            "location": 181,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "AlgoStructuresPy-master/linkedlist/__init__.py": {},
    "AlgoStructuresPy-master/matrix/index.py": {
        "spiral_matrix": {
            "name": "spiral_matrix",
            "location": 20,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "AlgoStructuresPy-master/matrix/test_.py": {
        "test_spiral_matrix": {
            "name": "test_spiral_matrix",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/matrix/__init__.py": {},
    "AlgoStructuresPy-master/maxchar/index.py": {
        "max_char": {
            "name": "max_char",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "AlgoStructuresPy-master/maxchar/test_.py": {
        "test_max_char": {
            "name": "test_max_char",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/maxchar/__init__.py": {},
    "AlgoStructuresPy-master/midpoint/index.py": {
        "midpoint": {
            "name": "midpoint",
            "location": 1,
            "return": [],
            "arguments": {
                "llst": []
            }
        }
    },
    "AlgoStructuresPy-master/midpoint/linkedlist.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "next": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LinkedList.clear": {
            "name": "clear",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.size": {
            "name": "size",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_at": {
            "name": "get_at",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.get_first": {
            "name": "get_first",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_last": {
            "name": "get_last",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.insert_at": {
            "name": "insert_at",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "data": []
            }
        },
        "LinkedList.insert_first": {
            "name": "insert_first",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.insert_last": {
            "name": "insert_last",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.remove_at": {
            "name": "remove_at",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.remove_first": {
            "name": "remove_first",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.remove_last": {
            "name": "remove_last",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.every": {
            "name": "every",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "LinkedList.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__next__": {
            "name": "__next__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/midpoint/test_.py": {
        "TestMidpoint.setup_method": {
            "name": "setup_method",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMidpoint.test_empty": {
            "name": "test_empty",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMidpoint.test_odd": {
            "name": "test_odd",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMidpoint.test_even": {
            "name": "test_even",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/midpoint/__init__.py": {},
    "AlgoStructuresPy-master/palindrome/index.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "AlgoStructuresPy-master/palindrome/test_.py": {
        "test_is_palindrome": {
            "name": "test_is_palindrome",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/palindrome/__init__.py": {},
    "AlgoStructuresPy-master/pyramid/index.py": {
        "pyramid": {
            "name": "pyramid",
            "location": 32,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "AlgoStructuresPy-master/pyramid/test_.py": {
        "test_pyramid_success": {
            "name": "test_pyramid_success",
            "location": 4,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_pyramid_fail": {
            "name": "test_pyramid_fail",
            "location": 11,
            "return": [],
            "arguments": {
                "capsys": []
            }
        }
    },
    "AlgoStructuresPy-master/pyramid/__init__.py": {},
    "AlgoStructuresPy-master/qfroms/index.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue._reverse": {
            "name": "_reverse",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.peek": {
            "name": "peek",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/qfroms/test_.py": {
        "TestQueueFromStacks.setup_method": {
            "name": "setup_method",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFromStacks.enqueue_one_to_three": {
            "name": "enqueue_one_to_three",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFromStacks.test_enqueue": {
            "name": "test_enqueue",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFromStacks.test_dequeue": {
            "name": "test_dequeue",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFromStacks.test_order_fifo": {
            "name": "test_order_fifo",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueueFromStacks.test_peek": {
            "name": "test_peek",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/qfroms/__init__.py": {},
    "AlgoStructuresPy-master/queue/index.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/queue/test_.py": {
        "TestQueue.setup_method": {
            "name": "setup_method",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.enqueue_one_to_three": {
            "name": "enqueue_one_to_three",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_enqueue": {
            "name": "test_enqueue",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_dequeue": {
            "name": "test_dequeue",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/queue/__init__.py": {},
    "AlgoStructuresPy-master/reverseint/index.py": {
        "reverse_int": {
            "name": "reverse_int",
            "location": 13,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "AlgoStructuresPy-master/reverseint/test_.py": {
        "test_reverse_int": {
            "name": "test_reverse_int",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/reverseint/__init__.py": {},
    "AlgoStructuresPy-master/reversestring/index.py": {
        "reverse_string": {
            "name": "reverse_string",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "AlgoStructuresPy-master/reversestring/test_.py": {
        "test_reverse_string": {
            "name": "test_reverse_string",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/reversestring/__init__.py": {},
    "AlgoStructuresPy-master/sorting/index.py": {},
    "AlgoStructuresPy-master/sorting/__init__.py": {},
    "AlgoStructuresPy-master/stack/index.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/stack/test_.py": {
        "TestStack.setup_method": {
            "name": "setup_method",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStack.push_one_to_three": {
            "name": "push_one_to_three",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_push_pop": {
            "name": "test_push_pop",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_order_filo": {
            "name": "test_order_filo",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_peek": {
            "name": "test_peek",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/stack/__init__.py": {},
    "AlgoStructuresPy-master/steps/index.py": {
        "steps": {
            "name": "steps",
            "location": 22,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "AlgoStructuresPy-master/steps/test_.py": {
        "test_steps_success": {
            "name": "test_steps_success",
            "location": 4,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_steps_fail": {
            "name": "test_steps_fail",
            "location": 11,
            "return": [],
            "arguments": {
                "capsys": []
            }
        }
    },
    "AlgoStructuresPy-master/steps/__init__.py": {},
    "AlgoStructuresPy-master/tree/index.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "children": []
            }
        },
        "Node.add": {
            "name": "add",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Node.remove": {
            "name": "remove",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Tree.traverse_breadth": {
            "name": "traverse_breadth",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Tree.traverse_depth": {
            "name": "traverse_depth",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        }
    },
    "AlgoStructuresPy-master/tree/test_.py": {
        "TestTree.setup_method": {
            "name": "setup_method",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.teardown_method": {
            "name": "teardown_method",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_node_properties": {
            "name": "test_node_properties",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_node_add_children": {
            "name": "test_node_add_children",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_node_remove_children": {
            "name": "test_node_remove_children",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_tree_properties": {
            "name": "test_tree_properties",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_tree_traverse_breadth": {
            "name": "test_tree_traverse_breadth",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_tree_traverse_depth": {
            "name": "test_tree_traverse_depth",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_tree_traverse_breadth.f": {
            "name": "f",
            "location": 56,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "TestTree.test_tree_traverse_depth.f": {
            "name": "f",
            "location": 68,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "AlgoStructuresPy-master/tree/__init__.py": {},
    "AlgoStructuresPy-master/validate/index.py": {
        "is_binary_search_tree": {
            "name": "is_binary_search_tree",
            "location": 32,
            "return": [],
            "arguments": {
                "node": [],
                "min": [],
                "max": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "left": [],
                "right": []
            }
        },
        "Node.insert": {
            "name": "insert",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "AlgoStructuresPy-master/validate/test_.py": {
        "TestBinarySearchTreeValidator.test_valid": {
            "name": "test_valid",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinarySearchTreeValidator.test_invalid": {
            "name": "test_invalid",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/validate/__init__.py": {},
    "AlgoStructuresPy-master/vowels/index.py": {
        "vowels": {
            "name": "vowels",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "AlgoStructuresPy-master/vowels/test_.py": {
        "test_vowels": {
            "name": "test_vowels",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "AlgoStructuresPy-master/vowels/__init__.py": {},
    "AlgoStructuresPy-master/weave/index.py": {
        "weave": {
            "name": "weave",
            "location": 29,
            "return": [],
            "arguments": {
                "queue_one": [],
                "queue_two": []
            }
        }
    },
    "AlgoStructuresPy-master/weave/queue.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.peek": {
            "name": "peek",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/weave/test_.py": {
        "TestWeaveFunction.setup_method": {
            "name": "setup_method",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWeaveFunction.test_weave": {
            "name": "test_weave",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AlgoStructuresPy-master/weave/__init__.py": {}
}
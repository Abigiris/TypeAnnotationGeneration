{
    "Ann-master/src/backend/setup.py": {},
    "Ann-master/src/backend/qaweb/app.py": {
        "read_config": {
            "name": "read_config",
            "location": 24,
            "return": [
                "Dict"
            ],
            "arguments": {
                "config_path": [
                    "str"
                ]
            }
        },
        "setup_routes": {
            "name": "setup_routes",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "web.Application"
                ]
            }
        },
        "start_app": {
            "name": "start_app",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "config_path": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "socket_path": [
                    "Optional[str]"
                ]
            }
        }
    },
    "Ann-master/src/backend/qaweb/connectors.py": {
        "setup_connectors": {
            "name": "setup_connectors",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "web.Application"
                ]
            }
        },
        "BaseConnector.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "read_timeout": [
                    "int"
                ],
                "conn_timeout": [
                    "int"
                ]
            }
        },
        "SaaSConnector.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SaaSConnector.get_wikipage": {
            "name": "get_wikipage",
            "location": 50,
            "return": [
                "aiowiki.Page"
            ],
            "arguments": {
                "self": [],
                "title": []
            }
        },
        "RedisConnector.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "master_name": [
                    "str"
                ]
            }
        },
        "NetConnector.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Ann-master/src/backend/qaweb/custom_prepro.py": {
        "CustomPrepro.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "meta_file": []
            }
        },
        "CustomPrepro.prepro": {
            "name": "prepro",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "question": []
            }
        },
        "CustomPrepro.prepro_text": {
            "name": "prepro_text",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "CustomPrepro.prepro_crossed": {
            "name": "prepro_crossed",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "context_features": [],
                "question_features": []
            }
        }
    },
    "Ann-master/src/backend/qaweb/prepro.py": {
        "clean_spaces": {
            "name": "clean_spaces",
            "location": 6,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_text": {
            "name": "normalize_text",
            "location": 12,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "annotate_single": {
            "name": "annotate_single",
            "location": 16,
            "return": [],
            "arguments": {
                "text": [],
                "init_nlp": []
            }
        },
        "annotate_crossed": {
            "name": "annotate_crossed",
            "location": 34,
            "return": [],
            "arguments": {
                "context_features": [],
                "question_features": [],
                "wv_cased": []
            }
        },
        "annotate": {
            "name": "annotate",
            "location": 64,
            "return": [],
            "arguments": {
                "row": [],
                "wv_cased": [],
                "init_nlp": []
            }
        },
        "to_id": {
            "name": "to_id",
            "location": 71,
            "return": [],
            "arguments": {
                "row": [],
                "w2id": [],
                "tag2id": [],
                "ent2id": [],
                "unk_id": []
            }
        }
    },
    "Ann-master/src/backend/qaweb/schemas.py": {},
    "Ann-master/src/backend/qaweb/views.py": {},
    "Ann-master/src/backend/qaweb/__init__.py": {},
    "Ann-master/src/model/setup.py": {},
    "Ann-master/src/model/bertynet/app.py": {
        "get_model_answer": {
            "name": "get_model_answer",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "Ann-master/src/model/bertynet/BatchGen.py": {
        "BatchGen.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "batch_size": [],
                "evaluation": []
            }
        },
        "BatchGen.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchGen.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Ann-master/src/model/bertynet/BertyNet.py": {
        "BertyNet.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "opt": [],
                "glove_embeddings": []
            }
        },
        "BertyNet._build_model": {
            "name": "_build_model",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertyNet.prepare_input": {
            "name": "prepare_input",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "batch_data": [],
                "evaluation": []
            }
        },
        "BertyNet._get_bert_embeddings": {
            "name": "_get_bert_embeddings",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "question_tokens": [],
                "context_tokens": [],
                "answer_end_idx": []
            }
        },
        "BertyNet._get_bert_embeddings_for_batch": {
            "name": "_get_bert_embeddings_for_batch",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "batch_data": [],
                "evaluation": []
            }
        },
        "BertyNet._encode_forward": {
            "name": "_encode_forward",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "prepared_input": []
            }
        },
        "BertyNet._decode_forward": {
            "name": "_decode_forward",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "question_info": [],
                "context_info": [],
                "question_plaus_info": [],
                "context_plaus_info": [],
                "question_mask": [],
                "context_mask": []
            }
        },
        "BertyNet.compute_loss": {
            "name": "compute_loss",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "logits_s": [],
                "logits_e": [],
                "logits_plaus_s": [],
                "logits_plaus_e": [],
                "logits_answerable": [],
                "start_idx": [],
                "end_idx": [],
                "plaus_start_idx": [],
                "plaus_end_idx": [],
                "has_answer": []
            }
        },
        "BertyNet.forward": {
            "name": "forward",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "prepared_input": []
            }
        },
        "BertyNet._compute_mask": {
            "name": "_compute_mask",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BertyNet.reset_fixed_embeddings": {
            "name": "reset_fixed_embeddings",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertyNet._get_bert_embeddings.get_wordpiece_tokenization": {
            "name": "get_wordpiece_tokenization",
            "location": 289,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "BertyNet._get_bert_embeddings.truncate_sequence": {
            "name": "truncate_sequence",
            "location": 307,
            "return": [],
            "arguments": {
                "seq_tokens": [],
                "mapping": [],
                "desired_len": []
            }
        },
        "BertyNet._get_bert_embeddings.embed_joint": {
            "name": "embed_joint",
            "location": 313,
            "return": [],
            "arguments": {
                "question_wp_tokens": [],
                "context_wp_tokens": [],
                "question_mapping": [],
                "context_mapping": []
            }
        },
        "BertyNet._get_bert_embeddings.embed_separately": {
            "name": "embed_separately",
            "location": 337,
            "return": [],
            "arguments": {
                "seq_tokens": [],
                "seq_mapping": []
            }
        }
    },
    "Ann-master/src/model/bertynet/CloudModelWrapper.py": {
        "CloudModelWrapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CloudModelWrapper.load_embeddings_and_update_opt_": {
            "name": "load_embeddings_and_update_opt_",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CloudModelWrapper.generate_model_answers": {
            "name": "generate_model_answers",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "preprocessed_data": []
            }
        }
    },
    "Ann-master/src/model/bertynet/layers.py": {
        "variational_dropout": {
            "name": "variational_dropout",
            "location": 6,
            "return": [],
            "arguments": {
                "x": [],
                "dropout_rate": [],
                "training": [],
                "use_cuda": []
            }
        },
        "dropout": {
            "name": "dropout",
            "location": 19,
            "return": [],
            "arguments": {
                "x": [],
                "dropout_rate": [],
                "training": [],
                "dropout_type": [],
                "use_cuda": []
            }
        },
        "StackedBRNN.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "num_layers": [],
                "dropout_rate": [],
                "dropout_output": [],
                "rnn_type": [],
                "concat_layers": [],
                "padding": []
            }
        },
        "StackedBRNN.forward": {
            "name": "forward",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "StackedBRNN._forward_unpadded": {
            "name": "_forward_unpadded",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "StackedBRNN._forward_padded": {
            "name": "_forward_padded",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "FullAttention.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "dropout_rate": [],
                "dropout_type": [],
                "use_cuda": []
            }
        },
        "FullAttention.forward": {
            "name": "forward",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "keys": [],
                "values_1": [],
                "values_1_mask": [],
                "values_2": [],
                "values_2_mask": []
            }
        },
        "Summarize.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "dropout_rate": [],
                "dropout_type": [],
                "use_cuda": []
            }
        },
        "Summarize.forward": {
            "name": "forward",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "mask": []
            }
        },
        "PointerNet.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "dropout_rate": [],
                "dropout_type": [],
                "use_cuda": []
            }
        },
        "PointerNet.forward": {
            "name": "forward",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "x_mask": []
            }
        }
    },
    "Ann-master/src/model/bertynet/model.py": {
        "BertyModel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "opt": [],
                "embeddings": [],
                "state_dict": []
            }
        },
        "BertyModel.build_optimizer": {
            "name": "build_optimizer",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertyModel.update": {
            "name": "update",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "BertyModel.predict": {
            "name": "predict",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "BertyModel.infer": {
            "name": "infer",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "BertyModel.save": {
            "name": "save",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "epoch": []
            }
        },
        "BertyModel.cuda": {
            "name": "cuda",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Ann-master/src/model/bertynet/prepro.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "flatten_json": {
            "name": "flatten_json",
            "location": 159,
            "return": [],
            "arguments": {
                "data_file": [],
                "mode": []
            }
        },
        "clean_spaces": {
            "name": "clean_spaces",
            "location": 183,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_text": {
            "name": "normalize_text",
            "location": 188,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "init": {
            "name": "init",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "annotate_single": {
            "name": "annotate_single",
            "location": 198,
            "return": [],
            "arguments": {
                "text": [],
                "init_nlp": []
            }
        },
        "annotate_crossed": {
            "name": "annotate_crossed",
            "location": 215,
            "return": [],
            "arguments": {
                "context_features": [],
                "question_features": [],
                "wv_cased": []
            }
        },
        "annotate": {
            "name": "annotate",
            "location": 244,
            "return": [],
            "arguments": {
                "row": [],
                "wv_cased": [],
                "init_nlp": [],
                "calc_cross_features": []
            }
        },
        "index_answer": {
            "name": "index_answer",
            "location": 250,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "build_vocab": {
            "name": "build_vocab",
            "location": 264,
            "return": [],
            "arguments": {
                "questions": [],
                "contexts": [],
                "wv_vocab": [],
                "sort_all": []
            }
        },
        "to_id": {
            "name": "to_id",
            "location": 283,
            "return": [],
            "arguments": {
                "row": [],
                "w2id": [],
                "tag2id": [],
                "ent2id": [],
                "unk_id": []
            }
        }
    },
    "Ann-master/src/model/bertynet/train.py": {
        "setup": {
            "name": "setup",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "load_data": {
            "name": "load_data",
            "location": 126,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "main": {
            "name": "main",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "setup.ProgressHandler.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "setup.ProgressHandler.emit": {
            "name": "emit",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Ann-master/src/model/bertynet/utils.py": {
        "str2bool": {
            "name": "str2bool",
            "location": 7,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "_normalize_answer": {
            "name": "_normalize_answer",
            "location": 39,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_exact_match": {
            "name": "_exact_match",
            "location": 56,
            "return": [],
            "arguments": {
                "pred": [],
                "has_ans": [],
                "answers_true": [],
                "has_ans_true": []
            }
        },
        "_f1_score": {
            "name": "_f1_score",
            "location": 68,
            "return": [],
            "arguments": {
                "pred": [],
                "has_ans": [],
                "answers_true": [],
                "has_ans_true": []
            }
        },
        "score": {
            "name": "score",
            "location": 88,
            "return": [],
            "arguments": {
                "predictions": [],
                "is_answerable": [],
                "dev_answer_info": []
            }
        },
        "AverageMeter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "AverageMeter.state_dict": {
            "name": "state_dict",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AverageMeter.load": {
            "name": "load",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "state_dict": []
            }
        },
        "AverageMeter.update": {
            "name": "update",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "_normalize_answer.remove_articles": {
            "name": "remove_articles",
            "location": 40,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_normalize_answer.white_space_fix": {
            "name": "white_space_fix",
            "location": 43,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_normalize_answer.remove_punc": {
            "name": "remove_punc",
            "location": 46,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_normalize_answer.lower": {
            "name": "lower",
            "location": 50,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_f1_score._score": {
            "name": "_score",
            "location": 69,
            "return": [],
            "arguments": {
                "g_tokens": [],
                "a_tokens": []
            }
        }
    },
    "Ann-master/src/model/bertynet/__init__.py": {}
}
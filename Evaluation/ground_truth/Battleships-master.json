{
    "Battleships-master/params.py": {},
    "Battleships-master/battleships/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "FieldTypeGrid"
                ],
                "number_of_ship_fields_to_mark_in_series": [
                    "Dict[(Series, List[int])]"
                ]
            }
        },
        "Board.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.__eq__": {
            "name": "__eq__",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Board.parse_board": {
            "name": "parse_board",
            "location": 80,
            "return": [
                "'Board'"
            ],
            "arguments": {
                "cls": [],
                "grid": [
                    "FieldTypeGrid"
                ],
                "number_of_ship_fields_to_mark_in_rows": [
                    "List[int]"
                ],
                "number_of_ship_fields_to_mark_in_cols": [
                    "List[int]"
                ]
            }
        },
        "Board.get_copy_of": {
            "name": "get_copy_of",
            "location": 127,
            "return": [
                "'Board'"
            ],
            "arguments": {
                "cls": [],
                "original_board": [
                    "'Board'"
                ]
            }
        },
        "Board.size": {
            "name": "size",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.repr": {
            "name": "repr",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "with_ship_fields_to_mark_count": [
                    "bool"
                ]
            }
        },
        "Board.set_ship_fields_as_unknown": {
            "name": "set_ship_fields_as_unknown",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ship_fields_positions": [
                    "Set[Position]"
                ]
            }
        },
        "Board.get_ship_fields_positions": {
            "name": "get_ship_fields_positions",
            "location": 230,
            "return": [
                "Set[Position]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.mark_sea_in_series_with_no_rem_ship_fields": {
            "name": "mark_sea_in_series_with_no_rem_ship_fields",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.mark_diagonal_sea_fields_for_positions": {
            "name": "mark_diagonal_sea_fields_for_positions",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ship_fields_positions": [
                    "Set[Position]"
                ]
            }
        },
        "Board.ship_is_within_playable_grid": {
            "name": "ship_is_within_playable_grid",
            "location": 284,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ship": [
                    "Ship"
                ]
            }
        },
        "Board.sufficient_remaining_ship_fields_to_mark_ship": {
            "name": "sufficient_remaining_ship_fields_to_mark_ship",
            "location": 307,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ship": [
                    "Ship"
                ]
            }
        },
        "Board.no_disallowed_overlapping_fields_for_ship": {
            "name": "no_disallowed_overlapping_fields_for_ship",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ship": [
                    "Ship"
                ]
            }
        },
        "Board.can_fit_ship": {
            "name": "can_fit_ship",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ship": [
                    "Ship"
                ]
            }
        },
        "Board.mark_ship_group": {
            "name": "mark_ship_group",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ships_to_mark": [
                    "Iterable[Ship]"
                ]
            }
        },
        "Board.find_definite_ship_fields_positions": {
            "name": "find_definite_ship_fields_positions",
            "location": 395,
            "return": [
                "Set[Position]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_possible_ships_occupying_positions": {
            "name": "get_possible_ships_occupying_positions",
            "location": 454,
            "return": [
                "Dict[(Position, Set[Ship])]"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "Set[Position]"
                ],
                "ship_sizes": [
                    "Iterable[int]"
                ]
            }
        },
        "Board.get_possible_ships_of_size": {
            "name": "get_possible_ships_of_size",
            "location": 511,
            "return": [
                "Set[Ship]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Board.mark_ship_and_surrounding_sea": {
            "name": "mark_ship_and_surrounding_sea",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ship": [
                    "Ship"
                ]
            }
        },
        "Board.is_overmarked": {
            "name": "is_overmarked",
            "location": 566,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Battleships-master/battleships/fleet.py": {
        "Fleet.distinct_ship_sizes": {
            "name": "distinct_ship_sizes",
            "location": 24,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fleet.longest_ship_size": {
            "name": "longest_ship_size",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fleet.has_ships_remaining": {
            "name": "has_ships_remaining",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fleet.size_of_subfleet": {
            "name": "size_of_subfleet",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ship_size": [
                    "int"
                ]
            }
        },
        "Fleet.add_ships_of_size": {
            "name": "add_ships_of_size",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ship_size": [
                    "int"
                ],
                "quantity": [
                    "int"
                ]
            }
        },
        "Fleet.remove_ship_of_size": {
            "name": "remove_ship_of_size",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ship_size": [
                    "int"
                ]
            }
        },
        "Fleet.get_copy_of": {
            "name": "get_copy_of",
            "location": 102,
            "return": [
                "'Fleet'"
            ],
            "arguments": {
                "cls": [],
                "original_fleet": [
                    "'Fleet'"
                ]
            }
        }
    },
    "Battleships-master/battleships/grid.py": {
        "Series.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldTypeGrid.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldTypeGrid.get_series": {
            "name": "get_series",
            "location": 66,
            "return": [
                "List[FieldType]"
            ],
            "arguments": {
                "self": [],
                "series": [
                    "Series"
                ],
                "series_index": [
                    "int"
                ],
                "complementary_series_slice": [
                    "Optional[slice]"
                ]
            }
        },
        "FieldTypeGrid.fieldtype_count_in_series": {
            "name": "fieldtype_count_in_series",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "fieldtype": [
                    "FieldType"
                ],
                "series": [
                    "Series"
                ],
                "series_index": [
                    "int"
                ],
                "complementary_series_slice": [
                    "Optional[slice]"
                ]
            }
        },
        "FieldTypeGrid.fieldtype_positions_in_series": {
            "name": "fieldtype_positions_in_series",
            "location": 133,
            "return": [
                "Set[Position]"
            ],
            "arguments": {
                "self": [],
                "fieldtype": [
                    "FieldType"
                ],
                "series": [
                    "Series"
                ],
                "series_index": [
                    "int"
                ]
            }
        },
        "FieldTypeGrid.replace_fields_in_series": {
            "name": "replace_fields_in_series",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fieldtype_old": [
                    "FieldType"
                ],
                "fieldtype_new": [
                    "FieldType"
                ],
                "series": [
                    "Series"
                ],
                "series_index": [
                    "int"
                ]
            }
        },
        "FieldTypeGrid.replace_fields_in_series.replace_in_row": {
            "name": "replace_in_row",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "row_index": [
                    "int"
                ]
            }
        },
        "FieldTypeGrid.replace_fields_in_series.replace_in_column": {
            "name": "replace_in_column",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "column_index": [
                    "int"
                ]
            }
        }
    },
    "Battleships-master/battleships/puzzle.py": {
        "Puzzle.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "Board"
                ],
                "fleet": [
                    "Fleet"
                ]
            }
        },
        "Puzzle.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Puzzle.parse_input_data_from_file": {
            "name": "parse_input_data_from_file",
            "location": 80,
            "return": [
                "InputData"
            ],
            "arguments": {
                "input_file_path": [
                    "pathlib.Path"
                ]
            }
        },
        "Puzzle.load_puzzle": {
            "name": "load_puzzle",
            "location": 120,
            "return": [
                "'Puzzle'"
            ],
            "arguments": {
                "cls": [],
                "path": [
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "Puzzle.ship_group_exceeds_fleet": {
            "name": "ship_group_exceeds_fleet",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ship_group": [
                    "Iterable[Ship]"
                ]
            }
        },
        "Puzzle.get_possible_puzzles": {
            "name": "get_possible_puzzles",
            "location": 170,
            "return": [
                "List['Puzzle']"
            ],
            "arguments": {
                "self": [],
                "ships_occupying_position": [
                    "Dict[(Position, Set[Ship])]"
                ]
            }
        },
        "Puzzle.mark_subfleet_of_biggest_remaining_ships": {
            "name": "mark_subfleet_of_biggest_remaining_ships",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Puzzle.mark_ship_group": {
            "name": "mark_ship_group",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ship_group": [
                    "Iterable[Ship]"
                ]
            }
        },
        "Puzzle.try_to_cover_all_ship_fields_to_be": {
            "name": "try_to_cover_all_ship_fields_to_be",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ship_fields_to_be": [
                    "Set[Position]"
                ]
            }
        },
        "Puzzle.decide_how_to_proceed": {
            "name": "decide_how_to_proceed",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "explicit_ship_fields_to_be": [
                    "Optional[Set[Position]]"
                ]
            }
        },
        "Puzzle.solve": {
            "name": "solve",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Puzzle.print_solutions": {
            "name": "print_solutions",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Puzzle.run": {
            "name": "run",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "ofile": [
                    "TextIO"
                ]
            }
        },
        "Puzzle.get_possible_puzzles.get_coverings": {
            "name": "get_coverings",
            "location": 193,
            "return": [
                "Dict[(Ship, Set[Position])]"
            ],
            "arguments": {
                "ships_occupying_position": [
                    "Dict[(Position, Set[Ship])]"
                ]
            }
        },
        "Puzzle.get_possible_puzzles.find_puzzles": {
            "name": "find_puzzles",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "ship_group": [
                    "Set[Ship]"
                ],
                "covered_positions": [
                    "Set[Position]"
                ],
                "positions_to_cover": [
                    "List[Position]"
                ],
                "available_coverings": [
                    "Dict[(Ship, Set[Position])]"
                ],
                "puzzle": [
                    "Puzzle"
                ]
            }
        }
    },
    "Battleships-master/battleships/ship.py": {
        "ShipGrid.get_grid": {
            "name": "get_grid",
            "location": 21,
            "return": [
                "FieldTypeGrid"
            ],
            "arguments": {
                "cls": [],
                "ship_size": [
                    "int"
                ],
                "orientation": [
                    "Series"
                ]
            }
        },
        "Ship.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "Position"
                ],
                "size": [
                    "int"
                ],
                "orientation": [
                    "Series"
                ]
            }
        },
        "Ship.grid": {
            "name": "grid",
            "location": 112,
            "return": [
                "FieldTypeGrid"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ship.ship_fields_count_in_series": {
            "name": "ship_fields_count_in_series",
            "location": 123,
            "return": [
                "Dict[(Series, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ship.max_ship_field_index_in_series": {
            "name": "max_ship_field_index_in_series",
            "location": 139,
            "return": [
                "Dict[(Series, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ship._create_reach_object": {
            "name": "_create_reach_object",
            "location": 161,
            "return": [
                "Dict[(Series, Any)]"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[(..., GenericType)]"
                ],
                "zoc": [
                    "bool"
                ]
            }
        },
        "Ship.ship_fields_range": {
            "name": "ship_fields_range",
            "location": 206,
            "return": [
                "Dict[(Series, range)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ship.ship_fields_slice": {
            "name": "ship_fields_slice",
            "location": 219,
            "return": [
                "Dict[(Series, slice)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ship.zoc_slice": {
            "name": "zoc_slice",
            "location": 232,
            "return": [
                "Dict[(Series, slice)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShipGrid.get_grid.generate_grid": {
            "name": "generate_grid",
            "location": 34,
            "return": [
                "FieldTypeGrid"
            ],
            "arguments": {
                "ship_size": [
                    "int"
                ],
                "orientation": [
                    "Series"
                ]
            }
        },
        "Ship._create_reach_object.reach_limits": {
            "name": "reach_limits",
            "location": 179,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "min_value": [
                    "int"
                ],
                "max_value": [
                    "int"
                ],
                "zoc": [
                    "bool"
                ]
            }
        },
        "ShipGrid.get_grid.generate_grid.generate_grid_with_row_orientation": {
            "name": "generate_grid_with_row_orientation",
            "location": 35,
            "return": [
                "FieldTypeGrid"
            ],
            "arguments": {
                "ship_size": [
                    "int"
                ]
            }
        },
        "ShipGrid.get_grid.generate_grid.generate_grid_with_column_orientation": {
            "name": "generate_grid_with_column_orientation",
            "location": 44,
            "return": [
                "FieldTypeGrid"
            ],
            "arguments": {
                "ship_size": [
                    "int"
                ]
            }
        }
    },
    "Battleships-master/battleships/__init__.py": {},
    "Battleships-master/battleships/__main__.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Battleships-master/test/__init__.py": {},
    "Battleships-master/test/integration/test_puzzle_solutions.py": {
        "IntegrationTests.test_puzzle_solutions": {
            "name": "test_puzzle_solutions",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Battleships-master/test/integration/__init__.py": {},
    "Battleships-master/test/unit/test_board.py": {
        "parse_board": {
            "name": "parse_board",
            "location": 12,
            "return": [],
            "arguments": {
                "board_repr": []
            }
        },
        "TestBoard.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test___init__": {
            "name": "test___init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test___repr__": {
            "name": "test___repr__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "mock_repr": []
            }
        },
        "TestBoard.test___eq__": {
            "name": "test___eq__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_parse_board": {
            "name": "test_parse_board",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_get_copy_of": {
            "name": "test_get_copy_of",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_size": {
            "name": "test_size",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_repr": {
            "name": "test_repr",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_set_ship_fields_as_unknown": {
            "name": "test_set_ship_fields_as_unknown",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_get_ship_fields_positions": {
            "name": "test_get_ship_fields_positions",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_mark_sea_in_series_with_no_rem_ship_fields": {
            "name": "test_mark_sea_in_series_with_no_rem_ship_fields",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_mark_diagonal_sea_fields_for_positions": {
            "name": "test_mark_diagonal_sea_fields_for_positions",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_ship_is_within_playable_grid": {
            "name": "test_ship_is_within_playable_grid",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_sufficient_remaining_ship_fields_to_mark_ship": {
            "name": "test_sufficient_remaining_ship_fields_to_mark_ship",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_no_disallowed_overlapping_fields_for_ship": {
            "name": "test_no_disallowed_overlapping_fields_for_ship",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_can_fit_ship": {
            "name": "test_can_fit_ship",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "mock_ship_is_within_playable_grid": [],
                "mock_sufficient_remaining_ship_fields_to_mark_ship": [],
                "mock_no_disallowed_overlapping_fields_for_ship": []
            }
        },
        "TestBoard.test_simulate_marking_of_ships": {
            "name": "test_simulate_marking_of_ships",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_find_definite_ship_fields_positions": {
            "name": "test_find_definite_ship_fields_positions",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_get_possible_ships_occupying_positions": {
            "name": "test_get_possible_ships_occupying_positions",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_get_possible_ships_of_size": {
            "name": "test_get_possible_ships_of_size",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_mark_ship_and_surrounding_sea": {
            "name": "test_mark_ship_and_surrounding_sea",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBoard.test_is_overmarked": {
            "name": "test_is_overmarked",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Battleships-master/test/unit/test_fleet.py": {
        "FleetTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetTest.test_distinct_ship_sizes": {
            "name": "test_distinct_ship_sizes",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetTest.test_longest_ship_size": {
            "name": "test_longest_ship_size",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetTest.test_has_ships_remaining": {
            "name": "test_has_ships_remaining",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetTest.test_size_of_subfleet": {
            "name": "test_size_of_subfleet",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetTest.test_add_ships_of_size": {
            "name": "test_add_ships_of_size",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetTest.test_remove_ship_of_size": {
            "name": "test_remove_ship_of_size",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetTest.test_get_copy_of": {
            "name": "test_get_copy_of",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Battleships-master/test/unit/test_grid.py": {
        "parse_fieldtypegrid": {
            "name": "parse_fieldtypegrid",
            "location": 13,
            "return": [],
            "arguments": {
                "repr_string": []
            }
        },
        "TestSeries.test___repr__": {
            "name": "test___repr__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFieldTypeGrid.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFieldTypeGrid.fieldtype_vector_from_str": {
            "name": "fieldtype_vector_from_str",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "fieldtype_series_str": []
            }
        },
        "TestFieldTypeGrid.test___repr__": {
            "name": "test___repr__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFieldTypeGrid.test_get_series": {
            "name": "test_get_series",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFieldTypeGrid.test_fieldtype_count_in_series": {
            "name": "test_fieldtype_count_in_series",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFieldTypeGrid.test_fieldtype_positions_in_series": {
            "name": "test_fieldtype_positions_in_series",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFieldTypeGrid.test_replace_fields_in_series": {
            "name": "test_replace_fields_in_series",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Battleships-master/test/unit/test_puzzle.py": {
        "TestPuzzle.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.hashable_object_from_puzzle": {
            "name": "hashable_object_from_puzzle",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "puzzle": []
            }
        },
        "TestPuzzle.test___init__": {
            "name": "test___init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.test___eq__": {
            "name": "test___eq__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.test_parse_input_data_from_file": {
            "name": "test_parse_input_data_from_file",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_print": []
            }
        },
        "TestPuzzle.test_load_puzzle": {
            "name": "test_load_puzzle",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.test_ship_group_exceeds_fleet": {
            "name": "test_ship_group_exceeds_fleet",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.test_get_possible_puzzles": {
            "name": "test_get_possible_puzzles",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.test_mark_subfleet_of_biggest_remaining_ships": {
            "name": "test_mark_subfleet_of_biggest_remaining_ships",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.test_mark_ship_group": {
            "name": "test_mark_ship_group",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_decide_how_to_proceed": []
            }
        },
        "TestPuzzle.test_try_to_cover_all_ship_fields_to_be": {
            "name": "test_try_to_cover_all_ship_fields_to_be",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_decide_how_to_proceed": []
            }
        },
        "TestPuzzle.test_decide_how_to_proceed": {
            "name": "test_decide_how_to_proceed",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_find_definite_ship_fields_positions": [],
                "mocked_try_to_cover_all_ship_fields_to_be": [],
                "mocked_mark_subfleet_of_biggest_remaining_ships": []
            }
        },
        "TestPuzzle.test_solve": {
            "name": "test_solve",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPuzzle.test_print_solutions": {
            "name": "test_print_solutions",
            "location": 808,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_print": []
            }
        },
        "TestPuzzle.test_run": {
            "name": "test_run",
            "location": 826,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Battleships-master/test/unit/test_ship.py": {
        "ShipGridTest.test_get_grid": {
            "name": "test_get_grid",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShipTest.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShipTest.test_grid": {
            "name": "test_grid",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_shipgrid_grids": []
            }
        },
        "ShipTest.test_ship_fields_count_in_series": {
            "name": "test_ship_fields_count_in_series",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShipTest.test_max_ship_field_index_in_series": {
            "name": "test_max_ship_field_index_in_series",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShipTest.test_create_reach_object": {
            "name": "test_create_reach_object",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShipTest.test_ship_fields_range": {
            "name": "test_ship_fields_range",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "mock_create_reach_object": []
            }
        },
        "ShipTest.test_ship_fields_slice": {
            "name": "test_ship_fields_slice",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "mock_create_reach_object": []
            }
        },
        "ShipTest.test_zoc_slice": {
            "name": "test_zoc_slice",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "mock_create_reach_object": []
            }
        }
    },
    "Battleships-master/test/unit/test___main__.py": {
        "TestMain.test_run": {
            "name": "test_run",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "mock_puzzle": []
            }
        }
    },
    "Battleships-master/test/unit/__init__.py": {}
}
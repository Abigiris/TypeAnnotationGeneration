{
    "CategoryLearning-master/wandb_logger.py": {
        "log_results": {
            "name": "log_results",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "RelationCache[(NodeType, ArrowType)]"
                ],
                "matched": [
                    "DirectedGraph[NodeType]"
                ]
            }
        },
        "save_params": {
            "name": "save_params",
            "location": 74,
            "return": [],
            "arguments": {
                "model": [
                    "TrainableDecisionCatModel"
                ]
            }
        },
        "save_file": {
            "name": "save_file",
            "location": 87,
            "return": [],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/algebra_models.py": {
        "Algebra.flatdim": {
            "name": "flatdim",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algebra.dim": {
            "name": "dim",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algebra.unit": {
            "name": "unit",
            "location": 40,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data_tuple": [
                    "torch.Tensor"
                ]
            }
        },
        "Algebra.comp": {
            "name": "comp",
            "location": 50,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data1": [
                    "torch.Tensor"
                ],
                "data2": [
                    "torch.Tensor"
                ]
            }
        },
        "Algebra.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algebra.equals": {
            "name": "equals",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "torch.Tensor"
                ],
                "right": [
                    "torch.Tensor"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "VectAlgebra.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int"
                ]
            }
        },
        "VectAlgebra.dim": {
            "name": "dim",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectAlgebra.flatdim": {
            "name": "flatdim",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectAlgebra.unit": {
            "name": "unit",
            "location": 107,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data_tuple": [
                    "torch.Tensor"
                ]
            }
        },
        "VectAlgebra.comp": {
            "name": "comp",
            "location": 116,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data1": [
                    "torch.Tensor"
                ],
                "data2": [
                    "torch.Tensor"
                ]
            }
        },
        "VectMultAlgebra.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int"
                ]
            }
        },
        "VectMultAlgebra.dim": {
            "name": "dim",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectMultAlgebra.flatdim": {
            "name": "flatdim",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectMultAlgebra.unit": {
            "name": "unit",
            "location": 160,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data_tuple": [
                    "torch.Tensor"
                ]
            }
        },
        "VectMultAlgebra.comp": {
            "name": "comp",
            "location": 169,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data1": [
                    "torch.Tensor"
                ],
                "data2": [
                    "torch.Tensor"
                ]
            }
        },
        "MatrixAlgebra.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int"
                ]
            }
        },
        "MatrixAlgebra.dim": {
            "name": "dim",
            "location": 198,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixAlgebra.flatdim": {
            "name": "flatdim",
            "location": 205,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixAlgebra.viewmat": {
            "name": "viewmat",
            "location": 211,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "vect": [
                    "torch.Tensor"
                ]
            }
        },
        "MatrixAlgebra.unit": {
            "name": "unit",
            "location": 224,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data_tuple": [
                    "torch.Tensor"
                ]
            }
        },
        "MatrixAlgebra.comp": {
            "name": "comp",
            "location": 247,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data1": [
                    "torch.Tensor"
                ],
                "data2": [
                    "torch.Tensor"
                ]
            }
        },
        "AffineAlgebra.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int"
                ]
            }
        },
        "AffineAlgebra.dim": {
            "name": "dim",
            "location": 293,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineAlgebra.flatdim": {
            "name": "flatdim",
            "location": 300,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffineAlgebra.viewmat": {
            "name": "viewmat",
            "location": 307,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "aff": [
                    "torch.Tensor"
                ]
            }
        },
        "AffineAlgebra.viewvect": {
            "name": "viewvect",
            "location": 323,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "aff": [
                    "torch.Tensor"
                ]
            }
        },
        "AffineAlgebra.unit": {
            "name": "unit",
            "location": 334,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data_tuple": [
                    "torch.Tensor"
                ]
            }
        },
        "AffineAlgebra.comp": {
            "name": "comp",
            "location": 361,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data1": [
                    "torch.Tensor"
                ],
                "data2": [
                    "torch.Tensor"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/categorical_model.py": {
        "RelationModel.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Tsor"
                ],
                "dst": [
                    "Tsor"
                ],
                "rel": [
                    "ArrowType"
                ]
            }
        },
        "ScoringModel.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Tsor"
                ],
                "dst": [
                    "Tsor"
                ],
                "rel": [
                    "Tsor"
                ]
            }
        },
        "DecisionCatModel.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relation_model": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(ArrowType, Tsor)]"
                ],
                "scoring_model": [
                    "ScoringModel"
                ],
                "algebra_model": [
                    "Algebra"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "DecisionCatModel.algebra": {
            "name": "algebra",
            "location": 92,
            "return": [
                "Algebra"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionCatModel.label_universe": {
            "name": "label_universe",
            "location": 99,
            "return": [
                "Mapping[(ArrowType, Tsor)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionCatModel.score": {
            "name": "score",
            "location": 105,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Tsor"
                ],
                "target": [
                    "Tsor"
                ],
                "relation": [
                    "Tsor"
                ]
            }
        },
        "DecisionCatModel.generate_cache": {
            "name": "generate_cache",
            "location": 121,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "data_points": [
                    "Mapping[(NodeType, Tsor)]"
                ],
                "relations": [
                    "Iterable[CompositeArrow[(NodeType, ArrowType)]]"
                ],
                "max_arrow_number": [
                    "Optional[int]"
                ]
            }
        },
        "DecisionCatModel.cost": {
            "name": "cost",
            "location": 133,
            "return": [
                "Tuple[(Tsor, RelationCache[(NodeType, ArrowType)], DirectedGraph[NodeType])]"
            ],
            "arguments": {
                "self": [],
                "data_points": [
                    "Mapping[(NodeType, Tsor)]"
                ],
                "relations": [
                    "Iterable[CompositeArrow[(NodeType, ArrowType)]]"
                ],
                "labels": [
                    "DirectedGraph[NodeType]"
                ],
                "match_negatives": [
                    "bool"
                ],
                "max_arrow_number": [
                    "Optional[int]"
                ]
            }
        },
        "DecisionCatModel.save": {
            "name": "save",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        },
        "DecisionCatModel.load": {
            "name": "load",
            "location": 170,
            "return": [
                "'DecisionCatModel'"
            ],
            "arguments": {
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        },
        "TrainableDecisionCatModel.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relation_model": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(ArrowType, Tsor)]"
                ],
                "scoring_model": [
                    "ScoringModel"
                ],
                "algebra_model": [
                    "Algebra"
                ],
                "optimizer": [
                    "Optimizer"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "TrainableDecisionCatModel.relation_dim": {
            "name": "relation_dim",
            "location": 224,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainableDecisionCatModel.named_parameters": {
            "name": "named_parameters",
            "location": 231,
            "return": [
                "'Iterable[str, Tsor]'"
            ],
            "arguments": {
                "self": [],
                "recurse": [
                    "bool"
                ]
            }
        },
        "TrainableDecisionCatModel.freeze": {
            "name": "freeze",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainableDecisionCatModel.unfreeze": {
            "name": "unfreeze",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainableDecisionCatModel.total_cost": {
            "name": "total_cost",
            "location": 261,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainableDecisionCatModel.reset": {
            "name": "reset",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainableDecisionCatModel.train": {
            "name": "train",
            "location": 274,
            "return": [
                "Tuple[(RelationCache[(NodeType, ArrowType)], DirectedGraph[NodeType])]"
            ],
            "arguments": {
                "self": [],
                "data_points": [
                    "Mapping[(NodeType, Tsor)]"
                ],
                "relations": [
                    "Iterable[CompositeArrow[(NodeType, ArrowType)]]"
                ],
                "labels": [
                    "DirectedGraph[NodeType]"
                ],
                "step": [
                    "bool"
                ],
                "match_negatives": [
                    "bool"
                ],
                "max_arrow_number": [
                    "Optional[int]"
                ]
            }
        },
        "TrainableDecisionCatModel.save": {
            "name": "save",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        },
        "TrainableDecisionCatModel.load": {
            "name": "load",
            "location": 312,
            "return": [
                "'TrainableDecisionCatModel'"
            ],
            "arguments": {
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/composition_graph.py": {
        "CompositeArrow.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Union[(NodeType, Iterable[NodeType])]"
                ],
                "arrows": [
                    "Optional[Iterable[ArrowType]]"
                ]
            }
        },
        "CompositeArrow.derive": {
            "name": "derive",
            "location": 56,
            "return": [
                "'CompositeArrow[ArrowType, NodeType]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeArrow.suspend": {
            "name": "suspend",
            "location": 63,
            "return": [
                "'CompositeArrow[ArrowType, NodeType]'"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "ArrowType@@"
                ],
                "target": [
                    "ArrowType@@"
                ]
            }
        },
        "CompositeArrow.nodes": {
            "name": "nodes",
            "location": 74,
            "return": [
                "Tuple[(NodeType, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeArrow.arrows": {
            "name": "arrows",
            "location": 81,
            "return": [
                "Tuple[(ArrowType, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeArrow.__getitem__": {
            "name": "__getitem__",
            "location": 87,
            "return": [
                "Union[(NodeType, Tuple[(NodeType, ...)], 'CompositeArrow[NodeType, ArrowType]')]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Union[(int, slice)]"
                ]
            }
        },
        "CompositeArrow.__len__": {
            "name": "__len__",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeArrow.__eq__": {
            "name": "__eq__",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "'CompositeArrow[NodeType, ArrowType]'"
                ]
            }
        },
        "CompositeArrow.op": {
            "name": "op",
            "location": 151,
            "return": [
                "'CompositeArrow[NodeType, ArrowType]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeArrow.comp": {
            "name": "comp",
            "location": 157,
            "return": [
                "'CompositeArrow[NodeType, ArrowType]'"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "'CompositeArrow[NodeType, ArrowType]'"
                ],
                "overlap": [
                    "int"
                ]
            }
        },
        "CompositeArrow.__add__": {
            "name": "__add__",
            "location": 180,
            "return": [
                "'CompositeArrow[NodeType, ArrowType]'"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "'CompositeArrow[NodeType, ArrowType]'"
                ]
            }
        },
        "CompositeArrow.__matmul__": {
            "name": "__matmul__",
            "location": 196,
            "return": [
                "'CompositeArrow[NodeType, ArrowType]'"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "'CompositeArrow[NodeType, ArrowType]'"
                ]
            }
        },
        "CompositeArrow.__hash__": {
            "name": "__hash__",
            "location": 206,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeArrow.__repr__": {
            "name": "__repr__",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositionGraph.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comp": [
                    "Callable[(['CompositionGraph[NodeType, ArrowType, AlgebraType]', 'CompositeArrow[NodeType, ArrowType]'], AlgebraType)]"
                ],
                "arrows": [
                    "Iterable['CompositeArrow[NodeType, ArrowType]']"
                ]
            }
        },
        "CompositionGraph.graph": {
            "name": "graph",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositionGraph.add": {
            "name": "add",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        },
        "CompositionGraph.flush": {
            "name": "flush",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositionGraph.arrows": {
            "name": "arrows",
            "location": 307,
            "return": [
                "Iterator[CompositeArrow[(NodeType, ArrowType)]]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Optional[NodeType]"
                ],
                "tar": [
                    "Optional[NodeType]"
                ],
                "arrow_length_range": [
                    "Tuple[(int, Optional[int])]"
                ]
            }
        },
        "CompositionGraph.__iter__": {
            "name": "__iter__",
            "location": 352,
            "return": [
                "Iterator[CompositeArrow[(NodeType, ArrowType)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositionGraph.__len__": {
            "name": "__len__",
            "location": 358,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositionGraph.__getitem__": {
            "name": "__getitem__",
            "location": 364,
            "return": [
                "AlgebraType@@"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        },
        "CompositionGraph.__delitem__": {
            "name": "__delitem__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        },
        "CompositionGraph.__repr__": {
            "name": "__repr__",
            "location": 402,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositionGraph.__init__._comp": {
            "name": "_comp",
            "location": 246,
            "return": [
                "AlgebraType@@"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/device_utils.py": {
        "to_device": {
            "name": "to_device",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str"
                ],
                "model": [
                    "nn.Module"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/full_layer_models.py": {
        "couple_layered_models": {
            "name": "couple_layered_models",
            "location": 165,
            "return": [
                "LayeredModel"
            ],
            "arguments": {}
        },
        "reduce_model": {
            "name": "reduce_model",
            "location": 189,
            "return": [
                "LayeredModel"
            ],
            "arguments": {
                "model": [
                    "LayeredModel"
                ]
            }
        },
        "ConstantModel.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ConstantModel.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantModel.forward": {
            "name": "forward",
            "location": 35,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantModel.named_parameters": {
            "name": "named_parameters",
            "location": 40,
            "return": [
                "Iterable[Tuple[(str, Tsor)]]"
            ],
            "arguments": {
                "self": [],
                "recurse": [
                    "bool"
                ]
            }
        },
        "ConstantModel.freeze": {
            "name": "freeze",
            "location": 45,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantModel.unfreeze": {
            "name": "unfreeze",
            "location": 48,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "Sequence[int]"
                ],
                "output_shape": [
                    "Sequence[int]"
                ],
                "layers": [
                    "Iterable[Callable]"
                ]
            }
        },
        "LayeredModel.input_shape": {
            "name": "input_shape",
            "location": 75,
            "return": [
                "torch.Size"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.input_ndim": {
            "name": "input_ndim",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.input_numel": {
            "name": "input_numel",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.output_shape": {
            "name": "output_shape",
            "location": 96,
            "return": [
                "torch.Size"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.output_ndim": {
            "name": "output_ndim",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.output_numel": {
            "name": "output_numel",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.children": {
            "name": "children",
            "location": 118,
            "return": [
                "Callable[([], Iterable[nn.Module])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.named_parameters": {
            "name": "named_parameters",
            "location": 125,
            "return": [
                "Callable[([], Iterable[Tsor])]"
            ],
            "arguments": {
                "self": [],
                "recurse": [
                    "bool"
                ]
            }
        },
        "LayeredModel.forward": {
            "name": "forward",
            "location": 132,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel._set_requires_grad_flag": {
            "name": "_set_requires_grad_flag",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "LayeredModel.freeze": {
            "name": "freeze",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayeredModel.unfreeze": {
            "name": "unfreeze",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullPerceptron.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "Sequence[int]"
                ],
                "output_shape": [
                    "Sequence[int]"
                ],
                "num_units": [
                    "Sequence[int]"
                ],
                "activation_factory": [
                    "Callable[([], nn.Module)]"
                ]
            }
        },
        "FullPerceptron._get_layer_sequence": {
            "name": "_get_layer_sequence",
            "location": 234,
            "return": [
                "Iterable[nn.Module]"
            ],
            "arguments": {
                "self": [],
                "num_units": [
                    "Sequence[int]"
                ],
                "activation_factory": [
                    "Callable[([], nn.Module)]"
                ]
            }
        },
        "FullPerceptron._view_input": {
            "name": "_view_input",
            "location": 251,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "batch_input": [
                    "Tsor"
                ]
            }
        },
        "FullPerceptron._view_output": {
            "name": "_view_output",
            "location": 267,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "batch_output": [
                    "Tsor"
                ]
            }
        },
        "FullPerceptron.save": {
            "name": "save",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        },
        "FullPerceptron.load": {
            "name": "load",
            "location": 289,
            "return": [
                "FullPerceptron"
            ],
            "arguments": {
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        },
        "FullPerceptronWithRandomState.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "Sequence[int]"
                ],
                "output_shape": [
                    "Sequence[int]"
                ],
                "num_units": [
                    "Sequence[int]"
                ],
                "num_random": [
                    "int"
                ],
                "activation_factory": [
                    "Callable[([], nn.Module)]"
                ],
                "random_generator": [
                    "Callable"
                ]
            }
        },
        "FullPerceptronWithRandomState.draw_state": {
            "name": "draw_state",
            "location": 340,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "batch_shape": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "FullPerceptronWithRandomState.augment_input": {
            "name": "augment_input",
            "location": 349,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "batch_input": [
                    "Tsor"
                ]
            }
        },
        "FullPerceptronWithRandomState.save": {
            "name": "save",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        },
        "FullPerceptronWithRandomState.load": {
            "name": "load",
            "location": 369,
            "return": [
                "FullPerceptronWithRandomState"
            ],
            "arguments": {
                "flike": [
                    "Union[(str, IO)]"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/graph_utils.py": {
        "mapping_product": {
            "name": "mapping_product",
            "location": 28,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "mapping0": [
                    "Mapping"
                ],
                "mapping1": [
                    "Mapping"
                ]
            }
        },
        "generate_random_graph": {
            "name": "generate_random_graph",
            "location": 527,
            "return": [],
            "arguments": {
                "nb_steps": [
                    "int"
                ],
                "random_generator": [
                    "random.Random"
                ]
            }
        },
        "pagerank_sample": {
            "name": "pagerank_sample",
            "location": 554,
            "return": [
                "DirectedGraph[NodeType]"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "sample_vertices_size": [
                    "int"
                ],
                "rng": [
                    "random.Random"
                ]
            }
        },
        "hubs_sample": {
            "name": "hubs_sample",
            "location": 571,
            "return": [
                "DirectedGraph[NodeType]"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "sample_vertices_size": [
                    "int"
                ],
                "rng": [
                    "random.Random"
                ]
            }
        },
        "authorities_sample": {
            "name": "authorities_sample",
            "location": 587,
            "return": [
                "DirectedGraph[NodeType]"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "sample_vertices_size": [
                    "int"
                ],
                "rng": [
                    "random.Random"
                ]
            }
        },
        "sample": {
            "name": "sample",
            "location": 603,
            "return": [
                "DirectedGraph[NodeType]"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "sample_vertices_size": [
                    "int"
                ],
                "ranking": [
                    "Callable[([DirectedGraph[NodeType]], Mapping[(NodeType, float)])]"
                ],
                "rng": [
                    "random.Random"
                ],
                "with_edges": []
            }
        },
        "uniform_sample": {
            "name": "uniform_sample",
            "location": 653,
            "return": [
                "DirectedGraph[NodeType]"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "sample_vertices_size": [
                    "int"
                ],
                "rng": [
                    "random.Random"
                ],
                "with_edges": [
                    "bool"
                ]
            }
        },
        "random_walk_vertex_sample": {
            "name": "random_walk_vertex_sample",
            "location": 669,
            "return": [
                "DirectedGraph[NodeType]"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "rng": [
                    "random.Random"
                ],
                "n_iter": [
                    "int"
                ],
                "seeds": [
                    "Optional[Iterable[NodeType]]"
                ],
                "n_seeds": [
                    "int"
                ],
                "use_opposite": [
                    "bool"
                ]
            }
        },
        "random_walk_edge_sample": {
            "name": "random_walk_edge_sample",
            "location": 709,
            "return": [
                "DirectedGraph[NodeType]"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "rng": [
                    "random.Random"
                ],
                "n_iter": [
                    "int"
                ],
                "seeds": [
                    "Optional[Iterable[ArrowType]]"
                ],
                "n_seeds": [
                    "int"
                ],
                "use_opposite": [
                    "bool"
                ],
                "use_both_ends": [
                    "bool"
                ],
                "max_in_degree": [
                    "int"
                ],
                "max_out_degree": [
                    "int"
                ]
            }
        },
        "n_hop_sample": {
            "name": "n_hop_sample",
            "location": 799,
            "return": [
                "'DiGraph[NodeType]'"
            ],
            "arguments": {
                "graph": [
                    "'DiGraph[NodeType]'"
                ],
                "n_hops": [
                    "int"
                ],
                "seeds": [],
                "n_seeds": [
                    "int"
                ],
                "rng": [
                    "random.Random"
                ],
                "search_branching": [
                    "int"
                ],
                "max_degree_greedy": [
                    "int"
                ]
            }
        },
        "clean_selfloops": {
            "name": "clean_selfloops",
            "location": 865,
            "return": [],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "clean_edges": [
                    "bool"
                ],
                "clean_isolate_nodes": [
                    "bool"
                ]
            }
        },
        "clean_isolates": {
            "name": "clean_isolates",
            "location": 883,
            "return": [],
            "arguments": {
                "graph": [
                    "DirectedGraph[NodeType]"
                ],
                "clean": [
                    "bool"
                ]
            }
        },
        "init_relation_vectors": {
            "name": "init_relation_vectors",
            "location": 894,
            "return": [
                "dict"
            ],
            "arguments": {
                "relation2id": [
                    "dict"
                ]
            }
        },
        "augment_graph": {
            "name": "augment_graph",
            "location": 904,
            "return": [],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "revers_rels": [
                    "dict"
                ]
            }
        },
        "create_revers_rels": {
            "name": "create_revers_rels",
            "location": 926,
            "return": [
                "'list(dict, dict, dict)'"
            ],
            "arguments": {
                "revers_rels_str": [
                    "dict"
                ],
                "relation2id": [
                    "dict"
                ]
            }
        },
        "DirectedGraph.__delitem__": {
            "name": "__delitem__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "NodeType@@"
                ]
            }
        },
        "DirectedGraph.__setitem__": {
            "name": "__setitem__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "NodeType@@"
                ],
                "children": [
                    "Iterable[NodeType]"
                ]
            }
        },
        "DirectedGraph.op": {
            "name": "op",
            "location": 74,
            "return": [
                "'DirectedGraph[NodeType]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.dualize_relations": {
            "name": "dualize_relations",
            "location": 80,
            "return": [
                "'DirectedGraph[NodeType]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.under": {
            "name": "under",
            "location": 100,
            "return": [
                "FrozenSet[NodeType]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "NodeType@@"
                ]
            }
        },
        "DirectedGraph._under": {
            "name": "_under",
            "location": 111,
            "return": [
                "FrozenSet[NodeType]"
            ],
            "arguments": {
                "self": [],
                "roots": [
                    "FrozenSet[NodeType]"
                ]
            }
        },
        "DirectedGraph.over": {
            "name": "over",
            "location": 126,
            "return": [
                "FrozenSet[NodeType]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "NodeType@@"
                ]
            }
        },
        "DirectedGraph.subgraph_nodes": {
            "name": "subgraph_nodes",
            "location": 133,
            "return": [
                "'DirectedGraph[NodeType]'"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Iterable[NodeType]"
                ]
            }
        },
        "DirectedGraph.prune": {
            "name": "prune",
            "location": 141,
            "return": [
                "'DirectedGraph[NodeType]'"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "NodeType@@"
                ]
            }
        },
        "DirectedGraph.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.__or__": {
            "name": "__or__",
            "location": 172,
            "return": [
                "'DirectedGraph[Tuple[bool, NodeType]]'"
            ],
            "arguments": {
                "self": [],
                "other_graph": [
                    "'DirectedGraph[NodeType]'"
                ]
            }
        },
        "DirectedGraph.__and__": {
            "name": "__and__",
            "location": 191,
            "return": [
                "'DirectedGraph[Tuple[NodeType, NodeType]]'"
            ],
            "arguments": {
                "self": [],
                "other_graph": [
                    "'DirectedGraph[NodeType]'"
                ]
            }
        },
        "DirectedGraph.__add__": {
            "name": "__add__",
            "location": 205,
            "return": [
                "'DirectedGraph[Tuple[bool, NodeType]]'"
            ],
            "arguments": {
                "self": [],
                "other_graph": [
                    "'DirectedGraph[NodeType]'"
                ]
            }
        },
        "DirectedGraph.__matmul__": {
            "name": "__matmul__",
            "location": 230,
            "return": [
                "'DirectedGraph[Tuple[NodeType, NodeType]]'"
            ],
            "arguments": {
                "self": [],
                "other_graph": [
                    "'DirectedGraph[NodeType]'"
                ]
            }
        },
        "DirectedGraph.__mul__": {
            "name": "__mul__",
            "location": 256,
            "return": [
                "'DirectedGraph[Tuple[NodeType, NodeType]]'"
            ],
            "arguments": {
                "self": [],
                "other_graph": [
                    "'DirectedGraph[NodeType]'"
                ]
            }
        },
        "DirectedGraph.remap_names": {
            "name": "remap_names",
            "location": 275,
            "return": [
                "'DirectedGraph[Any]'"
            ],
            "arguments": {
                "self": [],
                "key_func": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "DirectedGraph.integerify": {
            "name": "integerify",
            "location": 290,
            "return": [
                "'DirectedGraph[int]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.stringify": {
            "name": "stringify",
            "location": 300,
            "return": [
                "'DirectedGraph[str]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.rand_prune": {
            "name": "rand_prune",
            "location": 307,
            "return": [
                "'DirectedGraph[NodeType]'"
            ],
            "arguments": {
                "self": [],
                "pruning_factor": [
                    "float"
                ],
                "random_generator": [
                    "Optional[random.Random]"
                ]
            }
        },
        "DirectedAcyclicGraph.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph.ins": {
            "name": "ins",
            "location": 355,
            "return": [
                "FrozenSet[NodeType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph.outs": {
            "name": "outs",
            "location": 362,
            "return": [
                "FrozenSet[NodeType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph.__setitem__": {
            "name": "__setitem__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "NodeType@@"
                ],
                "children": [
                    "Iterable[NodeType]"
                ]
            }
        },
        "GraphRandomFactory.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "GraphRandomFactory.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "Sequence[float]"
                ],
                "nb_graphs": [
                    "int"
                ],
                "pruning_factor": [
                    "float"
                ],
                "random_generator": [
                    "random.Random"
                ]
            }
        },
        "GraphRandomFactory.erode": {
            "name": "erode",
            "location": 447,
            "return": [
                "DirectedGraph"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "DirectedGraph"
                ]
            }
        },
        "GraphRandomFactory.nb_graphs": {
            "name": "nb_graphs",
            "location": 458,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRandomFactory.graphs": {
            "name": "graphs",
            "location": 465,
            "return": [
                "Tuple[(DirectedGraph, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRandomFactory.weights": {
            "name": "weights",
            "location": 472,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRandomFactory.ops": {
            "name": "ops",
            "location": 479,
            "return": [
                "Tuple[(Callable[(..., DirectedGraph)], ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRandomFactory.ops_nargs": {
            "name": "ops_nargs",
            "location": 486,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRandomFactory.__next__": {
            "name": "__next__",
            "location": 492,
            "return": [
                "Tuple[(DirectedGraph, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "random_walk_edge_sample.get_degree_safe": {
            "name": "get_degree_safe",
            "location": 754,
            "return": [],
            "arguments": {
                "graph": [],
                "node": [],
                "use_in_degree": []
            }
        },
        "random_walk_edge_sample.can_add_edge": {
            "name": "can_add_edge",
            "location": 758,
            "return": [],
            "arguments": {
                "graph": [],
                "node": [],
                "use_in_degree": [],
                "allowed_degree": []
            }
        }
    },
    "CategoryLearning-master/catlearn/relation_cache.py": {
        "kl_match": {
            "name": "kl_match",
            "location": 22,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "score": [
                    "Tsor"
                ],
                "label": [
                    "Optional[Tsor]"
                ],
                "against_negative": [
                    "bool"
                ]
            }
        },
        "NegativeMatch.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Hashable"
                ]
            }
        },
        "NegativeMatch.value": {
            "name": "value",
            "location": 54,
            "return": [
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegativeMatch.__hash__": {
            "name": "__hash__",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegativeMatch.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_object": [
                    "Hashable"
                ]
            }
        },
        "NegativeMatch.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationCache._graph_comp": {
            "name": "_graph_comp",
            "location": 88,
            "return": [
                "Callable[([CompositionGraph[(NodeType, ArrowType, Tsor)], CompositeArrow[(NodeType, ArrowType)]], Tuple[(Tsor, Tsor)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationCache.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_embed": [
                    "RelationEmbedding"
                ],
                "label_universe": [
                    "Mapping[(ArrowType, Tsor)]"
                ],
                "scorer": [
                    "Scorer"
                ],
                "comp": [
                    "BinaryOp"
                ],
                "datas": [
                    "Mapping[(NodeType, Tsor)]"
                ],
                "arrows": [
                    "Iterable[CompositeArrow[(NodeType, ArrowType)]]"
                ],
                "max_arrow_number": [
                    "Optional[int]"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "RelationCache.arrows": {
            "name": "arrows",
            "location": 208,
            "return": [
                "Iterator[CompositeArrow[(NodeType, ArrowType)]]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Optional[NodeType]"
                ],
                "tar": [
                    "Optional[NodeType]"
                ],
                "arrow_length_range": [
                    "Tuple[(int, Optional[int])]"
                ],
                "include_non_causal": [
                    "bool"
                ]
            }
        },
        "RelationCache.causality_cost": {
            "name": "causality_cost",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationCache.data": {
            "name": "data",
            "location": 238,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        },
        "RelationCache.label_universe": {
            "name": "label_universe",
            "location": 254,
            "return": [
                "Mapping[(ArrowType, Tsor)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationCache.__getitem__": {
            "name": "__getitem__",
            "location": 260,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        },
        "RelationCache.__iter__": {
            "name": "__iter__",
            "location": 273,
            "return": [
                "Iterator[CompositeArrow[(NodeType, ArrowType)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationCache.__len__": {
            "name": "__len__",
            "location": 279,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationCache.__setitem__": {
            "name": "__setitem__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "NodeType"
                ],
                "data_point": [
                    "Tsor"
                ]
            }
        },
        "RelationCache.__delitem__": {
            "name": "__delitem__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        },
        "RelationCache.__repr__": {
            "name": "__repr__",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationCache.flush": {
            "name": "flush",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationCache._get_worst_relation": {
            "name": "_get_worst_relation",
            "location": 319,
            "return": [
                "Optional[CompositeArrow[(NodeType, ArrowType)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationCache.prune_relations": {
            "name": "prune_relations",
            "location": 353,
            "return": [
                "FrozenSet[CompositeArrow[(NodeType, ArrowType)]]"
            ],
            "arguments": {
                "self": [],
                "nb_to_keep": [
                    "int"
                ]
            }
        },
        "RelationCache.build_composites": {
            "name": "build_composites",
            "location": 374,
            "return": [
                "Tuple[(FrozenSet[CompositeArrow[(NodeType, ArrowType)]], FrozenSet[CompositeArrow[(NodeType, ArrowType)]])]"
            ],
            "arguments": {
                "self": [],
                "max_arrow_number": []
            }
        },
        "RelationCache.match": {
            "name": "match",
            "location": 422,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "DirectedGraph[NodeType]"
                ],
                "match_negatives": [
                    "bool"
                ]
            }
        },
        "RelationCache._graph_comp.graph_comp": {
            "name": "graph_comp",
            "location": 97,
            "return": [
                "Tuple[(Tsor, Tsor)]"
            ],
            "arguments": {
                "graph": [
                    "CompositionGraph[(NodeType, ArrowType, Tsor)]"
                ],
                "arrow": [
                    "CompositeArrow[(NodeType, ArrowType)]"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/tensor_utils.py": {
        "repeat_tensor": {
            "name": "repeat_tensor",
            "location": 19,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "to_repeat": [
                    "Tsor"
                ],
                "nb_repeats": [
                    "int"
                ],
                "axis": [
                    "int"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "is_shape_broadcastable": {
            "name": "is_shape_broadcastable",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "first_shape": [
                    "Sequence"
                ],
                "last_shape": [
                    "Sequence"
                ]
            }
        },
        "sorted_weighted_sum": {
            "name": "sorted_weighted_sum",
            "location": 63,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "to_sum": [
                    "Tsor"
                ],
                "weights": [
                    "Tsor"
                ],
                "axis": [
                    "int"
                ],
                "keepdim": [
                    "bool"
                ],
                "largest": [
                    "bool"
                ]
            }
        },
        "tensor_equals": {
            "name": "tensor_equals",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "Tsor"
                ],
                "right": [
                    "Tsor"
                ],
                "precision": [
                    "float"
                ]
            }
        },
        "full_like": {
            "name": "full_like",
            "location": 115,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "value": [],
                "tensor": [
                    "Tsor"
                ],
                "shape": [
                    "Optional[Sequence[int]]"
                ]
            }
        },
        "zeros_like": {
            "name": "zeros_like",
            "location": 130,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "tensor": [
                    "Tsor"
                ],
                "shape": [
                    "Optional[Sequence[int]]"
                ]
            }
        },
        "ones_like": {
            "name": "ones_like",
            "location": 140,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "tensor": [
                    "Tsor"
                ],
                "shape": [
                    "Optional[Sequence[int]]"
                ]
            }
        },
        "clip_proba": {
            "name": "clip_proba",
            "location": 150,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "proba_vector": [
                    "Tsor"
                ],
                "dim": [
                    "int"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "subproba_kl_div": {
            "name": "subproba_kl_div",
            "location": 170,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "predicted": [
                    "Tsor"
                ],
                "labels": [
                    "Tsor"
                ],
                "epsilon": [
                    "float"
                ],
                "dim": [
                    "int"
                ],
                "keepdim": [
                    "bool"
                ]
            }
        },
        "remap_subproba": {
            "name": "remap_subproba",
            "location": 195,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "to_remap": [
                    "Tsor"
                ],
                "reference": [
                    "Tsor"
                ],
                "dim": [
                    "int"
                ]
            }
        },
        "AbstractModel.parameters": {
            "name": "parameters",
            "location": 243,
            "return": [
                "Iterable[Tsor]"
            ],
            "arguments": {
                "self": [],
                "recurse": [
                    "bool"
                ]
            }
        },
        "AbstractModel.named_parameters": {
            "name": "named_parameters",
            "location": 246,
            "return": [
                "Iterable[Tuple[(str, Tsor)]]"
            ],
            "arguments": {
                "self": [],
                "recurse": [
                    "bool"
                ]
            }
        },
        "AbstractModel.freeze": {
            "name": "freeze",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractModel.unfreeze": {
            "name": "unfreeze",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CategoryLearning-master/catlearn/utils.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "str_color": {
            "name": "str_color",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "color_type": [
                    "str"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "one_hot": {
            "name": "one_hot",
            "location": 38,
            "return": [
                "torch.tensor"
            ],
            "arguments": {
                "sample_id": [
                    "int"
                ],
                "nb_samples": [
                    "int"
                ]
            }
        }
    },
    "CategoryLearning-master/catlearn/__init__.py": {},
    "CategoryLearning-master/data/config.py": {},
    "CategoryLearning-master/data/dataset.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "ds_name": [
                    "str"
                ],
                "node_vec_dim": [
                    "int"
                ],
                "ds_pat": [
                    "Dict"
                ],
                "prep_pat": [
                    "Dict"
                ],
                "node2vec_path": [
                    "str"
                ]
            }
        },
        "Dataset.from_file": {
            "name": "from_file",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.check_path": {
            "name": "check_path",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Dataset.read_file": {
            "name": "read_file",
            "location": 83,
            "return": [
                "Generator"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Dataset.format_dataset": {
            "name": "format_dataset",
            "location": 98,
            "return": [
                "Generator"
            ],
            "arguments": {
                "self": [],
                "raw_dataset": [
                    "Generator"
                ]
            }
        },
        "Dataset._format_id_map": {
            "name": "_format_id_map",
            "location": 123,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "id_map": [
                    "Generator"
                ],
                "ds_name": [
                    "str"
                ]
            }
        },
        "Dataset.preproc_dataset": {
            "name": "preproc_dataset",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.read_id_maps": {
            "name": "read_id_maps",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.init_entity_vectors": {
            "name": "init_entity_vectors",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.init_relation_vectors": {
            "name": "init_relation_vectors",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.load": {
            "name": "load",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CategoryLearning-master/data/utils.py": {
        "read_file": {
            "name": "read_file",
            "location": 20,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 29,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "to_file": [
                    "Union[(Dict, Set, List)]"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "get_entities_relations": {
            "name": "get_entities_relations",
            "location": 60,
            "return": [
                "[List[str], List[str]]"
            ],
            "arguments": {
                "ds_list": [
                    "List[str]"
                ]
            }
        },
        "_update_set_with_missing": {
            "name": "_update_set_with_missing",
            "location": 70,
            "return": [],
            "arguments": {
                "entities_or_rels": [
                    "[List[str], List[str]]"
                ],
                "set_to_update": [
                    "Set"
                ],
                "set_type": [
                    "str"
                ],
                "set_purpose": [
                    "str"
                ]
            }
        },
        "preprocess": {
            "name": "preprocess",
            "location": 83,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "preprocess_word2vec": {
            "name": "preprocess_word2vec",
            "location": 133,
            "return": [],
            "arguments": {
                "path_word2vec": [
                    "str"
                ],
                "path_dir_wordset": [
                    "str"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 163,
            "return": [],
            "arguments": {}
        }
    },
    "CategoryLearning-master/data/__init__.py": {},
    "CategoryLearning-master/tests/test_algebramodels.py": {
        "ndim": {
            "name": "ndim",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "algebra": {
            "name": "algebra",
            "location": 38,
            "return": [
                "algebra_models.Algebra"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "ndim": [
                    "int"
                ]
            }
        },
        "batch_ndim": {
            "name": "batch_ndim",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "batch_shape": {
            "name": "batch_shape",
            "location": 50,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "batch_ndim": [
                    "int"
                ]
            }
        },
        "data_point": {
            "name": "data_point",
            "location": 58,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "batch_shape": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "sample_elem": {
            "name": "sample_elem",
            "location": 63,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "algebra": [
                    "algebra_models.Algebra"
                ],
                "batch_shape": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "TestAlgebra.test_unit_shape": {
            "name": "test_unit_shape",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "algebra": [
                    "algebra_models.Algebra"
                ],
                "data_point": [
                    "torch.Tensor"
                ],
                "batch_shape": [
                    "torch.Tensor"
                ]
            }
        },
        "TestAlgebra.test_comp_shape": {
            "name": "test_comp_shape",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "algebra": [
                    "algebra_models.Algebra"
                ],
                "batch_shape": [
                    "torch.Tensor"
                ]
            }
        },
        "TestAlgebra.test_unit_left": {
            "name": "test_unit_left",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "algebra": [
                    "algebra_models.Algebra"
                ],
                "data_point": [
                    "torch.Tensor"
                ],
                "batch_shape": [
                    "torch.Tensor"
                ]
            }
        },
        "TestAlgebra.test_unit_right": {
            "name": "test_unit_right",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "algebra": [
                    "algebra_models.Algebra"
                ],
                "data_point": [
                    "torch.Tensor"
                ],
                "batch_shape": [
                    "torch.Tensor"
                ]
            }
        },
        "TestAlgebra.test_associativity": {
            "name": "test_associativity",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "algebra": [
                    "algebra_models.Algebra"
                ]
            }
        }
    },
    "CategoryLearning-master/tests/test_categorical_model.py": {
        "nb_features": {
            "name": "nb_features",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "nb_scores": {
            "name": "nb_scores",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "nb_labels": {
            "name": "nb_labels",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "dim_rels": {
            "name": "dim_rels",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "algebra": {
            "name": "algebra",
            "location": 72,
            "return": [
                "Algebra"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "dim_rels": [
                    "int"
                ]
            }
        },
        "reload": {
            "name": "reload",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "relation": {
            "name": "relation",
            "location": 98,
            "return": [
                "RelationModel"
            ],
            "arguments": {
                "nb_labels": [
                    "int"
                ],
                "nb_features": [
                    "int"
                ],
                "algebra": [
                    "Algebra"
                ]
            }
        },
        "label_universe": {
            "name": "label_universe",
            "location": 105,
            "return": [
                "Mapping[(int, Tsor)]"
            ],
            "arguments": {
                "nb_labels": [
                    "int"
                ]
            }
        },
        "scoring": {
            "name": "scoring",
            "location": 133,
            "return": [
                "ScoringModel"
            ],
            "arguments": {
                "nb_features": [
                    "int"
                ],
                "nb_scores": [
                    "int"
                ],
                "algebra": [
                    "Algebra"
                ]
            }
        },
        "arrow": {
            "name": "arrow",
            "location": 140,
            "return": [
                "CompositeArrow[(int, Tsor)]"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ]
            }
        },
        "match_negatives": {
            "name": "match_negatives",
            "location": 147,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "get_labels": {
            "name": "get_labels",
            "location": 151,
            "return": [
                "DirectedGraph[int]"
            ],
            "arguments": {
                "nodes": [
                    "Iterable[int]"
                ],
                "nb_scores": [
                    "int"
                ],
                "nb_labels": [
                    "int"
                ]
            }
        },
        "get_trainable_model": {
            "name": "get_trainable_model",
            "location": 171,
            "return": [
                "TrainableDecisionCatModel"
            ],
            "arguments": {
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ]
            }
        },
        "CustomRelation.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb_features": [
                    "int"
                ],
                "nb_labels": [
                    "int"
                ],
                "algebra": [
                    "Algebra"
                ]
            }
        },
        "CustomRelation.named_parameters": {
            "name": "named_parameters",
            "location": 89,
            "return": [
                "Callable[([], Iterable[Tsor])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRelation.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Tsor"
                ],
                "y": [
                    "Tsor"
                ],
                "l": [
                    "Tsor"
                ]
            }
        },
        "label_universe.one_hot": {
            "name": "one_hot",
            "location": 107,
            "return": [],
            "arguments": {
                "label": [
                    "int"
                ]
            }
        },
        "CustomScore.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb_features": [
                    "int"
                ],
                "nb_scores": [
                    "int"
                ],
                "algebra": [
                    "Algebra"
                ]
            }
        },
        "CustomScore.named_parameters": {
            "name": "named_parameters",
            "location": 123,
            "return": [
                "Callable[([], Iterable[Tsor])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomScore.__call__": {
            "name": "__call__",
            "location": 126,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Tsor"
                ],
                "dst": [
                    "Tsor"
                ],
                "rel": [
                    "Tsor"
                ]
            }
        },
        "TestRelationCache.get_cache": {
            "name": "get_cache",
            "location": 204,
            "return": [
                "RelationCache"
            ],
            "arguments": {
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "data_dim": [
                    "int"
                ],
                "datas": [
                    "Optional[Mapping[(int, Tsor)]]"
                ]
            }
        },
        "TestRelationCache.test_relation": {
            "name": "test_relation",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "nb_features": [
                    "int"
                ],
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "arrow": [
                    "CompositeArrow[(int, Tsor)]"
                ]
            }
        },
        "TestRelationCache.test_score": {
            "name": "test_score",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "nb_features": [
                    "int"
                ],
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "arrow": [
                    "CompositeArrow[(int, Tsor)]"
                ]
            }
        },
        "TestRelationCache.test_matching": {
            "name": "test_matching",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "nb_features": [
                    "int"
                ],
                "nb_labels": [
                    "int"
                ],
                "nb_scores": [
                    "int"
                ],
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "arrow": [
                    "CompositeArrow[(int, int)]"
                ],
                "match_negatives": [
                    "bool"
                ]
            }
        },
        "TestRelationCache.test_prune": {
            "name": "test_prune",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "nb_features": [
                    "int"
                ],
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "arrow": [
                    "CompositeArrow[(int, Tsor)]"
                ],
                "nb_to_prune": [
                    "int"
                ]
            }
        },
        "TestRelationCache.test_build_composites": {
            "name": "test_build_composites",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "nb_labels": [
                    "int"
                ],
                "arrow": [
                    "CompositeArrow[(int, Tsor)]"
                ],
                "max_arrow_length": [
                    "int"
                ],
                "max_arrow_number": [
                    "int"
                ]
            }
        },
        "TestDecisionCatModel.test_cost": {
            "name": "test_cost",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(int, Tsor)]"
                ],
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "nb_features": [
                    "int"
                ],
                "nb_labels": [
                    "int"
                ],
                "nb_scores": [
                    "int"
                ],
                "match_negatives": [
                    "bool"
                ]
            }
        },
        "TestTrainableDecisionCatModel.test_train_without_update": {
            "name": "test_train_without_update",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(int, Tsor)]"
                ],
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "nb_features": [
                    "int"
                ],
                "nb_labels": [
                    "int"
                ],
                "nb_scores": [
                    "int"
                ],
                "reload": [
                    "bool"
                ],
                "match_negatives": [
                    "bool"
                ]
            }
        },
        "TestTrainableDecisionCatModel.test_train_with_update": {
            "name": "test_train_with_update",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(int, Tsor)]"
                ],
                "relation": [
                    "RelationModel"
                ],
                "label_universe": [
                    "Mapping[(int, Tsor)]"
                ],
                "scoring": [
                    "ScoringModel"
                ],
                "algebra": [
                    "Algebra"
                ],
                "nb_features": [
                    "int"
                ],
                "nb_labels": [
                    "int"
                ],
                "nb_steps": [
                    "int"
                ],
                "nb_scores": [
                    "int"
                ],
                "match_negatives": [
                    "bool"
                ]
            }
        },
        "TestRelationCache.test_build_composites.relation": {
            "name": "relation",
            "location": 420,
            "return": [
                "Tsor"
            ],
            "arguments": {
                "_": [
                    "Tsor"
                ],
                "__": [
                    "Tsor"
                ],
                "___": [
                    "int"
                ]
            }
        },
        "TestRelationCache.test_build_composites.scoring": {
            "name": "scoring",
            "location": 426,
            "return": [],
            "arguments": {
                "src": [
                    "Tsor"
                ],
                "dst": [
                    "Tsor"
                ],
                "rel": [
                    "Tsor"
                ]
            }
        }
    },
    "CategoryLearning-master/tests/test_composition_graph.py": {
        "to_add": {
            "name": "to_add",
            "location": 22,
            "return": [
                "CompositeArrow[(str, str)]"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "repr_comp": {
            "name": "repr_comp",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "graph": [
                    "CompositionGraph[(str, str, str)]"
                ],
                "arrow": [
                    "CompositeArrow[(str, str)]"
                ]
            }
        },
        "hex_arrow": {
            "name": "hex_arrow",
            "location": 43,
            "return": [
                "CompositeArrow[(str, str)]"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        },
        "TestCompositeArrow.test_getitem": {
            "name": "test_getitem",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ],
                "index": [
                    "Union[(int, slice)]"
                ],
                "expected_result": [
                    "Union[(Hashable, Tuple[(Hashable, ...)], CompositeArrow[(Hashable, Hashable)])]"
                ]
            }
        },
        "TestCompositeArrow.test_derive": {
            "name": "test_derive",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ],
                "expected_result": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ]
            }
        },
        "TestCompositeArrow.test_suspend": {
            "name": "test_suspend",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ]
            }
        },
        "TestCompositeArrow.test_op": {
            "name": "test_op",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "arrow": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ],
                "expected_result": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ]
            }
        },
        "TestCompositeArrow.test_binary_op": {
            "name": "test_binary_op",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "binary_op": [
                    "Callable[([Any, Any], Any)]"
                ],
                "first_operand": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ],
                "second_operand": [
                    "CompositeArrow[(Hashable, Hashable)]"
                ],
                "expected_result": [
                    "Optional[CompositeArrow[(Hashable, Hashable)]]"
                ]
            }
        },
        "TestCompositionGraph.test_getitem": {
            "name": "test_getitem",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "to_add": [
                    "CompositeArrow[(str, str)]"
                ]
            }
        },
        "TestCompositionGraph.test_add": {
            "name": "test_add",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "to_add": [
                    "CompositeArrow[(str, str)]"
                ]
            }
        },
        "TestCompositionGraph.test_del": {
            "name": "test_del",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "to_add": [
                    "CompositeArrow[(str, str)]"
                ]
            }
        }
    },
    "CategoryLearning-master/tests/test_data.py": {
        "TestDataset.test_dataset": {
            "name": "test_dataset",
            "location": 47,
            "return": [],
            "arguments": {
                "initializer_dict": [
                    "Dict"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        }
    },
    "CategoryLearning-master/tests/test_fulllayermodels.py": {
        "batch_shape": {
            "name": "batch_shape",
            "location": 32,
            "return": [
                "TensorShape"
            ],
            "arguments": {
                "request": []
            }
        },
        "input_shape": {
            "name": "input_shape",
            "location": 38,
            "return": [
                "TensorShape"
            ],
            "arguments": {
                "request": []
            }
        },
        "output_shape": {
            "name": "output_shape",
            "location": 44,
            "return": [
                "TensorShape"
            ],
            "arguments": {
                "request": []
            }
        },
        "num_units": {
            "name": "num_units",
            "location": 50,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "request": []
            }
        },
        "num_random": {
            "name": "num_random",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "reload": {
            "name": "reload",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_constant_model": {
            "name": "test_constant_model",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLayeredModel.get_layered_model": {
            "name": "get_layered_model",
            "location": 80,
            "return": [],
            "arguments": {
                "nlayer": []
            }
        },
        "TestLayeredModel.test_creation": {
            "name": "test_creation",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLayeredModel.test_reduce_model": {
            "name": "test_reduce_model",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLayeredModel.test_couple_models": {
            "name": "test_couple_models",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFullPerceptron.get_model": {
            "name": "get_model",
            "location": 134,
            "return": [
                "FullPerceptron"
            ],
            "arguments": {
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptron.test_output_shape": {
            "name": "test_output_shape",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "batch_shape": [
                    "TensorShape"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptron.test_params_list": {
            "name": "test_params_list",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptron.test_children_list": {
            "name": "test_children_list",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptronWithRandomState.get_model": {
            "name": "get_model",
            "location": 208,
            "return": [
                "FullPerceptronWithRandomState"
            ],
            "arguments": {
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "num_random": [
                    "int"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptronWithRandomState.test_draw_state": {
            "name": "test_draw_state",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "num_random": [
                    "int"
                ],
                "batch_shape": [
                    "TensorShape"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptronWithRandomState.test_input_augment": {
            "name": "test_input_augment",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "num_random": [
                    "int"
                ],
                "batch_shape": [
                    "TensorShape"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptronWithRandomState.test_output_shape": {
            "name": "test_output_shape",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "num_random": [
                    "int"
                ],
                "batch_shape": [
                    "TensorShape"
                ],
                "reload": [
                    "bool"
                ]
            }
        },
        "TestFullPerceptronWithRandomState.test_params_list": {
            "name": "test_params_list",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "num_random": [
                    "int"
                ],
                "reload": []
            }
        },
        "TestFullPerceptronWithRandomState.test_children_list": {
            "name": "test_children_list",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "TensorShape"
                ],
                "output_shape": [
                    "TensorShape"
                ],
                "num_units": [
                    "List[int]"
                ],
                "num_random": [
                    "int"
                ],
                "reload": [
                    "bool"
                ]
            }
        }
    },
    "CategoryLearning-master/tests/test_graph_utils.py": {
        "seed": {
            "name": "seed",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "pruning_factor": {
            "name": "pruning_factor",
            "location": 38,
            "return": [
                "float"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "nb_steps": {
            "name": "nb_steps",
            "location": 453,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "weights": {
            "name": "weights",
            "location": 464,
            "return": [
                "Tuple[(float, float, float, float, float)]"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "TestDirectedGraph.test_init": {
            "name": "test_init",
            "location": 227,
            "return": [],
            "arguments": {
                "initializer_dict": [
                    "Dict[(Hashable, Iterable[Hashable])]"
                ],
                "expected_dict": [
                    "Optional[Dict[(Hashable, FrozenSet[Hashable])]]"
                ]
            }
        },
        "TestDirectedGraph.test_op": {
            "name": "test_op",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "initializer_dict": [
                    "Dict[(Hashable, Iterable[Hashable])]"
                ],
                "expected_op": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_delitem": {
            "name": "test_delitem",
            "location": 259,
            "return": [],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "node_to_remove": [
                    "Hashable"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_setitem": {
            "name": "test_setitem",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "node_to_add": [
                    "Hashable"
                ],
                "children": [
                    "Iterable[Hashable]"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_len": {
            "name": "test_len",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "expected_length": [
                    "int"
                ]
            }
        },
        "TestDirectedGraph.test_iter": {
            "name": "test_iter",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "nodes_set": [
                    "Set"
                ]
            }
        },
        "TestDirectedGraph.test_under": {
            "name": "test_under",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "node": [
                    "Hashable"
                ],
                "nodes_set": [
                    "Set[Hashable]"
                ]
            }
        },
        "TestDirectedGraph.test_over": {
            "name": "test_over",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "node": [
                    "Hashable"
                ],
                "nodes_set": [
                    "Set[Hashable]"
                ]
            }
        },
        "TestDirectedGraph.test_subgraph": {
            "name": "test_subgraph",
            "location": 330,
            "return": [],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "nodes_set": [
                    "Set[Hashable]"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_binary_operator": {
            "name": "test_binary_operator",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "binary_op": [
                    "Callable[([Any, Any], Any)]"
                ],
                "first_graph": [
                    "DirectedGraph"
                ],
                "second_graph": [
                    "DirectedGraph"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_prune": {
            "name": "test_prune",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "node_to_prune": [
                    "Hashable"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_integerify": {
            "name": "test_integerify",
            "location": 364,
            "return": [],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_stringify": {
            "name": "test_stringify",
            "location": 377,
            "return": [],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestDirectedGraph.test_rand_prune": {
            "name": "test_rand_prune",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "pruning_factor": [
                    "float"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "TestDirectedGraph.test_dualize_relations": {
            "name": "test_dualize_relations",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "DirectedGraph"
                ],
                "expected_graph": [
                    "DirectedGraph"
                ]
            }
        },
        "TestAcyclicDirectedGraph.test_init": {
            "name": "test_init",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "initializer_dict": [
                    "Dict[(Hashable, Iterable[Hashable])]"
                ],
                "has_loops": [
                    "bool"
                ]
            }
        },
        "TestGraphRandomFactory.test_result_equality": {
            "name": "test_result_equality",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "nb_graphs": [
                    "int"
                ],
                "initial_graphs": [
                    "List[DirectedAcyclicGraph]"
                ],
                "nb_steps": [
                    "int"
                ],
                "weights": [
                    "Tuple[(float, float, float, float, float)]"
                ],
                "pruning_factor": [
                    "float"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "TestSubgraphSampling.rng": {
            "name": "rng",
            "location": 523,
            "return": [],
            "arguments": {}
        },
        "TestSubgraphSampling.nb_steps": {
            "name": "nb_steps",
            "location": 529,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "TestSubgraphSampling.graph": {
            "name": "graph",
            "location": 537,
            "return": [],
            "arguments": {
                "nb_steps": [],
                "rng": []
            }
        },
        "TestSubgraphSampling.n_seeds": {
            "name": "n_seeds",
            "location": 545,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "TestSubgraphSampling.n_iter": {
            "name": "n_iter",
            "location": 551,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "TestSubgraphSampling.max_degree": {
            "name": "max_degree",
            "location": 557,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "TestSubgraphSampling.test_sample": {
            "name": "test_sample",
            "location": 562,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": []
            }
        },
        "TestSubgraphSampling.test_uniform": {
            "name": "test_uniform",
            "location": 571,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": []
            }
        },
        "TestSubgraphSampling.test_pagerank": {
            "name": "test_pagerank",
            "location": 581,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": []
            }
        },
        "TestSubgraphSampling.test_hubs": {
            "name": "test_hubs",
            "location": 590,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": []
            }
        },
        "TestSubgraphSampling.test_authorities": {
            "name": "test_authorities",
            "location": 599,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": []
            }
        },
        "TestSubgraphSampling.test_random_walk_vertex": {
            "name": "test_random_walk_vertex",
            "location": 606,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": [],
                "n_iter": [],
                "n_seeds": []
            }
        },
        "TestSubgraphSampling.test_random_walk_vertex_specified_root": {
            "name": "test_random_walk_vertex_specified_root",
            "location": 615,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": [],
                "n_iter": []
            }
        },
        "TestSubgraphSampling.test_random_walk_vertex_with_dual": {
            "name": "test_random_walk_vertex_with_dual",
            "location": 623,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": [],
                "n_iter": []
            }
        },
        "TestSubgraphSampling.test_random_walk_edge": {
            "name": "test_random_walk_edge",
            "location": 629,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": [],
                "n_iter": [],
                "n_seeds": [],
                "max_degree": []
            }
        },
        "TestSubgraphSampling.test_random_walk_edge_use_all": {
            "name": "test_random_walk_edge_use_all",
            "location": 640,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": [],
                "n_iter": [],
                "n_seeds": [],
                "max_degree": []
            }
        },
        "TestSubgraphSampling.n_hops": {
            "name": "n_hops",
            "location": 650,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "TestSubgraphSampling.test_n_hop_sampler": {
            "name": "test_n_hop_sampler",
            "location": 655,
            "return": [],
            "arguments": {
                "graph": [],
                "rng": [],
                "n_hops": [],
                "n_seeds": []
            }
        },
        "TestSubgraphSampling.test_random_walk_edge_star_pattern": {
            "name": "test_random_walk_edge_star_pattern",
            "location": 661,
            "return": [],
            "arguments": {
                "rng": [],
                "max_degree": []
            }
        },
        "TestSubgraphSampling.chain_length": {
            "name": "chain_length",
            "location": 691,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "TestSubgraphSampling.test_random_walk_edge_chain_pattern": {
            "name": "test_random_walk_edge_chain_pattern",
            "location": 696,
            "return": [],
            "arguments": {
                "rng": [],
                "chain_length": []
            }
        },
        "TestSubgraphSampling.test_random_walk_edge_functional_pattern": {
            "name": "test_random_walk_edge_functional_pattern",
            "location": 724,
            "return": [],
            "arguments": {
                "rng": []
            }
        }
    },
    "CategoryLearning-master/tests/test_tools.py": {
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 13,
            "return": [],
            "arguments": {
                "metafunc": []
            }
        },
        "random_int_list": {
            "name": "random_int_list",
            "location": 44,
            "return": [
                "Callable[([], Iterator[int])]"
            ],
            "arguments": {
                "min_length": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "min_member": [
                    "int"
                ],
                "max_member": [
                    "int"
                ]
            }
        }
    },
    "CategoryLearning-master/tests/__init__.py": {}
}
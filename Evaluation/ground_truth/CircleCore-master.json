{
    "CircleCore-master/setup.py": {},
    "CircleCore-master/circle_core/constants.py": {},
    "CircleCore-master/circle_core/database.py": {
        "make_sqlcolumn_from_datatype": {
            "name": "make_sqlcolumn_from_datatype",
            "location": 370,
            "return": [],
            "arguments": {
                "name": [],
                "datatype": []
            }
        },
        "blob_to_mysql": {
            "name": "blob_to_mysql",
            "location": 400,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [
                    "'StoredBlob'"
                ]
            }
        },
        "date_to_mysql": {
            "name": "date_to_mysql",
            "location": 404,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "datetime_to_mysql": {
            "name": "datetime_to_mysql",
            "location": 416,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "convert_to_mysql_value": {
            "name": "convert_to_mysql_value",
            "location": 428,
            "return": [],
            "arguments": {
                "datatype": [],
                "value": []
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "database_url": [
                    "str"
                ],
                "time_db_dir": [
                    "Path"
                ],
                "log_dir": [
                    "Path"
                ]
            }
        },
        "Database.store_message": {
            "name": "store_message",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_box": [
                    "'MessageBox'"
                ],
                "message": [
                    "'ModuleMessage'"
                ]
            }
        },
        "Database.drop_message_box": {
            "name": "drop_message_box",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "message_box": [],
                "connection": []
            }
        },
        "Database._get_current_message_heads": {
            "name": "_get_current_message_heads",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.connect": {
            "name": "connect",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.make_table_for_message_box": {
            "name": "make_table_for_message_box",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "message_box": []
            }
        },
        "Database.make_table_name_for_message_box": {
            "name": "make_table_name_for_message_box",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "box_or_uuid": []
            }
        },
        "Database.find_table_for_message_box": {
            "name": "find_table_for_message_box",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "message_box": [],
                "create_if_not_exists": []
            }
        },
        "Database._check_thread": {
            "name": "_check_thread",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.get_latest_primary_key": {
            "name": "get_latest_primary_key",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "message_box": []
            }
        },
        "Database.count_messages": {
            "name": "count_messages",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "message_box": [],
                "head": [],
                "limit": [],
                "connection": []
            }
        },
        "Database.enum_messages": {
            "name": "enum_messages",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "message_box": [],
                "start": [],
                "end": [],
                "head": [],
                "limit": [],
                "order": [],
                "connection": []
            }
        },
        "Database.make_writer": {
            "name": "make_writer",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "cycle_time": [],
                "cycle_count": []
            }
        },
        "Database.convert_payload": {
            "name": "convert_payload",
            "location": 361,
            "return": [
                "'Dict[str, Any]'"
            ],
            "arguments": {
                "self": [],
                "message_box": [
                    "MessageBox"
                ],
                "message": [
                    "ModuleMessage"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/exceptions.py": {},
    "CircleCore-master/circle_core/logger.py": {
        "NiceColoredFormatter._colored": {
            "name": "_colored",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "color": [],
                "text": []
            }
        },
        "NiceColoredFormatter.formatMessage": {
            "name": "formatMessage",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "CircleCore-master/circle_core/message.py": {
        "ModuleMessagePrimaryKey.to_json": {
            "name": "to_json",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleMessagePrimaryKey.from_json": {
            "name": "from_json",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "jsonobj": []
            }
        },
        "ModuleMessagePrimaryKey.origin": {
            "name": "origin",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ModuleMessage.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "box_id": [
                    "uuid.UUID"
                ],
                "timestamp": [
                    "TimestampLike"
                ],
                "counter": [
                    "int"
                ],
                "payload": [
                    "'Payload'"
                ]
            }
        },
        "ModuleMessage.from_json": {
            "name": "from_json",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "ModuleMessage.make_timestamp": {
            "name": "make_timestamp",
            "location": 76,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "cls": [],
                "timestamp": [
                    "'Optional[TimestampLike]'"
                ]
            }
        },
        "ModuleMessage.is_equal_timestamp": {
            "name": "is_equal_timestamp",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "x": [
                    "TimestampLike"
                ],
                "y": [
                    "TimestampLike"
                ]
            }
        },
        "ModuleMessage.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleMessage.primary_key": {
            "name": "primary_key",
            "location": 98,
            "return": [
                "ModuleMessagePrimaryKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleMessage.to_json": {
            "name": "to_json",
            "location": 101,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/circle_core/serialize.py": {
        "serialize": {
            "name": "serialize",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "CircleCoreEncoder.default": {
            "name": "default",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ]
            }
        },
        "CircleCoreEncoder.serialize_modulemessage": {
            "name": "serialize_modulemessage",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "'ModuleMessage'"
                ]
            }
        },
        "CircleCoreEncoder.seriaze_blobmetadata": {
            "name": "seriaze_blobmetadata",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "'BlobMetadata'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/testing.py": {
        "mock_circlecore_context": {
            "name": "mock_circlecore_context",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/timed_db.py": {
        "get_lock": {
            "name": "get_lock",
            "location": 20,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "TimedDBBundle.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "dir_prefix": []
            }
        },
        "TimedDBBundle.update": {
            "name": "update",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "updates": []
            }
        },
        "TimedDBBundle.find_db": {
            "name": "find_db",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "box_id": []
            }
        },
        "TimedDB.make_db_name": {
            "name": "make_db_name",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [],
                "box_id": []
            }
        },
        "TimedDB.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "TimedDB.fetch": {
            "name": "fetch",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "start_time": [],
                "end_time": []
            }
        }
    },
    "CircleCore-master/circle_core/types.py": {
        "BlobMetadata.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "uuid.UUID"
                ],
                "content_type": [
                    "str"
                ],
                "datahash": [
                    "str"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/utils.py": {
        "prepare_uuid": {
            "name": "prepare_uuid",
            "location": 16,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "prepare_date": {
            "name": "prepare_date",
            "location": 24,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "format_date": {
            "name": "format_date",
            "location": 39,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "v": [
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "portable_popen": {
            "name": "portable_popen",
            "location": 48,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "locate_executable": {
            "name": "locate_executable",
            "location": 66,
            "return": [],
            "arguments": {
                "exe_file": [],
                "cwd": []
            }
        }
    },
    "CircleCore-master/circle_core/__init__.py": {
        "abstractclassmethod.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "callable": []
            }
        }
    },
    "CircleCore-master/circle_core/alembic/env.py": {
        "_get_metadata": {
            "name": "_get_metadata",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/alembic/versions/017a329f79bf_add_replication_master_id_to_cc_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/alembic/versions/0b8528a90b40_add_cc_uuid_to_schemas_modules.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/alembic/versions/62c34208d16c_modules_rename_column_name_from_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/alembic/versions/7cce90c90087_cc_info_uuid_as_uniq.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/alembic/versions/9e5d9f841fdb_add_user_token_col.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/alembic/versions/d32fc4bb4af0_add_properties_to_modules.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/alembic/versions/e3eb73695193_add_relationship_between_replication_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/cli/box.py": {
        "cli_box": {
            "name": "cli_box",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "box_list": {
            "name": "box_list",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "_format_for_columns": {
            "name": "_format_for_columns",
            "location": 44,
            "return": [
                "'Tuple[TableData, TableHeader]'"
            ],
            "arguments": {
                "message_boxes": [
                    "'List[MessageBox]'"
                ]
            }
        },
        "box_detail": {
            "name": "box_detail",
            "location": 66,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "message_box_uuid": []
            }
        },
        "box_add": {
            "name": "box_add",
            "location": 95,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "display_name": [],
                "schema_uuid": [],
                "module_uuid": [],
                "memo": []
            }
        },
        "box_remove": {
            "name": "box_remove",
            "location": 133,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "message_box_uuid": []
            }
        }
    },
    "CircleCore-master/circle_core/cli/cliutil.py": {
        "cli_util": {
            "name": "cli_util",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "hex2uuid": {
            "name": "hex2uuid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'click.Context'"
                ],
                "hex": [
                    "str"
                ]
            }
        },
        "date2ts": {
            "name": "date2ts",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'click.Context'"
                ],
                "date": [
                    "str"
                ]
            }
        },
        "ts2date": {
            "name": "ts2date",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'click.Context'"
                ],
                "ts": [
                    "int"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/cli_main.py": {
        "cli_main": {
            "name": "cli_main",
            "location": 32,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "config_file_path": [],
                "debug": []
            }
        },
        "_init_logging": {
            "name": "_init_logging",
            "location": 49,
            "return": [],
            "arguments": {
                "debug": []
            }
        },
        "cli_main_env": {
            "name": "cli_main_env",
            "location": 67,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "validate_replication_master_addr": {
            "name": "validate_replication_master_addr",
            "location": 83,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "values": []
            }
        },
        "cli_main_run": {
            "name": "cli_main_run",
            "location": 93,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/context.py": {
        "CLIContextObject.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "core": []
            }
        }
    },
    "CircleCore-master/circle_core/cli/debug.py": {
        "cli_debug": {
            "name": "cli_debug",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_whisper": {
            "name": "build_whisper",
            "location": 32,
            "return": [],
            "arguments": {
                "dir": [
                    "str"
                ],
                "dburl": [
                    "str"
                ],
                "table": [
                    "str"
                ],
                "end_date": [
                    "str"
                ]
            }
        },
        "dump_whisper": {
            "name": "dump_whisper",
            "location": 73,
            "return": [],
            "arguments": {
                "dir": [],
                "box_id": [
                    "str"
                ],
                "end_time": [
                    "float"
                ],
                "graph_range": [
                    "str"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/invitation.py": {
        "cli_invitation": {
            "name": "cli_invitation",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "invitation_list": {
            "name": "invitation_list",
            "location": 31,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "_format_for_columns": {
            "name": "_format_for_columns",
            "location": 44,
            "return": [
                "'Tuple[TableData, TableHeader]'"
            ],
            "arguments": {
                "invitations": [
                    "'List[Invitation]'"
                ]
            }
        },
        "invitation_detail": {
            "name": "invitation_detail",
            "location": 61,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "invitation_uuid": []
            }
        },
        "_validate_max_invites": {
            "name": "_validate_max_invites",
            "location": 83,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "param": [],
                "value": []
            }
        },
        "invitation_add": {
            "name": "invitation_add",
            "location": 92,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "max_invites": []
            }
        },
        "invitation_remove": {
            "name": "invitation_remove",
            "location": 109,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "invitation_uuid": [
                    "UUID"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/module.py": {
        "cli_module": {
            "name": "cli_module",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "module_list": {
            "name": "module_list",
            "location": 31,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "_format_for_columns": {
            "name": "_format_for_columns",
            "location": 44,
            "return": [
                "'Tuple[TableData, TableHeader]'"
            ],
            "arguments": {
                "modules": [
                    "'List[Module]'"
                ]
            }
        },
        "module_detail": {
            "name": "module_detail",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "module_uuid": [
                    "UUID"
                ]
            }
        },
        "module_add": {
            "name": "module_add",
            "location": 111,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "display_name": [
                    "str"
                ],
                "attributes": [
                    "'Optional[str]'"
                ],
                "tags": [
                    "'Optional[str]'"
                ],
                "memo": [
                    "'Optional[str]'"
                ]
            }
        },
        "module_remove": {
            "name": "module_remove",
            "location": 138,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "module_uuid": []
            }
        }
    },
    "CircleCore-master/circle_core/cli/replication_link.py": {
        "cli_replication_link": {
            "name": "cli_replication_link",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "list_replication_link": {
            "name": "list_replication_link",
            "location": 31,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "_format_for_columns": {
            "name": "_format_for_columns",
            "location": 45,
            "return": [
                "'Tuple[TableData, TableHeader]'"
            ],
            "arguments": {
                "replication_links": [
                    "'List[ReplicationLink]'"
                ]
            }
        },
        "show_replication_link_detail": {
            "name": "show_replication_link_detail",
            "location": 70,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "link_uuid": [
                    "UUID"
                ]
            }
        },
        "add_replication_link": {
            "name": "add_replication_link",
            "location": 114,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "display_name": [
                    "str"
                ],
                "memo": [
                    "'Optional[str]'"
                ],
                "message_box_uuids": [
                    "'List[UUID]'"
                ],
                "all_boxes": [
                    "bool"
                ]
            }
        },
        "remove_replication_link": {
            "name": "remove_replication_link",
            "location": 153,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "link_uuid": [
                    "UUID"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/replication_master.py": {
        "cli_replication_master": {
            "name": "cli_replication_master",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_replication_masters": {
            "name": "list_replication_masters",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "_format_for_columns": {
            "name": "_format_for_columns",
            "location": 43,
            "return": [
                "'Tuple[TableData, TableHeader]'"
            ],
            "arguments": {
                "objects": [
                    "'List[ReplicationMaster]'"
                ]
            }
        },
        "add_replication_master": {
            "name": "add_replication_master",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "endpoint": [
                    "str"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/schema.py": {
        "cli_schema": {
            "name": "cli_schema",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "schema_list": {
            "name": "schema_list",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "_format_for_columns": {
            "name": "_format_for_columns",
            "location": 46,
            "return": [
                "'Tuple[TableData, TableHeader]'"
            ],
            "arguments": {
                "schemas": [
                    "'List[Schema]'"
                ]
            }
        },
        "schema_detail": {
            "name": "schema_detail",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "schema_uuid": [
                    "UUID"
                ]
            }
        },
        "schema_add": {
            "name": "schema_add",
            "location": 102,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "display_name": [
                    "str"
                ],
                "memo": [
                    "'Optional[str]'"
                ],
                "name_and_types": [
                    "'List[str]'"
                ]
            }
        },
        "schema_remove": {
            "name": "schema_remove",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "schema_uuid": [
                    "UUID"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/user.py": {
        "cli_user": {
            "name": "cli_user",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "user_list": {
            "name": "user_list",
            "location": 31,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ]
            }
        },
        "_format_for_columns": {
            "name": "_format_for_columns",
            "location": 45,
            "return": [
                "'Tuple[TableData, TableHeader]'"
            ],
            "arguments": {
                "users": [
                    "'List[User]'"
                ]
            }
        },
        "user_detail": {
            "name": "user_detail",
            "location": 63,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "user_uuid": []
            }
        },
        "user_add": {
            "name": "user_add",
            "location": 96,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "account": [],
                "password": [],
                "work": [],
                "mail_address": [],
                "telephone": [],
                "admin_flag": []
            }
        },
        "user_remove": {
            "name": "user_remove",
            "location": 126,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "user_uuid": []
            }
        },
        "user_change_password": {
            "name": "user_change_password",
            "location": 148,
            "return": [],
            "arguments": {
                "ctx": [
                    "'Context'"
                ],
                "user_uuid": [],
                "new_password": []
            }
        }
    },
    "CircleCore-master/circle_core/cli/utils.py": {
        "output_listing_columns": {
            "name": "output_listing_columns",
            "location": 20,
            "return": [],
            "arguments": {
                "data": [
                    "'TableData'"
                ],
                "header": [
                    "'TableHeader'"
                ]
            }
        },
        "output_properties": {
            "name": "output_properties",
            "location": 42,
            "return": [],
            "arguments": {
                "data": [
                    "'List[Tuple[str, str]]'"
                ]
            }
        },
        "create_row_strings": {
            "name": "create_row_strings",
            "location": 55,
            "return": [
                "'Tuple[List[str], List[int]]'"
            ],
            "arguments": {
                "rows": []
            }
        },
        "convert_stringified_uuid_list": {
            "name": "convert_stringified_uuid_list",
            "location": 111,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "create_row_strings._len": {
            "name": "_len",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "create_row_strings._ljust": {
            "name": "_ljust",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "string": [
                    "str"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/cli/__init__.py": {},
    "CircleCore-master/circle_core/core/app.py": {
        "check_nnurl": {
            "name": "check_nnurl",
            "location": 380,
            "return": [],
            "arguments": {
                "sockurl": []
            }
        },
        "CircleCore.load_from_config_file": {
            "name": "load_from_config_file",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [],
                "config_filepath": [],
                "debug": []
            }
        },
        "CircleCore.load_from_default_config_file": {
            "name": "load_from_default_config_file",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": [],
                "debug": []
            }
        },
        "CircleCore._make_config_parser": {
            "name": "_make_config_parser",
            "location": 109,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CircleCore.load_from_config": {
            "name": "load_from_config",
            "location": 122,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "debug": []
            }
        },
        "CircleCore.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "config_uuid": [],
                "prefix": [],
                "metadata_file_path": [],
                "log_file_path": [],
                "hub_socket": [],
                "request_socket": [],
                "debug": []
            }
        },
        "CircleCore.add_worker": {
            "name": "add_worker",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker_type": [
                    "'WorkerType'"
                ],
                "worker_key": [
                    "'WorkerKey'"
                ],
                "worker_config": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "CircleCore.find_worker": {
            "name": "find_worker",
            "location": 213,
            "return": [
                "'Optional[CircleWorker]'"
            ],
            "arguments": {
                "self": [],
                "worker_type": [
                    "'WorkerType'"
                ],
                "worker_key": [
                    "'Optional[WorkerKey]'"
                ]
            }
        },
        "CircleCore.run": {
            "name": "run",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.get_datareceiver": {
            "name": "get_datareceiver",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.get_database": {
            "name": "get_database",
            "location": 260,
            "return": [
                "'Database'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.get_blobstore": {
            "name": "get_blobstore",
            "location": 270,
            "return": [
                "'BlobStoreWorker'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.make_hub_receiver": {
            "name": "make_hub_receiver",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "topic": []
            }
        },
        "CircleCore.prepare_directories": {
            "name": "prepare_directories",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.open_log_file": {
            "name": "open_log_file",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.open_metadata_db": {
            "name": "open_metadata_db",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.migrate_metadata_db": {
            "name": "migrate_metadata_db",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.open_alembic": {
            "name": "open_alembic",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.make_own_cc_info": {
            "name": "make_own_cc_info",
            "location": 351,
            "return": [
                "CcInfo"
            ],
            "arguments": {
                "self": [],
                "config_uuid": [
                    "'UUIDLike'"
                ]
            }
        },
        "CircleCore.start_metadata_event_logger": {
            "name": "start_metadata_event_logger",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleCore.prepare_directories._makedirs_safe": {
            "name": "_makedirs_safe",
            "location": 290,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "CircleCore-master/circle_core/core/base.py": {},
    "CircleCore-master/circle_core/core/hub.py": {
        "CoreHub.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "hub_socket": [],
                "request_socket": []
            }
        },
        "CoreHub.run": {
            "name": "run",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreHub.register_handler": {
            "name": "register_handler",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "handler": [
                    "'HandlerType'"
                ]
            }
        },
        "CoreHub.publish": {
            "name": "publish",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "'Topic'"
                ],
                "message": [
                    "'ModuleMessage'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/core/metadata_event_listener.py": {
        "MetaDataEventListener.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaDataEventListener.__del__": {
            "name": "__del__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaDataEventListener.remove_all": {
            "name": "remove_all",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaDataEventListener.on": {
            "name": "on",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Union[(str, type)]"
                ],
                "before_or_after": [
                    "str"
                ],
                "handler": [
                    "EventHandler"
                ]
            }
        },
        "MetaDataEventListener.handle_event": {
            "name": "handle_event",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ],
                "handler": [
                    "EventHandler"
                ],
                "mapper": [
                    "'Mapper'"
                ],
                "connection": [
                    "'Connection'"
                ],
                "target": [
                    "Any"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/core/metadata_event_logger.py": {
        "get_current_user": {
            "name": "get_current_user",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "MetaDataEventLogger.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "core": [
                    "'CircleCore'"
                ],
                "log_file_path": [
                    "str"
                ]
            }
        },
        "MetaDataEventLogger._install": {
            "name": "_install",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaDataEventLogger.handle_metadata_event": {
            "name": "handle_metadata_event",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "what": [],
                "target": []
            }
        },
        "MetaDataEventLogger.log": {
            "name": "log",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "what": [],
                "instance": []
            }
        }
    },
    "CircleCore-master/circle_core/core/__init__.py": {},
    "CircleCore-master/circle_core/helpers/nanomsg.py": {
        "Receiver.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "socket_url": [],
                "topic": []
            }
        },
        "Receiver.__del__": {
            "name": "__del__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Receiver.fileno": {
            "name": "fileno",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Receiver.close": {
            "name": "close",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Receiver.set_timeout": {
            "name": "set_timeout",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Receiver.register_ioloop": {
            "name": "register_ioloop",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Sender.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "socket_url": []
            }
        },
        "Sender.__del__": {
            "name": "__del__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sender.send": {
            "name": "send",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "bytes"
                ]
            }
        },
        "Replier.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "socket_url": []
            }
        },
        "Replier.__del__": {
            "name": "__del__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Replier.recv": {
            "name": "recv",
            "location": 160,
            "return": [
                "RawMessage"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replier.send": {
            "name": "send",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [
                    "RawMessage"
                ]
            }
        },
        "Replier.fileno": {
            "name": "fileno",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Replier.close": {
            "name": "close",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replier.register_ioloop": {
            "name": "register_ioloop",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [
                    "ReplierCallback"
                ]
            }
        },
        "Receiver.register_ioloop.call_callback_receiver": {
            "name": "call_callback_receiver",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "Replier.register_ioloop.call_callback_replier": {
            "name": "call_callback_replier",
            "location": 187,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/helpers/topics.py": {
        "make_topic": {
            "name": "make_topic",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "topic": [
                    "str"
                ]
            }
        },
        "make_message_topic": {
            "name": "make_message_topic",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "module_id": [
                    "Optional[uuid.UUID]"
                ],
                "box_id": [
                    "Optional[uuid.UUID]"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/helpers/__init__.py": {},
    "CircleCore-master/circle_core/models/base.py": {
        "generate_uuid": {
            "name": "generate_uuid",
            "location": 30,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "GUID.load_dialect_impl": {
            "name": "load_dialect_impl",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "GUID.process_bind_param": {
            "name": "process_bind_param",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "GUID.process_result_value": {
            "name": "process_result_value",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "StrListBase.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrListBase.process_bind_param": {
            "name": "process_bind_param",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "StrListBase.process_result_value": {
            "name": "process_result_value",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "UUIDList.process_bind_param": {
            "name": "process_bind_param",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "UUIDList.process_result_value": {
            "name": "process_result_value",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        }
    },
    "CircleCore-master/circle_core/models/cc_info.py": {
        "CcInfo.to_json": {
            "name": "to_json",
            "location": 65,
            "return": [
                "'CcInfoJson'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CcInfo.update_from_json": {
            "name": "update_from_json",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsonobj": [
                    "'CcInfoJson'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/models/invitation.py": {
        "Invitation.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "uuid": [
                    "'Union[str, UUID]'"
                ],
                "max_invites": [
                    "int"
                ],
                "current_invites": [
                    "int"
                ],
                "created_at": [
                    "Optional[Union[(str, datetime.datetime)]]"
                ]
            }
        },
        "Invitation.can_invite": {
            "name": "can_invite",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invitation.inc_invites": {
            "name": "inc_invites",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invitation.url": {
            "name": "url",
            "location": 106,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invitation.to_json": {
            "name": "to_json",
            "location": 131,
            "return": [
                "'InvitationJson'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invitation.from_json": {
            "name": "from_json",
            "location": 146,
            "return": [
                "'Invitation'"
            ],
            "arguments": {
                "cls": [],
                "jsonobj": [
                    "'InvitationJson'"
                ]
            }
        },
        "Invitation.url.build_url": {
            "name": "build_url",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/models/message_box.py": {
        "MessageBox.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.__hash__": {
            "name": "__hash__",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.__eq__": {
            "name": "__eq__",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MessageBox.cc_uuid": {
            "name": "cc_uuid",
            "location": 108,
            "return": [
                "'UUID'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.slave_uuids": {
            "name": "slave_uuids",
            "location": 117,
            "return": [
                "'List[UUID]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.to_json": {
            "name": "to_json",
            "location": 132,
            "return": [
                "'MessageBoxJson'"
            ],
            "arguments": {
                "self": [],
                "with_schema": [
                    "bool"
                ],
                "with_module": [
                    "bool"
                ],
                "with_slave_cc_infos": [
                    "bool"
                ]
            }
        },
        "MessageBox.update_from_json": {
            "name": "update_from_json",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsonobj": []
            }
        },
        "MessageBox.url": {
            "name": "url",
            "location": 180,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.url.build_url": {
            "name": "build_url",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/models/module.py": {
        "ModuleAttribute.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name_and_value": [
                    "Union[(str, 'ModuleAttributeJson')]"
                ]
            }
        },
        "ModuleAttribute.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleAttribute.to_json": {
            "name": "to_json",
            "location": 80,
            "return": [
                "'ModuleAttributeJson'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleAttributes.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "name_and_values": [
                    "'Union[str, Tuple[str, ...], Tuple[ModuleAttributeJson, ...], List[str], List[ModuleAttributeJson]]'"
                ]
            }
        },
        "ModuleAttributes.__iter__": {
            "name": "__iter__",
            "location": 112,
            "return": [
                "Iterator[ModuleAttribute]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleAttributes.__len__": {
            "name": "__len__",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleAttributes.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.create": {
            "name": "create",
            "location": 180,
            "return": [
                "'Module'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Module.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.__hash__": {
            "name": "__hash__",
            "location": 206,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.__eq__": {
            "name": "__eq__",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Module.tags": {
            "name": "tags",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "tags": []
            }
        },
        "Module.to_tags_list": {
            "name": "to_tags_list",
            "location": 250,
            "return": [],
            "arguments": {
                "cls": [],
                "tags": []
            }
        },
        "Module.attributes": {
            "name": "attributes",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": []
            }
        },
        "Module.to_json": {
            "name": "to_json",
            "location": 288,
            "return": [
                "'ModuleJson'"
            ],
            "arguments": {
                "self": [],
                "with_boxes": [
                    "bool"
                ],
                "with_schema": [
                    "bool"
                ],
                "with_cc_info": [
                    "bool"
                ]
            }
        },
        "Module.update_from_json": {
            "name": "update_from_json",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "jsonobj": [
                    "'ModuleJson'"
                ],
                "with_boxes": [
                    "bool"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/models/replication_link.py": {
        "ReplicationLink.create": {
            "name": "create",
            "location": 104,
            "return": [
                "'ReplicationLink'"
            ],
            "arguments": {
                "cls": [],
                "display_name": [],
                "memo": [],
                "message_box_uuids": []
            }
        },
        "ReplicationLink.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationLink.__eq__": {
            "name": "__eq__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ReplicationLink.link": {
            "name": "link",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationLink.to_json": {
            "name": "to_json",
            "location": 181,
            "return": [
                "'ReplicationLinkJson'"
            ],
            "arguments": {
                "self": [],
                "with_slaves": [
                    "bool"
                ],
                "with_boxes": [
                    "bool"
                ],
                "with_module": [
                    "bool"
                ],
                "with_schema": [
                    "bool"
                ]
            }
        },
        "ReplicationLink.link.build_link": {
            "name": "build_link",
            "location": 155,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/models/replication_master.py": {
        "ReplicationMaster.to_json": {
            "name": "to_json",
            "location": 55,
            "return": [
                "'ReplicationMasterJson'"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/circle_core/models/schema.py": {
        "SchemaProperty.__new__": {
            "name": "__new__",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [
                    "'Union[SchemaPropertyJson, str]'"
                ],
                "type": [
                    "Optional[str]"
                ]
            }
        },
        "SchemaProperty.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaProperty.to_json": {
            "name": "to_json",
            "location": 70,
            "return": [
                "'SchemaPropertyJson'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaProperty.type": {
            "name": "type",
            "location": 79,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaProperty.type_val": {
            "name": "type_val",
            "location": 84,
            "return": [
                "Optional[CRDataType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaProperties.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "props": [
                    "Union[(str, Tuple[(str, ...)], List[str])]"
                ]
            }
        },
        "SchemaProperties.__iter__": {
            "name": "__iter__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaProperties.__len__": {
            "name": "__len__",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaProperties.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaProperties.append": {
            "name": "append",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "'Union[SchemaProperty]'"
                ]
            }
        },
        "Schema.create": {
            "name": "create",
            "location": 179,
            "return": [
                "'Schema'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.__hash__": {
            "name": "__hash__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.__eq__": {
            "name": "__eq__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Schema.properties": {
            "name": "properties",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "properties": []
            }
        },
        "Schema.to_json": {
            "name": "to_json",
            "location": 250,
            "return": [
                "'SchemaJson'"
            ],
            "arguments": {
                "self": [],
                "with_modules": []
            }
        },
        "Schema.update_from_json": {
            "name": "update_from_json",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "jsonobj": []
            }
        },
        "Schema.check_match": {
            "name": "check_match",
            "location": 285,
            "return": [
                "'Tuple[bool, Optional[str]]'"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Schema.check_match.validate_int": {
            "name": "validate_int",
            "location": 300,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_float": {
            "name": "validate_float",
            "location": 303,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_bool": {
            "name": "validate_bool",
            "location": 306,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_string": {
            "name": "validate_string",
            "location": 309,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_bytes": {
            "name": "validate_bytes",
            "location": 312,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_date": {
            "name": "validate_date",
            "location": 315,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_datetime": {
            "name": "validate_datetime",
            "location": 318,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_time": {
            "name": "validate_time",
            "location": 321,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_timestamp": {
            "name": "validate_timestamp",
            "location": 324,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Schema.check_match.validate_blob": {
            "name": "validate_blob",
            "location": 327,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "CircleCore-master/circle_core/models/user.py": {
        "encrypt_password": {
            "name": "encrypt_password",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "password": [
                    "str"
                ],
                "salt": [
                    "Optional[str]"
                ]
            }
        },
        "is_password_matched": {
            "name": "is_password_matched",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "test": [
                    "str"
                ],
                "encrypted": [
                    "str"
                ]
            }
        },
        "UserQuery.filter_by_encoded_token": {
            "name": "filter_by_encoded_token",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "encoded_token": []
            }
        },
        "User.create": {
            "name": "create",
            "location": 89,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.permissions": {
            "name": "permissions",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "permissions": []
            }
        },
        "User.is_password_matched": {
            "name": "is_password_matched",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "User.is_admin": {
            "name": "is_admin",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 166,
            "return": [],
            "arguments": {
                "cls": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.set_password": {
            "name": "set_password",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "new_password": [
                    "str"
                ]
            }
        },
        "User.encoded_token": {
            "name": "encoded_token",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.renew_token": {
            "name": "renew_token",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.to_json": {
            "name": "to_json",
            "location": 194,
            "return": [
                "'UserJson'"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool"
                ]
            }
        },
        "User.update_from_json": {
            "name": "update_from_json",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsonobj": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/models/__init__.py": {},
    "CircleCore-master/circle_core/models/oauth/__init__.py": {
        "OAuthClient.validate_scopes": {
            "name": "validate_scopes",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "scopes": []
            }
        },
        "OAuthGrant.to_json": {
            "name": "to_json",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthGrant.from_json": {
            "name": "from_json",
            "location": 105,
            "return": [
                "'OAuthGrant'"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "str"
                ]
            }
        },
        "OAuthGrant.delete": {
            "name": "delete",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthToken.expires": {
            "name": "expires",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAuthToken.delete": {
            "name": "delete",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAuthToken.to_json": {
            "name": "to_json",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAuthToken.from_json": {
            "name": "from_json",
            "location": 188,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        }
    },
    "CircleCore-master/circle_core/web/app.py": {
        "check_login": {
            "name": "check_login",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "get_user_from_request": {
            "name": "get_user_from_request",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "CCWebApp.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "core": [
                    "'CircleCore'"
                ],
                "base_url": [
                    "'Optional[str]'"
                ],
                "ws_port": [
                    "'Optional[int]'"
                ],
                "is_https": [
                    "bool"
                ]
            }
        },
        "CCWebApp.core": {
            "name": "core",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCWebApp.build_frontend": {
            "name": "build_frontend",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UUIDConverter.to_python": {
            "name": "to_python",
            "location": 140,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "UUIDConverter.to_url": {
            "name": "to_url",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "'Union[str, uuid.UUID]'"
                ]
            }
        },
        "CCWebApp.__init__.favicon_ico": {
            "name": "favicon_ico",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "CCWebApp.__init__._index": {
            "name": "_index",
            "location": 96,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "CCWebApp.__init__.global_variables": {
            "name": "global_variables",
            "location": 106,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/web/utils.py": {
        "dumps": {
            "name": "dumps",
            "location": 22,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "api_jsonify": {
            "name": "api_jsonify",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "oauth_require_read_users_scope": {
            "name": "oauth_require_read_users_scope",
            "location": 44,
            "return": [],
            "arguments": {
                "f": [
                    "'Callable[..., Any]'"
                ]
            }
        },
        "oauth_require_write_users_scope": {
            "name": "oauth_require_write_users_scope",
            "location": 53,
            "return": [],
            "arguments": {
                "f": [
                    "'Callable[..., Any]'"
                ]
            }
        },
        "oauth_require_read_schema_scope": {
            "name": "oauth_require_read_schema_scope",
            "location": 62,
            "return": [],
            "arguments": {
                "f": [
                    "'Callable[..., Any]'"
                ]
            }
        },
        "oauth_require_write_schema_scope": {
            "name": "oauth_require_write_schema_scope",
            "location": 71,
            "return": [],
            "arguments": {
                "f": [
                    "'Callable[..., Any]'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/web/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 15,
            "return": [
                "'CCWebApp'"
            ],
            "arguments": {
                "core": [
                    "'CircleCore'"
                ],
                "base_url": [
                    "'Optional[str]'"
                ],
                "ws_port": [
                    "'Optional[int]'"
                ],
                "is_https": [
                    "'bool'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/web/api/api.py": {
        "before_request": {
            "name": "before_request",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/web/api/cc_infos.py": {
        "api_cores": {
            "name": "api_cores",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "_get_cores": {
            "name": "_get_cores",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "_post_cores": {
            "name": "_post_cores",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "api_core_myself": {
            "name": "api_core_myself",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "_get_core_myself": {
            "name": "_get_core_myself",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "api_core": {
            "name": "api_core",
            "location": 65,
            "return": [],
            "arguments": {
                "cc_info_uuid": []
            }
        },
        "_get_core": {
            "name": "_get_core",
            "location": 79,
            "return": [],
            "arguments": {
                "cc_info": []
            }
        },
        "_put_core": {
            "name": "_put_core",
            "location": 90,
            "return": [],
            "arguments": {
                "cc_info": []
            }
        }
    },
    "CircleCore-master/circle_core/web/api/invitations.py": {
        "api_invitations": {
            "name": "api_invitations",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "_get_invitations": {
            "name": "_get_invitations",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "_post_invitation": {
            "name": "_post_invitation",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "api_invitation": {
            "name": "api_invitation",
            "location": 58,
            "return": [],
            "arguments": {
                "obj_uuid": []
            }
        },
        "_delete_invitation": {
            "name": "_delete_invitation",
            "location": 74,
            "return": [],
            "arguments": {
                "invitation": []
            }
        }
    },
    "CircleCore-master/circle_core/web/api/modules.py": {
        "api_modules": {
            "name": "api_modules",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "_get_modules": {
            "name": "_get_modules",
            "location": 39,
            "return": [
                "'Response'"
            ],
            "arguments": {}
        },
        "_post_modules": {
            "name": "_post_modules",
            "location": 49,
            "return": [
                "'Response'"
            ],
            "arguments": {}
        },
        "api_module": {
            "name": "api_module",
            "location": 70,
            "return": [],
            "arguments": {
                "module_uuid": []
            }
        },
        "_get_module": {
            "name": "_get_module",
            "location": 86,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "_put_module": {
            "name": "_put_module",
            "location": 97,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "_delete_module": {
            "name": "_delete_module",
            "location": 117,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "api_module_graph": {
            "name": "api_module_graph",
            "location": 134,
            "return": [],
            "arguments": {
                "module_uuid": []
            }
        },
        "api_message_box_graph": {
            "name": "api_message_box_graph",
            "location": 148,
            "return": [],
            "arguments": {
                "module_uuid": [],
                "messagebox_uuid": []
            }
        },
        "_respond_rickshaw_graph_data": {
            "name": "_respond_rickshaw_graph_data",
            "location": 162,
            "return": [],
            "arguments": {
                "boxes": [],
                "graph_range": []
            }
        },
        "fetch_rickshaw_graph_data": {
            "name": "fetch_rickshaw_graph_data",
            "location": 173,
            "return": [],
            "arguments": {
                "boxes": [],
                "graph_range": [],
                "timed_db_bundle": [],
                "end_time": []
            }
        },
        "api_message_box_data": {
            "name": "api_message_box_data",
            "location": 224,
            "return": [],
            "arguments": {
                "module_uuid": [],
                "messagebox_uuid": []
            }
        }
    },
    "CircleCore-master/circle_core/web/api/replication_links.py": {
        "api_replicas": {
            "name": "api_replicas",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "_get_replicas": {
            "name": "_get_replicas",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "_post_replicas": {
            "name": "_post_replicas",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "api_replica": {
            "name": "api_replica",
            "location": 60,
            "return": [],
            "arguments": {
                "replication_link_uuid": []
            }
        },
        "_get_replica": {
            "name": "_get_replica",
            "location": 74,
            "return": [],
            "arguments": {
                "replication_link": []
            }
        },
        "_delete_replica": {
            "name": "_delete_replica",
            "location": 85,
            "return": [],
            "arguments": {
                "replication_link": []
            }
        }
    },
    "CircleCore-master/circle_core/web/api/replication_masters.py": {
        "api_repliction_masters": {
            "name": "api_repliction_masters",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "_get_replication_masters": {
            "name": "_get_replication_masters",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "_post_replication_masters": {
            "name": "_post_replication_masters",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "api_replication_master": {
            "name": "api_replication_master",
            "location": 60,
            "return": [],
            "arguments": {
                "replication_master_id": []
            }
        },
        "_get_replication_master": {
            "name": "_get_replication_master",
            "location": 74,
            "return": [],
            "arguments": {
                "replication_master": []
            }
        },
        "_delete_replication_master": {
            "name": "_delete_replication_master",
            "location": 85,
            "return": [],
            "arguments": {
                "replication_master": []
            }
        }
    },
    "CircleCore-master/circle_core/web/api/schemas.py": {
        "api_schemas": {
            "name": "api_schemas",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "_get_schemas": {
            "name": "_get_schemas",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "_post_schemas": {
            "name": "_post_schemas",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "api_schema": {
            "name": "api_schema",
            "location": 52,
            "return": [],
            "arguments": {
                "schema_uuid": []
            }
        },
        "_get_schema": {
            "name": "_get_schema",
            "location": 64,
            "return": [],
            "arguments": {
                "schema_uuid": []
            }
        },
        "_delete_schema": {
            "name": "_delete_schema",
            "location": 79,
            "return": [],
            "arguments": {
                "schema_uuid": []
            }
        },
        "api_get_property_types": {
            "name": "api_get_property_types",
            "location": 105,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/web/api/users.py": {
        "api_users": {
            "name": "api_users",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "_get_users": {
            "name": "_get_users",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "api_user_me": {
            "name": "api_user_me",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "_get_user_me": {
            "name": "_get_user_me",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "api_user": {
            "name": "api_user",
            "location": 64,
            "return": [],
            "arguments": {
                "user_uuid": []
            }
        },
        "api_user_renew_token": {
            "name": "api_user_renew_token",
            "location": 81,
            "return": [],
            "arguments": {
                "user_uuid": []
            }
        },
        "_get_user": {
            "name": "_get_user",
            "location": 102,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "_put_user": {
            "name": "_put_user",
            "location": 114,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "_delete_user": {
            "name": "_delete_user",
            "location": 163,
            "return": [],
            "arguments": {
                "user": []
            }
        }
    },
    "CircleCore-master/circle_core/web/api/utils.py": {
        "respond_failure": {
            "name": "respond_failure",
            "location": 20,
            "return": [
                "'Response'"
            ],
            "arguments": {
                "reason": [
                    "str"
                ],
                "_status": [
                    "int"
                ]
            }
        },
        "respond_success": {
            "name": "respond_success",
            "location": 39,
            "return": [
                "'Response'"
            ],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/web/api/__init__.py": {},
    "CircleCore-master/circle_core/web/authorize/core.py": {
        "initialize_oauth": {
            "name": "initialize_oauth",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "load_client": {
            "name": "load_client",
            "location": 57,
            "return": [],
            "arguments": {
                "client_id": []
            }
        },
        "load_grant": {
            "name": "load_grant",
            "location": 62,
            "return": [],
            "arguments": {
                "client_id": [],
                "code": []
            }
        },
        "save_grant": {
            "name": "save_grant",
            "location": 71,
            "return": [],
            "arguments": {
                "client_id": [],
                "code": [],
                "request": []
            }
        },
        "load_token": {
            "name": "load_token",
            "location": 97,
            "return": [],
            "arguments": {
                "access_token": [],
                "refresh_token": []
            }
        },
        "save_token": {
            "name": "save_token",
            "location": 114,
            "return": [],
            "arguments": {
                "token": [],
                "request": []
            }
        }
    },
    "CircleCore-master/circle_core/web/authorize/views.py": {
        "_login": {
            "name": "_login",
            "location": 24,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "_logout": {
            "name": "_logout",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "before_request": {
            "name": "before_request",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "oauth_authorize": {
            "name": "oauth_authorize",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "oauth_login": {
            "name": "oauth_login",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "_find_user_by_password": {
            "name": "_find_user_by_password",
            "location": 107,
            "return": [],
            "arguments": {
                "account": [],
                "password": []
            }
        },
        "oauth_error": {
            "name": "oauth_error",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "access_token": {
            "name": "access_token",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "revoke_token": {
            "name": "revoke_token",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "invalid_require_oauth": {
            "name": "invalid_require_oauth",
            "location": 147,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "test_scope_view": {
            "name": "test_scope_view",
            "location": 159,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/web/authorize/__init__.py": {},
    "CircleCore-master/circle_core/web/download/download.py": {
        "before_request": {
            "name": "before_request",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "check_auth": {
            "name": "check_auth",
            "location": 33,
            "return": [],
            "arguments": {
                "username": [],
                "password": []
            }
        },
        "authenticate": {
            "name": "authenticate",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/circle_core/web/download/views.py": {
        "download_message_box_data": {
            "name": "download_message_box_data",
            "location": 20,
            "return": [],
            "arguments": {
                "module_uuid": [],
                "message_box_uuid": []
            }
        },
        "download_message_box_data.generate": {
            "name": "generate",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "download_message_box_data.generate.to_line": {
            "name": "to_line",
            "location": 41,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "download_message_box_data.generate.to_data_line": {
            "name": "to_data_line",
            "location": 44,
            "return": [],
            "arguments": {
                "m": []
            }
        }
    },
    "CircleCore-master/circle_core/web/download/__init__.py": {},
    "CircleCore-master/circle_core/web/public/views.py": {
        "invitation_endpoint": {
            "name": "invitation_endpoint",
            "location": 22,
            "return": [],
            "arguments": {
                "link_uuid": [
                    "'uuid.UUID'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/web/public/__init__.py": {},
    "CircleCore-master/circle_core/workers/base.py": {
        "register_worker_factory": {
            "name": "register_worker_factory",
            "location": 19,
            "return": [],
            "arguments": {
                "type": []
            }
        },
        "make_worker": {
            "name": "make_worker",
            "location": 29,
            "return": [
                "'CircleWorker'"
            ],
            "arguments": {
                "core": [
                    "'CircleCore'"
                ],
                "type": [
                    "WorkerType"
                ],
                "key": [
                    "WorkerKey"
                ],
                "config": [
                    "WorkerConfig"
                ]
            }
        },
        "register_worker_factory._f": {
            "name": "_f",
            "location": 21,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "CircleWorker.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "worker_key": []
            }
        },
        "CircleWorker.initialize": {
            "name": "initialize",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircleWorker.finalize": {
            "name": "finalize",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/circle_core/workers/blobstore.py": {
        "create_blobstore_worker": {
            "name": "create_blobstore_worker",
            "location": 69,
            "return": [],
            "arguments": {
                "core": [],
                "type": [],
                "key": [],
                "config": []
            }
        },
        "StoredBlob.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "UUID"
                ],
                "content_type": [
                    "str"
                ],
                "datahash": [
                    "str"
                ]
            }
        },
        "StoredBlob.save": {
            "name": "save",
            "location": 41,
            "return": [
                "'StoredBlob'"
            ],
            "arguments": {
                "cls": [],
                "repos_dir": [
                    "str"
                ],
                "mbox": [
                    "'MessageBox'"
                ],
                "content_type": [
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "StoredBlob.make_path": {
            "name": "make_path",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "repos_dir": [
                    "str"
                ],
                "mbox": [
                    "'MessageBox'"
                ],
                "datahash": [
                    "str"
                ]
            }
        },
        "BlobStoreWorker.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "key": [],
                "repos_dir": []
            }
        },
        "BlobStoreWorker.initialize": {
            "name": "initialize",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreWorker.finalize": {
            "name": "finalize",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreWorker.store_blob_url": {
            "name": "store_blob_url",
            "location": 104,
            "return": [
                "StoredBlob"
            ],
            "arguments": {
                "self": [],
                "mbox": [
                    "'MessageBox'"
                ],
                "data_url": [
                    "str"
                ]
            }
        },
        "BlobStoreWorker.store_blob": {
            "name": "store_blob",
            "location": 113,
            "return": [
                "StoredBlob"
            ],
            "arguments": {
                "self": [],
                "mbox": [
                    "'MessageBox'"
                ],
                "content_type": [
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/workers/datareceiver.py": {
        "create_datareceiver_worker": {
            "name": "create_datareceiver_worker",
            "location": 33,
            "return": [],
            "arguments": {
                "core": [],
                "type": [],
                "key": [],
                "config": []
            }
        },
        "DataReceiverWorker.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "key": [],
                "db_url": [],
                "time_db_dir": [],
                "log_dir": [],
                "cycle_time": [],
                "cycle_count": []
            }
        },
        "DataReceiverWorker.initialize": {
            "name": "initialize",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataReceiverWorker.finalize": {
            "name": "finalize",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataReceiverWorker.on_change_messagebox": {
            "name": "on_change_messagebox",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "what": [],
                "target": []
            }
        },
        "DataReceiverWorker.find_message_box": {
            "name": "find_message_box",
            "location": 129,
            "return": [
                "MessageBox"
            ],
            "arguments": {
                "self": [],
                "box_id": [
                    "'uuid.UUID'"
                ]
            }
        },
        "DataReceiverWorker.make_primary_key": {
            "name": "make_primary_key",
            "location": 145,
            "return": [
                "ModuleMessage"
            ],
            "arguments": {
                "self": [],
                "message_box": [
                    "MessageBox"
                ],
                "payload": [
                    "'Payload'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/workers/__init__.py": {},
    "CircleCore-master/circle_core/workers/http/module_event.py": {
        "ModuleEventHandler.open": {
            "name": "open",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "module_uuid": [],
                "mbox_uuid": []
            }
        },
        "ModuleEventHandler.on_close": {
            "name": "on_close",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleEventHandler.check_origin": {
            "name": "check_origin",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "origin": []
            }
        },
        "ModuleEventHandler.get_core": {
            "name": "get_core",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleEventHandler.setup": {
            "name": "setup",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "module_uuid": [],
                "mbox_uuid": []
            }
        },
        "ModuleEventHandler.check_authorize": {
            "name": "check_authorize",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleEventHandler._read_multipart_mixed": {
            "name": "_read_multipart_mixed",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleEventHandler._read_multipart_formdata": {
            "name": "_read_multipart_formdata",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/circle_core/workers/http/replication_master.py": {
        "SyncState.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "box": [
                    "MessageBox"
                ],
                "master_head": [
                    "ModuleMessagePrimaryKey"
                ]
            }
        },
        "SyncState.is_synced": {
            "name": "is_synced",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncState.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationMasterHandler.open": {
            "name": "open",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "link_uuid": []
            }
        },
        "ReplicationMasterHandler.get_core": {
            "name": "get_core",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationMasterHandler.on_close": {
            "name": "on_close",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationMasterHandler.check_origin": {
            "name": "check_origin",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "origin": []
            }
        },
        "ReplicationMasterHandler._send_command": {
            "name": "_send_command",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "ReplicationMasterHandler.send_migrate": {
            "name": "send_migrate",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplicationMasterHandler.on_new_message": {
            "name": "on_new_message",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "jsonobj": []
            }
        }
    },
    "CircleCore-master/circle_core/workers/http/__init__.py": {
        "create_http_worker": {
            "name": "create_http_worker",
            "location": 24,
            "return": [],
            "arguments": {
                "core": [],
                "type": [],
                "key": [],
                "config": []
            }
        },
        "create_http_worker._config_get_bool": {
            "name": "_config_get_bool",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "HTTPWorker.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "worker_key": [],
                "listen": [],
                "ws_on": [],
                "ws_port": [],
                "admin_on": [],
                "admin_port": [],
                "admin_base_url": [],
                "skip_build": [],
                "tls_key_path": [],
                "tls_crt_path": []
            }
        },
        "HTTPWorker.initialize": {
            "name": "initialize",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/circle_core/workers/slave_driver/replicator.py": {
        "ConnectionClosed.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "code": [],
                "reason": []
            }
        },
        "ConnectionClosed.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Replicator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [
                    "'SlaveDriverWorker'"
                ],
                "master": [
                    "'ReplicationMaster'"
                ],
                "request_options": []
            }
        },
        "Replicator.run": {
            "name": "run",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Replicator.close": {
            "name": "close",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Replicator.clear": {
            "name": "clear",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Replicator._send_command": {
            "name": "_send_command",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "command": [
                    "MasterCommand"
                ]
            }
        },
        "Replicator.send_hello_command": {
            "name": "send_hello_command",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Replicator.send_migrated_command": {
            "name": "send_migrated_command",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/circle_core/workers/slave_driver/__init__.py": {
        "create_slave_driver": {
            "name": "create_slave_driver",
            "location": 18,
            "return": [],
            "arguments": {
                "core": [],
                "type": [],
                "key": [],
                "config": []
            }
        },
        "SlaveDriverWorker.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "worker_key": [],
                "ssl_validate_cert": []
            }
        },
        "SlaveDriverWorker.initialize": {
            "name": "initialize",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlaveDriverWorker.run": {
            "name": "run",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlaveDriverWorker.finalize": {
            "name": "finalize",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlaveDriverWorker.start_replicator": {
            "name": "start_replicator",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "master": []
            }
        }
    },
    "CircleCore-master/circle_core/writer/base.py": {},
    "CircleCore-master/circle_core/writer/journal_writer.py": {
        "open_journal_reader_writer": {
            "name": "open_journal_reader_writer",
            "location": 175,
            "return": [
                "Tuple[('JournalReader', 'JournalWriter')]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "list_log_files": {
            "name": "list_log_files",
            "location": 214,
            "return": [],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "make_log_file_path": {
            "name": "make_log_file_path",
            "location": 286,
            "return": [],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "json_object_hook": {
            "name": "json_object_hook",
            "location": 407,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "JournalReaderDelegate.on_advance_log_file": {
            "name": "on_advance_log_file",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_log_file_index": [
                    "int"
                ]
            }
        },
        "JournalDBWriter.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "child_writer": [],
                "dirpath": []
            }
        },
        "JournalDBWriter.__del__": {
            "name": "__del__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JournalDBWriter.touch": {
            "name": "touch",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JournalDBWriter.on_advance_log_file": {
            "name": "on_advance_log_file",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_log_file_index": [
                    "int"
                ]
            }
        },
        "JournalDBWriter.find_message_box": {
            "name": "find_message_box",
            "location": 165,
            "return": [
                "MessageBox"
            ],
            "arguments": {
                "self": [],
                "box_id": [
                    "str"
                ]
            }
        },
        "JournalWriter.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "JournalWriter.close": {
            "name": "close",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JournalWriter.write": {
            "name": "write",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "JournalWriter.prepare": {
            "name": "prepare",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JournalWriter.advance_log_file_if_needed": {
            "name": "advance_log_file_if_needed",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "JournalReader.close": {
            "name": "close",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.read_position": {
            "name": "read_position",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCJSONEncoder.__init__": {
            "name": "__init__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCJSONEncoder.default": {
            "name": "default",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        }
    },
    "CircleCore-master/circle_core/writer/queued_writer.py": {
        "QueuedDBWriter.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "database": [],
                "time_db_dir": []
            }
        },
        "QueuedDBWriter.connect_to_database": {
            "name": "connect_to_database",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuedDBWriter.cleanup_database_sync": {
            "name": "cleanup_database_sync",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuedDBWriter.flush_timed_db": {
            "name": "flush_timed_db",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "flush_all": []
            }
        },
        "QueuedDBWriter.store_message": {
            "name": "store_message",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_box": [
                    "'MessageBox'"
                ],
                "message": [
                    "'ModuleMessage'"
                ]
            }
        }
    },
    "CircleCore-master/circle_core/writer/__init__.py": {},
    "CircleCore-master/doc/source/conf.py": {},
    "CircleCore-master/sample/download_api.py": {
        "setup_basic_auth": {
            "name": "setup_basic_auth",
            "location": 20,
            "return": [],
            "arguments": {
                "uri": [],
                "user": [],
                "password": []
            }
        },
        "download": {
            "name": "download",
            "location": 44,
            "return": [],
            "arguments": {
                "base_uri": [],
                "user": [],
                "password": [],
                "module_id": [],
                "box_id": [],
                "start": [],
                "end": [],
                "filename": []
            }
        }
    },
    "CircleCore-master/sample/sensor_bitcoin.py": {
        "bitcoin_bot": {
            "name": "bitcoin_bot",
            "location": 21,
            "return": [],
            "arguments": {
                "send_to": [],
                "box_id": []
            }
        }
    },
    "CircleCore-master/sample/sensor_counter.py": {
        "counter_bot": {
            "name": "counter_bot",
            "location": 16,
            "return": [],
            "arguments": {
                "send_to": [],
                "box_id": [],
                "interval": [],
                "silent": []
            }
        }
    },
    "CircleCore-master/sample/sensor_echo.py": {
        "echo_bot": {
            "name": "echo_bot",
            "location": 22,
            "return": [],
            "arguments": {
                "receive_from": [],
                "send_to": [],
                "box_id": []
            }
        }
    },
    "CircleCore-master/sample/sensor_many_types.py": {
        "many_types_bot": {
            "name": "many_types_bot",
            "location": 22,
            "return": [],
            "arguments": {
                "send_to": [],
                "box_id": [],
                "send_null_value": []
            }
        },
        "many_types_bot.null_or_value": {
            "name": "null_or_value",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "CircleCore-master/sample/sensor_rand.py": {
        "rand_bot": {
            "name": "rand_bot",
            "location": 23,
            "return": [],
            "arguments": {
                "send_to": [],
                "box_id": []
            }
        }
    },
    "CircleCore-master/sample/subscribe_echo.py": {
        "subscribe": {
            "name": "subscribe",
            "location": 21,
            "return": [],
            "arguments": {
                "receive_from": [],
                "topic": [],
                "timeout": []
            }
        }
    },
    "CircleCore-master/scribble/mysql_test.py": {
        "_init_logging": {
            "name": "_init_logging",
            "location": 16,
            "return": [],
            "arguments": {
                "debug": []
            }
        },
        "async_input": {
            "name": "async_input",
            "location": 104,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/scribble/replication.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {
                "master_dir": [],
                "slave_dir": []
            }
        }
    },
    "CircleCore-master/tests/conftest.py": {
        "clear_metadata": {
            "name": "clear_metadata",
            "location": 16,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "clear_log": {
            "name": "clear_log",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "mysql": {
            "name": "mysql",
            "location": 36,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "class_wide_mysql": {
            "name": "class_wide_mysql",
            "location": 64,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "mock_circlecore": {
            "name": "mock_circlecore",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "clear_metadata._clear_file": {
            "name": "_clear_file",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "mysql.at_exit": {
            "name": "at_exit",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/tests/test_database.py": {},
    "CircleCore-master/tests/test_serialize.py": {
        "test_message_jsonize": {
            "name": "test_message_jsonize",
            "location": 30,
            "return": [],
            "arguments": {
                "payload": [],
                "expected": []
            }
        }
    },
    "CircleCore-master/tests/__init__.py": {},
    "CircleCore-master/tests/cli/test_cli_invitation.py": {
        "TestCliInvitation.test_invitation": {
            "name": "test_invitation",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCliInvitation.test_invitation._call": {
            "name": "_call",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/tests/cli/test_cli_main.py": {
        "TestCliMain.test_main_env_failure": {
            "name": "test_main_env_failure",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "main_params": [],
                "expected": []
            }
        },
        "TestCliMain.test_main_env_success": {
            "name": "test_main_env_success",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "main_param_uuid": [],
                "expected": []
            }
        },
        "TestCliMain.test_main_migrate_failure": {
            "name": "test_main_migrate_failure",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestCliMain.test_main_migrate": {
            "name": "test_main_migrate",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestCliMain.test_main_migrate.MockDatabase.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCliMain.test_main_migrate.MockDatabase.__getattr__": {
            "name": "__getattr__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestCliMain.test_main_migrate.MockDatabase.__getattr__._f": {
            "name": "_f",
            "location": 97,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/tests/cli/test_cli_module.py": {
        "TestCliModule.test_module": {
            "name": "test_module",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCliModule.test_module._call": {
            "name": "_call",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/tests/cli/test_cli_schema.py": {
        "TestCliSchema.test_schema": {
            "name": "test_schema",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCliSchema.test_schema._call": {
            "name": "_call",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/tests/cli/test_cli_user.py": {
        "TestCliUser.test_user": {
            "name": "test_user",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCliUser.test_user._call": {
            "name": "_call",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/tests/helpers/test_nanomsg.py": {},
    "CircleCore-master/tests/models/test_cc_info.py": {
        "TestCcInfo.test_cc_info": {
            "name": "test_cc_info",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        }
    },
    "CircleCore-master/tests/models/test_invitation.py": {
        "TestInvitation.test_invitation": {
            "name": "test_invitation",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        }
    },
    "CircleCore-master/tests/models/test_message_box.py": {
        "TestMessageBox.test_message_box": {
            "name": "test_message_box",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        },
        "TestMessageBox.test_update_from_json": {
            "name": "test_update_from_json",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        }
    },
    "CircleCore-master/tests/models/test_module.py": {
        "TestModule.test_module": {
            "name": "test_module",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        }
    },
    "CircleCore-master/tests/models/test_replication_link.py": {
        "TestReplicationLink.test_replication_link": {
            "name": "test_replication_link",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        }
    },
    "CircleCore-master/tests/models/test_schema.py": {
        "TestSchema.test_schema": {
            "name": "test_schema",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        },
        "TestSchema.test_check_match": {
            "name": "test_check_match",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "data": [],
                "expected": [],
                "mock_circlecore": []
            }
        }
    },
    "CircleCore-master/tests/models/test_user.py": {
        "TestUser.test_user": {
            "name": "test_user",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "_input": [],
                "expected": [],
                "mock_circlecore": []
            }
        },
        "TestUser.test_update_from_json": {
            "name": "test_update_from_json",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "old": [],
                "new": [],
                "expected": [],
                "mock_circlecore": []
            }
        },
        "TestUser.test_user_token": {
            "name": "test_user_token",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "mock_circlecore": []
            }
        }
    },
    "CircleCore-master/tests/models/__init__.py": {},
    "CircleCore-master/tests/server/ws/test_replication_master.py": {},
    "CircleCore-master/tests/web/api/test_modules.py": {
        "AdminWebBase.get_app": {
            "name": "get_app",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminWebBase.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminWebBase.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NiceTestSuite.test_moge": {
            "name": "test_moge",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/tests/workers/test_datareceiver.py": {},
    "CircleCore-master/tests/workers/test_module_event_handler.py": {
        "load_file": {
            "name": "load_file",
            "location": 195,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "encode_to_data": {
            "name": "encode_to_data",
            "location": 206,
            "return": [],
            "arguments": {
                "content_type": [],
                "encoding": [],
                "data": []
            }
        },
        "make_multipart_request": {
            "name": "make_multipart_request",
            "location": 214,
            "return": [],
            "arguments": {
                "content_type": [],
                "mainbody": [],
                "append_filename": []
            }
        },
        "TestModuleEventHandlerBase.get_app": {
            "name": "get_app",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerBase.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerBase.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerBase.reset_mock": {
            "name": "reset_mock",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerViaREST.test_rest_not_found": {
            "name": "test_rest_not_found",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerViaREST.test_rest": {
            "name": "test_rest",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerViaREST.test_rest_with_data": {
            "name": "test_rest_with_data",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerViaWebsocket.get_protocol": {
            "name": "get_protocol",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerViaWebsocket.test_websocket_auth_failed": {
            "name": "test_websocket_auth_failed",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerViaWebsocket.test_websocket_not_found": {
            "name": "test_websocket_not_found",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleEventHandlerViaWebsocket.test_websocket_pass_to_nanomsg": {
            "name": "test_websocket_pass_to_nanomsg",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CircleCore-master/tests/workers/test_replication.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 17,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "teardown_module": {
            "name": "teardown_module",
            "location": 21,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "terminate_crcr": {
            "name": "terminate_crcr",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "save_cwd": {
            "name": "save_cwd",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_reproduce_missing_message": {
            "name": "test_reproduce_missing_message",
            "location": 38,
            "return": [],
            "arguments": {
                "tmpdir_factory": [],
                "save_cwd": [],
                "caplog": []
            }
        }
    },
    "CircleCore-master/tests/workers/test_replication_slave.py": {
        "make_dummy_read_message": {
            "name": "make_dummy_read_message",
            "location": 287,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "CircleCore-master/tests/writer/test_journal_writer.py": {
        "dummy_mbox": {
            "name": "dummy_mbox",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "CircleCore-master/tests/writer/test_queued_writer.py": {}
}
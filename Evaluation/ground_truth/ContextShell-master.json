{
    "ContextShell-master/ActionNode.py": {
        "NodeArgumentWrapper": {
            "name": "NodeArgumentWrapper",
            "location": 24,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "Action": {
            "name": "Action",
            "location": 41,
            "return": [],
            "arguments": {
                "method": [],
                "path": []
            }
        },
        "ActionNode.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "ActionNode.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "NodeArgumentWrapper.wrap_arg": {
            "name": "wrap_arg",
            "location": 25,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "NodeArgumentWrapper.wrap_arguments": {
            "name": "wrap_arguments",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "Action.decorator": {
            "name": "decorator",
            "location": 46,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "Action.decorator.action_creator": {
            "name": "action_creator",
            "location": 50,
            "return": [],
            "arguments": {
                "parent_node": [
                    "Node"
                ]
            }
        }
    },
    "ContextShell-master/AttributeNode.py": {
        "Attribute": {
            "name": "Attribute",
            "location": 20,
            "return": [],
            "arguments": {
                "get_function": []
            }
        },
        "AttributeNode.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "getter": [],
                "setter": []
            }
        },
        "AttributeNode.value": {
            "name": "value",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "Attribute._decorator_name": {
            "name": "_decorator_name",
            "location": 21,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "Attribute.get_creator": {
            "name": "get_creator",
            "location": 26,
            "return": [],
            "arguments": {
                "parent_node": [
                    "Node"
                ]
            }
        },
        "Attribute.set_decorator": {
            "name": "set_decorator",
            "location": 36,
            "return": [],
            "arguments": {
                "set_function": []
            }
        },
        "Attribute.set_decorator.set_creator": {
            "name": "set_creator",
            "location": 38,
            "return": [],
            "arguments": {
                "parent_node": [
                    "Node"
                ]
            }
        }
    },
    "ContextShell-master/Command.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "command_name": []
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command._to_string": {
            "name": "_to_string",
            "location": 17,
            "return": [],
            "arguments": {
                "param": []
            }
        }
    },
    "ContextShell-master/CommandInterpreter.py": {
        "CommandInterpreter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "root": [
                    "Node"
                ]
            }
        },
        "CommandInterpreter.execute": {
            "name": "execute",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "command": [
                    "Command"
                ]
            }
        },
        "CommandInterpreter.evaluate": {
            "name": "evaluate",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "part": []
            }
        },
        "CommandInterpreter.find_action": {
            "name": "find_action",
            "location": 30,
            "return": [
                "ActionNode"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ],
                "path": [
                    "NodePath"
                ]
            }
        }
    },
    "ContextShell-master/CommandParser.py": {
        "tokenize": {
            "name": "tokenize",
            "location": 4,
            "return": [
                "[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "tokenize.end_token": {
            "name": "end_token",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "CommandParser.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParser.parse": {
            "name": "parse",
            "location": 30,
            "return": [
                "Command"
            ],
            "arguments": {
                "self": [],
                "command_line": [
                    "str"
                ]
            }
        },
        "CommandParser._parse_scope": {
            "name": "_parse_scope",
            "location": 43,
            "return": [
                "Command"
            ],
            "arguments": {
                "self": [],
                "token_iterator": []
            }
        }
    },
    "ContextShell-master/DateNode.py": {
        "DateNode.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateNode.get": {
            "name": "get",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "DateNode.year": {
            "name": "year",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateNode.month": {
            "name": "month",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateNode.day": {
            "name": "day",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/IntNode.py": {
        "IntNode.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IntNode.set": {
            "name": "set",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": [],
                "new_value": []
            }
        }
    },
    "ContextShell-master/Node.py": {
        "Node.cast": {
            "name": "cast",
            "location": 7,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Node.parent": {
            "name": "parent",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.name": {
            "name": "name",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.index": {
            "name": "index",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.is_virtual": {
            "name": "is_virtual",
            "location": 49,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Node.path": {
            "name": "path",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.value": {
            "name": "value",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "Node.append_node": {
            "name": "append_node",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ],
                "node": []
            }
        },
        "Node.replace_node": {
            "name": "replace_node",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ],
                "new_node": []
            }
        },
        "Node.append_node_generator": {
            "name": "append_node_generator",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ],
                "generator": []
            }
        },
        "Node.remove_node": {
            "name": "remove_node",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ]
            }
        },
        "Node.create_path": {
            "name": "create_path",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ]
            }
        },
        "Node.__contains__": {
            "name": "__contains__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ]
            }
        },
        "Node.__getitem__": {
            "name": "__getitem__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.subnode_names": {
            "name": "subnode_names",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.subnodes": {
            "name": "subnodes",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node._add_subnode": {
            "name": "_add_subnode",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "node": []
            }
        },
        "Node._replace_subnode": {
            "name": "_replace_subnode",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "existing_name": [
                    "str"
                ],
                "new_node": []
            }
        },
        "Node._remove_subnode": {
            "name": "_remove_subnode",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Node._get_subnode_by_path": {
            "name": "_get_subnode_by_path",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "NodePath"
                ]
            }
        },
        "Node._get_subnode_by_name": {
            "name": "_get_subnode_by_name",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Node._get_subnode_by_reference": {
            "name": "_get_subnode_by_reference",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "reference": []
            }
        },
        "Node._get_subnode_index_by_reference": {
            "name": "_get_subnode_index_by_reference",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "reference": []
            }
        },
        "Node._get_subnode_index_by_name": {
            "name": "_get_subnode_index_by_name",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "ContextShell-master/NodePath.py": {
        "NodePath.join": {
            "name": "join",
            "location": 6,
            "return": [],
            "arguments": {
                "first": []
            }
        },
        "NodePath.cast": {
            "name": "cast",
            "location": 14,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "NodePath.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "representation": [],
                "absolute": []
            }
        },
        "NodePath.base_path": {
            "name": "base_path",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePath.base_name": {
            "name": "base_name",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePath._to_path_part": {
            "name": "_to_path_part",
            "location": 49,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "NodePath._parse_path": {
            "name": "_parse_path",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "NodePath.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/PyNode.py": {
        "CreatorFunction": {
            "name": "CreatorFunction",
            "location": 7,
            "return": [],
            "arguments": {
                "creator_function": []
            }
        },
        "is_creator": {
            "name": "is_creator",
            "location": 12,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "PyNode.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PyNode._populate_subnodes": {
            "name": "_populate_subnodes",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/repl.py": {
        "TestNode.action": {
            "name": "action",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "TestNode.attribute": {
            "name": "attribute",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/script.py": {},
    "ContextShell-master/Shell.py": {
        "Shell.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "root": [
                    "Node"
                ]
            }
        },
        "Shell.execute": {
            "name": "execute",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "command_line": [
                    "str"
                ]
            }
        },
        "Shell.pretty_print": {
            "name": "pretty_print",
            "location": 24,
            "return": [],
            "arguments": {
                "result": []
            }
        }
    },
    "ContextShell-master/TreeRoot.py": {
        "_to_path": {
            "name": "_to_path",
            "location": 5,
            "return": [
                "NodePath"
            ],
            "arguments": {
                "value": []
            }
        },
        "TreeRoot.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRoot.create": {
            "name": "create",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": [],
                "name_node": [],
                "value_node": []
            }
        },
        "TreeRoot.create_int": {
            "name": "create_int",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": [],
                "name_node": [],
                "value_node": []
            }
        },
        "TreeRoot.get": {
            "name": "get",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.set": {
            "name": "set",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": [],
                "value_node": []
            }
        },
        "TreeRoot.list_all": {
            "name": "list_all",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.list_names": {
            "name": "list_names",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.list": {
            "name": "list",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.list_nodes": {
            "name": "list_nodes",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.list_attributes": {
            "name": "list_attributes",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.list_actions": {
            "name": "list_actions",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.list_tree": {
            "name": "list_tree",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.delete": {
            "name": "delete",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": [],
                "name_node": []
            }
        },
        "TreeRoot.exists": {
            "name": "exists",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": [],
                "name_node": []
            }
        },
        "TreeRoot.repr": {
            "name": "repr",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "TreeRoot.call": {
            "name": "call",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "target_path": [],
                "action_name": []
            }
        },
        "TreeRoot.execute": {
            "name": "execute",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "command": [
                    "Command"
                ]
            }
        },
        "TreeRoot._evaluate": {
            "name": "_evaluate",
            "location": 138,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TreeRoot._evaluate_to_node": {
            "name": "_evaluate_to_node",
            "location": 146,
            "return": [
                "Node"
            ],
            "arguments": {
                "value": []
            }
        },
        "TreeRoot.find_action": {
            "name": "find_action",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "target_path": [
                    "NodePath"
                ],
                "action_path": [
                    "NodePath"
                ]
            }
        }
    },
    "ContextShell-master/VirtualNode.py": {
        "VirtualNode.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "getter": [],
                "setter": []
            }
        },
        "VirtualNode.value": {
            "name": "value",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VirtualNode.value_set": {
            "name": "value_set",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        }
    },
    "ContextShell-master/__init__.py": {},
    "ContextShell-master/tests/ActionNodeTests.py": {
        "CustomNode.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomNode._validate_args": {
            "name": "_validate_args",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": []
            }
        },
        "CustomNode.action": {
            "name": "action",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ]
            }
        },
        "CustomNode.named": {
            "name": "named",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ]
            }
        },
        "CustomNode.nested": {
            "name": "nested",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ]
            }
        },
        "CustomNode.subaction": {
            "name": "subaction",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ]
            }
        },
        "ActionNodeTests.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests._test_node": {
            "name": "_test_node",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "action_name": [],
                "result": []
            }
        },
        "ActionNodeTests._test_method": {
            "name": "_test_method",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "result": []
            }
        },
        "ActionNodeTests.test_action_node": {
            "name": "test_action_node",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests.test_action_method": {
            "name": "test_action_method",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests.test_named_node": {
            "name": "test_named_node",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests.test_named_method": {
            "name": "test_named_method",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests.test_nested_node": {
            "name": "test_nested_node",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests.test_nested_method": {
            "name": "test_nested_method",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests.test_subaction_node": {
            "name": "test_subaction_node",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeTests.test_subaction_method": {
            "name": "test_subaction_method",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/AttributeNodeTests.py": {
        "CustomNode.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomNode.readonly_attribute": {
            "name": "readonly_attribute",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomNode.attribute": {
            "name": "attribute",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomNode.attribute_setter": {
            "name": "attribute_setter",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "AttributeNodePythonUsageTests.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeNodePythonUsageTests.test_getter": {
            "name": "test_getter",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeNodePythonUsageTests.test_setter": {
            "name": "test_setter",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeNodeTests.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeNodeTests.test_attribute_node_get": {
            "name": "test_attribute_node_get",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeNodeTests.test_attribute_node_set": {
            "name": "test_attribute_node_set",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/CommandInterpreterTests.py": {
        "GetAction.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetAction.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ]
            }
        },
        "SetAction.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetAction.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ]
            }
        },
        "CommandInterpreterTests.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_find_action": {
            "name": "test_find_action",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_execute_get": {
            "name": "test_execute_get",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_execute_set": {
            "name": "test_execute_set",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_unknown_target": {
            "name": "test_unknown_target",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_unknown_action": {
            "name": "test_unknown_action",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_recursive_target_evaluation": {
            "name": "test_recursive_target_evaluation",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_recursive_action_evaluation": {
            "name": "test_recursive_action_evaluation",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandInterpreterTests.test_recursive_argument_evaluation": {
            "name": "test_recursive_argument_evaluation",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/CommandParserTests.py": {
        "CommandTokenizerTests.tok_test": {
            "name": "tok_test",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "expected_tokens": [
                    "list"
                ]
            }
        },
        "CommandTokenizerTests.test_empty": {
            "name": "test_empty",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTokenizerTests.test_action": {
            "name": "test_action",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTokenizerTests.test_target": {
            "name": "test_target",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTokenizerTests.test_args": {
            "name": "test_args",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTokenizerTests.test_scopes": {
            "name": "test_scopes",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.parse": {
            "name": "parse",
            "location": 38,
            "return": [
                "Command"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "CommandParserTests.test_empty": {
            "name": "test_empty",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_spaces": {
            "name": "test_spaces",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_comments": {
            "name": "test_comments",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_just_name": {
            "name": "test_just_name",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_arguments": {
            "name": "test_arguments",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_target": {
            "name": "test_target",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_nested_target": {
            "name": "test_nested_target",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_nested_name": {
            "name": "test_nested_name",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandParserTests.test_nested_arguments": {
            "name": "test_nested_arguments",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/CommandTests.py": {
        "CommandTests.test_initial_state": {
            "name": "test_initial_state",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTests.test_just_command_string": {
            "name": "test_just_command_string",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTests.test_command_arguments_string": {
            "name": "test_command_arguments_string",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTests.test_command_target_string": {
            "name": "test_command_target_string",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTests.test_nested_target_string": {
            "name": "test_nested_target_string",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTests.test_nested_name_string": {
            "name": "test_nested_name_string",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandTests.test_nested_arguments_string": {
            "name": "test_nested_arguments_string",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/IntNodeTests.py": {
        "IntNodeTests.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntNodeTests.test_constructor": {
            "name": "test_constructor",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntNodeTests.test_set": {
            "name": "test_set",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntNodeTests.test_set_min_limit": {
            "name": "test_set_min_limit",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntNodeTests.test_set_max_limit": {
            "name": "test_set_max_limit",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/NodePathTests.py": {
        "NodePathTests.test_empty": {
            "name": "test_empty",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_constructor": {
            "name": "test_constructor",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_parse": {
            "name": "test_parse",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_basename": {
            "name": "test_basename",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_index": {
            "name": "test_index",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_index_parse": {
            "name": "test_index_parse",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_cast": {
            "name": "test_cast",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_node_cast_mutability": {
            "name": "test_node_cast_mutability",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_cast_index": {
            "name": "test_cast_index",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_join": {
            "name": "test_join",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_join_mutability": {
            "name": "test_join_mutability",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePathTests.test_join_raw": {
            "name": "test_join_raw",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/NodeTests.py": {
        "NodeValueTests.test_get_value": {
            "name": "test_get_value",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeValueTests.test_set_value": {
            "name": "test_set_value",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeValueTests.test_set_value_different_type": {
            "name": "test_set_value_different_type",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeValueTests.test_default_constructor": {
            "name": "test_default_constructor",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSubnodesTests.test_default_constructor": {
            "name": "test_default_constructor",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSubnodesTests.test_list": {
            "name": "test_list",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTests.setUp": {
            "name": "setUp",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTests.test_replace_node": {
            "name": "test_replace_node",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTests.test_parent": {
            "name": "test_parent",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTests.test_path": {
            "name": "test_path",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTests.test_name": {
            "name": "test_name",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTests.test_path_indexing": {
            "name": "test_path_indexing",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTests.test_path_numeric_indexing": {
            "name": "test_path_numeric_indexing",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.setUp": {
            "name": "setUp",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_parent_node": {
            "name": "test_parent_node",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_nested_parent_node": {
            "name": "test_nested_parent_node",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_path_node": {
            "name": "test_path_node",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_nested_path_node": {
            "name": "test_nested_path_node",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_name_node": {
            "name": "test_name_node",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_nested_name_node": {
            "name": "test_nested_name_node",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_no_name": {
            "name": "test_no_name",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_index_node": {
            "name": "test_index_node",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeVirtualNodesTests.test_no_index": {
            "name": "test_no_index",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/PyNodeTests.py": {
        "CustomNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomNode.virtual_attribute": {
            "name": "virtual_attribute",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomNode.virtual": {
            "name": "virtual",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyNodeTests.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyNodeTests.test_virtual_attribute": {
            "name": "test_virtual_attribute",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyNodeTests.test_virtual_node": {
            "name": "test_virtual_node",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/PythonicActionNodeTests.py": {
        "PythonicNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicNode.return_42": {
            "name": "return_42",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicNode.add_one": {
            "name": "add_one",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Node"
                ]
            }
        },
        "PythonicNode.return_args": {
            "name": "return_args",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicNode.return_target_value": {
            "name": "return_target_value",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ]
            }
        },
        "PythonicNode.set_target_value": {
            "name": "set_target_value",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Node"
                ],
                "new_value": [
                    "Node"
                ]
            }
        },
        "PythonicAccessTests.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicAccessTests.test_call_return": {
            "name": "test_call_return",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicAccessTests.test_call_single_argument": {
            "name": "test_call_single_argument",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicAccessTests.test_call_multiple_arguments": {
            "name": "test_call_multiple_arguments",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicAccessTests.test_call_target": {
            "name": "test_call_target",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonicAccessTests.test_call_target_with_arguments": {
            "name": "test_call_target_with_arguments",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeNodeAccessTests.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeNodeAccessTests.test_call_return": {
            "name": "test_call_return",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeNodeAccessTests.test_call_single_argument": {
            "name": "test_call_single_argument",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeNodeAccessTests.test_call_multiple_arguments": {
            "name": "test_call_multiple_arguments",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeNodeAccessTests.test_call_target": {
            "name": "test_call_target",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionNodeNodeAccessTests.test_call_target_with_arguments": {
            "name": "test_call_target_with_arguments",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/TreeRootTests.py": {
        "TreeRootTests.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_create_call": {
            "name": "test_create_call",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_create_existing": {
            "name": "test_create_existing",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_create": {
            "name": "test_create",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_get": {
            "name": "test_get",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_set": {
            "name": "test_set",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_name_attribute": {
            "name": "test_name_attribute",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_list": {
            "name": "test_list",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_exists": {
            "name": "test_exists",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_delete": {
            "name": "test_delete",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeRootTests.test_delete_nonexistent": {
            "name": "test_delete_nonexistent",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionTests.setUp": {
            "name": "setUp",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListActionTests.test_list_nodes": {
            "name": "test_list_nodes",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ContextShell-master/tests/__init__.py": {}
}
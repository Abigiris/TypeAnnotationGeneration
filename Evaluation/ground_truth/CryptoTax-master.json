{
    "CryptoTax-master/cryptotax/avanza.py": {
        "_init_isin_to_avanza_ids": {
            "name": "_init_isin_to_avanza_ids",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "_load_data_avanza": {
            "name": "_load_data_avanza",
            "location": 57,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "compute_balances": {
            "name": "compute_balances",
            "location": 104,
            "return": [
                "Tuple[(Dict[(str, float)], Dict[(str, float)], Dict[(str, float)])]"
            ],
            "arguments": {
                "trades": []
            }
        },
        "plot_holdings": {
            "name": "plot_holdings",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "txs": [
                    "List[Dict]"
                ]
            }
        },
        "plot_realized_profits": {
            "name": "plot_realized_profits",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "txs_to_dataframe": {
            "name": "txs_to_dataframe",
            "location": 160,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "txs": [
                    "List[Dict]"
                ]
            }
        },
        "_clean_price": {
            "name": "_clean_price",
            "location": 168,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "_calc_costavg": {
            "name": "_calc_costavg",
            "location": 187,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_calc_costavg": {
            "name": "test_calc_costavg",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "_fill_with_daily_prices": {
            "name": "_fill_with_daily_prices",
            "location": 224,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_fill_with_daily_prices": {
            "name": "test_fill_with_daily_prices",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fillall_with_daily_prices": {
            "name": "test_fillall_with_daily_prices",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "all_txs_to_dataframe": {
            "name": "all_txs_to_dataframe",
            "location": 365,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "txs": [
                    "List[Dict]"
                ]
            }
        },
        "plot_total_holdings": {
            "name": "plot_total_holdings",
            "location": 399,
            "return": [],
            "arguments": {
                "txs": []
            }
        },
        "test_all_txs_to_dataframe": {
            "name": "test_all_txs_to_dataframe",
            "location": 423,
            "return": [],
            "arguments": {}
        },
        "print_overview": {
            "name": "print_overview",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "txs": []
            }
        },
        "_normalize_currency_to_sek": {
            "name": "_normalize_currency_to_sek",
            "location": 486,
            "return": [],
            "arguments": {
                "txs": []
            }
        },
        "print_unaccounted_txs": {
            "name": "print_unaccounted_txs",
            "location": 513,
            "return": [],
            "arguments": {
                "txs": []
            }
        },
        "print_overview_df": {
            "name": "print_overview_df",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "txs": [
                    "List[Dict]"
                ]
            }
        },
        "_load_crypto_trades": {
            "name": "_load_crypto_trades",
            "location": 559,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 587,
            "return": [],
            "arguments": {}
        },
        "_fill_with_daily_prices._create_row": {
            "name": "_create_row",
            "location": 256,
            "return": [],
            "arguments": {
                "r": [],
                "dt": []
            }
        }
    },
    "CryptoTax-master/cryptotax/avanza_api.py": {
        "get_history": {
            "name": "get_history",
            "location": 12,
            "return": [],
            "arguments": {
                "oid": [
                    "int"
                ],
                "start": [],
                "end": [],
                "cache": []
            }
        },
        "test_get_history": {
            "name": "test_get_history",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "CryptoTax-master/cryptotax/download_data.py": {
        "get_price_coingecko": {
            "name": "get_price_coingecko",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "currency": [
                    "str"
                ],
                "date": [
                    "date"
                ]
            }
        },
        "test_get_price_coingecko": {
            "name": "test_get_price_coingecko",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "_daterange": {
            "name": "_daterange",
            "location": 68,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": []
            }
        },
        "get_data_from_coingecko": {
            "name": "get_data_from_coingecko",
            "location": 73,
            "return": [],
            "arguments": {
                "currency": []
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 88,
            "return": [],
            "arguments": {
                "currency": []
            }
        },
        "parse_json": {
            "name": "parse_json",
            "location": 100,
            "return": [
                "Dict[(date, Dict[(str, Any)])]"
            ],
            "arguments": {
                "doc": []
            }
        },
        "_save_table": {
            "name": "_save_table",
            "location": 114,
            "return": [],
            "arguments": {
                "currency": [],
                "data": []
            }
        },
        "main": {
            "name": "main",
            "location": 120,
            "return": [],
            "arguments": {}
        }
    },
    "CryptoTax-master/cryptotax/load_data.py": {
        "_load_csv": {
            "name": "_load_csv",
            "location": 14,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "filepath": [],
                "delimiter": []
            }
        },
        "_load_price_csv": {
            "name": "_load_price_csv",
            "location": 21,
            "return": [],
            "arguments": {
                "symbol": []
            }
        },
        "_load_price_csv2": {
            "name": "_load_price_csv2",
            "location": 32,
            "return": [],
            "arguments": {
                "symbol": []
            }
        },
        "_load_pricehistory": {
            "name": "_load_pricehistory",
            "location": 38,
            "return": [
                "Dict[(date, Dict[(str, float)])]"
            ],
            "arguments": {
                "symbol": []
            }
        },
        "_load_incoming_balances": {
            "name": "_load_incoming_balances",
            "location": 44,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "_format_csv_from_kraken": {
            "name": "_format_csv_from_kraken",
            "location": 53,
            "return": [],
            "arguments": {
                "trades_csv": []
            }
        },
        "_format_csv_from_ethplorer": {
            "name": "_format_csv_from_ethplorer",
            "location": 76,
            "return": [],
            "arguments": {
                "trades_csv": []
            }
        },
        "_format_csv_from_bitstamp": {
            "name": "_format_csv_from_bitstamp",
            "location": 97,
            "return": [],
            "arguments": {
                "trades_csv": []
            }
        },
        "_format_csv_from_lbtc": {
            "name": "_format_csv_from_lbtc",
            "location": 132,
            "return": [],
            "arguments": {
                "trades_csv": []
            }
        },
        "_format_csv_from_poloniex": {
            "name": "_format_csv_from_poloniex",
            "location": 171,
            "return": [],
            "arguments": {
                "trades_csv": []
            }
        },
        "_format_csv_from_generic": {
            "name": "_format_csv_from_generic",
            "location": 191,
            "return": [],
            "arguments": {
                "trades_csv": []
            }
        },
        "load_all_trades": {
            "name": "load_all_trades",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "_format_deposits_kraken": {
            "name": "_format_deposits_kraken",
            "location": 248,
            "return": [],
            "arguments": {
                "ledger": []
            }
        },
        "_format_deposits_bitstamp": {
            "name": "_format_deposits_bitstamp",
            "location": 256,
            "return": [],
            "arguments": {
                "trades": []
            }
        },
        "load_deposits": {
            "name": "load_deposits",
            "location": 266,
            "return": [],
            "arguments": {}
        }
    },
    "CryptoTax-master/cryptotax/main.py": {
        "_print_trades": {
            "name": "_print_trades",
            "location": 23,
            "return": [],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ],
                "n": []
            }
        },
        "_sum_trades": {
            "name": "_sum_trades",
            "location": 43,
            "return": [],
            "arguments": {
                "t1": [
                    "Trade"
                ],
                "t2": [
                    "Trade"
                ]
            }
        },
        "test_sum_trades": {
            "name": "test_sum_trades",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "_reduce_trades": {
            "name": "_reduce_trades",
            "location": 67,
            "return": [],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ]
            }
        },
        "_pair_fmt": {
            "name": "_pair_fmt",
            "location": 88,
            "return": [],
            "arguments": {
                "pair": []
            }
        },
        "_calc_cost_usd": {
            "name": "_calc_cost_usd",
            "location": 92,
            "return": [],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ]
            }
        },
        "_cost_basis_per_asset": {
            "name": "_cost_basis_per_asset",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ]
            }
        },
        "_filter_trades_by_time": {
            "name": "_filter_trades_by_time",
            "location": 159,
            "return": [
                "List[Trade]"
            ],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ],
                "year": [
                    "int"
                ]
            }
        },
        "test_filter_trades_by_time": {
            "name": "test_filter_trades_by_time",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "_flip_pair": {
            "name": "_flip_pair",
            "location": 175,
            "return": [
                "Trade"
            ],
            "arguments": {
                "t": [
                    "Trade"
                ]
            }
        },
        "_normalize_trade_type": {
            "name": "_normalize_trade_type",
            "location": 185,
            "return": [
                "Trade"
            ],
            "arguments": {
                "t": [
                    "Trade"
                ]
            }
        },
        "test_normalize_trade_type": {
            "name": "test_normalize_trade_type",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "_calculate_delta": {
            "name": "_calculate_delta",
            "location": 213,
            "return": [
                "Dict[(str, Dict[(str, float)])]"
            ],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ]
            }
        },
        "_calculate_inout_balances": {
            "name": "_calculate_inout_balances",
            "location": 229,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "trades": [
                    "List[dict]"
                ],
                "balances": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "_aggregate_trades": {
            "name": "_aggregate_trades",
            "location": 242,
            "return": [
                "List[Trade]"
            ],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ]
            }
        },
        "_print_balances": {
            "name": "_print_balances",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ],
                "year": [
                    "int"
                ]
            }
        },
        "_print_agg_trades": {
            "name": "_print_agg_trades",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "trades": [
                    "List[Trade]"
                ],
                "year": [
                    "int"
                ]
            }
        },
        "get_trades": {
            "name": "get_trades",
            "location": 293,
            "return": [
                "List[Trade]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "trades": {
            "name": "trades",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cost_basis": {
            "name": "cost_basis",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "year": {
            "name": "year",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "year": [
                    "int"
                ]
            }
        },
        "swedish_taxes": {
            "name": "swedish_taxes",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "avanza": {
            "name": "avanza",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_reduce_trades.r": {
            "name": "r",
            "location": 70,
            "return": [],
            "arguments": {
                "processed": [],
                "next": []
            }
        },
        "_aggregate_trades.keyfunc": {
            "name": "keyfunc",
            "location": 243,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "CryptoTax-master/cryptotax/openfigi.py": {
        "get_by_isin": {
            "name": "get_by_isin",
            "location": 15,
            "return": [],
            "arguments": {
                "isin": [],
                "exchcode": []
            }
        },
        "test_get_by_isin": {
            "name": "test_get_by_isin",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "CryptoTax-master/cryptotax/swedish_taxes.py": {
        "pptable": {
            "name": "pptable",
            "location": 64,
            "return": [],
            "arguments": {
                "title": [],
                "table": []
            }
        },
        "iscrypto": {
            "name": "iscrypto",
            "location": 72,
            "return": [],
            "arguments": {
                "asset": []
            }
        },
        "_canonical_trade": {
            "name": "_canonical_trade",
            "location": 76,
            "return": [],
            "arguments": {
                "trade": []
            }
        },
        "swedish_taxes": {
            "name": "swedish_taxes",
            "location": 90,
            "return": [],
            "arguments": {
                "trades": [],
                "deposits": []
            }
        },
        "main": {
            "name": "main",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "header": [],
                "_format": []
            }
        },
        "Table.__setitem__": {
            "name": "__setitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Table.new_row": {
            "name": "new_row",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table._width": {
            "name": "_width",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Table.__getitem__": {
            "name": "__getitem__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Table.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfitLoss.__add__": {
            "name": "__add__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "CryptoTax-master/cryptotax/timevalue.py": {
        "annualized_ror": {
            "name": "annualized_ror",
            "location": 6,
            "return": [],
            "arguments": {
                "rate": [],
                "duration": []
            }
        },
        "timevalue": {
            "name": "timevalue",
            "location": 10,
            "return": [],
            "arguments": {
                "txs": []
            }
        },
        "test_timevalue": {
            "name": "test_timevalue",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_annualized_ror": {
            "name": "test_annualized_ror",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "CryptoTax-master/cryptotax/util.py": {
        "next_weekday": {
            "name": "next_weekday",
            "location": 26,
            "return": [],
            "arguments": {
                "date": []
            }
        },
        "fiatconvert": {
            "name": "fiatconvert",
            "location": 34,
            "return": [],
            "arguments": {
                "amount": [
                    "float"
                ],
                "cfrom": [
                    "str"
                ],
                "cto": [
                    "str"
                ],
                "date": [
                    "datetime"
                ],
                "fallback": []
            }
        },
        "canonical_symbol": {
            "name": "canonical_symbol",
            "location": 44,
            "return": [],
            "arguments": {
                "symbol": []
            }
        }
    },
    "CryptoTax-master/cryptotax/__init__.py": {},
    "CryptoTax-master/cryptotax/__main__.py": {}
}
{
    "DeRE-master/setup.py": {},
    "DeRE-master/dere/corpus.py": {
        "Instance.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "document_id": [
                    "str"
                ],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "Instance.new_span": {
            "name": "new_span",
            "location": 35,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "span_type": [
                    "SpanType"
                ],
                "left": [
                    "int"
                ],
                "right": [
                    "int"
                ],
                "source": [
                    "str"
                ],
                "index": [
                    "Optional[int]"
                ]
            }
        },
        "Instance.new_frame": {
            "name": "new_frame",
            "location": 65,
            "return": [
                "Frame"
            ],
            "arguments": {
                "self": [],
                "frame_type": [
                    "FrameType"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "Instance.frame_graph": {
            "name": "frame_graph",
            "location": 87,
            "return": [
                "nx.DiGraph"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.new_instance": {
            "name": "new_instance",
            "location": 113,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "document_id": [
                    "str"
                ]
            }
        },
        "Corpus.split": {
            "name": "split",
            "location": 133,
            "return": [
                "Tuple[(Corpus, Corpus)]"
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "float"
                ]
            }
        },
        "Corpus.clone": {
            "name": "clone",
            "location": 158,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.strip_gold": {
            "name": "strip_gold",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span_type": [
                    "SpanType"
                ],
                "left": [
                    "int"
                ],
                "right": [
                    "int"
                ],
                "instance": [
                    "Instance"
                ],
                "source": [
                    "str"
                ],
                "index": [
                    "Optional[int]"
                ]
            }
        },
        "Span.remove": {
            "name": "remove",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.text": {
            "name": "text",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.matches": {
            "name": "matches",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Span"
                ]
            }
        },
        "Slot.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slot_type": [
                    "SlotType"
                ],
                "frame": [
                    "Frame"
                ]
            }
        },
        "Slot.add": {
            "name": "add",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filler": [
                    "Filler"
                ]
            }
        },
        "Slot.remove": {
            "name": "remove",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filler": [
                    "Filler"
                ]
            }
        },
        "Frame.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_type": [
                    "FrameType"
                ],
                "instance": [
                    "Optional[Instance]"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "Frame.remove": {
            "name": "remove",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.slot_lookup": {
            "name": "slot_lookup",
            "location": 256,
            "return": [
                "Optional[Slot]"
            ],
            "arguments": {
                "self": [],
                "slot_name": [
                    "str"
                ]
            }
        }
    },
    "DeRE-master/dere/evaluation.py": {
        "_evaluate_document": {
            "name": "_evaluate_document",
            "location": 14,
            "return": [
                "Result"
            ],
            "arguments": {
                "hypo": [
                    "List[Instance]"
                ],
                "gold": [
                    "List[Instance]"
                ],
                "task_spec": [
                    "TaskSpecification"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 93,
            "return": [
                "Result"
            ],
            "arguments": {
                "hypo": [
                    "Corpus"
                ],
                "gold": [
                    "Corpus"
                ],
                "task_spec": [
                    "TaskSpecification"
                ]
            }
        },
        "_string_table": {
            "name": "_string_table",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "table": [
                    "List[Union[(List[Any], str)]]"
                ],
                "padding": [
                    "int"
                ]
            }
        },
        "_evaluate_document.node_match": {
            "name": "node_match",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "n1": [
                    "dict"
                ],
                "n2": [
                    "dict"
                ]
            }
        },
        "_evaluate_document.edge_match": {
            "name": "edge_match",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "e1": [
                    "dict"
                ],
                "e2": [
                    "dict"
                ]
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ]
            }
        },
        "Result.tp": {
            "name": "tp",
            "location": 178,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Union[(_SFType, Collection[_SFType])]"
                ]
            }
        },
        "Result.fp": {
            "name": "fp",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Union[(_SFType, Collection[_SFType])]"
                ]
            }
        },
        "Result.fn": {
            "name": "fn",
            "location": 215,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Union[(_SFType, Collection[_SFType])]"
                ]
            }
        },
        "Result.precision": {
            "name": "precision",
            "location": 233,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Union[(_SFType, Collection[_SFType])]"
                ]
            }
        },
        "Result.recall": {
            "name": "recall",
            "location": 250,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Union[(_SFType, Collection[_SFType])]"
                ]
            }
        },
        "Result.fscore": {
            "name": "fscore",
            "location": 268,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Union[(_SFType, Collection[_SFType])]"
                ],
                "beta": [
                    "float"
                ]
            }
        },
        "Result.union": {
            "name": "union",
            "location": 293,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Result"
                ]
            }
        },
        "Result.__or__": {
            "name": "__or__",
            "location": 313,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Result"
                ]
            }
        },
        "Result.__eq__": {
            "name": "__eq__",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Result.__lt__": {
            "name": "__lt__",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Result"
                ]
            }
        },
        "Result.report": {
            "name": "report",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.report.row": {
            "name": "row",
            "location": 339,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "cls": [
                    "Union[(_SFType, Collection[_SFType])]"
                ],
                "label": [
                    "str"
                ]
            }
        }
    },
    "DeRE-master/dere/taskspec.py": {
        "load_from_xml": {
            "name": "load_from_xml",
            "location": 83,
            "return": [
                "TaskSpecification"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "FrameType.slot_type_lookup": {
            "name": "slot_type_lookup",
            "location": 18,
            "return": [
                "Optional[SlotType]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FrameType.__hash__": {
            "name": "__hash__",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameType.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "TaskSpecification.span_type_lookup": {
            "name": "span_type_lookup",
            "location": 46,
            "return": [
                "Optional[SpanType]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TaskSpecification.frame_type_lookup": {
            "name": "frame_type_lookup",
            "location": 54,
            "return": [
                "Optional[FrameType]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TaskSpecification.type_lookup": {
            "name": "type_lookup",
            "location": 62,
            "return": [
                "Optional[Union[(SpanType, FrameType)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "DeRE-master/dere/utils.py": {
        "progressify": {
            "name": "progressify",
            "location": 14,
            "return": [
                "Generator[(T, None, None)]"
            ],
            "arguments": {
                "seq": [
                    "Sequence[T]"
                ],
                "message": [
                    "Union[(str, Callable[([int, T], str)])]"
                ],
                "offset": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "_grid_search_class": {
            "name": "_grid_search_class",
            "location": 119,
            "return": [
                "Type[Model]"
            ],
            "arguments": {
                "decoratee_class": [
                    "Type[Model]"
                ],
                "param_name": [
                    "str"
                ],
                "param_values": [
                    "List[Any]"
                ],
                "param_names": [
                    "List[str]"
                ]
            }
        },
        "grid_search": {
            "name": "grid_search",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "grid_search.grid_search_decorator": {
            "name": "grid_search_decorator",
            "location": 202,
            "return": [],
            "arguments": {
                "model_class": []
            }
        },
        "progressify.message": {
            "name": "message",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "element": [
                    "T@@"
                ]
            }
        },
        "_grid_search_class.GridSearchModel.__new__": {
            "name": "__new__",
            "location": 126,
            "return": [
                "Model"
            ],
            "arguments": {
                "cls": [],
                "task_spec": [
                    "TaskSpecification"
                ],
                "model_spec": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_grid_search_class.GridSearchModel.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ],
                "model_spec": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_grid_search_class.GridSearchModel.initialize": {
            "name": "initialize",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_grid_search_class.GridSearchModel.dump": {
            "name": "dump",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "_grid_search_class.GridSearchModel.load": {
            "name": "load",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "_grid_search_class.GridSearchModel.train": {
            "name": "train",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "dev_corpus": [
                    "Optional[Corpus]"
                ]
            }
        },
        "_grid_search_class.GridSearchModel.predict": {
            "name": "predict",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        }
    },
    "DeRE-master/dere/__init__.py": {},
    "DeRE-master/dere/__main__.py": {
        "warn": {
            "name": "warn",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "instantiate_model": {
            "name": "instantiate_model",
            "location": 51,
            "return": [
                "Model"
            ],
            "arguments": {
                "task_spec": [
                    "TaskSpecification"
                ],
                "model_spec": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 68,
            "return": [
                "Model"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Model"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ],
                "quiet": [
                    "int"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "task_spec": [
                    "str"
                ],
                "model_spec": [
                    "str"
                ],
                "outfile": [
                    "str"
                ]
            }
        },
        "_build": {
            "name": "_build",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "task_spec_path": [
                    "str"
                ],
                "model_spec_path": [
                    "str"
                ],
                "out_path": [
                    "str"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus_path": [
                    "str"
                ],
                "model_path": [
                    "str"
                ],
                "outfile": [
                    "str"
                ],
                "corpus_format": [
                    "str"
                ],
                "dev_corpus": [
                    "Optional[str]"
                ],
                "corpus_split": [
                    "Optional[str]"
                ]
            }
        },
        "_train": {
            "name": "_train",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus_path": [
                    "str"
                ],
                "model_path": [
                    "str"
                ],
                "out_path": [
                    "str"
                ],
                "corpus_format": [
                    "str"
                ],
                "dev_corpus_path": [
                    "Optional[str]"
                ],
                "corpus_split": [
                    "Optional[str]"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus_path": [
                    "str"
                ],
                "model_path": [
                    "str"
                ],
                "corpus_format": [
                    "str"
                ],
                "output_format": [
                    "Optional[str]"
                ],
                "output": [
                    "str"
                ]
            }
        },
        "_predict": {
            "name": "_predict",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus_path": [
                    "str"
                ],
                "model_path": [
                    "str"
                ],
                "corpus_format": [
                    "str"
                ],
                "output_format": [
                    "Optional[str]"
                ],
                "output_path": [
                    "str"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "predicted": [
                    "str"
                ],
                "gold": [
                    "str"
                ],
                "task_spec": [
                    "str"
                ],
                "corpus_format": [
                    "str"
                ]
            }
        },
        "_evaluate": {
            "name": "_evaluate",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "predicted_path": [
                    "str"
                ],
                "gold_path": [
                    "str"
                ],
                "task_spec_path": [
                    "str"
                ],
                "corpus_format": [
                    "str"
                ]
            }
        }
    },
    "DeRE-master/dere/corpus_io/brat_corpus_io.py": {
        "frames_referencing_spans": {
            "name": "frames_referencing_spans",
            "location": 201,
            "return": [
                "List[Frame]"
            ],
            "arguments": {
                "frames": [
                    "List[Frame]"
                ],
                "target_spans": [
                    "List[Span]"
                ]
            }
        },
        "BRATCorpusIO.load": {
            "name": "load",
            "location": 17,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "BRATCorpusIO.dump": {
            "name": "dump",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "path": [
                    "str"
                ],
                "just_predictions": [
                    "bool"
                ]
            }
        },
        "BRATCorpusIO._populate_corpus": {
            "name": "_populate_corpus",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "path": [
                    "str"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "BRATCorpusIO.read_data": {
            "name": "read_data",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "textfilename": [
                    "str"
                ],
                "doc_id": [
                    "str"
                ],
                "a1_filename": [
                    "Optional[str]"
                ],
                "a2_filename": [
                    "Optional[str]"
                ]
            }
        }
    },
    "DeRE-master/dere/corpus_io/corpus_io.py": {
        "CorpusIO.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ]
            }
        },
        "CorpusIO.load": {
            "name": "load",
            "location": 14,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "CorpusIO.dump": {
            "name": "dump",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "path": [
                    "str"
                ],
                "just_predictions": [
                    "bool"
                ]
            }
        }
    },
    "DeRE-master/dere/corpus_io/cqsa_corpus_io.py": {
        "CQSACorpusIO.load": {
            "name": "load",
            "location": 13,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "CQSACorpusIO._populate_corpus_from_file": {
            "name": "_populate_corpus_from_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "root_path": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "CQSACorpusIO._construct_instance": {
            "name": "_construct_instance",
            "location": 45,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "element": [
                    "ET.Element"
                ],
                "doc_id": [
                    "str"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "CQSACorpusIO._populate_instance": {
            "name": "_populate_instance",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "ET.Element"
                ],
                "instance": [
                    "Instance"
                ],
                "ids": [
                    "Dict[(str, Filler)]"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "CQSACorpusIO._link_instance": {
            "name": "_link_instance",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "ET.Element"
                ],
                "instance": [
                    "Instance"
                ],
                "ids": [
                    "Dict[(str, Filler)]"
                ]
            }
        }
    },
    "DeRE-master/dere/corpus_io/universal_corpus_io.py": {
        "UniversalCorpusIO.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ],
                "corpus_io_classes": [
                    "List[Type[CorpusIO]]"
                ]
            }
        },
        "UniversalCorpusIO.load": {
            "name": "load",
            "location": 22,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "load_gold": [
                    "bool"
                ]
            }
        },
        "UniversalCorpusIO.dump": {
            "name": "dump",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "path": [
                    "str"
                ],
                "just_predictions": [
                    "bool"
                ]
            }
        }
    },
    "DeRE-master/dere/corpus_io/__init__.py": {},
    "DeRE-master/dere/evaluation/deRE_evaluation.py": {
        "read_text_file": {
            "name": "read_text_file",
            "location": 12,
            "return": [
                "(str, int)"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_a1_file": {
            "name": "read_a1_file",
            "location": 20,
            "return": [
                "Tuple[(Dict[(str, Tuple[(str, int, int)])], Dict[(int, str)])]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_a2_file": {
            "name": "read_a2_file",
            "location": 42,
            "return": [
                "Tuple[(Dict[(str, Tuple[(str, int, int)])], Dict[(str, Tuple[(str, str, List[str])])], Dict[(str, int)], Dict[(str, int)], Dict[(int, str)], Dict[(str, str)])]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "events_in_text_input": [
                    "Dict[(int, str)]"
                ],
                "equiv_input": [
                    "Dict[(str, str)]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "get_scores": {
            "name": "get_scores",
            "location": 202,
            "return": [
                "float"
            ],
            "arguments": {
                "gold": [
                    "int"
                ],
                "match_gold": [
                    "int"
                ],
                "answer": [
                    "int"
                ],
                "match_answer": [
                    "int"
                ]
            }
        },
        "report_headline": {
            "name": "report_headline",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "report": {
            "name": "report",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "str"
                ],
                "gold": [
                    "int"
                ],
                "matched_gold": [
                    "int"
                ],
                "answer": [
                    "int"
                ],
                "matched_answer": [
                    "int"
                ]
            }
        },
        "eq_event": {
            "name": "eq_event",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "eq_class": {
            "name": "eq_class",
            "location": 342,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "do_soft_class": [
                    "bool"
                ]
            }
        },
        "make_soft_classes": {
            "name": "make_soft_classes",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "cur_class": [
                    "str"
                ]
            }
        },
        "eq_args": {
            "name": "eq_args",
            "location": 371,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "eq_span": {
            "name": "eq_span",
            "location": 446,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap": [
                    "bool"
                ]
            }
        },
        "expand_span": {
            "name": "expand_span",
            "location": 495,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "beg": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ]
            }
        },
        "eq_revent": {
            "name": "eq_revent",
            "location": 518,
            "return": [
                "bool"
            ],
            "arguments": {
                "aeid": [
                    "str"
                ],
                "geid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "eq_entity": {
            "name": "eq_entity",
            "location": 587,
            "return": [
                "bool"
            ],
            "arguments": {
                "aeid": [
                    "str"
                ],
                "geid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "count_match": {
            "name": "count_match",
            "location": 636,
            "return": [
                "Tuple[(Dict[(str, int)], Dict[(str, int)])]"
            ],
            "arguments": {
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "count_match_span": {
            "name": "count_match_span",
            "location": 709,
            "return": [
                "Tuple[(Dict[(str, int)], Dict[(str, int)])]"
            ],
            "arguments": {
                "answers": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 782,
            "return": [],
            "arguments": {}
        },
        "deRE_evaluation": {
            "name": "deRE_evaluation",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "hypo": [
                    "str"
                ],
                "gold": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ],
                "soft_span": [
                    "bool"
                ],
                "soft_overlap_span": [
                    "bool"
                ]
            }
        }
    },
    "DeRE-master/dere/evaluation/deRE_evaluation_usage.py": {
        "read_text_file": {
            "name": "read_text_file",
            "location": 17,
            "return": [
                "(str, int)"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_a1_file": {
            "name": "read_a1_file",
            "location": 25,
            "return": [
                "Tuple[(Dict[(str, Tuple[(str, int, int)])], Dict[(int, str)])]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_a2_file": {
            "name": "read_a2_file",
            "location": 47,
            "return": [
                "Tuple[(Dict[(str, Tuple[(str, int, int)])], Dict[(str, Tuple[(str, str, List[str])])], Dict[(str, int)], Dict[(str, int)], Dict[(int, str)], Dict[(str, str)])]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "events_in_text_input": [
                    "Dict[(int, str)]"
                ],
                "equiv_input": [
                    "Dict[(str, str)]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "get_scores": {
            "name": "get_scores",
            "location": 207,
            "return": [
                "float"
            ],
            "arguments": {
                "gold": [
                    "int"
                ],
                "match_gold": [
                    "int"
                ],
                "answer": [
                    "int"
                ],
                "match_answer": [
                    "int"
                ]
            }
        },
        "report_headline": {
            "name": "report_headline",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "report": {
            "name": "report",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "str"
                ],
                "gold": [
                    "int"
                ],
                "matched_gold": [
                    "int"
                ],
                "answer": [
                    "int"
                ],
                "matched_answer": [
                    "int"
                ]
            }
        },
        "eq_event": {
            "name": "eq_event",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "eq_class": {
            "name": "eq_class",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "do_soft_class": [
                    "bool"
                ]
            }
        },
        "make_soft_classes": {
            "name": "make_soft_classes",
            "location": 376,
            "return": [
                "str"
            ],
            "arguments": {
                "cur_class": [
                    "str"
                ]
            }
        },
        "eq_args": {
            "name": "eq_args",
            "location": 383,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "eq_span": {
            "name": "eq_span",
            "location": 458,
            "return": [
                "bool"
            ],
            "arguments": {
                "aid": [
                    "str"
                ],
                "gid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap": [
                    "bool"
                ]
            }
        },
        "expand_span": {
            "name": "expand_span",
            "location": 507,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "beg": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ]
            }
        },
        "eq_revent": {
            "name": "eq_revent",
            "location": 530,
            "return": [
                "bool"
            ],
            "arguments": {
                "aeid": [
                    "str"
                ],
                "geid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "eq_entity": {
            "name": "eq_entity",
            "location": 599,
            "return": [
                "bool"
            ],
            "arguments": {
                "aeid": [
                    "str"
                ],
                "geid": [
                    "str"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "count_match": {
            "name": "count_match",
            "location": 648,
            "return": [
                "Tuple[(Dict[(str, int)], Dict[(str, int)])]"
            ],
            "arguments": {
                "answers_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "answers_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "golds_span": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds_frame": [
                    "Dict[(str, Tuple[(str, str, List[str])])]"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_class": [
                    "bool"
                ],
                "do_soft_args": [
                    "bool"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "count_match_span": {
            "name": "count_match_span",
            "location": 721,
            "return": [
                "Tuple[(Dict[(str, int)], Dict[(str, int)])]"
            ],
            "arguments": {
                "answers": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "golds": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "a1_annotations": [
                    "Dict[(str, Tuple[(str, int, int)])]"
                ],
                "text": [
                    "str"
                ],
                "events_in_text": [
                    "Dict[(int, str)]"
                ],
                "text_len": [
                    "int"
                ],
                "do_soft_span": [
                    "bool"
                ],
                "do_soft_overlap_span": [
                    "bool"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 794,
            "return": [],
            "arguments": {}
        },
        "deRE_evaluation": {
            "name": "deRE_evaluation",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "hypo": [
                    "str"
                ],
                "gold": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ],
                "soft_span": [
                    "bool"
                ],
                "soft_overlap_span": [
                    "bool"
                ]
            }
        }
    },
    "DeRE-master/dere/models/_bio_span_model.py": {
        "BIOSpanModel.train": {
            "name": "train",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "dev_corpus": [
                    "Optional[Corpus]"
                ]
            }
        },
        "BIOSpanModel.predict": {
            "name": "predict",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "BIOSpanModel.sequence_train": {
            "name": "sequence_train",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[List[str]]"
                ],
                "ys": [
                    "Dict[(SpanType, List[List[str]])]"
                ],
                "x_dev": [
                    "Optional[List[List[str]]]"
                ],
                "ys_dev": [
                    "Optional[Dict[(SpanType, List[List[str]])]]"
                ]
            }
        },
        "BIOSpanModel.sequence_predict": {
            "name": "sequence_predict",
            "location": 45,
            "return": [
                "Dict[(SpanType, List[List[str]])]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[List[str]]"
                ]
            }
        },
        "BIOSpanModel.span_tokenize": {
            "name": "span_tokenize",
            "location": 59,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BIOSpanModel.normalize_token": {
            "name": "normalize_token",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "BIOSpanModel._instance_xys": {
            "name": "_instance_xys",
            "location": 87,
            "return": [
                "Tuple[(List[str], Dict[(SpanType, List[str])])]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Instance"
                ]
            }
        },
        "BIOSpanModel._corpus_xys": {
            "name": "_corpus_xys",
            "location": 108,
            "return": [
                "Tuple[(List[List[str]], Dict[(SpanType, List[List[str]])])]"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "BIOSpanModel._make_spans_from_labels": {
            "name": "_make_spans_from_labels",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Instance"
                ],
                "span_type": [
                    "SpanType"
                ],
                "labels": [
                    "List[str]"
                ],
                "strict": [
                    "bool"
                ]
            }
        }
    },
    "DeRE-master/dere/models/_model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ],
                "model_spec": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Model.initialize": {
            "name": "initialize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.dump": {
            "name": "dump",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "Model.load": {
            "name": "load",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "Model.train": {
            "name": "train",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "dev_corpus": [
                    "Optional[Corpus]"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "Model.evaluate": {
            "name": "evaluate",
            "location": 56,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        }
    },
    "DeRE-master/dere/models/_nop_model.py": {
        "NOPModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "TaskSpecification"
                ]
            }
        },
        "NOPModel.train": {
            "name": "train",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "dev_corpus": [
                    "Optional[Corpus]"
                ]
            }
        },
        "NOPModel.predict": {
            "name": "predict",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        }
    },
    "DeRE-master/dere/models/__init__.py": {},
    "DeRE-master/dere/models/_baseline/baseline_model.py": {
        "BaselineModel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ],
                "model_spec": [
                    "Dict[(str, Any)]"
                ],
                "span_classifier": [
                    "Dict[(str, Any)]"
                ],
                "slot_classifier": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BaselineModel.train": {
            "name": "train",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "dev_corpus": [
                    "Optional[Corpus]"
                ]
            }
        },
        "BaselineModel.predict": {
            "name": "predict",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "BaselineModel.initialize": {
            "name": "initialize",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineModel.dump": {
            "name": "dump",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "BaselineModel.load": {
            "name": "load",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        }
    },
    "DeRE-master/dere/models/_baseline/slot_classifier.py": {
        "SlotClassifier.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ],
                "model_spec": [
                    "Dict[(str, Any)]"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "SlotClassifier.initialize": {
            "name": "initialize",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlotClassifier.shuffle": {
            "name": "shuffle",
            "location": 96,
            "return": [
                "Tuple[(_ArrayLike, _ArrayLike)]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "_ArrayLike"
                ],
                "y": [
                    "_ArrayLike"
                ]
            }
        },
        "SlotClassifier.train": {
            "name": "train",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "dev_corpus": [
                    "Optional[Corpus]"
                ]
            }
        },
        "SlotClassifier.predict": {
            "name": "predict",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "SlotClassifier.filter_results": {
            "name": "filter_results",
            "location": 170,
            "return": [
                "List[Relation]"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Relation]"
                ]
            }
        },
        "SlotClassifier.generate_frames": {
            "name": "generate_frames",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Relation]"
                ]
            }
        },
        "SlotClassifier.split_overfilled_frames": {
            "name": "split_overfilled_frames",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Instance"
                ]
            }
        },
        "SlotClassifier._eval": {
            "name": "_eval",
            "location": 230,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "x": [
                    "Optional[spmatrix]"
                ],
                "y_gold": [
                    "Optional[np.ndarray]"
                ]
            }
        },
        "SlotClassifier._frame_type_anchor": {
            "name": "_frame_type_anchor",
            "location": 274,
            "return": [
                "SlotType"
            ],
            "arguments": {
                "self": [],
                "frame_type": [
                    "FrameType"
                ]
            }
        },
        "SlotClassifier.get_anchor_slot": {
            "name": "get_anchor_slot",
            "location": 277,
            "return": [
                "Slot"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Frame"
                ]
            }
        },
        "SlotClassifier.get_features_and_labels": {
            "name": "get_features_and_labels",
            "location": 280,
            "return": [
                "Tuple[(spmatrix, np.ndarray, List[SpanPair])]"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "SlotClassifier.get_relations": {
            "name": "get_relations",
            "location": 347,
            "return": [
                "List[Relation]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Instance"
                ]
            }
        },
        "SlotClassifier.preprocess_text": {
            "name": "preprocess_text",
            "location": 385,
            "return": [
                "Tuple[(Doc, nx.Graph, Dict[(int, str)], Dict[(Tuple[(int, int)], str)])]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SlotClassifier.fit_count_vectorizers": {
            "name": "fit_count_vectorizers",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span1_list": [
                    "List[Span]"
                ],
                "span2_list": [
                    "List[Span]"
                ],
                "doc_list": [
                    "List[Doc]"
                ],
                "graph_list": [
                    "List[nx.Graph]"
                ],
                "idx2word_list": [
                    "List[Dict[(int, str)]]"
                ],
                "edge2dep_list": [
                    "List[Dict[(Tuple[(int, int)], str)]]"
                ],
                "sequence_words_list": [
                    "List[Any]"
                ]
            }
        },
        "SlotClassifier.get_shortest_path_features": {
            "name": "get_shortest_path_features",
            "location": 450,
            "return": [
                "Tuple[(np.ndarray, List[str], np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "doc_list": [
                    "List[Doc]"
                ],
                "graph_list": [
                    "List[nx.Graph]"
                ],
                "span1_list": [
                    "List[Span]"
                ],
                "span2_list": [
                    "List[Span]"
                ],
                "idx2word_list": [
                    "List[Dict[(int, str)]]"
                ],
                "edge2dep_list": [
                    "List[Dict[(Tuple[(int, int)], str)]]"
                ]
            }
        },
        "SlotClassifier.features_from_instance": {
            "name": "features_from_instance",
            "location": 504,
            "return": [
                "spmatrix"
            ],
            "arguments": {
                "self": [],
                "span1_list": [
                    "List[Span]"
                ],
                "span2_list": [
                    "List[Span]"
                ],
                "doc_list": [
                    "List[Doc]"
                ],
                "graph_list": [
                    "List[nx.Graph]"
                ],
                "idx2word_list": [
                    "List[Dict[(int, str)]]"
                ],
                "edge2dep_list": [
                    "List[Dict[(Tuple[(int, int)], str)]]"
                ],
                "sequence_words_list": [
                    "List[str]"
                ]
            }
        },
        "SlotClassifier.dump": {
            "name": "dump",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "SlotClassifier.load": {
            "name": "load",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "SlotClassifier.find_node": {
            "name": "find_node",
            "location": 620,
            "return": [
                "List[spacy.tokens.Token]"
            ],
            "arguments": {
                "doc": [
                    "Doc"
                ],
                "span": [
                    "Span"
                ]
            }
        },
        "SlotClassifier.edge_distance": {
            "name": "edge_distance",
            "location": 640,
            "return": [
                "int"
            ],
            "arguments": {
                "graph": [
                    "nx.Graph"
                ],
                "tokens1": [
                    "List[spacy.tokens.Token]"
                ],
                "tokens2": [
                    "List[spacy.tokens.Token]"
                ]
            }
        },
        "SlotClassifier.edge_words_deps": {
            "name": "edge_words_deps",
            "location": 656,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "nx.Graph"
                ],
                "tokens1": [
                    "List[spacy.tokens.Token]"
                ],
                "tokens2": [
                    "List[spacy.tokens.Token]"
                ],
                "idx2word": [
                    "Dict[(int, str)]"
                ],
                "edge2dep": [
                    "Dict[(Tuple[(int, int)], str)]"
                ]
            }
        },
        "SlotClassifier.edge_words": {
            "name": "edge_words",
            "location": 677,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "nx.Graph"
                ],
                "tokens1": [
                    "List[spacy.tokens.Token]"
                ],
                "tokens2": [
                    "List[spacy.tokens.Token]"
                ],
                "idx2word": [
                    "Dict[(int, str)]"
                ]
            }
        },
        "SlotClassifier.get_shortest_path": {
            "name": "get_shortest_path",
            "location": 690,
            "return": [
                "Optional[List[int]]"
            ],
            "arguments": {
                "graph": [
                    "nx.Graph"
                ],
                "tokens1": [
                    "List[spacy.tokens.Token]"
                ],
                "tokens2": [
                    "List[spacy.tokens.Token]"
                ]
            }
        },
        "SlotClassifier.build_sequence": {
            "name": "build_sequence",
            "location": 706,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Doc"
                ],
                "span1": [
                    "Span"
                ],
                "span2": [
                    "Span"
                ]
            }
        },
        "SlotClassifier.filter_results.filt": {
            "name": "filt",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "relation": [
                    "Relation"
                ]
            }
        }
    },
    "DeRE-master/dere/models/_baseline/span_classifier.py": {
        "SpanClassifier.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_spec": [
                    "TaskSpecification"
                ],
                "model_spec": [
                    "Dict[(str, Any)]"
                ],
                "gazetteer": [
                    "Optional[str]"
                ]
            }
        },
        "SpanClassifier.shuffle": {
            "name": "shuffle",
            "location": 59,
            "return": [
                "Tuple[(List, List)]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "List"
                ],
                "y": [
                    "List"
                ]
            }
        },
        "SpanClassifier.train": {
            "name": "train",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus_train": [
                    "Corpus"
                ],
                "dev_corpus": [
                    "Optional[Corpus]"
                ]
            }
        },
        "SpanClassifier._eval": {
            "name": "_eval",
            "location": 185,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "classifier": [
                    "CRF"
                ],
                "X_dev": [
                    "List[List[Features]]"
                ],
                "y_dev": [
                    "List[List[str]]"
                ]
            }
        },
        "SpanClassifier.predict": {
            "name": "predict",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "SpanClassifier.get_spans_for_tokens": {
            "name": "get_spans_for_tokens",
            "location": 228,
            "return": [
                "List[List[Span]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[Tuple[(int, int)]]"
                ],
                "instance": [
                    "Instance"
                ]
            }
        },
        "SpanClassifier.get_binary_labels": {
            "name": "get_binary_labels",
            "location": 258,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "t": [
                    "SpanType"
                ],
                "use_bio": [
                    "bool"
                ]
            }
        },
        "SpanClassifier.read_gazetteer": {
            "name": "read_gazetteer",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "SpanClassifier.get_span_type_specific_features": {
            "name": "get_span_type_specific_features",
            "location": 305,
            "return": [
                "List[List[Features]]"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ],
                "target": [
                    "SpanType"
                ]
            }
        },
        "SpanClassifier.merge_features": {
            "name": "merge_features",
            "location": 324,
            "return": [
                "List[List[Features]]"
            ],
            "arguments": {
                "self": [],
                "features1": [
                    "List[List[Features]]"
                ],
                "features2": [
                    "List[List[Features]]"
                ]
            }
        },
        "SpanClassifier.word_features": {
            "name": "word_features",
            "location": 333,
            "return": [
                "Features"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "SpanClassifier.token_features": {
            "name": "token_features",
            "location": 344,
            "return": [
                "Features"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Instance"
                ],
                "token": [
                    "Tuple[(int, int)]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "SpanClassifier.get_features": {
            "name": "get_features",
            "location": 356,
            "return": [
                "List[List[Features]]"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "SpanClassifier.is_token_in_span": {
            "name": "is_token_in_span",
            "location": 389,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Instance"
                ],
                "token": [
                    "Tuple[(int, int)]"
                ],
                "span_type": [
                    "SpanType"
                ]
            }
        },
        "SpanClassifier.contains_digit": {
            "name": "contains_digit",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "SpanClassifier.contains_punct": {
            "name": "contains_punct",
            "location": 407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "SpanClassifier.get_stem": {
            "name": "get_stem",
            "location": 412,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "SpanClassifier.prepare_results": {
            "name": "prepare_results",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Dict[(str, List[List[str]])]"
                ],
                "corpus": [
                    "Corpus"
                ]
            }
        },
        "SpanClassifier.train.message": {
            "name": "message",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "val": [
                    "float"
                ]
            }
        }
    },
    "DeRE-master/dere/models/_baseline/__init__.py": {},
    "DeRE-master/docs/conf.py": {},
    "DeRE-master/stubs/spacy/cli.py": {
        "download": {
            "name": "download",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "DeRE-master/task-specs/validator.py": {
        "validate_all": {
            "name": "validate_all",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DeRE-master/test/test_corpus.py": {
        "test_frame_slot_lookup": {
            "name": "test_frame_slot_lookup",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_frame_remove": {
            "name": "test_frame_remove",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_span_bad_values": {
            "name": "test_span_bad_values",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_span_text": {
            "name": "test_span_text",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_span_remove": {
            "name": "test_span_remove",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_slot": {
            "name": "test_slot",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_instance": {
            "name": "test_instance",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_corpus": {
            "name": "test_corpus",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "MockFrameType.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "MockInstance.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockSlotType.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "DeRE-master/test/test_slot_classifier.py": {
        "test_get_shortest_path": {
            "name": "test_get_shortest_path",
            "location": 71,
            "return": [],
            "arguments": {
                "graph": [],
                "tokens1": [],
                "tokens2": [],
                "result": []
            }
        },
        "test_edge_words": {
            "name": "test_edge_words",
            "location": 114,
            "return": [],
            "arguments": {
                "graph": [],
                "tokens1": [],
                "tokens2": [],
                "idx2word": [],
                "result": []
            }
        },
        "test_edge_words_deps": {
            "name": "test_edge_words_deps",
            "location": 182,
            "return": [],
            "arguments": {
                "graph": [],
                "tokens1": [],
                "tokens2": [],
                "idx2word": [],
                "edge2dep": [],
                "result": []
            }
        },
        "MockTaskSpec.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockToken.words": {
            "name": "words",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "words": [],
                "idx": []
            }
        },
        "MockToken.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "idx": []
            }
        }
    }
}
{
    "EDGAR-research-master/nlp_demo.py": {
        "concat_lists": {
            "name": "concat_lists",
            "location": 19,
            "return": [],
            "arguments": {
                "lists": []
            }
        },
        "merge_dicts": {
            "name": "merge_dicts",
            "location": 25,
            "return": [],
            "arguments": {
                "dicts": []
            }
        },
        "extract_gutenberg": {
            "name": "extract_gutenberg",
            "location": 31,
            "return": [],
            "arguments": {
                "gutenberg_text": []
            }
        },
        "eliminate_wordwrap": {
            "name": "eliminate_wordwrap",
            "location": 36,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "text2paragraphs": {
            "name": "text2paragraphs",
            "location": 45,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "text2paragraphs.is_paragraph": {
            "name": "is_paragraph",
            "location": 46,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "stem2word": {
            "name": "stem2word",
            "location": 133,
            "return": [],
            "arguments": {
                "stem": []
            }
        },
        "score_bigrams": {
            "name": "score_bigrams",
            "location": 180,
            "return": [],
            "arguments": {
                "ns_counts": []
            }
        }
    },
    "EDGAR-research-master/setup.py": {},
    "EDGAR-research-master/analysis/data_statistics.py": {},
    "EDGAR-research-master/analysis/mallet_topic_modeling.py": {},
    "EDGAR-research-master/edgar_code/bag_store.py": {
        "BagStore.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bag_path": [
                    "PathLike"
                ],
                "name": [
                    "str"
                ],
                "serializer": [
                    "Optional[Serializer]"
                ]
            }
        },
        "BagStore.args2key": {
            "name": "args2key",
            "location": 49,
            "return": [
                "PathLike"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Tuple[(Any, ...)]"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BagStore.__setitem__": {
            "name": "__setitem__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bag_path": [
                    "PathLike"
                ],
                "bag": [
                    "Bag[T]"
                ]
            }
        },
        "BagStore.make_dump_partition": {
            "name": "make_dump_partition",
            "location": 74,
            "return": [
                "Callable[([Iterable[T], int], List[T])]"
            ],
            "arguments": {
                "self": [],
                "bag_path": [
                    "PathLike"
                ]
            }
        },
        "BagStore.__getitem__": {
            "name": "__getitem__",
            "location": 86,
            "return": [
                "Bag[T]"
            ],
            "arguments": {
                "self": [],
                "bag_path": [
                    "PathLike"
                ]
            }
        },
        "BagStore.make_load_partition": {
            "name": "make_load_partition",
            "location": 99,
            "return": [
                "Callable[([List[int]], List[T])]"
            ],
            "arguments": {
                "self": [],
                "bag_path": [
                    "PathLike"
                ]
            }
        },
        "BagStore.__contains__": {
            "name": "__contains__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bag_path": [
                    "Any"
                ]
            }
        },
        "BagStore.__delitem__": {
            "name": "__delitem__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bag_path": [
                    "PathLike"
                ]
            }
        },
        "BagStore.clear": {
            "name": "clear",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeGenericMeta.__getitem__": {
            "name": "__getitem__",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "BagStore.make_dump_partition.dump_partition": {
            "name": "dump_partition",
            "location": 77,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "partition": [
                    "Iterable[T]"
                ],
                "partition_no": [
                    "int"
                ]
            }
        },
        "BagStore.make_load_partition.load_partition": {
            "name": "load_partition",
            "location": 102,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "partition_no_list": [
                    "List[int]"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/cache.py": {
        "to_hashable": {
            "name": "to_hashable",
            "location": 244,
            "return": [
                "Hashable"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "safe_str": {
            "name": "safe_str",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "pathify": {
            "name": "pathify",
            "location": 301,
            "return": [
                "PathLike"
            ],
            "arguments": {
                "obj": [
                    "Union[(str, PathLike)]"
                ]
            }
        },
        "Cache.decor": {
            "name": "decor",
            "location": 24,
            "return": [
                "Callable[([CacheFunc], CacheFunc)]"
            ],
            "arguments": {
                "cls": [],
                "obj_store": [
                    "Callable[([str], ObjectStore[(CacheKey, CacheReturn)])]"
                ],
                "hit_msg": [
                    "bool"
                ],
                "miss_msg": [
                    "bool"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "Cache.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj_store": [
                    "Callable[([str], ObjectStore[(CacheKey, CacheReturn)])]"
                ],
                "function": [
                    "CacheFunc@@Callable[(..., Any)]@@"
                ],
                "hit_msg": [
                    "bool"
                ],
                "miss_msg": [
                    "bool"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "Cache.__call__": {
            "name": "__call__",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.clear": {
            "name": "clear",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectStore.create": {
            "name": "create",
            "location": 110,
            "return": [
                "Callable[([str], ObjectStore[(ObjectStoreKey, ObjectStoreValue)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ObjectStore.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ObjectStore.args2key": {
            "name": "args2key",
            "location": 124,
            "return": [
                "ObjectStoreKey@@"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Tuple[(Any, ...)]"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MemoryStore.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MemoryStore.args2key": {
            "name": "args2key",
            "location": 134,
            "return": [
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Tuple[(Any, ...)]"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "FileStore.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "cache_path": [
                    "PathLike"
                ],
                "name": [
                    "str"
                ],
                "serializer": [
                    "Optional[Serializer]"
                ]
            }
        },
        "FileStore.load_if_not_loaded": {
            "name": "load_if_not_loaded",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStore.args2key": {
            "name": "args2key",
            "location": 166,
            "return": [
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Tuple[(Any, ...)]"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "FileStore.commit": {
            "name": "commit",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStore.__setitem__": {
            "name": "__setitem__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "FileStore.__delitem__": {
            "name": "__delitem__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable"
                ]
            }
        },
        "FileStore.clear": {
            "name": "clear",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryStore.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "PathLike"
                ],
                "name": [
                    "str"
                ],
                "serializer": [
                    "Optional[Serializer]"
                ]
            }
        },
        "DirectoryStore.args2key": {
            "name": "args2key",
            "location": 212,
            "return": [
                "PathLike"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Tuple[(Any, ...)]"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DirectoryStore.__setitem__": {
            "name": "__setitem__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "PathLike"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "DirectoryStore.__delitem__": {
            "name": "__delitem__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "PathLike"
                ]
            }
        },
        "DirectoryStore.__getitem__": {
            "name": "__getitem__",
            "location": 226,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "PathLike"
                ]
            }
        },
        "DirectoryStore.__contains__": {
            "name": "__contains__",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "DirectoryStore.clear": {
            "name": "clear",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.decor.decor_": {
            "name": "decor_",
            "location": 36,
            "return": [
                "CacheFunc@@Callable[(..., Any)]@@"
            ],
            "arguments": {
                "function": [
                    "CacheFunc@@Callable[(..., Any)]@@"
                ]
            }
        },
        "ObjectStore.create.create_": {
            "name": "create_",
            "location": 115,
            "return": [
                "ObjectStore[(ObjectStoreKey, ObjectStoreValue)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/gs_path.py": {
        "is_pathlike": {
            "name": "is_pathlike",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "pathify": {
            "name": "pathify",
            "location": 130,
            "return": [
                "Union[(PathLike, Path)]"
            ],
            "arguments": {
                "obj": [
                    "PotentiallyPathLike"
                ]
            }
        },
        "copy": {
            "name": "copy",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "src_path": [
                    "PathLike"
                ],
                "dst_path": [
                    "PathLike"
                ]
            }
        },
        "GSPath.from_blob": {
            "name": "from_blob",
            "location": 24,
            "return": [
                "GSPath"
            ],
            "arguments": {
                "cls": [],
                "blob": [
                    "Blob"
                ]
            }
        },
        "GSPath.from_url": {
            "name": "from_url",
            "location": 28,
            "return": [
                "GSPath"
            ],
            "arguments": {
                "cls": [],
                "url_str": [
                    "str"
                ]
            }
        },
        "GSPath.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "Union[(str, Bucket)]"
                ],
                "path": [
                    "Union[(PurePath, str)]"
                ]
            }
        },
        "GSPath.__getstate__": {
            "name": "__getstate__",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSPath.__setstate__": {
            "name": "__setstate__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GSPath.__truediv__": {
            "name": "__truediv__",
            "location": 53,
            "return": [
                "GSPath"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(str, PurePath)]"
                ]
            }
        },
        "GSPath.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSPath.parent": {
            "name": "parent",
            "location": 61,
            "return": [
                "GSPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSPath.mkdir": {
            "name": "mkdir",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int"
                ],
                "parents": [
                    "bool"
                ],
                "exist_ok": [
                    "bool"
                ]
            }
        },
        "GSPath.rmtree": {
            "name": "rmtree",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSPath.exists": {
            "name": "exists",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSPath.unlink": {
            "name": "unlink",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSPath.iterdir": {
            "name": "iterdir",
            "location": 81,
            "return": [
                "Iterable[GSPath]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSPath.open": {
            "name": "open",
            "location": 85,
            "return": [
                "IO[Any]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "newline": [
                    "str"
                ]
            }
        },
        "GSPath.public_path": {
            "name": "public_path",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WGSFile.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gs_path": [
                    "GSPath"
                ],
                "_": [
                    "str"
                ]
            }
        },
        "WGSFile.close": {
            "name": "close",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EDGAR-research-master/edgar_code/map_const.py": {
        "map_const": {
            "name": "map_const",
            "location": 13,
            "return": [
                "Bag[V]"
            ],
            "arguments": {
                "func": [
                    "Callable[([T, U], V)]"
                ],
                "bag": [
                    "Bag[T]"
                ],
                "delayed": [
                    "Delayed[U]"
                ]
            }
        },
        "map_const.map_chunk": {
            "name": "map_chunk",
            "location": 19,
            "return": [
                "List[V]"
            ],
            "arguments": {
                "partition": [
                    "Iterable[T]"
                ],
                "const": [
                    "U@@"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/msgpack2.py": {
        "encode_obj": {
            "name": "encode_obj",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "decode_obj": {
            "name": "decode_obj",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "fil": [
                    "Any"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 62,
            "return": [
                "bytes"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "buf": [
                    "bytes"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "fil": [
                    "Any"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/parse.py": {
        "download_index_lines": {
            "name": "download_index_lines",
            "location": 26,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "parse_header": {
            "name": "parse_header",
            "location": 38,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "Iterator[bytes]"
                ]
            }
        },
        "parse_body": {
            "name": "parse_body",
            "location": 68,
            "return": [
                "Iterable[Index]"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ],
                "lines": [
                    "Iterable[bytes]"
                ],
                "col_names": [
                    "List[str]"
                ]
            }
        },
        "filter_form_type": {
            "name": "filter_form_type",
            "location": 93,
            "return": [
                "Iterator[Index]"
            ],
            "arguments": {
                "records": [
                    "Iterable[Index]"
                ],
                "this_form_type": [
                    "str"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 109,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "line_bytes": [
                    "bytes"
                ]
            }
        },
        "download_indexes": {
            "name": "download_indexes",
            "location": 147,
            "return": [
                "Iterable[Index]"
            ],
            "arguments": {
                "form_type": [
                    "str"
                ],
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "sgml2fileinfos": {
            "name": "sgml2fileinfos",
            "location": 167,
            "return": [
                "Iterable[Dict[(str, bytes)]]"
            ],
            "arguments": {
                "sgml_contents": [
                    "bytes"
                ]
            }
        },
        "find_form": {
            "name": "find_form",
            "location": 195,
            "return": [
                "bytes"
            ],
            "arguments": {
                "fileinfos": [
                    "Iterable[Dict[(str, bytes)]]"
                ],
                "form_type": [
                    "str"
                ]
            }
        },
        "is_html": {
            "name": "is_html",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "bytes"
                ]
            }
        },
        "html2paragraphs": {
            "name": "html2paragraphs",
            "location": 219,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "bhtml": [
                    "bytes"
                ]
            }
        },
        "text2paragraphs": {
            "name": "text2paragraphs",
            "location": 257,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "btext": [
                    "bytes"
                ]
            }
        },
        "is_text_line": {
            "name": "is_text_line",
            "location": 302,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "clean_paragraph": {
            "name": "clean_paragraph",
            "location": 314,
            "return": [
                "str"
            ],
            "arguments": {
                "paragraph": [
                    "str"
                ]
            }
        },
        "clean_paragraphs": {
            "name": "clean_paragraphs",
            "location": 343,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "paragraphs": [
                    "List[str]"
                ]
            }
        },
        "remove_header": {
            "name": "remove_header",
            "location": 347,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "paragraphs": [
                    "List[str]"
                ]
            }
        },
        "paragraphs2rf": {
            "name": "paragraphs2rf",
            "location": 372,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "paragraphs": [
                    "List[str]"
                ],
                "pre_2006": [
                    "bool"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/retrieve.py": {
        "get_indexes": {
            "name": "get_indexes",
            "location": 14,
            "return": [
                "Bag[Index]"
            ],
            "arguments": {
                "form_type": [
                    "str"
                ],
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "get_raw_forms": {
            "name": "get_raw_forms",
            "location": 22,
            "return": [
                "Bag[Result[bytes]]"
            ],
            "arguments": {
                "form_type": [
                    "str"
                ],
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "get_paragraphs": {
            "name": "get_paragraphs",
            "location": 39,
            "return": [
                "Bag[Result[List[str]]]"
            ],
            "arguments": {
                "form_type": [
                    "str"
                ],
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "get_rfs": {
            "name": "get_rfs",
            "location": 61,
            "return": [
                "Bag[Result[List[str]]]"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "make_try_func": {
            "name": "make_try_func",
            "location": 75,
            "return": [
                "Callable[([Result[T]], Result[U])]"
            ],
            "arguments": {
                "func": [
                    "Callable[([T], U)]"
                ]
            }
        },
        "get_raw_forms.get_raw_forms_f": {
            "name": "get_raw_forms_f",
            "location": 23,
            "return": [
                "bytes"
            ],
            "arguments": {
                "index": [
                    "Index"
                ]
            }
        },
        "get_paragraphs.get_main_texts_f": {
            "name": "get_main_texts_f",
            "location": 41,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "raw_form": [
                    "bytes"
                ]
            }
        },
        "get_rfs.paragraphs2rf": {
            "name": "paragraphs2rf",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "paragraphs": [
                    "List[str]"
                ]
            }
        },
        "make_try_func.try_func": {
            "name": "try_func",
            "location": 77,
            "return": [
                "Union[(U, Exception)]"
            ],
            "arguments": {
                "arg": [
                    "Union[(T, Exception)]"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/tokenize3.py": {
        "is_paragraph": {
            "name": "is_paragraph",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "paragraph2terms": {
            "name": "paragraph2terms",
            "location": 24,
            "return": [
                "TermsType"
            ],
            "arguments": {
                "paragraph": [
                    "str"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/types.py": {
        "PathLike.__truediv__": {
            "name": "__truediv__",
            "location": 55,
            "return": [
                "PathLike"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(str, PurePath)]"
                ]
            }
        },
        "PathLike.mkdir": {
            "name": "mkdir",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int"
                ],
                "parents": [
                    "bool"
                ],
                "exist_ok": [
                    "bool"
                ]
            }
        },
        "PathLike.exists": {
            "name": "exists",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.unlink": {
            "name": "unlink",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.iterdir": {
            "name": "iterdir",
            "location": 63,
            "return": [
                "Iterable[PathLike]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.open": {
            "name": "open",
            "location": 66,
            "return": [
                "IO[Any]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "PathLike.parent": {
            "name": "parent",
            "location": 69,
            "return": [
                "PathLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.load": {
            "name": "load",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fil": [
                    "IO[bytes]"
                ]
            }
        },
        "Serializer.dump": {
            "name": "dump",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "fil": [
                    "IO[bytes]"
                ]
            }
        },
        "FakeBagMeta.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "FakeUserDictMeta.__getitem__": {
            "name": "__getitem__",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "FakeFutureMeta.__getitem__": {
            "name": "__getitem__",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "FakeDelayedMeta.__getitem__": {
            "name": "__getitem__",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        }
    },
    "EDGAR-research-master/edgar_code/__init__.py": {},
    "EDGAR-research-master/edgar_code/cli/config.py": {
        "get_client": {
            "name": "get_client",
            "location": 34,
            "return": [
                "distributed.Client"
            ],
            "arguments": {}
        }
    },
    "EDGAR-research-master/edgar_code/cli/get_client.py": {},
    "EDGAR-research-master/edgar_code/cli/get_rfs.py": {
        "rf_mapper": {
            "name": "rf_mapper",
            "location": 23,
            "return": [
                "Tuple[(int, int, str)]"
            ],
            "arguments": {
                "rf": [
                    "Union[(List[str], Exception)]"
                ]
            }
        },
        "time_code_getter": {
            "name": "time_code_getter",
            "location": 34,
            "return": [
                "T@@"
            ],
            "arguments": {
                "val": [
                    "T@@"
                ]
            }
        },
        "get_bag": {
            "name": "get_bag",
            "location": 39,
            "return": [
                "Bag[Tuple[(str, int, int, str)]]"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "get_styled_ax": {
            "name": "get_styled_ax",
            "location": 48,
            "return": [
                "Generator[(plt.Axes, None, None)]"
            ],
            "arguments": {
                "path": [
                    "PathLike"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "EDGAR-research-master/edgar_code/cli/get_terms.py": {
        "get_terms": {
            "name": "get_terms",
            "location": 15,
            "return": [
                "Bag[List[TermsType]]"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "aggregate_terms": {
            "name": "aggregate_terms",
            "location": 30,
            "return": [
                "TermsType"
            ],
            "arguments": {
                "entities_ngrams_stems": [
                    "Iterable[TermsType]"
                ]
            }
        },
        "get_combined_terms": {
            "name": "get_combined_terms",
            "location": 44,
            "return": [
                "TermsType"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "get_alltime_terms": {
            "name": "get_alltime_terms",
            "location": 51,
            "return": [
                "TermsType"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_terms.ensure_str": {
            "name": "ensure_str",
            "location": 17,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "arg": [
                    "Union[(List[str], Exception)]"
                ]
            }
        },
        "main.write_phrase_counts": {
            "name": "write_phrase_counts",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "PathLike"
                ],
                "phrase_counts": [
                    "PhraseCount"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/cli/get_topics.py": {
        "get_sorted_terms": {
            "name": "get_sorted_terms",
            "location": 11,
            "return": [
                "List[Tuple[(str, ...)]]"
            ],
            "arguments": {}
        },
        "get_bows": {
            "name": "get_bows",
            "location": 19,
            "return": [
                "Bag[List[List[Tuple[(int, float)]]]]"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "qtr": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_bows.doc2bow": {
            "name": "doc2bow",
            "location": 20,
            "return": [
                "List[Tuple[(int, float)]]"
            ],
            "arguments": {
                "term_types": [
                    "TermsType"
                ],
                "terms": [
                    "List[Tuple[str]]"
                ]
            }
        },
        "get_bows.docs2bows": {
            "name": "docs2bows",
            "location": 31,
            "return": [
                "List[List[Tuple[(int, float)]]]"
            ],
            "arguments": {
                "term_types_paragraphs": [
                    "List[TermsType]"
                ],
                "terms": [
                    "List[Tuple[str]]"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/cli/__init__.py": {},
    "EDGAR-research-master/edgar_code/executables/search_rfs.py": {
        "paragraph_containing": {
            "name": "paragraph_containing",
            "location": 6,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "EDGAR-research-master/edgar_code/executables/tokenize_rfs.py": {
        "section_word_stems_for": {
            "name": "section_word_stems_for",
            "location": 21,
            "return": [],
            "arguments": {
                "year": [],
                "qtr": []
            }
        },
        "compute_some_words": {
            "name": "compute_some_words",
            "location": 48,
            "return": [],
            "arguments": {
                "year": [],
                "qtr": []
            }
        },
        "compute_all_words": {
            "name": "compute_all_words",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "corpus_for": {
            "name": "corpus_for",
            "location": 121,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "corpus": {
            "name": "corpus",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "compute_tfidf": {
            "name": "compute_tfidf",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "compute_lda": {
            "name": "compute_lda",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "main_sub4": {
            "name": "main_sub4",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "compute_year_topic2": {
            "name": "compute_year_topic2",
            "location": 220,
            "return": [],
            "arguments": {
                "year": [],
                "qtr": []
            }
        },
        "compute_all_year_topics": {
            "name": "compute_all_year_topics",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "stats_for_year_topic": {
            "name": "stats_for_year_topic",
            "location": 283,
            "return": [],
            "arguments": {
                "year_topic_weighted": [],
                "year_topic_unweighted": [],
                "year_weights": [],
                "year_docs": []
            }
        },
        "stats_for_counter": {
            "name": "stats_for_counter",
            "location": 327,
            "return": [],
            "arguments": {
                "counter": []
            }
        },
        "stats_for_unstem": {
            "name": "stats_for_unstem",
            "location": 367,
            "return": [],
            "arguments": {
                "unstem_map": []
            }
        },
        "main": {
            "name": "main",
            "location": 374,
            "return": [],
            "arguments": {}
        },
        "section_word_stems_for.is_good_rf": {
            "name": "is_good_rf",
            "location": 23,
            "return": [],
            "arguments": {
                "rf": []
            }
        },
        "section_word_stems_for.index_to_keys": {
            "name": "index_to_keys",
            "location": 25,
            "return": [],
            "arguments": {
                "oldkey": []
            }
        },
        "section_word_stems_for.acceptable_doc": {
            "name": "acceptable_doc",
            "location": 28,
            "return": [],
            "arguments": {
                "doc": []
            }
        },
        "compute_some_words.perpartition": {
            "name": "perpartition",
            "location": 49,
            "return": [],
            "arguments": {
                "partition": []
            }
        },
        "compute_some_words.aggregate": {
            "name": "aggregate",
            "location": 69,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "compute_all_words.aggregate": {
            "name": "aggregate",
            "location": 86,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "corpus_for.get_bow": {
            "name": "get_bow",
            "location": 124,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "compute_year_topic2.perpartition": {
            "name": "perpartition",
            "location": 222,
            "return": [],
            "arguments": {
                "partition": []
            }
        },
        "compute_year_topic2.aggregate": {
            "name": "aggregate",
            "location": 233,
            "return": [],
            "arguments": {
                "partitions": []
            }
        },
        "compute_year_topic2.mapper": {
            "name": "mapper",
            "location": 248,
            "return": [],
            "arguments": {
                "item": [],
                "lda": []
            }
        },
        "stats_for_year_topic.mapper": {
            "name": "mapper",
            "location": 290,
            "return": [],
            "arguments": {
                "topic_no": []
            }
        }
    },
    "EDGAR-research-master/edgar_code/util/list_dict.py": {
        "generator2fn_list": {
            "name": "generator2fn_list",
            "location": 13,
            "return": [
                "Callable[(..., List[T])]"
            ],
            "arguments": {
                "generator": [
                    "Callable[(..., Iterable[T])]"
                ]
            }
        },
        "invert": {
            "name": "invert",
            "location": 33,
            "return": [
                "Dict[(U, T)]"
            ],
            "arguments": {
                "dct": [
                    "Dict[(T, U)]"
                ]
            }
        },
        "generator2iterator": {
            "name": "generator2iterator",
            "location": 37,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "generator": [
                    "Callable[([], Iterable[T])]"
                ],
                "length": [
                    "Optional[int]"
                ]
            }
        },
        "concat_lists": {
            "name": "concat_lists",
            "location": 60,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "lists": [
                    "Iterable[List[T]]"
                ]
            }
        },
        "merge_dicts": {
            "name": "merge_dicts",
            "location": 66,
            "return": [
                "Dict[(T, U)]"
            ],
            "arguments": {
                "dicts": [
                    "Iterable[Dict[(T, U)]]"
                ]
            }
        },
        "generator2fn_list.func": {
            "name": "func",
            "location": 28,
            "return": [
                "List[T]"
            ],
            "arguments": {}
        },
        "generator2iterator.MyIterator.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "generator2iterator.MyIterator.__iter__": {
            "name": "__iter__",
            "location": 44,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "generator2iterator.MyIterator.__len__": {
            "name": "__len__",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EDGAR-research-master/edgar_code/util/picklable_threading.py": {
        "ThreadLocalData.__getstate__": {
            "name": "__getstate__",
            "location": 9,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalData.__setstate__": {
            "name": "__setstate__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RLock.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RLock.acquire": {
            "name": "acquire",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "RLock.release": {
            "name": "release",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RLock.__enter__": {
            "name": "__enter__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RLock.__exit__": {
            "name": "__exit__",
            "location": 29,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[Exception]]"
                ],
                "exc_value": [
                    "Optional[Exception]"
                ],
                "traceback": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "RLock.__getstate__": {
            "name": "__getstate__",
            "location": 37,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RLock.__setstate__": {
            "name": "__setstate__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/util/time_code.py": {
        "mem2str": {
            "name": "mem2str",
            "location": 236,
            "return": [
                "Tuple[(float, str, float)]"
            ],
            "arguments": {
                "n_bytes": [
                    "float"
                ],
                "base2": [
                    "bool"
                ],
                "round_up": [
                    "bool"
                ]
            }
        },
        "mean": {
            "name": "mean",
            "location": 247,
            "return": [
                "float"
            ],
            "arguments": {
                "lst": [
                    "List[float]"
                ]
            }
        },
        "std": {
            "name": "std",
            "location": 250,
            "return": [
                "float"
            ],
            "arguments": {
                "lst": [
                    "List[float]"
                ]
            }
        },
        "_TimeCodeData.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TimeCode.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TimeCode.get_stack": {
            "name": "get_stack",
            "location": 42,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TimeCode.get_stats": {
            "name": "get_stats",
            "location": 46,
            "return": [
                "Dict[(Tuple[(str, ...)], List[Tuple[(float, int)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TimeCode.ctx": {
            "name": "ctx",
            "location": 54,
            "return": [
                "Generator[(None, None, None)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "print_start": [
                    "bool"
                ],
                "print_time": [
                    "bool"
                ],
                "run_gc": [
                    "bool"
                ]
            }
        },
        "_TimeCode.make_timed_func": {
            "name": "make_timed_func",
            "location": 128,
            "return": [
                "FunctionType@@Callable[(..., Any)]@@"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "FunctionType@@Callable[(..., Any)]@@"
                ],
                "print_start": [
                    "bool"
                ],
                "print_time": [
                    "bool"
                ],
                "print_args": [
                    "bool"
                ],
                "run_gc": [
                    "bool"
                ]
            }
        },
        "_TimeCode.decor": {
            "name": "decor",
            "location": 148,
            "return": [
                "Callable[([FunctionType], FunctionType)]"
            ],
            "arguments": {
                "self": [],
                "print_start": [
                    "bool"
                ],
                "print_time": [
                    "bool"
                ],
                "print_args": [
                    "bool"
                ],
                "run_gc": [
                    "bool"
                ]
            }
        },
        "_TimeCode.format_stats": {
            "name": "format_stats",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TimeCode.print_stats": {
            "name": "print_stats",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TimeCode.add_stats": {
            "name": "add_stats",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other_stats": [
                    "Dict[(Tuple[(str, ...)], List[Tuple[(float, int)]])]"
                ]
            }
        },
        "_TimeCode.clear": {
            "name": "clear",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TimeCode.make_timed_func.timed_func": {
            "name": "timed_func",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "_TimeCode.decor.make_timed_func": {
            "name": "make_timed_func",
            "location": 168,
            "return": [
                "FunctionType@@Callable[(..., Any)]@@"
            ],
            "arguments": {
                "func": [
                    "FunctionType@@Callable[(..., Any)]@@"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_code/util/__init__.py": {
        "download_retry": {
            "name": "download_retry",
            "location": 10,
            "return": [
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "max_retries": [
                    "int"
                ],
                "cooldown": [
                    "float"
                ]
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/delete.py": {},
    "EDGAR-research-master/edgar_deploy/edgar_deploy/gke_cluster.py": {
        "GKECluster.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "nodecount": [],
                "cache_dir": [],
                "name": [],
                "machine_type": [],
                "disk_size": []
            }
        },
        "GKECluster.__getstate__": {
            "name": "__getstate__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GKECluster.__setstate__": {
            "name": "__setstate__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "GKECluster.provision_cluster": {
            "name": "provision_cluster",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "machine_type": []
            }
        },
        "GKECluster.wait_for_gke": {
            "name": "wait_for_gke",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GKECluster.setup_kube_auth": {
            "name": "setup_kube_auth",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GKECluster.delete": {
            "name": "delete",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/gs_path.py": {},
    "EDGAR-research-master/edgar_deploy/edgar_deploy/kubernetes_deploy.py": {
        "kubernetes_namespace": {
            "name": "kubernetes_namespace",
            "location": 11,
            "return": [],
            "arguments": {
                "kube_api": [],
                "namespace": []
            }
        },
        "setup_kubernetes": {
            "name": "setup_kubernetes",
            "location": 32,
            "return": [],
            "arguments": {
                "kube_api": [],
                "namespace": [],
                "n_workers": [],
                "images": [],
                "public_egg_path": [],
                "run_module": []
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/main.py": {},
    "EDGAR-research-master/edgar_deploy/edgar_deploy/modtime.py": {
        "modtime": {
            "name": "modtime",
            "location": 5,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "modtime_recursive": {
            "name": "modtime_recursive",
            "location": 11,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/prepare_docker_images.py": {
        "prepare_docker_images": {
            "name": "prepare_docker_images",
            "location": 10,
            "return": [],
            "arguments": {
                "cache_dir": []
            }
        },
        "prepare_docker_image": {
            "name": "prepare_docker_image",
            "location": 36,
            "return": [],
            "arguments": {
                "dockerfolder": [],
                "push": [],
                "tag": []
            }
        },
        "prepare_docker_image_cached": {
            "name": "prepare_docker_image_cached",
            "location": 61,
            "return": [],
            "arguments": {
                "dockerfolder": [],
                "cache_dir": [],
                "push": [],
                "tag": []
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/prepare_egg.py": {
        "prepare_egg": {
            "name": "prepare_egg",
            "location": 8,
            "return": [],
            "arguments": {
                "gs_egg_path": []
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/provisioned_resource.py": {
        "test": {
            "name": "test",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "ProvisionedResource.create_or_load": {
            "name": "create_or_load",
            "location": 27,
            "return": [],
            "arguments": {
                "Cls": []
            }
        },
        "ProvisionedResource.close": {
            "name": "close",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProvisionedResource.__enter__": {
            "name": "__enter__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProvisionedResource.__exit__": {
            "name": "__exit__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "ProvisionedResource.present": {
            "name": "present",
            "location": 63,
            "return": [],
            "arguments": {
                "Cls": []
            }
        },
        "ProvisionedResource.load": {
            "name": "load",
            "location": 68,
            "return": [],
            "arguments": {
                "Cls": []
            }
        },
        "ProvisionedResource.save": {
            "name": "save",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProvisionedResource.delete": {
            "name": "delete",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProvisionedResource.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProvisionedResource.get_cache_path": {
            "name": "get_cache_path",
            "location": 97,
            "return": [],
            "arguments": {
                "Cls": [],
                "cache_dir": [],
                "name": []
            }
        },
        "FileProvisionedResource.present": {
            "name": "present",
            "location": 101,
            "return": [],
            "arguments": {
                "Cls": [],
                "cache_dir": [],
                "name": []
            }
        },
        "FileProvisionedResource.load": {
            "name": "load",
            "location": 106,
            "return": [],
            "arguments": {
                "Cls": [],
                "cache_dir": [],
                "name": []
            }
        },
        "FileProvisionedResource.save": {
            "name": "save",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProvisionedResource.delete": {
            "name": "delete",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProvisionedResource.list": {
            "name": "list",
            "location": 127,
            "return": [],
            "arguments": {
                "Cls": [],
                "cache_dir": []
            }
        },
        "FileProvisionedResource.delete_all": {
            "name": "delete_all",
            "location": 134,
            "return": [],
            "arguments": {
                "Cls": []
            }
        },
        "test.CoolResource._create2": {
            "name": "_create2",
            "location": 142,
            "return": [],
            "arguments": {
                "Cls": []
            }
        }
    },
    "EDGAR-research-master/edgar_deploy/edgar_deploy/time_code.py": {},
    "EDGAR-research-master/edgar_deploy/edgar_deploy/utils.py": {
        "omit": {
            "name": "omit",
            "location": 5,
            "return": [],
            "arguments": {
                "dct": [],
                "keys": []
            }
        },
        "flatten_iter": {
            "name": "flatten_iter",
            "location": 10,
            "return": [],
            "arguments": {
                "it": [],
                "level": []
            }
        },
        "flatten1": {
            "name": "flatten1",
            "location": 20,
            "return": [],
            "arguments": {
                "list_": []
            }
        },
        "empty_iter": {
            "name": "empty_iter",
            "location": 25,
            "return": [],
            "arguments": {
                "itera": []
            }
        },
        "exp_backoff": {
            "name": "exp_backoff",
            "location": 37,
            "return": [],
            "arguments": {
                "initial": [],
                "exp": [],
                "max_": []
            }
        },
        "timestamp_to_datetime": {
            "name": "timestamp_to_datetime",
            "location": 48,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "datetime_to_datetime": {
            "name": "datetime_to_datetime",
            "location": 52,
            "return": [],
            "arguments": {
                "datetime_obj": []
            }
        },
        "rand_name": {
            "name": "rand_name",
            "location": 58,
            "return": [],
            "arguments": {
                "n": [],
                "lowercase": [],
                "uppercase": [],
                "digits": [],
                "upperhexdigits": [],
                "lowerhexdigits": [],
                "custom_alphabet": []
            }
        }
    },
    "EDGAR-research-master/stubs/google/__init__.py": {},
    "EDGAR-research-master/stubs/google/cloud/__init__.py": {},
    "EDGAR-research-master/stubs/matplotlib/__init__.py": {},
    "EDGAR-research-master/stubs/nltk/__init__.py": {},
    "EDGAR-research-master/tests/test_bag_store.py": {
        "test_bag_store": {
            "name": "test_bag_store",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeGenericMeta.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "test_bag_store.bag_of_squares": {
            "name": "bag_of_squares",
            "location": 38,
            "return": [
                "Bag[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "EDGAR-research-master/tests/test_cache.py": {
        "test_cache": {
            "name": "test_cache",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache.square1": {
            "name": "square1",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "test_cache.square2": {
            "name": "square2",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "test_cache.square3": {
            "name": "square3",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        }
    },
    "EDGAR-research-master/tests/test_msgpack2.py": {
        "test_msgpack2": {
            "name": "test_msgpack2",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "EDGAR-research-master/tests/test_parse.py": {
        "test_parse_index1": {
            "name": "test_parse_index1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_sgml": {
            "name": "test_parse_sgml",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_html": {
            "name": "test_parse_html",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_text": {
            "name": "test_parse_text",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text2paragraphs": {
            "name": "test_text2paragraphs",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_header": {
            "name": "test_remove_header",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_paragraphs2rf": {
            "name": "test_paragraphs2rf",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "EDGAR-research-master/tests/test_retrieve.py": {
        "test_retrieve": {
            "name": "test_retrieve",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "EDGAR-research-master/tests/test_time_code.py": {
        "f1": {
            "name": "f1",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "f2": {
            "name": "f2",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_code": {
            "name": "test_time_code",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
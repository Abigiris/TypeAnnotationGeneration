{
    "Erasmus-master/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_do_run_migrations": {
            "name": "_do_run_migrations",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [
                    "AsyncConnection"
                ]
            }
        },
        "_do_run_migrations.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 67,
            "return": [],
            "arguments": {
                "context": [
                    "MigrationContext"
                ],
                "revision": [
                    "Any"
                ],
                "directives": [
                    "list[MigrationScript]"
                ]
            }
        }
    },
    "Erasmus-master/alembic/versions/0f780af615ef_add_confess_tables.py": {
        "_get_paragraph_records": {
            "name": "_get_paragraph_records",
            "location": 39,
            "return": [
                "Tuple[(List[Dict[(str, Any)]], List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "data": [
                    "ConfessionJSON"
                ]
            }
        },
        "_get_qa_records": {
            "name": "_get_qa_records",
            "location": 57,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "data": [
                    "QAJSON"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 155,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/43c0cf2239c4_add_canons_of_dort.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/499dad92327d_initial_structure.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/53ed37276d53_add_keach.py": {
        "_get_qa_records": {
            "name": "_get_qa_records",
            "location": 32,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "data": [
                    "QAJSON"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/69e765223549_add_confessions_tables_and_1689.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/7cdaa5513f2d_add_rtl_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/85d51f96a1cd_add_guild_prefs.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/a1dbd23261c3_add_wcf.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/ac322afa9c4d_add_index_to_paragraph_text.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/b00769d6f457_add_article_tables.py": {
        "_get_article_records": {
            "name": "_get_article_records",
            "location": 39,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "data": [
                    "ArticlesJSON"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 97,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/cbef96b83a96_reorganize_confession_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 71,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/dc5428c022bd_make_some_columns_not_nullable.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/e7aff6447fbe_add_books_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/fafb6b454c85_remove_canons_of_dort.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/checks.py": {
        "is_owner": {
            "name": "is_owner",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/config.py": {},
    "Erasmus-master/erasmus/context.py": {},
    "Erasmus-master/erasmus/data.py": {
        "get_book_data": {
            "name": "get_book_data",
            "location": 142,
            "return": [
                "BookDict"
            ],
            "arguments": {}
        },
        "get_books_for_mask": {
            "name": "get_books_for_mask",
            "location": 151,
            "return": [
                "Iterator[BookDict]"
            ],
            "arguments": {}
        },
        "Verse.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "VerseRange.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VerseRange.verses": {
            "name": "verses",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "VerseRange.__str__": {
            "name": "__str__",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "VerseRange.from_string": {
            "name": "from_string",
            "location": 208,
            "return": [
                "VerseRange"
            ],
            "arguments": {}
        },
        "VerseRange.from_string_with_version": {
            "name": "from_string_with_version",
            "location": 215,
            "return": [
                "VerseRange"
            ],
            "arguments": {}
        },
        "VerseRange.from_match": {
            "name": "from_match",
            "location": 222,
            "return": [
                "VerseRange"
            ],
            "arguments": {}
        },
        "VerseRange.get_all_from_string": {
            "name": "get_all_from_string",
            "location": 248,
            "return": [
                "list[(VerseRange | Exception)]"
            ],
            "arguments": {}
        },
        "Passage.citation": {
            "name": "citation",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Passage.__str__": {
            "name": "__str__",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "SearchResults.__iter__": {
            "name": "__iter__",
            "location": 301,
            "return": [
                "Iterator[Passage]"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/erasmus.py": {},
    "Erasmus-master/erasmus/exceptions.py": {
        "BibleNotSupportedError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BookNotUnderstoodError.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BookNotInVersionError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ReferenceNotUnderstoodError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceNotSupportedError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceTimeout.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceLookupTimeout.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceSearchTimeout.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InvalidVersionError.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InvalidConfessionError.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NoSectionError.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NoSectionsError.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/format.py": {
        "int_to_roman": {
            "name": "int_to_roman",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "roman_to_int": {
            "name": "roman_to_int",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/help.py": {
        "HelpCommand._get_command_title": {
            "name": "_get_command_title",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "HelpCommand.add_command_formatting": {
            "name": "add_command_formatting",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/json.py": {
        "get": {
            "name": "get",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "has": {
            "name": "has",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/page_source.py": {
        "BasePages.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PageSource.needs_pagination": {
            "name": "needs_pagination",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "PageSource.get_max_pages": {
            "name": "get_max_pages",
            "location": 75,
            "return": [
                "(int | None)"
            ],
            "arguments": {}
        },
        "PageSource.get_total": {
            "name": "get_total",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ListPageSource.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ListPageSource.needs_pagination": {
            "name": "needs_pagination",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListPageSource.get_max_pages": {
            "name": "get_max_pages",
            "location": 121,
            "return": [
                "(int | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListPageSource.get_total": {
            "name": "get_total",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncCallback.__call__": {
            "name": "__call__",
            "location": 150,
            "return": [
                "(Awaitable[Page[T_co]] | AsyncPage[T_co])"
            ],
            "arguments": {}
        },
        "AsyncPageSource.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AsyncPageSource.needs_pagination": {
            "name": "needs_pagination",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "AsyncPageSource.get_max_pages": {
            "name": "get_max_pages",
            "location": 195,
            "return": [
                "(int | None)"
            ],
            "arguments": {}
        },
        "AsyncPageSource.get_total": {
            "name": "get_total",
            "location": 198,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "FieldPageSource.get_field_values": {
            "name": "get_field_values",
            "location": 253,
            "return": [
                "Iterable[tuple[(str, str)]]"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/run.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/service_manager.py": {
        "ServiceManager.__contains__": {
            "name": "__contains__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ServiceManager.__len__": {
            "name": "__len__",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ServiceManager.from_config": {
            "name": "from_config",
            "location": 63,
            "return": [
                "ServiceManager"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/types.py": {
        "Bible.command": {
            "name": "command",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.name": {
            "name": "name",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.abbr": {
            "name": "abbr",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.service": {
            "name": "service",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.service_version": {
            "name": "service_version",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.rtl": {
            "name": "rtl",
            "location": 38,
            "return": [
                "(bool | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.books": {
            "name": "books",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Erasmus-master/erasmus/ui_pages.py": {
        "PagesModal.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pages": [
                    "'UIPages[Any]'"
                ]
            }
        },
        "UIPages.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UIPages.allowed_user_ids": {
            "name": "allowed_user_ids",
            "location": 80,
            "return": [
                "set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UIPages.has_embed_permission": {
            "name": "has_embed_permission",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UIPages.fill_items": {
            "name": "fill_items",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UIPages._update_labels": {
            "name": "_update_labels",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/utils.py": {
        "_get_passage_text": {
            "name": "_get_passage_text",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Option.key": {
            "name": "key",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.name": {
            "name": "name",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.matches": {
            "name": "matches",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Option.choice": {
            "name": "choice",
            "location": 78,
            "return": [
                "app_commands.Choice[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoCompleter.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoCompleter.add": {
            "name": "add",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.update": {
            "name": "update",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.clear": {
            "name": "clear",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoCompleter.discard": {
            "name": "discard",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.remove": {
            "name": "remove",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.choices": {
            "name": "choices",
            "location": 109,
            "return": [
                "list[app_commands.Choice[str]]"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/__init__.py": {},
    "Erasmus-master/erasmus/cogs/admin.py": {
        "_RunError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "formatted": [
                    "str"
                ]
            }
        },
        "_EvalModal.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin": [
                    "Admin"
                ]
            }
        },
        "_EvalModal._cleanup_code": {
            "name": "_cleanup_code",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        }
    },
    "Erasmus-master/erasmus/cogs/bible.py": {},
    "Erasmus-master/erasmus/cogs/confession.py": {},
    "Erasmus-master/erasmus/cogs/creeds.py": {},
    "Erasmus-master/erasmus/cogs/misc.py": {
        "get_about_embed": {
            "name": "get_about_embed",
            "location": 51,
            "return": [
                "Embed"
            ],
            "arguments": {
                "bot": [
                    "Erasmus"
                ]
            }
        },
        "InviteView.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AboutView.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/cogs/__init__.py": {},
    "Erasmus-master/erasmus/db/base.py": {},
    "Erasmus-master/erasmus/db/bible.py": {},
    "Erasmus-master/erasmus/db/confession.py": {
        "_search_columns": {
            "name": "_search_columns",
            "location": 29,
            "return": [
                "ColumnElement[Boolean]"
            ],
            "arguments": {}
        },
        "ConfessionTypeEnum.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "NumberingTypeEnum.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Confession.type": {
            "name": "type",
            "location": 354,
            "return": [
                "ConfessionTypeEnum"
            ],
            "arguments": {}
        },
        "Confession.numbering": {
            "name": "numbering",
            "location": 358,
            "return": [
                "NumberingTypeEnum"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/db/__init__.py": {},
    "Erasmus-master/erasmus/services/apibible.py": {
        "ApiBible.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ApiBible.__get_passage_id": {
            "name": "__get_passage_id",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ApiBible.__transform_verse": {
            "name": "__transform_verse",
            "location": 66,
            "return": [
                "Passage"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/base_service.py": {
        "BaseService.replace_special_escapes": {
            "name": "replace_special_escapes",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/biblegateway.py": {
        "BibleGateway.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BibleGateway.__transform_verse_node": {
            "name": "__transform_verse_node",
            "location": 30,
            "return": [
                "Passage"
            ],
            "arguments": {}
        },
        "BibleGateway.search.mapper": {
            "name": "mapper",
            "location": 138,
            "return": [
                "Passage"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/unbound.py": {
        "Unbound.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/__init__.py": {},
    "Erasmus-master/stubs/bs4/dammit.py": {
        "chardet_dammit": {
            "name": "chardet_dammit",
            "location": 7,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "EntitySubstitution.quoted_attribute_value": {
            "name": "quoted_attribute_value",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ]
            }
        },
        "EntitySubstitution.substitute_xml": {
            "name": "substitute_xml",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ],
                "make_quoted_attribute": [
                    "bool"
                ]
            }
        },
        "EntitySubstitution.substitute_xml_containing_entities": {
            "name": "substitute_xml_containing_entities",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ],
                "make_quoted_attribute": [
                    "bool"
                ]
            }
        },
        "EntitySubstitution.substitute_html": {
            "name": "substitute_html",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "s": [
                    "str"
                ]
            }
        },
        "EncodingDetector.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "AnyStr"
                ],
                "override_encodings": [
                    "Iterable[str]"
                ],
                "is_html": [
                    "bool"
                ],
                "exclude_encodings": [
                    "Iterable[str]"
                ]
            }
        },
        "EncodingDetector.encodings": {
            "name": "encodings",
            "location": 47,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingDetector.strip_byte_order_mark": {
            "name": "strip_byte_order_mark",
            "location": 56,
            "return": [
                "tuple[((str | bytes), (str | None))]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "(str | bytes)"
                ]
            }
        },
        "EncodingDetector.find_declared_encoding": {
            "name": "find_declared_encoding",
            "location": 60,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "cls": [],
                "markup": [
                    "(str | bytes)"
                ],
                "is_html": [
                    "bool"
                ],
                "search_entire_document": [
                    "bool"
                ]
            }
        },
        "UnicodeDammit.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "AnyStr"
                ],
                "override_encodings": [
                    "Iterable[str]"
                ],
                "smart_quotes_to": [
                    "(Literal[('ascii', 'html', 'xml')] | None)"
                ],
                "is_html": [
                    "bool"
                ],
                "exclude_encodings": [
                    "Iterable[str]"
                ]
            }
        },
        "UnicodeDammit.declared_html_encoding": {
            "name": "declared_html_encoding",
            "location": 88,
            "return": [
                "(str | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnicodeDammit.find_codec": {
            "name": "find_codec",
            "location": 89,
            "return": [
                "(CodecInfo | None)"
            ],
            "arguments": {
                "self": [],
                "charset": [
                    "str"
                ]
            }
        },
        "UnicodeDammit.detwingle": {
            "name": "detwingle",
            "location": 97,
            "return": [
                "(str | bytes)"
            ],
            "arguments": {
                "cls": [],
                "in_bytes": [
                    "AnyStr"
                ],
                "main_encoding": [
                    "str"
                ],
                "embedded_encoding": [
                    "str"
                ]
            }
        }
    },
    "Erasmus-master/stubs/bs4/element.py": {
        "_StrainerCallable.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_FindOneMethod.__call__": {
            "name": "__call__",
            "location": 95,
            "return": [
                "((Tag | NavigableString) | None)"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "((SoupStrainer | _TagFilterType) | None)"
                ],
                "attrs": [
                    "((_TagAttrFilterType | Mapping[(str, (_TagAttrFilterType | None))]) | None)"
                ],
                "text": [
                    "(_TagStringFilterType | None)"
                ]
            }
        },
        "_FindAllMethod.__call__": {
            "name": "__call__",
            "location": 153,
            "return": [
                "(ResultSet[NavigableString] | ResultSet[Tag])"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "((SoupStrainer | _TagFilterType) | None)"
                ],
                "attrs": [
                    "((_TagAttrFilterType | Mapping[(str, (_TagAttrFilterType | None))]) | None)"
                ],
                "text": [
                    "(_TagStringFilterType | None)"
                ],
                "limit": [
                    "(int | None)"
                ]
            }
        },
        "PageElement.setup": {
            "name": "setup",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "(Tag | None)"
                ],
                "previous_element": [
                    "(PageElement | None)"
                ],
                "next_element": [
                    "(PageElement | None)"
                ],
                "previous_sibling": [
                    "(PageElement | None)"
                ],
                "next_sibling": [
                    "(PageElement | None)"
                ]
            }
        },
        "PageElement.format_string": {
            "name": "format_string",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "formatter": [
                    "(Formatter | None)"
                ]
            }
        },
        "PageElement.formatter_for_name": {
            "name": "formatter_for_name",
            "location": 203,
            "return": [
                "Formatter"
            ],
            "arguments": {
                "self": [],
                "formatter": [
                    "str"
                ]
            }
        },
        "PageElement.replace_with": {
            "name": "replace_with",
            "location": 204,
            "return": [
                "(Self | None)"
            ],
            "arguments": {
                "self": [],
                "replace_with": [
                    "(str | PageElement)"
                ]
            }
        },
        "PageElement.unwrap": {
            "name": "unwrap",
            "location": 206,
            "return": [
                "Self"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.wrap": {
            "name": "wrap",
            "location": 209,
            "return": [
                "_PE"
            ],
            "arguments": {
                "self": [],
                "wrap_inside": [
                    "_PE"
                ]
            }
        },
        "PageElement.extract": {
            "name": "extract",
            "location": 210,
            "return": [
                "Self"
            ],
            "arguments": {
                "self": [],
                "_self_index": [
                    "(int | None)"
                ]
            }
        },
        "PageElement.insert": {
            "name": "insert",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ],
                "new_child": [
                    "PageElement"
                ]
            }
        },
        "PageElement.append": {
            "name": "append",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "PageElement"
                ]
            }
        },
        "PageElement.extend": {
            "name": "extend",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "(PageElement | Iterable[PageElement])"
                ]
            }
        },
        "PageElement.insert_before": {
            "name": "insert_before",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.insert_after": {
            "name": "insert_after",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.find_parent": {
            "name": "find_parent",
            "location": 235,
            "return": [
                "(Tag | None)"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "((SoupStrainer | _TagFilterType) | None)"
                ],
                "attrs": [
                    "((_TagAttrFilterType | Mapping[(str, (_TagAttrFilterType | None))]) | None)"
                ]
            }
        },
        "PageElement.find_parents": {
            "name": "find_parents",
            "location": 244,
            "return": [
                "ResultSet[Tag]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "((SoupStrainer | _TagFilterType) | None)"
                ],
                "attrs": [
                    "((_TagAttrFilterType | Mapping[(str, (_TagAttrFilterType | None))]) | None)"
                ],
                "limit": [
                    "(int | None)"
                ]
            }
        },
        "PageElement.next": {
            "name": "next",
            "location": 256,
            "return": [
                "(PageElement | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous": {
            "name": "previous",
            "location": 258,
            "return": [
                "(PageElement | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_elements": {
            "name": "next_elements",
            "location": 260,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_siblings": {
            "name": "next_siblings",
            "location": 262,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_elements": {
            "name": "previous_elements",
            "location": 264,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_siblings": {
            "name": "previous_siblings",
            "location": 266,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.parents": {
            "name": "parents",
            "location": 268,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.decomposed": {
            "name": "decomposed",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.nextGenerator": {
            "name": "nextGenerator",
            "location": 271,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.nextSiblingGenerator": {
            "name": "nextSiblingGenerator",
            "location": 272,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previousGenerator": {
            "name": "previousGenerator",
            "location": 273,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previousSiblingGenerator": {
            "name": "previousSiblingGenerator",
            "location": 274,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageElement.parentGenerator": {
            "name": "parentGenerator",
            "location": 275,
            "return": [
                "Iterable[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "AnyStr"
                ]
            }
        },
        "NavigableString.string": {
            "name": "string",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.output_ready": {
            "name": "output_ready",
            "location": 284,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "formatter": [
                    "(str | Formatter)"
                ]
            }
        },
        "NavigableString.name": {
            "name": "name",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreformattedString.output_ready": {
            "name": "output_ready",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "formatter": [
                    "((str | Formatter) | None)"
                ]
            }
        },
        "Doctype.for_name_and_ids": {
            "name": "for_name_and_ids",
            "location": 315,
            "return": [
                "Doctype"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "pub_id": [
                    "str"
                ],
                "system_id": [
                    "str"
                ]
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "(BeautifulSoup | None)"
                ],
                "builder": [
                    "(TreeBuilder | None)"
                ],
                "name": [
                    "(str | None)"
                ],
                "namespace": [
                    "(str | None)"
                ],
                "prefix": [
                    "(str | None)"
                ],
                "attrs": [
                    "(Mapping[(str, (str | list[str]))] | None)"
                ],
                "parent": [
                    "(Tag | None)"
                ],
                "previous": [
                    "(PageElement | None)"
                ],
                "is_xml": [
                    "(bool | None)"
                ],
                "sourceline": [
                    "(int | None)"
                ],
                "sourcepos": [
                    "(int | None)"
                ],
                "can_be_empty_element": [
                    "(bool | None)"
                ],
                "cdata_list_attributes": [
                    "(bool | None)"
                ],
                "preserve_whitespace_tags": [
                    "(bool | None)"
                ]
            }
        },
        "Tag.is_empty_element": {
            "name": "is_empty_element",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.strings": {
            "name": "strings",
            "location": 361,
            "return": [
                "Iterator[(NavigableString | CData)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.stripped_strings": {
            "name": "stripped_strings",
            "location": 363,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.get_text": {
            "name": "get_text",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "separator": [
                    "str"
                ],
                "strip": [
                    "bool"
                ],
                "types": [
                    "Container[type[PageElement]]"
                ]
            }
        },
        "Tag.text": {
            "name": "text",
            "location": 372,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.decompose": {
            "name": "decompose",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.clear": {
            "name": "clear",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decompose": [
                    "bool"
                ]
            }
        },
        "Tag.smooth": {
            "name": "smooth",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.index": {
            "name": "index",
            "location": 376,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "PageElement"
                ]
            }
        },
        "Tag.get": {
            "name": "get",
            "location": 380,
            "return": [
                "((str | list[str]) | _T)"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "_T"
                ]
            }
        },
        "Tag.get_attribute_list": {
            "name": "get_attribute_list",
            "location": 384,
            "return": [
                "list[(str | _T)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "_T"
                ]
            }
        },
        "Tag.has_attr": {
            "name": "has_attr",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Tag.__hash__": {
            "name": "__hash__",
            "location": 386,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__getitem__": {
            "name": "__getitem__",
            "location": 387,
            "return": [
                "(str | list[str])"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Tag.__iter__": {
            "name": "__iter__",
            "location": 388,
            "return": [
                "Iterator[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__len__": {
            "name": "__len__",
            "location": 389,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__contains__": {
            "name": "__contains__",
            "location": 390,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        },
        "Tag.__bool__": {
            "name": "__bool__",
            "location": 391,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__setitem__": {
            "name": "__setitem__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "(str | list[str])"
                ]
            }
        },
        "Tag.__delitem__": {
            "name": "__delitem__",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Tag.__getattr__": {
            "name": "__getattr__",
            "location": 394,
            "return": [
                "(Tag | None)"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "Tag.__eq__": {
            "name": "__eq__",
            "location": 395,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Tag.__ne__": {
            "name": "__ne__",
            "location": 396,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Tag.encode": {
            "name": "encode",
            "location": 397,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ],
                "indent_level": [
                    "(int | None)"
                ],
                "formatter": [
                    "(str | Formatter)"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "Tag.decode": {
            "name": "decode",
            "location": 404,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indent_level": [
                    "(int | None)"
                ],
                "eventual_encoding": [
                    "str"
                ],
                "formatter": [
                    "(str | Formatter)"
                ]
            }
        },
        "Tag.prettify": {
            "name": "prettify",
            "location": 417,
            "return": [
                "(str | bytes)"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "(str | None)"
                ],
                "formatter": [
                    "(str | Formatter)"
                ]
            }
        },
        "Tag.decode_contents": {
            "name": "decode_contents",
            "location": 420,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indent_level": [
                    "(int | None)"
                ],
                "eventual_encoding": [
                    "str"
                ],
                "formatter": [
                    "(str | Formatter)"
                ]
            }
        },
        "Tag.encode_contents": {
            "name": "encode_contents",
            "location": 426,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "indent_level": [
                    "(int | None)"
                ],
                "encoding": [
                    "str"
                ],
                "formatter": [
                    "(str | Formatter)"
                ]
            }
        },
        "Tag.renderContents": {
            "name": "renderContents",
            "location": 432,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ],
                "prettyPrint": [
                    "bool"
                ],
                "indentLevel": [
                    "int"
                ]
            }
        },
        "Tag.find": {
            "name": "find",
            "location": 479,
            "return": [
                "((Tag | NavigableString) | None)"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "((SoupStrainer | _TagFilterType) | None)"
                ],
                "attrs": [
                    "((_TagAttrFilterType | Mapping[(str, (_TagAttrFilterType | None))]) | None)"
                ],
                "recursive": [
                    "bool"
                ],
                "text": [
                    "(_TagStringFilterType | None)"
                ]
            }
        },
        "Tag.find_all": {
            "name": "find_all",
            "location": 538,
            "return": [
                "(ResultSet[NavigableString] | ResultSet[Tag])"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "((SoupStrainer | _TagFilterType) | None)"
                ],
                "attrs": [
                    "((_TagAttrFilterType | Mapping[(str, (_TagAttrFilterType | None))]) | None)"
                ],
                "recursive": [
                    "bool"
                ],
                "text": [
                    "(_TagStringFilterType | None)"
                ],
                "limit": [
                    "(int | None)"
                ]
            }
        },
        "Tag.children": {
            "name": "children",
            "location": 555,
            "return": [
                "Iterator[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.descendants": {
            "name": "descendants",
            "location": 557,
            "return": [
                "Generator[(PageElement, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.select_one": {
            "name": "select_one",
            "location": 558,
            "return": [
                "(Tag | None)"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "namespaces": [
                    "(Mapping[(str, str)] | None)"
                ]
            }
        },
        "Tag.select": {
            "name": "select",
            "location": 564,
            "return": [
                "ResultSet[Tag]"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "namespaces": [
                    "(Mapping[(str, str)] | None)"
                ],
                "limit": [
                    "(int | None)"
                ]
            }
        },
        "Tag.childGenerator": {
            "name": "childGenerator",
            "location": 571,
            "return": [
                "Iterator[PageElement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.recursiveChildGenerator": {
            "name": "recursiveChildGenerator",
            "location": 572,
            "return": [
                "Generator[(PageElement, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.has_key": {
            "name": "has_key",
            "location": 573,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "SoupStrainer.__init__": {
            "name": "__init__",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "(_TagFilterType | None)"
                ],
                "attrs": [
                    "((_TagAttrFilterType | Mapping[(str, (_TagAttrFilterType | None))]) | None)"
                ],
                "text": [
                    "(_TagStringFilterType | None)"
                ]
            }
        },
        "SoupStrainer.search_tag": {
            "name": "search_tag",
            "location": 588,
            "return": [
                "(PageElement | None)"
            ],
            "arguments": {
                "self": [],
                "markup_name": [
                    "((str | Tag) | None)"
                ],
                "markup_attrs": [
                    "dict[(str, (list[str] | tuple[(str, ...)]))]"
                ]
            }
        },
        "SoupStrainer.search": {
            "name": "search",
            "location": 594,
            "return": [
                "((Tag | NavigableString) | None)"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "((str | Tag) | Iterable[(str | Tag)])"
                ]
            }
        },
        "ResultSet.__init__": {
            "name": "__init__",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "SoupStrainer"
                ],
                "result": [
                    "Iterable[_T]"
                ]
            }
        },
        "ResultSet.__getattr__": {
            "name": "__getattr__",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        }
    },
    "Erasmus-master/stubs/bs4/formatter.py": {
        "_EntitySubstitutionCallback.__call__": {
            "name": "__call__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Formatter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "(Literal[('html', 'xml')] | None)"
                ],
                "entity_substitution": [
                    "(_EntitySubstitutionCallback | None)"
                ],
                "void_element_close_prefix": [
                    "str"
                ],
                "cdata_containing_tags": [
                    "(list[str] | None)"
                ]
            }
        },
        "Formatter.substitute": {
            "name": "substitute",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "str"
                ]
            }
        },
        "Formatter.attribute_value": {
            "name": "attribute_value",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Formatter.attributes": {
            "name": "attributes",
            "location": 29,
            "return": [
                "list[tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Tag"
                ]
            }
        },
        "HTMLFormatter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity_substitution": [
                    "(_EntitySubstitutionCallback | None)"
                ],
                "void_element_close_prefix": [
                    "str"
                ],
                "cdata_containing_tags": [
                    "(list[str] | None)"
                ]
            }
        },
        "XMLFormatter.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity_substitution": [
                    "(_EntitySubstitutionCallback | None)"
                ],
                "void_element_close_prefix": [
                    "str"
                ],
                "cdata_containing_tags": [
                    "(list[str] | None)"
                ]
            }
        }
    },
    "Erasmus-master/stubs/bs4/__init__.py": {
        "BeautifulSoup.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "(((str | bytes) | SupportsRead[str]) | SupportsRead[bytes])"
                ],
                "features": [
                    "((str | list[str]) | None)"
                ],
                "builder": [
                    "((TreeBuilder | type[TreeBuilder]) | None)"
                ],
                "parse_only": [
                    "(SoupStrainer | None)"
                ],
                "from_encoding": [
                    "(str | None)"
                ],
                "exclude_encodings": [
                    "(list[str] | None)"
                ],
                "element_classes": [
                    "(Mapping[(type[Any], type[Any])] | None)"
                ]
            }
        },
        "BeautifulSoup.reset": {
            "name": "reset",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.new_tag": {
            "name": "new_tag",
            "location": 61,
            "return": [
                "Tag"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "namespace": [
                    "(str | None)"
                ],
                "nsprefix": [
                    "(str | None)"
                ],
                "attrs": [
                    "Mapping[(str, str)]"
                ],
                "sourceline": [
                    "(int | None)"
                ],
                "sourcepos": [
                    "(int | None)"
                ]
            }
        },
        "BeautifulSoup.string_container": {
            "name": "string_container",
            "location": 71,
            "return": [
                "type[Any]"
            ],
            "arguments": {
                "self": [],
                "base_class": [
                    "(type[Any] | None)"
                ]
            }
        },
        "BeautifulSoup.new_string": {
            "name": "new_string",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "subclass": [
                    "(type[Any] | None)"
                ]
            }
        },
        "BeautifulSoup.popTag": {
            "name": "popTag",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.pushTag": {
            "name": "pushTag",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Any"
                ]
            }
        },
        "BeautifulSoup.endData": {
            "name": "endData",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "containerClass": [
                    "(Any | None)"
                ]
            }
        },
        "BeautifulSoup.object_was_parsed": {
            "name": "object_was_parsed",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ],
                "parent": [
                    "(Any | None)"
                ],
                "most_recent_element": [
                    "(Any | None)"
                ]
            }
        },
        "BeautifulSoup.handle_starttag": {
            "name": "handle_starttag",
            "location": 82,
            "return": [
                "(Tag | None)"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "namespace": [
                    "(str | None)"
                ],
                "nsprefix": [
                    "(str | None)"
                ],
                "attrs": [
                    "Mapping[(str, str)]"
                ],
                "sourceline": [
                    "(int | None)"
                ],
                "sourcepos": [
                    "(int | None)"
                ]
            }
        },
        "BeautifulSoup.handle_endtag": {
            "name": "handle_endtag",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "nsprefix": [
                    "(str | None)"
                ]
            }
        },
        "BeautifulSoup.handle_data": {
            "name": "handle_data",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "BeautifulSoup.decode": {
            "name": "decode",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pretty_print": [
                    "bool"
                ],
                "eventual_encoding": [
                    "(str | None)"
                ],
                "formatter": [
                    "str"
                ]
            }
        },
        "BeautifulStoneSoup.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "(((str | bytes) | SupportsRead[str]) | SupportsRead[bytes])"
                ],
                "features": [
                    "((str | list[str]) | None)"
                ],
                "builder": [
                    "(TreeBuilder | None)"
                ],
                "parse_only": [
                    "(SoupStrainer | None)"
                ],
                "from_encoding": [
                    "(str | None)"
                ],
                "exclude_encodings": [
                    "(list[str] | None)"
                ],
                "element_classes": [
                    "(Mapping[(type[Any], type[Any])] | None)"
                ]
            }
        }
    },
    "Erasmus-master/stubs/bs4/builder/__init__.py": {
        "TreeBuilderRegistry.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilderRegistry.register": {
            "name": "register",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "treebuilder_class": [
                    "type[TreeBuilder]"
                ]
            }
        },
        "TreeBuilderRegistry.lookup": {
            "name": "lookup",
            "location": 12,
            "return": [
                "(type[TreeBuilder] | None)"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "multi_valued_attributes": [
                    "((_UseDefault | None) | dict[(str, Container[str])])"
                ],
                "preserve_whitespace_tags": [
                    "((_UseDefault | None) | Container[str])"
                ],
                "store_line_numbers": [
                    "(_UseDefault | bool)"
                ],
                "string_containers": [
                    "(_UseDefault | dict[(str, type[Any])])"
                ]
            }
        },
        "TreeBuilder.initialize_soup": {
            "name": "initialize_soup",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "soup": [
                    "BeautifulSoup"
                ]
            }
        },
        "TreeBuilder.reset": {
            "name": "reset",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.can_be_empty_element": {
            "name": "can_be_empty_element",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag_name": [
                    "str"
                ]
            }
        },
        "TreeBuilder.feed": {
            "name": "feed",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "str"
                ]
            }
        },
        "TreeBuilder.prepare_markup": {
            "name": "prepare_markup",
            "location": 46,
            "return": [
                "Iterator[tuple[(str, (str | None), (str | None), bool)]]"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "str"
                ],
                "user_specified_encoding": [
                    "(str | None)"
                ],
                "document_declared_encoding": [
                    "(str | None)"
                ],
                "exclude_encodings": [
                    "(list[str] | None)"
                ]
            }
        },
        "TreeBuilder.test_fragment_to_document": {
            "name": "test_fragment_to_document",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "str"
                ]
            }
        },
        "TreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Tag"
                ]
            }
        },
        "SAXTreeBuilder.close": {
            "name": "close",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.startElement": {
            "name": "startElement",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "SAXTreeBuilder.endElement": {
            "name": "endElement",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SAXTreeBuilder.startElementNS": {
            "name": "startElementNS",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nsTuple": [
                    "Any"
                ],
                "nodeName": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "SAXTreeBuilder.endElementNS": {
            "name": "endElementNS",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nsTuple": [
                    "Any"
                ],
                "nodeName": [
                    "Any"
                ]
            }
        },
        "SAXTreeBuilder.startPrefixMapping": {
            "name": "startPrefixMapping",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Any"
                ],
                "nodeValue": [
                    "Any"
                ]
            }
        },
        "SAXTreeBuilder.endPrefixMapping": {
            "name": "endPrefixMapping",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Any"
                ]
            }
        },
        "SAXTreeBuilder.characters": {
            "name": "characters",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "SAXTreeBuilder.startDocument": {
            "name": "startDocument",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.endDocument": {
            "name": "endDocument",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Tag"
                ]
            }
        }
    },
    "Erasmus-master/tests/conftest.py": {
        "vcr_config": {
            "name": "vcr_config",
            "location": 14,
            "return": [
                "dict[(str, list[str])]"
            ],
            "arguments": {}
        },
        "fixture_MockBible": {
            "name": "fixture_MockBible",
            "location": 29,
            "return": [
                "type[MockBible]"
            ],
            "arguments": {}
        },
        "mock_response": {
            "name": "mock_response",
            "location": 34,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "mocker": [
                    "pytest_mock.MockerFixture"
                ]
            }
        },
        "mock_client_session": {
            "name": "mock_client_session",
            "location": 42,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "mocker": [
                    "pytest_mock.MockerFixture"
                ],
                "mock_response": [
                    "Any"
                ]
            }
        },
        "mock_aiohttp": {
            "name": "mock_aiohttp",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pytest_mock.MockerFixture"
                ],
                "mock_client_session": [
                    "MagicMock"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_context.py": {
        "MockUser.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.mock_context_send": {
            "name": "mock_context_send",
            "location": 46,
            "return": [
                "unittest.mock.AsyncMock"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "TestContext.string_view": {
            "name": "string_view",
            "location": 52,
            "return": [
                "StringView"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Erasmus-master/tests/test_data.py": {
        "TestVerse.test_init": {
            "name": "test_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerse.test__str__": {
            "name": "test__str__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerse.test__eq__": {
            "name": "test__eq__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verse": [
                    "Verse"
                ],
                "expected": [
                    "(Verse | None)"
                ]
            }
        },
        "TestVerse.test__ne__": {
            "name": "test__ne__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verse": [
                    "Verse"
                ],
                "expected": [
                    "Any"
                ]
            }
        },
        "TestVerseRange.test_init": {
            "name": "test_init",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerseRange.test__str__": {
            "name": "test__str__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "VerseRange"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestVerseRange.test__eq__": {
            "name": "test__eq__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "VerseRange"
                ],
                "expected": [
                    "(VerseRange | None)"
                ]
            }
        },
        "TestVerseRange.test__ne__": {
            "name": "test__ne__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "VerseRange"
                ],
                "expected": [
                    "Any"
                ]
            }
        },
        "TestVerseRange.test_from_string": {
            "name": "test_from_string",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage_str": [
                    "str"
                ],
                "expected": [
                    "(str | None)"
                ]
            }
        },
        "TestVerseRange.test_get_all_from_string_optional": {
            "name": "test_get_all_from_string_optional",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage_str": [
                    "str"
                ],
                "only_bracketed": [
                    "bool"
                ],
                "expected": [
                    "list[list[VerseRange]]"
                ]
            }
        },
        "TestVerseRange.test_from_string_raises": {
            "name": "test_from_string_raises",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage_str": [
                    "str"
                ]
            }
        },
        "TestPassage.test_init": {
            "name": "test_init",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassage.test__str__": {
            "name": "test__str__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "Passage"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestPassage.test__eq__": {
            "name": "test__eq__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "Passage"
                ],
                "expected": [
                    "(Passage | None)"
                ]
            }
        },
        "TestPassage.test__ne__": {
            "name": "test__ne__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "Passage"
                ],
                "expected": [
                    "Any"
                ]
            }
        },
        "TestSearchResults.test_init": {
            "name": "test_init",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchResults.test__eq__": {
            "name": "test__eq__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "SearchResults"
                ],
                "expected": [
                    "(SearchResults | None)"
                ]
            }
        },
        "TestSearchResults.test__ne__": {
            "name": "test__ne__",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "SearchResults"
                ],
                "expected": [
                    "Any"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_erasmus.py": {
        "MockUser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockCommand.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MockContext.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "MockCommand"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_json.py": {
        "test_get": {
            "name": "test_get",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[(str, Any)]"
                ],
                "key": [
                    "str"
                ],
                "expected": [
                    "Any"
                ]
            }
        },
        "test_jsonobject_has": {
            "name": "test_jsonobject_has",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[(str, Any)]"
                ],
                "key": [
                    "str"
                ],
                "expected": [
                    "Any"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_service_manager.py": {
        "MockService.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.MockerFixture"
                ]
            }
        },
        "MockBible.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.services": {
            "name": "services",
            "location": 48,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.MockerFixture"
                ]
            }
        },
        "TestServiceManager.service_one": {
            "name": "service_one",
            "location": 60,
            "return": [
                "Service"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.MockerFixture"
                ]
            }
        },
        "TestServiceManager.service_two": {
            "name": "service_two",
            "location": 64,
            "return": [
                "Service"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.MockerFixture"
                ]
            }
        },
        "TestServiceManager.config": {
            "name": "config",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.bible1": {
            "name": "bible1",
            "location": 72,
            "return": [
                "Bible"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.bible2": {
            "name": "bible2",
            "location": 82,
            "return": [
                "Bible"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.test_from_config": {
            "name": "test_from_config",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.MockerFixture"
                ],
                "services": [
                    "dict[(str, Any)]"
                ],
                "config": [
                    "Any"
                ],
                "mock_client_session": [
                    "aiohttp.ClientSession"
                ]
            }
        },
        "TestServiceManager.test_container_methods": {
            "name": "test_container_methods",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Any"
                ],
                "mock_client_session": [
                    "aiohttp.ClientSession"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_utils.py": {
        "mock_send_embed": {
            "name": "mock_send_embed",
            "location": 17,
            "return": [
                "AsyncMock"
            ],
            "arguments": {
                "mocker": [
                    "pytest_mock.MockerFixture"
                ]
            }
        },
        "MockOption.matches": {
            "name": "matches",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "MockOption.choice": {
            "name": "choice",
            "location": 99,
            "return": [
                "app_commands.Choice[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_init": {
            "name": "test_init",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_add": {
            "name": "test_add",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_update": {
            "name": "test_update",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_clear": {
            "name": "test_clear",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_discard": {
            "name": "test_discard",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_remove": {
            "name": "test_remove",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_choices": {
            "name": "test_choices",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Erasmus-master/tests/__init__.py": {},
    "Erasmus-master/tests/cogs/test_bible.py": {
        "mock_bot": {
            "name": "mock_bot",
            "location": 24,
            "return": [
                "Mock"
            ],
            "arguments": {
                "mocker": [
                    "MockerFixture"
                ]
            }
        },
        "TestBible.mock_service_manager": {
            "name": "mock_service_manager",
            "location": 34,
            "return": [
                "MockServiceManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBible.test_instantiate": {
            "name": "test_instantiate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": [
                    "Erasmus"
                ],
                "mock_service_manager": [
                    "ServiceManager"
                ]
            }
        },
        "TestBibleAppCommands.mock_service_manager": {
            "name": "mock_service_manager",
            "location": 46,
            "return": [
                "MockServiceManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBibleAppCommands.test_instantiate": {
            "name": "test_instantiate",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": [
                    "Erasmus"
                ],
                "mock_service_manager": [
                    "ServiceManager"
                ]
            }
        }
    },
    "Erasmus-master/tests/cogs/test_confession.py": {
        "TestConfession.mock_bot": {
            "name": "mock_bot",
            "location": 15,
            "return": [
                "MockBot"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfession.test_instantiate": {
            "name": "test_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": [
                    "Erasmus"
                ]
            }
        }
    },
    "Erasmus-master/tests/cogs/test_creeds.py": {
        "TestCreeds.mock_bot": {
            "name": "mock_bot",
            "location": 15,
            "return": [
                "MockBot"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreeds.test_instantiate": {
            "name": "test_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": [
                    "Erasmus"
                ]
            }
        }
    },
    "Erasmus-master/tests/cogs/test_misc.py": {
        "TestMisc.mock_bot": {
            "name": "mock_bot",
            "location": 15,
            "return": [
                "MockBot"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMisc.test_instantiate": {
            "name": "test_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": [
                    "Erasmus"
                ]
            }
        }
    },
    "Erasmus-master/tests/cogs/__init__.py": {},
    "Erasmus-master/tests/services/test_apibible.py": {
        "TestApiBible.search_data": {
            "name": "search_data",
            "location": 252,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_pytest.fixtures.SubRequest"
                ]
            }
        },
        "TestApiBible.passage_data": {
            "name": "passage_data",
            "location": 281,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_pytest.fixtures.SubRequest"
                ]
            }
        },
        "TestApiBible.config": {
            "name": "config",
            "location": 285,
            "return": [
                "dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiBible.default_version": {
            "name": "default_version",
            "location": 295,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiBible.default_abbr": {
            "name": "default_abbr",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiBible.service": {
            "name": "service",
            "location": 303,
            "return": [
                "Service"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Any"
                ],
                "aiohttp_client_session": [
                    "aiohttp.ClientSession"
                ]
            }
        }
    },
    "Erasmus-master/tests/services/test_biblegateway.py": {
        "TestBibleGateway.search_data": {
            "name": "search_data",
            "location": 261,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_pytest.fixtures.SubRequest"
                ]
            }
        },
        "TestBibleGateway.passage_data": {
            "name": "passage_data",
            "location": 289,
            "return": [
                "dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_pytest.fixtures.SubRequest"
                ]
            }
        },
        "TestBibleGateway.default_version": {
            "name": "default_version",
            "location": 293,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBibleGateway.default_abbr": {
            "name": "default_abbr",
            "location": 297,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBibleGateway.service": {
            "name": "service",
            "location": 301,
            "return": [
                "Service"
            ],
            "arguments": {
                "self": [],
                "aiohttp_client_session": [
                    "aiohttp.ClientSession"
                ]
            }
        }
    },
    "Erasmus-master/tests/services/__init__.py": {
        "ServiceTest.bible": {
            "name": "bible",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pytest.FixtureRequest"
                ],
                "default_version": [
                    "str"
                ],
                "default_abbr": [
                    "str"
                ],
                "MockBible": [
                    "type[Any]"
                ]
            }
        }
    }
}
{
    "EthDKG-master/setup.py": {},
    "EthDKG-master/ethdkg/adversary.py": {
        "Adversary_SendInvalidShares.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "contract": [],
                "logger": [],
                "targets": []
            }
        },
        "Adversary_SendInvalidShares.distribute_shares": {
            "name": "distribute_shares",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "sync": []
            }
        },
        "Adversary_AbortOnKeyShareSubmission.submit_key_share": {
            "name": "submit_key_share",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "recovered_node_idx": [],
                "sync": []
            }
        },
        "Adversary_AbortAfterRegistration.setup": {
            "name": "setup",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EthDKG-master/ethdkg/computation_costs_testing.py": {
        "T": {
            "name": "T",
            "location": 11,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "TS": {
            "name": "TS",
            "location": 23,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "keygen": {
            "name": "keygen",
            "location": 33,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "derive_shared_keys": {
            "name": "derive_shared_keys",
            "location": 37,
            "return": [],
            "arguments": {
                "i": [],
                "keys": []
            }
        },
        "bench_keys": {
            "name": "bench_keys",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "bench_sharing": {
            "name": "bench_sharing",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/crypto.py": {
        "random_scalar": {
            "name": "random_scalar",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "keygen": {
            "name": "keygen",
            "location": 51,
            "return": [
                "Tuple[(int, PointG1)]"
            ],
            "arguments": {}
        },
        "share_secret": {
            "name": "share_secret",
            "location": 62,
            "return": [
                "Tuple[(Dict[(int, int)], List[PointG1])]"
            ],
            "arguments": {
                "secret": [
                    "int"
                ],
                "indices": [
                    "List[int]"
                ],
                "threshold": [
                    "int"
                ]
            }
        },
        "_share_secret_int_indices": {
            "name": "_share_secret_int_indices",
            "location": 83,
            "return": [
                "Tuple[(Dict[(int, int)], List[PointG1])]"
            ],
            "arguments": {
                "s_i": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "evaluate_public_polynomial": {
            "name": "evaluate_public_polynomial",
            "location": 107,
            "return": [],
            "arguments": {
                "x": [
                    "int"
                ],
                "commitments": [
                    "List[PointG1]"
                ]
            }
        },
        "verify_share": {
            "name": "verify_share",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "j": [
                    "int"
                ],
                "s_ij": [
                    "int"
                ],
                "Cik": [
                    "List[PointG1]"
                ]
            }
        },
        "recover_secret": {
            "name": "recover_secret",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "shares": [
                    "Dict[(int, int)]"
                ]
            }
        },
        "shared_key": {
            "name": "shared_key",
            "location": 138,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "sk_i": [
                    "int"
                ],
                "pk_j": [
                    "PointG1"
                ]
            }
        },
        "encrypt_share": {
            "name": "encrypt_share",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "s_ij": [
                    "int"
                ],
                "k_ij": [
                    "PointG1"
                ],
                "j": [
                    "int"
                ]
            }
        },
        "dleq": {
            "name": "dleq",
            "location": 157,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "x1": [
                    "PointG1"
                ],
                "y1": [
                    "PointG1"
                ],
                "x2": [
                    "PointG1"
                ],
                "y2": [
                    "PointG1"
                ],
                "alpha": [
                    "int"
                ]
            }
        },
        "dleq_verify": {
            "name": "dleq_verify",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "x1": [
                    "PointG1"
                ],
                "y1": [
                    "PointG1"
                ],
                "x2": [
                    "PointG1"
                ],
                "y2": [
                    "PointG1"
                ],
                "challenge": [
                    "int"
                ],
                "response": [
                    "int"
                ]
            }
        },
        "sum_scalars": {
            "name": "sum_scalars",
            "location": 203,
            "return": [],
            "arguments": {
                "scalars": [
                    "Iterable[int]"
                ]
            }
        },
        "sum_points": {
            "name": "sum_points",
            "location": 207,
            "return": [],
            "arguments": {
                "points": [
                    "Union[(Iterable[PointG1], Iterable[PointG2])]"
                ]
            }
        },
        "share_secret.f": {
            "name": "f",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "_share_secret_int_indices.f": {
            "name": "f",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "recover_secret.lagrange_coefficient": {
            "name": "lagrange_coefficient",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/ethnode.py": {
        "point_to_eth": {
            "name": "point_to_eth",
            "location": 14,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "p": [
                    "PointG1"
                ]
            }
        },
        "point_from_eth": {
            "name": "point_from_eth",
            "location": 19,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "p": []
            }
        },
        "point_G2_to_eth": {
            "name": "point_G2_to_eth",
            "location": 24,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "p": [
                    "PointG2"
                ]
            }
        },
        "point_G2_from_eth": {
            "name": "point_G2_from_eth",
            "location": 31,
            "return": [
                "PointG2"
            ],
            "arguments": {
                "p": []
            }
        },
        "EthNode.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "contract": [],
                "logger": []
            }
        },
        "EthNode.tx_registration_receipt": {
            "name": "tx_registration_receipt",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthNode.register": {
            "name": "register",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "sync": []
            }
        },
        "EthNode.setup": {
            "name": "setup",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthNode.distribute_shares": {
            "name": "distribute_shares",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_shares": [],
                "commitments": [],
                "sync": []
            }
        },
        "EthNode.load_shares": {
            "name": "load_shares",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthNode.submit_disputes": {
            "name": "submit_disputes",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "disputes": [],
                "sync": []
            }
        },
        "EthNode.load_disputes": {
            "name": "load_disputes",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthNode.submit_key_share": {
            "name": "submit_key_share",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "recovered_node_idx": [],
                "sync": []
            }
        },
        "EthNode.load_key_shares": {
            "name": "load_key_shares",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthNode.recover_key_shares": {
            "name": "recover_key_shares",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "sync": []
            }
        },
        "EthNode.load_recovered_key_shares": {
            "name": "load_recovered_key_shares",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "poll_timeout": []
            }
        },
        "EthNode.submit_recovered_key_shares": {
            "name": "submit_recovered_key_shares",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "sync": []
            }
        },
        "EthNode.submit_master_public_key": {
            "name": "submit_master_public_key",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "sync": []
            }
        }
    },
    "EthDKG-master/ethdkg/ethutils.py": {
        "set_polling_interval": {
            "name": "set_polling_interval",
            "location": 30,
            "return": [],
            "arguments": {
                "interval": []
            }
        },
        "get_polling_interval": {
            "name": "get_polling_interval",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "connect": {
            "name": "connect",
            "location": 39,
            "return": [],
            "arguments": {
                "port": [],
                "dev": [],
                "poa": []
            }
        },
        "get_account_address": {
            "name": "get_account_address",
            "location": 71,
            "return": [],
            "arguments": {
                "account_idx": []
            }
        },
        "compile_contract": {
            "name": "compile_contract",
            "location": 79,
            "return": [],
            "arguments": {
                "contract_name": [
                    "str"
                ]
            }
        },
        "load_contract": {
            "name": "load_contract",
            "location": 94,
            "return": [],
            "arguments": {
                "contract_name": [],
                "str": []
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 102,
            "return": [],
            "arguments": {
                "contract_name": [],
                "deploying_account_address": [],
                "gas": [],
                "should_add_simplified_call_interfaces": [],
                "return_tx_receipt": []
            }
        },
        "get_contract": {
            "name": "get_contract",
            "location": 129,
            "return": [],
            "arguments": {
                "contract_name": [],
                "contract_address": [],
                "should_add_simplified_call_interfaces": []
            }
        },
        "wait_for_tx_receipt": {
            "name": "wait_for_tx_receipt",
            "location": 143,
            "return": [],
            "arguments": {
                "tx_hash": []
            }
        },
        "get_tx_receipt": {
            "name": "get_tx_receipt",
            "location": 151,
            "return": [],
            "arguments": {
                "tx_hash": []
            }
        },
        "wait_for_block": {
            "name": "wait_for_block",
            "location": 156,
            "return": [],
            "arguments": {
                "target_block_number": []
            }
        },
        "add_simplified_call_interfaces": {
            "name": "add_simplified_call_interfaces",
            "location": 204,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "mine_block": {
            "name": "mine_block",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "mine_blocks": {
            "name": "mine_blocks",
            "location": 226,
            "return": [],
            "arguments": {
                "num_blocks": []
            }
        },
        "mine_blocks_until": {
            "name": "mine_blocks_until",
            "location": 232,
            "return": [],
            "arguments": {
                "predicate": []
            }
        },
        "block_number": {
            "name": "block_number",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "set_gas_price_strategy": {
            "name": "set_gas_price_strategy",
            "location": 243,
            "return": [],
            "arguments": {
                "strategy_or_price_in_gwei": []
            }
        },
        "FailedTxReceipt.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimplifiedCallInterface.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "contract": [],
                "fn_name": []
            }
        },
        "SimplifiedCallInterface.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimplifiedCallInterfaceCall.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "_func": []
            }
        },
        "SimplifiedCallInterfaceCall.call_sync": {
            "name": "call_sync",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "caller_account_address": []
            }
        },
        "SimplifiedCallInterfaceCall.call_async": {
            "name": "call_async",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "caller_account_address": []
            }
        },
        "SimplifiedCallInterfaceCall.call": {
            "name": "call",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "caller_account_address": [],
                "sync": []
            }
        },
        "set_gas_price_strategy.fixed_strategy": {
            "name": "fixed_strategy",
            "location": 247,
            "return": [],
            "arguments": {
                "web3": [],
                "params": []
            }
        }
    },
    "EthDKG-master/ethdkg/eval_gas_costs.py": {
        "print_stats": {
            "name": "print_stats",
            "location": 26,
            "return": [],
            "arguments": {
                "name": [],
                "label": [],
                "txs": [],
                "min_for_duplicate": []
            }
        },
        "init": {
            "name": "init",
            "location": 43,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "print_replace": {
            "name": "print_replace",
            "location": 77,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "registration": {
            "name": "registration",
            "location": 81,
            "return": [],
            "arguments": {
                "batch_size": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "share_distribution": {
            "name": "share_distribution",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "disputes": {
            "name": "disputes",
            "location": 153,
            "return": [],
            "arguments": {
                "batch_size": []
            }
        },
        "key_derivation": {
            "name": "key_derivation",
            "location": 181,
            "return": [],
            "arguments": {
                "stop_max": []
            }
        },
        "key_derivation_recovery": {
            "name": "key_derivation_recovery",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 249,
            "return": [],
            "arguments": {
                "n": [],
                "stop_max": []
            }
        },
        "run_all": {
            "name": "run_all",
            "location": 271,
            "return": [],
            "arguments": {
                "N": [],
                "stop_max": []
            }
        }
    },
    "EthDKG-master/ethdkg/eval_gas_costs_offchain.py": {},
    "EthDKG-master/ethdkg/logging.py": {
        "create_logger": {
            "name": "create_logger",
            "location": 38,
            "return": [],
            "arguments": {
                "filename": [],
                "cli_linewidth": [],
                "log_timestamps": []
            }
        },
        "CustomCLIFormatter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": [],
                "datefmt": [],
                "style": [],
                "line_length": []
            }
        },
        "CustomCLIFormatter.format": {
            "name": "format",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "create_logger.newline": {
            "name": "newline",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "how_many_lines": []
            }
        },
        "_NullLogger.info": {
            "name": "info",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EthDKG-master/ethdkg/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.setup": {
            "name": "setup",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "t": [
                    "int"
                ],
                "assigned_idx_for_this_node": [
                    "int"
                ],
                "public_keys": [
                    "Dict[(int, PointG1)]"
                ]
            }
        },
        "Node.compute_shares": {
            "name": "compute_shares",
            "location": 70,
            "return": [
                "Tuple[(Dict[(int, int)], List[PointG1])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.load_shares": {
            "name": "load_shares",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issuer_idx": [
                    "int"
                ],
                "encrypted_shares": [
                    "Dict[(int, int)]"
                ],
                "commitments": [
                    "List[PointG1]"
                ]
            }
        },
        "Node.compute_disputes": {
            "name": "compute_disputes",
            "location": 108,
            "return": [
                "Dict[(int, Tuple[(PointG1, Tuple[(int, int)])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.load_dispute": {
            "name": "load_dispute",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issuer_idx": [
                    "int"
                ],
                "disputer_idx": [
                    "int"
                ],
                "shared_key": [
                    "PointG1"
                ],
                "shared_key_correctness_proof": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "Node.compute_qualified_nodes": {
            "name": "compute_qualified_nodes",
            "location": 149,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.compute_key_share": {
            "name": "compute_key_share",
            "location": 153,
            "return": [
                "Tuple[(PointG1, Tuple[(int, int)], PointG2)]"
            ],
            "arguments": {
                "self": [],
                "recovered_node_idx": [
                    "Optional[int]"
                ]
            }
        },
        "Node.load_key_share": {
            "name": "load_key_share",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issuer_idx": [
                    "int"
                ],
                "h1": [
                    "PointG1"
                ],
                "h1_proof": [
                    "Tuple[(int, int)]"
                ],
                "h2": [
                    "PointG2"
                ]
            }
        },
        "Node.initiate_key_share_recovery": {
            "name": "initiate_key_share_recovery",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "node_idx": [
                    "int"
                ]
            }
        },
        "Node.load_recovered_key_share": {
            "name": "load_recovered_key_share",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "int"
                ],
                "recoverer_idx": [
                    "int"
                ],
                "shared_key": [
                    "PointG1"
                ],
                "shared_key_correctness_proof": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "Node.recover_key_share": {
            "name": "recover_key_share",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "int"
                ]
            }
        },
        "Node.derive_master_public_key": {
            "name": "derive_master_public_key",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.derive_group_keys": {
            "name": "derive_group_keys",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.verify_group_public_key": {
            "name": "verify_group_public_key",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "node_idx": [
                    "int"
                ],
                "group_public_key": [
                    "PointG2"
                ],
                "gpk_h": [
                    "PointG1"
                ],
                "proof": [
                    "Tuple[(int, int)]"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/state_updates.py": {
        "enable_state_updates": {
            "name": "enable_state_updates",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "StateUpdate.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateUpdate.set_logger": {
            "name": "set_logger",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "logger": []
            }
        }
    },
    "EthDKG-master/ethdkg/testutils.py": {
        "mine_until_registrations_confirmed": {
            "name": "mine_until_registrations_confirmed",
            "location": 4,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "mine_until_share_distribution_confirmed": {
            "name": "mine_until_share_distribution_confirmed",
            "location": 9,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "mine_until_disputes_confirmed": {
            "name": "mine_until_disputes_confirmed",
            "location": 14,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "mine_until_key_share_submission_confirmed": {
            "name": "mine_until_key_share_submission_confirmed",
            "location": 19,
            "return": [],
            "arguments": {
                "contract": []
            }
        }
    },
    "EthDKG-master/ethdkg/test_contract_ethdkg.py": {
        "compile_contract": {
            "name": "compile_contract",
            "location": 24,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "contract": {
            "name": "contract",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "init_scenario": {
            "name": "init_scenario",
            "location": 33,
            "return": [
                "Tuple[(int, int, List[EthNode])]"
            ],
            "arguments": {
                "contract": [],
                "n": [],
                "t": []
            }
        },
        "test_compilation": {
            "name": "test_compilation",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_deployment": {
            "name": "test_deployment",
            "location": 42,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_bn128_check_pairing": {
            "name": "test_bn128_check_pairing",
            "location": 47,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_register": {
            "name": "test_register",
            "location": 58,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_register__too_late": {
            "name": "test_register__too_late",
            "location": 64,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_register__twice": {
            "name": "test_register__twice",
            "location": 71,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_register__invalid_pk": {
            "name": "test_register__invalid_pk",
            "location": 79,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_setup": {
            "name": "test_setup",
            "location": 86,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_share_distribution": {
            "name": "test_share_distribution",
            "location": 101,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "distribute_invalid_shares": {
            "name": "distribute_invalid_shares",
            "location": 120,
            "return": [],
            "arguments": {
                "issuer": [],
                "receiver": []
            }
        },
        "distribute_invalid_commitment": {
            "name": "distribute_invalid_commitment",
            "location": 128,
            "return": [],
            "arguments": {
                "issuer": []
            }
        },
        "test_share_distribution__invalid_commitment": {
            "name": "test_share_distribution__invalid_commitment",
            "location": 136,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_dispute__invalid_share": {
            "name": "test_dispute__invalid_share",
            "location": 149,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_dispute__valid_share": {
            "name": "test_dispute__valid_share",
            "location": 184,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_submit_key_share": {
            "name": "test_submit_key_share",
            "location": 208,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_submit_key_share__recovery": {
            "name": "test_submit_key_share__recovery",
            "location": 239,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "test_key_derivation": {
            "name": "test_key_derivation",
            "location": 284,
            "return": [],
            "arguments": {
                "contract": []
            }
        }
    },
    "EthDKG-master/ethdkg/test_contract_greeter.py": {
        "test_compilation": {
            "name": "test_compilation",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_deployment": {
            "name": "test_deployment",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_getter": {
            "name": "test_getter",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/test_contract_testing.py": {
        "test_addr_cast": {
            "name": "test_addr_cast",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_points": {
            "name": "test_points",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_list_assignment": {
            "name": "test_list_assignment",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_event_filters": {
            "name": "test_event_filters",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/test_crypto.py": {
        "test_keygen": {
            "name": "test_keygen",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_share_secret": {
            "name": "test_share_secret",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_share_verification": {
            "name": "test_share_verification",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_share_verification_invalid_commitments": {
            "name": "test_share_verification_invalid_commitments",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_recover_secret": {
            "name": "test_recover_secret",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_shared_key_derivation": {
            "name": "test_shared_key_derivation",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_encryption_of_share": {
            "name": "test_encryption_of_share",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_dleq": {
            "name": "test_dleq",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_sum_points": {
            "name": "test_sum_points",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_full_protocol_all_honest": {
            "name": "test_full_protocol_all_honest",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_pairing": {
            "name": "test_pairing",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_evaluate_public_polynomial": {
            "name": "test_evaluate_public_polynomial",
            "location": 176,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/test_node.py": {
        "init_scenario": {
            "name": "init_scenario",
            "location": 11,
            "return": [
                "Tuple[(int, int, List[Node])]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "t": [
                    "int"
                ],
                "use_random_indices": [
                    "bool"
                ]
            }
        },
        "compute_and_distribute_shares": {
            "name": "compute_and_distribute_shares",
            "location": 28,
            "return": [],
            "arguments": {
                "nodes": [
                    "List[Node]"
                ],
                "invalid_shares_from_to": [
                    "Optional[Set[Tuple[(Node, Node)]]]"
                ],
                "invalid_commitments_from": [
                    "Optional[Set[Node]]"
                ],
                "do_not_distribute_from": [
                    "Optional[Set[Node]]"
                ]
            }
        },
        "test_shared_keys": {
            "name": "test_shared_keys",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_share_distribution_all_fine_case": {
            "name": "test_share_distribution_all_fine_case",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_share_distribution_node_invalid_shares_should_be_detected": {
            "name": "test_share_distribution_node_invalid_shares_should_be_detected",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_share_distribution_node_invalid_commitments_should_be_detected": {
            "name": "test_share_distribution_node_invalid_commitments_should_be_detected",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "compute_and_distribute_disputes": {
            "name": "compute_and_distribute_disputes",
            "location": 89,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_valid_dispute_accepted": {
            "name": "test_valid_dispute_accepted",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_invalid_dispute_rejected__invalid_key": {
            "name": "test_invalid_dispute_rejected__invalid_key",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_invalid_dispute_rejected__invalid_key_proof": {
            "name": "test_invalid_dispute_rejected__invalid_key_proof",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_invalid_dispute_rejected__share_valid": {
            "name": "test_invalid_dispute_rejected__share_valid",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_qualified_nodes__all": {
            "name": "test_qualified_nodes__all",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "test_qualified_nodes__exclude_disputed": {
            "name": "test_qualified_nodes__exclude_disputed",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_qualified_nodes__exclude_undistributed": {
            "name": "test_qualified_nodes__exclude_undistributed",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "compute_and_distribute_key_shares": {
            "name": "compute_and_distribute_key_shares",
            "location": 183,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_key_shares_verification__all_correct": {
            "name": "test_key_shares_verification__all_correct",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "test_key_shares_verification__invalid": {
            "name": "test_key_shares_verification__invalid",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_key_shares_recovery": {
            "name": "test_key_shares_recovery",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_master_key_derivation": {
            "name": "test_master_key_derivation",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_group_key_derivation": {
            "name": "test_group_key_derivation",
            "location": 272,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/utils.py": {},
    "EthDKG-master/ethdkg/__init__.py": {},
    "EthDKG-master/ethdkg/__main__.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "parse_cli_arguments": {
            "name": "parse_cli_arguments",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "registration": {
            "name": "registration",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "share_distribution": {
            "name": "share_distribution",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "share_verification": {
            "name": "share_verification",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "dispute_submission": {
            "name": "dispute_submission",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "dispute_verification": {
            "name": "dispute_verification",
            "location": 302,
            "return": [],
            "arguments": {}
        },
        "key_derivation_submission": {
            "name": "key_derivation_submission",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "key_derivation_verification": {
            "name": "key_derivation_verification",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "key_derivation_recovery": {
            "name": "key_derivation_recovery",
            "location": 369,
            "return": [],
            "arguments": {}
        },
        "key_derivation_result": {
            "name": "key_derivation_result",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "log_tx": {
            "name": "log_tx",
            "location": 420,
            "return": [],
            "arguments": {
                "tx_hash": [],
                "state_update": [],
                "may_fail": []
            }
        },
        "log_tx_receipt": {
            "name": "log_tx_receipt",
            "location": 430,
            "return": [],
            "arguments": {
                "receipt": [],
                "state_update": [],
                "may_fail": []
            }
        },
        "wait_until": {
            "name": "wait_until",
            "location": 449,
            "return": [],
            "arguments": {
                "block_number": []
            }
        }
    },
    "EthDKG-master/fc19/client/bls.py": {
        "keygen": {
            "name": "keygen",
            "location": 18,
            "return": [],
            "arguments": {
                "seed": []
            }
        },
        "sign": {
            "name": "sign",
            "location": 33,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "sk": [
                    "int"
                ],
                "message": [
                    "Any"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "bls_pk": [
                    "PointG2"
                ],
                "message": [
                    "Any"
                ],
                "signature": [
                    "PointG1"
                ]
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 44,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "id_and_signature_list": [
                    "List[Tuple[(int, PointG1)]]"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/constants.py": {},
    "EthDKG-master/fc19/client/crypto.py": {
        "neg": {
            "name": "neg",
            "location": 21,
            "return": [
                "Point@@PointG1@@PointG2@@"
            ],
            "arguments": {
                "point": [
                    "Point@@PointG1@@PointG2@@"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 25,
            "return": [
                "Point@@PointG1@@PointG2@@"
            ],
            "arguments": {
                "pointA": [
                    "Point@@PointG1@@PointG2@@"
                ],
                "pointB": [
                    "Point@@PointG1@@PointG2@@"
                ]
            }
        },
        "sum_points": {
            "name": "sum_points",
            "location": 30,
            "return": [
                "Point@@PointG1@@PointG2@@"
            ],
            "arguments": {
                "points": [
                    "List[Point]"
                ]
            }
        },
        "multiply": {
            "name": "multiply",
            "location": 37,
            "return": [
                "Point@@PointG1@@PointG2@@"
            ],
            "arguments": {
                "point": [
                    "Point@@PointG1@@PointG2@@"
                ],
                "scalar": [
                    "int"
                ]
            }
        },
        "is_on_curve": {
            "name": "is_on_curve",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "point": [
                    "Point@@PointG1@@PointG2@@"
                ]
            }
        },
        "check_pairing": {
            "name": "check_pairing",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "P1": [
                    "PointG1"
                ],
                "Q1": [
                    "PointG2"
                ],
                "P2": [
                    "PointG1"
                ],
                "Q2": [
                    "PointG2"
                ]
            }
        },
        "check_pairing_equality": {
            "name": "check_pairing_equality",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "P1": [
                    "PointG1"
                ],
                "Q1": [
                    "PointG2"
                ],
                "P2": [
                    "PointG1"
                ],
                "Q2": [
                    "PointG2"
                ]
            }
        },
        "hash_to_scalar": {
            "name": "hash_to_scalar",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "msg": [
                    "Any"
                ]
            }
        },
        "hash_to_G1_old": {
            "name": "hash_to_G1_old",
            "location": 87,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "msg": [
                    "Any"
                ]
            }
        },
        "hash_to_G1": {
            "name": "hash_to_G1",
            "location": 99,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "msg": [
                    "Any"
                ]
            }
        },
        "map_to_G1": {
            "name": "map_to_G1",
            "location": 111,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "random_scalar": {
            "name": "random_scalar",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "seed": [
                    "Any"
                ]
            }
        },
        "random_point_from_G1": {
            "name": "random_point_from_G1",
            "location": 151,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "seed": [
                    "Any"
                ]
            }
        },
        "_wrap": {
            "name": "_wrap",
            "location": 161,
            "return": [],
            "arguments": {
                "point": []
            }
        },
        "_unwrap": {
            "name": "_unwrap",
            "location": 173,
            "return": [],
            "arguments": {
                "point": []
            }
        }
    },
    "EthDKG-master/fc19/client/dkg.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "parse_cli_arguments": {
            "name": "parse_cli_arguments",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "default_logging_info": {
            "name": "default_logging_info",
            "location": 107,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "trimmed_logging_info": {
            "name": "trimmed_logging_info",
            "location": 111,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "share_key": {
            "name": "share_key",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "key_sharing_stats": {
            "name": "key_sharing_stats",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "dispute": {
            "name": "dispute",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "wait_for": {
            "name": "wait_for",
            "location": 281,
            "return": [],
            "arguments": {
                "event_type": [],
                "target_block_number": [],
                "target_description": []
            }
        },
        "final_stats": {
            "name": "final_stats",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "derive_keys": {
            "name": "derive_keys",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "upload_master_key": {
            "name": "upload_master_key",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "log_tx": {
            "name": "log_tx",
            "location": 358,
            "return": [],
            "arguments": {
                "tx": [],
                "info": []
            }
        },
        "log_events": {
            "name": "log_events",
            "location": 366,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "log_event": {
            "name": "log_event",
            "location": 371,
            "return": [],
            "arguments": {
                "e": []
            }
        }
    },
    "EthDKG-master/fc19/client/ethnode.py": {
        "EthNode.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "EthNode.connect": {
            "name": "connect",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "contract": []
            }
        },
        "EthNode.register": {
            "name": "register",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "check_contract_phase": []
            }
        },
        "EthNode.init_secret_sharing": {
            "name": "init_secret_sharing",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "check_contract_phase": []
            }
        },
        "EthNode.share_key": {
            "name": "share_key",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "check_contract_phase": []
            }
        },
        "EthNode.load_shares": {
            "name": "load_shares",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "check_contract_phase": []
            }
        },
        "EthNode.dispute": {
            "name": "dispute",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "issuer_id": [],
                "check_contract_phase": []
            }
        },
        "EthNode.verify_nodes": {
            "name": "verify_nodes",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "check_contract_phase": []
            }
        },
        "EthNode.upload_group_key": {
            "name": "upload_group_key",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "check_contract_phase": []
            }
        }
    },
    "EthDKG-master/fc19/client/gas_evaluation.py": {
        "manipulate_share": {
            "name": "manipulate_share",
            "location": 10,
            "return": [],
            "arguments": {
                "node": [],
                "sid": []
            }
        },
        "run": {
            "name": "run",
            "location": 20,
            "return": [],
            "arguments": {
                "num_nodes": []
            }
        }
    },
    "EthDKG-master/fc19/client/node.py": {
        "Node.idx": {
            "name": "idx",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[int]"
                ],
                "sk_seed": [
                    "Optional[int]"
                ],
                "pk": [
                    "Optional[PointG1]"
                ],
                "bls_pk": [
                    "Optional[PointG2]"
                ],
                "account": [
                    "Optional[str]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.registration_info": {
            "name": "registration_info",
            "location": 101,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.keygen": {
            "name": "keygen",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "Node.init_secret_sharing": {
            "name": "init_secret_sharing",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [
                    "List['Node']"
                ],
                "id": [
                    "int"
                ],
                "threshold": [
                    "int"
                ]
            }
        },
        "Node.load_shares": {
            "name": "load_shares",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issuer_id": [
                    "int"
                ],
                "encrypted_shares": [
                    "List[int]"
                ],
                "public_coefficients": [
                    "List[PointG1]"
                ]
            }
        },
        "Node.load_dispute_infos": {
            "name": "load_dispute_infos",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disputed_node_ids": [
                    "Set[int]"
                ]
            }
        },
        "Node.derive_group_keys": {
            "name": "derive_group_keys",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.sign": {
            "name": "sign",
            "location": 217,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/test_bls.py": {
        "test_signing": {
            "name": "test_signing",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_signature_aggregation": {
            "name": "test_signature_aggregation",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_all_to_all_signature_aggregation": {
            "name": "test_all_to_all_signature_aggregation",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_contract_primitives.py": {
        "test_add": {
            "name": "test_add",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_multiply": {
            "name": "test_multiply",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_check_pairing": {
            "name": "test_check_pairing",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_verify_decryption_key": {
            "name": "test_verify_decryption_key",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_verify_sk_knowledge": {
            "name": "test_verify_sk_knowledge",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_crypto.py": {
        "test_wrapping": {
            "name": "test_wrapping",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_pairing_check_pyecc": {
            "name": "test_pairing_check_pyecc",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_pairing_check": {
            "name": "test_pairing_check",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_greeter.py": {
        "test_initial": {
            "name": "test_initial",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_array_parameter": {
            "name": "test_array_parameter",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_revert": {
            "name": "test_revert",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_interaction.py": {
        "setup_single": {
            "name": "setup_single",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "setup_multiple": {
            "name": "setup_multiple",
            "location": 23,
            "return": [],
            "arguments": {
                "num_nodes": [],
                "register": []
            }
        },
        "test_registration": {
            "name": "test_registration",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_registration_prohibt_multiple_attemps": {
            "name": "test_registration_prohibt_multiple_attemps",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_registration_prohibt_late_submission": {
            "name": "test_registration_prohibt_late_submission",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_registration_invalid_pk": {
            "name": "test_registration_invalid_pk",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_registration_invalid_bls_pk": {
            "name": "test_registration_invalid_bls_pk",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_registration_invalid_sk_knowledge_proof": {
            "name": "test_registration_invalid_sk_knowledge_proof",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_init_secret_sharing": {
            "name": "test_init_secret_sharing",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_sharing": {
            "name": "test_sharing",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_sharing_early": {
            "name": "test_sharing_early",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_sharing_late": {
            "name": "test_sharing_late",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_sharing_non_registered": {
            "name": "test_sharing_non_registered",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "test_verification_of_valid_shares": {
            "name": "test_verification_of_valid_shares",
            "location": 177,
            "return": [],
            "arguments": {
                "test_dispute": []
            }
        },
        "test_verification_of_invalid_shares": {
            "name": "test_verification_of_invalid_shares",
            "location": 192,
            "return": [],
            "arguments": {
                "test_dispute": []
            }
        },
        "test_verification_invalid_encryption_key": {
            "name": "test_verification_invalid_encryption_key",
            "location": 212,
            "return": [],
            "arguments": {
                "test_dispute": []
            }
        },
        "test_verification_invalid_public_coefficients": {
            "name": "test_verification_invalid_public_coefficients",
            "location": 234,
            "return": [],
            "arguments": {
                "test_dispute": []
            }
        },
        "test_upload_group_key": {
            "name": "test_upload_group_key",
            "location": 253,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_node.py": {
        "setup_and_register": {
            "name": "setup_and_register",
            "location": 11,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_load_valid_shares": {
            "name": "test_load_valid_shares",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_load_invalid_shares": {
            "name": "test_load_invalid_shares",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_load_invalid_shares_wrong_encryption_key_used": {
            "name": "test_load_invalid_shares_wrong_encryption_key_used",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_load_invalid_shares_public_coefficients_wrong": {
            "name": "test_load_invalid_shares_public_coefficients_wrong",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_load_valid_shares_pk_wrong": {
            "name": "test_load_valid_shares_pk_wrong",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_derive_group_key": {
            "name": "test_derive_group_key",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_derive_group_key_with_dispute": {
            "name": "test_derive_group_key_with_dispute",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_group_signature": {
            "name": "test_group_signature",
            "location": 121,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_pairing_lib.py": {
        "test_pairing_python": {
            "name": "test_pairing_python",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_pairing_python_neg": {
            "name": "test_pairing_python_neg",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_testnet_sig.py": {
        "test_verification_of_aggregate_signature": {
            "name": "test_verification_of_aggregate_signature",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_vss.py": {
        "test_sharing": {
            "name": "test_sharing",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_verification": {
            "name": "test_verification",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_dleq": {
            "name": "test_dleq",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_sk_knowledge": {
            "name": "test_sk_knowledge",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_sk_knowledge_with_account": {
            "name": "test_sk_knowledge_with_account",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_sk_knowledge_invalid_pk": {
            "name": "test_sk_knowledge_invalid_pk",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_sk_knowledge_invalid_response": {
            "name": "test_sk_knowledge_invalid_response",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/utils.py": {
        "connect": {
            "name": "connect",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "filehash": {
            "name": "filehash",
            "location": 21,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "compile_contract": {
            "name": "compile_contract",
            "location": 26,
            "return": [],
            "arguments": {
                "contract_name": []
            }
        },
        "get_contract": {
            "name": "get_contract",
            "location": 53,
            "return": [],
            "arguments": {
                "contract_name": [],
                "contract_address": [],
                "patch_api": []
            }
        },
        "_tx_executor": {
            "name": "_tx_executor",
            "location": 77,
            "return": [],
            "arguments": {
                "contract_function": []
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 94,
            "return": [],
            "arguments": {
                "contract_name": [],
                "account": [],
                "patch_api": [],
                "return_tx_receipt": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 119,
            "return": [],
            "arguments": {
                "list_of_lists": []
            }
        },
        "get_events": {
            "name": "get_events",
            "location": 123,
            "return": [],
            "arguments": {
                "contract_instance": [],
                "event_name": [],
                "from_block": [],
                "to_block": []
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 135,
            "return": [],
            "arguments": {
                "predicate": [],
                "check_interval": []
            }
        },
        "mine_block": {
            "name": "mine_block",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "mine_blocks": {
            "name": "mine_blocks",
            "location": 145,
            "return": [],
            "arguments": {
                "num_blocks": []
            }
        },
        "mine_blocks_until": {
            "name": "mine_blocks_until",
            "location": 150,
            "return": [],
            "arguments": {
                "predicate": []
            }
        },
        "blockNumber": {
            "name": "blockNumber",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 159,
            "return": [],
            "arguments": {
                "func_or_funcs": [],
                "args": []
            }
        },
        "_tx_executor.f": {
            "name": "f",
            "location": 83,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/vss.py": {
        "share": {
            "name": "share",
            "location": 17,
            "return": [
                "Tuple[(List[int], List[PointG1])]"
            ],
            "arguments": {
                "secret": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "share_id": [
                    "int"
                ],
                "share": [
                    "int"
                ],
                "public_coefficients": [
                    "List[PointG1]"
                ]
            }
        },
        "recover": {
            "name": "recover",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "id_and_share_list": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "recover_point": {
            "name": "recover_point",
            "location": 53,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "id_and_point_list": [
                    "List[Tuple[(int, PointG1)]]"
                ]
            }
        },
        "lagrange_coefficient": {
            "name": "lagrange_coefficient",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "ids": [
                    "List[int]"
                ]
            }
        },
        "encrypt_share": {
            "name": "encrypt_share",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "share": [
                    "int"
                ],
                "receiver_id": [
                    "int"
                ],
                "shared_key": [
                    "PointG1"
                ]
            }
        },
        "shared_key": {
            "name": "shared_key",
            "location": 85,
            "return": [
                "PointG1"
            ],
            "arguments": {
                "sk": [],
                "other_pk": [
                    "PointG1"
                ]
            }
        },
        "shared_key_proof": {
            "name": "shared_key_proof",
            "location": 92,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "sk": [],
                "other_pk": [
                    "PointG1"
                ]
            }
        },
        "prove_sk_knowledge": {
            "name": "prove_sk_knowledge",
            "location": 101,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "sk": [
                    "int"
                ],
                "pk": [
                    "PointG1"
                ],
                "account": [
                    "str"
                ]
            }
        },
        "verify_sk_knowledge": {
            "name": "verify_sk_knowledge",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "pk": [
                    "PointG1"
                ],
                "challenge": [
                    "int"
                ],
                "response": [
                    "int"
                ],
                "account": [
                    "str"
                ]
            }
        },
        "dleq": {
            "name": "dleq",
            "location": 142,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "g1": [
                    "PointG1"
                ],
                "h1": [
                    "PointG1"
                ],
                "g2": [
                    "PointG1"
                ],
                "h2": [
                    "PointG1"
                ],
                "alpha": [
                    "int"
                ]
            }
        },
        "dleq_verify": {
            "name": "dleq_verify",
            "location": 172,
            "return": [],
            "arguments": {
                "g1": [
                    "PointG1"
                ],
                "h1": [
                    "PointG1"
                ],
                "g2": [
                    "PointG1"
                ],
                "h2": [
                    "PointG1"
                ],
                "challenge": [
                    "int"
                ],
                "response": [
                    "int"
                ]
            }
        },
        "share.f": {
            "name": "f",
            "location": 23,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "verify.F": {
            "name": "F",
            "location": 37,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "EthDKG-master/scripts/kill-ethdkg-processes.py": {},
    "EthDKG-master/scripts/large-scale-launcher.py": {
        "print_stdout": {
            "name": "print_stdout",
            "location": 36,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "run": {
            "name": "run",
            "location": 46,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 133,
            "return": [],
            "arguments": {
                "state": [],
                "batch_size": [
                    "int"
                ],
                "step": [
                    "bool"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "wait_for.print_progress": {
            "name": "print_progress",
            "location": 144,
            "return": [],
            "arguments": {
                "first_time": []
            }
        }
    }
}
{
    "FakeSMTPd-master/fakesmtpd/args.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 5,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "FakeSMTPd-master/fakesmtpd/commands.py": {
        "handle_data": {
            "name": "handle_data",
            "location": 17,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_ehlo": {
            "name": "handle_ehlo",
            "location": 28,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_helo": {
            "name": "handle_helo",
            "location": 39,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_mail": {
            "name": "handle_mail",
            "location": 48,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_noop": {
            "name": "handle_noop",
            "location": 66,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_quit": {
            "name": "handle_quit",
            "location": 70,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_rcpt": {
            "name": "handle_rcpt",
            "location": 77,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_rset": {
            "name": "handle_rset",
            "location": 92,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_vrfy": {
            "name": "handle_vrfy",
            "location": 99,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_unknown_command": {
            "name": "handle_unknown_command",
            "location": 103,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "handle_unexpected_arguments": {
            "name": "handle_unexpected_arguments",
            "location": 107,
            "return": [
                "Reply"
            ],
            "arguments": {}
        },
        "handle_missing_arguments": {
            "name": "handle_missing_arguments",
            "location": 111,
            "return": [
                "Reply"
            ],
            "arguments": {}
        },
        "handle_wrong_arguments": {
            "name": "handle_wrong_arguments",
            "location": 115,
            "return": [
                "Reply"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "handle_bad_command_sequence": {
            "name": "handle_bad_command_sequence",
            "location": 119,
            "return": [
                "Reply"
            ],
            "arguments": {}
        },
        "handle_no_greeting": {
            "name": "handle_no_greeting",
            "location": 123,
            "return": [
                "Reply"
            ],
            "arguments": {}
        },
        "handle_command": {
            "name": "handle_command",
            "location": 140,
            "return": [
                "Reply"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "command": [
                    "str"
                ],
                "arguments": [
                    "str"
                ]
            }
        }
    },
    "FakeSMTPd-master/fakesmtpd/connection.py": {
        "replace_by_7_bit": {
            "name": "replace_by_7_bit",
            "location": 39,
            "return": [
                "tuple[(str, int)]"
            ],
            "arguments": {
                "error": [
                    "UnicodeError"
                ]
            }
        },
        "_StreamWriterProto.write": {
            "name": "write",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "__b": [
                    "bytes"
                ]
            }
        },
        "_StreamWriterProto.close": {
            "name": "close",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StreamReaderProto.at_eof": {
            "name": "at_eof",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionHandler.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "_StreamReaderProto"
                ],
                "writer": [
                    "_StreamWriterProto"
                ],
                "print_mail": [
                    "Callable[([State], None)]"
                ]
            }
        },
        "ConnectionHandler._handle_command_line": {
            "name": "_handle_command_line",
            "location": 98,
            "return": [
                "SMTPStatus"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "ConnectionHandler._parse_command_line": {
            "name": "_parse_command_line",
            "location": 106,
            "return": [
                "tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "ConnectionHandler._write_line_too_long": {
            "name": "_write_line_too_long",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionHandler._write_reply": {
            "name": "_write_reply",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "SMTPStatus"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "FakeSMTPd-master/fakesmtpd/mbox.py": {
        "print_mbox_mail": {
            "name": "print_mbox_mail",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "state": [
                    "State"
                ]
            }
        },
        "write_mbox_mail": {
            "name": "write_mbox_mail",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "_MBoxWriter"
                ],
                "state": [
                    "State"
                ]
            }
        },
        "_MBoxWriter.write": {
            "name": "write",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "__s": [
                    "str"
                ]
            }
        },
        "_MBoxWriter.flush": {
            "name": "flush",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FakeSMTPd-master/fakesmtpd/server.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_server": {
            "name": "run_server",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "handler": [
                    "_ServerHandler"
                ]
            }
        }
    },
    "FakeSMTPd-master/fakesmtpd/smtp.py": {},
    "FakeSMTPd-master/fakesmtpd/state.py": {
        "State.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.clear": {
            "name": "clear",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.add_forward_path": {
            "name": "add_forward_path",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "State.add_line": {
            "name": "add_line",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "State.mail_allowed": {
            "name": "mail_allowed",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.rcpt_allowed": {
            "name": "rcpt_allowed",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.data_allowed": {
            "name": "data_allowed",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FakeSMTPd-master/fakesmtpd/syntax.py": {
        "is_valid_domain": {
            "name": "is_valid_domain",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_valid_address_literal": {
            "name": "is_valid_address_literal",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_valid_ipv4_address": {
            "name": "is_valid_ipv4_address",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_valid_ipv6_address": {
            "name": "is_valid_ipv6_address",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_path": {
            "name": "parse_path",
            "location": 101,
            "return": [
                "tuple[(str, str)]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_validate_mailbox": {
            "name": "_validate_mailbox",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_validate_local_part": {
            "name": "_validate_local_part",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_is_valid_dot_string": {
            "name": "_is_valid_dot_string",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_is_valid_quoted_string": {
            "name": "_is_valid_quoted_string",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_validate_domain_part": {
            "name": "_validate_domain_part",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_reverse_path": {
            "name": "parse_reverse_path",
            "location": 143,
            "return": [
                "tuple[(str, str)]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_receiver": {
            "name": "parse_receiver",
            "location": 152,
            "return": [
                "tuple[(str, str)]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_valid_smtp_arguments": {
            "name": "is_valid_smtp_arguments",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_smtp_arguments": {
            "name": "parse_smtp_arguments",
            "location": 169,
            "return": [
                "list[tuple[(str, (str | None))]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_parse_estm_param": {
            "name": "_parse_estm_param",
            "location": 173,
            "return": [
                "tuple[(str, (str | None))]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "FakeSMTPd-master/fakesmtpd/__init__.py": {},
    "FakeSMTPd-master/test_fakesmtpd/commands.py": {
        "getfqdn": {
            "name": "getfqdn",
            "location": 22,
            "return": [
                "Mock"
            ],
            "arguments": {
                "mocker": [
                    "MockerFixture"
                ]
            }
        },
        "TestEHLO.test_domain": {
            "name": "test_domain",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getfqdn": [
                    "Mock"
                ]
            }
        },
        "TestEHLO.test_address_literal": {
            "name": "test_address_literal",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getfqdn": [
                    "Mock"
                ]
            }
        },
        "TestEHLO.test_empty_argument": {
            "name": "test_empty_argument",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEHLO.test_invalid_argument": {
            "name": "test_invalid_argument",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHELO.test_set_greeted": {
            "name": "test_set_greeted",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHELO.test_response": {
            "name": "test_response",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getfqdn": [
                    "Mock"
                ]
            }
        },
        "TestHELO.test_no_argument": {
            "name": "test_no_argument",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHELO.test_invalid_domain": {
            "name": "test_invalid_domain",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_with_mailbox": {
            "name": "test_with_mailbox",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_empty_path": {
            "name": "test_empty_path",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_with_arguments": {
            "name": "test_with_arguments",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_with_arguments_and_quoted_local_part": {
            "name": "test_with_arguments_and_quoted_local_part",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_empty": {
            "name": "test_empty",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_invalid_path": {
            "name": "test_invalid_path",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_path_too_long": {
            "name": "test_path_too_long",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_local_part_too_long": {
            "name": "test_local_part_too_long",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_invalid_mailbox": {
            "name": "test_invalid_mailbox",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_path_with_trailing_chars": {
            "name": "test_path_with_trailing_chars",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_invalid_argument": {
            "name": "test_invalid_argument",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_not_greeted": {
            "name": "test_not_greeted",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_has_reverse_path": {
            "name": "test_has_reverse_path",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_has_forward_path": {
            "name": "test_has_forward_path",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAIL.test_has_mail_data": {
            "name": "test_has_mail_data",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_response": {
            "name": "test_response",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_forward_paths_added": {
            "name": "test_forward_paths_added",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_postmaster": {
            "name": "test_postmaster",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_with_arguments": {
            "name": "test_with_arguments",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_empty_argument": {
            "name": "test_empty_argument",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_empty_path": {
            "name": "test_empty_path",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_path_too_long": {
            "name": "test_path_too_long",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_local_part_too_long": {
            "name": "test_local_part_too_long",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_domain_too_long": {
            "name": "test_domain_too_long",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_path_with_trailing_chars": {
            "name": "test_path_with_trailing_chars",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_invalid_argument": {
            "name": "test_invalid_argument",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_not_greeted": {
            "name": "test_not_greeted",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_no_reverse_path": {
            "name": "test_no_reverse_path",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRCPT.test_mail_data": {
            "name": "test_mail_data",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FakeSMTPd-master/test_fakesmtpd/connection.py": {
        "FakeStreamReader.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeStreamReader.at_eof": {
            "name": "at_eof",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeStreamReader.close": {
            "name": "close",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeStreamWriter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeStreamWriter.write": {
            "name": "write",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "FakeStreamWriter.close": {
            "name": "close",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeStreamWriter.assert_is_closed": {
            "name": "assert_is_closed",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeStreamWriter.lines": {
            "name": "lines",
            "location": 59,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeStreamWriter.assert_last_line_equal": {
            "name": "assert_last_line_equal",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "FakeStreamWriter.assert_last_reply": {
            "name": "assert_last_reply",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "SMTPStatus"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "TestConnectionHandler.getfqdn": {
            "name": "getfqdn",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "MockerFixture"
                ]
            }
        },
        "TestConnectionHandler._handle": {
            "name": "_handle",
            "location": 77,
            "return": [
                "FakeStreamWriter"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "list[str]"
                ]
            }
        },
        "TestConnectionHandler._print_mail": {
            "name": "_print_mail",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ]
            }
        },
        "TestConnectionHandler.test_greeting": {
            "name": "test_greeting",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_invalid_line": {
            "name": "test_invalid_line",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_unrecognized_command": {
            "name": "test_unrecognized_command",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_command_line_too_long": {
            "name": "test_command_line_too_long",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_command_line_length_ok": {
            "name": "test_command_line_length_ok",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_noop": {
            "name": "test_noop",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_noop__any_case": {
            "name": "test_noop__any_case",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_noop__with_space": {
            "name": "test_noop__with_space",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_noop__with_arguments": {
            "name": "test_noop__with_arguments",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_quit": {
            "name": "test_quit",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_quit_with_arguments": {
            "name": "test_quit_with_arguments",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_quit__without_closing_channel": {
            "name": "test_quit__without_closing_channel",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_helo": {
            "name": "test_helo",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_helo__no_domain": {
            "name": "test_helo__no_domain",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_ehlo": {
            "name": "test_ehlo",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_ehlo__no_domain": {
            "name": "test_ehlo__no_domain",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_mail": {
            "name": "test_mail",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_mail_with_helo": {
            "name": "test_mail_with_helo",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_mail_no_from": {
            "name": "test_mail_no_from",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_mail_invalid_sender": {
            "name": "test_mail_invalid_sender",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_mail_without_ehlo": {
            "name": "test_mail_without_ehlo",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_mail_twice": {
            "name": "test_mail_twice",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rcpt": {
            "name": "test_rcpt",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rcpt_multiple": {
            "name": "test_rcpt_multiple",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rcpt_no_to": {
            "name": "test_rcpt_no_to",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rcpt_invalid_address": {
            "name": "test_rcpt_invalid_address",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rcpt_without_mail": {
            "name": "test_rcpt_without_mail",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_data": {
            "name": "test_data",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_data_with_arguments": {
            "name": "test_data_with_arguments",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_data_without_rcpt": {
            "name": "test_data_without_rcpt",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_complete_mail": {
            "name": "test_complete_mail",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_two_transactions": {
            "name": "test_two_transactions",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rset": {
            "name": "test_rset",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rset_with_argument": {
            "name": "test_rset_with_argument",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_transaction_after_rset": {
            "name": "test_transaction_after_rset",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_rcpt_after_rset": {
            "name": "test_rcpt_after_rset",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_vrfy": {
            "name": "test_vrfy",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_mail_printed": {
            "name": "test_mail_printed",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_8bit_command": {
            "name": "test_8bit_command",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_8bit_text": {
            "name": "test_8bit_text",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionHandler.test_data_line_too_long": {
            "name": "test_data_line_too_long",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FakeSMTPd-master/test_fakesmtpd/mbox.py": {
        "TestWriteMboxMail.test_print": {
            "name": "test_print",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FakeSMTPd-master/test_fakesmtpd/syntax.py": {
        "TestAddressLiteral.test_missing_brackets": {
            "name": "test_missing_brackets",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_invalid_literal": {
            "name": "test_invalid_literal",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_valid_ipv4": {
            "name": "test_valid_ipv4",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_ipv4_out_of_bounds": {
            "name": "test_ipv4_out_of_bounds",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_valid_full_ipv6": {
            "name": "test_valid_full_ipv6",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_valid_comp_ipv6": {
            "name": "test_valid_comp_ipv6",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_comp_ipv6__too_many_groups": {
            "name": "test_comp_ipv6__too_many_groups",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_valid_full_ipv6v4": {
            "name": "test_valid_full_ipv6v4",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_full_ipv6v4__invalid_ip4": {
            "name": "test_full_ipv6v4__invalid_ip4",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_valid_comp_ipv6v4": {
            "name": "test_valid_comp_ipv6v4",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_comp_ipv6v4__too_many_groups": {
            "name": "test_comp_ipv6v4__too_many_groups",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_comp_ipv6v4__ends_with_empty_group": {
            "name": "test_comp_ipv6v4__ends_with_empty_group",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressLiteral.test_comp_ipv6v4__invalid_ip4": {
            "name": "test_comp_ipv6v4__invalid_ip4",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_mailbox": {
            "name": "test_mailbox",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_mailbox_with_rest": {
            "name": "test_mailbox_with_rest",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_quoted_string": {
            "name": "test_quoted_string",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_empty_path": {
            "name": "test_empty_path",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_invalid": {
            "name": "test_invalid",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_missing_at": {
            "name": "test_missing_at",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_invalid_no_local_part": {
            "name": "test_invalid_no_local_part",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_invalid_local_part": {
            "name": "test_invalid_local_part",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_no_domain": {
            "name": "test_no_domain",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTest.test_invalid_domain": {
            "name": "test_invalid_domain",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReversePathTest.test_empty_path": {
            "name": "test_empty_path",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReversePathTest.test_empty_path_with_rest": {
            "name": "test_empty_path_with_rest",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReversePathTest.test_mailbox": {
            "name": "test_mailbox",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReversePathTest.test_invalid": {
            "name": "test_invalid",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FakeSMTPd-master/test_fakesmtpd/__init__.py": {}
}
{
    "IDMappingService-master/docsource/conf.py": {},
    "IDMappingService-master/src/app.py": {},
    "IDMappingService-master/src/jgikbase/__init__.py": {},
    "IDMappingService-master/src/jgikbase/idmapping/builder.py": {
        "_SometimesMyPyIsReallyStupid.build_lookup": {
            "name": "build_lookup",
            "location": 26,
            "return": [
                "UserLookup"
            ],
            "arguments": {
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "IDMappingBuilder.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDMappingBuilder.build_local_user_lookup": {
            "name": "build_local_user_lookup",
            "location": 51,
            "return": [
                "LocalUserLookup"
            ],
            "arguments": {
                "self": [],
                "cfgpath": [
                    "Path"
                ]
            }
        },
        "IDMappingBuilder._set_cfg": {
            "name": "_set_cfg",
            "location": 62,
            "return": [
                "KBaseConfig"
            ],
            "arguments": {
                "self": [],
                "cfgpath": []
            }
        },
        "IDMappingBuilder.get_cfg": {
            "name": "get_cfg",
            "location": 67,
            "return": [
                "KBaseConfig"
            ],
            "arguments": {
                "self": [],
                "cfgpath": [
                    "Path"
                ]
            }
        },
        "IDMappingBuilder._build_storage": {
            "name": "_build_storage",
            "location": 76,
            "return": [
                "IDMappingStorage"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDMappingBuilder.build_id_mapping_system": {
            "name": "build_id_mapping_system",
            "location": 93,
            "return": [
                "IDMapper"
            ],
            "arguments": {
                "self": [],
                "cfgpath": [
                    "Path"
                ]
            }
        },
        "IDMappingBuilder.build_user_lookup": {
            "name": "build_user_lookup",
            "location": 110,
            "return": [
                "UserLookup"
            ],
            "arguments": {
                "self": [],
                "config_authsource_id": [
                    "AuthsourceID"
                ],
                "factory_module": [
                    "str"
                ],
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/cli.py": {
        "IDMappingCLI.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "IDMappingBuilder"
                ],
                "args": [
                    "List[str]"
                ],
                "stdout": [
                    "IO[str]"
                ],
                "stderr": [
                    "IO[str]"
                ]
            }
        },
        "IDMappingCLI.execute": {
            "name": "execute",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDMappingCLI._check_inputs": {
            "name": "_check_inputs",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "IDMappingCLI._list_users": {
            "name": "_list_users",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "local_user_handler": [
                    "LocalUserLookup"
                ],
                "verbose": []
            }
        },
        "IDMappingCLI._create_user": {
            "name": "_create_user",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "local_user_handler": [
                    "LocalUserLookup"
                ],
                "username": [
                    "Username"
                ],
                "verbose": []
            }
        },
        "IDMappingCLI._new_token": {
            "name": "_new_token",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "local_user_handler": [
                    "LocalUserLookup"
                ],
                "username": [
                    "Username"
                ],
                "verbose": []
            }
        },
        "IDMappingCLI._admin": {
            "name": "_admin",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "local_user_handler": [
                    "LocalUserLookup"
                ],
                "username": [
                    "Username"
                ],
                "admin": [
                    "str"
                ],
                "verbose": []
            }
        },
        "IDMappingCLI._parse_args": {
            "name": "_parse_args",
            "location": 156,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDMappingCLI._handle_error": {
            "name": "_handle_error",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "exception": [],
                "verbose": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/config.py": {
        "KBaseConfig.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfgfile": [
                    "Path"
                ]
            }
        },
        "KBaseConfig._get_cfg": {
            "name": "_get_cfg",
            "location": 144,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "cfgfile": [
                    "Path"
                ]
            }
        },
        "KBaseConfig._get_cfg_from_env": {
            "name": "_get_cfg_from_env",
            "location": 163,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "KBaseConfig._get_string": {
            "name": "_get_string",
            "location": 172,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "param_name": [
                    "str"
                ],
                "config": [
                    "Dict[(str, str)]"
                ],
                "raise_on_err": [
                    "bool"
                ]
            }
        },
        "KBaseConfig._get_authsource_ids": {
            "name": "_get_authsource_ids",
            "location": 184,
            "return": [
                "Set[AuthsourceID]"
            ],
            "arguments": {
                "self": [],
                "param_name": [
                    "str"
                ],
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "KBaseConfig._get_lookup_configs": {
            "name": "_get_lookup_configs",
            "location": 204,
            "return": [
                "Dict[(AuthsourceID, Tuple[(str, Dict[(str, str)])])]"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/__init__.py": {},
    "IDMappingService-master/src/jgikbase/idmapping/core/arg_check.py": {
        "not_none": {
            "name": "not_none",
            "location": 13,
            "return": [],
            "arguments": {
                "obj": [
                    "object"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "check_string": {
            "name": "check_string",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "legal_characters": [
                    "str"
                ],
                "max_len": [
                    "int"
                ]
            }
        },
        "no_Nones_in_iterable": {
            "name": "no_Nones_in_iterable",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/core/errors.py": {
        "ErrorType.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "error_code": [],
                "error_type": []
            }
        },
        "IDMappingError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_type": [
                    "ErrorType"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "NoDataException.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_type": [
                    "ErrorType"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "NoSuchUserError.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "NoSuchNamespaceError.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "NoSuchAuthsourceError.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "NamespaceExistsError.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "UserExistsError.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "AuthenticationError.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_type": [
                    "ErrorType"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "NoTokenError.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "InvalidTokenError.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "UnauthorizedError.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "MissingParameterError.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "IllegalParameterError.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "IllegalUsernameError.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/core/mapper.py": {
        "_log": {
            "name": "_log",
            "location": 15,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "IDMapper.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_lookup": [
                    "UserLookupSet"
                ],
                "admin_authsources": [
                    "Set[AuthsourceID]"
                ],
                "storage": [
                    "IDMappingStorage"
                ]
            }
        },
        "IDMapper._check_sys_admin": {
            "name": "_check_sys_admin",
            "location": 47,
            "return": [
                "User"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ]
            }
        },
        "IDMapper.create_namespace": {
            "name": "create_namespace",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ],
                "namespace_id": [
                    "NamespaceID"
                ]
            }
        },
        "IDMapper._check_valid_user": {
            "name": "_check_valid_user",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "IDMapper.add_user_to_namespace": {
            "name": "add_user_to_namespace",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ],
                "namespace_id": [
                    "NamespaceID"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "IDMapper.remove_user_from_namespace": {
            "name": "remove_user_from_namespace",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ],
                "namespace_id": [
                    "NamespaceID"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "IDMapper._check_authed_for_ns_get": {
            "name": "_check_authed_for_ns_get",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ],
                "namespace_id": [
                    "NamespaceID"
                ]
            }
        },
        "IDMapper._check_authed_for_ns": {
            "name": "_check_authed_for_ns",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ],
                "ns": [
                    "Namespace"
                ]
            }
        },
        "IDMapper.set_namespace_publicly_mappable": {
            "name": "set_namespace_publicly_mappable",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ],
                "namespace_id": [
                    "NamespaceID"
                ],
                "publicly_mappable": [
                    "bool"
                ]
            }
        },
        "IDMapper.get_namespace": {
            "name": "get_namespace",
            "location": 206,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ]
            }
        },
        "IDMapper.get_namespaces": {
            "name": "get_namespaces",
            "location": 237,
            "return": [
                "Tuple[(Set[NamespaceID], Set[NamespaceID])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDMapper.create_mapping": {
            "name": "create_mapping",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ],
                "administrative_oid": [
                    "ObjectID"
                ],
                "oid": [
                    "ObjectID"
                ]
            }
        },
        "IDMapper.remove_mapping": {
            "name": "remove_mapping",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ],
                "administrative_oid": [
                    "ObjectID"
                ],
                "oid": [
                    "ObjectID"
                ]
            }
        },
        "IDMapper.get_mappings": {
            "name": "get_mappings",
            "location": 337,
            "return": [
                "Tuple[(Set[ObjectID], Set[ObjectID])]"
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "ObjectID"
                ],
                "ns_filter": [
                    "Iterable[NamespaceID]"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/core/object_id.py": {
        "NamespaceID.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "NamespaceID.__eq__": {
            "name": "__eq__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NamespaceID.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "is_publicly_mappable": [
                    "bool"
                ],
                "authed_users": [
                    "Set[User]"
                ]
            }
        },
        "Namespace.without_users": {
            "name": "without_users",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Namespace.__hash__": {
            "name": "__hash__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjectID.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "data_id": [
                    "str"
                ]
            }
        },
        "ObjectID.__eq__": {
            "name": "__eq__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ObjectID.__hash__": {
            "name": "__hash__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/core/tokens.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 68,
            "return": [
                "Token"
            ],
            "arguments": {}
        },
        "HashedToken.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_hash": [
                    "str"
                ]
            }
        },
        "HashedToken.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HashedToken.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "Token.get_hashed_token": {
            "name": "get_hashed_token",
            "location": 53,
            "return": [
                "HashedToken"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Token.__hash__": {
            "name": "__hash__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/core/user.py": {
        "AuthsourceID.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "AuthsourceID.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AuthsourceID.__hash__": {
            "name": "__hash__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Username.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Username.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Username.__hash__": {
            "name": "__hash__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "username": [
                    "Username"
                ]
            }
        },
        "User.__eq__": {
            "name": "__eq__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "User.__hash__": {
            "name": "__hash__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/core/user_lookup.py": {
        "UserLookup.get_authsource_id": {
            "name": "get_authsource_id",
            "location": 20,
            "return": [
                "AuthsourceID"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserLookup.get_user": {
            "name": "get_user",
            "location": 27,
            "return": [
                "Tuple[(User, bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Token"
                ]
            }
        },
        "UserLookup.is_valid_user": {
            "name": "is_valid_user",
            "location": 44,
            "return": [
                "Tuple[(bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        },
        "UserLookupSet.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_lookup": [
                    "Set[UserLookup]"
                ],
                "cache_timer": [
                    "Callable[([], int)]"
                ],
                "cache_max_size": [
                    "int"
                ],
                "cache_user_expiration": [
                    "int"
                ],
                "cache_is_valid_expiration": [
                    "int"
                ]
            }
        },
        "UserLookupSet._check_authsource_id": {
            "name": "_check_authsource_id",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ]
            }
        },
        "UserLookupSet._calc_ttl": {
            "name": "_calc_ttl",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "rel": []
            }
        },
        "UserLookupSet.get_user": {
            "name": "get_user",
            "location": 112,
            "return": [
                "Tuple[(User, bool)]"
            ],
            "arguments": {
                "self": [],
                "authsource_id": [
                    "AuthsourceID"
                ],
                "token": [
                    "Token"
                ]
            }
        },
        "UserLookupSet.is_valid_user": {
            "name": "is_valid_user",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ]
            }
        },
        "LocalUserLookup.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "IDMappingStorage"
                ]
            }
        },
        "LocalUserLookup.get_authsource_id": {
            "name": "get_authsource_id",
            "location": 170,
            "return": [
                "AuthsourceID"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalUserLookup.get_user": {
            "name": "get_user",
            "location": 173,
            "return": [
                "Tuple[(User, bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Token"
                ]
            }
        },
        "LocalUserLookup.is_valid_user": {
            "name": "is_valid_user",
            "location": 178,
            "return": [
                "Tuple[(bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        },
        "LocalUserLookup.create_user": {
            "name": "create_user",
            "location": 182,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        },
        "LocalUserLookup.new_token": {
            "name": "new_token",
            "location": 195,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        },
        "LocalUserLookup.set_user_as_admin": {
            "name": "set_user_as_admin",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ],
                "admin": [
                    "bool"
                ]
            }
        },
        "LocalUserLookup.get_users": {
            "name": "get_users",
            "location": 220,
            "return": [
                "Dict[(Username, bool)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/core/__init__.py": {},
    "IDMappingService-master/src/jgikbase/idmapping/service/mapper_service.py": {
        "epoch_ms": {
            "name": "epoch_ms",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "get_ip_address": {
            "name": "get_ip_address",
            "location": 59,
            "return": [],
            "arguments": {
                "request": [],
                "ignore_ip_headers": []
            }
        },
        "_log": {
            "name": "_log",
            "location": 71,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "_format_exception": {
            "name": "_format_exception",
            "location": 75,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "_log_exception": {
            "name": "_log_exception",
            "location": 80,
            "return": [],
            "arguments": {
                "err": [
                    "Exception"
                ]
            }
        },
        "_format_error": {
            "name": "_format_error",
            "location": 84,
            "return": [],
            "arguments": {
                "err": [
                    "Exception"
                ],
                "httpcode": [
                    "int"
                ],
                "errtype": [
                    "ErrorType"
                ],
                "errprefix": [
                    "str"
                ]
            }
        },
        "format_ip_headers": {
            "name": "format_ip_headers",
            "location": 96,
            "return": [],
            "arguments": {
                "request": [],
                "ignore_ip_headers": []
            }
        },
        "_get_auth": {
            "name": "_get_auth",
            "location": 112,
            "return": [
                "Tuple[(Optional[AuthsourceID], Optional[Token])]"
            ],
            "arguments": {
                "request": [],
                "required": []
            }
        },
        "_users_to_jsonable": {
            "name": "_users_to_jsonable",
            "location": 130,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "users": [
                    "List[User]"
                ]
            }
        },
        "_objids_to_jsonable": {
            "name": "_objids_to_jsonable",
            "location": 134,
            "return": [],
            "arguments": {
                "oids": [
                    "Set[ObjectID]"
                ]
            }
        },
        "_get_object_id_dict_from_json": {
            "name": "_get_object_id_dict_from_json",
            "location": 139,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "request": []
            }
        },
        "_get_object_id_list_from_json": {
            "name": "_get_object_id_list_from_json",
            "location": 160,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "_configure_loggers": {
            "name": "_configure_loggers",
            "location": 199,
            "return": [],
            "arguments": {
                "logstream": [
                    "IO[str]"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 209,
            "return": [],
            "arguments": {
                "builder": [
                    "IDMappingBuilder"
                ],
                "logstream": [
                    "IO[str]"
                ]
            }
        },
        "JSONFlaskLogFormatter.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "service_name": []
            }
        },
        "JSONFlaskLogFormatter.format": {
            "name": "format",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "create_app.preprocess_request": {
            "name": "preprocess_request",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "create_app.postprocess_request": {
            "name": "postprocess_request",
            "location": 228,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "create_app.root": {
            "name": "root",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "create_app.create_namespace": {
            "name": "create_namespace",
            "location": 247,
            "return": [],
            "arguments": {
                "namespace": []
            }
        },
        "create_app.add_user_to_namespace": {
            "name": "add_user_to_namespace",
            "location": 254,
            "return": [],
            "arguments": {
                "namespace": [],
                "authsource": [],
                "user": []
            }
        },
        "create_app.remove_user_from_namespace": {
            "name": "remove_user_from_namespace",
            "location": 262,
            "return": [],
            "arguments": {
                "namespace": [],
                "authsource": [],
                "user": []
            }
        },
        "create_app.set_namespace_params": {
            "name": "set_namespace_params",
            "location": 273,
            "return": [],
            "arguments": {
                "namespace": []
            }
        },
        "create_app.get_namespace": {
            "name": "get_namespace",
            "location": 288,
            "return": [],
            "arguments": {
                "namespace": []
            }
        },
        "create_app.get_namespaces": {
            "name": "get_namespaces",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "create_app.create_mapping": {
            "name": "create_mapping",
            "location": 304,
            "return": [],
            "arguments": {
                "admin_ns": [],
                "other_ns": []
            }
        },
        "create_app.remove_mapping": {
            "name": "remove_mapping",
            "location": 317,
            "return": [],
            "arguments": {
                "admin_ns": [],
                "other_ns": []
            }
        },
        "create_app.get_mappings": {
            "name": "get_mappings",
            "location": 330,
            "return": [],
            "arguments": {
                "ns": []
            }
        },
        "create_app.general_app_errors": {
            "name": "general_app_errors",
            "location": 357,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "create_app.json_errors": {
            "name": "json_errors",
            "location": 363,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "create_app.authentication_errors": {
            "name": "authentication_errors",
            "location": 369,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "create_app.authorization_errors": {
            "name": "authorization_errors",
            "location": 375,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "create_app.no_data_errors": {
            "name": "no_data_errors",
            "location": 381,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "create_app.not_found_errors": {
            "name": "not_found_errors",
            "location": 387,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "create_app.method_not_allowed": {
            "name": "method_not_allowed",
            "location": 393,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "create_app.all_errors": {
            "name": "all_errors",
            "location": 399,
            "return": [],
            "arguments": {
                "err": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/service/__init__.py": {},
    "IDMappingService-master/src/jgikbase/idmapping/storage/errors.py": {},
    "IDMappingService-master/src/jgikbase/idmapping/storage/id_mapping_storage.py": {
        "IDMappingStorage.create_local_user": {
            "name": "create_local_user",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ],
                "token": [
                    "HashedToken"
                ]
            }
        },
        "IDMappingStorage.set_local_user_as_admin": {
            "name": "set_local_user_as_admin",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ],
                "admin": [
                    "bool"
                ]
            }
        },
        "IDMappingStorage.update_local_user_token": {
            "name": "update_local_user_token",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ],
                "token": [
                    "HashedToken"
                ]
            }
        },
        "IDMappingStorage.get_user": {
            "name": "get_user",
            "location": 66,
            "return": [
                "Tuple[(Username, bool)]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "HashedToken"
                ]
            }
        },
        "IDMappingStorage.get_users": {
            "name": "get_users",
            "location": 80,
            "return": [
                "Dict[(Username, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDMappingStorage.user_exists": {
            "name": "user_exists",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        },
        "IDMappingStorage.create_namespace": {
            "name": "create_namespace",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ]
            }
        },
        "IDMappingStorage.add_user_to_namespace": {
            "name": "add_user_to_namespace",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "admin_user": [
                    "User"
                ]
            }
        },
        "IDMappingStorage.remove_user_from_namespace": {
            "name": "remove_user_from_namespace",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "admin_user": [
                    "User"
                ]
            }
        },
        "IDMappingStorage.set_namespace_publicly_mappable": {
            "name": "set_namespace_publicly_mappable",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "publicly_mappable": [
                    "bool"
                ]
            }
        },
        "IDMappingStorage.get_namespaces": {
            "name": "get_namespaces",
            "location": 152,
            "return": [
                "Set[Namespace]"
            ],
            "arguments": {
                "self": [],
                "nids": [
                    "Iterable[NamespaceID]"
                ]
            }
        },
        "IDMappingStorage.get_namespace": {
            "name": "get_namespace",
            "location": 164,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ]
            }
        },
        "IDMappingStorage.add_mapping": {
            "name": "add_mapping",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "primary_OID": [
                    "ObjectID"
                ],
                "secondary_OID": [
                    "ObjectID"
                ]
            }
        },
        "IDMappingStorage.remove_mapping": {
            "name": "remove_mapping",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "primary_OID": [
                    "ObjectID"
                ],
                "secondary_OID": [
                    "ObjectID"
                ]
            }
        },
        "IDMappingStorage.find_mappings": {
            "name": "find_mappings",
            "location": 201,
            "return": [
                "Tuple[(Set[ObjectID], Set[ObjectID])]"
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "ObjectID"
                ],
                "ns_filter": [
                    "Iterable[NamespaceID]"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/storage/__init__.py": {},
    "IDMappingService-master/src/jgikbase/idmapping/storage/mongo/id_mapping_mongo_storage.py": {
        "IDMappingMongoStorage.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Database"
                ]
            }
        },
        "IDMappingMongoStorage._ensure_indexes": {
            "name": "_ensure_indexes",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IDMappingMongoStorage._check_schema": {
            "name": "_check_schema",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IDMappingMongoStorage.create_local_user": {
            "name": "create_local_user",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ],
                "token": [
                    "HashedToken"
                ]
            }
        },
        "IDMappingMongoStorage.set_local_user_as_admin": {
            "name": "set_local_user_as_admin",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ],
                "admin": [
                    "bool"
                ]
            }
        },
        "IDMappingMongoStorage._get_duplicate_location": {
            "name": "_get_duplicate_location",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "e": [
                    "DuplicateKeyError"
                ]
            }
        },
        "IDMappingMongoStorage.update_local_user_token": {
            "name": "update_local_user_token",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ],
                "token": [
                    "HashedToken"
                ]
            }
        },
        "IDMappingMongoStorage.get_user": {
            "name": "get_user",
            "location": 219,
            "return": [
                "Tuple[(Username, bool)]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "HashedToken"
                ]
            }
        },
        "IDMappingMongoStorage.get_users": {
            "name": "get_users",
            "location": 231,
            "return": [
                "Dict[(Username, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDMappingMongoStorage.user_exists": {
            "name": "user_exists",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        },
        "IDMappingMongoStorage.create_namespace": {
            "name": "create_namespace",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ]
            }
        },
        "IDMappingMongoStorage.get_namespace": {
            "name": "get_namespace",
            "location": 256,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ]
            }
        },
        "IDMappingMongoStorage._to_user_set": {
            "name": "_to_user_set",
            "location": 267,
            "return": [
                "Set[User]"
            ],
            "arguments": {
                "self": [],
                "userdocs": []
            }
        },
        "IDMappingMongoStorage.add_user_to_namespace": {
            "name": "add_user_to_namespace",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "admin_user": [
                    "User"
                ]
            }
        },
        "IDMappingMongoStorage.remove_user_from_namespace": {
            "name": "remove_user_from_namespace",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "admin_user": [
                    "User"
                ]
            }
        },
        "IDMappingMongoStorage._modify_namespace_users": {
            "name": "_modify_namespace_users",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "add": [
                    "bool"
                ],
                "namespace_id": [],
                "admin_user": []
            }
        },
        "IDMappingMongoStorage.set_namespace_publicly_mappable": {
            "name": "set_namespace_publicly_mappable",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace_id": [
                    "NamespaceID"
                ],
                "publicly_mappable": [
                    "bool"
                ]
            }
        },
        "IDMappingMongoStorage.get_namespaces": {
            "name": "get_namespaces",
            "location": 311,
            "return": [
                "Set[Namespace]"
            ],
            "arguments": {
                "self": [],
                "nids": [
                    "Iterable[NamespaceID]"
                ]
            }
        },
        "IDMappingMongoStorage._to_ns": {
            "name": "_to_ns",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "nsdoc": []
            }
        },
        "IDMappingMongoStorage.add_mapping": {
            "name": "add_mapping",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "primary_OID": [
                    "ObjectID"
                ],
                "secondary_OID": [
                    "ObjectID"
                ]
            }
        },
        "IDMappingMongoStorage.to_mapping_mongo_doc": {
            "name": "to_mapping_mongo_doc",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "primary_OID": [],
                "secondary_OID": []
            }
        },
        "IDMappingMongoStorage.remove_mapping": {
            "name": "remove_mapping",
            "location": 351,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "primary_OID": [
                    "ObjectID"
                ],
                "secondary_OID": [
                    "ObjectID"
                ]
            }
        },
        "IDMappingMongoStorage.find_mappings": {
            "name": "find_mappings",
            "location": 361,
            "return": [
                "Tuple[(Set[ObjectID], Set[ObjectID])]"
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "ObjectID"
                ],
                "ns_filter": [
                    "Iterable[NamespaceID]"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/storage/mongo/__init__.py": {},
    "IDMappingService-master/src/jgikbase/idmapping/userlookup/jgi_user_lookup_prototype.py": {
        "build_lookup": {
            "name": "build_lookup",
            "location": 61,
            "return": [
                "UserLookup"
            ],
            "arguments": {
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "JGIUserLookup.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jgi_auth_url": [
                    "str"
                ]
            }
        },
        "JGIUserLookup.get_authsource_id": {
            "name": "get_authsource_id",
            "location": 37,
            "return": [
                "AuthsourceID"
            ],
            "arguments": {
                "self": []
            }
        },
        "JGIUserLookup.get_user": {
            "name": "get_user",
            "location": 40,
            "return": [
                "Tuple[(User, bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Token"
                ]
            }
        },
        "JGIUserLookup.is_valid_user": {
            "name": "is_valid_user",
            "location": 51,
            "return": [
                "Tuple[(bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/userlookup/kbase_user_lookup.py": {
        "build_lookup": {
            "name": "build_lookup",
            "location": 99,
            "return": [
                "UserLookup"
            ],
            "arguments": {
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "KBaseUserLookup.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kbase_auth_url": [
                    "str"
                ],
                "kbase_token": [
                    "Token"
                ],
                "kbase_system_admin": [
                    "str"
                ]
            }
        },
        "KBaseUserLookup.get_authsource_id": {
            "name": "get_authsource_id",
            "location": 57,
            "return": [
                "AuthsourceID"
            ],
            "arguments": {
                "self": []
            }
        },
        "KBaseUserLookup._check_error": {
            "name": "_check_error",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "KBaseUserLookup.get_user": {
            "name": "get_user",
            "location": 77,
            "return": [
                "Tuple[(User, bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Token"
                ]
            }
        },
        "KBaseUserLookup.is_valid_user": {
            "name": "is_valid_user",
            "location": 90,
            "return": [
                "Tuple[(bool, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Username"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/idmapping/userlookup/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/idmapping/builder_test.py": {
        "test_build_user_lookup": {
            "name": "test_build_user_lookup",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_build_user_lookup_fail_input": {
            "name": "test_build_user_lookup_fail_input",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_build_user_lookup_fail_import": {
            "name": "test_build_user_lookup_fail_import",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_build_user_lookup_fail_init": {
            "name": "test_build_user_lookup_fail_init",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_build_user_lookup_fail_init_unexpected": {
            "name": "test_build_user_lookup_fail_init_unexpected",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_build_user_lookup_fail_id_mismatch": {
            "name": "test_build_user_lookup_fail_id_mismatch",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "fail_build_user_lookup": {
            "name": "fail_build_user_lookup",
            "location": 53,
            "return": [],
            "arguments": {
                "asid": [],
                "module": [],
                "cfg": [],
                "expected": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/cli_test.py": {
        "test_init_fail_None_input": {
            "name": "test_init_fail_None_input",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "fail_init": {
            "name": "fail_init",
            "location": 28,
            "return": [],
            "arguments": {
                "builder": [],
                "args": [],
                "out": [],
                "err": [],
                "expected": []
            }
        },
        "test_no_input": {
            "name": "test_no_input",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_too_much_input": {
            "name": "test_too_much_input",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_fail_build": {
            "name": "test_fail_build",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_fail_build_verbose": {
            "name": "test_fail_build_verbose",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_list_users": {
            "name": "test_list_users",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_fail_list_users": {
            "name": "test_fail_list_users",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_fail_list_users_verbose": {
            "name": "test_fail_list_users_verbose",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_alternate_config_location": {
            "name": "test_alternate_config_location",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_fail_user_no_op": {
            "name": "test_fail_user_no_op",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "test_fail_user_multi_op": {
            "name": "test_fail_user_multi_op",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_fail_user_illegal_admin_value": {
            "name": "test_fail_user_illegal_admin_value",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "test_fail_user_illegal_username": {
            "name": "test_fail_user_illegal_username",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_fail_user_illegal_username_verbose": {
            "name": "test_fail_user_illegal_username_verbose",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "test_user_set_admin": {
            "name": "test_user_set_admin",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "check_user_set_admin": {
            "name": "check_user_set_admin",
            "location": 246,
            "return": [],
            "arguments": {
                "adminstr": [],
                "adminbool": []
            }
        },
        "test_user_fail_set_admin": {
            "name": "test_user_fail_set_admin",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "test_user_fail_set_admin_verbose": {
            "name": "test_user_fail_set_admin_verbose",
            "location": 279,
            "return": [],
            "arguments": {}
        },
        "test_user_create": {
            "name": "test_user_create",
            "location": 298,
            "return": [],
            "arguments": {}
        },
        "test_user_fail_create": {
            "name": "test_user_fail_create",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "test_user_fail_create_verbose": {
            "name": "test_user_fail_create_verbose",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "test_user_new_token": {
            "name": "test_user_new_token",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "test_user_fail_new_token": {
            "name": "test_user_fail_new_token",
            "location": 370,
            "return": [],
            "arguments": {}
        },
        "test_user_fail_new_token_verbose": {
            "name": "test_user_fail_new_token_verbose",
            "location": 385,
            "return": [],
            "arguments": {}
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/config_test.py": {
        "mock_file": {
            "name": "mock_file",
            "location": 10,
            "return": [],
            "arguments": {
                "path": [],
                "contents": []
            }
        },
        "mock_path_to_file": {
            "name": "mock_path_to_file",
            "location": 20,
            "return": [
                "Path"
            ],
            "arguments": {
                "path": [],
                "contents": [],
                "is_file": []
            }
        },
        "test_kb_config_get_env": {
            "name": "test_kb_config_get_env",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_minimal_config": {
            "name": "test_kb_config_minimal_config",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_minimal_config_whitespace": {
            "name": "test_kb_config_minimal_config_whitespace",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_maximal_config": {
            "name": "test_kb_config_maximal_config",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_not_file": {
            "name": "test_kb_config_fail_not_file",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_corrupt": {
            "name": "test_kb_config_fail_corrupt",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_no_section": {
            "name": "test_kb_config_fail_no_section",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_no_mongo_host": {
            "name": "test_kb_config_fail_no_mongo_host",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_no_mongo_db": {
            "name": "test_kb_config_fail_no_mongo_db",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_user_no_pwd": {
            "name": "test_kb_config_fail_user_no_pwd",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_pwd_no_user": {
            "name": "test_kb_config_fail_pwd_no_user",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_illegal_authsource": {
            "name": "test_kb_config_fail_illegal_authsource",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_illegal_authsource_admin": {
            "name": "test_kb_config_fail_illegal_authsource_admin",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_auth_source_unexpected_key": {
            "name": "test_kb_config_fail_auth_source_unexpected_key",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_kb_config_fail_auth_source_missing_factory": {
            "name": "test_kb_config_fail_auth_source_missing_factory",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "fail_kb_config": {
            "name": "fail_kb_config",
            "location": 225,
            "return": [],
            "arguments": {
                "path": [
                    "Path"
                ],
                "expected": [
                    "Exception"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/mongo_controller.py": {
        "main": {
            "name": "main",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "MongoController.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mongoexe": [
                    "Path"
                ],
                "root_temp_dir": [
                    "Path"
                ],
                "use_wired_tiger": [
                    "bool"
                ]
            }
        },
        "MongoController.destroy": {
            "name": "destroy",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delete_temp_files": [
                    "bool"
                ]
            }
        },
        "MongoController.clear_database": {
            "name": "clear_database",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": [],
                "drop_indexes": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/test_utils.py": {
        "get_mongo_exe": {
            "name": "get_mongo_exe",
            "location": 24,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "get_temp_dir": {
            "name": "get_temp_dir",
            "location": 28,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "get_use_wired_tiger": {
            "name": "get_use_wired_tiger",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_delete_temp_files": {
            "name": "get_delete_temp_files",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_get_test_config_file_path": {
            "name": "_get_test_config_file_path",
            "location": 40,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "_get_test_property": {
            "name": "_get_test_property",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "prop": [
                    "str"
                ]
            }
        },
        "find_free_port": {
            "name": "find_free_port",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "assert_exception_correct": {
            "name": "assert_exception_correct",
            "location": 71,
            "return": [],
            "arguments": {
                "got": [
                    "Exception"
                ],
                "expected": [
                    "Exception"
                ]
            }
        },
        "assert_ms_epoch_close_to_now": {
            "name": "assert_ms_epoch_close_to_now",
            "location": 76,
            "return": [],
            "arguments": {
                "time_": []
            }
        },
        "assert_json_error_correct": {
            "name": "assert_json_error_correct",
            "location": 85,
            "return": [],
            "arguments": {
                "got": [],
                "expected": []
            }
        },
        "TerstFermerttr.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TerstFermerttr.format": {
            "name": "format",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/user_lookup_test_module.py": {
        "build_lookup": {
            "name": "build_lookup",
            "location": 18,
            "return": [],
            "arguments": {
                "cfg": []
            }
        },
        "FakeUserLookup.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "FakeUserLookup.get_authsource_id": {
            "name": "get_authsource_id",
            "location": 14,
            "return": [
                "AuthsourceID"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/idmapping/core/arg_check_test.py": {
        "test_not_none_pass": {
            "name": "test_not_none_pass",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_not_none_fail": {
            "name": "test_not_none_fail",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_check_string_pass": {
            "name": "test_check_string_pass",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_check_string_fail": {
            "name": "test_check_string_fail",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "fail_check_string": {
            "name": "fail_check_string",
            "location": 48,
            "return": [],
            "arguments": {
                "string": [],
                "name": [],
                "illegal_characters": [],
                "max_len": [],
                "expected": []
            }
        },
        "test_no_Nones_in_iterable_pass": {
            "name": "test_no_Nones_in_iterable_pass",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_no_Nones_in_iterable_fail": {
            "name": "test_no_Nones_in_iterable_fail",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "fail_no_Nones_in_iterable": {
            "name": "fail_no_Nones_in_iterable",
            "location": 67,
            "return": [],
            "arguments": {
                "iterable": [],
                "name": [],
                "expected": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/core/mapper_test.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "log_collector": {
            "name": "log_collector",
            "location": 30,
            "return": [],
            "arguments": {
                "init_logger": []
            }
        },
        "assert_logs_correct": {
            "name": "assert_logs_correct",
            "location": 36,
            "return": [],
            "arguments": {
                "logs": [],
                "logstring": []
            }
        },
        "test_init_fail": {
            "name": "test_init_fail",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "fail_init": {
            "name": "fail_init",
            "location": 56,
            "return": [],
            "arguments": {
                "handlers": [],
                "admin_authsources": [],
                "storage": [],
                "expected": []
            }
        },
        "test_create_namespace": {
            "name": "test_create_namespace",
            "location": 62,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_create_namespace_fail_None_input": {
            "name": "test_create_namespace_fail_None_input",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_create_namespace_fail_no_admin_authsource_provider": {
            "name": "test_create_namespace_fail_no_admin_authsource_provider",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_create_namespace_fail_not_admin": {
            "name": "test_create_namespace_fail_not_admin",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "fail_create_namespace": {
            "name": "fail_create_namespace",
            "location": 114,
            "return": [],
            "arguments": {
                "idm": [],
                "authsource": [],
                "token": [],
                "namespace_id": [],
                "expected": []
            }
        },
        "test_add_user_to_namespace": {
            "name": "test_add_user_to_namespace",
            "location": 120,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_add_user_to_namespace_fail_None_input": {
            "name": "test_add_user_to_namespace_fail_None_input",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_add_user_to_namespace_fail_no_admin_authsource_provider": {
            "name": "test_add_user_to_namespace_fail_no_admin_authsource_provider",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_add_user_to_namespace_fail_not_admin": {
            "name": "test_add_user_to_namespace_fail_not_admin",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_add_user_to_namespace_fail_no_such_user": {
            "name": "test_add_user_to_namespace_fail_no_such_user",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "fail_add_user_to_namespace": {
            "name": "fail_add_user_to_namespace",
            "location": 200,
            "return": [],
            "arguments": {
                "idmapper": [],
                "authsource": [],
                "token": [],
                "namespace_id": [],
                "user": [],
                "expected": []
            }
        },
        "test_remove_user_from_namespace": {
            "name": "test_remove_user_from_namespace",
            "location": 206,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_remove_user_from_namespace_fail_None_input": {
            "name": "test_remove_user_from_namespace_fail_None_input",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "test_remove_user_from_namespace_fail_no_admin_authsource_provider": {
            "name": "test_remove_user_from_namespace_fail_no_admin_authsource_provider",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_remove_user_from_namespace_fail_not_admin": {
            "name": "test_remove_user_from_namespace_fail_not_admin",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "fail_remove_user_from_namespace": {
            "name": "fail_remove_user_from_namespace",
            "location": 269,
            "return": [],
            "arguments": {
                "idmapper": [],
                "authsource": [],
                "token": [],
                "namespace_id": [],
                "user": [],
                "expected": []
            }
        },
        "test_set_namespace_publicly_mappable": {
            "name": "test_set_namespace_publicly_mappable",
            "location": 275,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "check_set_namespace_publicly_mappable": {
            "name": "check_set_namespace_publicly_mappable",
            "location": 281,
            "return": [],
            "arguments": {
                "pub_value": [],
                "log_collector": []
            }
        },
        "test_set_namespace_publicly_mappable_fail_None_input": {
            "name": "test_set_namespace_publicly_mappable_fail_None_input",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "test_set_namespace_publicly_mappable_fail_unauthed": {
            "name": "test_set_namespace_publicly_mappable_fail_unauthed",
            "location": 325,
            "return": [],
            "arguments": {}
        },
        "fail_set_namespace_publicly_mappable": {
            "name": "fail_set_namespace_publicly_mappable",
            "location": 341,
            "return": [],
            "arguments": {
                "idmapper": [],
                "auth_id": [],
                "token": [],
                "namespace_id": [],
                "expected": []
            }
        },
        "test_get_namespace_no_auth": {
            "name": "test_get_namespace_no_auth",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_not_admin": {
            "name": "test_get_namespace_not_admin",
            "location": 360,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_sysadmin": {
            "name": "test_get_namespace_sysadmin",
            "location": 376,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_ns_admin": {
            "name": "test_get_namespace_ns_admin",
            "location": 393,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_fail_None_input": {
            "name": "test_get_namespace_fail_None_input",
            "location": 410,
            "return": [],
            "arguments": {}
        },
        "fail_get_namespace": {
            "name": "fail_get_namespace",
            "location": 426,
            "return": [],
            "arguments": {
                "idm": [],
                "namespace_id": [],
                "authsource_id": [],
                "token": [],
                "expected": []
            }
        },
        "test_get_namespaces_empty": {
            "name": "test_get_namespaces_empty",
            "location": 432,
            "return": [],
            "arguments": {}
        },
        "test_get_namespaces_only_public": {
            "name": "test_get_namespaces_only_public",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "test_get_namespaces_only_private": {
            "name": "test_get_namespaces_only_private",
            "location": 457,
            "return": [],
            "arguments": {}
        },
        "test_get_namespaces_both": {
            "name": "test_get_namespaces_both",
            "location": 470,
            "return": [],
            "arguments": {}
        },
        "test_create_mapping_publicly_mappable": {
            "name": "test_create_mapping_publicly_mappable",
            "location": 486,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_create_mapping_privately_mappable": {
            "name": "test_create_mapping_privately_mappable",
            "location": 490,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "check_create_mapping": {
            "name": "check_create_mapping",
            "location": 496,
            "return": [],
            "arguments": {
                "targetns": [
                    "Namespace"
                ],
                "log_collector": []
            }
        },
        "test_create_mapping_fail_None_input": {
            "name": "test_create_mapping_fail_None_input",
            "location": 521,
            "return": [],
            "arguments": {}
        },
        "test_create_mapping_fail_unauthed_for_admin_namespace": {
            "name": "test_create_mapping_fail_unauthed_for_admin_namespace",
            "location": 538,
            "return": [],
            "arguments": {}
        },
        "test_create_mapping_fail_unauthed_for_other_namespace": {
            "name": "test_create_mapping_fail_unauthed_for_other_namespace",
            "location": 554,
            "return": [],
            "arguments": {}
        },
        "fail_create_mapping": {
            "name": "fail_create_mapping",
            "location": 573,
            "return": [],
            "arguments": {
                "idm": [],
                "authsource_id": [],
                "token": [],
                "oid1": [],
                "oid2": [],
                "expected": []
            }
        },
        "test_remove_mapping": {
            "name": "test_remove_mapping",
            "location": 579,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_remove_mapping_fail_None_input": {
            "name": "test_remove_mapping_fail_None_input",
            "location": 604,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_unauthed_for_admin_namespace": {
            "name": "test_remove_mapping_fail_unauthed_for_admin_namespace",
            "location": 621,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_no_such_other_namespace": {
            "name": "test_remove_mapping_fail_no_such_other_namespace",
            "location": 637,
            "return": [],
            "arguments": {}
        },
        "fail_remove_mapping": {
            "name": "fail_remove_mapping",
            "location": 658,
            "return": [],
            "arguments": {
                "idm": [],
                "authsource_id": [],
                "token": [],
                "oid1": [],
                "oid2": [],
                "expected": []
            }
        },
        "test_get_mappings": {
            "name": "test_get_mappings",
            "location": 664,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_with_filter": {
            "name": "test_get_mappings_with_filter",
            "location": 684,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_fail_None_inputs": {
            "name": "test_get_mappings_fail_None_inputs",
            "location": 718,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_fail_no_namespace": {
            "name": "test_get_mappings_fail_no_namespace",
            "location": 731,
            "return": [],
            "arguments": {}
        },
        "fail_get_mappings": {
            "name": "fail_get_mappings",
            "location": 751,
            "return": [],
            "arguments": {
                "idm": [],
                "oid": [],
                "filters": [],
                "expected": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/core/object_id_test.py": {
        "test_namespace_id_init_pass": {
            "name": "test_namespace_id_init_pass",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_namespace_id_init_fail": {
            "name": "test_namespace_id_init_fail",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "fail_namespace_id_init": {
            "name": "fail_namespace_id_init",
            "location": 29,
            "return": [],
            "arguments": {
                "id_": [
                    "str"
                ],
                "expected": [
                    "Exception"
                ]
            }
        },
        "test_namespace_id_equals": {
            "name": "test_namespace_id_equals",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_namespace_id_hash": {
            "name": "test_namespace_id_hash",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_namespace_id_slots": {
            "name": "test_namespace_id_slots",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_namespace_init_pass": {
            "name": "test_namespace_init_pass",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_namespace_init_fail": {
            "name": "test_namespace_init_fail",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "fail_namespace_init": {
            "name": "fail_namespace_init",
            "location": 88,
            "return": [],
            "arguments": {
                "id_": [],
                "authed_users": [],
                "expected": []
            }
        },
        "test_namespace_without_users": {
            "name": "test_namespace_without_users",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_namespace_equals": {
            "name": "test_namespace_equals",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_namespace_hash": {
            "name": "test_namespace_hash",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_object_id_init_pass": {
            "name": "test_object_id_init_pass",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "test_object_id_init_fail": {
            "name": "test_object_id_init_fail",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "fail_object_id_init": {
            "name": "fail_object_id_init",
            "location": 153,
            "return": [],
            "arguments": {
                "namespace_id": [],
                "obj_id": [],
                "expected": []
            }
        },
        "test_object_id_equals": {
            "name": "test_object_id_equals",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_object_id_hash": {
            "name": "test_object_id_hash",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "test_object_id_slots": {
            "name": "test_object_id_slots",
            "location": 176,
            "return": [],
            "arguments": {}
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/core/tokens_test.py": {
        "test_hashed_token_init_pass": {
            "name": "test_hashed_token_init_pass",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_hashed_token_init_fail": {
            "name": "test_hashed_token_init_fail",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "fail_hashed_token_init": {
            "name": "fail_hashed_token_init",
            "location": 19,
            "return": [],
            "arguments": {
                "htoken": [
                    "str"
                ],
                "expected": [
                    "Exception"
                ]
            }
        },
        "test_hashed_token_equals": {
            "name": "test_hashed_token_equals",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_hashed_token_hash": {
            "name": "test_hashed_token_hash",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_token_init_pass": {
            "name": "test_token_init_pass",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_token_init_fail": {
            "name": "test_token_init_fail",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "fail_token_init": {
            "name": "fail_token_init",
            "location": 50,
            "return": [],
            "arguments": {
                "token": [
                    "str"
                ],
                "expected": [
                    "Exception"
                ]
            }
        },
        "test_hash_token": {
            "name": "test_hash_token",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_token_equals": {
            "name": "test_token_equals",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_token_hash": {
            "name": "test_token_hash",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_generate_token": {
            "name": "test_generate_token",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "is_base64": {
            "name": "is_base64",
            "location": 83,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/core/user_lookup_test.py": {
        "test_set_init_fail": {
            "name": "test_set_init_fail",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "fail_set_init": {
            "name": "fail_set_init",
            "location": 20,
            "return": [],
            "arguments": {
                "handlers": [],
                "expected": []
            }
        },
        "test_set_get_user_default_cache_ttl": {
            "name": "test_set_get_user_default_cache_ttl",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_set_get_user_default_cache_ttl_set_ttl": {
            "name": "test_set_get_user_default_cache_ttl_set_ttl",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "check_set_get_user_default_cache_ttl_set_ttl": {
            "name": "check_set_get_user_default_cache_ttl_set_ttl",
            "location": 41,
            "return": [],
            "arguments": {
                "ttl": [],
                "timervals": []
            }
        },
        "check_set_get_user_default_cache_ttl": {
            "name": "check_set_get_user_default_cache_ttl",
            "location": 51,
            "return": [],
            "arguments": {
                "hset": [],
                "handler": [],
                "timer": [],
                "timervals": []
            }
        },
        "test_set_get_user_cache_max_count": {
            "name": "test_set_get_user_cache_max_count",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_set_get_user_rel_ttl": {
            "name": "test_set_get_user_rel_ttl",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_set_get_user_epoch_ttl": {
            "name": "test_set_get_user_epoch_ttl",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_set_get_user_epoch_lt_rel_ttl": {
            "name": "test_set_get_user_epoch_lt_rel_ttl",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_set_get_user_rel_lt_epoch_ttl": {
            "name": "test_set_get_user_rel_lt_epoch_ttl",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "check_set_get_user_handler_ttl": {
            "name": "check_set_get_user_handler_ttl",
            "location": 154,
            "return": [],
            "arguments": {
                "epoch": [],
                "rel": [],
                "timervals": []
            }
        },
        "test_set_get_user_fail_None_input": {
            "name": "test_set_get_user_fail_None_input",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "test_set_get_user_no_authsource": {
            "name": "test_set_get_user_no_authsource",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "fail_set_get_user": {
            "name": "fail_set_get_user",
            "location": 202,
            "return": [],
            "arguments": {
                "hset": [],
                "authsource_id": [],
                "token": [],
                "expected": []
            }
        },
        "test_set_is_valid_user_default_cache_ttl": {
            "name": "test_set_is_valid_user_default_cache_ttl",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_set_is_valid_user_default_cache_ttl_set_ttl": {
            "name": "test_set_is_valid_user_default_cache_ttl_set_ttl",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "check_set_is_valid_user_default_cache_ttl_set_ttl": {
            "name": "check_set_is_valid_user_default_cache_ttl_set_ttl",
            "location": 223,
            "return": [],
            "arguments": {
                "ttl": [],
                "timervals": []
            }
        },
        "check_set_is_valid_user_default_cache_ttl": {
            "name": "check_set_is_valid_user_default_cache_ttl",
            "location": 233,
            "return": [],
            "arguments": {
                "hset": [],
                "handler": [],
                "timer": [],
                "timervals": []
            }
        },
        "test_set_is_valid_user_invalid_user": {
            "name": "test_set_is_valid_user_invalid_user",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "test_set_is_valid_user_cache_max_count": {
            "name": "test_set_is_valid_user_cache_max_count",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "test_set_is_valid_user_rel_ttl": {
            "name": "test_set_is_valid_user_rel_ttl",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "test_set_is_valid_user_epoch_ttl": {
            "name": "test_set_is_valid_user_epoch_ttl",
            "location": 333,
            "return": [],
            "arguments": {}
        },
        "test_set_is_valid_user_epoch_lt_rel_ttl": {
            "name": "test_set_is_valid_user_epoch_lt_rel_ttl",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "test_set_is_valid_user_rel_lt_epoch_ttl": {
            "name": "test_set_is_valid_user_rel_lt_epoch_ttl",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "check_set_is_valid_user_handler_ttl": {
            "name": "check_set_is_valid_user_handler_ttl",
            "location": 349,
            "return": [],
            "arguments": {
                "epoch": [],
                "rel": [],
                "timervals": []
            }
        },
        "test_set_is_valid_user_None_inputs": {
            "name": "test_set_is_valid_user_None_inputs",
            "location": 379,
            "return": [],
            "arguments": {}
        },
        "test_set_is_valid_user_no_authsource": {
            "name": "test_set_is_valid_user_no_authsource",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "fail_set_is_valid_user": {
            "name": "fail_set_is_valid_user",
            "location": 393,
            "return": [],
            "arguments": {
                "hset": [],
                "user": [],
                "expected": []
            }
        },
        "test_local_init_fail": {
            "name": "test_local_init_fail",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "test_local_get_authsource": {
            "name": "test_local_get_authsource",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "test_local_get_user_admin": {
            "name": "test_local_get_user_admin",
            "location": 410,
            "return": [],
            "arguments": {}
        },
        "check_local_get_user_admin": {
            "name": "check_local_get_user_admin",
            "location": 415,
            "return": [],
            "arguments": {
                "isadmin": []
            }
        },
        "test_local_get_user_fail": {
            "name": "test_local_get_user_fail",
            "location": 426,
            "return": [],
            "arguments": {}
        },
        "test_local_is_valid_user": {
            "name": "test_local_is_valid_user",
            "location": 433,
            "return": [],
            "arguments": {}
        },
        "test_local_is_valid_user_fail": {
            "name": "test_local_is_valid_user_fail",
            "location": 450,
            "return": [],
            "arguments": {}
        },
        "test_local_create_user": {
            "name": "test_local_create_user",
            "location": 457,
            "return": [],
            "arguments": {}
        },
        "test_local_create_user_fail": {
            "name": "test_local_create_user_fail",
            "location": 469,
            "return": [],
            "arguments": {}
        },
        "test_local_new_token": {
            "name": "test_local_new_token",
            "location": 476,
            "return": [],
            "arguments": {}
        },
        "test_local_new_token_fail": {
            "name": "test_local_new_token_fail",
            "location": 488,
            "return": [],
            "arguments": {}
        },
        "test_local_set_user_as_admin": {
            "name": "test_local_set_user_as_admin",
            "location": 495,
            "return": [],
            "arguments": {}
        },
        "test_local_set_user_as_admin_fail": {
            "name": "test_local_set_user_as_admin_fail",
            "location": 505,
            "return": [],
            "arguments": {}
        },
        "test_local_get_users": {
            "name": "test_local_get_users",
            "location": 512,
            "return": [],
            "arguments": {}
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/core/user_test.py": {
        "test_authsource_init_pass": {
            "name": "test_authsource_init_pass",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_authsource_init_fail": {
            "name": "test_authsource_init_fail",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "fail_authsource_init": {
            "name": "fail_authsource_init",
            "location": 28,
            "return": [],
            "arguments": {
                "source": [
                    "str"
                ],
                "expected": [
                    "Exception"
                ]
            }
        },
        "test_authsource_equals": {
            "name": "test_authsource_equals",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_authsource_hash": {
            "name": "test_authsource_hash",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_username_init_pass": {
            "name": "test_username_init_pass",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_username_init_fail": {
            "name": "test_username_init_fail",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "fail_username_init": {
            "name": "fail_username_init",
            "location": 68,
            "return": [],
            "arguments": {
                "username": [],
                "expected": []
            }
        },
        "test_username_equals": {
            "name": "test_username_equals",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_username_hash": {
            "name": "test_username_hash",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_user_init_pass": {
            "name": "test_user_init_pass",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_user_init_fail": {
            "name": "test_user_init_fail",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "fail_user_init": {
            "name": "fail_user_init",
            "location": 100,
            "return": [],
            "arguments": {
                "authsource": [
                    "AuthsourceID"
                ],
                "username": [
                    "Username"
                ],
                "expected": [
                    "Exception"
                ]
            }
        },
        "test_user_equals": {
            "name": "test_user_equals",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "test_user_hash": {
            "name": "test_user_hash",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/core/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/idmapping/integration/service_test.py": {
        "create_deploy_cfg": {
            "name": "create_deploy_cfg",
            "location": 43,
            "return": [],
            "arguments": {
                "mongo_port": []
            }
        },
        "mongo": {
            "name": "mongo",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "service_port": {
            "name": "service_port",
            "location": 87,
            "return": [],
            "arguments": {
                "mongo": []
            }
        },
        "get_storage_instance": {
            "name": "get_storage_instance",
            "location": 117,
            "return": [
                "IDMappingStorage"
            ],
            "arguments": {
                "mongo": []
            }
        },
        "test_root": {
            "name": "test_root",
            "location": 122,
            "return": [],
            "arguments": {
                "service_port": []
            }
        },
        "test_create_and_get_namespace": {
            "name": "test_create_and_get_namespace",
            "location": 137,
            "return": [],
            "arguments": {
                "service_port": [],
                "mongo": []
            }
        },
        "test_add_remove_user": {
            "name": "test_add_remove_user",
            "location": 188,
            "return": [],
            "arguments": {
                "service_port": [],
                "mongo": []
            }
        },
        "test_set_public_and_list_namespaces": {
            "name": "test_set_public_and_list_namespaces",
            "location": 272,
            "return": [],
            "arguments": {
                "service_port": [],
                "mongo": []
            }
        },
        "test_mapping": {
            "name": "test_mapping",
            "location": 319,
            "return": [],
            "arguments": {
                "service_port": [],
                "mongo": []
            }
        },
        "service_port.kill": {
            "name": "kill",
            "location": 100,
            "return": [],
            "arguments": {}
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/integration/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/idmapping/service/mapper_service_test.py": {
        "build_app": {
            "name": "build_app",
            "location": 24,
            "return": [],
            "arguments": {
                "ignore_ip_headers": [],
                "logstream": [
                    "IO[str]"
                ]
            }
        },
        "mock_request_for_ip_headers": {
            "name": "mock_request_for_ip_headers",
            "location": 38,
            "return": [],
            "arguments": {
                "remote_addr": [],
                "xff": [],
                "real_ip": []
            }
        },
        "test_get_ip_address_no_headers_with_ignore": {
            "name": "test_get_ip_address_no_headers_with_ignore",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_get_ip_address_no_headers_no_ignore": {
            "name": "test_get_ip_address_no_headers_no_ignore",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_get_ip_address_whitespace_headers_no_ignore": {
            "name": "test_get_ip_address_whitespace_headers_no_ignore",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_get_ip_address_with_headers_with_ignore": {
            "name": "test_get_ip_address_with_headers_with_ignore",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_get_ip_address_with_xff_and_real": {
            "name": "test_get_ip_address_with_xff_and_real",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_get_ip_address_with_xff": {
            "name": "test_get_ip_address_with_xff",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_get_ip_address_with_real": {
            "name": "test_get_ip_address_with_real",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_format_ip_headers_no_headers_with_ignore": {
            "name": "test_format_ip_headers_no_headers_with_ignore",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_format_ip_headers_no_headers_no_ignore": {
            "name": "test_format_ip_headers_no_headers_no_ignore",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_format_ip_headers_whitespace_headers_no_ignore": {
            "name": "test_format_ip_headers_whitespace_headers_no_ignore",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_format_ip_headers_with_headers_with_ignore": {
            "name": "test_format_ip_headers_with_headers_with_ignore",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_format_ip_headers_with_xff_and_real": {
            "name": "test_format_ip_headers_with_xff_and_real",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_format_ip_headers_with_xff": {
            "name": "test_format_ip_headers_with_xff",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_format_ip_headers_with_real": {
            "name": "test_format_ip_headers_with_real",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_log_formatter_no_exception": {
            "name": "test_log_formatter_no_exception",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_log_formatter_with_exception": {
            "name": "test_log_formatter_with_exception",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_root_and_logging": {
            "name": "test_root_and_logging",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "test_root_and_logging_with_xff_and_real_headers": {
            "name": "test_root_and_logging_with_xff_and_real_headers",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_root_and_logging_with_xff_and_real_headers_ignored": {
            "name": "test_root_and_logging_with_xff_and_real_headers_ignored",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_no_auth": {
            "name": "test_get_namespace_no_auth",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_with_auth": {
            "name": "test_get_namespace_with_auth",
            "location": 331,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_fail_munged_auth": {
            "name": "test_get_namespace_fail_munged_auth",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_fail_invalid_token": {
            "name": "test_get_namespace_fail_invalid_token",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "check_error_logging": {
            "name": "check_error_logging",
            "location": 389,
            "return": [],
            "arguments": {
                "logstream_mock": [],
                "method": [],
                "url": [],
                "code": [],
                "stackstring": []
            }
        },
        "test_get_namespace_fail_no_namespace": {
            "name": "test_get_namespace_fail_no_namespace",
            "location": 433,
            "return": [],
            "arguments": {}
        },
        "test_get_namespace_fail_valueerror": {
            "name": "test_get_namespace_fail_valueerror",
            "location": 456,
            "return": [],
            "arguments": {}
        },
        "test_method_not_allowed": {
            "name": "test_method_not_allowed",
            "location": 477,
            "return": [],
            "arguments": {}
        },
        "test_not_found": {
            "name": "test_not_found",
            "location": 498,
            "return": [],
            "arguments": {}
        },
        "test_create_namespace_put": {
            "name": "test_create_namespace_put",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "test_create_namespace_post": {
            "name": "test_create_namespace_post",
            "location": 531,
            "return": [],
            "arguments": {}
        },
        "test_create_namespace_fail_no_token": {
            "name": "test_create_namespace_fail_no_token",
            "location": 543,
            "return": [],
            "arguments": {}
        },
        "fail_no_token_put": {
            "name": "fail_no_token_put",
            "location": 547,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "fail_no_token_delete": {
            "name": "fail_no_token_delete",
            "location": 553,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "fail_no_token_check": {
            "name": "fail_no_token_check",
            "location": 559,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_namespace_fail_munged_auth": {
            "name": "test_create_namespace_fail_munged_auth",
            "location": 572,
            "return": [],
            "arguments": {}
        },
        "fail_munged_auth_put": {
            "name": "fail_munged_auth_put",
            "location": 577,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "fail_munged_auth_post": {
            "name": "fail_munged_auth_post",
            "location": 583,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "fail_munged_auth_delete": {
            "name": "fail_munged_auth_delete",
            "location": 589,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "fail_munged_auth_check": {
            "name": "fail_munged_auth_check",
            "location": 595,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_namespace_fail_illegal_ns_id": {
            "name": "test_create_namespace_fail_illegal_ns_id",
            "location": 609,
            "return": [],
            "arguments": {}
        },
        "fail_illegal_ns_id_get": {
            "name": "fail_illegal_ns_id_get",
            "location": 613,
            "return": [],
            "arguments": {
                "url": [],
                "json": []
            }
        },
        "fail_illegal_ns_id_put": {
            "name": "fail_illegal_ns_id_put",
            "location": 619,
            "return": [],
            "arguments": {
                "url": [],
                "json": []
            }
        },
        "fail_illegal_ns_id_delete": {
            "name": "fail_illegal_ns_id_delete",
            "location": 625,
            "return": [],
            "arguments": {
                "url": [],
                "json": []
            }
        },
        "fail_illegal_ns_id_check": {
            "name": "fail_illegal_ns_id_check",
            "location": 631,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_namespace_fail_unauthorized": {
            "name": "test_create_namespace_fail_unauthorized",
            "location": 645,
            "return": [],
            "arguments": {}
        },
        "test_add_user_to_namespace": {
            "name": "test_add_user_to_namespace",
            "location": 672,
            "return": [],
            "arguments": {}
        },
        "test_add_user_to_namespace_fail_no_token": {
            "name": "test_add_user_to_namespace_fail_no_token",
            "location": 685,
            "return": [],
            "arguments": {}
        },
        "test_add_user_to_namespace_fail_munged_auth": {
            "name": "test_add_user_to_namespace_fail_munged_auth",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "test_add_user_to_namespace_fail_illegal_ns_id": {
            "name": "test_add_user_to_namespace_fail_illegal_ns_id",
            "location": 693,
            "return": [],
            "arguments": {}
        },
        "test_remove_user_from_namespace": {
            "name": "test_remove_user_from_namespace",
            "location": 697,
            "return": [],
            "arguments": {}
        },
        "test_remove_user_from_namespace_fail_no_token": {
            "name": "test_remove_user_from_namespace_fail_no_token",
            "location": 711,
            "return": [],
            "arguments": {}
        },
        "test_remove_user_from_namespace_fail_munged_auth": {
            "name": "test_remove_user_from_namespace_fail_munged_auth",
            "location": 715,
            "return": [],
            "arguments": {}
        },
        "test_remove_user_from_namespace_fail_illegal_ns_id": {
            "name": "test_remove_user_from_namespace_fail_illegal_ns_id",
            "location": 719,
            "return": [],
            "arguments": {}
        },
        "test_set_namespace_publicly_mappable": {
            "name": "test_set_namespace_publicly_mappable",
            "location": 723,
            "return": [],
            "arguments": {}
        },
        "check_set_namespace_publicly_mappable": {
            "name": "check_set_namespace_publicly_mappable",
            "location": 728,
            "return": [],
            "arguments": {
                "arg": [],
                "expected": []
            }
        },
        "test_set_namespace_fail_no_op": {
            "name": "test_set_namespace_fail_no_op",
            "location": 741,
            "return": [],
            "arguments": {}
        },
        "test_set_namespace_publicly_mappable_illegal_input": {
            "name": "test_set_namespace_publicly_mappable_illegal_input",
            "location": 758,
            "return": [],
            "arguments": {}
        },
        "test_set_namespace_publicly_mappable_fail_no_token": {
            "name": "test_set_namespace_publicly_mappable_fail_no_token",
            "location": 777,
            "return": [],
            "arguments": {}
        },
        "test_set_namespace_publicly_mappable_fail_munged_auth": {
            "name": "test_set_namespace_publicly_mappable_fail_munged_auth",
            "location": 781,
            "return": [],
            "arguments": {}
        },
        "test_set_namespace_publicly_mappable_fail_illegal_ns_id": {
            "name": "test_set_namespace_publicly_mappable_fail_illegal_ns_id",
            "location": 785,
            "return": [],
            "arguments": {}
        },
        "test_get_namespaces_empty": {
            "name": "test_get_namespaces_empty",
            "location": 789,
            "return": [],
            "arguments": {}
        },
        "test_get_namespaces_public": {
            "name": "test_get_namespaces_public",
            "location": 793,
            "return": [],
            "arguments": {}
        },
        "test_get_namespaces_private": {
            "name": "test_get_namespaces_private",
            "location": 799,
            "return": [],
            "arguments": {}
        },
        "test_get_namespaces_both": {
            "name": "test_get_namespaces_both",
            "location": 805,
            "return": [],
            "arguments": {}
        },
        "check_get_namespaces": {
            "name": "check_get_namespaces",
            "location": 813,
            "return": [],
            "arguments": {
                "returned": [],
                "expected": []
            }
        },
        "test_create_mapping_put": {
            "name": "test_create_mapping_put",
            "location": 826,
            "return": [],
            "arguments": {}
        },
        "test_create_mapping_post": {
            "name": "test_create_mapping_post",
            "location": 835,
            "return": [],
            "arguments": {}
        },
        "check_create_mapping": {
            "name": "check_create_mapping",
            "location": 842,
            "return": [],
            "arguments": {
                "resp": [],
                "mapper": []
            }
        },
        "test_create_mapping_fail_no_token": {
            "name": "test_create_mapping_fail_no_token",
            "location": 855,
            "return": [],
            "arguments": {}
        },
        "test_create_mapping_fail_munged_auth": {
            "name": "test_create_mapping_fail_munged_auth",
            "location": 859,
            "return": [],
            "arguments": {}
        },
        "test_create_mapping_fail_no_body": {
            "name": "test_create_mapping_fail_no_body",
            "location": 864,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_no_body": {
            "name": "check_mapping_fail_no_body",
            "location": 870,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_bad_json_error": {
            "name": "test_bad_json_error",
            "location": 881,
            "return": [],
            "arguments": {}
        },
        "test_create_mapping_fail_bad_json": {
            "name": "test_create_mapping_fail_bad_json",
            "location": 899,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_bad_json": {
            "name": "check_mapping_fail_bad_json",
            "location": 906,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_mapping_fail_not_dict": {
            "name": "test_create_mapping_fail_not_dict",
            "location": 918,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_not_dict": {
            "name": "check_mapping_fail_not_dict",
            "location": 925,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_mapping_fail_no_ids": {
            "name": "test_create_mapping_fail_no_ids",
            "location": 939,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_no_ids": {
            "name": "check_mapping_fail_no_ids",
            "location": 946,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_mapping_fail_whitespace_key": {
            "name": "test_create_mapping_fail_whitespace_key",
            "location": 959,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_whitespace_key": {
            "name": "check_mapping_fail_whitespace_key",
            "location": 966,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_mapping_fail_non_string_value": {
            "name": "test_create_mapping_fail_non_string_value",
            "location": 979,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_non_string_value": {
            "name": "check_mapping_fail_non_string_value",
            "location": 986,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_mapping_fail_whitespace_value": {
            "name": "test_create_mapping_fail_whitespace_value",
            "location": 1000,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_whitespace_value": {
            "name": "check_mapping_fail_whitespace_value",
            "location": 1007,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_mapping_fail_too_many_ids": {
            "name": "test_create_mapping_fail_too_many_ids",
            "location": 1021,
            "return": [],
            "arguments": {}
        },
        "check_mapping_fail_too_many_ids": {
            "name": "check_mapping_fail_too_many_ids",
            "location": 1028,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_create_mapping_fail_illegal_ns_id": {
            "name": "test_create_mapping_fail_illegal_ns_id",
            "location": 1042,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping": {
            "name": "test_remove_mapping",
            "location": 1047,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_no_token": {
            "name": "test_remove_mapping_fail_no_token",
            "location": 1066,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_munged_auth": {
            "name": "test_remove_mapping_fail_munged_auth",
            "location": 1070,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_no_body": {
            "name": "test_remove_mapping_fail_no_body",
            "location": 1074,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_bad_json": {
            "name": "test_remove_mapping_fail_bad_json",
            "location": 1080,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_not_dict": {
            "name": "test_remove_mapping_fail_not_dict",
            "location": 1087,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_no_ids": {
            "name": "test_remove_mapping_fail_no_ids",
            "location": 1094,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_whitespace_key": {
            "name": "test_remove_mapping_fail_whitespace_key",
            "location": 1101,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_non_string_value": {
            "name": "test_remove_mapping_fail_non_string_value",
            "location": 1108,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_whitespace_value": {
            "name": "test_remove_mapping_fail_whitespace_value",
            "location": 1115,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_too_many_ids": {
            "name": "test_remove_mapping_fail_too_many_ids",
            "location": 1122,
            "return": [],
            "arguments": {}
        },
        "test_remove_mapping_fail_illegal_ns_id": {
            "name": "test_remove_mapping_fail_illegal_ns_id",
            "location": 1129,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_empty": {
            "name": "test_get_mappings_empty",
            "location": 1134,
            "return": [],
            "arguments": {}
        },
        "to_oid": {
            "name": "to_oid",
            "location": 1142,
            "return": [],
            "arguments": {
                "namespace": [],
                "id_": []
            }
        },
        "test_get_mappings_admin": {
            "name": "test_get_mappings_admin",
            "location": 1146,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_other": {
            "name": "test_get_mappings_other",
            "location": 1180,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_both": {
            "name": "test_get_mappings_both",
            "location": 1214,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_with_empty_filter": {
            "name": "test_get_mappings_with_empty_filter",
            "location": 1257,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_with_filter": {
            "name": "test_get_mappings_with_filter",
            "location": 1270,
            "return": [],
            "arguments": {}
        },
        "check_get_mappings": {
            "name": "check_get_mappings",
            "location": 1285,
            "return": [],
            "arguments": {
                "returned": [],
                "expected": [],
                "query": [],
                "ns_filter_expected": []
            }
        },
        "test_get_mappings_fail_no_body": {
            "name": "test_get_mappings_fail_no_body",
            "location": 1300,
            "return": [],
            "arguments": {}
        },
        "test_get_mapping_fail_bad_json": {
            "name": "test_get_mapping_fail_bad_json",
            "location": 1307,
            "return": [],
            "arguments": {}
        },
        "test_get_mapping_fail_not_dict": {
            "name": "test_get_mapping_fail_not_dict",
            "location": 1313,
            "return": [],
            "arguments": {}
        },
        "test_get_mapping_fail_ids_not_list": {
            "name": "test_get_mapping_fail_ids_not_list",
            "location": 1319,
            "return": [],
            "arguments": {}
        },
        "test_get_mapping_fail_ids_empty": {
            "name": "test_get_mapping_fail_ids_empty",
            "location": 1336,
            "return": [],
            "arguments": {}
        },
        "test_get_mapping_fail_bad_id": {
            "name": "test_get_mapping_fail_bad_id",
            "location": 1352,
            "return": [],
            "arguments": {}
        },
        "check_get_mapping_fail_bad_id": {
            "name": "check_get_mapping_fail_bad_id",
            "location": 1361,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "test_get_mapping_fail_too_many_ids": {
            "name": "test_get_mapping_fail_too_many_ids",
            "location": 1374,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_fail_whitespace_in_filter": {
            "name": "test_get_mappings_fail_whitespace_in_filter",
            "location": 1391,
            "return": [],
            "arguments": {}
        },
        "test_get_mappings_fail_illegal_ns_id": {
            "name": "test_get_mappings_fail_illegal_ns_id",
            "location": 1408,
            "return": [],
            "arguments": {}
        },
        "test_log_formatter_with_exception.exception_method": {
            "name": "exception_method",
            "location": 186,
            "return": [],
            "arguments": {}
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/service/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/idmapping/storage/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/idmapping/storage/mongo/test_id_mapping_mongo_storage.py": {
        "mongo": {
            "name": "mongo",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "idstorage": {
            "name": "idstorage",
            "location": 33,
            "return": [],
            "arguments": {
                "mongo": []
            }
        },
        "test_fail_startup": {
            "name": "test_fail_startup",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_collection_names": {
            "name": "test_collection_names",
            "location": 49,
            "return": [],
            "arguments": {
                "idstorage": [],
                "mongo": []
            }
        },
        "test_index_config": {
            "name": "test_index_config",
            "location": 57,
            "return": [],
            "arguments": {
                "idstorage": [],
                "mongo": []
            }
        },
        "test_index_user": {
            "name": "test_index_user",
            "location": 66,
            "return": [],
            "arguments": {
                "idstorage": [],
                "mongo": []
            }
        },
        "test_index_namespace": {
            "name": "test_index_namespace",
            "location": 77,
            "return": [],
            "arguments": {
                "idstorage": [],
                "mongo": []
            }
        },
        "test_index_mappings": {
            "name": "test_index_mappings",
            "location": 86,
            "return": [],
            "arguments": {
                "idstorage": [],
                "mongo": []
            }
        },
        "test_startup_and_check_config_doc": {
            "name": "test_startup_and_check_config_doc",
            "location": 103,
            "return": [],
            "arguments": {
                "idstorage": [],
                "mongo": []
            }
        },
        "test_startup_with_2_config_docs": {
            "name": "test_startup_with_2_config_docs",
            "location": 117,
            "return": [],
            "arguments": {
                "mongo": []
            }
        },
        "test_startup_with_extra_corrupt_config_doc": {
            "name": "test_startup_with_extra_corrupt_config_doc",
            "location": 134,
            "return": [],
            "arguments": {
                "mongo": []
            }
        },
        "test_startup_with_bad_schema_version": {
            "name": "test_startup_with_bad_schema_version",
            "location": 144,
            "return": [],
            "arguments": {
                "mongo": []
            }
        },
        "test_startup_in_update": {
            "name": "test_startup_in_update",
            "location": 152,
            "return": [],
            "arguments": {
                "mongo": []
            }
        },
        "fail_startup": {
            "name": "fail_startup",
            "location": 161,
            "return": [],
            "arguments": {
                "mongo": [],
                "expected_msg": []
            }
        },
        "test_create_update_and_get_user": {
            "name": "test_create_update_and_get_user",
            "location": 167,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_create_user_fail_input_None": {
            "name": "test_create_user_fail_input_None",
            "location": 184,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_create_user_fail_duplicate_user": {
            "name": "test_create_user_fail_duplicate_user",
            "location": 191,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_create_user_fail_duplicate_token": {
            "name": "test_create_user_fail_duplicate_token",
            "location": 196,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_create_user": {
            "name": "fail_create_user",
            "location": 202,
            "return": [],
            "arguments": {
                "idstorage": [],
                "user": [],
                "token": [],
                "expected": []
            }
        },
        "test_update_user_token_fail_input_None": {
            "name": "test_update_user_token_fail_input_None",
            "location": 208,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_update_user_token_fail_duplicate_token": {
            "name": "test_update_user_token_fail_duplicate_token",
            "location": 215,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_update_user_token_fail_no_such_user": {
            "name": "test_update_user_token_fail_no_such_user",
            "location": 222,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_update_user_token": {
            "name": "fail_update_user_token",
            "location": 227,
            "return": [],
            "arguments": {
                "idstorage": [],
                "user": [],
                "token": [],
                "expected": []
            }
        },
        "test_get_user_fail_input_None": {
            "name": "test_get_user_fail_input_None",
            "location": 233,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_get_user_fail_no_such_token": {
            "name": "test_get_user_fail_no_such_token",
            "location": 237,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_get_user": {
            "name": "fail_get_user",
            "location": 242,
            "return": [],
            "arguments": {
                "idstorage": [],
                "token": [],
                "expected": []
            }
        },
        "test_set_user_as_admin": {
            "name": "test_set_user_as_admin",
            "location": 248,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_set_local_user_as_admin_fail_None_input": {
            "name": "test_set_local_user_as_admin_fail_None_input",
            "location": 270,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_set_local_user_as_admin_fail_no_such_user": {
            "name": "test_set_local_user_as_admin_fail_no_such_user",
            "location": 274,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_set_local_user_as_admin": {
            "name": "fail_set_local_user_as_admin",
            "location": 279,
            "return": [],
            "arguments": {
                "idstorage": [],
                "user": [],
                "expected": []
            }
        },
        "test_unparseable_duplicate_key_exception": {
            "name": "test_unparseable_duplicate_key_exception",
            "location": 285,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_get_users": {
            "name": "test_get_users",
            "location": 293,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_user_exists": {
            "name": "test_user_exists",
            "location": 311,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_user_exists_fail": {
            "name": "test_user_exists_fail",
            "location": 318,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_create_and_get_namespace": {
            "name": "test_create_and_get_namespace",
            "location": 324,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_create_namespace_fail_input_None": {
            "name": "test_create_namespace_fail_input_None",
            "location": 336,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_create_namespace_fail_namespace_exists": {
            "name": "test_create_namespace_fail_namespace_exists",
            "location": 340,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_create_namespace": {
            "name": "fail_create_namespace",
            "location": 346,
            "return": [],
            "arguments": {
                "idstorage": [],
                "namespace_id": [],
                "expected": []
            }
        },
        "test_get_namespace_fail_input_None": {
            "name": "test_get_namespace_fail_input_None",
            "location": 352,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_get_namespace_fail_no_such_namespace": {
            "name": "test_get_namespace_fail_no_such_namespace",
            "location": 356,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_get_namespace": {
            "name": "fail_get_namespace",
            "location": 361,
            "return": [],
            "arguments": {
                "idstorage": [],
                "namespace_id": [],
                "expected": []
            }
        },
        "test_add_and_remove_namespace_users": {
            "name": "test_add_and_remove_namespace_users",
            "location": 367,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_add_user_to_namespace_fail_inputs_None": {
            "name": "test_add_user_to_namespace_fail_inputs_None",
            "location": 390,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_remove_user_from_namespace_fail_inputs_None": {
            "name": "test_remove_user_from_namespace_fail_inputs_None",
            "location": 397,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_add_user_to_namespace_fail_no_such_namespace": {
            "name": "test_add_user_to_namespace_fail_no_such_namespace",
            "location": 404,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_remove_user_from_namespace_fail_no_such_namespace": {
            "name": "test_remove_user_from_namespace_fail_no_such_namespace",
            "location": 410,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_add_user_to_namespace_fail_duplicate": {
            "name": "test_add_user_to_namespace_fail_duplicate",
            "location": 418,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_remove_user_from_namespace_fail_no_such_user": {
            "name": "test_remove_user_from_namespace_fail_no_such_user",
            "location": 425,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_add_namespace_user": {
            "name": "fail_add_namespace_user",
            "location": 433,
            "return": [],
            "arguments": {
                "idstorage": [],
                "namespace_id": [],
                "user": [],
                "expected": []
            }
        },
        "fail_remove_namespace_user": {
            "name": "fail_remove_namespace_user",
            "location": 439,
            "return": [],
            "arguments": {
                "idstorage": [],
                "namespace_id": [],
                "user": [],
                "expected": []
            }
        },
        "test_set_namespace_publicly_mappable": {
            "name": "test_set_namespace_publicly_mappable",
            "location": 445,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_set_namespace_publicly_mappable_input_None": {
            "name": "test_set_namespace_publicly_mappable_input_None",
            "location": 462,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_set_namespace_publicly_mappable_no_such_namespace": {
            "name": "test_set_namespace_publicly_mappable_no_such_namespace",
            "location": 466,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_set_namespace_publicly_mappable": {
            "name": "fail_set_namespace_publicly_mappable",
            "location": 472,
            "return": [],
            "arguments": {
                "idstorage": [],
                "namespace_id": [],
                "expected": []
            }
        },
        "set_up_data_for_get_namespaces": {
            "name": "set_up_data_for_get_namespaces",
            "location": 478,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_get_namespaces": {
            "name": "test_get_namespaces",
            "location": 499,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_get_namespaces_with_nids": {
            "name": "test_get_namespaces_with_nids",
            "location": 509,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_get_namespaces_fail_None_input": {
            "name": "test_get_namespaces_fail_None_input",
            "location": 522,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_get_namespaces_fail_no_such_namepsace": {
            "name": "test_get_namespaces_fail_no_such_namepsace",
            "location": 526,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_get_namespaces": {
            "name": "fail_get_namespaces",
            "location": 534,
            "return": [],
            "arguments": {
                "idstorage": [],
                "nids": [],
                "expected": []
            }
        },
        "test_add_and_get_mapping": {
            "name": "test_add_and_get_mapping",
            "location": 540,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_remove_mapping": {
            "name": "test_remove_mapping",
            "location": 552,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_find_no_mappings": {
            "name": "test_find_no_mappings",
            "location": 584,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_find_multiple_mappings": {
            "name": "test_find_multiple_mappings",
            "location": 592,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_filter_mappings": {
            "name": "test_filter_mappings",
            "location": 604,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "test_add_mapping_fail_input_None": {
            "name": "test_add_mapping_fail_input_None",
            "location": 617,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_add_mapping": {
            "name": "fail_add_mapping",
            "location": 623,
            "return": [],
            "arguments": {
                "idstorage": [],
                "pOID": [],
                "sOID": [],
                "expected": []
            }
        },
        "test_remove_mapping_fail_input_None": {
            "name": "test_remove_mapping_fail_input_None",
            "location": 629,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_remove_mapping": {
            "name": "fail_remove_mapping",
            "location": 635,
            "return": [],
            "arguments": {
                "idstorage": [],
                "pOID": [],
                "sOID": [],
                "expected": []
            }
        },
        "test_find_mappings_fail_input_None": {
            "name": "test_find_mappings_fail_input_None",
            "location": 641,
            "return": [],
            "arguments": {
                "idstorage": []
            }
        },
        "fail_find_mappings": {
            "name": "fail_find_mappings",
            "location": 649,
            "return": [],
            "arguments": {
                "idstorage": [],
                "oid": [],
                "ns_filter": [],
                "expected": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/storage/mongo/__init__.py": {},
    "IDMappingService-master/src/jgikbase/test/idmapping/userhandlers/kbase_user_lookup_test.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "log_collector": {
            "name": "log_collector",
            "location": 29,
            "return": [],
            "arguments": {
                "init_logger": []
            }
        },
        "assert_logs_correct": {
            "name": "assert_logs_correct",
            "location": 35,
            "return": [],
            "arguments": {
                "logs": [],
                "logstring": []
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_init_with_builder": {
            "name": "test_init_with_builder",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_init_with_builder_fail_missing_input": {
            "name": "test_init_with_builder_fail_missing_input",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "fail_init_with_builder": {
            "name": "fail_init_with_builder",
            "location": 83,
            "return": [],
            "arguments": {
                "cfg": [],
                "expected": []
            }
        },
        "test_init_fail_None_input": {
            "name": "test_init_fail_None_input",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_init_fail_not_json": {
            "name": "test_init_fail_not_json",
            "location": 95,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_init_fail_auth_returned_error": {
            "name": "test_init_fail_auth_returned_error",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_init_fail_missing_keys": {
            "name": "test_init_fail_missing_keys",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "check_missing_keys": {
            "name": "check_missing_keys",
            "location": 131,
            "return": [],
            "arguments": {
                "json": [],
                "missing_keys": []
            }
        },
        "fail_init": {
            "name": "fail_init",
            "location": 142,
            "return": [],
            "arguments": {
                "url": [],
                "token": [],
                "kbase_admin_str": [],
                "expected": []
            }
        },
        "get_user_handler": {
            "name": "get_user_handler",
            "location": 148,
            "return": [],
            "arguments": {
                "url": [],
                "token": [],
                "kbase_admin_role": []
            }
        },
        "test_get_authsource_id": {
            "name": "test_get_authsource_id",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "check_get_user": {
            "name": "check_get_user",
            "location": 170,
            "return": [],
            "arguments": {
                "isadmin": [],
                "customroles": []
            }
        },
        "test_get_user_fail_None_input": {
            "name": "test_get_user_fail_None_input",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "test_get_user_fail_not_json_token": {
            "name": "test_get_user_fail_not_json_token",
            "location": 191,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_get_user_fail_invalid_token_token": {
            "name": "test_get_user_fail_invalid_token_token",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_get_user_fail_auth_returned_other_error_token": {
            "name": "test_get_user_fail_auth_returned_other_error_token",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_get_user_fail_not_json_me": {
            "name": "test_get_user_fail_not_json_me",
            "location": 236,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_get_user_fail_invalid_token_me": {
            "name": "test_get_user_fail_invalid_token_me",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "test_get_user_fail_auth_returned_other_error_me": {
            "name": "test_get_user_fail_auth_returned_other_error_me",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "fail_get_user": {
            "name": "fail_get_user",
            "location": 295,
            "return": [],
            "arguments": {
                "kbuh": [],
                "token": [],
                "expected": []
            }
        },
        "test_is_valid_user": {
            "name": "test_is_valid_user",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "check_is_valid_user": {
            "name": "check_is_valid_user",
            "location": 306,
            "return": [],
            "arguments": {
                "json": [],
                "result": []
            }
        },
        "test_is_valid_user_fail_None_input": {
            "name": "test_is_valid_user_fail_None_input",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "test_is_valid_user_fail_not_json": {
            "name": "test_is_valid_user_fail_not_json",
            "location": 322,
            "return": [],
            "arguments": {
                "log_collector": []
            }
        },
        "test_is_valid_user_fail_invalid_token": {
            "name": "test_is_valid_user_fail_invalid_token",
            "location": 340,
            "return": [],
            "arguments": {}
        },
        "test_is_valid_user_fail_auth_returned_other_error": {
            "name": "test_is_valid_user_fail_auth_returned_other_error",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "fail_is_valid_user": {
            "name": "fail_is_valid_user",
            "location": 367,
            "return": [],
            "arguments": {
                "kbuh": [],
                "username": [],
                "expected": []
            }
        }
    },
    "IDMappingService-master/src/jgikbase/test/idmapping/userhandlers/__init__.py": {}
}
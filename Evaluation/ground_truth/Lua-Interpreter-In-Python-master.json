{
    "Lua-Interpreter-In-Python-master/compiler.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "Lua-Interpreter-In-Python-master/repl.py": {
        "run": {
            "name": "run",
            "location": 14,
            "return": [],
            "arguments": {
                "tokens": [],
                "ast_code": []
            }
        }
    },
    "Lua-Interpreter-In-Python-master/luatopy/ast.py": {
        "Program.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "Program.to_code": {
            "name": "to_code",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.to_code": {
            "name": "to_code",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.to_code": {
            "name": "to_code",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.to_code": {
            "name": "to_code",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.to_code": {
            "name": "to_code",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignStatement.to_code": {
            "name": "to_code",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionStatement.to_code": {
            "name": "to_code",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerLiteral.to_code": {
            "name": "to_code",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLiteral.to_code": {
            "name": "to_code",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixExpression.to_code": {
            "name": "to_code",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfixExpression.to_code": {
            "name": "to_code",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStatement.to_code": {
            "name": "to_code",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfExpression.to_code": {
            "name": "to_code",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionLiteral.to_code": {
            "name": "to_code",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallExpression.to_code": {
            "name": "to_code",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableLiteral.to_code": {
            "name": "to_code",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexExpression.to_code": {
            "name": "to_code",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Lua-Interpreter-In-Python-master/luatopy/builtins.py": {
        "register": {
            "name": "register",
            "location": 10,
            "return": [],
            "arguments": {
                "store": [],
                "name": [],
                "fn": []
            }
        },
        "builtin_type": {
            "name": "builtin_type",
            "location": 15,
            "return": [
                "obj.Obj"
            ],
            "arguments": {}
        },
        "builtin_print": {
            "name": "builtin_print",
            "location": 40,
            "return": [
                "obj.Obj"
            ],
            "arguments": {}
        }
    },
    "Lua-Interpreter-In-Python-master/luatopy/evaluator.py": {
        "evaluate": {
            "name": "evaluate",
            "location": 10,
            "return": [],
            "arguments": {
                "node": [
                    "ast.Node"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "evaluate_index_expression": {
            "name": "evaluate_index_expression",
            "location": 136,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "left": [
                    "obj.Obj"
                ],
                "index": [
                    "obj.Obj"
                ]
            }
        },
        "evaluate_table_index_expression": {
            "name": "evaluate_table_index_expression",
            "location": 149,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "table": [
                    "obj.Table"
                ],
                "index": [
                    "obj.Integer"
                ]
            }
        },
        "evaluate_table_key_expression": {
            "name": "evaluate_table_key_expression",
            "location": 158,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "table": [
                    "obj.Table"
                ],
                "index": [
                    "obj.String"
                ]
            }
        },
        "apply_function": {
            "name": "apply_function",
            "location": 168,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "fn": [
                    "obj.Obj"
                ],
                "args": [
                    "List[obj.Obj]"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "unwrap_return_value": {
            "name": "unwrap_return_value",
            "location": 184,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "value": [
                    "obj.Obj"
                ]
            }
        },
        "extend_function_env": {
            "name": "extend_function_env",
            "location": 191,
            "return": [
                "obj.Environment"
            ],
            "arguments": {
                "fn": [
                    "obj.Function"
                ],
                "args": [
                    "List[obj.Obj]"
                ]
            }
        },
        "evaluate_expressions": {
            "name": "evaluate_expressions",
            "location": 202,
            "return": [
                "List[obj.Obj]"
            ],
            "arguments": {
                "expressions": [
                    "List[ast.Expression]"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "evaluate_expression_pairs": {
            "name": "evaluate_expression_pairs",
            "location": 217,
            "return": [
                "Dict[(obj.Obj, obj.Obj)]"
            ],
            "arguments": {
                "expressions": [
                    "List[Tuple[(ast.Expression, ast.Expression)]]"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "evaluate_identifier": {
            "name": "evaluate_identifier",
            "location": 230,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "identifier": [
                    "ast.Identifier"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "evaluate_program": {
            "name": "evaluate_program",
            "location": 243,
            "return": [],
            "arguments": {
                "program": [
                    "ast.Program"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "evaluate_block_statement": {
            "name": "evaluate_block_statement",
            "location": 257,
            "return": [],
            "arguments": {
                "block_statement": [
                    "ast.BlockStatement"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "eval_if_expression": {
            "name": "eval_if_expression",
            "location": 270,
            "return": [],
            "arguments": {
                "if_exp": [
                    "ast.IfExpression"
                ],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "is_truthy": {
            "name": "is_truthy",
            "location": 284,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "obj.Obj"
                ]
            }
        },
        "evaluate_statements": {
            "name": "evaluate_statements",
            "location": 294,
            "return": [],
            "arguments": {
                "statements": [],
                "env": [
                    "obj.Environment"
                ]
            }
        },
        "evaluate_prefix_expression": {
            "name": "evaluate_prefix_expression",
            "location": 306,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "right": [
                    "obj.Obj"
                ]
            }
        },
        "evaluate_not_operator_expression": {
            "name": "evaluate_not_operator_expression",
            "location": 319,
            "return": [
                "obj.Boolean"
            ],
            "arguments": {
                "right": [
                    "obj.Obj"
                ]
            }
        },
        "evaluate_minus_operator_expression": {
            "name": "evaluate_minus_operator_expression",
            "location": 329,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "right": [
                    "obj.Obj"
                ]
            }
        },
        "evaluate_length_operator_expression": {
            "name": "evaluate_length_operator_expression",
            "location": 342,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "right": [
                    "obj.Obj"
                ]
            }
        },
        "evaluate_infix_expression": {
            "name": "evaluate_infix_expression",
            "location": 358,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "left": [
                    "obj.Obj"
                ],
                "right": [
                    "obj.Obj"
                ]
            }
        },
        "evaluate_infix_string_expression": {
            "name": "evaluate_infix_string_expression",
            "location": 398,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "operator": [],
                "left": [
                    "obj.String"
                ],
                "right": [
                    "obj.String"
                ]
            }
        },
        "evaluate_infix_integer_expression": {
            "name": "evaluate_infix_integer_expression",
            "location": 406,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "operator": [],
                "left": [
                    "obj.Integer"
                ],
                "right": [
                    "obj.Integer"
                ]
            }
        },
        "native_bool_to_bool_obj": {
            "name": "native_bool_to_bool_obj",
            "location": 445,
            "return": [
                "obj.Boolean"
            ],
            "arguments": {
                "value": [
                    "bool"
                ]
            }
        },
        "is_error": {
            "name": "is_error",
            "location": 449,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance": [
                    "obj.Obj"
                ]
            }
        }
    },
    "Lua-Interpreter-In-Python-master/luatopy/lexer.py": {
        "is_letter": {
            "name": "is_letter",
            "location": 323,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": []
            }
        },
        "is_digit": {
            "name": "is_digit",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": []
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "StringIO"
                ]
            }
        },
        "Lexer.read_char": {
            "name": "read_char",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.peek_ahead": {
            "name": "peek_ahead",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int"
                ]
            }
        },
        "Lexer.peek_behind": {
            "name": "peek_behind",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int"
                ]
            }
        },
        "Lexer.skip_whitespace": {
            "name": "skip_whitespace",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.tokens": {
            "name": "tokens",
            "location": 43,
            "return": [
                "Iterator[Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.next_token": {
            "name": "next_token",
            "location": 51,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.read_identifier": {
            "name": "read_identifier",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.read_number": {
            "name": "read_number",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.read_string": {
            "name": "read_string",
            "location": 279,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indicator": [
                    "str"
                ]
            }
        },
        "Lexer.read_comment": {
            "name": "read_comment",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.read_multiline_comment": {
            "name": "read_multiline_comment",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Lua-Interpreter-In-Python-master/luatopy/obj.py": {
        "Obj.type": {
            "name": "type",
            "location": 23,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.inspect": {
            "name": "inspect",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "outer": [
                    "Optional['Environment']"
                ]
            }
        },
        "Environment.get": {
            "name": "get",
            "location": 35,
            "return": [
                "Tuple[(Obj, bool)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "Obj"
                ]
            }
        },
        "Environment.contains": {
            "name": "contains",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Environment.set": {
            "name": "set",
            "location": 47,
            "return": [
                "Obj"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Obj"
                ]
            }
        },
        "Environment.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Environment.create_enclosed": {
            "name": "create_enclosed",
            "location": 58,
            "return": [
                "'Environment'"
            ],
            "arguments": {
                "outer": [
                    "'Environment'"
                ]
            }
        },
        "Integer.type": {
            "name": "type",
            "location": 66,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.inspect": {
            "name": "inspect",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.__hash__": {
            "name": "__hash__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Float.type": {
            "name": "type",
            "location": 80,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.inspect": {
            "name": "inspect",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.type": {
            "name": "type",
            "location": 91,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.inspect": {
            "name": "inspect",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Null.type": {
            "name": "type",
            "location": 99,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Null.inspect": {
            "name": "inspect",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnValue.type": {
            "name": "type",
            "location": 110,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnValue.inspect": {
            "name": "inspect",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.create": {
            "name": "create",
            "location": 122,
            "return": [],
            "arguments": {
                "str_format": []
            }
        },
        "Error.type": {
            "name": "type",
            "location": 125,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.inspect": {
            "name": "inspect",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.type": {
            "name": "type",
            "location": 138,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.inspect": {
            "name": "inspect",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.type": {
            "name": "type",
            "location": 155,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.inspect": {
            "name": "inspect",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__hash__": {
            "name": "__hash__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Builtin.type": {
            "name": "type",
            "location": 174,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builtin.inspect": {
            "name": "inspect",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.type": {
            "name": "type",
            "location": 185,
            "return": [
                "ObjType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.inspect": {
            "name": "inspect",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Lua-Interpreter-In-Python-master/luatopy/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [
                    "Lexer"
                ]
            }
        },
        "Parser.next_token": {
            "name": "next_token",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_program": {
            "name": "parse_program",
            "location": 107,
            "return": [
                "ast.Program"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_statement": {
            "name": "parse_statement",
            "location": 123,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_assignment_statement": {
            "name": "parse_assignment_statement",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_return_statement": {
            "name": "parse_return_statement",
            "location": 156,
            "return": [
                "ast.ReturnStatement"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_if_expression": {
            "name": "parse_if_expression",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_statement": {
            "name": "parse_block_statement",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_expression_statement": {
            "name": "parse_expression_statement",
            "location": 205,
            "return": [
                "ast.ExpressionStatement"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_expression": {
            "name": "parse_expression",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "precedence": [
                    "Precedence"
                ]
            }
        },
        "Parser.parse_identifier": {
            "name": "parse_identifier",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_integer_literal": {
            "name": "parse_integer_literal",
            "location": 244,
            "return": [
                "ast.IntegerLiteral"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_string_literal": {
            "name": "parse_string_literal",
            "location": 249,
            "return": [
                "ast.StringLiteral"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_boolean_literal": {
            "name": "parse_boolean_literal",
            "location": 254,
            "return": [
                "ast.Boolean"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_function_literal": {
            "name": "parse_function_literal",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_function_parameters": {
            "name": "parse_function_parameters",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.cur_precedence": {
            "name": "cur_precedence",
            "location": 306,
            "return": [
                "Precedence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.peek_precedence": {
            "name": "peek_precedence",
            "location": 309,
            "return": [
                "Precedence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_prefix_expression": {
            "name": "parse_prefix_expression",
            "location": 312,
            "return": [
                "ast.PrefixExpression"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_infix_expression": {
            "name": "parse_infix_expression",
            "location": 322,
            "return": [
                "ast.InfixExpression"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "ast.Node"
                ]
            }
        },
        "Parser.parse_call_expression": {
            "name": "parse_call_expression",
            "location": 334,
            "return": [
                "ast.CallExpression"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "ast.Node"
                ]
            }
        },
        "Parser.parse_call_arguments": {
            "name": "parse_call_arguments",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_grouped_expression": {
            "name": "parse_grouped_expression",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.expect_peek": {
            "name": "expect_peek",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token_type": [
                    "TokenType"
                ]
            }
        },
        "Parser.parse_table_literal": {
            "name": "parse_table_literal",
            "location": 389,
            "return": [
                "ast.TableLiteral"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_table_expression_list": {
            "name": "parse_table_expression_list",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_table_identifier_pair": {
            "name": "parse_table_identifier_pair",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_table_expression_value": {
            "name": "parse_table_expression_value",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_table_expression_pair": {
            "name": "parse_table_expression_pair",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_index_expression": {
            "name": "parse_index_expression",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "left": [
                    "ast.Node"
                ]
            }
        }
    },
    "Lua-Interpreter-In-Python-master/luatopy/token.py": {},
    "Lua-Interpreter-In-Python-master/luatopy/__init__.py": {},
    "Lua-Interpreter-In-Python-master/tests/test_evaluator.py": {
        "source_to_eval": {
            "name": "source_to_eval",
            "location": 338,
            "return": [
                "obj.Obj"
            ],
            "arguments": {
                "source": []
            }
        },
        "EvaluatorTest.test_integer_expressions": {
            "name": "test_integer_expressions",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_float_expressions": {
            "name": "test_float_expressions",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_string_concat": {
            "name": "test_string_concat",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_boolean_expressions": {
            "name": "test_boolean_expressions",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_not_prefix_operator": {
            "name": "test_not_prefix_operator",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_bool_infix_operations": {
            "name": "test_bool_infix_operations",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_length_prefix_operator": {
            "name": "test_length_prefix_operator",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_if_else_expressions": {
            "name": "test_if_else_expressions",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_return_statements": {
            "name": "test_return_statements",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_error_handling": {
            "name": "test_error_handling",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_that_non_existing_identifiers_returns_nil": {
            "name": "test_that_non_existing_identifiers_returns_nil",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_assignments": {
            "name": "test_assignments",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_function_declaration": {
            "name": "test_function_declaration",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_named_function_declaration": {
            "name": "test_named_function_declaration",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_function_call": {
            "name": "test_function_call",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_function_closure": {
            "name": "test_function_closure",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_string_expressions": {
            "name": "test_string_expressions",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_builints": {
            "name": "test_builints",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_table_expressions": {
            "name": "test_table_expressions",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluatorTest.test_table_index_expressions": {
            "name": "test_table_index_expressions",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Lua-Interpreter-In-Python-master/tests/test_lexer.py": {
        "LexerTest.test_binary_op": {
            "name": "test_binary_op",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_that_eof_gets_retruned": {
            "name": "test_that_eof_gets_retruned",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_that_tokens_are_created_according_to_source": {
            "name": "test_that_tokens_are_created_according_to_source",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_bool_tokens": {
            "name": "test_bool_tokens",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_if_statement_keywords": {
            "name": "test_if_statement_keywords",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_function_tokens": {
            "name": "test_function_tokens",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_call_tokens": {
            "name": "test_call_tokens",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_semicolon_delimiter": {
            "name": "test_semicolon_delimiter",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_string_type": {
            "name": "test_string_type",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_table_list_declaration": {
            "name": "test_table_list_declaration",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_identifier_with_num_in_name": {
            "name": "test_identifier_with_num_in_name",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_table_hashmap_declaration": {
            "name": "test_table_hashmap_declaration",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_table_length_hash_char": {
            "name": "test_table_length_hash_char",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerTest.test_modulo_operator": {
            "name": "test_modulo_operator",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Lua-Interpreter-In-Python-master/tests/test_parser.py": {
        "program_from_source": {
            "name": "program_from_source",
            "location": 213,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "ParserTest.test_prefix_parsing": {
            "name": "test_prefix_parsing",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_influx_parsing": {
            "name": "test_influx_parsing",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_string_influx_parsing": {
            "name": "test_string_influx_parsing",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_operator_precedence": {
            "name": "test_operator_precedence",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_operator_precedence_groups": {
            "name": "test_operator_precedence_groups",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_semicolon_delimiter": {
            "name": "test_semicolon_delimiter",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_integer_literal": {
            "name": "test_integer_literal",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_identifier": {
            "name": "test_identifier",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_booleans": {
            "name": "test_booleans",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_variable_assign": {
            "name": "test_variable_assign",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_multiple_variable_assign": {
            "name": "test_multiple_variable_assign",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_if_statements": {
            "name": "test_if_statements",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_function_statements": {
            "name": "test_function_statements",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_named_function_statements": {
            "name": "test_named_function_statements",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_function_calls": {
            "name": "test_function_calls",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_return_statements": {
            "name": "test_return_statements",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_string_literal": {
            "name": "test_string_literal",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_table_literal": {
            "name": "test_table_literal",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_table_key_value": {
            "name": "test_table_key_value",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parsing_index_expressions": {
            "name": "test_parsing_index_expressions",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Lua-Interpreter-In-Python-master/tests/__init__.py": {}
}
{
    "Minotaur-master/setup.py": {},
    "Minotaur-master/versioneer.py": {
        "get_root": {
            "name": "get_root",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "get_config_from_root": {
            "name": "get_config_from_root",
            "location": 335,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 373,
            "return": [],
            "arguments": {
                "vcs": [],
                "method": []
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 384,
            "return": [],
            "arguments": {
                "commands": [],
                "args": [],
                "cwd": [],
                "verbose": [],
                "hide_stderr": [],
                "env": []
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 945,
            "return": [],
            "arguments": {
                "versionfile_abs": []
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 974,
            "return": [],
            "arguments": {
                "keywords": [],
                "tag_prefix": [],
                "verbose": []
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 1029,
            "return": [],
            "arguments": {
                "tag_prefix": [],
                "root": [],
                "verbose": [],
                "run_command": []
            }
        },
        "do_vcs_install": {
            "name": "do_vcs_install",
            "location": 1120,
            "return": [],
            "arguments": {
                "manifest_in": [],
                "versionfile_source": [],
                "ipy": []
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 1158,
            "return": [],
            "arguments": {
                "parentdir_prefix": [],
                "root": [],
                "verbose": []
            }
        },
        "versions_from_file": {
            "name": "versions_from_file",
            "location": 1201,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "write_to_version_file": {
            "name": "write_to_version_file",
            "location": 1218,
            "return": [],
            "arguments": {
                "filename": [],
                "versions": []
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 1229,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 1236,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 1261,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 1277,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 1304,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 1326,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 1346,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render": {
            "name": "render",
            "location": 1366,
            "return": [],
            "arguments": {
                "pieces": [],
                "style": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 1402,
            "return": [],
            "arguments": {
                "verbose": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 1478,
            "return": [],
            "arguments": {}
        },
        "get_cmdclass": {
            "name": "get_cmdclass",
            "location": 1483,
            "return": [],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 1697,
            "return": [],
            "arguments": {}
        },
        "scan_setup_py": {
            "name": "scan_setup_py",
            "location": 1779,
            "return": [],
            "arguments": {}
        },
        "get_config_from_root.get": {
            "name": "get",
            "location": 347,
            "return": [],
            "arguments": {
                "parser": [],
                "name": []
            }
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 375,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "get_cmdclass.cmd_version.initialize_options": {
            "name": "initialize_options",
            "location": 1510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.finalize_options": {
            "name": "finalize_options",
            "location": 1513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.run": {
            "name": "run",
            "location": 1516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_build_py.run": {
            "name": "run",
            "location": 1548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.run": {
            "name": "run",
            "location": 1629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 1637,
            "return": [],
            "arguments": {
                "self": [],
                "base_dir": [],
                "files": []
            }
        },
        "get_cmdclass.cmd_build_exe.run": {
            "name": "run",
            "location": 1572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_py2exe.run": {
            "name": "run",
            "location": 1601,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Minotaur-master/minotaur/cmdline.py": {
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 14,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "get_settings": {
            "name": "get_settings",
            "location": 37,
            "return": [
                "Settings"
            ],
            "arguments": {
                "settings": [
                    "Union[(Mapping[(KT, VT)], Iterable[Tuple[(KT, VT)]])]"
                ],
                "priority": [
                    "str"
                ]
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "Settings"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Minotaur-master/minotaur/exceptions.py": {},
    "Minotaur-master/minotaur/_version.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 59,
            "return": [],
            "arguments": {
                "vcs": [],
                "method": []
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 70,
            "return": [],
            "arguments": {
                "commands": [],
                "args": [],
                "cwd": [],
                "verbose": [],
                "hide_stderr": [],
                "env": []
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 107,
            "return": [],
            "arguments": {
                "parentdir_prefix": [],
                "root": [],
                "verbose": []
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 133,
            "return": [],
            "arguments": {
                "versionfile_abs": []
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 162,
            "return": [],
            "arguments": {
                "keywords": [],
                "tag_prefix": [],
                "verbose": []
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 217,
            "return": [],
            "arguments": {
                "tag_prefix": [],
                "root": [],
                "verbose": [],
                "run_command": []
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 308,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 315,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 340,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 356,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 383,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 405,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 425,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render": {
            "name": "render",
            "location": 445,
            "return": [],
            "arguments": {
                "pieces": [],
                "style": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 477,
            "return": [],
            "arguments": {}
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 61,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "Minotaur-master/minotaur/__init__.py": {},
    "Minotaur-master/minotaur/core/__init__.py": {
        "Minotaur.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [
                    "Settings"
                ]
            }
        },
        "Minotaur.add_job": {
            "name": "add_job",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "job": [
                    "Callable"
                ]
            }
        },
        "Minotaur.start": {
            "name": "start",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Minotaur-master/minotaur/middlewares/__init__.py": {},
    "Minotaur-master/minotaur/pipelines/__init__.py": {},
    "Minotaur-master/minotaur/readers/__init__.py": {},
    "Minotaur-master/minotaur/settings/default_settings.py": {},
    "Minotaur-master/minotaur/settings/__init__.py": {
        "get_settings_priority": {
            "name": "get_settings_priority",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "priority": [
                    "str"
                ]
            }
        },
        "get_user_config": {
            "name": "get_user_config",
            "location": 243,
            "return": [
                "Optional[Path]"
            ],
            "arguments": {
                "config": [
                    "str"
                ]
            }
        },
        "SettingAttributes.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "priority": [
                    "str"
                ]
            }
        },
        "SettingAttributes.set": {
            "name": "set",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "priority": [
                    "str"
                ]
            }
        },
        "SettingAttributes._get": {
            "name": "_get",
            "location": 92,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "property_": [
                    "str"
                ]
            }
        },
        "SettingAttributes.get": {
            "name": "get",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingAttributes.get_priority": {
            "name": "get_priority",
            "location": 105,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [
                    "Mapping"
                ],
                "priority": [
                    "str"
                ]
            }
        },
        "BaseSettings.__contains__": {
            "name": "__contains__",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "object"
                ]
            }
        },
        "BaseSettings.__delitem__": {
            "name": "__delitem__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "BaseSettings.__getitem__": {
            "name": "__getitem__",
            "location": 148,
            "return": [
                "VT_co"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "BaseSettings.__iter__": {
            "name": "__iter__",
            "location": 151,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.__len__": {
            "name": "__len__",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.__setitem__": {
            "name": "__setitem__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "value": [
                    "VT"
                ]
            }
        },
        "BaseSettings.get": {
            "name": "get",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "BaseSettings.get_priority": {
            "name": "get_priority",
            "location": 171,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "KT"
                ]
            }
        },
        "BaseSettings.is_frozen": {
            "name": "is_frozen",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.set": {
            "name": "set",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "value": [
                    "VT"
                ],
                "priority": [
                    "str"
                ]
            }
        },
        "BaseSettings.unfreeze": {
            "name": "unfreeze",
            "location": 204,
            "return": [
                "Generator[(BaseSettings, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.update": {
            "name": "update",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Union[(Mapping[(KT, VT)], Iterable[Tuple[(KT, VT)]])]"
                ]
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [
                    "Mapping"
                ],
                "priority": [
                    "str"
                ],
                "config": [
                    "str"
                ]
            }
        },
        "Settings.update_from_module": {
            "name": "update_from_module",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "priority": [
                    "str"
                ]
            }
        },
        "BaseSettings.FrozenCheck.__call__": {
            "name": "__call__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "BaseSettings.update.iter_values": {
            "name": "iter_values",
            "location": 228,
            "return": [
                "Iterable[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "values_": [
                    "Union[(Mapping[(KT, VT)], Iterable[Tuple[(KT, VT)]])]"
                ]
            }
        },
        "BaseSettings.FrozenCheck.__call__.frozen_check": {
            "name": "frozen_check",
            "location": 125,
            "return": [],
            "arguments": {
                "base_settings": [
                    "BaseSettings"
                ]
            }
        }
    },
    "Minotaur-master/minotaur/utils/__init__.py": {},
    "Minotaur-master/tests/__init__.py": {},
    "Minotaur-master/tests/samples/default_settings.py": {},
    "Minotaur-master/tests/samples/settings.py": {},
    "Minotaur-master/tests/samples/__init__.py": {},
    "Minotaur-master/tests/settings/test_settings.py": {
        "SettingsFunctionsTest.setUpClass": {
            "name": "setUpClass",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SettingsFunctionsTest.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsFunctionsTest.tearDown": {
            "name": "tearDown",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsFunctionsTest.test_get_settings_priority": {
            "name": "test_get_settings_priority",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsFunctionsTest.test_get_user_config": {
            "name": "test_get_user_config",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingAttributesTest.setUpClass": {
            "name": "setUpClass",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SettingAttributesTest.test_setting_attributes_empty": {
            "name": "test_setting_attributes_empty",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingAttributesTest.test_setting_attributes": {
            "name": "test_setting_attributes",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.setUpClass": {
            "name": "setUpClass",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseSettingsTest.setUp": {
            "name": "setUp",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.tearDown": {
            "name": "tearDown",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_init": {
            "name": "test_init",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_contains": {
            "name": "test_contains",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_delitem": {
            "name": "test_delitem",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_getitem": {
            "name": "test_getitem",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_iter": {
            "name": "test_iter",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_len": {
            "name": "test_len",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_setitem": {
            "name": "test_setitem",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_get": {
            "name": "test_get",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_get_priority": {
            "name": "test_get_priority",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_is_frozen": {
            "name": "test_is_frozen",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_set": {
            "name": "test_set",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_unfreeze": {
            "name": "test_unfreeze",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_update": {
            "name": "test_update",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingsTest.test_frozen_check": {
            "name": "test_frozen_check",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsTest.setUp": {
            "name": "setUp",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsTest.tearDown": {
            "name": "tearDown",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsTest.test_init_empty": {
            "name": "test_init_empty",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsTest.test_init": {
            "name": "test_init",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsTest.test_update_from_module": {
            "name": "test_update_from_module",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Minotaur-master/tests/settings/__init__.py": {}
}
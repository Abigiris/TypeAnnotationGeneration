{
    "MtachingTbeBlanks-master/log_softmax.py": {},
    "MtachingTbeBlanks-master/mtb_evaluate_debug_warpper.py": {},
    "MtachingTbeBlanks-master/normal_evalution.py": {},
    "MtachingTbeBlanks-master/predictor_debuger.py": {},
    "MtachingTbeBlanks-master/tough_evaluation.py": {},
    "MtachingTbeBlanks-master/train_debugger.py": {},
    "MtachingTbeBlanks-master/my_library/__init__.py": {},
    "MtachingTbeBlanks-master/my_library/dataset_readers/mtb_reader.py": {
        "find_closest_distance_between_entities": {
            "name": "find_closest_distance_between_entities",
            "location": 24,
            "return": [],
            "arguments": {
                "head_start_location": [],
                "head_end_location": [],
                "tail_start_location": [],
                "tail_end_location": []
            }
        },
        "MTBDatasetReader.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "tokenizer": [
                    "Tokenizer"
                ],
                "token_indexers": [
                    "Dict[(str, TokenIndexer)]"
                ]
            }
        },
        "MTBDatasetReader._read": {
            "name": "_read",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "MTBDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 89,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "relation_type": [
                    "int"
                ]
            }
        },
        "MTBDatasetReader.addStartEntityTokens": {
            "name": "addStartEntityTokens",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "tokens_list": [],
                "head_full_data": [],
                "tail_full_data": []
            }
        },
        "MTBDatasetReader.deny_overlapping": {
            "name": "deny_overlapping",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "tokens_list": [],
                "longest_entity_end_location": [],
                "shortest_entity_full_data": []
            }
        },
        "MTBDatasetReader.return_lower_text_from_tokens": {
            "name": "return_lower_text_from_tokens",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "MTBDatasetReader.compare_two_token_lists": {
            "name": "compare_two_token_lists",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "MTBDatasetReader.spacy_work_toknizer": {
            "name": "spacy_work_toknizer",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "MTBDatasetReader.find_locations": {
            "name": "find_locations",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "head_full_data": [],
                "token_list": []
            }
        },
        "MTBDatasetReader._find_entity_name": {
            "name": "_find_entity_name",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "token_list": [],
                "head_full_data": [],
                "use_spacy_toknizer_before": []
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/dataset_readers/only_entities_reader.py": {
        "find_closest_distance_between_entities": {
            "name": "find_closest_distance_between_entities",
            "location": 24,
            "return": [],
            "arguments": {
                "head_start_location": [],
                "head_end_location": [],
                "tail_start_location": [],
                "tail_end_location": []
            }
        },
        "OnlyEntitiesDatasetReader.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "tokenizer": [
                    "Tokenizer"
                ],
                "single_entity": [
                    "str"
                ],
                "token_indexers": [
                    "Dict[(str, TokenIndexer)]"
                ]
            }
        },
        "OnlyEntitiesDatasetReader._read": {
            "name": "_read",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "OnlyEntitiesDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 62,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "relation_type": [
                    "int"
                ]
            }
        },
        "OnlyEntitiesDatasetReader.create_head_tail_sentence": {
            "name": "create_head_tail_sentence",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "dict"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/dataset_readers/__init__.py": {},
    "MtachingTbeBlanks-master/my_library/models/Embedding_and_bilstm.py": {
        "EmbeddingsMTB.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Vocabulary"
                ],
                "text_field_embedder": [
                    "TextFieldEmbedder"
                ],
                "metrics": [
                    "Dict[(str, allennlp.training.metrics.Metric)]"
                ],
                "number_of_layers": [
                    "int"
                ],
                "number_of_linear_layers": [
                    "int"
                ],
                "renorm_method": [
                    "str"
                ],
                "skip_connection": [
                    "bool"
                ],
                "regularizer": [
                    "RegularizerApplicator"
                ],
                "bert_model": [
                    "str"
                ]
            }
        },
        "EmbeddingsMTB.forward": {
            "name": "forward",
            "location": 68,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "test": [],
                "clean_tokens": [],
                "test_clean_text": [],
                "label": []
            }
        },
        "EmbeddingsMTB.debug_query_sentence": {
            "name": "debug_query_sentence",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "test_bert": [],
                "head": [],
                "tail": [],
                "batch_input": [],
                "i": []
            }
        },
        "EmbeddingsMTB.renorm_vector": {
            "name": "renorm_vector",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "concat_represntentions": []
            }
        },
        "EmbeddingsMTB.debug_issue": {
            "name": "debug_issue",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "bert_context_for_relation": [],
                "sentences": [],
                "test": [],
                "test_bert": []
            }
        },
        "EmbeddingsMTB.reassemble_sentence_for_debug": {
            "name": "reassemble_sentence_for_debug",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "sentences": [],
                "batch_input": [],
                "i": []
            }
        },
        "EmbeddingsMTB.get_head_tail_locations": {
            "name": "get_head_tail_locations",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "EmbeddingsMTB.assert_head_tail_correct_location": {
            "name": "assert_head_tail_correct_location",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "batch_input": [],
                "clean_tokens": [],
                "head": [],
                "i": [],
                "tail": []
            }
        },
        "EmbeddingsMTB.extract_embeddings_of_start_tokens": {
            "name": "extract_embeddings_of_start_tokens",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "relation_representation": [],
                "i": [],
                "batch_input": [],
                "head": [],
                "tail": []
            }
        },
        "EmbeddingsMTB.get_metrics": {
            "name": "get_metrics",
            "location": 202,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/mtb_model.py": {
        "BertEmbeddingsMTB.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Vocabulary"
                ],
                "text_field_embedder": [
                    "TextFieldEmbedder"
                ],
                "number_of_linear_layers": [
                    "int"
                ],
                "metrics": [
                    "Dict[(str, allennlp.training.metrics.Metric)]"
                ],
                "renorm_method": [
                    "str"
                ],
                "skip_connection": [
                    "bool"
                ],
                "regularizer": [
                    "RegularizerApplicator"
                ],
                "bert_model": [
                    "str"
                ]
            }
        },
        "BertEmbeddingsMTB.forward": {
            "name": "forward",
            "location": 94,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "locations": [],
                "test": [],
                "test_location": [],
                "clean_tokens": [],
                "test_clean_text": [],
                "label": []
            }
        },
        "BertEmbeddingsMTB.debug_query_sentence": {
            "name": "debug_query_sentence",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "test_bert": [],
                "head": [],
                "tail": [],
                "batch_input": [],
                "i": []
            }
        },
        "BertEmbeddingsMTB.renorm_vector": {
            "name": "renorm_vector",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "concat_represntentions": []
            }
        },
        "BertEmbeddingsMTB.debug_issue": {
            "name": "debug_issue",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "bert_context_for_relation": [],
                "sentences": [],
                "test": [],
                "test_bert": []
            }
        },
        "BertEmbeddingsMTB.reassemble_sentence_for_debug": {
            "name": "reassemble_sentence_for_debug",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "sentences": [],
                "batch_input": [],
                "i": []
            }
        },
        "BertEmbeddingsMTB.get_head_tail_locations": {
            "name": "get_head_tail_locations",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "BertEmbeddingsMTB.assert_head_tail_correct_location": {
            "name": "assert_head_tail_correct_location",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "batch_input": [],
                "clean_tokens": [],
                "head": [],
                "i": [],
                "tail": []
            }
        },
        "BertEmbeddingsMTB.extract_embeddings_of_start_tokens": {
            "name": "extract_embeddings_of_start_tokens",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "relation_representation": [],
                "i": [],
                "batch_input": [],
                "head": [],
                "tail": []
            }
        },
        "BertEmbeddingsMTB.get_metrics": {
            "name": "get_metrics",
            "location": 219,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/my_bert_tokenizer.py": {
        "MyBertWordSplitter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_lower_case": [
                    "bool"
                ],
                "never_split": [
                    "tuple"
                ]
            }
        },
        "MyBertWordSplitter.split_words": {
            "name": "split_words",
            "location": 22,
            "return": [
                "List[Token]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/only_entities_model.py": {
        "BertEmbeddingsMTB.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Vocabulary"
                ],
                "text_field_embedder": [
                    "TextFieldEmbedder"
                ],
                "number_of_linear_layers": [
                    "int"
                ],
                "metrics": [
                    "Dict[(str, allennlp.training.metrics.Metric)]"
                ],
                "renorm_method": [
                    "str"
                ],
                "skip_connection": [
                    "bool"
                ],
                "regularizer": [
                    "RegularizerApplicator"
                ],
                "bert_model": [
                    "str"
                ]
            }
        },
        "BertEmbeddingsMTB.forward": {
            "name": "forward",
            "location": 91,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "test": [],
                "clean_tokens": [],
                "test_clean_text": [],
                "label": []
            }
        },
        "BertEmbeddingsMTB.debug_query_sentence": {
            "name": "debug_query_sentence",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "test_bert": [],
                "head": [],
                "tail": [],
                "batch_input": [],
                "i": []
            }
        },
        "BertEmbeddingsMTB.renorm_vector": {
            "name": "renorm_vector",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "concat_represntentions": []
            }
        },
        "BertEmbeddingsMTB.debug_issue": {
            "name": "debug_issue",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "bert_context_for_relation": [],
                "sentences": [],
                "test": [],
                "test_bert": []
            }
        },
        "BertEmbeddingsMTB.reassemble_sentence_for_debug": {
            "name": "reassemble_sentence_for_debug",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "sentences": [],
                "batch_input": [],
                "i": []
            }
        },
        "BertEmbeddingsMTB.get_head_tail_locations": {
            "name": "get_head_tail_locations",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "BertEmbeddingsMTB.assert_head_tail_correct_location": {
            "name": "assert_head_tail_correct_location",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "batch_input": [],
                "clean_tokens": [],
                "head": [],
                "i": [],
                "tail": []
            }
        },
        "BertEmbeddingsMTB.extract_embeddings_of_start_tokens": {
            "name": "extract_embeddings_of_start_tokens",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "relation_representation": [],
                "i": [],
                "batch_input": [],
                "head": [],
                "tail": []
            }
        },
        "BertEmbeddingsMTB.get_metrics": {
            "name": "get_metrics",
            "location": 221,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/__init__.py": {},
    "MtachingTbeBlanks-master/my_library/predictors/fewrel_analyze_predictor.py": {
        "softmax": {
            "name": "softmax",
            "location": 10,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "MTBClassifierPredictor.predict_json": {
            "name": "predict_json",
            "location": 21,
            "return": [
                "JsonDict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "JsonDict"
                ]
            }
        },
        "MTBClassifierPredictor.extract_mapping_and_correct_answer": {
            "name": "extract_mapping_and_correct_answer",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "MTBClassifierPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 72,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "JsonDict"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/predictors/fewrel_submission_predictor.py": {
        "MTBClassifierPredictor.predict_json": {
            "name": "predict_json",
            "location": 10,
            "return": [
                "JsonDict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "JsonDict"
                ]
            }
        },
        "MTBClassifierPredictor.extract_mapping_and_correct_answer": {
            "name": "extract_mapping_and_correct_answer",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "MTBClassifierPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 33,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "JsonDict"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/predictors/__init__.py": {},
    "MtachingTbeBlanks-master/tests/__init__.py": {}
}
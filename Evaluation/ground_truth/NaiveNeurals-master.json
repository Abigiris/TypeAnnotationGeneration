{
    "NaiveNeurals-master/functional_tests/test_neural_network.py": {
        "test_basic_pass_network": {
            "name": "test_basic_pass_network",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_neural_network_xor": {
            "name": "test_neural_network_xor",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/NaiveNeurals/utils.py": {},
    "NaiveNeurals-master/NaiveNeurals/__init__.py": {},
    "NaiveNeurals-master/NaiveNeurals/data/dataset.py": {
        "DataSet.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_inputs": [
                    "Union[(List[List], np.array)]"
                ],
                "targets": [
                    "Union[(List[List], np.array)]"
                ]
            }
        },
        "DataSet.inputs": {
            "name": "inputs",
            "location": 19,
            "return": [
                "np.array"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSet.targets": {
            "name": "targets",
            "location": 24,
            "return": [
                "np.array"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/data/data_generators.py": {
        "data_generator_for_regression": {
            "name": "data_generator_for_regression",
            "location": 9,
            "return": [
                "Tuple[(np.array, np.array)]"
            ],
            "arguments": {
                "data_series": [
                    "DataSeries"
                ],
                "data_size": [
                    "int"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/data/data_manipulators.py": {
        "prepare_time_series_data": {
            "name": "prepare_time_series_data",
            "location": 13,
            "return": [
                "Tuple[(List[List[float]], List[float])]"
            ],
            "arguments": {
                "source_data": [
                    "List[float]"
                ],
                "network_input_size": [
                    "int"
                ],
                "data_interval": [
                    "int"
                ]
            }
        },
        "get_time_series_data_slice": {
            "name": "get_time_series_data_slice",
            "location": 47,
            "return": [
                "Tuple[(List[List[float]], List[List[float]])]"
            ],
            "arguments": {
                "source_data_series": [
                    "List[List[float]]"
                ],
                "target_data_series": [
                    "List[float]"
                ],
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ]
            }
        },
        "normalise_data": {
            "name": "normalise_data",
            "location": 66,
            "return": [
                "np.array"
            ],
            "arguments": {
                "arr": [
                    "Union[(np.array, List)]"
                ],
                "algorithm": [
                    "FeatureScaling"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/data/__init__.py": {},
    "NaiveNeurals-master/NaiveNeurals/MLP/activation_functions.py": {
        "get_activation_function": {
            "name": "get_activation_function",
            "location": 166,
            "return": [
                "ActivationFunction"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "calculate_error": {
            "name": "calculate_error",
            "location": 181,
            "return": [
                "np.array"
            ],
            "arguments": {
                "target": [
                    "np.array"
                ],
                "actual": [
                    "np.array"
                ],
                "func_type": [
                    "ErrorAlgorithm"
                ]
            }
        },
        "ActivationFunction.function": {
            "name": "function",
            "location": 17,
            "return": [
                "np.array"
            ],
            "arguments": {
                "arg": [
                    "np.array"
                ]
            }
        },
        "ActivationFunction.prime": {
            "name": "prime",
            "location": 27,
            "return": [
                "np.array"
            ],
            "arguments": {
                "cls": [],
                "arg": [
                    "np.array"
                ]
            }
        },
        "Sigmoid.function": {
            "name": "function",
            "location": 42,
            "return": [
                "np.array"
            ],
            "arguments": {
                "arg": [
                    "np.array"
                ]
            }
        },
        "Sigmoid.prime": {
            "name": "prime",
            "location": 51,
            "return": [
                "np.array"
            ],
            "arguments": {
                "cls": [],
                "arg": [
                    "np.array"
                ]
            }
        },
        "Tanh.function": {
            "name": "function",
            "location": 66,
            "return": [
                "np.array"
            ],
            "arguments": {
                "arg": [
                    "np.array"
                ]
            }
        },
        "Tanh.prime": {
            "name": "prime",
            "location": 75,
            "return": [
                "np.array"
            ],
            "arguments": {
                "cls": [],
                "arg": [
                    "np.array"
                ]
            }
        },
        "Linear.function": {
            "name": "function",
            "location": 90,
            "return": [
                "np.array"
            ],
            "arguments": {
                "arg": [
                    "np.array"
                ]
            }
        },
        "Linear.prime": {
            "name": "prime",
            "location": 99,
            "return": [
                "np.array"
            ],
            "arguments": {
                "cls": [],
                "arg": [
                    "np.array"
                ]
            }
        },
        "SoftMax.function": {
            "name": "function",
            "location": 122,
            "return": [
                "np.array"
            ],
            "arguments": {
                "arg": [
                    "np.array"
                ],
                "beta": [
                    "int"
                ]
            }
        },
        "SoftMax.prime": {
            "name": "prime",
            "location": 133,
            "return": [
                "np.array"
            ],
            "arguments": {
                "cls": [],
                "arg": [
                    "np.array"
                ]
            }
        },
        "SoftPlus.function": {
            "name": "function",
            "location": 148,
            "return": [
                "np.array"
            ],
            "arguments": {
                "arg": [
                    "np.array"
                ]
            }
        },
        "SoftPlus.prime": {
            "name": "prime",
            "location": 157,
            "return": [
                "np.array"
            ],
            "arguments": {
                "cls": [],
                "arg": [
                    "np.array"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/MLP/network.py": {
        "LearningConfiguration.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_function": [
                    "ErrorAlgorithm"
                ],
                "solver": [
                    "str"
                ],
                "learning_rate": [
                    "float"
                ],
                "max_epochs": [
                    "int"
                ],
                "target_error": [
                    "float"
                ],
                "solver_params": [
                    "Optional[Dict]"
                ]
            }
        },
        "Layer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_nodes": [
                    "int"
                ],
                "bias": [
                    "float"
                ],
                "weights": [
                    "np.array"
                ],
                "activation_function": [
                    "ActivationFunction"
                ]
            }
        },
        "NeuralNetwork.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.set_learning_params": {
            "name": "set_learning_params",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "LearningConfiguration"
                ]
            }
        },
        "NeuralNetwork.output": {
            "name": "output",
            "location": 136,
            "return": [
                "np.array"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.convergence_profile": {
            "name": "convergence_profile",
            "location": 146,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.validation_profile": {
            "name": "validation_profile",
            "location": 154,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.errors": {
            "name": "errors",
            "location": 161,
            "return": [
                "np.array"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "np.array"
                ]
            }
        },
        "NeuralNetwork.cumulative_error_rate": {
            "name": "cumulative_error_rate",
            "location": 169,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "np.array"
                ]
            }
        },
        "NeuralNetwork.load_model": {
            "name": "load_model",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_model": [
                    "Dict"
                ]
            }
        },
        "NeuralNetwork.export_model": {
            "name": "export_model",
            "location": 227,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.setup_network": {
            "name": "setup_network",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_data_size": [
                    "int"
                ],
                "output_data_size": [
                    "int"
                ],
                "hidden_layer_number_of_nodes": [
                    "int"
                ],
                "hidden_layer_bias": [
                    "float"
                ],
                "output_layer_bias": [
                    "float"
                ],
                "hidden_layer_act_func": [
                    "ActivationFunction"
                ],
                "output_layer_act_func": [
                    "ActivationFunction"
                ],
                "weights_range": [
                    "Union[(int, float)]"
                ],
                "error_function": [
                    "ErrorAlgorithm"
                ]
            }
        },
        "NeuralNetwork.forward": {
            "name": "forward",
            "location": 304,
            "return": [
                "np.array"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Union[(np.array, List[List[Real]])]"
                ]
            }
        },
        "NeuralNetwork._backwards": {
            "name": "_backwards",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "np.array"
                ],
                "targets": [
                    "np.array"
                ]
            }
        },
        "NeuralNetwork.train": {
            "name": "train",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "DataSet"
                ]
            }
        },
        "NeuralNetwork.train_with_validation": {
            "name": "train_with_validation",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_datasets": [
                    "List[DataSet]"
                ],
                "validation_dataset": [
                    "DataSet"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/MLP/solvers.py": {
        "get_solver_param": {
            "name": "get_solver_param",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "configuration": [
                    "'LearningConfiguration'"
                ]
            }
        },
        "calculate_weights": {
            "name": "calculate_weights",
            "location": 46,
            "return": [
                "np.array"
            ],
            "arguments": {
                "learning_rate": [
                    "float"
                ],
                "rhs": [
                    "np.array"
                ],
                "configuration": [
                    "'LearningConfiguration'"
                ],
                "layer_label": [
                    "str"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/MLP/__init__.py": {},
    "NaiveNeurals-master/NaiveNeurals/models/trained_models.py": {},
    "NaiveNeurals-master/NaiveNeurals/models/__init__.py": {},
    "NaiveNeurals-master/scripts/activation_functions_example.py": {
        "plot_characteristics": {
            "name": "plot_characteristics",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/classification_problem.py": {
        "learn_xor": {
            "name": "learn_xor",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/compression_problem.py": {
        "read_data": {
            "name": "read_data",
            "location": 17,
            "return": [
                "Tuple[(List, List)]"
            ],
            "arguments": {}
        },
        "compression": {
            "name": "compression",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/regression_problem.py": {
        "sine_regression": {
            "name": "sine_regression",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/time_series_problem.py": {
        "read_data": {
            "name": "read_data",
            "location": 18,
            "return": [
                "Tuple[(List, List)]"
            ],
            "arguments": {}
        },
        "train_model": {
            "name": "train_model",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/unit_tests/data/test_dataset.py": {
        "test_dataset": {
            "name": "test_dataset",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/unit_tests/data/test_generators.py": {},
    "NaiveNeurals-master/unit_tests/MLP/test_functions.py": {
        "test_get_activation_function": {
            "name": "test_get_activation_function",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_calculate_error": {
            "name": "test_calculate_error",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/unit_tests/MLP/test_network.py": {
        "test_neural_network": {
            "name": "test_neural_network",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_neural_network_load_model": {
            "name": "test_neural_network_load_model",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    }
}
{
    "Postr-master/setup.py": {},
    "Postr-master/docs/conf.py": {},
    "Postr-master/postr/api_interface.py": {
        "ApiInterface.post_text": {
            "name": "post_text",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ApiInterface.post_video": {
            "name": "post_video",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "ApiInterface.post_photo": {
            "name": "post_photo",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "ApiInterface.get_user_likes": {
            "name": "get_user_likes",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiInterface.get_user_followers": {
            "name": "get_user_followers",
            "location": 30,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ApiInterface.remove_post": {
            "name": "remove_post",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/app.py": {},
    "Postr-master/postr/config.py": {
        "_current_config": {
            "name": "_current_config",
            "location": 77,
            "return": [
                "ConfigParser"
            ],
            "arguments": {}
        },
        "_save_config": {
            "name": "_save_config",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "ConfigParser"
                ]
            }
        },
        "add_section": {
            "name": "add_section",
            "location": 99,
            "return": [
                "ConfigParser"
            ],
            "arguments": {
                "section_name": [
                    "str"
                ]
            }
        },
        "_config_to_dict": {
            "name": "_config_to_dict",
            "location": 107,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "config": [
                    "ConfigParser"
                ]
            }
        },
        "pretty_print_config": {
            "name": "pretty_print_config",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_api_key": {
            "name": "update_api_key",
            "location": 126,
            "return": [
                "ConfigParser"
            ],
            "arguments": {
                "api": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "get_api_key": {
            "name": "get_api_key",
            "location": 141,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "api": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "missing_configs_for": {
            "name": "missing_configs_for",
            "location": 151,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "api": [
                    "str"
                ]
            }
        },
        "get_missing_configs": {
            "name": "get_missing_configs",
            "location": 161,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "Postr-master/postr/discord_api.py": {
        "id_to_channel": {
            "name": "id_to_channel",
            "location": 14,
            "return": [
                "Channel"
            ],
            "arguments": {
                "channel_id": [
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "delete_bot_messages.is_me": {
            "name": "is_me",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "m": [
                    "Message"
                ]
            }
        }
    },
    "Postr-master/postr/facebook_api.py": {
        "Handler.do_GET": {
            "name": "do_GET",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacebookApi.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacebookApi.wait_for_request": {
            "name": "wait_for_request",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "server_class": [
                    "Type[HTTPServer]"
                ],
                "handler_class": [
                    "Type[BaseHTTPRequestHandler]"
                ]
            }
        },
        "FacebookApi.parse_code": {
            "name": "parse_code",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "code_str": [
                    "str"
                ]
            }
        },
        "FacebookApi.extract_access_token": {
            "name": "extract_access_token",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "dic": [
                    "dict"
                ]
            }
        },
        "FacebookApi.authenticate": {
            "name": "authenticate",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "FacebookApi.post_text": {
            "name": "post_text",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "FacebookApi.post_video": {
            "name": "post_video",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "FacebookApi.post_photo": {
            "name": "post_photo",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "FacebookApi.get_user_likes": {
            "name": "get_user_likes",
            "location": 153,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacebookApi.get_user_followers": {
            "name": "get_user_followers",
            "location": 162,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "FacebookApi.remove_post": {
            "name": "remove_post",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/fbchat_api.py": {
        "FacebookChatApi.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.get_client": {
            "name": "get_client",
            "location": 33,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacebookChatApi.get_user_id": {
            "name": "get_user_id",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.get_user_name": {
            "name": "get_user_name",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.get_thread_name": {
            "name": "get_thread_name",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.get_messages_from_thread": {
            "name": "get_messages_from_thread",
            "location": 68,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "number_of_messages": [
                    "int"
                ]
            }
        },
        "FacebookChatApi.get_all_threads": {
            "name": "get_all_threads",
            "location": 81,
            "return": [
                "dict"
            ],
            "arguments": {
                "client": [
                    "Client"
                ]
            }
        },
        "FacebookChatApi.get_all_users_in_chat_with": {
            "name": "get_all_users_in_chat_with",
            "location": 91,
            "return": [
                "dict"
            ],
            "arguments": {
                "client": [
                    "Client"
                ]
            }
        },
        "FacebookChatApi.get_all_users_in_this_chat": {
            "name": "get_all_users_in_this_chat",
            "location": 101,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "thread_name": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.start_thread_with_users": {
            "name": "start_thread_with_users",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "user_ids": [
                    "List"
                ]
            }
        },
        "FacebookChatApi.start_thread_with_user": {
            "name": "start_thread_with_user",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.delete_thread": {
            "name": "delete_thread",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.get_thread_id": {
            "name": "get_thread_id",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "thread_name": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.send_local_image_with_message": {
            "name": "send_local_image_with_message",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "image_path": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.send_local_image_no_message": {
            "name": "send_local_image_no_message",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "image_path": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.send_remote_image_with_message": {
            "name": "send_remote_image_with_message",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "image_url": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.send_remote_image_no_message": {
            "name": "send_remote_image_no_message",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "image_url": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.send_text_message": {
            "name": "send_text_message",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.send_local_file_with_message": {
            "name": "send_local_file_with_message",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.send_local_file_no_message": {
            "name": "send_local_file_no_message",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.block_user": {
            "name": "block_user",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.unblock_user": {
            "name": "unblock_user",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.remove_friend": {
            "name": "remove_friend",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.remove_user_from_thread": {
            "name": "remove_user_from_thread",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ],
                "thread_id": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.change_name_of_thread": {
            "name": "change_name_of_thread",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.change_user_name_in_thread": {
            "name": "change_user_name_in_thread",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str"
                ],
                "thread_id": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "FacebookChatApi.get_threads_with_unread_messages": {
            "name": "get_threads_with_unread_messages",
            "location": 201,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacebookChatApi.get_threads_with_unseen_messages": {
            "name": "get_threads_with_unseen_messages",
            "location": 214,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacebookChatApi.wave_in_message": {
            "name": "wave_in_message",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/git_tools.py": {
        "git_root_dir": {
            "name": "git_root_dir",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Postr-master/postr/instagram_postr.py": {
        "_InstagramUser.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Instagram.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instagram.post_text": {
            "name": "post_text",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Instagram.post_video": {
            "name": "post_video",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Instagram.post_photo": {
            "name": "post_photo",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Instagram.get_user_likes": {
            "name": "get_user_likes",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instagram.get_user_followers": {
            "name": "get_user_followers",
            "location": 76,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Instagram.remove_post": {
            "name": "remove_post",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        },
        "Instagram.refresh": {
            "name": "refresh",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instagram.direct_share": {
            "name": "direct_share",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "media_id": [
                    "str"
                ],
                "recipients": [
                    "List[int]"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Instagram.spam_follower_ratio": {
            "name": "spam_follower_ratio",
            "location": 108,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "Instagram.username_to_id": {
            "name": "username_to_id",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Instagram.follow_by_id": {
            "name": "follow_by_id",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "Instagram.unsafe_follow_by_username": {
            "name": "unsafe_follow_by_username",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Instagram.block_by_id": {
            "name": "block_by_id",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "Instagram.unsafe_block_by_username": {
            "name": "unsafe_block_by_username",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Instagram.setup_csv": {
            "name": "setup_csv",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instagram.log_followers": {
            "name": "log_followers",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instagram._read_csv_col": {
            "name": "_read_csv_col",
            "location": 186,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "colNum": [
                    "int"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Instagram.graph_followers": {
            "name": "graph_followers",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instagram._profile_to_InstagramUser": {
            "name": "_profile_to_InstagramUser",
            "location": 231,
            "return": [
                "_InstagramUser"
            ],
            "arguments": {
                "profile": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Instagram._username_to_profile": {
            "name": "_username_to_profile",
            "location": 239,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Instagram._has_following_ratio_of": {
            "name": "_has_following_ratio_of",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "_InstagramUser"
                ],
                "ratio": [
                    "float"
                ]
            }
        },
        "Instagram._user_follower_info": {
            "name": "_user_follower_info",
            "location": 273,
            "return": [
                "List[_InstagramUser]"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "Instagram._user_following_info": {
            "name": "_user_following_info",
            "location": 286,
            "return": [
                "List[_InstagramUser]"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int"
                ]
            }
        },
        "Instagram.example_graphing": {
            "name": "example_graphing",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Postr-master/postr/main.py": {
        "TabbedPanelApp.build": {
            "name": "build",
            "location": 30,
            "return": [
                "TabbedPanel"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabbedPanelApp.performance": {
            "name": "performance",
            "location": 414,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "platform": [
                    "str"
                ]
            }
        },
        "TabbedPanelApp.immediate_post": {
            "name": "immediate_post",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "platform": [
                    "str"
                ],
                "post_type": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "media": [
                    "str"
                ]
            }
        },
        "TabbedPanelApp.scheduled_post": {
            "name": "scheduled_post",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "plat": [
                    "str"
                ],
                "pst": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "mda": [
                    "str"
                ],
                "mnt": [
                    "int"
                ],
                "day": [
                    "int"
                ],
                "yr": [
                    "int"
                ],
                "hr": [
                    "int"
                ],
                "mn": [
                    "int"
                ]
            }
        },
        "TabbedPanelApp.get_missing_keys": {
            "name": "get_missing_keys",
            "location": 554,
            "return": [
                "Dict"
            ],
            "arguments": {}
        },
        "TabbedPanelApp.str_to_seconds_post_epoch": {
            "name": "str_to_seconds_post_epoch",
            "location": 642,
            "return": [
                "float"
            ],
            "arguments": {
                "desired_time": [
                    "str"
                ]
            }
        },
        "TabbedPanelApp.build.spinner": {
            "name": "spinner",
            "location": 37,
            "return": [
                "Spinner"
            ],
            "arguments": {}
        },
        "TabbedPanelApp.build.spinner.show_selected_value": {
            "name": "show_selected_value",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "spnr": [
                    "Spinner"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/main2.py": {
        "setup": {
            "name": "setup",
            "location": 34,
            "return": [
                "Tk"
            ],
            "arguments": {
                "main_gui": [
                    "Tk"
                ]
            }
        },
        "setup_apis": {
            "name": "setup_apis",
            "location": 46,
            "return": [
                "Listbox"
            ],
            "arguments": {
                "page": [
                    "Frame"
                ]
            }
        },
        "api_iterator": {
            "name": "api_iterator",
            "location": 58,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "box": [
                    "Listbox"
                ]
            }
        },
        "GUI.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyticsPage.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Frame"
                ]
            }
        },
        "AnalyticsPage.setup_entry": {
            "name": "setup_entry",
            "location": 105,
            "return": [
                "Entry"
            ],
            "arguments": {
                "cls": [],
                "page": [
                    "Frame"
                ]
            }
        },
        "AnalyticsPage.setup_graphs": {
            "name": "setup_graphs",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Frame"
                ]
            }
        },
        "AnalyticsPage.graph_twitter": {
            "name": "graph_twitter",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyticsPage.graph_instagram": {
            "name": "graph_instagram",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SchedulingPage.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Frame"
                ]
            }
        },
        "SchedulingPage.setup_scheduling_buttons": {
            "name": "setup_scheduling_buttons",
            "location": 135,
            "return": [
                "Entry"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Frame"
                ]
            }
        },
        "SchedulingPage.schedule_1min": {
            "name": "schedule_1min",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulingPage.schedule_custom_text": {
            "name": "schedule_custom_text",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulingPage.schedule_custom_pic": {
            "name": "schedule_custom_pic",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulingPage.str_to_seconds_post_epoch": {
            "name": "str_to_seconds_post_epoch",
            "location": 227,
            "return": [
                "float"
            ],
            "arguments": {
                "desired_time": [
                    "str"
                ]
            }
        },
        "SchedulingPage.setup_text_box": {
            "name": "setup_text_box",
            "location": 231,
            "return": [
                "ScrolledText"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Frame"
                ]
            }
        },
        "SchedulingPage.open_file_dialog": {
            "name": "open_file_dialog",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulingPage.clear_file": {
            "name": "clear_file",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostingPage.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Frame"
                ]
            }
        },
        "PostingPage.setup_automation_buttons": {
            "name": "setup_automation_buttons",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Frame"
                ]
            }
        },
        "PostingPage.post_text": {
            "name": "post_text",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostingPage.post_pic": {
            "name": "post_pic",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostingPage.setup_text_box": {
            "name": "setup_text_box",
            "location": 320,
            "return": [
                "ScrolledText"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Frame"
                ]
            }
        },
        "PostingPage.open_file_dialog": {
            "name": "open_file_dialog",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostingPage.clear_file": {
            "name": "clear_file",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Postr-master/postr/postr_logger.py": {
        "make_log_path": {
            "name": "make_log_path",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "log_path": [
                    "str"
                ]
            }
        },
        "make_logger": {
            "name": "make_logger",
            "location": 24,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/reddit_postr.py": {
        "get_key": {
            "name": "get_key",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "Reddit.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reddit.set_subreddit_name": {
            "name": "set_subreddit_name",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "subreddit_name": [
                    "str"
                ]
            }
        },
        "Reddit.post_text": {
            "name": "post_text",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Reddit.post_link": {
            "name": "post_link",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Reddit.post_video": {
            "name": "post_video",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Reddit.post_photo": {
            "name": "post_photo",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Reddit.get_user_likes": {
            "name": "get_user_likes",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reddit.get_user_followers": {
            "name": "get_user_followers",
            "location": 81,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Reddit.remove_post": {
            "name": "remove_post",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        },
        "Reddit.remove_comment": {
            "name": "remove_comment",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        },
        "Reddit.top_submissions_in_subreddit": {
            "name": "top_submissions_in_subreddit",
            "location": 109,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "subreddit_name": [
                    "str"
                ]
            }
        },
        "Reddit.top_submissions_in_subreddit_filter_by_words": {
            "name": "top_submissions_in_subreddit_filter_by_words",
            "location": 118,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "subreddit_name": [
                    "str"
                ],
                "words": [
                    "List[str]"
                ]
            }
        },
        "Reddit.create_wiki_page": {
            "name": "create_wiki_page",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "subreddit_name": [
                    "str"
                ],
                "wiki_page_name": [
                    "str"
                ],
                "wiki_content": [
                    "str"
                ]
            }
        },
        "Reddit.return_wiki_listings": {
            "name": "return_wiki_listings",
            "location": 136,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "subreddit_name": [
                    "str"
                ]
            }
        },
        "Reddit.edit_wiki_page": {
            "name": "edit_wiki_page",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "subreddit_name": [
                    "str"
                ],
                "wiki_page_name": [
                    "str"
                ],
                "wiki_content": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/slack_api.py": {
        "download": {
            "name": "download",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "extension": [
                    "str"
                ]
            }
        },
        "extension_from_url": {
            "name": "extension_from_url",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "SlackApi.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlackApi.post_text": {
            "name": "post_text",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SlackApi.change_default_channel": {
            "name": "change_default_channel",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "channel": [
                    "str"
                ]
            }
        },
        "SlackApi.post_video": {
            "name": "post_video",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "SlackApi.post_file": {
            "name": "post_file",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "SlackApi.post_photo": {
            "name": "post_photo",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "SlackApi.get_user_likes": {
            "name": "get_user_likes",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlackApi.get_user_followers": {
            "name": "get_user_followers",
            "location": 85,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SlackApi.remove_post": {
            "name": "remove_post",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/tumblr_api.py": {
        "TumblrApi.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TumblrApi.change_current_blog": {
            "name": "change_current_blog",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_blog_name": [
                    "str"
                ]
            }
        },
        "TumblrApi.authenticate": {
            "name": "authenticate",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TumblrApi.post_text": {
            "name": "post_text",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TumblrApi.post_video": {
            "name": "post_video",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "TumblrApi.post_photo": {
            "name": "post_photo",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "TumblrApi.get_user_likes": {
            "name": "get_user_likes",
            "location": 112,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TumblrApi.get_user_followers": {
            "name": "get_user_followers",
            "location": 122,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TumblrApi.remove_post": {
            "name": "remove_post",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/twitter_postr.py": {
        "examples": {
            "name": "examples",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TwitterStreamer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "TwitterKey"
                ],
                "graphfile": [
                    "str"
                ]
            }
        },
        "TwitterStreamer.stream_tweets": {
            "name": "stream_tweets",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtags": [
                    "List[str]"
                ],
                "output_filename": [
                    "str"
                ],
                "auth": [
                    "OAuthHandler"
                ]
            }
        },
        "StdOutListener.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "graphfile": [
                    "str"
                ]
            }
        },
        "StdOutListener.on_data": {
            "name": "on_data",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "str"
                ]
            }
        },
        "StdOutListener.on_error": {
            "name": "on_error",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "int"
                ]
            }
        },
        "Twitter.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.post_text": {
            "name": "post_text",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Twitter.post_video": {
            "name": "post_video",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Twitter.post_photo": {
            "name": "post_photo",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Twitter.get_user_followers": {
            "name": "get_user_followers",
            "location": 134,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Twitter.remove_post": {
            "name": "remove_post",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        },
        "Twitter.stream_tweets": {
            "name": "stream_tweets",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtags": [
                    "List[str]"
                ],
                "output_filename": [
                    "str"
                ]
            }
        },
        "Twitter.setup_csv": {
            "name": "setup_csv",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.get_user_likes": {
            "name": "get_user_likes",
            "location": 177,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.read_csv_col": {
            "name": "read_csv_col",
            "location": 181,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "colNum": [
                    "int"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Twitter.analyzeSentiment": {
            "name": "analyzeSentiment",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.polarity": {
            "name": "polarity",
            "location": 208,
            "return": [
                "float"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Twitter.stream_and_graph": {
            "name": "stream_and_graph",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtags": [
                    "List[str]"
                ]
            }
        },
        "Twitter.graph_blob": {
            "name": "graph_blob",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.update_bio": {
            "name": "update_bio",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/youtube_postr.py": {
        "playlist_items_list_by_playlist_id": {
            "name": "playlist_items_list_by_playlist_id",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [
                    "Any"
                ]
            }
        },
        "videos_delete": {
            "name": "videos_delete",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [
                    "Any"
                ]
            }
        },
        "remove_empty_kwargs": {
            "name": "remove_empty_kwargs",
            "location": 158,
            "return": [
                "Dict[(Any, Any)]"
            ],
            "arguments": {}
        },
        "channels_list_by_id": {
            "name": "channels_list_by_id",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [
                    "Any"
                ]
            }
        },
        "videos_list_by_id": {
            "name": "videos_list_by_id",
            "location": 178,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [
                    "Any"
                ]
            }
        },
        "generate_build": {
            "name": "generate_build",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "credentials": [
                    "Credentials"
                ]
            }
        },
        "get_key": {
            "name": "get_key",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "initialize_upload": {
            "name": "initialize_upload",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [
                    "Any"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "resumable_upload": {
            "name": "resumable_upload",
            "location": 261,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "Youtube.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Youtube.get_refresh_token": {
            "name": "get_refresh_token",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Youtube.post_text": {
            "name": "post_text",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Youtube.post_video": {
            "name": "post_video",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Youtube.upload_video": {
            "name": "upload_video",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "category": [
                    "int"
                ],
                "keywords": [
                    "str"
                ],
                "privacy_status": [
                    "str"
                ]
            }
        },
        "Youtube.post_photo": {
            "name": "post_photo",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Youtube.get_user_likes": {
            "name": "get_user_likes",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Youtube.get_user_videos": {
            "name": "get_user_videos",
            "location": 99,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Youtube.get_user_followers": {
            "name": "get_user_followers",
            "location": 120,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Youtube.remove_post": {
            "name": "remove_post",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post_id": [
                    "str"
                ]
            }
        }
    },
    "Postr-master/postr/__init__.py": {},
    "Postr-master/postr/instagram/instagram_key.py": {
        "get_key": {
            "name": "get_key",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "InstagramKey.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Postr-master/postr/instagram/__init__.py": {},
    "Postr-master/postr/schedule/reader.py": {
        "clean_empty_strings": {
            "name": "clean_empty_strings",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "items": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Reader.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.cleanup": {
            "name": "cleanup",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.now": {
            "name": "now",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Reader.scan_custom_jobs": {
            "name": "scan_custom_jobs",
            "location": 38,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int"
                ]
            }
        },
        "Reader.run_scheduler": {
            "name": "run_scheduler",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.schedule_range": {
            "name": "schedule_range",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int"
                ]
            }
        }
    },
    "Postr-master/postr/schedule/task_processor.py": {
        "has_required_arguments": {
            "name": "has_required_arguments",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "api": [
                    "str"
                ],
                "action": [
                    "str"
                ],
                "arguments": [
                    "Set[str]"
                ]
            }
        },
        "get_existing_arguments": {
            "name": "get_existing_arguments",
            "location": 182,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "task": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "create_command": {
            "name": "create_command",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "api": [
                    "str"
                ],
                "task": [
                    "Dict[(str, Any)]"
                ],
                "given_arguments": [
                    "Set[str]"
                ]
            }
        }
    },
    "Postr-master/postr/schedule/writer.py": {
        "Writer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.cleanup": {
            "name": "cleanup",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.now": {
            "name": "now",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Writer.create_person": {
            "name": "create_person",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "str"
                ],
                "last": [
                    "str"
                ],
                "social": [
                    "str"
                ]
            }
        },
        "Writer.create_job": {
            "name": "create_job",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "str"
                ],
                "media_path": [
                    "str"
                ],
                "optional_text": [
                    "str"
                ],
                "platforms": [
                    "str"
                ],
                "action": [
                    "str"
                ]
            }
        },
        "Writer.create_custom_job": {
            "name": "create_custom_job",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "int"
                ],
                "job_id": [
                    "str"
                ]
            }
        },
        "Writer.create_bio": {
            "name": "create_bio",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_display": [
                    "bool"
                ],
                "display_first": [
                    "str"
                ],
                "display_last": [
                    "str"
                ],
                "age": [
                    "int"
                ],
                "comment": [
                    "str"
                ],
                "website": [
                    "str"
                ],
                "person_id": [
                    "int"
                ]
            }
        },
        "Writer.example": {
            "name": "example",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Postr-master/postr/schedule/__init__.py": {},
    "Postr-master/postr/twitter/twitter_bio.py": {
        "TwitterBio.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "API"
                ]
            }
        },
        "TwitterBio.update_name": {
            "name": "update_name",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "str"
                ]
            }
        },
        "TwitterBio.username": {
            "name": "username",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterBio.bio": {
            "name": "bio",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Postr-master/postr/twitter/twitter_info.py": {
        "TwitterInfo.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "API"
                ]
            }
        },
        "TwitterInfo.id": {
            "name": "id",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterInfo.last_tweet": {
            "name": "last_tweet",
            "location": 18,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterInfo.latest_favorites": {
            "name": "latest_favorites",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterInfo.favorites_on": {
            "name": "favorites_on",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tweet_id": [
                    "int"
                ]
            }
        },
        "TwitterInfo.latest_retweets": {
            "name": "latest_retweets",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterInfo.retweets_on": {
            "name": "retweets_on",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tweet_id": [
                    "int"
                ]
            }
        }
    },
    "Postr-master/postr/twitter/twitter_key.py": {
        "get_key": {
            "name": "get_key",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "TwitterKey.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Postr-master/postr/twitter/__init__.py": {},
    "Postr-master/scripts/dbsetup.py": {},
    "Postr-master/tests/AI_test.py": {
        "test_polarity": {
            "name": "test_polarity",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sentiment": {
            "name": "test_sentiment",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_csv_col": {
            "name": "test_read_csv_col",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Postr-master/tests/config_parser_test.py": {
        "reset_test_config_file": {
            "name": "reset_test_config_file",
            "location": 18,
            "return": [
                "Generator"
            ],
            "arguments": {}
        },
        "test_get_api_key_fail": {
            "name": "test_get_api_key_fail",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_api_key_fail": {
            "name": "test_update_api_key_fail",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_update_api_key": {
            "name": "test_get_update_api_key",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_section": {
            "name": "test_add_section",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pretty_print_config": {
            "name": "test_pretty_print_config",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Postr-master/tests/conftest.py": {
        "add": {
            "name": "add",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "fbchat_test": {
            "name": "fbchat_test",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "Postr-master/tests/csv_test.py": {
        "test_csv_setup": {
            "name": "test_csv_setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_csv_contents": {
            "name": "test_csv_contents",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Postr-master/tests/discord_api_test.py": {},
    "Postr-master/tests/facebook_api_test.py": {
        "get_mock_client": {
            "name": "get_mock_client",
            "location": 8,
            "return": [
                "facebook_api.FacebookApi"
            ],
            "arguments": {}
        },
        "test_parse_code": {
            "name": "test_parse_code",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extract_access_token": {
            "name": "test_extract_access_token",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_text": {
            "name": "test_post_text",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_video": {
            "name": "test_post_video",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_photo": {
            "name": "test_post_photo",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_likes": {
            "name": "test_get_user_likes",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_followers": {
            "name": "test_get_user_followers",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_post": {
            "name": "test_remove_post",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Postr-master/tests/fbchat_test.py": {
        "test_nothing": {
            "name": "test_nothing",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "fbchat_test": [
                    "int"
                ]
            }
        },
        "test_get_user_id": {
            "name": "test_get_user_id",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_name": {
            "name": "test_get_user_name",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_thread_name": {
            "name": "test_get_thread_name",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_messages_from_thread": {
            "name": "test_get_messages_from_thread",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_all_threads": {
            "name": "test_get_all_threads",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_all_users_in_chat_with": {
            "name": "test_get_all_users_in_chat_with",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_thread_id": {
            "name": "test_get_thread_id",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_local_image_with_message": {
            "name": "test_send_local_image_with_message",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_remote_image_with_message": {
            "name": "test_send_remote_image_with_message",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_text_message": {
            "name": "test_send_text_message",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_local_file_with_message": {
            "name": "test_send_local_file_with_message",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Postr-master/tests/placeholder_test.py": {
        "test_adding": {
            "name": "test_adding",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "add": [
                    "int"
                ]
            }
        }
    },
    "Postr-master/tests/tumblr_api_test.py": {
        "test_post_text": {
            "name": "test_post_text",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_photo": {
            "name": "test_post_photo",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_video": {
            "name": "test_post_video",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_likes": {
            "name": "test_get_user_likes",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_followers": {
            "name": "test_get_user_followers",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_post": {
            "name": "test_remove_post",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Postr-master/tests/__init__.py": {}
}
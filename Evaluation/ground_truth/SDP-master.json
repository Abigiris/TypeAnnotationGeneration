{
    "SDP-master/setup.py": {},
    "SDP-master/src/autonomous_control.py": {
        "state": {
            "name": "state",
            "location": 43,
            "return": [
                "Callable[([StateF], StateF)]"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "forward": {
            "name": "forward",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop_forward": {
            "name": "stop_forward",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "backward": {
            "name": "backward",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "turn_left": {
            "name": "turn_left",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "speed": [
                    "float"
                ]
            }
        },
        "turn_right": {
            "name": "turn_right",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "speed": [
                    "float"
                ]
            }
        },
        "lower_front": {
            "name": "lower_front",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lift_front": {
            "name": "lift_front",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop_front": {
            "name": "stop_front",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lower_back": {
            "name": "lower_back",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lift_back": {
            "name": "lift_back",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop_back": {
            "name": "stop_back",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lower_both": {
            "name": "lower_both",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lift_both": {
            "name": "lift_both",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "at_top_of_stairs": {
            "name": "at_top_of_stairs",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "SensorData"
                ]
            }
        },
        "climb_": {
            "name": "climb_",
            "location": 168,
            "return": [
                "Callable[([], Coroutine[(Any, Any, None)])]"
            ],
            "arguments": {
                "data": [
                    "SensorData"
                ],
                "callback": [
                    "ProgressCallback"
                ]
            }
        },
        "downstairs_": {
            "name": "downstairs_",
            "location": 316,
            "return": [
                "Callable[([], Coroutine[(Any, Any, None)])]"
            ],
            "arguments": {
                "data": [
                    "SensorData"
                ],
                "callback": [
                    "ProgressCallback"
                ]
            }
        },
        "climb": {
            "name": "climb",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "SensorData"
                ],
                "callback": [
                    "ProgressCallback"
                ]
            }
        },
        "downstairs": {
            "name": "downstairs",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "SensorData"
                ],
                "callback": [
                    "ProgressCallback"
                ]
            }
        },
        "timed": {
            "name": "timed",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "SensorData"
                ],
                "callback": [
                    "ProgressCallback"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "SensorData"
                ]
            }
        },
        "state.decorator": {
            "name": "decorator",
            "location": 53,
            "return": [
                "StateF@@Callable[(..., None)]@@"
            ],
            "arguments": {
                "func": [
                    "StateF@@Callable[(..., None)]@@"
                ]
            }
        },
        "climb_.obstacle_infront": {
            "name": "obstacle_infront",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "state.decorator.worker": {
            "name": "worker",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "SDP-master/src/climb.py": {
        "ClimbController.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensors": [
                    "SensorData"
                ]
            }
        }
    },
    "SDP-master/src/data.py": {
        "SensorData.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorData.set_moving": {
            "name": "set_moving",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "bool"
                ]
            }
        },
        "SensorData.get_moving": {
            "name": "get_moving",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "FakeSensorData.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "SDP-master/src/i2c_sensor_thread.py": {
        "RotaryEncoderThread.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i2c_bus_no": [
                    "int"
                ],
                "address": [
                    "int"
                ],
                "data": [
                    "SensorData"
                ]
            }
        },
        "RotaryEncoderThread.run": {
            "name": "run",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "SDP-master/src/log.py": {
        "loop_exception_handler": {
            "name": "loop_exception_handler",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "configure": {
            "name": "configure",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ColourFormatter.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColourFormatter.format": {
            "name": "format",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        }
    },
    "SDP-master/src/motor.py": {
        "set_motor": {
            "name": "set_motor",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "motor_id": [
                    "int"
                ],
                "speed": [
                    "int"
                ]
            }
        },
        "stop_motor": {
            "name": "stop_motor",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "motor_id": [
                    "int"
                ]
            }
        },
        "float_motors": {
            "name": "float_motors",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop_motors": {
            "name": "stop_motors",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "SDP-master/src/sensor.py": {
        "current_milli_time": {
            "name": "current_milli_time",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "on_error": {
            "name": "on_error",
            "location": 20,
            "return": [],
            "arguments": {
                "ph": [],
                "code": [],
                "msg": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 24,
            "return": [],
            "arguments": {
                "factory": [],
                "channel": []
            }
        },
        "Touch.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "channel": [
                    "int"
                ]
            }
        },
        "Touch._on_change": {
            "name": "_on_change",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "state": []
            }
        },
        "Touch.get": {
            "name": "get",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Touch.set": {
            "name": "set",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Touch.__enter__": {
            "name": "__enter__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Touch.__exit__": {
            "name": "__exit__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "_a": [],
                "_b": [],
                "_c": []
            }
        },
        "TouchSensorsI2c.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TouchSensorsI2c.get": {
            "name": "get",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TouchSensorsI2c.set": {
            "name": "set",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "Distance.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "channel": [
                    "int"
                ]
            }
        },
        "Distance._on_change": {
            "name": "_on_change",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "value": [],
                "_unit": []
            }
        },
        "Distance.get": {
            "name": "get",
            "location": 154,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distance.get_valid": {
            "name": "get_valid",
            "location": 160,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distance._on_error": {
            "name": "_on_error",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "ph": [],
                "code": [],
                "msg": []
            }
        },
        "Distance.__enter__": {
            "name": "__enter__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distance.__exit__": {
            "name": "__exit__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "_a": [],
                "_b": [],
                "_c": []
            }
        },
        "RotaryEncoder.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RotaryEncoder.get": {
            "name": "get",
            "location": 210,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotaryEncoder.change": {
            "name": "change",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int"
                ]
            }
        },
        "RotaryEncoder.reset": {
            "name": "reset",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeSensor.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FakeSensor.get": {
            "name": "get",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeSensor.set": {
            "name": "set",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FakeSensor.__enter__": {
            "name": "__enter__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeSensor.__exit__": {
            "name": "__exit__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "_a": [],
                "_b": [],
                "_c": []
            }
        }
    },
    "SDP-master/src/server.py": {
        "exception_handler": {
            "name": "exception_handler",
            "location": 68,
            "return": [],
            "arguments": {
                "loop": [],
                "context": []
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_main": {
            "name": "_main",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "ConnectionManager.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionManager.add": {
            "name": "add",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "ConnectionManager.remove": {
            "name": "remove",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "ConnectionManager.send": {
            "name": "send",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SingleValueQueue.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleValueQueue.push": {
            "name": "push",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SpencerServerConnection.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [],
                "manager": []
            }
        },
        "SpencerServerConnection.connection_made": {
            "name": "connection_made",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "SpencerServerConnection.connection_lost": {
            "name": "connection_lost",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "SpencerServerConnection.data_received": {
            "name": "data_received",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SpencerServerConnection.send": {
            "name": "send",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "SDP-master/src/demos/motor_demo.py": {
        "forward": {
            "name": "forward",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "lift_front_part": {
            "name": "lift_front_part",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "_main": {
            "name": "_main",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "SDP-master/src/demos/sensors.py": {
        "print_open_error": {
            "name": "print_open_error",
            "location": 12,
            "return": [],
            "arguments": {
                "e": [],
                "ph": []
            }
        },
        "display_error": {
            "name": "display_error",
            "location": 32,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "on_attach": {
            "name": "on_attach",
            "location": 55,
            "return": [],
            "arguments": {
                "ph": []
            }
        },
        "on_error": {
            "name": "on_error",
            "location": 67,
            "return": [],
            "arguments": {
                "_ph": [],
                "code": [],
                "string": []
            }
        },
        "on_voltage_change": {
            "name": "on_voltage_change",
            "location": 71,
            "return": [],
            "arguments": {
                "_ph": [],
                "voltage": []
            }
        },
        "on_sensor_change": {
            "name": "on_sensor_change",
            "location": 75,
            "return": [],
            "arguments": {
                "_ph": [],
                "value": [],
                "unit": []
            }
        },
        "main": {
            "name": "main",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "SDP-master/test/test_todler.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    }
}
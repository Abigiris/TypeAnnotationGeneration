{
    "STIFF-master/scripts/eval.py": {
        "eval": {
            "name": "eval",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "align_with_gold": {
            "name": "align_with_gold",
            "location": 33,
            "return": [],
            "arguments": {
                "gold_sents": [],
                "guess_sents": [],
                "max_slack": []
            }
        },
        "anns_to_set": {
            "name": "anns_to_set",
            "location": 59,
            "return": [],
            "arguments": {
                "anns": []
            }
        },
        "get_cov_map": {
            "name": "get_cov_map",
            "location": 63,
            "return": [],
            "arguments": {
                "toks": [],
                "anns": []
            }
        },
        "score_anns_tokwise": {
            "name": "score_anns_tokwise",
            "location": 72,
            "return": [],
            "arguments": {
                "gold_anns": [],
                "guess_anns": [],
                "toks": []
            }
        },
        "score_anns_annwise": {
            "name": "score_anns_annwise",
            "location": 89,
            "return": [],
            "arguments": {
                "gold_anns": [],
                "guess_anns": [],
                "_toks": []
            }
        },
        "calc_pr": {
            "name": "calc_pr",
            "location": 98,
            "return": [],
            "arguments": {
                "tp": [],
                "fp": [],
                "fn": []
            }
        },
        "get_num_tokens": {
            "name": "get_num_tokens",
            "location": 106,
            "return": [],
            "arguments": {
                "gold_sent": [],
                "guess_sent": []
            }
        },
        "pr_one": {
            "name": "pr_one",
            "location": 116,
            "return": [],
            "arguments": {
                "gold_etree": [],
                "guess_fp": [],
                "score_func": [],
                "trace_individual": []
            }
        },
        "get_score_func": {
            "name": "get_score_func",
            "location": 143,
            "return": [],
            "arguments": {
                "score": []
            }
        },
        "pr": {
            "name": "pr",
            "location": 156,
            "return": [],
            "arguments": {
                "gold": [],
                "guess": [],
                "trace_individual": [],
                "score": []
            }
        },
        "pr_eval": {
            "name": "pr_eval",
            "location": 170,
            "return": [],
            "arguments": {
                "gold": [],
                "eval": [],
                "csv_out": [],
                "trace_individual": [],
                "score": []
            }
        },
        "pr_plot": {
            "name": "pr_plot",
            "location": 196,
            "return": [],
            "arguments": {
                "opensubs18_csv": [],
                "eurosense_csv": [],
                "out": []
            }
        },
        "sent_report": {
            "name": "sent_report",
            "location": 284,
            "return": [],
            "arguments": {
                "inf": [],
                "report_cb": [],
                "subtotal": []
            }
        },
        "intrinsic": {
            "name": "intrinsic",
            "location": 308,
            "return": [],
            "arguments": {
                "inf": [],
                "subtotal": []
            }
        },
        "entropy": {
            "name": "entropy",
            "location": 359,
            "return": [],
            "arguments": {
                "dist": [],
                "total_occurs": []
            }
        },
        "add_senses": {
            "name": "add_senses",
            "location": 402,
            "return": [],
            "arguments": {
                "dist": [],
                "senses": []
            }
        },
        "build_uni_sense_dist": {
            "name": "build_uni_sense_dist",
            "location": 407,
            "return": [],
            "arguments": {
                "sents": [],
                "keyin": [],
                "vocab": []
            }
        },
        "iter_dists_sup": {
            "name": "iter_dists_sup",
            "location": 416,
            "return": [],
            "arguments": {
                "inf": [],
                "keyin": []
            }
        },
        "entropy_uni": {
            "name": "entropy_uni",
            "location": 430,
            "return": [],
            "arguments": {
                "inf": [],
                "keyin": [],
                "subtotal": []
            }
        },
        "entropy_sup": {
            "name": "entropy_sup",
            "location": 448,
            "return": [],
            "arguments": {
                "inf": [],
                "keyin": []
            }
        },
        "print_ambg": {
            "name": "print_ambg",
            "location": 483,
            "return": [],
            "arguments": {
                "lemma_pos_counts": [],
                "wn": []
            }
        },
        "get_wn": {
            "name": "get_wn",
            "location": 490,
            "return": [],
            "arguments": {
                "lang": []
            }
        },
        "lex_ambg_uni": {
            "name": "lex_ambg_uni",
            "location": 501,
            "return": [],
            "arguments": {
                "inf": [],
                "lang": [],
                "subtotal": []
            }
        },
        "lex_ambg_sup": {
            "name": "lex_ambg_sup",
            "location": 520,
            "return": [],
            "arguments": {
                "inf": [],
                "lang": []
            }
        },
        "lkb_entropy_ambg": {
            "name": "lkb_entropy_ambg",
            "location": 531,
            "return": [],
            "arguments": {}
        },
        "lemma_poses": {
            "name": "lemma_poses",
            "location": 552,
            "return": [],
            "arguments": {
                "wn": []
            }
        },
        "fix_border": {
            "name": "fix_border",
            "location": 558,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "plot_lkb_ambgs": {
            "name": "plot_lkb_ambgs",
            "location": 565,
            "return": [],
            "arguments": {
                "outf": []
            }
        },
        "lex_ambg_hist_uni": {
            "name": "lex_ambg_hist_uni",
            "location": 598,
            "return": [],
            "arguments": {
                "inf": [],
                "wn": []
            }
        },
        "plot_test_ambgs": {
            "name": "plot_test_ambgs",
            "location": 624,
            "return": [],
            "arguments": {
                "eurosensetestxml": [],
                "stifftestxml": [],
                "engwsdevaldir": [],
                "outf": []
            }
        },
        "plot_train_entropies": {
            "name": "plot_train_entropies",
            "location": 675,
            "return": [],
            "arguments": {
                "eurosensetrainxml": [],
                "eurosensetrainkey": [],
                "stifftrainxml": [],
                "stifftrainkey": [],
                "semcorxml": [],
                "semcorkey": [],
                "outf": []
            }
        },
        "intrinsic.print_cov": {
            "name": "print_cov",
            "location": 316,
            "return": [],
            "arguments": {}
        },
        "EntropyCalc.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntropyCalc.add_dist": {
            "name": "add_dist",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "dist": []
            }
        },
        "EntropyCalc.report": {
            "name": "report",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "entropy_uni.print_entropy": {
            "name": "print_entropy",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "LexAmbgCalc.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "wn": []
            }
        },
        "LexAmbgCalc.add_lemma": {
            "name": "add_lemma",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "lemma_pos": [],
                "cnt": []
            }
        },
        "LexAmbgCalc.report": {
            "name": "report",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "plot_test_ambgs.mk_kwargs": {
            "name": "mk_kwargs",
            "location": 625,
            "return": [],
            "arguments": {}
        },
        "plot_test_ambgs.add_kwargs": {
            "name": "add_kwargs",
            "location": 628,
            "return": [],
            "arguments": {
                "kwargs": [],
                "inf": [],
                "wn": [],
                "label": []
            }
        },
        "plot_train_entropies.add_to_data": {
            "name": "add_to_data",
            "location": 689,
            "return": [],
            "arguments": {
                "data": [],
                "dists": []
            }
        }
    },
    "STIFF-master/scripts/fetch_opensubtitles2018.py": {
        "get_zip": {
            "name": "get_zip",
            "location": 15,
            "return": [],
            "arguments": {
                "url": [],
                "dest_dir": []
            }
        },
        "get_gzip": {
            "name": "get_gzip",
            "location": 23,
            "return": [],
            "arguments": {
                "url": [],
                "dest_dir": []
            }
        },
        "fetch_ost2018": {
            "name": "fetch_ost2018",
            "location": 36,
            "return": [],
            "arguments": {
                "dir_name": []
            }
        }
    },
    "STIFF-master/scripts/filter.py": {
        "filter": {
            "name": "filter",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "filter_support": {
            "name": "filter_support",
            "location": 55,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "filter_lang": {
            "name": "filter_lang",
            "location": 67,
            "return": [],
            "arguments": {
                "lang": [],
                "inf": [],
                "outf": []
            }
        },
        "fold_support": {
            "name": "fold_support",
            "location": 86,
            "return": [],
            "arguments": {
                "lang": [],
                "inf": [],
                "outf": []
            }
        },
        "overlap_examples": {
            "name": "overlap_examples",
            "location": 130,
            "return": [],
            "arguments": {
                "inf": []
            }
        },
        "rm_empty": {
            "name": "rm_empty",
            "location": 152,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "text": []
            }
        },
        "rm_ambg": {
            "name": "rm_ambg",
            "location": 171,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "filter_align_dom": {
            "name": "filter_align_dom",
            "location": 198,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "non_deriv_dom": {
            "name": "non_deriv_dom",
            "location": 213,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "head": {
            "name": "head",
            "location": 228,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "sentences": []
            }
        },
        "sample": {
            "name": "sample",
            "location": 248,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "split_xml": {
            "name": "split_xml",
            "location": 282,
            "return": [],
            "arguments": {
                "inf": [],
                "testf": [],
                "trainf": [],
                "sentences": []
            }
        },
        "split": {
            "name": "split",
            "location": 324,
            "return": [],
            "arguments": {
                "inf": [],
                "testf": [],
                "trainf": [],
                "keyin": [],
                "testkey": [],
                "trainkey": [],
                "sentences": []
            }
        },
        "unified_test_dev_split": {
            "name": "unified_test_dev_split",
            "location": 349,
            "return": [],
            "arguments": {
                "inf": [],
                "ingoldf": [],
                "keyin": [],
                "goldkeyin": [],
                "outf": [],
                "keyout": []
            }
        },
        "join": {
            "name": "join",
            "location": 382,
            "return": [],
            "arguments": {
                "infs": [],
                "outf": []
            }
        },
        "freq_dom": {
            "name": "freq_dom",
            "location": 396,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "break_ties": {
            "name": "break_ties",
            "location": 414,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "supported_freq_dom": {
            "name": "supported_freq_dom",
            "location": 421,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "tok_span_dom": {
            "name": "tok_span_dom",
            "location": 429,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "sup_only": []
            }
        },
        "char_span_dom": {
            "name": "char_span_dom",
            "location": 459,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "src_char_len_dom": {
            "name": "src_char_len_dom",
            "location": 499,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "src_char_span_dom": {
            "name": "src_char_span_dom",
            "location": 512,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "finnpos_non_recurs_dom": {
            "name": "finnpos_non_recurs_dom",
            "location": 526,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "finnpos_naive_lemma_dom": {
            "name": "finnpos_naive_lemma_dom",
            "location": 538,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "finnpos_naive_pos_dom": {
            "name": "finnpos_naive_pos_dom",
            "location": 554,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "finnpos_rm_pos": {
            "name": "finnpos_rm_pos",
            "location": 582,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "level": []
            }
        },
        "non_wiki_src": {
            "name": "non_wiki_src",
            "location": 629,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "non_wiki_trg": {
            "name": "non_wiki_trg",
            "location": 637,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "proc": []
            }
        },
        "supported_non_wiki_src": {
            "name": "supported_non_wiki_src",
            "location": 644,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "hyp_dom": {
            "name": "hyp_dom",
            "location": 651,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "hyp_sup": {
            "name": "hyp_sup",
            "location": 658,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "filter_lang.remove_other_langs": {
            "name": "remove_other_langs",
            "location": 73,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "fold_support.tran": {
            "name": "tran",
            "location": 92,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "rm_empty.remove_empty": {
            "name": "remove_empty",
            "location": 157,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "rm_ambg.sent_rm_ambg": {
            "name": "sent_rm_ambg",
            "location": 176,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "head.count_break_sent": {
            "name": "count_break_sent",
            "location": 234,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "sample.count_break_sent": {
            "name": "count_break_sent",
            "location": 254,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "MultiFile.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiFile.write": {
            "name": "write",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "MultiFile.close": {
            "name": "close",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "unified_test_dev_split.sent_rm_gold": {
            "name": "sent_rm_gold",
            "location": 353,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "unified_test_dev_split.next_rm": {
            "name": "next_rm",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "tok_span_dom.sent_span_dom": {
            "name": "sent_span_dom",
            "location": 438,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "char_span_dom.sent_span_dom": {
            "name": "sent_span_dom",
            "location": 468,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "finnpos_rm_pos.m": {
            "name": "m",
            "location": 588,
            "return": [],
            "arguments": {
                "feat": [],
                "val": []
            }
        },
        "finnpos_rm_pos.sent_rm_pos": {
            "name": "sent_rm_pos",
            "location": 609,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "finnpos_rm_pos.m.inner": {
            "name": "inner",
            "location": 589,
            "return": [],
            "arguments": {
                "feats": []
            }
        }
    },
    "STIFF-master/scripts/man_ann.py": {
        "man_ann_line": {
            "name": "man_ann_line",
            "location": 20,
            "return": [],
            "arguments": {
                "extractor": [
                    "FinExtractor"
                ],
                "writer": [
                    "AnnWriter"
                ],
                "fi_tok": [
                    "str"
                ]
            }
        },
        "man_ann": {
            "name": "man_ann",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "opensubs18": {
            "name": "opensubs18",
            "location": 43,
            "return": [],
            "arguments": {
                "corpus": [
                    "str"
                ],
                "output": [
                    "IO"
                ]
            }
        },
        "filter": {
            "name": "filter",
            "location": 71,
            "return": [],
            "arguments": {
                "input": [
                    "IO"
                ],
                "output": [
                    "IO"
                ]
            }
        },
        "conllu_gen": {
            "name": "conllu_gen",
            "location": 95,
            "return": [],
            "arguments": {
                "input": [
                    "IO"
                ],
                "output": [
                    "IO"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "key_ann": {
            "name": "key_ann",
            "location": 116,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "key_tok_tag": {
            "name": "key_tok_tag",
            "location": 123,
            "return": [],
            "arguments": {
                "tok": [],
                "tag": []
            }
        },
        "reann": {
            "name": "reann",
            "location": 132,
            "return": [],
            "arguments": {
                "input": [
                    "IO"
                ],
                "output": [
                    "IO"
                ]
            }
        },
        "filter.proc": {
            "name": "proc",
            "location": 75,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "reann.proc": {
            "name": "proc",
            "location": 136,
            "return": [],
            "arguments": {
                "elem": []
            }
        }
    },
    "STIFF-master/scripts/munge.py": {
        "munge": {
            "name": "munge",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "opensubs18_ids_to_unified": {
            "name": "opensubs18_ids_to_unified",
            "location": 42,
            "return": [],
            "arguments": {
                "iter_stiff": []
            }
        },
        "iter_sentences_opensubs18_man_ann": {
            "name": "iter_sentences_opensubs18_man_ann",
            "location": 57,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "iter_sentences_eurosense": {
            "name": "iter_sentences_eurosense",
            "location": 67,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "get_lemma": {
            "name": "get_lemma",
            "location": 72,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "stiff_to_unified": {
            "name": "stiff_to_unified",
            "location": 100,
            "return": [],
            "arguments": {
                "stiff": [
                    "IO"
                ],
                "unified": [
                    "IO"
                ],
                "input_fmt": [
                    "str"
                ]
            }
        },
        "unified_split": {
            "name": "unified_split",
            "location": 205,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ],
                "keyout": [
                    "IO"
                ]
            }
        },
        "iter_anchored_anns": {
            "name": "iter_anchored_anns",
            "location": 223,
            "return": [],
            "arguments": {
                "sent_elem": [],
                "once_only": []
            }
        },
        "eurosense_add_anchor_positions": {
            "name": "eurosense_add_anchor_positions",
            "location": 259,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "write_header": {
            "name": "write_header",
            "location": 269,
            "return": [],
            "arguments": {
                "unified": [],
                "source": []
            }
        },
        "eurosense_to_unified": {
            "name": "eurosense_to_unified",
            "location": 278,
            "return": [],
            "arguments": {
                "eurosense": [
                    "IO"
                ],
                "unified": [
                    "IO"
                ]
            }
        },
        "lemma_to_synset": {
            "name": "lemma_to_synset",
            "location": 319,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "iter_synsets": {
            "name": "iter_synsets",
            "location": 328,
            "return": [],
            "arguments": {
                "synset_list": []
            }
        },
        "eurosense_fix_lemmas": {
            "name": "eurosense_fix_lemmas",
            "location": 341,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ],
                "keep_unknown": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "eurosense_reanchor": {
            "name": "eurosense_reanchor",
            "location": 426,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "babelnet_lookup": {
            "name": "babelnet_lookup",
            "location": 458,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "map_bn2wn": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "lexical_sample_head": {
            "name": "lexical_sample_head",
            "location": 481,
            "return": [],
            "arguments": {
                "outf": []
            }
        },
        "lexical_sample_foot": {
            "name": "lexical_sample_foot",
            "location": 490,
            "return": [],
            "arguments": {
                "outf": []
            }
        },
        "lexical_sample": {
            "name": "lexical_sample",
            "location": 495,
            "return": [],
            "arguments": {
                "outf": []
            }
        },
        "lexelt_head": {
            "name": "lexelt_head",
            "location": 501,
            "return": [],
            "arguments": {
                "lemma_str": [],
                "pos_chr": [],
                "outf": []
            }
        },
        "lexelt_synset_head": {
            "name": "lexelt_synset_head",
            "location": 505,
            "return": [],
            "arguments": {
                "synset": [],
                "outf": []
            }
        },
        "lexelt_foot": {
            "name": "lexelt_foot",
            "location": 509,
            "return": [],
            "arguments": {
                "outf": []
            }
        },
        "lexelt": {
            "name": "lexelt",
            "location": 514,
            "return": [],
            "arguments": {
                "lemma_str": [],
                "pos_chr": [],
                "outf": []
            }
        },
        "instance": {
            "name": "instance",
            "location": 521,
            "return": [],
            "arguments": {
                "inst": [],
                "out_f": []
            }
        },
        "write_context": {
            "name": "write_context",
            "location": 527,
            "return": [],
            "arguments": {
                "sent_elem": [],
                "inst": [],
                "out_f": [],
                "write_tag": []
            }
        },
        "lemma_to_synset_key": {
            "name": "lemma_to_synset_key",
            "location": 570,
            "return": [],
            "arguments": {
                "keyin": [],
                "keyout": []
            }
        },
        "unified_to_senseval": {
            "name": "unified_to_senseval",
            "location": 587,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "keyin": [
                    "IO"
                ],
                "outdir": [
                    "str"
                ],
                "exclude_word": [
                    "List[str]"
                ],
                "write_tag": [
                    "bool"
                ],
                "synset_group": [
                    "bool"
                ],
                "filter_key": [
                    "Optional[IO]"
                ]
            }
        },
        "senseval_gather": {
            "name": "senseval_gather",
            "location": 696,
            "return": [],
            "arguments": {
                "indir": [
                    "str"
                ],
                "outf": [
                    "IO"
                ],
                "keyout": [
                    "IO"
                ],
                "write_tag": [
                    "bool"
                ]
            }
        },
        "unified_key_to_ims_test": {
            "name": "unified_key_to_ims_test",
            "location": 724,
            "return": [],
            "arguments": {
                "keyin": [
                    "IO"
                ],
                "keyout": [
                    "IO"
                ]
            }
        },
        "finnpos_senseval": {
            "name": "finnpos_senseval",
            "location": 738,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "omorfi_segment_senseval": {
            "name": "omorfi_segment_senseval",
            "location": 747,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "man_ann_select": {
            "name": "man_ann_select",
            "location": 758,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ],
                "source": [],
                "end": []
            }
        },
        "stiff_select_wn": {
            "name": "stiff_select_wn",
            "location": 801,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ],
                "wn": []
            }
        },
        "senseval_select_lemma": {
            "name": "senseval_select_lemma",
            "location": 854,
            "return": [],
            "arguments": {
                "inf": [],
                "keyin": [],
                "outf": [],
                "keyout": [],
                "lemma_pos": []
            }
        },
        "extract_words": {
            "name": "extract_words",
            "location": 883,
            "return": [],
            "arguments": {
                "infs": [],
                "outf": [],
                "synsets": []
            }
        },
        "senseval_rm_lemma": {
            "name": "senseval_rm_lemma",
            "location": 905,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "rm_key_out": [],
                "lemmas": []
            }
        },
        "key_rm_lemma": {
            "name": "key_rm_lemma",
            "location": 928,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "rm_key_in": [],
                "three": []
            }
        },
        "senseval_filter_lemma": {
            "name": "senseval_filter_lemma",
            "location": 943,
            "return": [],
            "arguments": {
                "lemmas": [],
                "inf": [],
                "outf": [],
                "filter_key_out": []
            }
        },
        "key_filter_lemma": {
            "name": "key_filter_lemma",
            "location": 965,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "filter_key_in": [],
                "three": []
            }
        },
        "unified_split.sent_split_key": {
            "name": "sent_split_key",
            "location": 211,
            "return": [],
            "arguments": {
                "sent_elem": []
            }
        },
        "eurosense_add_anchor_positions.add_anchor_positions": {
            "name": "add_anchor_positions",
            "location": 260,
            "return": [],
            "arguments": {
                "sent_elem": []
            }
        },
        "lemma_to_synset.l2ss": {
            "name": "l2ss",
            "location": 322,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "eurosense_fix_lemmas.ann_fix_lemmas": {
            "name": "ann_fix_lemmas",
            "location": 356,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "eurosense_reanchor.ann_reanchor": {
            "name": "ann_reanchor",
            "location": 434,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "babelnet_lookup.ann_bn2wn": {
            "name": "ann_bn2wn",
            "location": 468,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "write_context.write_one": {
            "name": "write_one",
            "location": 528,
            "return": [],
            "arguments": {
                "surf": [],
                "lem": [],
                "pos": []
            }
        },
        "unified_to_senseval.train_out": {
            "name": "train_out",
            "location": 604,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "stiff_select_wn.filter_wns": {
            "name": "filter_wns",
            "location": 807,
            "return": [],
            "arguments": {
                "wns": []
            }
        },
        "stiff_select_wn.select_wn": {
            "name": "select_wn",
            "location": 810,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "senseval_select_lemma.filter_lexelt": {
            "name": "filter_lexelt",
            "location": 863,
            "return": [],
            "arguments": {
                "lexelt": []
            }
        },
        "senseval_rm_lemma.filter_lexelt": {
            "name": "filter_lexelt",
            "location": 910,
            "return": [],
            "arguments": {
                "lexelt": []
            }
        },
        "senseval_filter_lemma.filter_lexelt": {
            "name": "filter_lexelt",
            "location": 947,
            "return": [],
            "arguments": {
                "lexelt": []
            }
        },
        "eurosense_fix_lemmas.ann_fix_lemmas.mk_lemma_synset_map": {
            "name": "mk_lemma_synset_map",
            "location": 361,
            "return": [],
            "arguments": {
                "lower": []
            }
        },
        "unified_to_senseval.write_foot": {
            "name": "write_foot",
            "location": 680,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "write_context.iter_bits": {
            "name": "iter_bits",
            "location": 542,
            "return": [],
            "arguments": {
                "bits": []
            }
        },
        "unified_to_senseval.read_key": {
            "name": "read_key",
            "location": 617,
            "return": [],
            "arguments": {}
        },
        "unified_to_senseval.write_xml": {
            "name": "write_xml",
            "location": 649,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "senseval_gather.cb": {
            "name": "cb",
            "location": 710,
            "return": [],
            "arguments": {
                "lexelt": []
            }
        }
    },
    "STIFF-master/scripts/pipeline.py": {
        "pipeline": {
            "name": "pipeline",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "mk_eurosense2stifflike_pipeline": {
            "name": "mk_eurosense2stifflike_pipeline",
            "location": 30,
            "return": [],
            "arguments": {
                "pipeline": [],
                "babel2wn_map": []
            }
        },
        "eurosense2stifflike": {
            "name": "eurosense2stifflike",
            "location": 55,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "head": [],
                "babel2wn_map": []
            }
        },
        "eurosense2unified": {
            "name": "eurosense2unified",
            "location": 71,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "keyout": [],
                "head": [],
                "babel2wn_map": []
            }
        },
        "stiff2unified": {
            "name": "stiff2unified",
            "location": 95,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": [],
                "keyout": [],
                "head": [],
                "input_fmt": []
            }
        },
        "unified_to_sup": {
            "name": "unified_to_sup",
            "location": 117,
            "return": [],
            "arguments": {
                "inf": [],
                "keyin": [],
                "outf": [],
                "key3out": [],
                "keyout": [],
                "outtagf": [],
                "semcor": [],
                "exclude_word": [
                    "Optional[List[str]]"
                ],
                "filter_key": [
                    "Optional[str]"
                ]
            }
        },
        "unified_auto_man_to_evals": {
            "name": "unified_auto_man_to_evals",
            "location": 190,
            "return": [],
            "arguments": {
                "inf": [],
                "ingoldf": [],
                "keyin": [],
                "goldkeyin": [],
                "dirout": [],
                "rm_blacklist": []
            }
        },
        "unified_to_eval": {
            "name": "unified_to_eval",
            "location": 243,
            "return": [],
            "arguments": {
                "inf": [],
                "keyin": [],
                "dirout": []
            }
        },
        "unified_to_single_eval": {
            "name": "unified_to_single_eval",
            "location": 272,
            "return": [],
            "arguments": {
                "seg": [],
                "inf": [],
                "keyin": [],
                "dirout": [],
                "exclude": []
            }
        },
        "mk_stiff": {
            "name": "mk_stiff",
            "location": 301,
            "return": [],
            "arguments": {
                "indir": [],
                "outf": []
            }
        },
        "man_ann_eurosense": {
            "name": "man_ann_eurosense",
            "location": 316,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "man_ann_tdt": {
            "name": "man_ann_tdt",
            "location": 329,
            "return": [],
            "arguments": {
                "inf": [],
                "outf": []
            }
        },
        "train_filter": {
            "name": "train_filter",
            "location": 343,
            "return": [],
            "arguments": {
                "mode": [],
                "indir": [],
                "outdir": [],
                "lemmas": []
            }
        },
        "unified_to_sup.u2s": {
            "name": "u2s",
            "location": 136,
            "return": [],
            "arguments": {
                "keyin": [],
                "tempdir": [],
                "synset_group": [],
                "write_tag": []
            }
        },
        "unified_to_sup.gather": {
            "name": "gather",
            "location": 148,
            "return": [],
            "arguments": {
                "tempdir": [],
                "outf": [],
                "write_keyout": [],
                "write_tag": []
            }
        }
    },
    "STIFF-master/scripts/tag.py": {
        "tag": {
            "name": "tag",
            "location": 14,
            "return": [],
            "arguments": {
                "corpus": [],
                "output": [],
                "cutoff": [],
                "skip_until": []
            }
        }
    },
    "STIFF-master/scripts/variants.py": {
        "variants": {
            "name": "variants",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "proc": {
            "name": "proc",
            "location": 41,
            "return": [],
            "arguments": {
                "method": [],
                "inf": [],
                "outf": [],
                "head": [],
                "no_zstd_out": []
            }
        },
        "eval": {
            "name": "eval",
            "location": 75,
            "return": [],
            "arguments": {
                "inf": [],
                "dirout": []
            }
        },
        "draw_tree": {
            "name": "draw_tree",
            "location": 86,
            "return": [],
            "arguments": {
                "dot": []
            }
        },
        "get_used_stages": {
            "name": "get_used_stages",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "get_cat_stages": {
            "name": "get_cat_stages",
            "location": 97,
            "return": [],
            "arguments": {
                "stage_cats": []
            }
        },
        "get_doc_stages": {
            "name": "get_doc_stages",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "stages_check": {
            "name": "stages_check",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "print_stage_tree": {
            "name": "print_stage_tree",
            "location": 160,
            "return": [],
            "arguments": {
                "stages": []
            }
        },
        "mk_tournament_stages": {
            "name": "mk_tournament_stages",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "mk_correspondance_table": {
            "name": "mk_correspondance_table",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "mk_code_boxes": {
            "name": "mk_code_boxes",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "mk_code_pipes": {
            "name": "mk_code_pipes",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "mk_code_pipes.new_bin": {
            "name": "new_bin",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "mk_code_pipes.draw_node": {
            "name": "draw_node",
            "location": 250,
            "return": [],
            "arguments": {
                "stages": [],
                "root": []
            }
        }
    },
    "STIFF-master/stiff/corpus_read.py": {
        "realign": {
            "name": "realign",
            "location": 21,
            "return": [
                "Iterator[Tuple[(str, str)]]"
            ],
            "arguments": {
                "untok": [
                    "IO"
                ],
                "tok": [
                    "IO"
                ],
                "skiplimit": []
            }
        },
        "read_opensubtitles2018": {
            "name": "read_opensubtitles2018",
            "location": 44,
            "return": [
                "Iterator[Tuple[(int, str, str, str, str, str, bool, 'WordAlignment')]]"
            ],
            "arguments": {
                "dir": [
                    "str"
                ]
            }
        },
        "get_src": {
            "name": "get_src",
            "location": 72,
            "return": [],
            "arguments": {
                "line_id": [
                    "str"
                ]
            }
        },
        "WordAlignment.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alignment": [
                    "str"
                ]
            }
        }
    },
    "STIFF-master/stiff/eval.py": {
        "get_partition_paths": {
            "name": "get_partition_paths",
            "location": 4,
            "return": [],
            "arguments": {
                "evaldir": [],
                "partition": []
            }
        },
        "get_eval_paths": {
            "name": "get_eval_paths",
            "location": 16,
            "return": [],
            "arguments": {
                "evaldir": []
            }
        }
    },
    "STIFF-master/stiff/filter.py": {
        "decode_dom_arg": {
            "name": "decode_dom_arg",
            "location": 11,
            "return": [],
            "arguments": {
                "proc": []
            }
        },
        "get_wn_pos": {
            "name": "get_wn_pos",
            "location": 18,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "get_headword_offset": {
            "name": "get_headword_offset",
            "location": 25,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "get_finnpos_analys": {
            "name": "get_finnpos_analys",
            "location": 40,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "lemmatized_pos_match": {
            "name": "lemmatized_pos_match",
            "location": 49,
            "return": [],
            "arguments": {
                "wn_pos": [],
                "finnpos_feats": []
            }
        },
        "trim_anns": {
            "name": "trim_anns",
            "location": 60,
            "return": [],
            "arguments": {
                "anns": [],
                "new_anns": []
            }
        },
        "mk_conditional_tournament": {
            "name": "mk_conditional_tournament",
            "location": 351,
            "return": [],
            "arguments": {
                "ApplyTour": [],
                "FilterTour": [],
                "filter_vals": []
            }
        },
        "greedy_max_span": {
            "name": "greedy_max_span",
            "location": 413,
            "return": [],
            "arguments": {
                "positions": []
            }
        },
        "TournamentBase.key": {
            "name": "key",
            "location": 69,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "TournamentBase.proc_stream": {
            "name": "proc_stream",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "inf": [],
                "outf": []
            }
        },
        "TournamentBase.prepare_sent": {
            "name": "prepare_sent",
            "location": 76,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "TournamentBase.get_anns": {
            "name": "get_anns",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "sent": []
            }
        },
        "TournamentBase.proc_anns": {
            "name": "proc_anns",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "anns": []
            }
        },
        "TournamentBase.proc_sent": {
            "name": "proc_sent",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "sent": []
            }
        },
        "NumRankTournamentBase.rank": {
            "name": "rank",
            "location": 95,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "NumRankTournamentBase.proc_anns": {
            "name": "proc_anns",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "anns": []
            }
        },
        "RankTournament.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "do_dom": [],
                "rm_ranks": []
            }
        },
        "DomOnlyRankTournament.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CmpTournament.cmp": {
            "name": "cmp",
            "location": 137,
            "return": [],
            "arguments": {
                "ann1": [],
                "ann2": []
            }
        },
        "CmpTournament.proc_anns": {
            "name": "proc_anns",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "anns": []
            }
        },
        "SpanKeyMixin.key": {
            "name": "key",
            "location": 168,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "HasSupportTournament.rank": {
            "name": "rank",
            "location": 174,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "AlignTournament.rank": {
            "name": "rank",
            "location": 180,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "SrcCharLenTournament.rank": {
            "name": "rank",
            "location": 193,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "SrcCharSpanTournament.cmp": {
            "name": "cmp",
            "location": 207,
            "return": [],
            "arguments": {
                "ann1": [],
                "ann2": []
            }
        },
        "FinnPOSMixin.prepare_sent": {
            "name": "prepare_sent",
            "location": 266,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "NaiveLemmaTournament.rank": {
            "name": "rank",
            "location": 272,
            "return": [],
            "arguments": {
                "ann": [],
                "finnpos_analys": []
            }
        },
        "NaivePosTournament.rank": {
            "name": "rank",
            "location": 290,
            "return": [],
            "arguments": {
                "ann": [],
                "finnpos_analys": []
            }
        },
        "LemmaPathTournament.rank": {
            "name": "rank",
            "location": 300,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "ReverseOrder.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": []
            }
        },
        "ReverseOrder.__eq__": {
            "name": "__eq__",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ReverseOrder.__lt__": {
            "name": "__lt__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NonDerivTournament.rank": {
            "name": "rank",
            "location": 324,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "FreqRankDom.rank": {
            "name": "rank",
            "location": 341,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "AlphabeticDom.rank": {
            "name": "rank",
            "location": 347,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "PreferNonWikiTargetDom.rank": {
            "name": "rank",
            "location": 390,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "PreferNonWikiSourceDom.rank": {
            "name": "rank",
            "location": 397,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "HypTournament.cmp": {
            "name": "cmp",
            "location": 440,
            "return": [],
            "arguments": {
                "ann1": [],
                "ann2": []
            }
        },
        "SrcCharSpanTournament.cmp.extract_spans": {
            "name": "extract_spans",
            "location": 214,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "SrcCharSpanTournament.cmp.cmp_sup": {
            "name": "cmp_sup",
            "location": 224,
            "return": [],
            "arguments": {
                "sup1": [],
                "sup2": []
            }
        },
        "mk_conditional_tournament.ConditionalTournament.prepare_sent": {
            "name": "prepare_sent",
            "location": 354,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "mk_conditional_tournament.ConditionalTournament.key": {
            "name": "key",
            "location": 358,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "mk_conditional_tournament.ConditionalTournament.get_anns": {
            "name": "get_anns",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "sent": [],
                "apply_extra": [],
                "filter_extra": []
            }
        },
        "mk_conditional_tournament.ConditionalTournament.rank": {
            "name": "rank",
            "location": 373,
            "return": [],
            "arguments": {
                "ann": [],
                "apply_extra": [],
                "filter_extra": []
            }
        },
        "mk_conditional_tournament.ConditionalTournament.cmp": {
            "name": "cmp",
            "location": 377,
            "return": [],
            "arguments": {
                "ann1": [],
                "ann2": [],
                "apply_extra": [],
                "filter_extra": []
            }
        },
        "HypTournament.cmp.hypernym_of": {
            "name": "hypernym_of",
            "location": 447,
            "return": [],
            "arguments": {
                "hyper": [],
                "hypo": []
            }
        },
        "HypTournament.cmp.ann2ss": {
            "name": "ann2ss",
            "location": 450,
            "return": [],
            "arguments": {
                "ann": []
            }
        }
    },
    "STIFF-master/stiff/methods.py": {
        "lookup_stage": {
            "name": "lookup_stage",
            "location": 144,
            "return": [],
            "arguments": {
                "stage": []
            }
        },
        "normalise_tree": {
            "name": "normalise_tree",
            "location": 262,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "get_branches": {
            "name": "get_branches",
            "location": 274,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "get_dot": {
            "name": "get_dot",
            "location": 301,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "get_forest": {
            "name": "get_forest",
            "location": 344,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "get_stages": {
            "name": "get_stages",
            "location": 360,
            "return": [],
            "arguments": {
                "short_code": []
            }
        },
        "get_list_ancestor": {
            "name": "get_list_ancestor",
            "location": 364,
            "return": [],
            "arguments": {
                "diff_tree": []
            }
        },
        "get_disp_diff": {
            "name": "get_disp_diff",
            "location": 370,
            "return": [],
            "arguments": {
                "parent": [],
                "child": []
            }
        },
        "get_critical_nodes": {
            "name": "get_critical_nodes",
            "location": 393,
            "return": [],
            "arguments": {
                "tree": [],
                "parent": []
            }
        },
        "get_forest.draw_node": {
            "name": "draw_node",
            "location": 345,
            "return": [],
            "arguments": {
                "node": [],
                "parent": []
            }
        }
    },
    "STIFF-master/stiff/models.py": {
        "dash_dict": {
            "name": "dash_dict",
            "location": 25,
            "return": [],
            "arguments": {
                "kvs": []
            }
        },
        "DataUtilMixin.urlencode": {
            "name": "urlencode",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Anchor.urlencode": {
            "name": "urlencode",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaggedLemma.wordnets": {
            "name": "wordnets",
            "location": 81,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaggedLemma.lemma_names": {
            "name": "lemma_names",
            "location": 85,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaggedLemma.lemma_names_url": {
            "name": "lemma_names_url",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaggedLemma.synset_names": {
            "name": "synset_names",
            "location": 99,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaggedLemma.wn_synset_names": {
            "name": "wn_synset_names",
            "location": 103,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaggedLemma.canonical_synset_id": {
            "name": "canonical_synset_id",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "wordnet": [
                    "Type['ExtractableWordnet']"
                ]
            }
        },
        "TaggedLemma.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Tagging.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wordnet": [
                    "Type['ExtractableWordnet']"
                ],
                "tokens": [
                    "Optional[List[Token]]"
                ]
            }
        },
        "Tagging._index_tags": {
            "name": "_index_tags",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "tok_idx": [
                    "int"
                ],
                "tags": [
                    "List[TaggedLemma]"
                ]
            }
        },
        "Tagging.canon_synset_id_set": {
            "name": "canon_synset_id_set",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagging.wn_synsets": {
            "name": "wn_synsets",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagging.add_tags": {
            "name": "add_tags",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ],
                "anchors": [
                    "List[Anchor]"
                ],
                "tags": [
                    "List[TaggedLemma]"
                ]
            }
        },
        "Tagging.iter_tags": {
            "name": "iter_tags",
            "location": 166,
            "return": [
                "Iterator[Tuple[(Token, TaggedLemma)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tagging._combine": {
            "name": "_combine",
            "location": 171,
            "return": [
                "'Tagging'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Tagging'"
                ],
                "matcher": [
                    "Matcher"
                ],
                "combiner": [
                    "Combiner"
                ]
            }
        },
        "UntokenizedTagging.combine_cross_toks": {
            "name": "combine_cross_toks",
            "location": 189,
            "return": [
                "Tagging"
            ],
            "arguments": {
                "self": [],
                "other_tok": [
                    "'TokenizedTagging'"
                ],
                "matcher": [
                    "CrossToksMatcher"
                ]
            }
        },
        "TokenizedTagging.combine_cross_toks": {
            "name": "combine_cross_toks",
            "location": 196,
            "return": [
                "Tagging"
            ],
            "arguments": {
                "self": [],
                "other_untok": [
                    "'UntokenizedTagging'"
                ],
                "matcher": [
                    "CrossToksMatcher"
                ]
            }
        },
        "TokenizedTagging.combine_cross_toks.match": {
            "name": "match",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "tok_tok": [
                    "Token"
                ],
                "untok_tok": [
                    "Token"
                ]
            }
        },
        "TokenizedTagging.combine_cross_toks.combine": {
            "name": "combine",
            "location": 212,
            "return": [],
            "arguments": {
                "tok_tok": [
                    "Token"
                ],
                "untok_tok": [
                    "Token"
                ]
            }
        }
    },
    "STIFF-master/stiff/sup_corpus.py": {
        "iter_lexelts": {
            "name": "iter_lexelts",
            "location": 5,
            "return": [],
            "arguments": {
                "inf": [],
                "synsets": []
            }
        },
        "proc_instance": {
            "name": "proc_instance",
            "location": 15,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "iter_instances": {
            "name": "iter_instances",
            "location": 41,
            "return": [],
            "arguments": {
                "inf": [],
                "synsets": []
            }
        },
        "iter_instances_grouped": {
            "name": "iter_instances_grouped",
            "location": 48,
            "return": [],
            "arguments": {
                "inf": [],
                "synsets": []
            }
        },
        "split_tagged_token": {
            "name": "split_tagged_token",
            "location": 58,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "split_tagged_tokens": {
            "name": "split_tagged_tokens",
            "location": 64,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "norm_wf_lemma_of_tokens": {
            "name": "norm_wf_lemma_of_tokens",
            "location": 68,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "next_key": {
            "name": "next_key",
            "location": 72,
            "return": [],
            "arguments": {
                "keyin": []
            }
        },
        "iter_keys": {
            "name": "iter_keys",
            "location": 77,
            "return": [],
            "arguments": {
                "keyin": []
            }
        },
        "iter_instances_grouped.group_iter": {
            "name": "group_iter",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "STIFF-master/stiff/tag.py": {
        "get_tok_idx": {
            "name": "get_tok_idx",
            "location": 19,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "tok": [
                    "Token"
                ]
            }
        },
        "iter_supports": {
            "name": "iter_supports",
            "location": 26,
            "return": [],
            "arguments": {
                "source_tagging": [],
                "source_canon_id": []
            }
        },
        "anchor_positions": {
            "name": "anchor_positions",
            "location": 37,
            "return": [],
            "arguments": {
                "anchor": [
                    "Anchor"
                ]
            }
        },
        "apply_lemmas": {
            "name": "apply_lemmas",
            "location": 46,
            "return": [],
            "arguments": {
                "wn_canon_ids": [
                    "Set[str]"
                ],
                "dest_tagging": [
                    "Tagging"
                ],
                "source_tagging": [
                    "Tagging"
                ],
                "base_support": [
                    "TagSupport"
                ],
                "align_map": [
                    "Dict[(int, List[int])]"
                ],
                "preproc_rev_map": []
            }
        },
        "expand_english_deriv": {
            "name": "expand_english_deriv",
            "location": 88,
            "return": [
                "Tuple[(Set[str], Dict[(str, str)])]"
            ],
            "arguments": {
                "tagging": [
                    "Tagging"
                ]
            }
        },
        "add_supports_onto": {
            "name": "add_supports_onto",
            "location": 102,
            "return": [],
            "arguments": {
                "tagging1": [],
                "tagging2": [],
                "align_map": [
                    "Dict[(int, List[int])]"
                ]
            }
        },
        "add_supports": {
            "name": "add_supports",
            "location": 121,
            "return": [],
            "arguments": {
                "tagging1": [
                    "Tagging"
                ],
                "tagging2": [
                    "Tagging"
                ],
                "align": []
            }
        },
        "add_fi_ranks": {
            "name": "add_fi_ranks",
            "location": 126,
            "return": [],
            "arguments": {
                "fi_tagging": [
                    "Tagging"
                ]
            }
        },
        "write_anns": {
            "name": "write_anns",
            "location": 148,
            "return": [],
            "arguments": {
                "writer": [
                    "Writer"
                ],
                "lang": [
                    "str"
                ],
                "tagging": [
                    "Tagging"
                ]
            }
        },
        "proc_line": {
            "name": "proc_line",
            "location": 154,
            "return": [],
            "arguments": {
                "cmn_extractor": [
                    "CmnExtractor"
                ],
                "fin_extractor": [
                    "FinExtractor"
                ],
                "writer": [
                    "Writer"
                ],
                "zh_untok": [
                    "str"
                ],
                "zh_tok": [
                    "str"
                ],
                "fi_tok": [
                    "str"
                ],
                "align": [
                    "WordAlignment"
                ]
            }
        }
    },
    "STIFF-master/stiff/writers.py": {
        "ann_common_attrs": {
            "name": "ann_common_attrs",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "lang": [
                    "str"
                ],
                "tok": [
                    "Token"
                ],
                "tag": [
                    "TaggedLemma"
                ]
            }
        },
        "ann_text": {
            "name": "ann_text",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "tag": [
                    "TaggedLemma"
                ]
            }
        },
        "related_lemma_list": {
            "name": "related_lemma_list",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "lemma_objs": [
                    "List[Tuple[(str, Lemma)]]"
                ]
            }
        },
        "preferred_synset": {
            "name": "preferred_synset",
            "location": 47,
            "return": [
                "Synset"
            ],
            "arguments": {
                "lemma_objs": [
                    "List[Tuple[(str, Lemma)]]"
                ]
            }
        },
        "maybe_fmt_list": {
            "name": "maybe_fmt_list",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "title": [
                    "str"
                ],
                "synsets": [
                    "List[Synset]"
                ]
            }
        },
        "annotation_comment": {
            "name": "annotation_comment",
            "location": 61,
            "return": [],
            "arguments": {
                "lemma_objs": [
                    "List[Tuple[(str, Lemma)]]"
                ]
            }
        },
        "man_ann_ann": {
            "name": "man_ann_ann",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "lang": [
                    "str"
                ],
                "tok": [
                    "Token"
                ],
                "tag": [
                    "TaggedLemma"
                ]
            }
        },
        "Writer.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "outf": []
            }
        },
        "Writer.__enter__": {
            "name": "__enter__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Writer.__exit__": {
            "name": "__exit__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "traceback": []
            }
        },
        "Writer.begin_subtitle": {
            "name": "begin_subtitle",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "srcs": [],
                "imdb": []
            }
        },
        "Writer.end_subtitle": {
            "name": "end_subtitle",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Writer.begin_sent": {
            "name": "begin_sent",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Writer.end_sent": {
            "name": "end_sent",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Writer._tok_extra": {
            "name": "_tok_extra",
            "location": 112,
            "return": [],
            "arguments": {
                "is_tokenised": []
            }
        },
        "Writer.write_text": {
            "name": "write_text",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "lang": [],
                "text": [],
                "is_tokenised": []
            }
        },
        "Writer.write_gram": {
            "name": "write_gram",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "for_id": [],
                "gram_type": [],
                "gram": []
            }
        },
        "Writer.write_ann": {
            "name": "write_ann",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "lang": [
                    "str"
                ],
                "tok": [
                    "Token"
                ],
                "tag": [
                    "TaggedLemma"
                ]
            }
        },
        "Writer.start_anns": {
            "name": "start_anns",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Writer.end_anns": {
            "name": "end_anns",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnWriter.begin_subtitle": {
            "name": "begin_subtitle",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "srcs": [],
                "imdb": []
            }
        },
        "AnnWriter.end_subtitle": {
            "name": "end_subtitle",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnWriter.inc_sent": {
            "name": "inc_sent",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnWriter.begin_sent": {
            "name": "begin_sent",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnWriter.write_ann": {
            "name": "write_ann",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "lang": [
                    "str"
                ],
                "tok": [
                    "Token"
                ],
                "tag": [
                    "TaggedLemma"
                ]
            }
        }
    },
    "STIFF-master/stiff/__init__.py": {},
    "STIFF-master/stiff/data/constants.py": {
        "invert": {
            "name": "invert",
            "location": 1,
            "return": [],
            "arguments": {
                "d": []
            }
        }
    },
    "STIFF-master/stiff/data/fixes.py": {
        "fix_cmn": {
            "name": "fix_cmn",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "add_omw_wikt": {
            "name": "add_omw_wikt",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "fix_all": {
            "name": "fix_all",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "STIFF-master/stiff/data/__init__.py": {
        "get_data_path": {
            "name": "get_data_path",
            "location": 4,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "STIFF-master/stiff/extract/cmn.py": {
        "mk_cmn_token_auto": {
            "name": "mk_cmn_token_auto",
            "location": 13,
            "return": [
                "TokenAutomaton"
            ],
            "arguments": {}
        },
        "CmnExtractor.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CmnExtractor.extract_untok": {
            "name": "extract_untok",
            "location": 27,
            "return": [
                "UntokenizedTagging"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "CmnExtractor.extract_tok": {
            "name": "extract_tok",
            "location": 30,
            "return": [
                "TokenizedTagging"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "CmnExtractor.extract": {
            "name": "extract",
            "location": 33,
            "return": [
                "Tagging"
            ],
            "arguments": {
                "self": [],
                "line_untok": [
                    "str"
                ],
                "line_tok": [
                    "str"
                ]
            }
        },
        "CmnExtractor.extract.matcher": {
            "name": "matcher",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "tok_tok": [
                    "Anchor"
                ],
                "untok_tok": [
                    "Anchor"
                ]
            }
        }
    },
    "STIFF-master/stiff/extract/common.py": {
        "mk_substr_auto": {
            "name": "mk_substr_auto",
            "location": 10,
            "return": [
                "ahocorasick.Automaton"
            ],
            "arguments": {
                "wordnet": [
                    "Type[ExtractableWordnet]"
                ]
            }
        },
        "dedup_entries": {
            "name": "dedup_entries",
            "location": 23,
            "return": [],
            "arguments": {
                "entries": [
                    "List[Tuple[(Any, Dict[(str, List[str])])]]"
                ]
            }
        },
        "mk_token_auto": {
            "name": "mk_token_auto",
            "location": 36,
            "return": [
                "pyahocorasick.TokenAutomaton"
            ],
            "arguments": {
                "words": [
                    "Iterator[Tuple[(str, List[str], Iterable[Tuple[(str, ...)]])]]"
                ]
            }
        }
    },
    "STIFF-master/stiff/extract/fin.py": {
        "_fin_token_conf_net": {
            "name": "_fin_token_conf_net",
            "location": 21,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "mk_fin_token_auto": {
            "name": "mk_fin_token_auto",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "FinExtractor.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinExtractor.extract": {
            "name": "extract",
            "location": 49,
            "return": [
                "TokenizedTagging"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "FinExtractor.extract_toks": {
            "name": "extract_toks",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "surfs": [
                    "List[str]"
                ],
                "starts": [
                    "List[int]"
                ]
            }
        },
        "FinExtractor.extract_toks.add": {
            "name": "add",
            "location": 67,
            "return": [],
            "arguments": {
                "lemmas": [],
                "source": []
            }
        }
    },
    "STIFF-master/stiff/extract/gen.py": {
        "extract_auto": {
            "name": "extract_auto",
            "location": 7,
            "return": [
                "UntokenizedTagging"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "wn": [
                    "Type[ExtractableWordnet]"
                ],
                "auto": [
                    "Automaton"
                ],
                "from_id": [
                    "str"
                ]
            }
        },
        "get_tokens_starts": {
            "name": "get_tokens_starts",
            "location": 22,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "extract_tokenized_iter": {
            "name": "extract_tokenized_iter",
            "location": 29,
            "return": [],
            "arguments": {
                "tagging": [
                    "TokenizedTagging"
                ],
                "iter": [
                    "Iterator[Tuple[(int, Tuple[(List[str], Dict[(str, List[str])])])]]"
                ],
                "wordnet": [
                    "Type[ExtractableWordnet]"
                ],
                "surfs": [
                    "List[str]"
                ],
                "starts": [
                    "List[int]"
                ],
                "from_id": [
                    "str"
                ],
                "sources": [],
                "feats": []
            }
        },
        "extract_tokenized": {
            "name": "extract_tokenized",
            "location": 62,
            "return": [
                "TokenizedTagging"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "wn": [
                    "Type[ExtractableWordnet]"
                ],
                "auto": [
                    "Automaton"
                ],
                "id": [
                    "str"
                ]
            }
        }
    },
    "STIFF-master/stiff/extract/mw_utils.py": {
        "chr_to_maybe_space": {
            "name": "chr_to_maybe_space",
            "location": 4,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "chr": [
                    "str"
                ],
                "lfs": [
                    "Iterable[str]"
                ]
            }
        },
        "chrs_to_maybe_space": {
            "name": "chrs_to_maybe_space",
            "location": 12,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "chrs": [
                    "Iterable[str]"
                ],
                "lf": [
                    "str"
                ]
            }
        },
        "multiword_variants": {
            "name": "multiword_variants",
            "location": 19,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "lf": [
                    "str"
                ]
            }
        }
    },
    "STIFF-master/stiff/extract/__init__.py": {
        "get_extractor": {
            "name": "get_extractor",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "STIFF-master/stiff/munge/pos.py": {
        "finnpos_senseval": {
            "name": "finnpos_senseval",
            "location": 7,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "finnpos_senseval.fmt_analy": {
            "name": "fmt_analy",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "analy": []
            }
        },
        "finnpos_senseval.tag_tokens": {
            "name": "tag_tokens",
            "location": 12,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "sent": [
                    "List[str]"
                ]
            }
        }
    },
    "STIFF-master/stiff/munge/seg.py": {
        "omorfi_segment_senseval": {
            "name": "omorfi_segment_senseval",
            "location": 6,
            "return": [],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "omorfi_segment_senseval.seg_token": {
            "name": "seg_token",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "omorfi_segment_senseval.seg_tokens": {
            "name": "seg_tokens",
            "location": 19,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "sent": [
                    "List[str]"
                ]
            }
        }
    },
    "STIFF-master/stiff/munge/utils.py": {
        "space_tokenize": {
            "name": "space_tokenize",
            "location": 7,
            "return": [],
            "arguments": {
                "str": []
            }
        },
        "transform_senseval_contexts": {
            "name": "transform_senseval_contexts",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "inf": [
                    "IO"
                ],
                "transform_tokens": [
                    "Callable[([List[str]], List[str])]"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "synset_id_of_ann": {
            "name": "synset_id_of_ann",
            "location": 44,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "langs_of_wns": {
            "name": "langs_of_wns",
            "location": 67,
            "return": [],
            "arguments": {
                "wns": []
            }
        },
        "transform_senseval_contexts.transform_context": {
            "name": "transform_context",
            "location": 18,
            "return": [
                "etree.ElementBase"
            ],
            "arguments": {
                "context": [
                    "etree.ElementBase"
                ]
            }
        }
    },
    "STIFF-master/stiff/munge/__init__.py": {},
    "STIFF-master/stiff/scripts/ensure_data_files.py": {},
    "STIFF-master/stiff/scripts/fetch_omw_wikt.py": {},
    "STIFF-master/stiff/scripts/patch_cwn.py": {},
    "STIFF-master/stiff/scripts/post_install.py": {},
    "STIFF-master/stiff/scripts/__init__.py": {},
    "STIFF-master/stiff/utils/anns.py": {
        "get_ann_pos_dict": {
            "name": "get_ann_pos_dict",
            "location": 4,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "get_ann_pos": {
            "name": "get_ann_pos",
            "location": 11,
            "return": [],
            "arguments": {
                "ann": []
            }
        }
    },
    "STIFF-master/stiff/utils/automata.py": {
        "conf_net_search": {
            "name": "conf_net_search",
            "location": 4,
            "return": [],
            "arguments": {
                "auto": [],
                "conf_net": [],
                "elem_id_fn": []
            }
        },
        "conf_net_search_simple": {
            "name": "conf_net_search_simple",
            "location": 64,
            "return": [],
            "arguments": {
                "auto": [],
                "conf_net": [],
                "elem_id_fn": []
            }
        }
    },
    "STIFF-master/stiff/utils/opencc.py": {
        "get_opencc": {
            "name": "get_opencc",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "STIFF-master/stiff/utils/pipeline.py": {
        "add_head": {
            "name": "add_head",
            "location": 10,
            "return": [],
            "arguments": {
                "filter_py": [],
                "pipeline": [],
                "head": []
            }
        },
        "add_zstd": {
            "name": "add_zstd",
            "location": 16,
            "return": [],
            "arguments": {
                "in_path": []
            }
        },
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 23,
            "return": [],
            "arguments": {
                "dirout": []
            }
        },
        "exec_pipeline": {
            "name": "exec_pipeline",
            "location": 28,
            "return": [],
            "arguments": {
                "pipeline": [],
                "retcode": []
            }
        }
    },
    "STIFF-master/stiff/utils/xml.py": {
        "eq_matcher": {
            "name": "eq_matcher",
            "location": 10,
            "return": [
                "Matcher"
            ],
            "arguments": {
                "tag_name": [
                    "str"
                ]
            }
        },
        "in_matcher": {
            "name": "in_matcher",
            "location": 17,
            "return": [
                "Matcher"
            ],
            "arguments": {}
        },
        "detatch_elem": {
            "name": "detatch_elem",
            "location": 24,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "free_elem": {
            "name": "free_elem",
            "location": 31,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "open_tag": {
            "name": "open_tag",
            "location": 38,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "close_tag": {
            "name": "close_tag",
            "location": 47,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "transform_blocks": {
            "name": "transform_blocks",
            "location": 51,
            "return": [],
            "arguments": {
                "matcher": [
                    "Matcher"
                ],
                "inf": [
                    "IO"
                ],
                "transformer": [
                    "Transformer"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "write_event": {
            "name": "write_event",
            "location": 62,
            "return": [],
            "arguments": {
                "event": [],
                "elem": [],
                "outf": []
            }
        },
        "fixup_missing_text": {
            "name": "fixup_missing_text",
            "location": 71,
            "return": [],
            "arguments": {
                "event": [],
                "elem": [],
                "outf": []
            }
        },
        "close_all": {
            "name": "close_all",
            "location": 84,
            "return": [],
            "arguments": {
                "elem": [],
                "outf": []
            }
        },
        "transform": {
            "name": "transform",
            "location": 89,
            "return": [],
            "arguments": {
                "stream": [],
                "matcher": [
                    "Matcher"
                ],
                "transformer": [
                    "Transformer"
                ],
                "outf": [
                    "IO"
                ]
            }
        },
        "cb_to_iter": {
            "name": "cb_to_iter",
            "location": 120,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "cb_blocks": {
            "name": "cb_blocks",
            "location": 163,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "iter_blocks": {
            "name": "iter_blocks",
            "location": 177,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "iter_sent_to_pairs": {
            "name": "iter_sent_to_pairs",
            "location": 184,
            "return": [],
            "arguments": {
                "sent_iter": []
            }
        },
        "iter_sentences_opensubs18_stream": {
            "name": "iter_sentences_opensubs18_stream",
            "location": 189,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "iter_sentences_opensubs18": {
            "name": "iter_sentences_opensubs18",
            "location": 201,
            "return": [],
            "arguments": {
                "fp": []
            }
        },
        "format_opensubs_id": {
            "name": "format_opensubs_id",
            "location": 206,
            "return": [],
            "arguments": {
                "bits": []
            }
        },
        "iter_sentence_id_pairs": {
            "name": "iter_sentence_id_pairs",
            "location": 211,
            "return": [],
            "arguments": {
                "fp": []
            }
        },
        "chunk_stream_cb": {
            "name": "chunk_stream_cb",
            "location": 233,
            "return": [],
            "arguments": {
                "stream": [],
                "matcher": [
                    "Matcher"
                ],
                "outside_cb": [],
                "inside_cb": [],
                "always_cb": []
            }
        },
        "chunk_cb": {
            "name": "chunk_cb",
            "location": 257,
            "return": [],
            "arguments": {
                "stream": [],
                "matcher": [
                    "Matcher"
                ],
                "inside_cb": []
            }
        },
        "eq_matcher.inner": {
            "name": "inner",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": [
                    "str"
                ]
            }
        },
        "in_matcher.inner": {
            "name": "inner",
            "location": 18,
            "return": [],
            "arguments": {
                "other": [
                    "str"
                ]
            }
        },
        "transform.always": {
            "name": "always",
            "location": 94,
            "return": [],
            "arguments": {
                "event": [],
                "elem": []
            }
        },
        "transform.outside": {
            "name": "outside",
            "location": 100,
            "return": [],
            "arguments": {
                "event": [],
                "elem": []
            }
        },
        "transform.inside": {
            "name": "inside",
            "location": 104,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "cb_to_iter.iter": {
            "name": "iter",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "cb_blocks.inner": {
            "name": "inner",
            "location": 164,
            "return": [],
            "arguments": {
                "inf": [],
                "cb": []
            }
        },
        "iter_sentences_opensubs18_stream.sentence_chunker": {
            "name": "sentence_chunker",
            "location": 190,
            "return": [],
            "arguments": {
                "cb": []
            }
        },
        "cb_to_iter.iter.cb": {
            "name": "cb",
            "location": 129,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "cb_to_iter.iter.task": {
            "name": "task",
            "location": 135,
            "return": [],
            "arguments": {}
        }
    },
    "STIFF-master/stiff/utils/__init__.py": {
        "parse_qs_single": {
            "name": "parse_qs_single",
            "location": 4,
            "return": [],
            "arguments": {
                "qs": []
            }
        },
        "wnlemma_to_analy_lemma": {
            "name": "wnlemma_to_analy_lemma",
            "location": 8,
            "return": [],
            "arguments": {
                "wnlemma": []
            }
        }
    },
    "STIFF-master/stiff/wordnet/base.py": {
        "default_mapper": {
            "name": "default_mapper",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "synset_obj": [
                    "Synset"
                ]
            }
        },
        "ExtractableWordnet.lang": {
            "name": "lang",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ExtractableWordnet.lemma_names": {
            "name": "lemma_names",
            "location": 21,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "ExtractableWordnet.synset_group_lemmas": {
            "name": "synset_group_lemmas",
            "location": 25,
            "return": [
                "Iterable[List[Tuple[(str, Lemma)]]]"
            ],
            "arguments": {
                "cls": [],
                "wordnet_lemmas": [
                    "Dict[(str, List[Lemma])]"
                ]
            }
        },
        "ExtractableWordnet.canonical_synset_id": {
            "name": "canonical_synset_id",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "wn": [
                    "str"
                ],
                "lemma_obj": [
                    "Lemma"
                ]
            }
        },
        "ExtractableWordnet.canonical_synset_id_of_synset": {
            "name": "canonical_synset_id_of_synset",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "wn": [
                    "str"
                ],
                "synset_obj": [
                    "Synset"
                ]
            }
        }
    },
    "STIFF-master/stiff/wordnet/cmn.py": {
        "Wordnet.lang": {
            "name": "lang",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Wordnet.lemma_names": {
            "name": "lemma_names",
            "location": 17,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        }
    },
    "STIFF-master/stiff/wordnet/fin.py": {
        "_map_qf2": {
            "name": "_map_qf2",
            "location": 12,
            "return": [],
            "arguments": {
                "synset_obj": []
            }
        },
        "Wordnet.lang": {
            "name": "lang",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Wordnet.lemma_names": {
            "name": "lemma_names",
            "location": 25,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "Wordnet.synset": {
            "name": "synset",
            "location": 33,
            "return": [],
            "arguments": {
                "wn": [],
                "synset_str": []
            }
        }
    },
    "STIFF-master/stiff/wordnet/utils.py": {
        "wn_lemma_map": {
            "name": "wn_lemma_map",
            "location": 12,
            "return": [],
            "arguments": {
                "l": [],
                "wns": []
            }
        },
        "merge_lemmas": {
            "name": "merge_lemmas",
            "location": 16,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "merge_lemma_maps": {
            "name": "merge_lemma_maps",
            "location": 24,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "synset_key_lemmas": {
            "name": "synset_key_lemmas",
            "location": 35,
            "return": [
                "Dict[(str, List[Tuple[(str, Lemma)]])]"
            ],
            "arguments": {
                "wordnet_lemmas": [
                    "Dict[(str, List[Lemma])]"
                ],
                "wordnet": [
                    "Type[ExtractableWordnet]"
                ]
            }
        },
        "synset_group_lemmas": {
            "name": "synset_group_lemmas",
            "location": 47,
            "return": [
                "Iterable[List[Tuple[(str, Lemma)]]]"
            ],
            "arguments": {
                "wordnet_lemmas": [
                    "Dict[(str, List[Lemma])]"
                ],
                "wordnet": [
                    "Type[ExtractableWordnet]"
                ]
            }
        },
        "get_rev_map": {
            "name": "get_rev_map",
            "location": 53,
            "return": [],
            "arguments": {
                "lang": []
            }
        },
        "get_rev_map.rev_map": {
            "name": "rev_map",
            "location": 58,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "STIFF-master/stiff/wordnet/__init__.py": {
        "wn_lemma_keys": {
            "name": "wn_lemma_keys",
            "location": 9,
            "return": [
                "List[Lemma]"
            ],
            "arguments": {
                "wn": [
                    "str"
                ],
                "lemma_name": [
                    "str"
                ]
            }
        },
        "objify_lemmas": {
            "name": "objify_lemmas",
            "location": 16,
            "return": [
                "Dict[(str, List[Lemma])]"
            ],
            "arguments": {
                "wn_to_lemma": [
                    "Dict[(str, List[str])]"
                ]
            }
        }
    },
    "STIFF-master/tests/test_extract.py": {
        "_filter_toks": {
            "name": "_filter_toks",
            "location": 8,
            "return": [],
            "arguments": {
                "tagging": [],
                "needle": []
            }
        },
        "test_extract_fin_saada_aikaan": {
            "name": "test_extract_fin_saada_aikaan",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_extract_fin_ei_koskaan": {
            "name": "test_extract_fin_ei_koskaan",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_extract_fin_murhamies_has_murha_and_mies": {
            "name": "test_extract_fin_murhamies_has_murha_and_mies",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_heraa_hetkeksi": {
            "name": "test_heraa_hetkeksi",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_extract_zh_hollywood": {
            "name": "test_extract_zh_hollywood",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_extract_zh_friend": {
            "name": "test_extract_zh_friend",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "sincere_asserts": {
            "name": "sincere_asserts",
            "location": 82,
            "return": [],
            "arguments": {
                "tagging": []
            }
        },
        "test_extract_zh_tok_sincere": {
            "name": "test_extract_zh_tok_sincere",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_extract_zh_untok_sincere": {
            "name": "test_extract_zh_untok_sincere",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_extract_zh_sincere_congrats_dave": {
            "name": "test_extract_zh_sincere_congrats_dave",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_hyvaa": {
            "name": "test_hyvaa",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_gordon": {
            "name": "test_gordon",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "test_open_brace": {
            "name": "test_open_brace",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "STIFF-master/tests/test_filter.py": {
        "test_filter_align_dom": {
            "name": "test_filter_align_dom",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_filter_has_support": {
            "name": "test_filter_has_support",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_filter_deriv_dom": {
            "name": "test_filter_deriv_dom",
            "location": 114,
            "return": [],
            "arguments": {}
        }
    },
    "STIFF-master/tests/test_munge.py": {
        "test_head_doesnt_move": {
            "name": "test_head_doesnt_move",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "STIFF-master/tests/test_tag.py": {
        "tag": {
            "name": "tag",
            "location": 8,
            "return": [],
            "arguments": {
                "fi_tok": [],
                "zh_tok": [],
                "zh_untok": [],
                "align": []
            }
        },
        "tag_hollywood": {
            "name": "tag_hollywood",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_multiple_best_lemmas": {
            "name": "test_multiple_best_lemmas",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "tag_hyva_ystavani_alan": {
            "name": "tag_hyva_ystavani_alan",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_hyva_ystavani_alan_support_alignment": {
            "name": "test_hyva_ystavani_alan_support_alignment",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    }
}
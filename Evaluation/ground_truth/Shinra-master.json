{
    "Shinra-master/scripts/evaluate_bilstmcrf.py": {},
    "Shinra-master/scripts/filter_sentence.py": {
        "filter_rule": {
            "name": "filter_rule",
            "location": 16,
            "return": [],
            "arguments": {
                "morphs": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/scripts/load_config.py": {
        "config_setup_print": {
            "name": "config_setup_print",
            "location": 5,
            "return": [],
            "arguments": {
                "b": [
                    "bool"
                ]
            }
        }
    },
    "Shinra-master/scripts/make_annotated_corpus.py": {
        "json_reformatting": {
            "name": "json_reformatting",
            "location": 23,
            "return": [
                "DefaultDict[(str, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "json_dir": [
                    "str"
                ],
                "json_class": [
                    "str"
                ]
            }
        },
        "slide_annotate_idx": {
            "name": "slide_annotate_idx",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "plus_lens": [
                    "List[Tuple[(int, int)]]"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "annotation_to_line": {
            "name": "annotation_to_line",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "start_idx": [
                    "List[int]"
                ],
                "end_idx": [
                    "List[int]"
                ],
                "labels": [
                    "List[str]"
                ]
            }
        },
        "annotation_to_lines": {
            "name": "annotation_to_lines",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "answers": [
                    "DefaultDict[(str, List[Dict[(str, Any)]])]"
                ],
                "html_contents": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "separate_sentences_and_others": {
            "name": "separate_sentences_and_others",
            "location": 140,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "html_content": [
                    "str"
                ],
                "separate_others": [
                    "bool"
                ]
            }
        },
        "pickup_content_from_html": {
            "name": "pickup_content_from_html",
            "location": 232,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "html_tag": [
                    "str"
                ],
                "soup": [
                    "bs4.BeautifulSoup"
                ],
                "cls": []
            }
        },
        "saving_annotated_corpus": {
            "name": "saving_annotated_corpus",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "annotated_contents": [
                    "List[Dict[(str, str)]]"
                ],
                "out_dir": [
                    "str"
                ],
                "cls_name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 296,
            "return": [],
            "arguments": {
                "html_dir": [
                    "str"
                ],
                "annotation_dir": [
                    "str"
                ],
                "class_name": [
                    "str"
                ],
                "out": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/scripts/make_dataset_from_corpus.py": {
        "return_ne_label": {
            "name": "return_ne_label",
            "location": 28,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "now_index": [
                    "int"
                ],
                "places": [
                    "Dict[(str, Any)]"
                ],
                "word_len": [
                    "int"
                ],
                "bioul": [
                    "bool"
                ]
            }
        },
        "request_morph_analysis_api": {
            "name": "request_morph_analysis_api",
            "location": 63,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ],
                "algo": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "get_annotated_label_info": {
            "name": "get_annotated_label_info",
            "location": 86,
            "return": [
                "List[Tuple[(str, int, int)]]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "get_mark_indexes_and_label": {
            "name": "get_mark_indexes_and_label",
            "location": 113,
            "return": [
                "Dict[(str, List[int])]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "mark": [
                    "str"
                ]
            }
        },
        "get_current_labeling_pos": {
            "name": "get_current_labeling_pos",
            "location": 135,
            "return": [
                "Tuple[(List[Any], List[Any])]"
            ],
            "arguments": {
                "stack_places": [
                    "List[Tuple[(str, int, int)]]"
                ],
                "sentence": [
                    "str"
                ]
            }
        },
        "annotation": {
            "name": "annotation",
            "location": 169,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "sentences": [
                    "List[str]"
                ],
                "algo": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "bioul": [
                    "bool"
                ],
                "char_level": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 260,
            "return": [],
            "arguments": {
                "corpus_path": [
                    "str"
                ],
                "out_dir": [
                    "str"
                ],
                "ksplit_num": [
                    "int"
                ],
                "bioul": [
                    "bool"
                ],
                "char_level": [
                    "bool"
                ],
                "morph_analysis": [
                    "str"
                ],
                "sudachim": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/scripts/morph_analysis_api.py": {
        "mecab": {
            "name": "mecab",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "mecab_neologd": {
            "name": "mecab_neologd",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "jumanpp": {
            "name": "jumanpp",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "sudachi": {
            "name": "sudachi",
            "location": 69,
            "return": [],
            "arguments": {}
        }
    },
    "Shinra-master/scripts/reformat_dataset.py": {
        "shape": {
            "name": "shape",
            "location": 13,
            "return": [],
            "arguments": {
                "line": [
                    "str"
                ],
                "parser": [
                    "str"
                ],
                "num": [
                    "int"
                ]
            }
        }
    },
    "Shinra-master/scripts/train_bilstmcrf.py": {
        "train": {
            "name": "train",
            "location": 48,
            "return": [],
            "arguments": {
                "dataset_dir": [
                    "str"
                ],
                "word_vec_path": [
                    "str"
                ],
                "epoch_size": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "rnn_hidden_size": [
                    "int"
                ],
                "es_patience": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "clip_grad_num": [],
                "learning_rate": [
                    "float"
                ],
                "pos_emb_dim": [
                    "int"
                ],
                "opt_func": [
                    "str"
                ],
                "rnn_type": [
                    "str"
                ],
                "char_emb": [
                    "str"
                ],
                "char_emb_dim": [
                    "int"
                ],
                "char_hidden_dim": [
                    "int"
                ],
                "model_name": [
                    "str"
                ],
                "saved_model": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/scripts/train_crf.py": {
        "train": {
            "name": "train",
            "location": 29,
            "return": [],
            "arguments": {
                "dataset_dir": [
                    "str"
                ],
                "word_length": [
                    "bool"
                ],
                "last_char": [
                    "bool"
                ],
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/scripts/train_nestedner.py": {
        "train": {
            "name": "train",
            "location": 43,
            "return": [],
            "arguments": {
                "dataset_dir": [
                    "str"
                ],
                "word_vec_path": [
                    "str"
                ],
                "epoch_size": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "rnn_hidden_size": [
                    "int"
                ],
                "es_patience": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "clip_grad_num": [],
                "learning_rate": [
                    "float"
                ],
                "pos_emb_dim": [
                    "int"
                ],
                "opt_func": [
                    "str"
                ],
                "rnn_type": [
                    "str"
                ],
                "char_emb": [
                    "str"
                ],
                "char_emb_dim": [
                    "int"
                ],
                "char_hidden_dim": [
                    "int"
                ],
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/shinra/__init__.py": {},
    "Shinra-master/shinra/bilstm_crf/char_encoder.py": {
        "CNNEncoder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "torch.Tensor"
                ],
                "embedding_dim": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "pad_idx": [
                    "int"
                ]
            }
        },
        "CNNEncoder.forward": {
            "name": "forward",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor"
                ]
            }
        },
        "BiLSTMEncoder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "torch.Tensor"
                ],
                "embedding_dim": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "pad_idx": [
                    "int"
                ]
            }
        },
        "BiLSTMEncoder.forward": {
            "name": "forward",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "torch.LongTensor"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/dataset.py": {
        "NestedNERDataset.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "text_file_dir": [
                    "str"
                ],
                "train_txt": [
                    "str"
                ],
                "dev_txt": [
                    "str"
                ],
                "test_txt": [
                    "str"
                ],
                "wordemb_path": [
                    "str"
                ],
                "word_min_freq": [
                    "int"
                ],
                "pos_emb_dim": [
                    "int"
                ],
                "char_emb_dim": [
                    "int"
                ],
                "char_hidden_dim": [
                    "int"
                ],
                "char_encoder": [
                    "nn.Module"
                ],
                "char_dropout_rate": [
                    "float"
                ],
                "use_char": [
                    "bool"
                ],
                "use_pos": [
                    "bool"
                ]
            }
        },
        "NestedNERDataset.get_batch": {
            "name": "get_batch",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "dataset_name": [
                    "str"
                ]
            }
        },
        "NestedNERDataset.get_embedding_dim": {
            "name": "get_embedding_dim",
            "location": 151,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDataset._random_embedding": {
            "name": "_random_embedding",
            "location": 165,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "vocab_size": [
                    "int"
                ],
                "embedding_dim": [
                    "int"
                ]
            }
        },
        "NestedNERDataset.get_batch_true_label": {
            "name": "get_batch_true_label",
            "location": 189,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "torchtext.data.batch"
                ],
                "nested": [
                    "int"
                ],
                "device": [
                    "str"
                ]
            }
        },
        "NestedNERDataset.to_vectors": {
            "name": "to_vectors",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "torch.Tensor"
                ],
                "char": [
                    "torch.Tensor"
                ],
                "pos": [
                    "torch.Tensor"
                ],
                "subpos": [
                    "torch.Tensor"
                ],
                "device": [
                    "str"
                ]
            }
        },
        "NestedNERDataset.wordid_to_sentence": {
            "name": "wordid_to_sentence",
            "location": 239,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "torch.Tensor"
                ]
            }
        },
        "NestedNERDataset.labelid_to_labels": {
            "name": "labelid_to_labels",
            "location": 251,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "List[int]"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/early_stopping.py": {
        "EarlyStopping.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "patience": [
                    "int"
                ]
            }
        },
        "EarlyStopping.decision_stop": {
            "name": "decision_stop",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "metrics": []
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/evaluator.py": {
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "BiLSTMCRF"
                ],
                "dataset": [
                    "NestedNERDataset"
                ],
                "model_path": [
                    "str"
                ],
                "use_gpu": [
                    "bool"
                ]
            }
        },
        "Evaluator.evaluate": {
            "name": "evaluate",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/model.py": {
        "BiLSTMCRF.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "num_labels": [
                    "int"
                ],
                "rnn_hidden_size": [
                    "int"
                ],
                "word_emb_dim": [
                    "int"
                ],
                "char_emb_dim": [
                    "int"
                ],
                "pos_emb_dim": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ]
            }
        },
        "BiLSTMCRF.forward": {
            "name": "forward",
            "location": 47,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "input_embed": [
                    "Tensor"
                ],
                "mask": [
                    "Tensor"
                ],
                "labels": [
                    "Tensor"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "BiLSTMCRF.predict": {
            "name": "predict",
            "location": 78,
            "return": [
                "Tuple[(bool, Tensor, Tensor, List[List[int]], Tensor)]"
            ],
            "arguments": {
                "self": [],
                "input_embed": [
                    "Tensor"
                ],
                "mask": [
                    "Tensor"
                ]
            }
        },
        "BiLSTMCRF.concat_embedding": {
            "name": "concat_embedding",
            "location": 94,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "BiLSTMCRF.load": {
            "name": "load",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "BiLSTMCRF"
                ],
                "dataset": [
                    "NestedNERDataset"
                ],
                "lr": [
                    "float"
                ],
                "cg": [
                    "float"
                ],
                "max_epoch": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "optalgo": [
                    "torch.optim.Optimizer"
                ],
                "save_path": [
                    "str"
                ]
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.save": {
            "name": "save",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/__init__.py": {},
    "Shinra-master/shinra/crf/dataset.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "target_class": [
                    "str"
                ],
                "is_inbracket": [
                    "bool"
                ],
                "word_length": [
                    "bool"
                ],
                "contain_last_char": [
                    "bool"
                ],
                "ws": [
                    "int"
                ]
            }
        },
        "Dataset.load": {
            "name": "load",
            "location": 43,
            "return": [
                "Dict[(str, Tuple[(List[List[Dict[(str, str)]]], List[List[str]])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.known_NEs": {
            "name": "known_NEs",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_sentences": {
            "name": "get_sentences",
            "location": 68,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "Dataset.get_labels": {
            "name": "get_labels",
            "location": 90,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "Dataset._japlabel_to_englabel": {
            "name": "_japlabel_to_englabel",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "Dataset._englabel_to_japlabel": {
            "name": "_englabel_to_japlabel",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "Dataset._preprocess_dataset": {
            "name": "_preprocess_dataset",
            "location": 143,
            "return": [
                "List[List[List[str]]]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "Dataset._get_features": {
            "name": "_get_features",
            "location": 163,
            "return": [
                "List[List[Dict[(str, str)]]]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "Dataset._detect_label_num": {
            "name": "_detect_label_num",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset._prepare_conv_label_pair": {
            "name": "_prepare_conv_label_pair",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/shinra/crf/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "algo": [
                    "str"
                ],
                "min_freq": [
                    "int"
                ],
                "all_states": [
                    "bool"
                ],
                "max_iter": [
                    "int"
                ],
                "epsilon": [
                    "float"
                ],
                "delta": [
                    "float"
                ]
            }
        },
        "Model.train": {
            "name": "train",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "features": [
                    "List[List[Dict[(str, Any)]]]"
                ],
                "labels": [
                    "List[List[str]]"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 47,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "Model.predict_all": {
            "name": "predict_all",
            "location": 56,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "List[List[Dict[(str, Any)]]]"
                ]
            }
        },
        "Model.label_types": {
            "name": "label_types",
            "location": 66,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.hyper_param_tune": {
            "name": "hyper_param_tune",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_features": [
                    "List[List[Dict[(str, Any)]]]"
                ],
                "train_labels": [
                    "List[List[str]]"
                ],
                "dev_features": [
                    "List[List[Dict[(str, Any)]]]"
                ],
                "dev_labels": [
                    "List[List[str]]"
                ]
            }
        }
    },
    "Shinra-master/shinra/crf/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Model"
                ],
                "dataset": [
                    "Dataset"
                ],
                "param_tune": [
                    "bool"
                ]
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.report": {
            "name": "report",
            "location": 41,
            "return": [
                "Dict[(str, Dict[(str, Dict[(str, float)])])]"
            ],
            "arguments": {
                "self": [],
                "show_flag": [
                    "bool"
                ]
            }
        }
    },
    "Shinra-master/shinra/crf/transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "ws": [
                    "int"
                ],
                "is_inbracket": [
                    "bool"
                ],
                "word_length": [
                    "bool"
                ],
                "contain_last_char": [
                    "bool"
                ],
                "label_num": [
                    "int"
                ]
            }
        },
        "Transformer.sentence2features": {
            "name": "sentence2features",
            "location": 27,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "morphs": [
                    "List[List[str]]"
                ]
            }
        },
        "Transformer._get_near_morphs": {
            "name": "_get_near_morphs",
            "location": 75,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "morphs": [
                    "List[List[str]]"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "Transformer._get_char_types": {
            "name": "_get_char_types",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "Transformer._get_pos_info": {
            "name": "_get_pos_info",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "morph": [
                    "List[str]"
                ]
            }
        },
        "Transformer._isInBracket": {
            "name": "_isInBracket",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "sentence": [
                    "List[str]"
                ],
                "idx": [
                    "int"
                ]
            }
        },
        "Transformer._char_type": {
            "name": "_char_type",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        },
        "Transformer.__hiragana": {
            "name": "__hiragana",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "Transformer.__katakana": {
            "name": "__katakana",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "Transformer.__kanji": {
            "name": "__kanji",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "Transformer.__double_byte_symbol": {
            "name": "__double_byte_symbol",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/shinra/crf/__init__.py": {},
    "Shinra-master/shinra/layered_bilstm_crf/char_encoder.py": {
        "CNNEncoder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "torch.Tensor"
                ],
                "embedding_dim": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "pad_idx": [
                    "int"
                ]
            }
        },
        "CNNEncoder.forward": {
            "name": "forward",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor"
                ]
            }
        },
        "BiLSTMEncoder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "torch.Tensor"
                ],
                "embedding_dim": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "pad_idx": [
                    "int"
                ]
            }
        },
        "BiLSTMEncoder.forward": {
            "name": "forward",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "torch.LongTensor"
                ]
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/dataset.py": {
        "NestedNERDataset.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "text_file_dir": [
                    "str"
                ],
                "train_txt": [
                    "str"
                ],
                "dev_txt": [
                    "str"
                ],
                "test_txt": [
                    "str"
                ],
                "wordemb_path": [
                    "str"
                ],
                "use_gpu": [
                    "bool"
                ],
                "word_min_freq": [
                    "int"
                ],
                "char_emb_dim": [
                    "int"
                ],
                "pos_emb_dim": [
                    "int"
                ]
            }
        },
        "NestedNERDataset.get_batch": {
            "name": "get_batch",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "dataset_name": [
                    "str"
                ]
            }
        },
        "NestedNERDataset.get_embedding_dim": {
            "name": "get_embedding_dim",
            "location": 129,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDataset._random_embedding": {
            "name": "_random_embedding",
            "location": 144,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "vocab_size": [
                    "int"
                ],
                "embedding_dim": [
                    "int"
                ]
            }
        },
        "NestedNERDataset.get_batch_true_label": {
            "name": "get_batch_true_label",
            "location": 168,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "torchtext.data.batch"
                ],
                "nested": [
                    "int"
                ]
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/model.py": {
        "NestedNERModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "num_labels": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "word_emb_dim": [
                    "int"
                ],
                "char_emb_dim": [
                    "int"
                ],
                "pos_emb_dim": [
                    "int"
                ],
                "pad_idx": [
                    "int"
                ],
                "other_idx": [
                    "int"
                ]
            }
        },
        "NestedNERModel.forward": {
            "name": "forward",
            "location": 55,
            "return": [
                "Tuple[(Tensor, bool, Tensor, Tensor, List[List[int]], Tensor)]"
            ],
            "arguments": {
                "self": [],
                "input_embed": [
                    "Tensor"
                ],
                "mask": [
                    "Tensor"
                ],
                "labels": [
                    "Tensor"
                ],
                "label_lens": [
                    "List[List[int]]"
                ]
            }
        },
        "NestedNERModel.predict": {
            "name": "predict",
            "location": 80,
            "return": [
                "Tuple[(bool, Tensor, Tensor, List[List[int]], Tensor)]"
            ],
            "arguments": {
                "self": [],
                "input_embed": [
                    "Tensor"
                ],
                "mask": [
                    "Tensor"
                ],
                "label_lens": [
                    "List[List[int]]"
                ]
            }
        },
        "NestedNERModel._forward": {
            "name": "_forward",
            "location": 104,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "input_embed": [
                    "Tensor"
                ],
                "mask": [
                    "Tensor"
                ],
                "labels": [
                    "Tensor"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "NestedNERModel._prepare_next_forward": {
            "name": "_prepare_next_forward",
            "location": 134,
            "return": [
                "Tuple[(bool, Tensor, Tensor, List[List[int]], Tensor)]"
            ],
            "arguments": {
                "self": [],
                "out_embed": [
                    "Tensor"
                ],
                "predicted_labels": [
                    "List[List[int]]"
                ],
                "label_lens": [
                    "List[List[int]]"
                ],
                "mask": [
                    "Tensor"
                ]
            }
        },
        "NestedNERModel._correct_predict": {
            "name": "_correct_predict",
            "location": 162,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [],
                "predicted_labels": [
                    "List[List[int]]"
                ]
            }
        },
        "NestedNERModel.first_input_embedding": {
            "name": "first_input_embedding",
            "location": 201,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "Tensor"
                ],
                "chars": [
                    "Tensor"
                ],
                "pos": [
                    "Tensor"
                ],
                "subpos": [
                    "Tensor"
                ]
            }
        },
        "NestedNERModel.merge_representation": {
            "name": "merge_representation",
            "location": 219,
            "return": [
                "Tuple[(Tensor, ...)]"
            ],
            "arguments": {
                "self": [],
                "bilstm_output": [
                    "Tensor"
                ],
                "merge_index": [
                    "Tensor"
                ],
                "label_lens": [
                    "List[List[int]]"
                ]
            }
        },
        "NestedNERModel.extend_label": {
            "name": "extend_label",
            "location": 256,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [],
                "predicted_labels": [
                    "Tensor"
                ],
                "label_lens": [
                    "List[List[int]]"
                ],
                "mask": [
                    "Tensor"
                ]
            }
        },
        "NestedNERModel.shorten_label": {
            "name": "shorten_label",
            "location": 304,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Tensor"
                ],
                "next_label_lens": [
                    "List[List[int]]"
                ]
            }
        },
        "NestedNERModel.make_merge_index": {
            "name": "make_merge_index",
            "location": 328,
            "return": [
                "Tuple[(Tensor, List[List[int]])]"
            ],
            "arguments": {
                "predicted_labels": [
                    "Tensor"
                ],
                "mask": [
                    "Tensor"
                ]
            }
        },
        "NestedNERModel._is_next_step": {
            "name": "_is_next_step",
            "location": 373,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "predicted_labels": [
                    "Tensor"
                ]
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "NestedNERModel"
                ],
                "dataset": [
                    "NestedNERDataset"
                ],
                "lr": [
                    "float"
                ],
                "cg": [
                    "float"
                ],
                "max_epoch": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "char_hidden_dim": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "optalgo": [
                    "torch.optim.Optimizer"
                ],
                "save_path": [
                    "str"
                ]
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.save": {
            "name": "save",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/__init__.py": {},
    "Shinra-master/tests/test_dataset.py": {
        "NestedNERDatasetTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_initialize_variables": {
            "name": "test_initialize_variables",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_get_batch": {
            "name": "test_get_batch",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_get_embedding_dim": {
            "name": "test_get_embedding_dim",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_random_embedding": {
            "name": "test_random_embedding",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/tests/test_model.py": {
        "NestedNERModelTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_correct_predict": {
            "name": "test_correct_predict",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_make_merge_index": {
            "name": "test_make_merge_index",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_merge_representation": {
            "name": "test_merge_representation",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_extend_label": {
            "name": "test_extend_label",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_shorten_label": {
            "name": "test_shorten_label",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_next_step": {
            "name": "test_next_step",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_forward": {
            "name": "test_forward",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/tests/test_trainer.py": {
        "TrainerTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_train": {
            "name": "test_train",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/tests/__init__.py": {}
}
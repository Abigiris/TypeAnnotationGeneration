{
    "SimSUSY-master/simsusy/abs_calculator.py": {
        "AbsCalculator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "AbsModel"
                ],
                "logger": [
                    "Optional[logging.Logger]"
                ]
            }
        },
        "AbsCalculator.write_output": {
            "name": "write_output",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ],
                "slha1": [
                    "bool"
                ]
            }
        },
        "AbsCalculator.calculate": {
            "name": "calculate",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsCalculator.to_message": {
            "name": "to_message",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Union[(str, Tuple[Union[(str, int, float)]])]"
                ]
            }
        },
        "AbsCalculator.add_error": {
            "name": "add_error",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "obj_slha": []
            }
        },
        "AbsCalculator.add_warning": {
            "name": "add_warning",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "obj_slha": []
            }
        }
    },
    "SimSUSY-master/simsusy/abs_model.py": {
        "AbsModel.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "AbsModel.blocks": {
            "name": "blocks",
            "location": 41,
            "return": [
                "yaslha.slha.BlocksDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsModel.block": {
            "name": "block",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": []
            }
        },
        "AbsModel.get_int": {
            "name": "get_int",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsModel.get_float": {
            "name": "get_float",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsModel.get_complex": {
            "name": "get_complex",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": []
            }
        },
        "AbsModel.mass": {
            "name": "mass",
            "location": 73,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int"
                ]
            }
        },
        "AbsModel.width": {
            "name": "width",
            "location": 76,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int"
                ]
            }
        },
        "AbsModel.br_list": {
            "name": "br_list",
            "location": 82,
            "return": [
                "Optional[MutableMapping[(Sequence[int], float)]]"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int"
                ]
            }
        },
        "AbsModel.set_mass": {
            "name": "set_mass",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ],
                "mass": [
                    "float"
                ]
            }
        },
        "AbsModel.set_matrix": {
            "name": "set_matrix",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": [],
                "m": [],
                "diagonal_only": []
            }
        },
        "AbsModel.set_complex_matrix": {
            "name": "set_complex_matrix",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": [],
                "m": [],
                "diagonal_only": []
            }
        },
        "AbsModel.get_matrix": {
            "name": "get_matrix",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": []
            }
        },
        "AbsModel.get_complex_matrix": {
            "name": "get_complex_matrix",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": []
            }
        },
        "AbsModel.remove_block": {
            "name": "remove_block",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_name": [
                    "str"
                ]
            }
        },
        "AbsModel.remove_value": {
            "name": "remove_value",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_name": [
                    "str"
                ],
                "key": [
                    "yaslha.line.KeyType"
                ]
            }
        },
        "AbsModel.write": {
            "name": "write",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ]
            }
        },
        "AbsModel.get_int_assert": {
            "name": "get_int_assert",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsModel.get_float_assert": {
            "name": "get_float_assert",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsModel.get_complex_assert": {
            "name": "get_complex_assert",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": []
            }
        },
        "AbsModel.get_matrix_assert": {
            "name": "get_matrix_assert",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": [],
                "default": []
            }
        },
        "AbsModel.get_complex_matrix_assert": {
            "name": "get_complex_matrix_assert",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "block_name": [],
                "default": []
            }
        }
    },
    "SimSUSY-master/simsusy/simsusy.py": {
        "simsusy_main": {
            "name": "simsusy_main",
            "location": 89,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "run": {
            "name": "run",
            "location": 103,
            "return": [],
            "arguments": {
                "context": [],
                "calculator": [],
                "input": [],
                "output": [],
                "v1": []
            }
        },
        "Calculators.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculators.is_valid": {
            "name": "is_valid",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "mod": [
                    "Any"
                ]
            }
        },
        "Calculators.__getitem__": {
            "name": "__getitem__",
            "location": 46,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Calculators.get": {
            "name": "get",
            "location": 49,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Calculators.guess": {
            "name": "guess",
            "location": 52,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Calculators.keys": {
            "name": "keys",
            "location": 72,
            "return": [
                "KeysView[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculators.values": {
            "name": "values",
            "location": 75,
            "return": [
                "ValuesView[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SimSUSY-master/simsusy/utility.py": {
        "is_tiny": {
            "name": "is_tiny",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "delta": [
                    "float"
                ]
            }
        },
        "sin2cos": {
            "name": "sin2cos",
            "location": 19,
            "return": [
                "float"
            ],
            "arguments": {
                "sin": [
                    "float"
                ]
            }
        },
        "cos2sin": {
            "name": "cos2sin",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "cos": [
                    "float"
                ]
            }
        },
        "tan2sin": {
            "name": "tan2sin",
            "location": 33,
            "return": [
                "float"
            ],
            "arguments": {
                "tan": [
                    "float"
                ]
            }
        },
        "tan2cos": {
            "name": "tan2cos",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "tan": [
                    "float"
                ]
            }
        },
        "sin2tan": {
            "name": "sin2tan",
            "location": 45,
            "return": [
                "float"
            ],
            "arguments": {
                "sin": [
                    "float"
                ]
            }
        },
        "cos2tan": {
            "name": "cos2tan",
            "location": 52,
            "return": [
                "float"
            ],
            "arguments": {
                "cos": [
                    "float"
                ]
            }
        },
        "tan2costwo": {
            "name": "tan2costwo",
            "location": 58,
            "return": [
                "float"
            ],
            "arguments": {
                "tan": [
                    "float"
                ]
            }
        },
        "tan2sintwo": {
            "name": "tan2sintwo",
            "location": 64,
            "return": [
                "float"
            ],
            "arguments": {
                "tan": [
                    "float"
                ]
            }
        },
        "tan2tantwo": {
            "name": "tan2tantwo",
            "location": 70,
            "return": [
                "float"
            ],
            "arguments": {
                "tan": [
                    "float"
                ]
            }
        },
        "chop_matrix": {
            "name": "chop_matrix",
            "location": 76,
            "return": [],
            "arguments": {
                "m": [],
                "threshold": []
            }
        },
        "is_real_matrix": {
            "name": "is_real_matrix",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "m": [
                    "Any"
                ]
            }
        },
        "is_diagonal_matrix": {
            "name": "is_diagonal_matrix",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "m": [
                    "Any"
                ]
            }
        },
        "autonne_takagi": {
            "name": "autonne_takagi",
            "location": 117,
            "return": [],
            "arguments": {
                "m": [],
                "try_real_mixing": []
            }
        },
        "singular_value_decomposition": {
            "name": "singular_value_decomposition",
            "location": 140,
            "return": [
                "Tuple[(RealMatrix, Matrix, Matrix)]"
            ],
            "arguments": {
                "m": [
                    "Matrix"
                ]
            }
        },
        "mass_diagonalization": {
            "name": "mass_diagonalization",
            "location": 154,
            "return": [
                "Tuple[(RealMatrix, Matrix)]"
            ],
            "arguments": {
                "m": [
                    "Matrix"
                ]
            }
        }
    },
    "SimSUSY-master/simsusy/__init__.py": {},
    "SimSUSY-master/simsusy/__main__.py": {},
    "SimSUSY-master/simsusy/mssm/abstract.py": {
        "AbsSMParameters.default_value": {
            "name": "default_value",
            "location": 19,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "AbsSMParameters.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "AbsSMParameters.sin_w_sq": {
            "name": "sin_w_sq",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.cos_w_sq": {
            "name": "cos_w_sq",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.mz": {
            "name": "mz",
            "location": 68,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.mw": {
            "name": "mw",
            "location": 71,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.gw": {
            "name": "gw",
            "location": 74,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.gy": {
            "name": "gy",
            "location": 77,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.gs": {
            "name": "gs",
            "location": 80,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.vev": {
            "name": "vev",
            "location": 83,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.mass": {
            "name": "mass",
            "location": 86,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int"
                ]
            }
        },
        "AbsSMParameters.mass_u": {
            "name": "mass_u",
            "location": 106,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.mass_d": {
            "name": "mass_d",
            "location": 109,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.mass_e": {
            "name": "mass_e",
            "location": 112,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.mass_n": {
            "name": "mass_n",
            "location": 115,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEWSBParameters.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "AbsEWSBParameters._count_unspecified_params": {
            "name": "_count_unspecified_params",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEWSBParameters.validate": {
            "name": "validate",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEWSBParameters.is_set": {
            "name": "is_set",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEWSBParameters.alpha": {
            "name": "alpha",
            "location": 186,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSMParameters.__init__.get": {
            "name": "get",
            "location": 33,
            "return": [
                "float"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "default_key": [
                    "str"
                ]
            }
        }
    },
    "SimSUSY-master/simsusy/mssm/input.py": {
        "MSSMInput.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSSMInput.modsel": {
            "name": "modsel",
            "location": 42,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "MSSMInput.sminputs": {
            "name": "sminputs",
            "location": 45,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "MSSMInput.mg": {
            "name": "mg",
            "location": 48,
            "return": [
                "complex"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "MSSMInput.ms2": {
            "name": "ms2",
            "location": 55,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "species": [
                    "S"
                ]
            }
        },
        "MSSMInput.a": {
            "name": "a",
            "location": 79,
            "return": [
                "Optional[Matrix]"
            ],
            "arguments": {
                "self": [],
                "species": [
                    "A"
                ]
            }
        },
        "MSSMInput.t": {
            "name": "t",
            "location": 91,
            "return": [
                "Optional[Matrix]"
            ],
            "arguments": {
                "self": [],
                "species": [
                    "A"
                ]
            }
        },
        "MSSMInput.vckm": {
            "name": "vckm",
            "location": 108,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSSMInput.upmns": {
            "name": "upmns",
            "location": 137,
            "return": [
                "ComplexMatrix"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SimSUSY-master/simsusy/mssm/library.py": {
        "FLV.qfv": {
            "name": "qfv",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FLV.lfv": {
            "name": "lfv",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "extpar": [],
                "slha2_input": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "extpar": [],
                "slha2_input": [],
                "out_a": [],
                "out_t": [],
                "out_y": []
            }
        }
    },
    "SimSUSY-master/simsusy/mssm/mg5_tree_calculator.py": {
        "Calculator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Input"
                ]
            }
        },
        "Calculator.write_output": {
            "name": "write_output",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "slha1": []
            }
        },
        "Calculator._load_modsel": {
            "name": "_load_modsel",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SimSUSY-master/simsusy/mssm/model.py": {
        "MSSMModel.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSSMModel.write": {
            "name": "write",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ]
            }
        },
        "MSSMModel._prepare_input_parameters": {
            "name": "_prepare_input_parameters",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SimSUSY-master/simsusy/mssm/tree_calculator.py": {
        "pow2": {
            "name": "pow2",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "v": [
                    "float"
                ]
            }
        },
        "SMParameters.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "SMParameters._sin_sq_cos_sq": {
            "name": "_sin_sq_cos_sq",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.sin_w_sq": {
            "name": "sin_w_sq",
            "location": 60,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.cos_w_sq": {
            "name": "cos_w_sq",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.mz": {
            "name": "mz",
            "location": 70,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.mw": {
            "name": "mw",
            "location": 74,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.gw": {
            "name": "gw",
            "location": 78,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.gy": {
            "name": "gy",
            "location": 82,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.gs": {
            "name": "gs",
            "location": 86,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.vev": {
            "name": "vev",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMParameters.mass": {
            "name": "mass",
            "location": 95,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int"
                ]
            }
        },
        "EWSBParameters.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "input_obj": [],
                "sm": []
            }
        },
        "EWSBParameters.calculate": {
            "name": "calculate",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EWSBParameters.alpha": {
            "name": "alpha",
            "location": 189,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EWSBParameters.yu": {
            "name": "yu",
            "location": 195,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EWSBParameters.yd": {
            "name": "yd",
            "location": 203,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EWSBParameters.ye": {
            "name": "ye",
            "location": 210,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EWSBParameters.yukawa": {
            "name": "yukawa",
            "location": 217,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "species": [
                    "A"
                ]
            }
        },
        "EWSBParameters.mass": {
            "name": "mass",
            "location": 227,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int"
                ]
            }
        },
        "Calculator.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Input"
                ]
            }
        },
        "Calculator.write_output": {
            "name": "write_output",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ],
                "slha1": [
                    "bool"
                ]
            }
        },
        "Calculator._load_modsel": {
            "name": "_load_modsel",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._load_sminputs": {
            "name": "_load_sminputs",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._load_ewsb_parameters": {
            "name": "_load_ewsb_parameters",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._check_other_input_validity": {
            "name": "_check_other_input_validity",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._check_cpv_flv_consistency": {
            "name": "_check_cpv_flv_consistency",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator.calculate": {
            "name": "calculate",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._prepare_info": {
            "name": "_prepare_info",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._prepare_sm_ewsb": {
            "name": "_prepare_sm_ewsb",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._calculate_softmasses": {
            "name": "_calculate_softmasses",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._calculate_higgses": {
            "name": "_calculate_higgses",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._calculate_neutralino": {
            "name": "_calculate_neutralino",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._calculate_chargino": {
            "name": "_calculate_chargino",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._calculate_gluino": {
            "name": "_calculate_gluino",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator._calculate_sfermion": {
            "name": "_calculate_sfermion",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator.convert_slha2_to_slha1": {
            "name": "convert_slha2_to_slha1",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calculator.__reorder_mixing_matrix": {
            "name": "__reorder_mixing_matrix",
            "location": 740,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "old_pids": [],
                "order": []
            }
        },
        "Calculator._reorder_mixing_matrix_in_flavor": {
            "name": "_reorder_mixing_matrix_in_flavor",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pids": [],
                "lighter_gen_reorder": []
            }
        },
        "Calculator._chop_mixing_matrix": {
            "name": "_chop_mixing_matrix",
            "location": 815,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "threshold": [],
                "keep_third_gen": []
            }
        },
        "Calculator._calculate_sfermion.dag": {
            "name": "dag",
            "location": 596,
            "return": [
                "T"
            ],
            "arguments": {
                "m": [
                    "T"
                ]
            }
        },
        "Calculator._calculate_sfermion.m_join": {
            "name": "m_join",
            "location": 599,
            "return": [
                "T"
            ],
            "arguments": {
                "m11": [
                    "T"
                ],
                "m12": [
                    "T"
                ],
                "m21": [
                    "T"
                ],
                "m22": [
                    "T"
                ]
            }
        },
        "Calculator._calculate_sfermion.mass_matrix": {
            "name": "mass_matrix",
            "location": 602,
            "return": [
                "RealMatrix"
            ],
            "arguments": {
                "right": [
                    "S"
                ]
            }
        },
        "Calculator._calculate_sfermion.sneutrino_mass": {
            "name": "sneutrino_mass",
            "location": 637,
            "return": [
                "ComplexMatrix"
            ],
            "arguments": {}
        },
        "Calculator._calculate_sfermion.prettify_matrix": {
            "name": "prettify_matrix",
            "location": 644,
            "return": [
                "RealMatrix"
            ],
            "arguments": {
                "m": [
                    "RealMatrix"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "Calculator._reorder_mixing_matrix_in_flavor.get_largest": {
            "name": "get_largest",
            "location": 787,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {}
        }
    },
    "SimSUSY-master/simsusy/mssm/__init__.py": {},
    "SimSUSY-master/simsusy/tests/test_abs_model.py": {
        "assert_almost_equal": {
            "name": "assert_almost_equal",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "actual": [
                    "Optional[float]"
                ],
                "expected": [
                    "float"
                ]
            }
        },
        "TestAbsModelInitialization.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelInitialization.test_init_with_pathlib_path": {
            "name": "test_init_with_pathlib_path",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelInitialization.test_init_with_path_string": {
            "name": "test_init_with_path_string",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelInitialization.test_init_with_slha_content": {
            "name": "test_init_with_slha_content",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelInitialization.test_init_with_non_existing_files": {
            "name": "test_init_with_non_existing_files",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_block_with_single_arg": {
            "name": "test_block_with_single_arg",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_block_with_two_args": {
            "name": "test_block_with_two_args",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_block_without_arg": {
            "name": "test_block_without_arg",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_block_with_unusual_content": {
            "name": "test_block_with_unusual_content",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_get": {
            "name": "test_get",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_mass": {
            "name": "test_mass",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_width": {
            "name": "test_width",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbsModelWithGenericInput.test_br_list": {
            "name": "test_br_list",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "SimSUSY-master/simsusy/tests/test_mssm_input.py": {
        "TestMSSMInputInitialization.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMSSMInputInitialization.test_init": {
            "name": "test_init",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "SimSUSY-master/simsusy/tests/test_utility.py": {
        "TestUtility.__assert_sub": {
            "name": "__assert_sub",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "msg": [],
                "a": [],
                "b": []
            }
        },
        "TestUtility.assert_matrix_almost_equal": {
            "name": "assert_matrix_almost_equal",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Matrix"
                ],
                "b": [
                    "Matrix"
                ]
            }
        },
        "TestUtility.assert_matrix_equal": {
            "name": "assert_matrix_equal",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Matrix"
                ],
                "b": [
                    "Matrix"
                ]
            }
        },
        "TestUtility.assert_all_real": {
            "name": "assert_all_real",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Matrix"
                ]
            }
        },
        "TestUtility.assert_matrix_unitary": {
            "name": "assert_matrix_unitary",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Matrix"
                ]
            }
        },
        "TestUtility.assert_sorted_in_absolute_value": {
            "name": "assert_sorted_in_absolute_value",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Matrix"
                ]
            }
        },
        "TestUtility.assert_sorted": {
            "name": "assert_sorted",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Matrix"
                ]
            }
        },
        "TestUtility.assert_all_non_negative": {
            "name": "assert_all_non_negative",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Matrix"
                ]
            }
        },
        "TestUtility.test_trigonometric_random": {
            "name": "test_trigonometric_random",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_trigonometric_edge": {
            "name": "test_trigonometric_edge",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_chop_matrix": {
            "name": "test_chop_matrix",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_autonne_takagi_real": {
            "name": "test_autonne_takagi_real",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_autonne_takagi_complex": {
            "name": "test_autonne_takagi_complex",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_singular_value_decomposition_real": {
            "name": "test_singular_value_decomposition_real",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_singular_value_decomposition_complex": {
            "name": "test_singular_value_decomposition_complex",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_mass_diagonalization_real": {
            "name": "test_mass_diagonalization_real",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtility.test_mass_diagonalization_complex": {
            "name": "test_mass_diagonalization_complex",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "SimSUSY-master/simsusy/tests/__init__.py": {}
}
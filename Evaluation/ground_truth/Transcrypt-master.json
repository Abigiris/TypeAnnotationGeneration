{
    "Transcrypt-master/setup.py": {
        "read": {
            "name": "read",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/__main__.py": {
        "main": {
            "name": "main",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "main.exitHandler": {
            "name": "exitHandler",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "main.setExitCode": {
            "name": "setExitCode",
            "location": 71,
            "return": [],
            "arguments": {
                "anExitCode": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/cyclejs_demo/cyclejs_demo.py": {
        "render": {
            "name": "render",
            "location": 7,
            "return": [],
            "arguments": {
                "toggled": []
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [],
            "arguments": {
                "drivers": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/cyclejs_demo/cyclejs_http_demo.py": {
        "render": {
            "name": "render",
            "location": 5,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {
                "sources": []
            }
        },
        "main.get_url_params": {
            "name": "get_url_params",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/cyclejs_demo/component_demos/isolated_bmi_slider/bmi.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {
                "sources": []
            }
        },
        "main.ils": {
            "name": "ils",
            "location": 15,
            "return": [],
            "arguments": {
                "propsS": []
            }
        },
        "main.bmi": {
            "name": "bmi",
            "location": 27,
            "return": [],
            "arguments": {
                "wh": []
            }
        },
        "main.render": {
            "name": "render",
            "location": 32,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/cyclejs_demo/component_demos/isolated_bmi_slider/components/labeled_slider.py": {
        "LabeledSlider": {
            "name": "LabeledSlider",
            "location": 3,
            "return": [],
            "arguments": {
                "sources": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/cyclejs_demo/component_demos/isolated_bmi_slider/components/snabbdom.py": {},
    "Transcrypt-master/transcrypt/demos/cyclejs_demo/component_demos/labeled_slider/labeled_slider.py": {
        "log": {
            "name": "log",
            "location": 12,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "LabeledSlider": {
            "name": "LabeledSlider",
            "location": 22,
            "return": [],
            "arguments": {
                "sources": []
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [],
            "arguments": {
                "sources": []
            }
        },
        "main.render": {
            "name": "render",
            "location": 66,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/cyclejs_demo/component_demos/labeled_slider/snabbdom.py": {},
    "Transcrypt-master/transcrypt/demos/d3js_demo/d3js_demo.py": {
        "Spawn.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": []
            }
        },
        "Spawn.mousemove": {
            "name": "mousemove",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spawn.mousedown": {
            "name": "mousedown",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spawn.tick": {
            "name": "tick",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spawn.restart": {
            "name": "restart",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spawn.mousedown.pushLink": {
            "name": "pushLink",
            "location": 36,
            "return": [],
            "arguments": {
                "target": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/hello/hello.py": {
        "SolarSystem.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SolarSystem.greet": {
            "name": "greet",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SolarSystem.explain": {
            "name": "explain",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/ios_app/ios_app.py": {
        "Dice.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dice.gotoTranscryptSite": {
            "name": "gotoTranscryptSite",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dice.roll": {
            "name": "roll",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "dice": []
            }
        },
        "Dice.rightSize": {
            "name": "rightSize",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dice.roll.frame": {
            "name": "frame",
            "location": 70,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/jquery_demo/jquery_demo.py": {
        "start": {
            "name": "start",
            "location": 3,
            "return": [],
            "arguments": {}
        },
        "start.changeColors": {
            "name": "changeColors",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/nodejs_demo/nodejs_demo.py": {
        "Demo.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Demo.serve": {
            "name": "serve",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/constants.py": {},
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/main.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/sibling.py": {
        "sibling_func": {
            "name": "sibling_func",
            "location": 4,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/sibling2.py": {
        "sibling2_func": {
            "name": "sibling2_func",
            "location": 5,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/testcontext.py": {
        "Test.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "title": []
            }
        },
        "Test.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.__exit__": {
            "name": "__exit__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "exc_tb": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/mymod/child.py": {
        "child_func": {
            "name": "child_func",
            "location": 4,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/mymod/__init__.py": {
        "mymod_func": {
            "name": "mymod_func",
            "location": 4,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/mymod/grandchildmod/grandchild.py": {
        "grandchild_func": {
            "name": "grandchild_func",
            "location": 4,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/mymod/grandchildmod/__init__.py": {
        "grandchildmod_func": {
            "name": "grandchildmod_func",
            "location": 4,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/parcel_demo/example/mymod2/main2.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/plotly_demo/plotly_demo.py": {
        "getZValues": {
            "name": "getZValues",
            "location": 75,
            "return": [],
            "arguments": {
                "xGrid": [],
                "yGrid": []
            }
        },
        "getRandoms": {
            "name": "getRandoms",
            "location": 200,
            "return": [],
            "arguments": {
                "aMax": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/pong/pong.py": {
        "Attribute.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "Attribute.reset": {
            "name": "reset",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.predict": {
            "name": "predict",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.interact": {
            "name": "interact",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.commit": {
            "name": "commit",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sprite.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "game": [],
                "width": [],
                "height": []
            }
        },
        "Sprite.install": {
            "name": "install",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sprite.reset": {
            "name": "reset",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "vX": [],
                "vY": [],
                "x": [],
                "y": []
            }
        },
        "Sprite.predict": {
            "name": "predict",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sprite.commit": {
            "name": "commit",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sprite.draw": {
            "name": "draw",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paddle.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "game": [],
                "index": []
            }
        },
        "Paddle.reset": {
            "name": "reset",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paddle.predict": {
            "name": "predict",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paddle.interact": {
            "name": "interact",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ball.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "Ball.reset": {
            "name": "reset",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ball.predict": {
            "name": "predict",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ball.speedUp": {
            "name": "speedUp",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "bat": []
            }
        },
        "Scoreboard.install": {
            "name": "install",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scoreboard.increment": {
            "name": "increment",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "playerIndex": []
            }
        },
        "Scoreboard.reset": {
            "name": "reset",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scoreboard.commit": {
            "name": "commit",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scoreboard.draw": {
            "name": "draw",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.install": {
            "name": "install",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.mouseOrTouch": {
            "name": "mouseOrTouch",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "down": []
            }
        },
        "Game.update": {
            "name": "update",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.scored": {
            "name": "scored",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "playerIndex": []
            }
        },
        "Game.commit": {
            "name": "commit",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.draw": {
            "name": "draw",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.resize": {
            "name": "resize",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.scaleX": {
            "name": "scaleX",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Game.scaleY": {
            "name": "scaleY",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Game.orthoX": {
            "name": "orthoX",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Game.orthoY": {
            "name": "orthoY",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Game.keydown": {
            "name": "keydown",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Game.keyup": {
            "name": "keyup",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/pysteroids_demo/audio.py": {
        "load": {
            "name": "load",
            "location": 5,
            "return": [],
            "arguments": {
                "player_element": [],
                "sourcefile": []
            }
        },
        "clip": {
            "name": "clip",
            "location": 19,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "loop": {
            "name": "loop",
            "location": 23,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "loop.reset_player": {
            "name": "reset_player",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/pysteroids_demo/controls.py": {
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.key_down": {
            "name": "key_down",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Keyboard.key_up": {
            "name": "key_up",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Keyboard.get": {
            "name": "get",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Keyboard.get_axis": {
            "name": "get_axis",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Keyboard.add_handler": {
            "name": "add_handler",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "handler": []
            }
        },
        "Keyboard.update": {
            "name": "update",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "interval": []
            }
        },
        "Keyboard.clear": {
            "name": "clear",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "ControlAxis.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "positive_key": [
                    "str"
                ],
                "negative_key": [
                    "str"
                ],
                "attack": [],
                "decay": [],
                "deadzone": []
            }
        },
        "ControlAxis.update": {
            "name": "update",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "keyboard": [
                    "Keyboard"
                ],
                "interval": [
                    "float"
                ]
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/pysteroids_demo/pysteroids.py": {
        "waiter": {
            "name": "waiter",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "done": {
            "name": "done",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "hfov": {
            "name": "hfov",
            "location": 28,
            "return": [],
            "arguments": {
                "vfov": [],
                "w": [],
                "h": []
            }
        },
        "Graphics.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "w": [],
                "h": [],
                "canvas": [],
                "fov": []
            }
        },
        "Graphics.render": {
            "name": "render",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graphics.add": {
            "name": "add",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Graphics.extent": {
            "name": "extent",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Audio.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "audio_path": []
            }
        },
        "Audio.fire": {
            "name": "fire",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Audio.explode": {
            "name": "explode",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "canvas": [],
                "fullscreen": []
            }
        },
        "Game.create_controls": {
            "name": "create_controls",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.setup": {
            "name": "setup",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.tick": {
            "name": "tick",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.handle_input": {
            "name": "handle_input",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Game.fire": {
            "name": "fire",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "vector": [],
                "momentum": [],
                "t": []
            }
        },
        "Game.kill": {
            "name": "kill",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.help_display": {
            "name": "help_display",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.update_score": {
            "name": "update_score",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "score": []
            }
        },
        "Game.create_controls.suppress_scroll": {
            "name": "suppress_scroll",
            "location": 129,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "Game.setup.rsign": {
            "name": "rsign",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "Game.kill.reappear": {
            "name": "reappear",
            "location": 288,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "Game.kill.clear_resetter": {
            "name": "clear_resetter",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "Game.help_display.display_stuff": {
            "name": "display_stuff",
            "location": 316,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "Game.help_display.done": {
            "name": "done",
            "location": 330,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/pysteroids_demo/units.py": {
        "Unit.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.get_position": {
            "name": "get_position",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.set_position": {
            "name": "set_position",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Unit.update": {
            "name": "update",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Unit.get_vis": {
            "name": "get_vis",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.set_vis": {
            "name": "set_vis",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Ship.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "keyboard": [],
                "game": []
            }
        },
        "Ship.thrust": {
            "name": "thrust",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "Ship.spin": {
            "name": "spin",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "Ship.update": {
            "name": "update",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Ship.get_heading": {
            "name": "get_heading",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Asteroid.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "radius": [],
                "pos": []
            }
        },
        "Asteroid.update": {
            "name": "update",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Bullet.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bullet.update": {
            "name": "update",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Bullet.reset": {
            "name": "reset",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bullet.get_position": {
            "name": "get_position",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/pysteroids_demo/utils.py": {
        "pad_wrap": {
            "name": "pad_wrap",
            "location": 6,
            "return": [],
            "arguments": {
                "min": [],
                "max": [],
                "val": []
            }
        },
        "set_limits": {
            "name": "set_limits",
            "location": 20,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "wrap": {
            "name": "wrap",
            "location": 28,
            "return": [],
            "arguments": {
                "obj": [
                    "three.Object3d"
                ]
            }
        },
        "clamp": {
            "name": "clamp",
            "location": 35,
            "return": [],
            "arguments": {
                "val": [],
                "low": [],
                "high": []
            }
        },
        "sign": {
            "name": "sign",
            "location": 39,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "now": {
            "name": "now",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "set_element": {
            "name": "set_element",
            "location": 53,
            "return": [],
            "arguments": {
                "id": [],
                "value": []
            }
        },
        "advance": {
            "name": "advance",
            "location": 101,
            "return": [],
            "arguments": {
                "cr": [],
                "value": []
            }
        },
        "coroutine": {
            "name": "coroutine",
            "location": 108,
            "return": [],
            "arguments": {
                "loop": [],
                "callback": []
            }
        },
        "timer": {
            "name": "timer",
            "location": 125,
            "return": [],
            "arguments": {
                "duration": [],
                "loop": [],
                "callback": []
            }
        },
        "AABB.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": [],
                "center": []
            }
        },
        "AABB.contains": {
            "name": "contains",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AABB.update": {
            "name": "update",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "FPSCounter.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "hud_element": []
            }
        },
        "FPSCounter.update": {
            "name": "update",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "coroutine.coroutine_generator": {
            "name": "coroutine_generator",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "timer.timer_coroutine": {
            "name": "timer_coroutine",
            "location": 131,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/pysteroids_demo/org/theodox/__init__.py": {
        "Vector._apply": {
            "name": "_apply",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        },
        "Vector.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.__add__": {
            "name": "__add__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__sub__": {
            "name": "__sub__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__mul__": {
            "name": "__mul__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__div__": {
            "name": "__div__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.length": {
            "name": "length",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.normalized": {
            "name": "normalized",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.__iter__": {
            "name": "__iter__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.map": {
            "name": "map",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Vector.__getitem__": {
            "name": "__getitem__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Vector.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.add": {
            "name": "add",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "Vector.sub": {
            "name": "sub",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "Vector.mul": {
            "name": "mul",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "Vector.div": {
            "name": "div",
            "location": 74,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "Vector.dot": {
            "name": "dot",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "left": [],
                "right": []
            }
        },
        "Vector.norm_dot": {
            "name": "norm_dot",
            "location": 82,
            "return": [],
            "arguments": {
                "Vector": [],
                "left": [],
                "right": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/pysteroids_demo/org/threejs/__init__.py": {
        "_ctor": {
            "name": "_ctor",
            "location": 4,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_ctor._c_": {
            "name": "_c_",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/react_demo/react_demo.py": {
        "h": {
            "name": "h",
            "location": 7,
            "return": [],
            "arguments": {
                "elm_type": [],
                "props": []
            }
        },
        "render": {
            "name": "render",
            "location": 11,
            "return": [],
            "arguments": {
                "react_element": [],
                "destination_id": [],
                "callback": []
            }
        },
        "useInterval": {
            "name": "useInterval",
            "location": 16,
            "return": [],
            "arguments": {
                "func": [],
                "delay": []
            }
        },
        "Hello": {
            "name": "Hello",
            "location": 36,
            "return": [],
            "arguments": {
                "props": []
            }
        },
        "useInterval.setup": {
            "name": "setup",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "Hello.updateCounter": {
            "name": "updateCounter",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/riot_demo/color.py": {
        "_recurse": {
            "name": "_recurse",
            "location": 7,
            "return": [],
            "arguments": {
                "col": [],
                "g": []
            }
        },
        "_col": {
            "name": "_col",
            "location": 45,
            "return": [],
            "arguments": {
                "col": []
            }
        },
        "cprint": {
            "name": "cprint",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/riot_demo/riot_demo.py": {
        "P.count_up": {
            "name": "count_up",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sample2.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "opts": []
            }
        },
        "Sample2.update": {
            "name": "update",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/riot_demo/riot_tag.py": {
        "RiotTag.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "opts": []
            }
        },
        "RiotTag._setup_tag": {
            "name": "_setup_tag",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "RiotTag.pp": {
            "name": "pp",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RiotTag._lifecycle_ev": {
            "name": "_lifecycle_ev",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "RiotTag.update": {
            "name": "update",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RiotTag.mount": {
            "name": "mount",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RiotTag.unmount": {
            "name": "unmount",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RiotTag.before_mount": {
            "name": "before_mount",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RiotTag.bind_vars": {
            "name": "bind_vars",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/terminal_demo/terminal_demo.py": {},
    "Transcrypt-master/transcrypt/demos/three_demo/three_demo.py": {
        "render": {
            "name": "render",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/demos/turtle_demos/mandala.py": {},
    "Transcrypt-master/transcrypt/demos/turtle_demos/mondrian.py": {
        "maybe": {
            "name": "maybe",
            "location": 13,
            "return": [],
            "arguments": {
                "bias": []
            }
        },
        "between": {
            "name": "between",
            "location": 16,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "originalColor": {
            "name": "originalColor",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "rect": {
            "name": "rect",
            "location": 29,
            "return": [],
            "arguments": {
                "xMin": [],
                "yMin": [],
                "xMax": [],
                "yMax": []
            }
        },
        "draw": {
            "name": "draw",
            "location": 49,
            "return": [],
            "arguments": {
                "xMin": [],
                "yMin": [],
                "xMax": [],
                "yMax": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/turtle_demos/snowflake.py": {
        "draw": {
            "name": "draw",
            "location": 5,
            "return": [],
            "arguments": {
                "length": []
            }
        }
    },
    "Transcrypt-master/transcrypt/demos/turtle_demos/star.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/hello/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/hello/testlet0.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/hello/testlet1.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/inspect/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/inspect/test_isclass.py": {
        "simple_function": {
            "name": "simple_function",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 9,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/logging/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/logging/basicConfig_tests.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/logging/buffering_tests.py": {
        "run": {
            "name": "run",
            "location": 45,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "DemoBufferingFormatter.formatHeader": {
            "name": "formatHeader",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "records": []
            }
        },
        "BetterBufferingHandler.flush": {
            "name": "flush",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuffering.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "test": []
            }
        },
        "TestBuffering.emit": {
            "name": "emit",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/logging/config_tests.py": {
        "run": {
            "name": "run",
            "location": 45,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "TestFilter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "modulo": []
            }
        },
        "TestFilter.filter": {
            "name": "filter",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "TestFormatter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "format": [],
                "datefmt": [],
                "style": []
            }
        },
        "TestFormatter.format": {
            "name": "format",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/logging/logger_tests.py": {
        "logger_basics": {
            "name": "logger_basics",
            "location": 8,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "logging_api_tests": {
            "name": "logging_api_tests",
            "location": 96,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "formatter_tests": {
            "name": "formatter_tests",
            "location": 162,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "console_test": {
            "name": "console_test",
            "location": 200,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "placeholder_testing": {
            "name": "placeholder_testing",
            "location": 246,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "run": {
            "name": "run",
            "location": 293,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/logging/utils.py": {
        "resetLogging": {
            "name": "resetLogging",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "TestHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "lvl": []
            }
        },
        "TestHandler.emit": {
            "name": "emit",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/re/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/re/basictests.py": {
        "convertMappingDict": {
            "name": "convertMappingDict",
            "location": 8,
            "return": [],
            "arguments": {
                "mdict": []
            }
        },
        "checkMatchProperties": {
            "name": "checkMatchProperties",
            "location": 25,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkRegexProperties": {
            "name": "checkRegexProperties",
            "location": 60,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "aValue": {
            "name": "aValue",
            "location": 99,
            "return": [],
            "arguments": {
                "flag": []
            }
        },
        "checkFlagsExist": {
            "name": "checkFlagsExist",
            "location": 103,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "escapeTests": {
            "name": "escapeTests",
            "location": 118,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "checkIgnoreCase": {
            "name": "checkIgnoreCase",
            "location": 123,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkSearchWithGroups": {
            "name": "checkSearchWithGroups",
            "location": 133,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkMatchOps": {
            "name": "checkMatchOps",
            "location": 162,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkMatchWithNamedGroups": {
            "name": "checkMatchWithNamedGroups",
            "location": 173,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkMatchWithGroups": {
            "name": "checkMatchWithGroups",
            "location": 238,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkCommentGroup": {
            "name": "checkCommentGroup",
            "location": 274,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkFullMatchOps": {
            "name": "checkFullMatchOps",
            "location": 302,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkFindAllOps": {
            "name": "checkFindAllOps",
            "location": 317,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkSplitOps": {
            "name": "checkSplitOps",
            "location": 324,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkSubOps": {
            "name": "checkSubOps",
            "location": 343,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkSyntaxErrors": {
            "name": "checkSyntaxErrors",
            "location": 354,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkFindIter": {
            "name": "checkFindIter",
            "location": 364,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkWithFlags": {
            "name": "checkWithFlags",
            "location": 391,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkConditionalGroups": {
            "name": "checkConditionalGroups",
            "location": 419,
            "return": [],
            "arguments": {
                "test": [],
                "flags": []
            }
        },
        "checkSubOps.dashrepl": {
            "name": "dashrepl",
            "location": 344,
            "return": [],
            "arguments": {
                "matchobj": []
            }
        },
        "checkMatchProperties.assignPos": {
            "name": "assignPos",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "checkMatchProperties.assignEndPos": {
            "name": "assignEndPos",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "checkMatchProperties.assignRe": {
            "name": "assignRe",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "checkMatchProperties.assignStr": {
            "name": "assignStr",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "checkMatchProperties.assignLastGroup": {
            "name": "assignLastGroup",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "checkMatchProperties.assignLastIndex": {
            "name": "assignLastIndex",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "checkRegexProperties.assignPattern": {
            "name": "assignPattern",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "checkRegexProperties.assignFlags": {
            "name": "assignFlags",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "checkRegexProperties.assignGroups": {
            "name": "assignGroups",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "checkRegexProperties.assignGroupIndex": {
            "name": "assignGroupIndex",
            "location": 91,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/re/basic_jsre.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/re/basic_pyre.py": {
        "run": {
            "name": "run",
            "location": 11,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/time/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/time/mult_time.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.check": {
            "name": "check",
            "location": 10,
            "return": [],
            "arguments": {
                "fmt": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/time/strptime.py": {
        "run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.check": {
            "name": "check",
            "location": 28,
            "return": [],
            "arguments": {
                "t": [],
                "fmt": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/time/testlet0.py": {
        "run": {
            "name": "run",
            "location": 7,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/arguments/__init__.py": {
        "run": {
            "name": "run",
            "location": 28,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "A.f": {
            "name": "f",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "autoTester": []
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "C.tricky": {
            "name": "tricky",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.f": {
            "name": "f",
            "location": 29,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "run.g": {
            "name": "g",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "run.f.f2": {
            "name": "f2",
            "location": 35,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/async_await_UNDER_CONSTRUCTION/__init__.py": {
        "waitAWhile": {
            "name": "waitAWhile",
            "location": 27,
            "return": [],
            "arguments": {
                "aTime": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/attribs_by_name/__init__.py": {
        "run": {
            "name": "run",
            "location": 7,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/builtin_super/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.show": {
            "name": "show",
            "location": 2,
            "return": [],
            "arguments": {}
        },
        "run.R.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "run.A.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "run.A.f": {
            "name": "f",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.A.g": {
            "name": "g",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.B.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "d": []
            }
        },
        "run.B.f": {
            "name": "f",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.B.h": {
            "name": "h",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.C.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "run.C.f": {
            "name": "f",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.D.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "d": []
            }
        },
        "run.D.f": {
            "name": "f",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.E.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "run.E.f": {
            "name": "f",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.E.g": {
            "name": "g",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.E.h": {
            "name": "h",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/byte_arrays/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.formatCheck": {
            "name": "formatCheck",
            "location": 15,
            "return": [],
            "arguments": {
                "aBytes": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/callable_test/__init__.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "run.func": {
            "name": "func",
            "location": 9,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "run.CallObj.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "run.CallObj.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.NonCallObj.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "run.NonCallObj.func": {
            "name": "func",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.NonOpovNonCallObj.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "run.NonOpovNonCallObj.other": {
            "name": "other",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "run.NonOpovNonCallObj._getC": {
            "name": "_getC",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.NonOpovNonCallObj._setC": {
            "name": "_setC",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/classes/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.mro": {
            "name": "mro",
            "location": 89,
            "return": [],
            "arguments": {
                "aClass": [],
                "result": []
            }
        },
        "run.A.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "run.A.show": {
            "name": "show",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "run.A.show2": {
            "name": "show2",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "run.B.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "run.B.show": {
            "name": "show",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "run.C.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.C.show": {
            "name": "show",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/complex_numbers/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/conditional_expressions/__init__.py": {
        "f": {
            "name": "f",
            "location": 1,
            "return": [],
            "arguments": {
                "x": [],
                "b": []
            }
        },
        "run": {
            "name": "run",
            "location": 4,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/control_structures/__init__.py": {
        "run": {
            "name": "run",
            "location": 12,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "ContextManagerExample.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextManagerExample.__enter__": {
            "name": "__enter__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextManagerExample.__exit__": {
            "name": "__exit__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/dashed_numbers/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/data_classes/__init__.py": {
        "getQ": {
            "name": "getQ",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 71,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "C.getV": {
            "name": "getV",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.setV": {
            "name": "setV",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "C.getW": {
            "name": "getW",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.setW": {
            "name": "setW",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "C.f": {
            "name": "f",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "autoTester": []
            }
        },
        "D.setP": {
            "name": "setP",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "D.getP": {
            "name": "getP",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/data_structures/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.p": {
            "name": "p",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/decorators/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.repeat3": {
            "name": "repeat3",
            "location": 4,
            "return": [],
            "arguments": {
                "bareFunc": []
            }
        },
        "run.repeatN": {
            "name": "repeatN",
            "location": 14,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "run.funcNoArg": {
            "name": "funcNoArg",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "run.funcArg": {
            "name": "funcArg",
            "location": 51,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "run.funcNoArg2": {
            "name": "funcNoArg2",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "run.funcArg2": {
            "name": "funcArg2",
            "location": 73,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "run.next": {
            "name": "next",
            "location": 84,
            "return": [],
            "arguments": {
                "bareFunc": []
            }
        },
        "run.repeat3.innerFunc": {
            "name": "innerFunc",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "run.repeatN.repeat": {
            "name": "repeat",
            "location": 15,
            "return": [],
            "arguments": {
                "bareFunc": []
            }
        },
        "run.Repeater.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "run.Repeater.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "bareFunc": []
            }
        },
        "run.next.innerFunc": {
            "name": "innerFunc",
            "location": 85,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "run.Number.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "run.Test.f": {
            "name": "f",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [],
                "x": [],
                "y": []
            }
        },
        "run.Test.g": {
            "name": "g",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.repeatN.repeat.innerFunc": {
            "name": "innerFunc",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "run.Repeater.__call__.innerFunc": {
            "name": "innerFunc",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/dictionaries/__init__.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/dict_comprehensions/__init__.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/__init__.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.chunks": {
            "name": "chunks",
            "location": 104,
            "return": [],
            "arguments": {
                "aList": [],
                "chunkLength": []
            }
        },
        "run.issue256": {
            "name": "issue256",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "run.filter_word": {
            "name": "filter_word",
            "location": 254,
            "return": [],
            "arguments": {
                "word0": [],
                "word1": []
            }
        },
        "run.foo": {
            "name": "foo",
            "location": 457,
            "return": [],
            "arguments": {}
        },
        "run.SortTest.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.SortTest.sort": {
            "name": "sort",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.issue256.f1": {
            "name": "f1",
            "location": 210,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "run.issue256.f2": {
            "name": "f2",
            "location": 213,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "run.issue256.f3": {
            "name": "f3",
            "location": 216,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "run.issue256.f4": {
            "name": "f4",
            "location": 219,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "run.Vector.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Vector.__iter__": {
            "name": "__iter__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Vector.__add__": {
            "name": "__add__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Vector.__str__": {
            "name": "__str__",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Example.run": {
            "name": "run",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Test398.method1": {
            "name": "method1",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Test398.method2": {
            "name": "method2",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Foo.__len__": {
            "name": "__len__",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Foo.__getitem__": {
            "name": "__getitem__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "run.SortTest.__init__.randomWord": {
            "name": "randomWord",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "run.issue256.C.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue387/__init__.py": {
        "run387": {
            "name": "run387",
            "location": 4,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue387/test1/test2.py": {
        "C.f": {
            "name": "f",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.f.g": {
            "name": "g",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue387/test1/__init__.py": {
        "getReport": {
            "name": "getReport",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/a.py": {
        "f1": {
            "name": "f1",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/sub1.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/sub3.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/__init__.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue55/sub2/__init__.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue559/__init__.py": {
        "run559": {
            "name": "run559",
            "location": 13,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue559/mylib/mylib.py": {
        "mylibHello": {
            "name": "mylibHello",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "mylibClass.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "autoTester": []
            }
        },
        "mylibClass.checkSymbols": {
            "name": "checkSymbols",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_issues/issue559/mylib/__init__.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_pulls/__init__.py": {
        "run": {
            "name": "run",
            "location": 35,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "run.brackets": {
            "name": "brackets",
            "location": 48,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_pulls/pull575_reexport_modules/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_pulls/pull575_reexport_modules/reexporter/__init__.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_pulls/pull575_reexport_modules/reexporter/html5/ext.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_pulls/pull575_reexport_modules/reexporter/html5/html5.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/div_pulls/pull575_reexport_modules/reexporter/html5/__init__.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/docstrings/__init__.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.f": {
            "name": "f",
            "location": 9,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "run.C.g": {
            "name": "g",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "q": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/exceptions/__init__.py": {
        "test1": {
            "name": "test1",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test2": {
            "name": "test2",
            "location": 22,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run": {
            "name": "run",
            "location": 32,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.test3": {
            "name": "test3",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/executable_comments/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/extended_slices/__init__.py": {
        "indices": {
            "name": "indices",
            "location": 4,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "Test.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "autoTester": []
            }
        },
        "Test.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Test.__setitem__": {
            "name": "__setitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/fstrings/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/general_functions/__init__.py": {
        "run": {
            "name": "run",
            "location": 17,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.__len__": {
            "name": "__len__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.generator1": {
            "name": "generator1",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "run.generator2": {
            "name": "generator2",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "run.generator3": {
            "name": "generator3",
            "location": 94,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/globals_function/sub.py": {
        "f": {
            "name": "f",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 17,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/globals_function/__init__.py": {
        "f": {
            "name": "f",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 19,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/indices_and_slices/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/iterators_and_generators/__init__.py": {
        "exhaustableGenerator": {
            "name": "exhaustableGenerator",
            "location": 26,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "run": {
            "name": "run",
            "location": 30,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "Iterable.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "Iterable.__iter__": {
            "name": "__iter__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Iterator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "Iterator.__next__": {
            "name": "__next__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Iterator.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.test0": {
            "name": "test0",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "run.test1": {
            "name": "test1",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "run.subGenerator": {
            "name": "subGenerator",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "run.mainGenerator": {
            "name": "mainGenerator",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "run.subCoroutine": {
            "name": "subCoroutine",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "run.mainCoroutine": {
            "name": "mainCoroutine",
            "location": 127,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/lambda_functions/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.f": {
            "name": "f",
            "location": 5,
            "return": [],
            "arguments": {
                "list0": [],
                "list1": [],
                "aFunc": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/list_comprehensions/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/local_classes/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.f": {
            "name": "f",
            "location": 33,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "run.A.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "run.A.tell": {
            "name": "tell",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.A.B.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "run.A.B.tell": {
            "name": "tell",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.f.G.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "run.f.G.tell": {
            "name": "tell",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.A.B.C.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "run.A.B.C.tell": {
            "name": "tell",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.f.G.H.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "run.f.G.H.tell": {
            "name": "tell",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/metaclasses/__init__.py": {
        "run": {
            "name": "run",
            "location": 50,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "UppercaserMeta.__new__": {
            "name": "__new__",
            "location": 4,
            "return": [],
            "arguments": {
                "meta": [],
                "name": [],
                "bases": [],
                "attribs": []
            }
        },
        "Animal.move": {
            "name": "move",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Plant.grow": {
            "name": "grow",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stone.be": {
            "name": "be",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/method_and_class_decorators/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.method_decorator": {
            "name": "method_decorator",
            "location": 36,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "run.method_decorator2": {
            "name": "method_decorator2",
            "location": 44,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "run.multiplier": {
            "name": "multiplier",
            "location": 52,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "run.classmethod_decorator": {
            "name": "classmethod_decorator",
            "location": 61,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "run.class_decorator": {
            "name": "class_decorator",
            "location": 69,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "run.adecorator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.adecorator.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "run.method_decorator.inner_decorator": {
            "name": "inner_decorator",
            "location": 37,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "run.method_decorator2.inner_decorator": {
            "name": "inner_decorator",
            "location": 45,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "run.multiplier.inner_decorator": {
            "name": "inner_decorator",
            "location": 53,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "run.classmethod_decorator.wrapper": {
            "name": "wrapper",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "run.class_decorator.wrapper": {
            "name": "wrapper",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "run.MyClass.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.MyClass.get_greetings": {
            "name": "get_greetings",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.MyClass.mymethod": {
            "name": "mymethod",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.MyClass.number": {
            "name": "number",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "run.MyClass.myclassmethod": {
            "name": "myclassmethod",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "run.MyClass.mystaticmethod": {
            "name": "mystaticmethod",
            "location": 126,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "run.MyClass.simple_property": {
            "name": "simple_property",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "run.MyClass.run": {
            "name": "run",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.adecorator.__call__.wrapper": {
            "name": "wrapper",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "run.method_decorator.inner_decorator.wrapper": {
            "name": "wrapper",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.method_decorator2.inner_decorator.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.multiplier.inner_decorator.wrapper": {
            "name": "wrapper",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "run.MyClass.InnerClass.mymethod": {
            "name": "mymethod",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.MyClass.InnerClass.myclassmethod": {
            "name": "myclassmethod",
            "location": 89,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "run.MyClass.InnerClass.mystaticmethod": {
            "name": "mystaticmethod",
            "location": 94,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "run.MyClass.InnerClass.inner_property": {
            "name": "inner_property",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod3.py": {
        "mod3GetTwoHundred": {
            "name": "mod3GetTwoHundred",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod4.py": {
        "mod4Add2FromMod5": {
            "name": "mod4Add2FromMod5",
            "location": 3,
            "return": [],
            "arguments": {
                "variable": []
            }
        },
        "mod4Add1": {
            "name": "mod4Add1",
            "location": 6,
            "return": [],
            "arguments": {
                "variable": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod5.py": {
        "mod5Add2": {
            "name": "mod5Add2",
            "location": 3,
            "return": [],
            "arguments": {
                "variable": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/__init__.py": {
        "run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod1/__init__.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/mod111.py": {
        "A.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "A.f": {
            "name": "f",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/mod112.py": {
        "f": {
            "name": "f",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/__init__.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod2/mod21.py": {
        "f": {
            "name": "f",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod2/mod22.py": {
        "B.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/modules/mod2/__init__.py": {
        "f": {
            "name": "f",
            "location": 1,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/module_builtin/__init__.py": {
        "canonizeString": {
            "name": "canonizeString",
            "location": 5,
            "return": [],
            "arguments": {
                "aString": []
            }
        },
        "canonizeStringList": {
            "name": "canonizeStringList",
            "location": 11,
            "return": [],
            "arguments": {
                "stringList": []
            }
        },
        "run": {
            "name": "run",
            "location": 14,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/module_cmath/__init__.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/module_collections/__init__.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/module_datetime/__init__.py": {
        "fix_time": {
            "name": "fix_time",
            "location": 5,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "run": {
            "name": "run",
            "location": 12,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/module_itertools/__init__.py": {
        "fibonacci": {
            "name": "fibonacci",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 14,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.add": {
            "name": "add",
            "location": 21,
            "return": [],
            "arguments": {
                "total": [],
                "element": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/module_math/__init__.py": {
        "_check": {
            "name": "_check",
            "location": 3,
            "return": [],
            "arguments": {
                "nr": [],
                "autoTester": []
            }
        },
        "run": {
            "name": "run",
            "location": 11,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/module_unicodedata/__init__.py": {
        "run": {
            "name": "run",
            "location": 6,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/nonlocals/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.f": {
            "name": "f",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/operator_overloading/__init__.py": {
        "g": {
            "name": "g",
            "location": 90,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "run": {
            "name": "run",
            "location": 94,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "nRows": [],
                "nCols": [],
                "elements": []
            }
        },
        "Matrix.__matmul__": {
            "name": "__matmul__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__imatmul__": {
            "name": "__imatmul__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__mul__": {
            "name": "__mul__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__rmul__": {
            "name": "__rmul__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "Matrix.__imul__": {
            "name": "__imul__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__add__": {
            "name": "__add__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__getitem__": {
            "name": "__getitem__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Matrix.__setitem__": {
            "name": "__setitem__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "Matrix.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__floordiv__": {
            "name": "__floordiv__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__truediv__": {
            "name": "__truediv__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Functor.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "factor": []
            }
        },
        "Functor.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "run.Bitwise.__lshift__": {
            "name": "__lshift__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__rlshift__": {
            "name": "__rlshift__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__rshift__": {
            "name": "__rshift__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__rrshift__": {
            "name": "__rrshift__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__or__": {
            "name": "__or__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__ror__": {
            "name": "__ror__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__xor__": {
            "name": "__xor__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__rxor__": {
            "name": "__rxor__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__and__": {
            "name": "__and__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.Bitwise.__rand__": {
            "name": "__rand__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "run.A.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/properties/__init__.py": {
        "run": {
            "name": "run",
            "location": 60,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "A.getX": {
            "name": "getX",
            "location": 3,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.setX": {
            "name": "setX",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "A.getY": {
            "name": "getY",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.setY": {
            "name": "setY",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "A.getY2": {
            "name": "getY2",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.setY2": {
            "name": "setY2",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "A.getT": {
            "name": "getT",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.setT": {
            "name": "setT",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "A.getU": {
            "name": "getU",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.setU": {
            "name": "setU",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "B.getZ": {
            "name": "getZ",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.setZ": {
            "name": "setZ",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "C.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.getW": {
            "name": "getW",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.setW": {
            "name": "setW",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/proxies/__init__.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.CodedStore.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.CodedStore.__setattr__": {
            "name": "__setattr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "message": []
            }
        },
        "run.CodedStore.__getattr__": {
            "name": "__getattr__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.CodedStore.peek": {
            "name": "peek",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.A.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.B.__getattr__": {
            "name": "__getattr__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.C.__setattr__": {
            "name": "__setattr__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "run.Element.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Element.sayBye": {
            "name": "sayBye",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Wrapper.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "run.Wrapper.__setattr__": {
            "name": "__setattr__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "run.Wrapper.__getattr__": {
            "name": "__getattr__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "run.Wrapper.sayHello": {
            "name": "sayHello",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/reprtest/__init__.py": {
        "run": {
            "name": "run",
            "location": 2,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "run.Test1.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "run.Test1.__str__": {
            "name": "__str__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Test1.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Test2.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "run.Test2.__repr__": {
            "name": "__repr__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Test2.__str__": {
            "name": "__str__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Test3.__str__": {
            "name": "__str__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.Test4.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "run.Test4.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/set_comprehensions/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/simple_and_augmented_assignment/__init__.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.f": {
            "name": "f",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/string_format/__init__.py": {
        "run": {
            "name": "run",
            "location": 2,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.B.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.B.__format__": {
            "name": "__format__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "fmt_spec": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/truthyness/__init__.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.B.__bool__": {
            "name": "__bool__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.C.__bool__": {
            "name": "__bool__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.C.__len__": {
            "name": "__len__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.D.__len__": {
            "name": "__len__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run.E.__len__": {
            "name": "__len__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/transcrypt/tuple_assignment/__init__.py": {
        "run": {
            "name": "run",
            "location": 1,
            "return": [],
            "arguments": {
                "autoTester": []
            }
        },
        "run.f": {
            "name": "f",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "run.g": {
            "name": "g",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/warnings/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/warnings/basic_tests.py": {
        "run": {
            "name": "run",
            "location": 37,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "TestHandler.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "test": [],
                "level": []
            }
        },
        "TestHandler.emit": {
            "name": "emit",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/__future__/autotest.py": {},
    "Transcrypt-master/transcrypt/development/automated_tests/__future__/division.py": {
        "_check": {
            "name": "_check",
            "location": 3,
            "return": [],
            "arguments": {
                "x": [],
                "test": []
            }
        },
        "run": {
            "name": "run",
            "location": 18,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/__future__/generators.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/__future__/nested_scopes.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "run.foo": {
            "name": "foo",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "run.foo.bar": {
            "name": "bar",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/__future__/print_function.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/__future__/unicode_literals.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/automated_tests/__future__/with_statement.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "SimpleWith.__enter__": {
            "name": "__enter__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleWith.__exit__": {
            "name": "__exit__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/benchmarks/pystone/pystone.py": {
        "clock": {
            "name": "clock",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 66,
            "return": [],
            "arguments": {
                "loops": []
            }
        },
        "pystones": {
            "name": "pystones",
            "location": 72,
            "return": [],
            "arguments": {
                "loops": []
            }
        },
        "Proc0": {
            "name": "Proc0",
            "location": 92,
            "return": [],
            "arguments": {
                "loops": []
            }
        },
        "Proc1": {
            "name": "Proc1",
            "location": 150,
            "return": [],
            "arguments": {
                "PtrParIn": []
            }
        },
        "Proc2": {
            "name": "Proc2",
            "location": 166,
            "return": [],
            "arguments": {
                "IntParIO": []
            }
        },
        "Proc3": {
            "name": "Proc3",
            "location": 177,
            "return": [],
            "arguments": {
                "PtrParOut": []
            }
        },
        "Proc4": {
            "name": "Proc4",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "Proc5": {
            "name": "Proc5",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "Proc6": {
            "name": "Proc6",
            "location": 201,
            "return": [],
            "arguments": {
                "EnumParIn": []
            }
        },
        "Proc7": {
            "name": "Proc7",
            "location": 220,
            "return": [],
            "arguments": {
                "IntParI1": [],
                "IntParI2": []
            }
        },
        "Proc8": {
            "name": "Proc8",
            "location": 225,
            "return": [],
            "arguments": {
                "Array1Par": [],
                "Array2Par": [],
                "IntParI1": [],
                "IntParI2": []
            }
        },
        "Func1": {
            "name": "Func1",
            "location": 238,
            "return": [],
            "arguments": {
                "CharPar1": [],
                "CharPar2": []
            }
        },
        "Func2": {
            "name": "Func2",
            "location": 246,
            "return": [],
            "arguments": {
                "StrParI1": [],
                "StrParI2": []
            }
        },
        "Func3": {
            "name": "Func3",
            "location": 263,
            "return": [],
            "arguments": {
                "EnumParIn": []
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "PtrComp": [],
                "Discr": [],
                "EnumComp": [],
                "IntComp": [],
                "StringComp": []
            }
        },
        "Record.copy": {
            "name": "copy",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/benchmarks/pystone/pystone_orig.py": {
        "main": {
            "name": "main",
            "location": 60,
            "return": [],
            "arguments": {
                "loops": []
            }
        },
        "pystones": {
            "name": "pystones",
            "location": 67,
            "return": [],
            "arguments": {
                "loops": []
            }
        },
        "Proc0": {
            "name": "Proc0",
            "location": 79,
            "return": [],
            "arguments": {
                "loops": []
            }
        },
        "Proc1": {
            "name": "Proc1",
            "location": 137,
            "return": [],
            "arguments": {
                "PtrParIn": []
            }
        },
        "Proc2": {
            "name": "Proc2",
            "location": 153,
            "return": [],
            "arguments": {
                "IntParIO": []
            }
        },
        "Proc3": {
            "name": "Proc3",
            "location": 164,
            "return": [],
            "arguments": {
                "PtrParOut": []
            }
        },
        "Proc4": {
            "name": "Proc4",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "Proc5": {
            "name": "Proc5",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "Proc6": {
            "name": "Proc6",
            "location": 188,
            "return": [],
            "arguments": {
                "EnumParIn": []
            }
        },
        "Proc7": {
            "name": "Proc7",
            "location": 207,
            "return": [],
            "arguments": {
                "IntParI1": [],
                "IntParI2": []
            }
        },
        "Proc8": {
            "name": "Proc8",
            "location": 212,
            "return": [],
            "arguments": {
                "Array1Par": [],
                "Array2Par": [],
                "IntParI1": [],
                "IntParI2": []
            }
        },
        "Func1": {
            "name": "Func1",
            "location": 225,
            "return": [],
            "arguments": {
                "CharPar1": [],
                "CharPar2": []
            }
        },
        "Func2": {
            "name": "Func2",
            "location": 233,
            "return": [],
            "arguments": {
                "StrParI1": [],
                "StrParI2": []
            }
        },
        "Func3": {
            "name": "Func3",
            "location": 250,
            "return": [],
            "arguments": {
                "EnumParIn": []
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "PtrComp": [],
                "Discr": [],
                "EnumComp": [],
                "IntComp": [],
                "StringComp": []
            }
        },
        "Record.copy": {
            "name": "copy",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "error": {
            "name": "error",
            "location": 257,
            "return": [],
            "arguments": {
                "msg": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/async_await/test.py": {
        "waitAWhile": {
            "name": "waitAWhile",
            "location": 39,
            "return": [],
            "arguments": {
                "aTime": [],
                "asio": []
            }
        },
        "C.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/dyn_units/animals/animals.py": {
        "find": {
            "name": "find",
            "location": 5,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Animal.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "food": [],
                "sound": []
            }
        },
        "Animal.speak": {
            "name": "speak",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Animal.feed": {
            "name": "feed",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Animal.greet": {
            "name": "greet",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/dyn_units/animals/animals_submodule.py": {
        "getTaxoTag": {
            "name": "getTaxoTag",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/dyn_units/animals/cats.py": {
        "Cat.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/dyn_units/animals/cats_submodule.py": {
        "getTaxoTag": {
            "name": "getTaxoTag",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/dyn_units/animals/dogs.py": {
        "Dog.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/dyn_units/animals/dogs_submodule.py": {
        "getTaxoTag": {
            "name": "getTaxoTag",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/executable_comments/test.py": {
        "__pragma__": {
            "name": "__pragma__",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/import_export_aliases/test.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/import_export_aliases/test-modules-b/__init__.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/import_export_aliases/test.modules.a/__init__.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/incidental_tests/indirect_import_error/main.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/incidental_tests/indirect_import_error/module1.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/incidental_tests/indirect_import_error/module2.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/incidental_tests/indirect_import_error/module3.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/incidental_tests/object_to_str_default/test.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/incidental_tests/sourcemap_else/test_sourcemap_else.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/jscall/test.py": {
        "A.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "A.f": {
            "name": "f",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "A.g": {
            "name": "g",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/module_logging/ajaxlogclient.py": {
        "setupLogger": {
            "name": "setupLogger",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "logPeriodic": {
            "name": "logPeriodic",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "HTMLHandler.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "elemId": []
            }
        },
        "HTMLHandler.emit": {
            "name": "emit",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/module_logging/ajaxlogserver.py": {
        "setup_options": {
            "name": "setup_options",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "reqHandler.print_log": {
            "name": "print_log",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "qdata": []
            }
        },
        "reqHandler.do_GET": {
            "name": "do_GET",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "reqHandler.do_POST": {
            "name": "do_POST",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "reqHandler.do_OPTIONS": {
            "name": "do_OPTIONS",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/module_random/module_random.py": {
        "output": {
            "name": "output",
            "location": 5,
            "return": [],
            "arguments": {
                "any": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/static_types/api_test.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/static_types/mod1.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/static_types/static_types.py": {
        "fib": {
            "name": "fib",
            "location": 10,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.test": {
            "name": "test",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/static_types/mod2/__init__.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "str"
                ]
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/transcrypt_and_python_results_differ/results.py": {},
    "Transcrypt-master/transcrypt/development/manual_tests/transcrypt_only/transcrypt_only.py": {
        "output": {
            "name": "output",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "Tolerant.f": {
            "name": "f",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Tolerant.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tolerant.g": {
            "name": "g",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/manual_tests/xtrans/test.py": {},
    "Transcrypt-master/transcrypt/development/shipment/shipment_test.py": {
        "getAbsPath": {
            "name": "getAbsPath",
            "location": 133,
            "return": [],
            "arguments": {
                "relPath": []
            }
        },
        "test": {
            "name": "test",
            "location": 163,
            "return": [],
            "arguments": {
                "relSourcePrepath": [],
                "run": [],
                "extraSwitches": [],
                "outputPrename": [],
                "nodeJs": [],
                "parcelJs": [],
                "build": [],
                "pause": [],
                "needsAttention": []
            }
        },
        "CommandArgs.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserController.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserController.waitForNewTab": {
            "name": "waitForNewTab",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserController.open": {
            "name": "open",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "run": []
            }
        }
    },
    "Transcrypt-master/transcrypt/development/shipment/upload_all.py": {
        "getAbsPath": {
            "name": "getAbsPath",
            "location": 8,
            "return": [],
            "arguments": {
                "rootDir": [],
                "relPath": []
            }
        },
        "copyWebsite": {
            "name": "copyWebsite",
            "location": 11,
            "return": [],
            "arguments": {
                "projRelPath": [],
                "webRelPath": [],
                "static": [],
                "subdirs": []
            }
        }
    },
    "Transcrypt-master/transcrypt/docs/code/classes.py": {
        "A.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "A.show": {
            "name": "show",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "B.show": {
            "name": "show",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "C.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "C.show": {
            "name": "show",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        }
    },
    "Transcrypt-master/transcrypt/docs/sphinx/conf.py": {},
    "Transcrypt-master/transcrypt/modules/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/cmath/__init__.py": {
        "phase": {
            "name": "phase",
            "location": 4,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "polar": {
            "name": "polar",
            "location": 7,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "rect": {
            "name": "rect",
            "location": 10,
            "return": [],
            "arguments": {
                "r": [],
                "phi": []
            }
        },
        "exp": {
            "name": "exp",
            "location": 15,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "log": {
            "name": "log",
            "location": 18,
            "return": [],
            "arguments": {
                "x": [],
                "base": []
            }
        },
        "log10": {
            "name": "log10",
            "location": 25,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sqrt": {
            "name": "sqrt",
            "location": 28,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sin": {
            "name": "sin",
            "location": 33,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "cos": {
            "name": "cos",
            "location": 36,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "tan": {
            "name": "tan",
            "location": 39,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "asin": {
            "name": "asin",
            "location": 42,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "acos": {
            "name": "acos",
            "location": 45,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "atan": {
            "name": "atan",
            "location": 48,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sinh": {
            "name": "sinh",
            "location": 51,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "cosh": {
            "name": "cosh",
            "location": 54,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "tanh": {
            "name": "tanh",
            "location": 57,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "asinh": {
            "name": "asinh",
            "location": 60,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "acosh": {
            "name": "acosh",
            "location": 63,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "atanh": {
            "name": "atanh",
            "location": 66,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "isinf": {
            "name": "isinf",
            "location": 71,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "isfinite": {
            "name": "isfinite",
            "location": 74,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "isnan": {
            "name": "isnan",
            "location": 77,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/com/fabricjs/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/dataclasses/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/datetime/__init__.py": {
        "zfill": {
            "name": "zfill",
            "location": 11,
            "return": [],
            "arguments": {
                "s": [],
                "c": []
            }
        },
        "rjust": {
            "name": "rjust",
            "location": 21,
            "return": [],
            "arguments": {
                "s": [],
                "c": []
            }
        },
        "_cmp": {
            "name": "_cmp",
            "location": 31,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_is_leap": {
            "name": "_is_leap",
            "location": 59,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "_days_before_year": {
            "name": "_days_before_year",
            "location": 64,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "_days_in_month": {
            "name": "_days_in_month",
            "location": 70,
            "return": [],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "_days_before_month": {
            "name": "_days_before_month",
            "location": 78,
            "return": [],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "_ymd2ord": {
            "name": "_ymd2ord",
            "location": 84,
            "return": [],
            "arguments": {
                "year": [],
                "month": [],
                "day": []
            }
        },
        "_ord2ymd": {
            "name": "_ord2ymd",
            "location": 111,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "_build_struct_time": {
            "name": "_build_struct_time",
            "location": 180,
            "return": [],
            "arguments": {
                "y": [],
                "m": [],
                "d": [],
                "hh": [],
                "mm": [],
                "ss": [],
                "dstflag": []
            }
        },
        "_format_time": {
            "name": "_format_time",
            "location": 187,
            "return": [],
            "arguments": {
                "hh": [],
                "mm": [],
                "ss": [],
                "us": []
            }
        },
        "_wrap_strftime": {
            "name": "_wrap_strftime",
            "location": 196,
            "return": [],
            "arguments": {
                "object": [],
                "format": [],
                "timetuple": []
            }
        },
        "_check_tzname": {
            "name": "_check_tzname",
            "location": 253,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_check_utc_offset": {
            "name": "_check_utc_offset",
            "location": 265,
            "return": [],
            "arguments": {
                "name": [],
                "offset": []
            }
        },
        "_check_int_field": {
            "name": "_check_int_field",
            "location": 282,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_check_date_fields": {
            "name": "_check_date_fields",
            "location": 299,
            "return": [],
            "arguments": {
                "year": [],
                "month": [],
                "day": []
            }
        },
        "_check_time_fields": {
            "name": "_check_time_fields",
            "location": 313,
            "return": [],
            "arguments": {
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": []
            }
        },
        "_check_tzinfo_arg": {
            "name": "_check_tzinfo_arg",
            "location": 329,
            "return": [],
            "arguments": {
                "tz": []
            }
        },
        "_cmperror": {
            "name": "_cmperror",
            "location": 334,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_divide_and_round": {
            "name": "_divide_and_round",
            "location": 339,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "_isoweek1monday": {
            "name": "_isoweek1monday",
            "location": 1747,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "timedelta.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "days": [],
                "seconds": [],
                "microseconds": [],
                "milliseconds": [],
                "minutes": [],
                "hours": [],
                "weeks": []
            }
        },
        "timedelta.__repr__": {
            "name": "__repr__",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.__str__": {
            "name": "__str__",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.total_seconds": {
            "name": "total_seconds",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.days": {
            "name": "days",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.seconds": {
            "name": "seconds",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.microseconds": {
            "name": "microseconds",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.__add__": {
            "name": "__add__",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__radd__": {
            "name": "__radd__",
            "location": 532,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__sub__": {
            "name": "__sub__",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__rsub__": {
            "name": "__rsub__",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__neg__": {
            "name": "__neg__",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.__pos__": {
            "name": "__pos__",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.__abs__": {
            "name": "__abs__",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.__mul__": {
            "name": "__mul__",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__rmul__": {
            "name": "__rmul__",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta._to_microseconds": {
            "name": "_to_microseconds",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timedelta.__floordiv__": {
            "name": "__floordiv__",
            "location": 587,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__truediv__": {
            "name": "__truediv__",
            "location": 596,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__mod__": {
            "name": "__mod__",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__divmod__": {
            "name": "__divmod__",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__eq__": {
            "name": "__eq__",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__le__": {
            "name": "__le__",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__lt__": {
            "name": "__lt__",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__ge__": {
            "name": "__ge__",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__gt__": {
            "name": "__gt__",
            "location": 647,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta._cmp": {
            "name": "_cmp",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta.__bool__": {
            "name": "__bool__",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.__init__": {
            "name": "__init__",
            "location": 702,
            "return": [],
            "arguments": {
                "self": [],
                "year": [],
                "month": [],
                "day": []
            }
        },
        "date.fromtimestamp": {
            "name": "fromtimestamp",
            "location": 718,
            "return": [],
            "arguments": {
                "cls": [],
                "t": []
            }
        },
        "date.today": {
            "name": "today",
            "location": 724,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "date.fromordinal": {
            "name": "fromordinal",
            "location": 730,
            "return": [],
            "arguments": {
                "cls": [],
                "n": []
            }
        },
        "date.__repr__": {
            "name": "__repr__",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.ctime": {
            "name": "ctime",
            "location": 762,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.strftime": {
            "name": "strftime",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "date.__format__": {
            "name": "__format__",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "date.isoformat": {
            "name": "isoformat",
            "location": 781,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.__str__": {
            "name": "__str__",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.year": {
            "name": "year",
            "location": 797,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.month": {
            "name": "month",
            "location": 802,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.day": {
            "name": "day",
            "location": 807,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.timetuple": {
            "name": "timetuple",
            "location": 813,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.toordinal": {
            "name": "toordinal",
            "location": 818,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.replace": {
            "name": "replace",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "year": [],
                "month": [],
                "day": []
            }
        },
        "date.__eq__": {
            "name": "__eq__",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.__le__": {
            "name": "__le__",
            "location": 845,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.__lt__": {
            "name": "__lt__",
            "location": 850,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.__ge__": {
            "name": "__ge__",
            "location": 855,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.__gt__": {
            "name": "__gt__",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date._cmp": {
            "name": "_cmp",
            "location": 865,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.__add__": {
            "name": "__add__",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.__radd__": {
            "name": "__radd__",
            "location": 883,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.__sub__": {
            "name": "__sub__",
            "location": 886,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "date.weekday": {
            "name": "weekday",
            "location": 900,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.isoweekday": {
            "name": "isoweekday",
            "location": 906,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "date.isocalendar": {
            "name": "isocalendar",
            "location": 911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "tzinfo.tzname": {
            "name": "tzname",
            "location": 956,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "tzinfo.utcoffset": {
            "name": "utcoffset",
            "location": 960,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "tzinfo.dst": {
            "name": "dst",
            "location": 964,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "tzinfo.fromutc": {
            "name": "fromutc",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "time.__init__": {
            "name": "__init__",
            "location": 1028,
            "return": [],
            "arguments": {
                "self": [],
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": [],
                "tzinfo": []
            }
        },
        "time.hour": {
            "name": "hour",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.minute": {
            "name": "minute",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.second": {
            "name": "second",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.microsecond": {
            "name": "microsecond",
            "location": 1064,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.tzinfo": {
            "name": "tzinfo",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.__eq__": {
            "name": "__eq__",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "time.__le__": {
            "name": "__le__",
            "location": 1081,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "time.__lt__": {
            "name": "__lt__",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "time.__ge__": {
            "name": "__ge__",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "time.__gt__": {
            "name": "__gt__",
            "location": 1099,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "time._cmp": {
            "name": "_cmp",
            "location": 1106,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "allow_mixed": []
            }
        },
        "time._tzstr": {
            "name": "_tzstr",
            "location": 1139,
            "return": [],
            "arguments": {
                "self": [],
                "sep": []
            }
        },
        "time.__repr__": {
            "name": "__repr__",
            "location": 1155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.isoformat": {
            "name": "isoformat",
            "location": 1169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.__str__": {
            "name": "__str__",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.strftime": {
            "name": "strftime",
            "location": 1185,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "time.__format__": {
            "name": "__format__",
            "location": 1196,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "time.utcoffset": {
            "name": "utcoffset",
            "location": 1205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.tzname": {
            "name": "tzname",
            "location": 1214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.dst": {
            "name": "dst",
            "location": 1227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "time.replace": {
            "name": "replace",
            "location": 1243,
            "return": [],
            "arguments": {
                "self": [],
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": [],
                "tzinfo": []
            }
        },
        "datetime.__init__": {
            "name": "__init__",
            "location": 1278,
            "return": [],
            "arguments": {
                "self": [],
                "year": [],
                "month": [],
                "day": [],
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": [],
                "tzinfo": []
            }
        },
        "datetime.hour": {
            "name": "hour",
            "location": 1296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.minute": {
            "name": "minute",
            "location": 1301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.second": {
            "name": "second",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.microsecond": {
            "name": "microsecond",
            "location": 1311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.tzinfo": {
            "name": "tzinfo",
            "location": 1316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime._fromtimestamp": {
            "name": "_fromtimestamp",
            "location": 1321,
            "return": [],
            "arguments": {
                "cls": [],
                "t": [],
                "utc": [],
                "tz": []
            }
        },
        "datetime.fromtimestamp": {
            "name": "fromtimestamp",
            "location": 1341,
            "return": [],
            "arguments": {
                "cls": [],
                "t": [],
                "tz": []
            }
        },
        "datetime.utcfromtimestamp": {
            "name": "utcfromtimestamp",
            "location": 1354,
            "return": [],
            "arguments": {
                "cls": [],
                "t": []
            }
        },
        "datetime.now": {
            "name": "now",
            "location": 1359,
            "return": [],
            "arguments": {
                "cls": [],
                "tz": []
            }
        },
        "datetime.utcnow": {
            "name": "utcnow",
            "location": 1365,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "datetime.combine": {
            "name": "combine",
            "location": 1371,
            "return": [],
            "arguments": {
                "cls": [],
                "date": [],
                "time": []
            }
        },
        "datetime.timetuple": {
            "name": "timetuple",
            "location": 1381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.timestamp": {
            "name": "timestamp",
            "location": 1394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.utctimetuple": {
            "name": "utctimetuple",
            "location": 1405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.date": {
            "name": "date",
            "location": 1416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.time": {
            "name": "time",
            "location": 1420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.timetz": {
            "name": "timetz",
            "location": 1424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.replace": {
            "name": "replace",
            "location": 1430,
            "return": [],
            "arguments": {
                "self": [],
                "year": [],
                "month": [],
                "day": [],
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": [],
                "tzinfo": []
            }
        },
        "datetime.astimezone": {
            "name": "astimezone",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": [],
                "tz": []
            }
        },
        "datetime.ctime": {
            "name": "ctime",
            "location": 1508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.isoformat": {
            "name": "isoformat",
            "location": 1518,
            "return": [],
            "arguments": {
                "self": [],
                "sep": []
            }
        },
        "datetime.__repr__": {
            "name": "__repr__",
            "location": 1546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.__str__": {
            "name": "__str__",
            "location": 1560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.strptime": {
            "name": "strptime",
            "location": 1565,
            "return": [],
            "arguments": {
                "cls": [],
                "date_string": [],
                "format": []
            }
        },
        "datetime.utcoffset": {
            "name": "utcoffset",
            "location": 1569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.tzname": {
            "name": "tzname",
            "location": 1578,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.dst": {
            "name": "dst",
            "location": 1591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "datetime.__eq__": {
            "name": "__eq__",
            "location": 1608,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime.__le__": {
            "name": "__le__",
            "location": 1616,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime.__lt__": {
            "name": "__lt__",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime.__ge__": {
            "name": "__ge__",
            "location": 1632,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime.__gt__": {
            "name": "__gt__",
            "location": 1640,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime._cmp": {
            "name": "_cmp",
            "location": 1648,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "allow_mixed": []
            }
        },
        "datetime.__add__": {
            "name": "__add__",
            "location": 1686,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime.__radd__": {
            "name": "__radd__",
            "location": 1707,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime.__sub__": {
            "name": "__sub__",
            "location": 1710,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timezone.__init__": {
            "name": "__init__",
            "location": 1765,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "name": []
            }
        },
        "timezone._create": {
            "name": "_create",
            "location": 1790,
            "return": [],
            "arguments": {
                "cls": [],
                "offset": [],
                "name": []
            }
        },
        "timezone.__eq__": {
            "name": "__eq__",
            "location": 1794,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timezone.__repr__": {
            "name": "__repr__",
            "location": 1799,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timezone.__str__": {
            "name": "__str__",
            "location": 1815,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timezone.utcoffset": {
            "name": "utcoffset",
            "location": 1818,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "timezone.tzname": {
            "name": "tzname",
            "location": 1824,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "timezone.dst": {
            "name": "dst",
            "location": 1832,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "timezone.fromutc": {
            "name": "fromutc",
            "location": 1838,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "timezone._name_from_offset": {
            "name": "_name_from_offset",
            "location": 1855,
            "return": [],
            "arguments": {
                "delta": []
            }
        },
        "timedelta.__str__.plural": {
            "name": "plural",
            "location": 494,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/inspect/__init__.py": {
        "isclass": {
            "name": "isclass",
            "location": 1,
            "return": [],
            "arguments": {
                "object": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/logging/config.py": {
        "fileConfig": {
            "name": "fileConfig",
            "location": 74,
            "return": [],
            "arguments": {
                "fname": [],
                "defaults": [],
                "disable_existing_loggers": []
            }
        },
        "addResolvable": {
            "name": "addResolvable",
            "location": 95,
            "return": [],
            "arguments": {
                "name": [],
                "obj": []
            }
        },
        "_resolve": {
            "name": "_resolve",
            "location": 110,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_strip_spaces": {
            "name": "_strip_spaces",
            "location": 118,
            "return": [],
            "arguments": {
                "alist": []
            }
        },
        "_create_formatters": {
            "name": "_create_formatters",
            "location": 121,
            "return": [],
            "arguments": {
                "cp": []
            }
        },
        "_handle_existing_loggers": {
            "name": "_handle_existing_loggers",
            "location": 142,
            "return": [],
            "arguments": {
                "existing": [],
                "child_loggers": [],
                "disable_existing": []
            }
        },
        "_install_loggers": {
            "name": "_install_loggers",
            "location": 163,
            "return": [],
            "arguments": {
                "cp": [],
                "handlers": [],
                "disable_existing": []
            }
        },
        "valid_ident": {
            "name": "valid_ident",
            "location": 252,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "dictConfig": {
            "name": "dictConfig",
            "location": 689,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "listen": {
            "name": "listen",
            "location": 694,
            "return": [],
            "arguments": {
                "port": [],
                "verify": []
            }
        },
        "stopListening": {
            "name": "stopListening",
            "location": 702,
            "return": [],
            "arguments": {}
        },
        "BaseConfigurator.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BaseConfigurator.resolve": {
            "name": "resolve",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "BaseConfigurator.ext_convert": {
            "name": "ext_convert",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BaseConfigurator.cfg_convert": {
            "name": "cfg_convert",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BaseConfigurator.convert": {
            "name": "convert",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BaseConfigurator.configure_custom": {
            "name": "configure_custom",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BaseConfigurator.as_tuple": {
            "name": "as_tuple",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DictConfigurator.configure": {
            "name": "configure",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictConfigurator.configure_formatter": {
            "name": "configure_formatter",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "DictConfigurator.configure_filter": {
            "name": "configure_filter",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "DictConfigurator.add_filters": {
            "name": "add_filters",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "filterer": [],
                "filters": []
            }
        },
        "DictConfigurator.configure_handler": {
            "name": "configure_handler",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "DictConfigurator.add_handlers": {
            "name": "add_handlers",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [],
                "handlers": []
            }
        },
        "DictConfigurator.common_logger_config": {
            "name": "common_logger_config",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [],
                "config": [],
                "incremental": []
            }
        },
        "DictConfigurator.configure_logger": {
            "name": "configure_logger",
            "location": 674,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "config": [],
                "incremental": []
            }
        },
        "DictConfigurator.configure_root": {
            "name": "configure_root",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "incremental": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/logging/handlers.py": {
        "AJAXHandler.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "method": [],
                "headers": []
            }
        },
        "AJAXHandler.mapLogRecord": {
            "name": "mapLogRecord",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "AJAXHandler.urlencode": {
            "name": "urlencode",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "AJAXHandler.emit": {
            "name": "emit",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "BufferingHandler.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "capacity": []
            }
        },
        "BufferingHandler.shouldFlush": {
            "name": "shouldFlush",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "BufferingHandler.emit": {
            "name": "emit",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "BufferingHandler.flush": {
            "name": "flush",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BufferingHandler.close": {
            "name": "close",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryHandler.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "capacity": [],
                "flushLevel": [],
                "target": [],
                "flushOnClose": []
            }
        },
        "MemoryHandler.shouldFlush": {
            "name": "shouldFlush",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "MemoryHandler.setTarget": {
            "name": "setTarget",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "MemoryHandler.flush": {
            "name": "flush",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryHandler.close": {
            "name": "close",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueueHandler.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "queue": []
            }
        },
        "QueueHandler.enqueue": {
            "name": "enqueue",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "QueueHandler.prepare": {
            "name": "prepare",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "QueueHandler.emit": {
            "name": "emit",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "AJAXHandler.urlencode.repl": {
            "name": "repl",
            "location": 104,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "AJAXHandler.emit.ajaxCallback": {
            "name": "ajaxCallback",
            "location": 143,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/modules/logging/__init__.py": {
        "getLevelName": {
            "name": "getLevelName",
            "location": 136,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "addLevelName": {
            "name": "addLevelName",
            "location": 154,
            "return": [],
            "arguments": {
                "level": [],
                "levelName": []
            }
        },
        "currentframe": {
            "name": "currentframe",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "_checkLevel": {
            "name": "_checkLevel",
            "location": 212,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "_acquireLock": {
            "name": "_acquireLock",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "_releaseLock": {
            "name": "_releaseLock",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "setLogRecordFactory": {
            "name": "setLogRecordFactory",
            "location": 426,
            "return": [],
            "arguments": {
                "factory": []
            }
        },
        "getLogRecordFactory": {
            "name": "getLogRecordFactory",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "makeLogRecord": {
            "name": "makeLogRecord",
            "location": 443,
            "return": [],
            "arguments": {
                "dict": []
            }
        },
        "_removeHandlerRef": {
            "name": "_removeHandlerRef",
            "location": 864,
            "return": [],
            "arguments": {
                "wr": []
            }
        },
        "_addHandlerRef": {
            "name": "_addHandlerRef",
            "location": 881,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "setLoggerClass": {
            "name": "setLoggerClass",
            "location": 1171,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "getLoggerClass": {
            "name": "getLoggerClass",
            "location": 1184,
            "return": [],
            "arguments": {}
        },
        "_resetLogging": {
            "name": "_resetLogging",
            "location": 1770,
            "return": [],
            "arguments": {}
        },
        "basicConfig": {
            "name": "basicConfig",
            "location": 1789,
            "return": [],
            "arguments": {}
        },
        "getLogger": {
            "name": "getLogger",
            "location": 1869,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "critical": {
            "name": "critical",
            "location": 1881,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "error": {
            "name": "error",
            "location": 1893,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "exception": {
            "name": "exception",
            "location": 1903,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "warning": {
            "name": "warning",
            "location": 1911,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "warn": {
            "name": "warn",
            "location": 1921,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "info": {
            "name": "info",
            "location": 1925,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "debug": {
            "name": "debug",
            "location": 1935,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "log": {
            "name": "log",
            "location": 1945,
            "return": [],
            "arguments": {
                "level": [],
                "msg": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 1956,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 1962,
            "return": [],
            "arguments": {
                "handlerList": []
            }
        },
        "_showwarning": {
            "name": "_showwarning",
            "location": 2023,
            "return": [],
            "arguments": {
                "message": [],
                "category": [],
                "filename": [],
                "lineno": [],
                "file": [],
                "line": []
            }
        },
        "captureWarnings": {
            "name": "captureWarnings",
            "location": 2041,
            "return": [],
            "arguments": {
                "capture": []
            }
        },
        "LogRecord.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "level": [],
                "pathname": [],
                "lineno": [],
                "msg": [],
                "args": [],
                "exc_info": [],
                "func": [],
                "sinfo": []
            }
        },
        "LogRecord.getMessage": {
            "name": "getMessage",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogRecord.toDict": {
            "name": "toDict",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogRecord.__str__": {
            "name": "__str__",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogRecord.__repr__": {
            "name": "__repr__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PercentStyle.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "PercentStyle.usesTime": {
            "name": "usesTime",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PercentStyle.format": {
            "name": "format",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "StrFormatStyle.format": {
            "name": "format",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "StringTemplateStyle.__init__": {
            "name": "__init__",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "StringTemplateStyle.usesTime": {
            "name": "usesTime",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringTemplateStyle.format": {
            "name": "format",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Formatter.__init__": {
            "name": "__init__",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "format": [],
                "datefmt": [],
                "style": []
            }
        },
        "Formatter.formatTime": {
            "name": "formatTime",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "record": [],
                "datefmt": []
            }
        },
        "Formatter.formatException": {
            "name": "formatException",
            "location": 617,
            "return": [],
            "arguments": {
                "self": [],
                "ei": []
            }
        },
        "Formatter.usesTime": {
            "name": "usesTime",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formatter.formatMessage": {
            "name": "formatMessage",
            "location": 644,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Formatter.formatStack": {
            "name": "formatStack",
            "location": 647,
            "return": [],
            "arguments": {
                "self": [],
                "stack_info": []
            }
        },
        "Formatter.format": {
            "name": "format",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "BufferingFormatter.__init__": {
            "name": "__init__",
            "location": 701,
            "return": [],
            "arguments": {
                "self": [],
                "linefmt": []
            }
        },
        "BufferingFormatter.formatHeader": {
            "name": "formatHeader",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "records": []
            }
        },
        "BufferingFormatter.formatFooter": {
            "name": "formatFooter",
            "location": 717,
            "return": [],
            "arguments": {
                "self": [],
                "records": []
            }
        },
        "BufferingFormatter.format": {
            "name": "format",
            "location": 723,
            "return": [],
            "arguments": {
                "self": [],
                "records": []
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Filterer.__init__": {
            "name": "__init__",
            "location": 781,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Filterer.addFilter": {
            "name": "addFilter",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "filt": []
            }
        },
        "Filterer.removeFilter": {
            "name": "removeFilter",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "filt": []
            }
        },
        "Filterer.filter": {
            "name": "filter",
            "location": 801,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ConsoleLogStream.__init__": {
            "name": "__init__",
            "location": 835,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConsoleLogStream.write": {
            "name": "write",
            "location": 838,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Handler.__init__": {
            "name": "__init__",
            "location": 901,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Handler.get_name": {
            "name": "get_name",
            "location": 914,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Handler.set_name": {
            "name": "set_name",
            "location": 917,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Handler.createLock": {
            "name": "createLock",
            "location": 930,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Handler.acquire": {
            "name": "acquire",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Handler.release": {
            "name": "release",
            "location": 948,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Handler.setLevel": {
            "name": "setLevel",
            "location": 955,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Handler.format": {
            "name": "format",
            "location": 961,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Handler.emit": {
            "name": "emit",
            "location": 974,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Handler.handle": {
            "name": "handle",
            "location": 983,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Handler.setFormatter": {
            "name": "setFormatter",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "Handler.flush": {
            "name": "flush",
            "location": 1007,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Handler.close": {
            "name": "close",
            "location": 1016,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Handler.handleError": {
            "name": "handleError",
            "location": 1033,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Handler.__repr__": {
            "name": "__repr__",
            "location": 1050,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamHandler.__init__": {
            "name": "__init__",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "level": []
            }
        },
        "StreamHandler.flush": {
            "name": "flush",
            "location": 1074,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamHandler.emit": {
            "name": "emit",
            "location": 1085,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "StreamHandler.__repr__": {
            "name": "__repr__",
            "location": 1105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileHandler.__init__": {
            "name": "__init__",
            "location": 1116,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "mode": [],
                "encoding": [],
                "delay": []
            }
        },
        "_StderrHandler.__init__": {
            "name": "__init__",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "_StderrHandler._getStream": {
            "name": "_getStream",
            "location": 1133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlaceHolder.__init__": {
            "name": "__init__",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": [],
                "alogger": []
            }
        },
        "PlaceHolder.append": {
            "name": "append",
            "location": 1159,
            "return": [],
            "arguments": {
                "self": [],
                "alogger": []
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 1195,
            "return": [],
            "arguments": {
                "self": [],
                "rootnode": []
            }
        },
        "Manager.getLogger": {
            "name": "getLogger",
            "location": 1206,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Manager.setLoggerClass": {
            "name": "setLoggerClass",
            "location": 1240,
            "return": [],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "Manager.setLogRecordFactory": {
            "name": "setLogRecordFactory",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "Manager._fixupParents": {
            "name": "_fixupParents",
            "location": 1257,
            "return": [],
            "arguments": {
                "self": [],
                "alogger": []
            }
        },
        "Manager._fixupChildren": {
            "name": "_fixupChildren",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": [],
                "ph": [],
                "alogger": []
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 1316,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "level": []
            }
        },
        "Logger.setLevel": {
            "name": "setLevel",
            "location": 1328,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 1335,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 1347,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.warning": {
            "name": "warning",
            "location": 1359,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.warn": {
            "name": "warn",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 1375,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.exception": {
            "name": "exception",
            "location": 1387,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.critical": {
            "name": "critical",
            "location": 1393,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.log": {
            "name": "log",
            "location": 1407,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "msg": []
            }
        },
        "Logger.findCaller": {
            "name": "findCaller",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": [],
                "stack_info": []
            }
        },
        "Logger.makeRecord": {
            "name": "makeRecord",
            "location": 1458,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "level": [],
                "fn": [],
                "lno": [],
                "msg": [],
                "args": [],
                "exc_info": [],
                "func": [],
                "extra": [],
                "sinfo": []
            }
        },
        "Logger._log": {
            "name": "_log",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "msg": [],
                "args": [],
                "exc_info": [],
                "extra": [],
                "stack_info": []
            }
        },
        "Logger.handle": {
            "name": "handle",
            "location": 1500,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Logger.addHandler": {
            "name": "addHandler",
            "location": 1510,
            "return": [],
            "arguments": {
                "self": [],
                "hdlr": []
            }
        },
        "Logger.removeHandler": {
            "name": "removeHandler",
            "location": 1521,
            "return": [],
            "arguments": {
                "self": [],
                "hdlr": []
            }
        },
        "Logger.hasHandlers": {
            "name": "hasHandlers",
            "location": 1532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Logger.callHandlers": {
            "name": "callHandlers",
            "location": 1554,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Logger.getEffectiveLevel": {
            "name": "getEffectiveLevel",
            "location": 1583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Logger.isEnabledFor": {
            "name": "isEnabledFor",
            "location": 1597,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Logger.getChild": {
            "name": "getChild",
            "location": 1605,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": []
            }
        },
        "Logger.__repr__": {
            "name": "__repr__",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RootLogger.__init__": {
            "name": "__init__",
            "location": 1635,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "LoggerAdapter.__init__": {
            "name": "__init__",
            "location": 1649,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [],
                "extra": []
            }
        },
        "LoggerAdapter.process": {
            "name": "process",
            "location": 1663,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "kwargs": []
            }
        },
        "LoggerAdapter.debug": {
            "name": "debug",
            "location": 1680,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "LoggerAdapter.info": {
            "name": "info",
            "location": 1686,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "LoggerAdapter.warning": {
            "name": "warning",
            "location": 1692,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "LoggerAdapter.warn": {
            "name": "warn",
            "location": 1698,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "LoggerAdapter.error": {
            "name": "error",
            "location": 1703,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "LoggerAdapter.exception": {
            "name": "exception",
            "location": 1709,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "LoggerAdapter.critical": {
            "name": "critical",
            "location": 1715,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "LoggerAdapter.log": {
            "name": "log",
            "location": 1721,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "msg": []
            }
        },
        "LoggerAdapter.isEnabledFor": {
            "name": "isEnabledFor",
            "location": 1731,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "LoggerAdapter.setLevel": {
            "name": "setLevel",
            "location": 1739,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "LoggerAdapter.getEffectiveLevel": {
            "name": "getEffectiveLevel",
            "location": 1745,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggerAdapter.hasHandlers": {
            "name": "hasHandlers",
            "location": 1751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggerAdapter.__repr__": {
            "name": "__repr__",
            "location": 1757,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NullHandler.handle": {
            "name": "handle",
            "location": 2010,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "NullHandler.emit": {
            "name": "emit",
            "location": 2013,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "NullHandler.createLock": {
            "name": "createLock",
            "location": 2016,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/math/__init__.py": {
        "expm1": {
            "name": "expm1",
            "location": 6,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "log": {
            "name": "log",
            "location": 9,
            "return": [],
            "arguments": {
                "x": [],
                "base": []
            }
        },
        "log1p": {
            "name": "log1p",
            "location": 12,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "log2": {
            "name": "log2",
            "location": 15,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "log10": {
            "name": "log10",
            "location": 18,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "degrees": {
            "name": "degrees",
            "location": 35,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "radians": {
            "name": "radians",
            "location": 38,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "modf": {
            "name": "modf",
            "location": 58,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/org/reactjs/dom.py": {},
    "Transcrypt-master/transcrypt/modules/org/reactjs/__init__.py": {
        "withDeps": {
            "name": "withDeps",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "useCallbackWithDeps": {
            "name": "useCallbackWithDeps",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "withDeps.decorator": {
            "name": "decorator",
            "location": 22,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "useCallbackWithDeps.decorator": {
            "name": "decorator",
            "location": 33,
            "return": [],
            "arguments": {
                "fn": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/threejs/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/org/transcrypt/compiler.py": {
        "Program.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "moduleSearchDirs": [],
                "symbols": [],
                "envir": []
            }
        },
        "Program.provide": {
            "name": "provide",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "moduleName": [],
                "__moduleName__": [],
                "filter": []
            }
        },
        "Module.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "name": [],
                "__name__": [],
                "filter": []
            }
        },
        "Module.findPaths": {
            "name": "findPaths",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "filter": []
            }
        },
        "Module.generateJavascriptAndPrettyMap": {
            "name": "generateJavascriptAndPrettyMap",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.loadJavascript": {
            "name": "loadJavascript",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.parse": {
            "name": "parse",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.dumpTree": {
            "name": "dumpTree",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "Generator.visitSubExpr": {
            "name": "visitSubExpr",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "child": []
            }
        },
        "Generator.filterId": {
            "name": "filterId",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "qualifiedId": []
            }
        },
        "Generator.tabs": {
            "name": "tabs",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "indentLevel": []
            }
        },
        "Generator.emit": {
            "name": "emit",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "Generator.indent": {
            "name": "indent",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.dedent": {
            "name": "dedent",
            "location": 758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.inscope": {
            "name": "inscope",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.descope": {
            "name": "descope",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.getScope": {
            "name": "getScope",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.getAdjacentClassScopes": {
            "name": "getAdjacentClassScopes",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "inMethod": []
            }
        },
        "Generator.emitComma": {
            "name": "emitComma",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "blank": []
            }
        },
        "Generator.emitBeginTruthy": {
            "name": "emitBeginTruthy",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.emitEndTruthy": {
            "name": "emitEndTruthy",
            "location": 805,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.adaptLineNrString": {
            "name": "adaptLineNrString",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "offset": []
            }
        },
        "Generator.isCommentString": {
            "name": "isCommentString",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Generator.emitBody": {
            "name": "emitBody",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "Generator.emitSubscriptAssign": {
            "name": "emitSubscriptAssign",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "value": [],
                "emitPathIndices": []
            }
        },
        "Generator.nextTemp": {
            "name": "nextTemp",
            "location": 893,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.skipTemp": {
            "name": "skipTemp",
            "location": 900,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.skippedTemp": {
            "name": "skippedTemp",
            "location": 903,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.getTemp": {
            "name": "getTemp",
            "location": 906,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.prevTemp": {
            "name": "prevTemp",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.useModule": {
            "name": "useModule",
            "location": 920,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.isCall": {
            "name": "isCall",
            "location": 924,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "name": []
            }
        },
        "Generator.getPragmaFromExpr": {
            "name": "getPragmaFromExpr",
            "location": 927,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.getPragmaFromIf": {
            "name": "getPragmaFromIf",
            "location": 930,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit": {
            "name": "visit",
            "location": 933,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_arg": {
            "name": "visit_arg",
            "location": 987,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_arguments": {
            "name": "visit_arguments",
            "location": 990,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Assert": {
            "name": "visit_Assert",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Assign": {
            "name": "visit_Assign",
            "location": 1136,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 1232,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Await": {
            "name": "visit_Await",
            "location": 1243,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 1247,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 1338,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_BoolOp": {
            "name": "visit_BoolOp",
            "location": 1391,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Break": {
            "name": "visit_Break",
            "location": 1404,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Call": {
            "name": "visit_Call",
            "location": 1409,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "dataClassArgDict": []
            }
        },
        "Generator.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 1892,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Compare": {
            "name": "visit_Compare",
            "location": 2345,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Constant": {
            "name": "visit_Constant",
            "location": 2387,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Continue": {
            "name": "visit_Continue",
            "location": 2399,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Delete": {
            "name": "visit_Delete",
            "location": 2402,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Dict": {
            "name": "visit_Dict",
            "location": 2409,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_DictComp": {
            "name": "visit_DictComp",
            "location": 2441,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Expr": {
            "name": "visit_Expr",
            "location": 2444,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_For": {
            "name": "visit_For",
            "location": 2447,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_FormattedValue": {
            "name": "visit_FormattedValue",
            "location": 2583,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 2586,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 2589,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "anAsync": []
            }
        },
        "Generator.visit_GeneratorExp": {
            "name": "visit_GeneratorExp",
            "location": 2775,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Global": {
            "name": "visit_Global",
            "location": 2783,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_If": {
            "name": "visit_If",
            "location": 2791,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_IfExp": {
            "name": "visit_IfExp",
            "location": 2823,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Import": {
            "name": "visit_Import",
            "location": 2834,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.revisit_Import": {
            "name": "revisit_Import",
            "location": 2838,
            "return": [],
            "arguments": {
                "self": [],
                "importHoistMemo": []
            }
        },
        "Generator.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 2886,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.revisit_ImportFrom": {
            "name": "revisit_ImportFrom",
            "location": 2890,
            "return": [],
            "arguments": {
                "self": [],
                "importHoistMemo": []
            }
        },
        "Generator.visit_JoinedStr": {
            "name": "visit_JoinedStr",
            "location": 2967,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 2978,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_List": {
            "name": "visit_List",
            "location": 2986,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_ListComp": {
            "name": "visit_ListComp",
            "location": 2993,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "isSet": [],
                "isDict": [],
                "isGenExp": []
            }
        },
        "Generator.visit_Module": {
            "name": "visit_Module",
            "location": 3063,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Name": {
            "name": "visit_Name",
            "location": 3171,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Nonlocal": {
            "name": "visit_Nonlocal",
            "location": 3197,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Pass": {
            "name": "visit_Pass",
            "location": 3200,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Raise": {
            "name": "visit_Raise",
            "location": 3205,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Return": {
            "name": "visit_Return",
            "location": 3233,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Set": {
            "name": "visit_Set",
            "location": 3240,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_SetComp": {
            "name": "visit_SetComp",
            "location": 3247,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Slice": {
            "name": "visit_Slice",
            "location": 3250,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 3274,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Try": {
            "name": "visit_Try",
            "location": 3333,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 3395,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 3412,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_While": {
            "name": "visit_While",
            "location": 3423,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_With": {
            "name": "visit_With",
            "location": 3457,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Yield": {
            "name": "visit_Yield",
            "location": 3532,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_YieldFrom": {
            "name": "visit_YieldFrom",
            "location": 3539,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Module.parse.pragmasFromComments": {
            "name": "pragmasFromComments",
            "location": 380,
            "return": [],
            "arguments": {
                "sourceCode": []
            }
        },
        "Module.dumpTree.walk": {
            "name": "walk",
            "location": 505,
            "return": [],
            "arguments": {
                "name": [],
                "value": [],
                "tabLevel": []
            }
        },
        "Generator.visitSubExpr.getPriority": {
            "name": "getPriority",
            "location": 690,
            "return": [],
            "arguments": {
                "exprNode": []
            }
        },
        "Generator.visit_Assign.assignTarget": {
            "name": "assignTarget",
            "location": 1141,
            "return": [],
            "arguments": {
                "target": [],
                "value": [],
                "pathIndices": []
            }
        },
        "Generator.visit_Assign.walkTarget": {
            "name": "walkTarget",
            "location": 1180,
            "return": [],
            "arguments": {
                "expr": [],
                "pathIndices": []
            }
        },
        "Generator.visit_Assign.getIsPropertyAssign": {
            "name": "getIsPropertyAssign",
            "location": 1196,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Generator.visit_Call.emitKwargTrans": {
            "name": "emitKwargTrans",
            "location": 1412,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_Call.include": {
            "name": "include",
            "location": 1450,
            "return": [],
            "arguments": {
                "fileName": []
            }
        },
        "Generator.visit_ClassDef.emitMerges": {
            "name": "emitMerges",
            "location": 2277,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_ClassDef.emitProperties": {
            "name": "emitProperties",
            "location": 2300,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_FunctionDef.emitScopedBody": {
            "name": "emitScopedBody",
            "location": 2590,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_FunctionDef.pushPropertyAccessor": {
            "name": "pushPropertyAccessor",
            "location": 2599,
            "return": [],
            "arguments": {
                "functionName": []
            }
        },
        "Generator.visit_ListComp.nestLoops": {
            "name": "nestLoops",
            "location": 2999,
            "return": [],
            "arguments": {
                "generators": []
            }
        },
        "Generator.visit_With.itemContext": {
            "name": "itemContext",
            "location": 3462,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_With.pragmaContext": {
            "name": "pragmaContext",
            "location": 3501,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_With.skipContext": {
            "name": "skipContext",
            "location": 3515,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_Assign.assignTarget.emitPathIndices": {
            "name": "emitPathIndices",
            "location": 1142,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_ClassDef.emitMerges.emitMerge": {
            "name": "emitMerge",
            "location": 2278,
            "return": [],
            "arguments": {
                "merge": []
            }
        },
        "Generator.visit_ClassDef.emitProperties.emitProperty": {
            "name": "emitProperty",
            "location": 2301,
            "return": [],
            "arguments": {
                "className": [],
                "propertyName": [],
                "getterName": [],
                "setterName": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/compiler1.py": {
        "Program.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "moduleSearchDirs": [],
                "symbols": [],
                "envir": []
            }
        },
        "Program.provide": {
            "name": "provide",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "moduleName": [],
                "__moduleName__": [],
                "filter": []
            }
        },
        "Module.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "name": [],
                "__name__": [],
                "filter": []
            }
        },
        "Module.findPaths": {
            "name": "findPaths",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "filter": []
            }
        },
        "Module.generateJavascriptAndPrettyMap": {
            "name": "generateJavascriptAndPrettyMap",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.loadJavascript": {
            "name": "loadJavascript",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.parse": {
            "name": "parse",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.dumpTree": {
            "name": "dumpTree",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "Generator.visitSubExpr": {
            "name": "visitSubExpr",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "child": []
            }
        },
        "Generator.filterId": {
            "name": "filterId",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "qualifiedId": []
            }
        },
        "Generator.tabs": {
            "name": "tabs",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "indentLevel": []
            }
        },
        "Generator.emit": {
            "name": "emit",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "Generator.indent": {
            "name": "indent",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.dedent": {
            "name": "dedent",
            "location": 758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.inscope": {
            "name": "inscope",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.descope": {
            "name": "descope",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.getScope": {
            "name": "getScope",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.getAdjacentClassScopes": {
            "name": "getAdjacentClassScopes",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "inMethod": []
            }
        },
        "Generator.emitComma": {
            "name": "emitComma",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "blank": []
            }
        },
        "Generator.emitBeginTruthy": {
            "name": "emitBeginTruthy",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.emitEndTruthy": {
            "name": "emitEndTruthy",
            "location": 805,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.adaptLineNrString": {
            "name": "adaptLineNrString",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "offset": []
            }
        },
        "Generator.isCommentString": {
            "name": "isCommentString",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Generator.emitBody": {
            "name": "emitBody",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "Generator.emitSubscriptAssign": {
            "name": "emitSubscriptAssign",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "value": [],
                "emitPathIndices": []
            }
        },
        "Generator.nextTemp": {
            "name": "nextTemp",
            "location": 908,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.skipTemp": {
            "name": "skipTemp",
            "location": 915,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.skippedTemp": {
            "name": "skippedTemp",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.getTemp": {
            "name": "getTemp",
            "location": 921,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.prevTemp": {
            "name": "prevTemp",
            "location": 927,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.useModule": {
            "name": "useModule",
            "location": 935,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.isCall": {
            "name": "isCall",
            "location": 939,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "name": []
            }
        },
        "Generator.getPragmaFromExpr": {
            "name": "getPragmaFromExpr",
            "location": 942,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.getPragmaFromIf": {
            "name": "getPragmaFromIf",
            "location": 945,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit": {
            "name": "visit",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_arg": {
            "name": "visit_arg",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_arguments": {
            "name": "visit_arguments",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 1133,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Assert": {
            "name": "visit_Assert",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Assign": {
            "name": "visit_Assign",
            "location": 1151,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 1247,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Await": {
            "name": "visit_Await",
            "location": 1258,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 1262,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_BoolOp": {
            "name": "visit_BoolOp",
            "location": 1413,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Break": {
            "name": "visit_Break",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Call": {
            "name": "visit_Call",
            "location": 1431,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "dataClassArgDict": []
            }
        },
        "Generator.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 1914,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Compare": {
            "name": "visit_Compare",
            "location": 2367,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Constant": {
            "name": "visit_Constant",
            "location": 2409,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Continue": {
            "name": "visit_Continue",
            "location": 2421,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Delete": {
            "name": "visit_Delete",
            "location": 2424,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Dict": {
            "name": "visit_Dict",
            "location": 2431,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_DictComp": {
            "name": "visit_DictComp",
            "location": 2463,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Expr": {
            "name": "visit_Expr",
            "location": 2466,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_For": {
            "name": "visit_For",
            "location": 2469,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_FormattedValue": {
            "name": "visit_FormattedValue",
            "location": 2612,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 2615,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 2618,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "anAsync": []
            }
        },
        "Generator.visit_GeneratorExp": {
            "name": "visit_GeneratorExp",
            "location": 2804,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Global": {
            "name": "visit_Global",
            "location": 2812,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_If": {
            "name": "visit_If",
            "location": 2820,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_IfExp": {
            "name": "visit_IfExp",
            "location": 2852,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Import": {
            "name": "visit_Import",
            "location": 2863,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.revisit_Import": {
            "name": "revisit_Import",
            "location": 2867,
            "return": [],
            "arguments": {
                "self": [],
                "importHoistMemo": []
            }
        },
        "Generator.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 2915,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.revisit_ImportFrom": {
            "name": "revisit_ImportFrom",
            "location": 2919,
            "return": [],
            "arguments": {
                "self": [],
                "importHoistMemo": []
            }
        },
        "Generator.visit_JoinedStr": {
            "name": "visit_JoinedStr",
            "location": 2996,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 3007,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_List": {
            "name": "visit_List",
            "location": 3015,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_ListComp": {
            "name": "visit_ListComp",
            "location": 3022,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "isSet": [],
                "isDict": [],
                "isGenExp": []
            }
        },
        "Generator.visit_Module": {
            "name": "visit_Module",
            "location": 3092,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Name": {
            "name": "visit_Name",
            "location": 3200,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Nonlocal": {
            "name": "visit_Nonlocal",
            "location": 3226,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Pass": {
            "name": "visit_Pass",
            "location": 3229,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Raise": {
            "name": "visit_Raise",
            "location": 3234,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Return": {
            "name": "visit_Return",
            "location": 3262,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Set": {
            "name": "visit_Set",
            "location": 3269,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_SetComp": {
            "name": "visit_SetComp",
            "location": 3276,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Slice": {
            "name": "visit_Slice",
            "location": 3279,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 3305,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Try": {
            "name": "visit_Try",
            "location": 3373,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 3435,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 3452,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_While": {
            "name": "visit_While",
            "location": 3463,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_With": {
            "name": "visit_With",
            "location": 3497,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Yield": {
            "name": "visit_Yield",
            "location": 3572,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_YieldFrom": {
            "name": "visit_YieldFrom",
            "location": 3579,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Module.parse.pragmasFromComments": {
            "name": "pragmasFromComments",
            "location": 380,
            "return": [],
            "arguments": {
                "sourceCode": []
            }
        },
        "Module.dumpTree.walk": {
            "name": "walk",
            "location": 505,
            "return": [],
            "arguments": {
                "name": [],
                "value": [],
                "tabLevel": []
            }
        },
        "Generator.visitSubExpr.getPriority": {
            "name": "getPriority",
            "location": 690,
            "return": [],
            "arguments": {
                "exprNode": []
            }
        },
        "Generator.visit_Assign.assignTarget": {
            "name": "assignTarget",
            "location": 1156,
            "return": [],
            "arguments": {
                "target": [],
                "value": [],
                "pathIndices": []
            }
        },
        "Generator.visit_Assign.walkTarget": {
            "name": "walkTarget",
            "location": 1195,
            "return": [],
            "arguments": {
                "expr": [],
                "pathIndices": []
            }
        },
        "Generator.visit_Assign.getIsPropertyAssign": {
            "name": "getIsPropertyAssign",
            "location": 1211,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Generator.visit_Call.emitKwargTrans": {
            "name": "emitKwargTrans",
            "location": 1434,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_Call.include": {
            "name": "include",
            "location": 1472,
            "return": [],
            "arguments": {
                "fileName": []
            }
        },
        "Generator.visit_ClassDef.emitMerges": {
            "name": "emitMerges",
            "location": 2299,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_ClassDef.emitProperties": {
            "name": "emitProperties",
            "location": 2322,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_FunctionDef.emitScopedBody": {
            "name": "emitScopedBody",
            "location": 2619,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_FunctionDef.pushPropertyAccessor": {
            "name": "pushPropertyAccessor",
            "location": 2628,
            "return": [],
            "arguments": {
                "functionName": []
            }
        },
        "Generator.visit_ListComp.nestLoops": {
            "name": "nestLoops",
            "location": 3028,
            "return": [],
            "arguments": {
                "generators": []
            }
        },
        "Generator.visit_With.itemContext": {
            "name": "itemContext",
            "location": 3502,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_With.pragmaContext": {
            "name": "pragmaContext",
            "location": 3541,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_With.skipContext": {
            "name": "skipContext",
            "location": 3555,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_Assign.assignTarget.emitPathIndices": {
            "name": "emitPathIndices",
            "location": 1157,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_ClassDef.emitMerges.emitMerge": {
            "name": "emitMerge",
            "location": 2300,
            "return": [],
            "arguments": {
                "merge": []
            }
        },
        "Generator.visit_ClassDef.emitProperties.emitProperty": {
            "name": "emitProperty",
            "location": 2323,
            "return": [],
            "arguments": {
                "className": [],
                "propertyName": [],
                "getterName": [],
                "setterName": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/compiler38.py": {
        "Program.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "moduleSearchDirs": [],
                "symbols": [],
                "envir": []
            }
        },
        "Program.provide": {
            "name": "provide",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "moduleName": [],
                "__moduleName__": [],
                "filter": []
            }
        },
        "Module.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "name": [],
                "__name__": [],
                "filter": []
            }
        },
        "Module.findPaths": {
            "name": "findPaths",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "filter": []
            }
        },
        "Module.generateJavascriptAndPrettyMap": {
            "name": "generateJavascriptAndPrettyMap",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.loadJavascript": {
            "name": "loadJavascript",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.parse": {
            "name": "parse",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.dumpTree": {
            "name": "dumpTree",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "Generator.visitSubExpr": {
            "name": "visitSubExpr",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "child": []
            }
        },
        "Generator.filterId": {
            "name": "filterId",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "qualifiedId": []
            }
        },
        "Generator.tabs": {
            "name": "tabs",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "indentLevel": []
            }
        },
        "Generator.emit": {
            "name": "emit",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "Generator.indent": {
            "name": "indent",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.dedent": {
            "name": "dedent",
            "location": 758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.inscope": {
            "name": "inscope",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.descope": {
            "name": "descope",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.getScope": {
            "name": "getScope",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.getAdjacentClassScopes": {
            "name": "getAdjacentClassScopes",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "inMethod": []
            }
        },
        "Generator.emitComma": {
            "name": "emitComma",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "blank": []
            }
        },
        "Generator.emitBeginTruthy": {
            "name": "emitBeginTruthy",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.emitEndTruthy": {
            "name": "emitEndTruthy",
            "location": 805,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.adaptLineNrString": {
            "name": "adaptLineNrString",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "offset": []
            }
        },
        "Generator.isCommentString": {
            "name": "isCommentString",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Generator.emitBody": {
            "name": "emitBody",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "Generator.emitSubscriptAssign": {
            "name": "emitSubscriptAssign",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "value": [],
                "emitPathIndices": []
            }
        },
        "Generator.nextTemp": {
            "name": "nextTemp",
            "location": 905,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.skipTemp": {
            "name": "skipTemp",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.skippedTemp": {
            "name": "skippedTemp",
            "location": 915,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.getTemp": {
            "name": "getTemp",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.prevTemp": {
            "name": "prevTemp",
            "location": 924,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.useModule": {
            "name": "useModule",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Generator.isCall": {
            "name": "isCall",
            "location": 936,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "name": []
            }
        },
        "Generator.getPragmaFromExpr": {
            "name": "getPragmaFromExpr",
            "location": 939,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.getPragmaFromIf": {
            "name": "getPragmaFromIf",
            "location": 942,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit": {
            "name": "visit",
            "location": 945,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_arg": {
            "name": "visit_arg",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_arguments": {
            "name": "visit_arguments",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 1130,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Assert": {
            "name": "visit_Assert",
            "location": 1139,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Assign": {
            "name": "visit_Assign",
            "location": 1148,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 1244,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Await": {
            "name": "visit_Await",
            "location": 1255,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 1259,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 1355,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_BoolOp": {
            "name": "visit_BoolOp",
            "location": 1408,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Break": {
            "name": "visit_Break",
            "location": 1421,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Call": {
            "name": "visit_Call",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "dataClassArgDict": []
            }
        },
        "Generator.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 1909,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Compare": {
            "name": "visit_Compare",
            "location": 2362,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Constant": {
            "name": "visit_Constant",
            "location": 2404,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Continue": {
            "name": "visit_Continue",
            "location": 2416,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Delete": {
            "name": "visit_Delete",
            "location": 2419,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Dict": {
            "name": "visit_Dict",
            "location": 2426,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_DictComp": {
            "name": "visit_DictComp",
            "location": 2458,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Expr": {
            "name": "visit_Expr",
            "location": 2461,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_For": {
            "name": "visit_For",
            "location": 2464,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_FormattedValue": {
            "name": "visit_FormattedValue",
            "location": 2603,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 2606,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 2609,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "anAsync": []
            }
        },
        "Generator.visit_GeneratorExp": {
            "name": "visit_GeneratorExp",
            "location": 2795,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Global": {
            "name": "visit_Global",
            "location": 2803,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_If": {
            "name": "visit_If",
            "location": 2811,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_IfExp": {
            "name": "visit_IfExp",
            "location": 2843,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Import": {
            "name": "visit_Import",
            "location": 2854,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.revisit_Import": {
            "name": "revisit_Import",
            "location": 2858,
            "return": [],
            "arguments": {
                "self": [],
                "importHoistMemo": []
            }
        },
        "Generator.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 2906,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.revisit_ImportFrom": {
            "name": "revisit_ImportFrom",
            "location": 2910,
            "return": [],
            "arguments": {
                "self": [],
                "importHoistMemo": []
            }
        },
        "Generator.visit_JoinedStr": {
            "name": "visit_JoinedStr",
            "location": 2987,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 2998,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_List": {
            "name": "visit_List",
            "location": 3006,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_ListComp": {
            "name": "visit_ListComp",
            "location": 3013,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "isSet": [],
                "isDict": [],
                "isGenExp": []
            }
        },
        "Generator.visit_Module": {
            "name": "visit_Module",
            "location": 3083,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Name": {
            "name": "visit_Name",
            "location": 3191,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Nonlocal": {
            "name": "visit_Nonlocal",
            "location": 3217,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Pass": {
            "name": "visit_Pass",
            "location": 3220,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Raise": {
            "name": "visit_Raise",
            "location": 3225,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Return": {
            "name": "visit_Return",
            "location": 3253,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Set": {
            "name": "visit_Set",
            "location": 3260,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_SetComp": {
            "name": "visit_SetComp",
            "location": 3267,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Slice": {
            "name": "visit_Slice",
            "location": 3270,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 3296,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Try": {
            "name": "visit_Try",
            "location": 3364,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 3426,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 3443,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_While": {
            "name": "visit_While",
            "location": 3454,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_With": {
            "name": "visit_With",
            "location": 3488,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_Yield": {
            "name": "visit_Yield",
            "location": 3563,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Generator.visit_YieldFrom": {
            "name": "visit_YieldFrom",
            "location": 3570,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Module.parse.pragmasFromComments": {
            "name": "pragmasFromComments",
            "location": 380,
            "return": [],
            "arguments": {
                "sourceCode": []
            }
        },
        "Module.dumpTree.walk": {
            "name": "walk",
            "location": 505,
            "return": [],
            "arguments": {
                "name": [],
                "value": [],
                "tabLevel": []
            }
        },
        "Generator.visitSubExpr.getPriority": {
            "name": "getPriority",
            "location": 690,
            "return": [],
            "arguments": {
                "exprNode": []
            }
        },
        "Generator.visit_Assign.assignTarget": {
            "name": "assignTarget",
            "location": 1153,
            "return": [],
            "arguments": {
                "target": [],
                "value": [],
                "pathIndices": []
            }
        },
        "Generator.visit_Assign.walkTarget": {
            "name": "walkTarget",
            "location": 1192,
            "return": [],
            "arguments": {
                "expr": [],
                "pathIndices": []
            }
        },
        "Generator.visit_Assign.getIsPropertyAssign": {
            "name": "getIsPropertyAssign",
            "location": 1208,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Generator.visit_Call.emitKwargTrans": {
            "name": "emitKwargTrans",
            "location": 1429,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_Call.include": {
            "name": "include",
            "location": 1467,
            "return": [],
            "arguments": {
                "fileName": []
            }
        },
        "Generator.visit_ClassDef.emitMerges": {
            "name": "emitMerges",
            "location": 2294,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_ClassDef.emitProperties": {
            "name": "emitProperties",
            "location": 2317,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_FunctionDef.emitScopedBody": {
            "name": "emitScopedBody",
            "location": 2610,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_FunctionDef.pushPropertyAccessor": {
            "name": "pushPropertyAccessor",
            "location": 2619,
            "return": [],
            "arguments": {
                "functionName": []
            }
        },
        "Generator.visit_ListComp.nestLoops": {
            "name": "nestLoops",
            "location": 3019,
            "return": [],
            "arguments": {
                "generators": []
            }
        },
        "Generator.visit_With.itemContext": {
            "name": "itemContext",
            "location": 3493,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_With.pragmaContext": {
            "name": "pragmaContext",
            "location": 3532,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_With.skipContext": {
            "name": "skipContext",
            "location": 3546,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "Generator.visit_Assign.assignTarget.emitPathIndices": {
            "name": "emitPathIndices",
            "location": 1154,
            "return": [],
            "arguments": {}
        },
        "Generator.visit_ClassDef.emitMerges.emitMerge": {
            "name": "emitMerge",
            "location": 2295,
            "return": [],
            "arguments": {
                "merge": []
            }
        },
        "Generator.visit_ClassDef.emitProperties.emitProperty": {
            "name": "emitProperty",
            "location": 2318,
            "return": [],
            "arguments": {
                "className": [],
                "propertyName": [],
                "getterName": [],
                "setterName": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/sourcemaps.py": {
        "Base64VlqConverter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base64VlqConverter.encode": {
            "name": "encode",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "numbers": [],
                "init": []
            }
        },
        "Base64VlqConverter.decode": {
            "name": "decode",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "segment": []
            }
        },
        "SourceMapper.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "moduleName": [],
                "targetDir": [],
                "minify": [],
                "dump": []
            }
        },
        "SourceMapper.generateAndSavePrettyMap": {
            "name": "generateAndSavePrettyMap",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "sourceLineNrs": []
            }
        },
        "SourceMapper.cascadeAndSaveMiniMap": {
            "name": "cascadeAndSaveMiniMap",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceMapper.loadShrinkMap": {
            "name": "loadShrinkMap",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceMapper.save": {
            "name": "save",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "mappings": [],
                "infix": []
            }
        },
        "SourceMapper.dumpMap": {
            "name": "dumpMap",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "mappings": [],
                "infix": [],
                "sourceExtension": []
            }
        },
        "SourceMapper.dumpDeltaMap": {
            "name": "dumpDeltaMap",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "deltaMappings": [],
                "infix": []
            }
        },
        "SourceMapper.generateMultilevelMap": {
            "name": "generateMultilevelMap",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceMapper.cascadeAndSaveMiniMap.getCascadedMapping": {
            "name": "getCascadedMapping",
            "location": 113,
            "return": [],
            "arguments": {
                "shrinkMapping": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/utils.py": {
        "create": {
            "name": "create",
            "location": 131,
            "return": [],
            "arguments": {
                "path": [],
                "binary": []
            }
        },
        "tryRemove": {
            "name": "tryRemove",
            "location": 150,
            "return": [],
            "arguments": {
                "filePath": []
            }
        },
        "formatted": {
            "name": "formatted",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "log": {
            "name": "log",
            "location": 169,
            "return": [],
            "arguments": {
                "always": []
            }
        },
        "setProgram": {
            "name": "setProgram",
            "location": 181,
            "return": [],
            "arguments": {
                "aProgram": []
            }
        },
        "enhanceException": {
            "name": "enhanceException",
            "location": 221,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "digestJavascript": {
            "name": "digestJavascript",
            "location": 244,
            "return": [],
            "arguments": {
                "code": [],
                "symbols": [],
                "mayStripComments": [],
                "mayRemoveAnnotations": [],
                "refuseIfAppearsMinified": []
            }
        },
        "Any.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentParser.error": {
            "name": "error",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ArgumentParser.exit": {
            "name": "exit",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "message": []
            }
        },
        "CommandArgs.parse": {
            "name": "parse",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "lineNr": [],
                "message": []
            }
        },
        "Error.set": {
            "name": "set",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "lineNr": [],
                "message": []
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "digestJavascript.stripSingleLineComments": {
            "name": "stripSingleLineComments",
            "location": 256,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "digestJavascript.passable": {
            "name": "passable",
            "location": 262,
            "return": [],
            "arguments": {
                "targetLine": []
            }
        },
        "CommandArgs.parse.logAndExit": {
            "name": "logAndExit",
            "location": 88,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "digestJavascript.passable.__pragma__": {
            "name": "__pragma__",
            "location": 267,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/__runtime__.py": {
        "__sort__": {
            "name": "__sort__",
            "location": 105,
            "return": [],
            "arguments": {
                "iterable": [],
                "key": [],
                "reverse": []
            }
        },
        "sorted": {
            "name": "sorted",
            "location": 114,
            "return": [],
            "arguments": {
                "iterable": [],
                "key": [],
                "reverse": []
            }
        },
        "map": {
            "name": "map",
            "location": 125,
            "return": [],
            "arguments": {
                "func": [],
                "iterable": []
            }
        },
        "filter": {
            "name": "filter",
            "location": 129,
            "return": [],
            "arguments": {
                "func": [],
                "iterable": []
            }
        },
        "divmod": {
            "name": "divmod",
            "location": 134,
            "return": [],
            "arguments": {
                "n": [],
                "d": []
            }
        },
        "__conj__": {
            "name": "__conj__",
            "location": 233,
            "return": [],
            "arguments": {
                "aNumber": []
            }
        },
        "Exception.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exception.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exception.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IterableError.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "StopIteration.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ValueError.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "error": []
            }
        },
        "KeyError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "error": []
            }
        },
        "AssertionError.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "error": []
            }
        },
        "NotImplementedError.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "error": []
            }
        },
        "IndexError.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "error": []
            }
        },
        "AttributeError.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "error": []
            }
        },
        "TypeError.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "error": []
            }
        },
        "complex.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "real": [],
                "imag": []
            }
        },
        "complex.__neg__": {
            "name": "__neg__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex.__exp__": {
            "name": "__exp__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex.__log__": {
            "name": "__log__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex.__pow__": {
            "name": "__pow__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "complex.__rpow__": {
            "name": "__rpow__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "real": []
            }
        },
        "complex.__mul__": {
            "name": "__mul__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "complex.__rmul__": {
            "name": "__rmul__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "real": []
            }
        },
        "complex.__div__": {
            "name": "__div__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "complex.__rdiv__": {
            "name": "__rdiv__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "real": []
            }
        },
        "complex.__add__": {
            "name": "__add__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "complex.__radd__": {
            "name": "__radd__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "real": []
            }
        },
        "complex.__sub__": {
            "name": "__sub__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "complex.__rsub__": {
            "name": "__rsub__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "real": []
            }
        },
        "complex.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex.__str__": {
            "name": "__str__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex.__eq__": {
            "name": "__eq__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "complex.__ne__": {
            "name": "__ne__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "complex.conjugate": {
            "name": "conjugate",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "__Terminal__.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "__Terminal__.print": {
            "name": "print",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "__Terminal__.input": {
            "name": "input",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "question": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/autotester/html.py": {
        "itemsAreEqual": {
            "name": "itemsAreEqual",
            "location": 39,
            "return": [],
            "arguments": {
                "item0": [],
                "item1": []
            }
        },
        "getRowClsName": {
            "name": "getRowClsName",
            "location": 212,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "HTMLGenerator.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "filenameBase": []
            }
        },
        "HTMLGenerator.generate_html": {
            "name": "generate_html",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "refDict": []
            }
        },
        "HTMLGenerator._writeCSS": {
            "name": "_writeCSS",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "HTMLGenerator._writeStatusHeaderTemplate": {
            "name": "_writeStatusHeaderTemplate",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "HTMLGenerator._writeTableArea": {
            "name": "_writeTableArea",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "DataConverter.writeHiddenResults": {
            "name": "writeHiddenResults",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "refDict": []
            }
        },
        "DataConverter.getPythonResults": {
            "name": "getPythonResults",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataConverter._extractPosResult": {
            "name": "_extractPosResult",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "JSTesterUI.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSTesterUI.setOutputStatus": {
            "name": "setOutputStatus",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "JSTesterUI.appendSeqRowName": {
            "name": "appendSeqRowName",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "errCount": []
            }
        },
        "JSTesterUI.appendTableResult": {
            "name": "appendTableResult",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "testPos": [],
                "testItem": [],
                "refPos": [],
                "refItem": [],
                "collapse": []
            }
        },
        "JSTesterUI.showException": {
            "name": "showException",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "testname": [],
                "exc": []
            }
        },
        "TestModuleExpander.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleExpander.setCollapsed": {
            "name": "setCollapsed",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "collapse": []
            }
        },
        "TestModuleExpander.setupCollapseableHeader": {
            "name": "setupCollapseableHeader",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "startCollapsed": []
            }
        },
        "TestModuleExpander.collapseModule": {
            "name": "collapseModule",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "headerRow": [],
                "doCollapse": []
            }
        },
        "TestModuleExpander._expandCollapseAllFuncs": {
            "name": "_expandCollapseAllFuncs",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModuleExpander.setupCollapseableHeader.toggleCollapse": {
            "name": "toggleCollapse",
            "location": 326,
            "return": [],
            "arguments": {
                "evt": []
            }
        },
        "TestModuleExpander._expandCollapseAllFuncs.applyToAll": {
            "name": "applyToAll",
            "location": 358,
            "return": [],
            "arguments": {
                "evt": [],
                "collapse": []
            }
        },
        "TestModuleExpander._expandCollapseAllFuncs.collapseAll": {
            "name": "collapseAll",
            "location": 370,
            "return": [],
            "arguments": {
                "evt": []
            }
        },
        "TestModuleExpander._expandCollapseAllFuncs.expandAll": {
            "name": "expandAll",
            "location": 377,
            "return": [],
            "arguments": {
                "evt": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/autotester/__init__.py": {
        "getFileLocation": {
            "name": "getFileLocation",
            "location": 20,
            "return": [],
            "arguments": {
                "ancestor": []
            }
        },
        "AutoTester.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": []
            }
        },
        "AutoTester.sortedRepr": {
            "name": "sortedRepr",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "any": []
            }
        },
        "AutoTester.check": {
            "name": "check",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoTester.expectException": {
            "name": "expectException",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "AutoTester.throwToError": {
            "name": "throwToError",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "AutoTester.checkEval": {
            "name": "checkEval",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "AutoTester.checkPad": {
            "name": "checkPad",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "count": []
            }
        },
        "AutoTester._getTotalErrorCnt": {
            "name": "_getTotalErrorCnt",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "testData": [],
                "refData": []
            }
        },
        "AutoTester.compare": {
            "name": "compare",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoTester._cleanName": {
            "name": "_cleanName",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AutoTester.run": {
            "name": "run",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "testlet": [],
                "testletName": []
            }
        },
        "AutoTester.done": {
            "name": "done",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoTester.sortedRepr.tryGetNumKey": {
            "name": "tryGetNumKey",
            "location": 125,
            "return": [],
            "arguments": {
                "key": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/minify/__init__.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [],
            "arguments": {
                "targetDir": [],
                "sourceFileName": [],
                "targetFileName": [],
                "mapFileName": [],
                "prettify": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/__init__.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [],
            "arguments": {
                "sourceFile": [],
                "parseTree": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 22,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/api.py": {
        "check": {
            "name": "check",
            "location": 16,
            "return": [],
            "arguments": {
                "codeString": [],
                "filename": [],
                "reporter": []
            }
        },
        "checkPath": {
            "name": "checkPath",
            "location": 64,
            "return": [],
            "arguments": {
                "filename": [],
                "reporter": []
            }
        },
        "iterSourceCode": {
            "name": "iterSourceCode",
            "location": 99,
            "return": [],
            "arguments": {
                "paths": []
            }
        },
        "checkRecursive": {
            "name": "checkRecursive",
            "location": 117,
            "return": [],
            "arguments": {
                "paths": [],
                "reporter": []
            }
        },
        "_exitOnSignal": {
            "name": "_exitOnSignal",
            "location": 133,
            "return": [],
            "arguments": {
                "sigName": [],
                "message": []
            }
        },
        "main": {
            "name": "main",
            "location": 160,
            "return": [],
            "arguments": {
                "prog": []
            }
        },
        "_exitOnSignal.handler": {
            "name": "handler",
            "location": 149,
            "return": [],
            "arguments": {
                "sig": [],
                "f": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/checker.py": {
        "iter_child_nodes": {
            "name": "iter_child_nodes",
            "location": 71,
            "return": [],
            "arguments": {
                "node": [],
                "omit": [],
                "_fields_order": []
            }
        },
        "getNodeName": {
            "name": "getNodeName",
            "location": 248,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "getNodeType": {
            "name": "getNodeType",
            "location": 34,
            "return": [],
            "arguments": {
                "node_class": []
            }
        },
        "getAlternatives": {
            "name": "getAlternatives",
            "location": 45,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "_FieldsOrder._get_fields": {
            "name": "_get_fields",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "node_class": []
            }
        },
        "_FieldsOrder.__missing__": {
            "name": "__missing__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "node_class": []
            }
        },
        "Binding.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "source": []
            }
        },
        "Binding.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Binding.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Binding.redefines": {
            "name": "redefines",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Importation.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "source": []
            }
        },
        "Importation.redefines": {
            "name": "redefines",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExportBinding.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "source": [],
                "scope": []
            }
        },
        "Scope.__repr__": {
            "name": "__repr__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScope.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScope.unusedAssignments": {
            "name": "unusedAssignments",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Checker.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "filename": [],
                "builtins": [],
                "withDoctest": []
            }
        },
        "Checker.deferFunction": {
            "name": "deferFunction",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "callable": []
            }
        },
        "Checker.deferAssignment": {
            "name": "deferAssignment",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "callable": []
            }
        },
        "Checker.runDeferred": {
            "name": "runDeferred",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "deferred": []
            }
        },
        "Checker.scope": {
            "name": "scope",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Checker.popScope": {
            "name": "popScope",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Checker.checkDeadScopes": {
            "name": "checkDeadScopes",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Checker.pushScope": {
            "name": "pushScope",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "scopeClass": []
            }
        },
        "Checker.report": {
            "name": "report",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "messageClass": []
            }
        },
        "Checker.getParent": {
            "name": "getParent",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.getCommonAncestor": {
            "name": "getCommonAncestor",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "lnode": [],
                "rnode": [],
                "stop": []
            }
        },
        "Checker.descendantOf": {
            "name": "descendantOf",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "ancestors": [],
                "stop": []
            }
        },
        "Checker.differentForks": {
            "name": "differentForks",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "lnode": [],
                "rnode": []
            }
        },
        "Checker.addBinding": {
            "name": "addBinding",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "value": []
            }
        },
        "Checker.getNodeHandler": {
            "name": "getNodeHandler",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "node_class": []
            }
        },
        "Checker.handleNodeLoad": {
            "name": "handleNodeLoad",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.handleNodeStore": {
            "name": "handleNodeStore",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.handleNodeDelete": {
            "name": "handleNodeDelete",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.handleChildren": {
            "name": "handleChildren",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "omit": []
            }
        },
        "Checker.isLiteralTupleUnpacking": {
            "name": "isLiteralTupleUnpacking",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.isDocstring": {
            "name": "isDocstring",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.getDocstring": {
            "name": "getDocstring",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.handleNode": {
            "name": "handleNode",
            "location": 593,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "parent": []
            }
        },
        "Checker.handleDoctests": {
            "name": "handleDoctests",
            "location": 617,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.ignore": {
            "name": "ignore",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.GLOBAL": {
            "name": "GLOBAL",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.GENERATOREXP": {
            "name": "GENERATOREXP",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.NAME": {
            "name": "NAME",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.RETURN": {
            "name": "RETURN",
            "location": 740,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.YIELD": {
            "name": "YIELD",
            "location": 753,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.FUNCTIONDEF": {
            "name": "FUNCTIONDEF",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.LAMBDA": {
            "name": "LAMBDA",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.CLASSDEF": {
            "name": "CLASSDEF",
            "location": 850,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.AUGASSIGN": {
            "name": "AUGASSIGN",
            "location": 871,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.IMPORT": {
            "name": "IMPORT",
            "location": 876,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.IMPORTFROM": {
            "name": "IMPORTFROM",
            "location": 882,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.TRY": {
            "name": "TRY",
            "location": 901,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.EXCEPTHANDLER": {
            "name": "EXCEPTHANDLER",
            "location": 920,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.handleNodeDelete.on_conditional_branch": {
            "name": "on_conditional_branch",
            "location": 537,
            "return": [],
            "arguments": {}
        },
        "Checker.LAMBDA.runFunction": {
            "name": "runFunction",
            "location": 815,
            "return": [],
            "arguments": {}
        },
        "Checker.LAMBDA.addArgs": {
            "name": "addArgs",
            "location": 774,
            "return": [],
            "arguments": {
                "arglist": []
            }
        },
        "Checker.LAMBDA.runFunction.checkUnusedAssignments": {
            "name": "checkUnusedAssignments",
            "location": 828,
            "return": [],
            "arguments": {}
        },
        "Checker.LAMBDA.runFunction.checkReturnWithArgumentInsideGenerator": {
            "name": "checkReturnWithArgumentInsideGenerator",
            "location": 837,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/messages.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnusedImport.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": []
            }
        },
        "RedefinedWhileUnused.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": [],
                "orig_loc": []
            }
        },
        "RedefinedInListComp.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": [],
                "orig_loc": []
            }
        },
        "ImportShadowedByLoopVar.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": [],
                "orig_loc": []
            }
        },
        "ImportStarUsed.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "modname": []
            }
        },
        "UndefinedName.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": []
            }
        },
        "DoctestSyntaxError.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "position": []
            }
        },
        "UndefinedExport.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": []
            }
        },
        "UndefinedLocal.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": [],
                "orig_loc": []
            }
        },
        "DuplicateArgument.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "name": []
            }
        },
        "LateFutureImport.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "names": []
            }
        },
        "UnusedVariable.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "loc": [],
                "names": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/reporter.py": {
        "_makeDefaultReporter": {
            "name": "_makeDefaultReporter",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "Reporter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "warningStream": [],
                "errorStream": []
            }
        },
        "Reporter.unexpectedError": {
            "name": "unexpectedError",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "msg": []
            }
        },
        "Reporter.syntaxError": {
            "name": "syntaxError",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "msg": [],
                "lineno": [],
                "offset": [],
                "text": []
            }
        },
        "Reporter.flake": {
            "name": "flake",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/__main__.py": {},
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/scripts/pyflakes.py": {},
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/scripts/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/harness.py": {
        "TestCase.flakes": {
            "name": "flakes",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "TestCase.assertIs": {
            "name": "assertIs",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "expr1": [],
                "expr2": [],
                "msg": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/test_api.py": {
        "withStderrTo": {
            "name": "withStderrTo",
            "location": 27,
            "return": [],
            "arguments": {
                "stderr": [],
                "f": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "lineno": [],
                "col_offset": []
            }
        },
        "LoggingReporter.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "log": []
            }
        },
        "LoggingReporter.flake": {
            "name": "flake",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "LoggingReporter.unexpectedError": {
            "name": "unexpectedError",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "message": []
            }
        },
        "LoggingReporter.syntaxError": {
            "name": "syntaxError",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "msg": [],
                "lineno": [],
                "offset": [],
                "line": []
            }
        },
        "TestIterSourceCode.setUp": {
            "name": "setUp",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.tearDown": {
            "name": "tearDown",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.makeEmptyFile": {
            "name": "makeEmptyFile",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.test_emptyDirectory": {
            "name": "test_emptyDirectory",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.test_singleFile": {
            "name": "test_singleFile",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.test_onlyPythonSource": {
            "name": "test_onlyPythonSource",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.test_recurses": {
            "name": "test_recurses",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.test_multipleDirectories": {
            "name": "test_multipleDirectories",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterSourceCode.test_explicitFiles": {
            "name": "test_explicitFiles",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReporter.test_syntaxError": {
            "name": "test_syntaxError",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReporter.test_syntaxErrorNoOffset": {
            "name": "test_syntaxErrorNoOffset",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReporter.test_multiLineSyntaxError": {
            "name": "test_multiLineSyntaxError",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReporter.test_unexpectedError": {
            "name": "test_unexpectedError",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReporter.test_flake": {
            "name": "test_flake",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.makeTempFile": {
            "name": "makeTempFile",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "CheckTests.assertHasErrors": {
            "name": "assertHasErrors",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "errorList": []
            }
        },
        "CheckTests.getErrors": {
            "name": "getErrors",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CheckTests.test_legacyScript": {
            "name": "test_legacyScript",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_missingTrailingNewline": {
            "name": "test_missingTrailingNewline",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_checkPathNonExisting": {
            "name": "test_checkPathNonExisting",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_multilineSyntaxError": {
            "name": "test_multilineSyntaxError",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_eofSyntaxError": {
            "name": "test_eofSyntaxError",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_eofSyntaxErrorWithTab": {
            "name": "test_eofSyntaxErrorWithTab",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_nonDefaultFollowsDefaultSyntaxError": {
            "name": "test_nonDefaultFollowsDefaultSyntaxError",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_nonKeywordAfterKeywordSyntaxError": {
            "name": "test_nonKeywordAfterKeywordSyntaxError",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_invalidEscape": {
            "name": "test_invalidEscape",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_permissionDenied": {
            "name": "test_permissionDenied",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_pyflakesWarning": {
            "name": "test_pyflakesWarning",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_encodedFileUTF8": {
            "name": "test_encodedFileUTF8",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_CRLFLineEndings": {
            "name": "test_CRLFLineEndings",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_misencodedFileUTF8": {
            "name": "test_misencodedFileUTF8",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_misencodedFileUTF16": {
            "name": "test_misencodedFileUTF16",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_checkRecursive": {
            "name": "test_checkRecursive",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.setUp": {
            "name": "setUp",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.tearDown": {
            "name": "tearDown",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.getPyflakesBinary": {
            "name": "getPyflakesBinary",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.runPyflakes": {
            "name": "runPyflakes",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "paths": [],
                "stdin": []
            }
        },
        "IntegrationTests.test_goodFile": {
            "name": "test_goodFile",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.test_fileWithFlakes": {
            "name": "test_fileWithFlakes",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.test_errors": {
            "name": "test_errors",
            "location": 589,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.test_readFromStdin": {
            "name": "test_readFromStdin",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckTests.test_multilineSyntaxError.evaluate": {
            "name": "evaluate",
            "location": 309,
            "return": [],
            "arguments": {
                "source": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/test_doctests.py": {
        "_DoctestMixin.doctestify": {
            "name": "doctestify",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "_DoctestMixin.flakes": {
            "name": "flakes",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "Test.test_importBeforeDoctest": {
            "name": "test_importBeforeDoctest",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_importBeforeAndInDoctest": {
            "name": "test_importBeforeAndInDoctest",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_importInDoctestAndAfter": {
            "name": "test_importInDoctestAndAfter",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_offsetInDoctests": {
            "name": "test_offsetInDoctests",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_offsetInLambdasInDoctests": {
            "name": "test_offsetInLambdasInDoctests",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_offsetAfterDoctests": {
            "name": "test_offsetAfterDoctests",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_syntaxErrorInDoctest": {
            "name": "test_syntaxErrorInDoctest",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_indentationErrorInDoctest": {
            "name": "test_indentationErrorInDoctest",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_offsetWithMultiLineArgs": {
            "name": "test_offsetWithMultiLineArgs",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_doctestCanReferToFunction": {
            "name": "test_doctestCanReferToFunction",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_doctestCanReferToClass": {
            "name": "test_doctestCanReferToClass",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_noOffsetSyntaxErrorInDoctest": {
            "name": "test_noOffsetSyntaxErrorInDoctest",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_singleUnderscoreInDoctest": {
            "name": "test_singleUnderscoreInDoctest",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImports.test_futureImport": {
            "name": "test_futureImport",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImports.test_futureImportUsed": {
            "name": "test_futureImportUsed",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUndefinedNames.test_doubleNestingReportsClosestName": {
            "name": "test_doubleNestingReportsClosestName",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/test_imports.py": {
        "Test.test_unusedImport": {
            "name": "test_unusedImport",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_aliasedImport": {
            "name": "test_aliasedImport",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedImport": {
            "name": "test_usedImport",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedWhileUnused": {
            "name": "test_redefinedWhileUnused",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedIf": {
            "name": "test_redefinedIf",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedIfElse": {
            "name": "test_redefinedIfElse",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTry": {
            "name": "test_redefinedTry",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryExcept": {
            "name": "test_redefinedTryExcept",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryNested": {
            "name": "test_redefinedTryNested",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryExceptMulti": {
            "name": "test_redefinedTryExceptMulti",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryElse": {
            "name": "test_redefinedTryElse",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryExceptElse": {
            "name": "test_redefinedTryExceptElse",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryExceptFinally": {
            "name": "test_redefinedTryExceptFinally",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryExceptElseFinally": {
            "name": "test_redefinedTryExceptElseFinally",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedByFunction": {
            "name": "test_redefinedByFunction",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedInNestedFunction": {
            "name": "test_redefinedInNestedFunction",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedInNestedFunctionTwice": {
            "name": "test_redefinedInNestedFunctionTwice",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedButUsedLater": {
            "name": "test_redefinedButUsedLater",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedByClass": {
            "name": "test_redefinedByClass",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedBySubclass": {
            "name": "test_redefinedBySubclass",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedInClass": {
            "name": "test_redefinedInClass",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInFunction": {
            "name": "test_usedInFunction",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_shadowedByParameter": {
            "name": "test_shadowedByParameter",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_newAssignment": {
            "name": "test_newAssignment",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInGetattr": {
            "name": "test_usedInGetattr",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInSlice": {
            "name": "test_usedInSlice",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInIfBody": {
            "name": "test_usedInIfBody",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInIfConditional": {
            "name": "test_usedInIfConditional",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInElifConditional": {
            "name": "test_usedInElifConditional",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInElse": {
            "name": "test_usedInElse",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInCall": {
            "name": "test_usedInCall",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInClass": {
            "name": "test_usedInClass",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInClassBase": {
            "name": "test_usedInClassBase",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_notUsedInNestedScope": {
            "name": "test_notUsedInNestedScope",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInFor": {
            "name": "test_usedInFor",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInForElse": {
            "name": "test_usedInForElse",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedByFor": {
            "name": "test_redefinedByFor",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_shadowedByFor": {
            "name": "test_shadowedByFor",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_shadowedByForDeep": {
            "name": "test_shadowedByForDeep",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInReturn": {
            "name": "test_usedInReturn",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInOperators": {
            "name": "test_usedInOperators",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInAssert": {
            "name": "test_usedInAssert",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInSubscript": {
            "name": "test_usedInSubscript",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInLogic": {
            "name": "test_usedInLogic",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInList": {
            "name": "test_usedInList",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInTuple": {
            "name": "test_usedInTuple",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInTry": {
            "name": "test_usedInTry",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInExcept": {
            "name": "test_usedInExcept",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedByExcept": {
            "name": "test_redefinedByExcept",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInRaise": {
            "name": "test_usedInRaise",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInYield": {
            "name": "test_usedInYield",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInDict": {
            "name": "test_usedInDict",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInParameterDefault": {
            "name": "test_usedInParameterDefault",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInAttributeAssign": {
            "name": "test_usedInAttributeAssign",
            "location": 462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInKeywordArg": {
            "name": "test_usedInKeywordArg",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInAssignment": {
            "name": "test_usedInAssignment",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInListComp": {
            "name": "test_usedInListComp",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedByListComp": {
            "name": "test_redefinedByListComp",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInTryFinally": {
            "name": "test_usedInTryFinally",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInWhile": {
            "name": "test_usedInWhile",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInGlobal": {
            "name": "test_usedInGlobal",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedAndGlobal": {
            "name": "test_usedAndGlobal",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_assignedToGlobal": {
            "name": "test_assignedToGlobal",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInBackquote": {
            "name": "test_usedInBackquote",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInExec": {
            "name": "test_usedInExec",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInLambda": {
            "name": "test_usedInLambda",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_shadowedByLambda": {
            "name": "test_shadowedByLambda",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedInSliceObj": {
            "name": "test_usedInSliceObj",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_unusedInNestedScope": {
            "name": "test_unusedInNestedScope",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_methodsDontUseClassScope": {
            "name": "test_methodsDontUseClassScope",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_nestedFunctionsNestScope": {
            "name": "test_nestedFunctionsNestScope",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_nestedClassAndFunctionScope": {
            "name": "test_nestedClassAndFunctionScope",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_importStar": {
            "name": "test_importStar",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_packageImport": {
            "name": "test_packageImport",
            "location": 595,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_unusedPackageImport": {
            "name": "test_unusedPackageImport",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_duplicateSubmoduleImport": {
            "name": "test_duplicateSubmoduleImport",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_differentSubmoduleImport": {
            "name": "test_differentSubmoduleImport",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_assignRHSFirst": {
            "name": "test_assignRHSFirst",
            "location": 641,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_tryingMultipleImports": {
            "name": "test_tryingMultipleImports",
            "location": 647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_nonGlobalDoesNotRedefine": {
            "name": "test_nonGlobalDoesNotRedefine",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_functionsRunLater": {
            "name": "test_functionsRunLater",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_functionNamesAreBoundNow": {
            "name": "test_functionNamesAreBoundNow",
            "location": 672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_ignoreNonImportRedefinitions": {
            "name": "test_ignoreNonImportRedefinitions",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_importingForImportError": {
            "name": "test_importingForImportError",
            "location": 684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_importedInClass": {
            "name": "test_importedInClass",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_importUsedInMethodDefinition": {
            "name": "test_importUsedInMethodDefinition",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_futureImport": {
            "name": "test_futureImport",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_futureImportFirst": {
            "name": "test_futureImportFirst",
            "location": 722,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_futureImportUsed": {
            "name": "test_futureImportUsed",
            "location": 736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_ignoredInFunction": {
            "name": "test_ignoredInFunction",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_ignoredInClass": {
            "name": "test_ignoredInClass",
            "location": 761,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_warningSuppressed": {
            "name": "test_warningSuppressed",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_augmentedAssignment": {
            "name": "test_augmentedAssignment",
            "location": 786,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_unrecognizable": {
            "name": "test_unrecognizable",
            "location": 799,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_unboundExported": {
            "name": "test_unboundExported",
            "location": 813,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_importStarExported": {
            "name": "test_importStarExported",
            "location": 828,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_usedInGenExp": {
            "name": "test_usedInGenExp",
            "location": 837,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_redefinedByGenExp": {
            "name": "test_redefinedByGenExp",
            "location": 844,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecialAll.test_usedAsDecorator": {
            "name": "test_usedAsDecorator",
            "location": 852,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Python26Tests.test_usedAsClassDecorator": {
            "name": "test_usedAsClassDecorator",
            "location": 885,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/test_other.py": {
        "Test.test_duplicateArgs": {
            "name": "test_duplicateArgs",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_localReferencedBeforeAssignment": {
            "name": "test_localReferencedBeforeAssignment",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedInListComp": {
            "name": "test_redefinedInListComp",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedInGenerator": {
            "name": "test_redefinedInGenerator",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedInSetComprehension": {
            "name": "test_redefinedInSetComprehension",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedInDictComprehension": {
            "name": "test_redefinedInDictComprehension",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedFunction": {
            "name": "test_redefinedFunction",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedClassFunction": {
            "name": "test_redefinedClassFunction",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedIfElseFunction": {
            "name": "test_redefinedIfElseFunction",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedIfFunction": {
            "name": "test_redefinedIfFunction",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryExceptFunction": {
            "name": "test_redefinedTryExceptFunction",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedTryFunction": {
            "name": "test_redefinedTryFunction",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedIfElseInListComp": {
            "name": "test_redefinedIfElseInListComp",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_redefinedElseInListComp": {
            "name": "test_redefinedElseInListComp",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_functionDecorator": {
            "name": "test_functionDecorator",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_classFunctionDecorator": {
            "name": "test_classFunctionDecorator",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_modernProperty": {
            "name": "test_modernProperty",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_unaryPlus": {
            "name": "test_unaryPlus",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_undefinedBaseClass": {
            "name": "test_undefinedBaseClass",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_classNameUndefinedInClassBody": {
            "name": "test_classNameUndefinedInClassBody",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_classNameDefinedPreviously": {
            "name": "test_classNameDefinedPreviously",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_classRedefinition": {
            "name": "test_classRedefinition",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_functionRedefinedAsClass": {
            "name": "test_functionRedefinedAsClass",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_classRedefinedAsFunction": {
            "name": "test_classRedefinedAsFunction",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_classWithReturn": {
            "name": "test_classWithReturn",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_doubleAssignment": {
            "name": "test_doubleAssignment",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_doubleAssignmentConditionally": {
            "name": "test_doubleAssignmentConditionally",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_doubleAssignmentWithUse": {
            "name": "test_doubleAssignmentWithUse",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_comparison": {
            "name": "test_comparison",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_identity": {
            "name": "test_identity",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_containment": {
            "name": "test_containment",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_loopControl": {
            "name": "test_loopControl",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_ellipsis": {
            "name": "test_ellipsis",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_extendedSlice": {
            "name": "test_extendedSlice",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_varAugmentedAssignment": {
            "name": "test_varAugmentedAssignment",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_attrAugmentedAssignment": {
            "name": "test_attrAugmentedAssignment",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_globalDeclaredInDifferentScope": {
            "name": "test_globalDeclaredInDifferentScope",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_unusedVariable": {
            "name": "test_unusedVariable",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_unusedVariableAsLocals": {
            "name": "test_unusedVariableAsLocals",
            "location": 504,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_unusedVariableNoLocals": {
            "name": "test_unusedVariableNoLocals",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_unusedReassignedVariable": {
            "name": "test_unusedReassignedVariable",
            "location": 527,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_variableUsedInLoop": {
            "name": "test_variableUsedInLoop",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_assignToGlobal": {
            "name": "test_assignToGlobal",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_assignToNonlocal": {
            "name": "test_assignToNonlocal",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_assignToMember": {
            "name": "test_assignToMember",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_assignInForLoop": {
            "name": "test_assignInForLoop",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_assignInListComprehension": {
            "name": "test_assignInListComprehension",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_generatorExpression": {
            "name": "test_generatorExpression",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_assignmentInsideLoop": {
            "name": "test_assignmentInsideLoop",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_tupleUnpacking": {
            "name": "test_tupleUnpacking",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_listUnpacking": {
            "name": "test_listUnpacking",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_closedOver": {
            "name": "test_closedOver",
            "location": 675,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_doubleClosedOver": {
            "name": "test_doubleClosedOver",
            "location": 687,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_tracebackhideSpecialVariable": {
            "name": "test_tracebackhideSpecialVariable",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_ifexp": {
            "name": "test_ifexp",
            "location": 711,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementNoNames": {
            "name": "test_withStatementNoNames",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementSingleName": {
            "name": "test_withStatementSingleName",
            "location": 732,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementAttributeName": {
            "name": "test_withStatementAttributeName",
            "location": 744,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementSubscript": {
            "name": "test_withStatementSubscript",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementSubscriptUndefined": {
            "name": "test_withStatementSubscriptUndefined",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementTupleNames": {
            "name": "test_withStatementTupleNames",
            "location": 780,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementListNames": {
            "name": "test_withStatementListNames",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementComplicatedTarget": {
            "name": "test_withStatementComplicatedTarget",
            "location": 804,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementSingleNameUndefined": {
            "name": "test_withStatementSingleNameUndefined",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementTupleNamesUndefined": {
            "name": "test_withStatementTupleNamesUndefined",
            "location": 832,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementSingleNameRedefined": {
            "name": "test_withStatementSingleNameRedefined",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementTupleNamesRedefined": {
            "name": "test_withStatementTupleNamesRedefined",
            "location": 857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementUndefinedInside": {
            "name": "test_withStatementUndefinedInside",
            "location": 870,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementNameDefinedInBody": {
            "name": "test_withStatementNameDefinedInBody",
            "location": 881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_withStatementUndefinedInExpression": {
            "name": "test_withStatementUndefinedInExpression",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_dictComprehension": {
            "name": "test_dictComprehension",
            "location": 911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_setComprehensionAndLiteral": {
            "name": "test_setComprehensionAndLiteral",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_exceptionUsedInExcept": {
            "name": "test_exceptionUsedInExcept",
            "location": 929,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_exceptWithoutNameInFunction": {
            "name": "test_exceptWithoutNameInFunction",
            "location": 942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_exceptWithoutNameInFunctionTuple": {
            "name": "test_exceptWithoutNameInFunctionTuple",
            "location": 955,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_augmentedAssignmentImportedFunctionCall": {
            "name": "test_augmentedAssignmentImportedFunctionCall",
            "location": 967,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_yieldFromUndefined": {
            "name": "test_yieldFromUndefined",
            "location": 979,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnusedAssignment.test_returnOnly": {
            "name": "test_returnOnly",
            "location": 988,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncStatements.test_asyncDef": {
            "name": "test_asyncDef",
            "location": 996,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncStatements.test_asyncDefAwait": {
            "name": "test_asyncDefAwait",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncStatements.test_asyncDefUndefined": {
            "name": "test_asyncDefUndefined",
            "location": 1010,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncStatements.test_asyncFor": {
            "name": "test_asyncFor",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncStatements.test_asyncWith": {
            "name": "test_asyncWith",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsyncStatements.test_asyncWithItem": {
            "name": "test_asyncWithItem",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/test_return_with_arguments_inside_generator.py": {
        "Test.test_return": {
            "name": "test_return",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_returnNone": {
            "name": "test_returnNone",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_returnYieldExpression": {
            "name": "test_returnYieldExpression",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/test_undefined_names.py": {
        "Test.test_undefined": {
            "name": "test_undefined",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedInListComp": {
            "name": "test_definedInListComp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_undefinedInListComp": {
            "name": "test_undefinedInListComp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_functionsNeedGlobalScope": {
            "name": "test_functionsNeedGlobalScope",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_builtins": {
            "name": "test_builtins",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_builtinWindowsError": {
            "name": "test_builtinWindowsError",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_magicGlobalsFile": {
            "name": "test_magicGlobalsFile",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_magicGlobalsBuiltins": {
            "name": "test_magicGlobalsBuiltins",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_magicGlobalsName": {
            "name": "test_magicGlobalsName",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_magicGlobalsPath": {
            "name": "test_magicGlobalsPath",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_globalImportStar": {
            "name": "test_globalImportStar",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_localImportStar": {
            "name": "test_localImportStar",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_unpackedParameter": {
            "name": "test_unpackedParameter",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedByGlobal": {
            "name": "test_definedByGlobal",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedByGlobalMultipleNames": {
            "name": "test_definedByGlobalMultipleNames",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_globalInGlobalScope": {
            "name": "test_globalInGlobalScope",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_del": {
            "name": "test_del",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_delGlobal": {
            "name": "test_delGlobal",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_delUndefined": {
            "name": "test_delUndefined",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_delConditional": {
            "name": "test_delConditional",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_delConditionalNested": {
            "name": "test_delConditionalNested",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_delWhile": {
            "name": "test_delWhile",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_delWhileTestUsage": {
            "name": "test_delWhileTestUsage",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_delWhileNested": {
            "name": "test_delWhileNested",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_globalFromNestedScope": {
            "name": "test_globalFromNestedScope",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_laterRedefinedGlobalFromNestedScope": {
            "name": "test_laterRedefinedGlobalFromNestedScope",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_laterRedefinedGlobalFromNestedScope2": {
            "name": "test_laterRedefinedGlobalFromNestedScope2",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_intermediateClassScopeIgnored": {
            "name": "test_intermediateClassScopeIgnored",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_doubleNestingReportsClosestName": {
            "name": "test_doubleNestingReportsClosestName",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_laterRedefinedGlobalFromNestedScope3": {
            "name": "test_laterRedefinedGlobalFromNestedScope3",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_undefinedAugmentedAssignment": {
            "name": "test_undefinedAugmentedAssignment",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_nestedClass": {
            "name": "test_nestedClass",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_badNestedClass": {
            "name": "test_badNestedClass",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedAsStarArgs": {
            "name": "test_definedAsStarArgs",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedAsStarUnpack": {
            "name": "test_definedAsStarUnpack",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_usedAsStarUnpack": {
            "name": "test_usedAsStarUnpack",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_unusedAsStarUnpack": {
            "name": "test_unusedAsStarUnpack",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_keywordOnlyArgs": {
            "name": "test_keywordOnlyArgs",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_keywordOnlyArgsUndefined": {
            "name": "test_keywordOnlyArgsUndefined",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_annotationUndefined": {
            "name": "test_annotationUndefined",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_metaClassUndefined": {
            "name": "test_metaClassUndefined",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedInGenExp": {
            "name": "test_definedInGenExp",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_undefinedWithErrorHandler": {
            "name": "test_undefinedWithErrorHandler",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedInClass": {
            "name": "test_definedInClass",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_undefinedInLoop": {
            "name": "test_undefinedInLoop",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedFromLambdaInDictionaryComprehension": {
            "name": "test_definedFromLambdaInDictionaryComprehension",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_definedFromLambdaInGenerator": {
            "name": "test_definedFromLambdaInGenerator",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_undefinedFromLambdaInDictionaryComprehension": {
            "name": "test_undefinedFromLambdaInDictionaryComprehension",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.test_undefinedFromLambdaInComprehension": {
            "name": "test_undefinedFromLambdaInComprehension",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NameTests.test_impossibleContext": {
            "name": "test_impossibleContext",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/static_check/pyflakes/pyflakes/test/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/org/transcrypt/stubs/browser.py": {
        "print": {
            "name": "print",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "__new__": {
            "name": "__new__",
            "location": 42,
            "return": [],
            "arguments": {
                "constructedObject": []
            }
        },
        "__set_stubsymbols__": {
            "name": "__set_stubsymbols__",
            "location": 46,
            "return": [],
            "arguments": {
                "symbols": []
            }
        },
        "__pragma__": {
            "name": "__pragma__",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "window.alert": {
            "name": "alert",
            "location": 31,
            "return": [],
            "arguments": {
                "anObject": []
            }
        },
        "window.console.log": {
            "name": "log",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "window.console.dir": {
            "name": "dir",
            "location": 28,
            "return": [],
            "arguments": {
                "arg": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/org/transcrypt/type_check/__init__.py": {
        "run": {
            "name": "run",
            "location": 13,
            "return": [],
            "arguments": {
                "sourcePath": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/random/__init__.py": {
        "_fill_array": {
            "name": "_fill_array",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "_random_integer": {
            "name": "_random_integer",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "seed": {
            "name": "seed",
            "location": 33,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "randint": {
            "name": "randint",
            "location": 40,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "choice": {
            "name": "choice",
            "location": 43,
            "return": [],
            "arguments": {
                "seq": []
            }
        },
        "random": {
            "name": "random",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "shuffle": {
            "name": "shuffle",
            "location": 49,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/re/translate.py": {
        "generateGroupSpans": {
            "name": "generateGroupSpans",
            "location": 31,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "countCaptureGroups": {
            "name": "countCaptureGroups",
            "location": 46,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "getCaptureGroup": {
            "name": "getCaptureGroup",
            "location": 58,
            "return": [],
            "arguments": {
                "groupInfo": [],
                "namedGroups": [],
                "groupRef": []
            }
        },
        "splitIfElse": {
            "name": "splitIfElse",
            "location": 80,
            "return": [],
            "arguments": {
                "tokens": [],
                "namedGroups": []
            }
        },
        "shift": {
            "name": "shift",
            "location": 165,
            "return": [],
            "arguments": {
                "stack": [],
                "queue": []
            }
        },
        "shiftReduce": {
            "name": "shiftReduce",
            "location": 174,
            "return": [],
            "arguments": {
                "stack": [],
                "queue": [],
                "namedGroups": [],
                "flags": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 304,
            "return": [],
            "arguments": {
                "rgx": []
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "klass": []
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "paras": [],
                "pure": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.resolve": {
            "name": "resolve",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/re/__init__.py": {
        "compile": {
            "name": "compile",
            "location": 721,
            "return": [],
            "arguments": {
                "pattern": [],
                "flags": []
            }
        },
        "search": {
            "name": "search",
            "location": 731,
            "return": [],
            "arguments": {
                "pattern": [],
                "string": [],
                "flags": []
            }
        },
        "match": {
            "name": "match",
            "location": 737,
            "return": [],
            "arguments": {
                "pattern": [],
                "string": [],
                "flags": []
            }
        },
        "fullmatch": {
            "name": "fullmatch",
            "location": 743,
            "return": [],
            "arguments": {
                "pattern": [],
                "string": [],
                "flags": []
            }
        },
        "split": {
            "name": "split",
            "location": 749,
            "return": [],
            "arguments": {
                "pattern": [],
                "string": [],
                "maxsplit": [],
                "flags": []
            }
        },
        "findall": {
            "name": "findall",
            "location": 755,
            "return": [],
            "arguments": {
                "pattern": [],
                "string": [],
                "flags": []
            }
        },
        "finditer": {
            "name": "finditer",
            "location": 761,
            "return": [],
            "arguments": {
                "pattern": [],
                "string": [],
                "flags": []
            }
        },
        "sub": {
            "name": "sub",
            "location": 767,
            "return": [],
            "arguments": {
                "pattern": [],
                "repl": [],
                "string": [],
                "count": [],
                "flags": []
            }
        },
        "subn": {
            "name": "subn",
            "location": 773,
            "return": [],
            "arguments": {
                "pattern": [],
                "repl": [],
                "string": [],
                "count": [],
                "flags": []
            }
        },
        "escape": {
            "name": "escape",
            "location": 779,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "purge": {
            "name": "purge",
            "location": 804,
            "return": [],
            "arguments": {}
        },
        "error.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "error": [],
                "pattern": [],
                "flags": [],
                "pos": []
            }
        },
        "ReIndexError.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "mObj": [],
                "string": [],
                "pos": [],
                "endpos": [],
                "rObj": [],
                "namedGroups": []
            }
        },
        "Match._getPos": {
            "name": "_getPos",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match._setPos": {
            "name": "_setPos",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Match._getEndPos": {
            "name": "_getEndPos",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match._setEndPos": {
            "name": "_setEndPos",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Match._getRe": {
            "name": "_getRe",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match._setRe": {
            "name": "_setRe",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Match._getString": {
            "name": "_getString",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match._setString": {
            "name": "_setString",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Match._getLastGroup": {
            "name": "_getLastGroup",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match._setLastGroup": {
            "name": "_setLastGroup",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Match._getLastIndex": {
            "name": "_getLastIndex",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match._setLastIndex": {
            "name": "_setLastIndex",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Match._lastMatchGroup": {
            "name": "_lastMatchGroup",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match.expand": {
            "name": "expand",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "template": []
            }
        },
        "Match.group": {
            "name": "group",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match.groups": {
            "name": "groups",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "Match.groupdict": {
            "name": "groupdict",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "Match.start": {
            "name": "start",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Match.end": {
            "name": "end",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Match.span": {
            "name": "span",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Regex.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "flags": []
            }
        },
        "Regex._getPattern": {
            "name": "_getPattern",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Regex._setPattern": {
            "name": "_setPattern",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Regex._getFlags": {
            "name": "_getFlags",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Regex._setFlags": {
            "name": "_setFlags",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Regex._getGroups": {
            "name": "_getGroups",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Regex._setGroups": {
            "name": "_setGroups",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Regex._getGroupIndex": {
            "name": "_getGroupIndex",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Regex._setGroupIndex": {
            "name": "_setGroupIndex",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Regex._compileWrapper": {
            "name": "_compileWrapper",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "flags": []
            }
        },
        "Regex._convertFlags": {
            "name": "_convertFlags",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "flags": []
            }
        },
        "Regex._getTargetStr": {
            "name": "_getTargetStr",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Regex._patternHasCaptures": {
            "name": "_patternHasCaptures",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Regex.search": {
            "name": "search",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Regex.match": {
            "name": "match",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Regex.fullmatch": {
            "name": "fullmatch",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Regex.split": {
            "name": "split",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "maxsplit": []
            }
        },
        "Regex._findAllMatches": {
            "name": "_findAllMatches",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Regex.findall": {
            "name": "findall",
            "location": 587,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Regex.finditer": {
            "name": "finditer",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Regex.sub": {
            "name": "sub",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "repl": [],
                "string": [],
                "count": []
            }
        },
        "Regex.subn": {
            "name": "subn",
            "location": 637,
            "return": [],
            "arguments": {
                "self": [],
                "repl": [],
                "string": [],
                "count": []
            }
        },
        "PyRegExp.__init__": {
            "name": "__init__",
            "location": 702,
            "return": [],
            "arguments": {
                "self": [],
                "pyPattern": [],
                "flags": []
            }
        },
        "escape.replfunc": {
            "name": "replfunc",
            "location": 784,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "Regex.findall.mSelect": {
            "name": "mSelect",
            "location": 598,
            "return": [],
            "arguments": {
                "m": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/sys/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/time/__init__.py": {
        "__debugGetLanguage": {
            "name": "__debugGetLanguage",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "__adapt__": {
            "name": "__adapt__",
            "location": 31,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_lsplit": {
            "name": "_lsplit",
            "location": 73,
            "return": [],
            "arguments": {
                "s": [],
                "sep": [],
                "maxsplit": []
            }
        },
        "_local_time_tuple": {
            "name": "_local_time_tuple",
            "location": 87,
            "return": [],
            "arguments": {
                "jd": []
            }
        },
        "_utc_time_tuple": {
            "name": "_utc_time_tuple",
            "location": 102,
            "return": [],
            "arguments": {
                "jd": []
            }
        },
        "_day_of_year": {
            "name": "_day_of_year",
            "location": 117,
            "return": [],
            "arguments": {
                "jd": [],
                "local": []
            }
        },
        "_is_leap": {
            "name": "_is_leap",
            "location": 144,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "__jan_jun_tz": {
            "name": "__jan_jun_tz",
            "location": 147,
            "return": [],
            "arguments": {
                "t": [],
                "func": []
            }
        },
        "_daylight": {
            "name": "_daylight",
            "location": 165,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_daylight_in_effect": {
            "name": "_daylight_in_effect",
            "location": 183,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_timezone": {
            "name": "_timezone",
            "location": 189,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "__tzn": {
            "name": "__tzn",
            "location": 195,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_tzname": {
            "name": "_tzname",
            "location": 203,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "time": {
            "name": "time",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "asctime": {
            "name": "asctime",
            "location": 247,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "mktime": {
            "name": "mktime",
            "location": 251,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "ctime": {
            "name": "ctime",
            "location": 257,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "localtime": {
            "name": "localtime",
            "location": 270,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "gmtime": {
            "name": "gmtime",
            "location": 283,
            "return": [],
            "arguments": {
                "seconds": [],
                "localtime": []
            }
        },
        "strptime": {
            "name": "strptime",
            "location": 303,
            "return": [],
            "arguments": {
                "string": [],
                "format": []
            }
        },
        "strftime": {
            "name": "strftime",
            "location": 476,
            "return": [],
            "arguments": {
                "format": [],
                "t": []
            }
        },
        "strptime.get_next": {
            "name": "get_next",
            "location": 337,
            "return": [],
            "arguments": {
                "fmt": []
            }
        },
        "strftime.zf2": {
            "name": "zf2",
            "location": 477,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "strptime.get_next.get_sep": {
            "name": "get_sep",
            "location": 339,
            "return": [],
            "arguments": {
                "fmt": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/turtle/__init__.py": {
        "_rightSize": {
            "name": "_rightSize",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bgcolor": {
            "name": "bgcolor",
            "location": 38,
            "return": [],
            "arguments": {
                "color": []
            }
        },
        "setDefaultElement": {
            "name": "setDefaultElement",
            "location": 46,
            "return": [],
            "arguments": {
                "element": []
            }
        },
        "reset": {
            "name": "reset",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "clear": {
            "name": "clear",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "ontimer": {
            "name": "ontimer",
            "location": 240,
            "return": [],
            "arguments": {
                "fun": [],
                "t": []
            }
        },
        "done": {
            "name": "done",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "pensize": {
            "name": "pensize",
            "location": 245,
            "return": [],
            "arguments": {
                "width": []
            }
        },
        "color": {
            "name": "color",
            "location": 246,
            "return": [],
            "arguments": {
                "pencolor": [],
                "fillcolor": []
            }
        },
        "home": {
            "name": "home",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "goto": {
            "name": "goto",
            "location": 248,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "position": {
            "name": "position",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "pos": {
            "name": "pos",
            "location": 250,
            "return": [],
            "arguments": {}
        },
        "distance": {
            "name": "distance",
            "location": 251,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "up": {
            "name": "up",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "down": {
            "name": "down",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "forward": {
            "name": "forward",
            "location": 254,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "back": {
            "name": "back",
            "location": 255,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "circle": {
            "name": "circle",
            "location": 256,
            "return": [],
            "arguments": {
                "radius": []
            }
        },
        "left": {
            "name": "left",
            "location": 257,
            "return": [],
            "arguments": {
                "angle": []
            }
        },
        "right": {
            "name": "right",
            "location": 258,
            "return": [],
            "arguments": {
                "angle": []
            }
        },
        "begin_fill": {
            "name": "begin_fill",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "end_fill": {
            "name": "end_fill",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "speed": {
            "name": "speed",
            "location": 261,
            "return": [],
            "arguments": {
                "speed": []
            }
        },
        "Turtle.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.reset": {
            "name": "reset",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.clear": {
            "name": "clear",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle._flush": {
            "name": "_flush",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.done": {
            "name": "done",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.pensize": {
            "name": "pensize",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "Turtle.color": {
            "name": "color",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "pencolor": [],
                "fillcolor": []
            }
        },
        "Turtle.goto": {
            "name": "goto",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Turtle._moveto": {
            "name": "_moveto",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Turtle.home": {
            "name": "home",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.position": {
            "name": "position",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.pos": {
            "name": "pos",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.distance": {
            "name": "distance",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Turtle.up": {
            "name": "up",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.down": {
            "name": "down",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.isdown": {
            "name": "isdown",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle._predict": {
            "name": "_predict",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Turtle.forward": {
            "name": "forward",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Turtle.back": {
            "name": "back",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Turtle.circle": {
            "name": "circle",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "radius": []
            }
        },
        "Turtle.left": {
            "name": "left",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "angle": []
            }
        },
        "Turtle.right": {
            "name": "right",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "angle": []
            }
        },
        "Turtle.begin_fill": {
            "name": "begin_fill",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.end_fill": {
            "name": "end_fill",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Turtle.speed": {
            "name": "speed",
            "location": 220,
            "return": [],
            "arguments": {
                "speed": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/typing/__init__.py": {},
    "Transcrypt-master/transcrypt/modules/unicodedata/__init__.py": {
        "normalize": {
            "name": "normalize",
            "location": 4,
            "return": [],
            "arguments": {
                "form": [],
                "unistr": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/warnings/__init__.py": {
        "_filters_mutated": {
            "name": "_filters_mutated",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "showwarning": {
            "name": "showwarning",
            "location": 92,
            "return": [],
            "arguments": {
                "message": [],
                "category": [],
                "filename": [],
                "lineno": [],
                "file": [],
                "line": []
            }
        },
        "formatwarning": {
            "name": "formatwarning",
            "location": 97,
            "return": [],
            "arguments": {
                "message": [],
                "category": [],
                "filename": [],
                "lineno": [],
                "line": []
            }
        },
        "_showwarnmsg_impl": {
            "name": "_showwarnmsg_impl",
            "location": 102,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "_formatwarnmsg_impl": {
            "name": "_formatwarnmsg_impl",
            "location": 118,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "setShowWarning": {
            "name": "setShowWarning",
            "location": 135,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_showwarnmsg": {
            "name": "_showwarnmsg",
            "location": 143,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "_formatwarnmsg": {
            "name": "_formatwarnmsg",
            "location": 156,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "addWarningCategory": {
            "name": "addWarningCategory",
            "location": 170,
            "return": [],
            "arguments": {
                "cat": []
            }
        },
        "filterwarnings": {
            "name": "filterwarnings",
            "location": 184,
            "return": [],
            "arguments": {
                "action": [],
                "message": [],
                "category": [],
                "module": [],
                "lineno": [],
                "append": []
            }
        },
        "simplefilter": {
            "name": "simplefilter",
            "location": 205,
            "return": [],
            "arguments": {
                "action": [],
                "category": [],
                "lineno": [],
                "append": []
            }
        },
        "_add_filter": {
            "name": "_add_filter",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "resetwarnings": {
            "name": "resetwarnings",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "_checkCatMatch": {
            "name": "_checkCatMatch",
            "location": 257,
            "return": [],
            "arguments": {
                "msgCat": [],
                "filtCat": []
            }
        },
        "warn_explicit": {
            "name": "warn_explicit",
            "location": 262,
            "return": [],
            "arguments": {
                "message": [],
                "category": [],
                "filename": [],
                "lineno": [],
                "module": [],
                "registry": [],
                "module_globals": []
            }
        },
        "setWarningOptions": {
            "name": "setWarningOptions",
            "location": 466,
            "return": [],
            "arguments": {
                "opts": []
            }
        },
        "_processoptions": {
            "name": "_processoptions",
            "location": 481,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "_setoption": {
            "name": "_setoption",
            "location": 489,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "_getaction": {
            "name": "_getaction",
            "location": 514,
            "return": [],
            "arguments": {
                "action": []
            }
        },
        "_getcategory": {
            "name": "_getcategory",
            "location": 524,
            "return": [],
            "arguments": {
                "category": []
            }
        },
        "WarningMessage.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "category": [],
                "filename": [],
                "lineno": [],
                "file": [],
                "line": []
            }
        },
        "WarningMessage.__str__": {
            "name": "__str__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "catch_warnings.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Transcrypt-master/transcrypt/modules/__future__/__init__.py": {},
    "Transcrypt-master/transcrypt/tutorials/baseline/bl_010_hello_world/hello_world.py": {},
    "Transcrypt-master/transcrypt/tutorials/baseline/bl_020_assign/assign.py": {},
    "Transcrypt-master/transcrypt/tutorials/baseline/bl_030_if_else_prompt/if_else_prompt.py": {},
    "Transcrypt-master/transcrypt/tutorials/baseline/bl_035_if_else_event/if_else_event.py": {
        "greet": {
            "name": "greet",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "tell": {
            "name": "tell",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "Transcrypt-master/transcrypt/tutorials/baseline/bl_040_for_simple/for_simple.py": {},
    "Transcrypt-master/transcrypt/tutorials/baseline/bl_042_for_nested/for_nested.py": {},
    "Transcrypt-master/transcrypt/tutorials/baseline/bl_045_while_simple/while_simple.py": {},
    "Transcrypt-master/transcrypt/tutorials/static_typing/compound_variables.py": {},
    "Transcrypt-master/transcrypt/tutorials/static_typing/functions.py": {
        "f": {
            "name": "f",
            "location": 3,
            "return": [
                "float"
            ],
            "arguments": {
                "l": [
                    "List[List[int]]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 9,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "h": {
            "name": "h",
            "location": 18,
            "return": [
                "Tuple[(int, float, complex)]"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "f": [
                    "float"
                ],
                "c": [
                    "complex"
                ]
            }
        },
        "ff": {
            "name": "ff",
            "location": 24,
            "return": [
                "float"
            ],
            "arguments": {
                "anF": [
                    "Callable[([List[List[int]]], float)]"
                ]
            }
        }
    },
    "Transcrypt-master/transcrypt/tutorials/static_typing/simple_variables.py": {},
    "Transcrypt-master/transcrypt/tutorials/static_typing/static_typing.py": {
        "showResult": {
            "name": "showResult",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    }
}
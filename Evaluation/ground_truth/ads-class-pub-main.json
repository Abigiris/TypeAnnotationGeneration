{
    "ads-class-pub-main/exercises/collatz/collatz.py": {
        "collatz": {
            "name": "collatz",
            "location": 9,
            "return": [
                "tuple[(int, int)]"
            ],
            "arguments": {
                "number": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ads-class-pub-main/exercises/collatz/collatz_test.py": {
        "test_collatz_steps": {
            "name": "test_collatz_steps",
            "location": 30,
            "return": [],
            "arguments": {
                "number": [],
                "steps": []
            }
        },
        "test_collatz_max": {
            "name": "test_collatz_max",
            "location": 51,
            "return": [],
            "arguments": {
                "number": [],
                "max_point": []
            }
        }
    },
    "ads-class-pub-main/exercises/fractions/fractions.py": {
        "gcd": {
            "name": "gcd",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "num_a": [
                    "int"
                ],
                "num_b": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "Fraction.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numerator": [
                    "int"
                ],
                "denominator": [
                    "int"
                ]
            }
        },
        "Fraction.get_numerator": {
            "name": "get_numerator",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fraction.get_denominator": {
            "name": "get_denominator",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fraction.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fraction.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fraction.__eq__": {
            "name": "__eq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Fraction.__gt__": {
            "name": "__gt__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Fraction.__add__": {
            "name": "__add__",
            "location": 100,
            "return": [
                "object"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Fraction.__sub__": {
            "name": "__sub__",
            "location": 111,
            "return": [
                "object"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Fraction.__mul__": {
            "name": "__mul__",
            "location": 122,
            "return": [
                "object"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Fraction.__truediv__": {
            "name": "__truediv__",
            "location": 133,
            "return": [
                "object"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        }
    },
    "ads-class-pub-main/exercises/fractions/fractions_test.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_init_simplification": {
            "name": "test_init_simplification",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_init_numerator_error": {
            "name": "test_init_numerator_error",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_init_numerator_error_2": {
            "name": "test_init_numerator_error_2",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_init_denominator_error": {
            "name": "test_init_denominator_error",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_init_denominator_error_2": {
            "name": "test_init_denominator_error_2",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_get_numerator": {
            "name": "test_get_numerator",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_get_numerator_2": {
            "name": "test_get_numerator_2",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_get_denominator": {
            "name": "test_get_denominator",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_get_denominator_2": {
            "name": "test_get_denominator_2",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_eq_error": {
            "name": "test_eq_error",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_gt": {
            "name": "test_gt",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_gt_error": {
            "name": "test_gt_error",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_ge": {
            "name": "test_ge",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_ge_error": {
            "name": "test_ge_error",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_add_error": {
            "name": "test_add_error",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_sub": {
            "name": "test_sub",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_sub_error": {
            "name": "test_sub_error",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "test_mul": {
            "name": "test_mul",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_mul_error": {
            "name": "test_mul_error",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_truediv": {
            "name": "test_truediv",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "test_truediv_error": {
            "name": "test_truediv_error",
            "location": 183,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/exercises/graphs/graphs.py": {
        "build_graph": {
            "name": "build_graph",
            "location": 202,
            "return": [
                "Graph"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "Vertex.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Vertex.get_key": {
            "name": "get_key",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_neighbor": {
            "name": "get_neighbor",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Vertex.set_neighbor": {
            "name": "set_neighbor",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ],
                "weight": [
                    "int"
                ]
            }
        },
        "Vertex.get_all_neighbors": {
            "name": "get_all_neighbors",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_distance": {
            "name": "get_distance",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_distance": {
            "name": "set_distance",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [
                    "int"
                ]
            }
        },
        "Vertex.get_previous": {
            "name": "get_previous",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_previous": {
            "name": "set_previous",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "previous": []
            }
        },
        "Vertex.get_color": {
            "name": "get_color",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_color": {
            "name": "set_color",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "color": [
                    "str"
                ]
            }
        },
        "Vertex.get_discovery": {
            "name": "get_discovery",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_discovery": {
            "name": "set_discovery",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "time_value": []
            }
        },
        "Vertex.get_finish": {
            "name": "get_finish",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_finish": {
            "name": "set_finish",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "time_value": []
            }
        },
        "Vertex.get_weight": {
            "name": "get_weight",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__lt__": {
            "name": "__lt__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_vertex": {
            "name": "add_vertex",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_vertex": [
                    "str"
                ],
                "to_vertex": [
                    "str"
                ],
                "weight": [
                    "int"
                ]
            }
        },
        "Graph.get_vertex": {
            "name": "get_vertex",
            "location": 137,
            "return": [
                "Vertex"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Graph.get_vertices": {
            "name": "get_vertices",
            "location": 141,
            "return": [
                "list[Vertex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.reset_distances": {
            "name": "reset_distances",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__contains__": {
            "name": "__contains__",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Graph.__iter__": {
            "name": "__iter__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__len__": {
            "name": "__len__",
            "location": 161,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.hub": {
            "name": "hub",
            "location": 166,
            "return": [
                "Vertex"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.size": {
            "name": "size",
            "location": 171,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.dijkstra": {
            "name": "dijkstra",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Vertex"
                ]
            }
        }
    },
    "ads-class-pub-main/exercises/graphs/graphs_test.py": {
        "graph_fixture": {
            "name": "graph_fixture",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_dijkstra_t": {
            "name": "test_dijkstra_t",
            "location": 54,
            "return": [],
            "arguments": {
                "network_graph": [],
                "start": [],
                "expected": []
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 61,
            "return": [],
            "arguments": {
                "network_graph": []
            }
        },
        "test_size": {
            "name": "test_size",
            "location": 66,
            "return": [],
            "arguments": {
                "network_graph": []
            }
        },
        "test_hub": {
            "name": "test_hub",
            "location": 71,
            "return": [],
            "arguments": {
                "network_graph": []
            }
        }
    },
    "ads-class-pub-main/exercises/hashing/hashing.py": {
        "hash_remainder": {
            "name": "hash_remainder",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_mid_sqr": {
            "name": "hash_mid_sqr",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_folding": {
            "name": "hash_folding",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_str": {
            "name": "hash_str",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_str_weighted": {
            "name": "hash_str_weighted",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/exercises/hashing/hashing_test.py": {
        "test_hash_remainder": {
            "name": "test_hash_remainder",
            "location": 27,
            "return": [],
            "arguments": {
                "keys": [],
                "size": [],
                "expected": []
            }
        },
        "test_hash_hash_mid_sqr": {
            "name": "test_hash_hash_mid_sqr",
            "location": 39,
            "return": [],
            "arguments": {
                "keys": [],
                "size": [],
                "expected": []
            }
        },
        "test_hash_folding": {
            "name": "test_hash_folding",
            "location": 51,
            "return": [],
            "arguments": {
                "keys": [],
                "size": [],
                "expected": []
            }
        },
        "test_hash_str": {
            "name": "test_hash_str",
            "location": 77,
            "return": [],
            "arguments": {
                "keys": [],
                "size": [],
                "expected": []
            }
        },
        "test_hash_str_weighted": {
            "name": "test_hash_str_weighted",
            "location": 103,
            "return": [],
            "arguments": {
                "keys": [],
                "size": [],
                "expected": []
            }
        }
    },
    "ads-class-pub-main/exercises/orderedlists/orderedlists.py": {
        "print_list_status": {
            "name": "print_list_status",
            "location": 161,
            "return": [],
            "arguments": {
                "lst": []
            }
        },
        "main": {
            "name": "main",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_data": [
                    "Any"
                ]
            }
        },
        "Node.get_data": {
            "name": "get_data",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.set_data": {
            "name": "set_data",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_data": [
                    "Any"
                ]
            }
        },
        "Node.get_next": {
            "name": "get_next",
            "location": 31,
            "return": [
                "Union[('Node', None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.set_next": {
            "name": "set_next",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_next": [
                    "'Node'"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedList.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedList.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ]
            }
        },
        "OrderedList.__len__": {
            "name": "__len__",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedList.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedList.is_empty": {
            "name": "is_empty",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedList.size": {
            "name": "size",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedList.add": {
            "name": "add",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "OrderedList.pop": {
            "name": "pop",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ]
            }
        },
        "OrderedList.append": {
            "name": "append",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "OrderedList.insert": {
            "name": "insert",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "OrderedList.search": {
            "name": "search",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "OrderedList.index": {
            "name": "index",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "ads-class-pub-main/exercises/orderedlists/orderedlists_test.py": {
        "test_node_init": {
            "name": "test_node_init",
            "location": 16,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_node_init_error": {
            "name": "test_node_init_error",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_node_data_getter": {
            "name": "test_node_data_getter",
            "location": 36,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_node_data_setter": {
            "name": "test_node_data_setter",
            "location": 47,
            "return": [],
            "arguments": {
                "value": [],
                "new_value": []
            }
        },
        "test_node_next_getter": {
            "name": "test_node_next_getter",
            "location": 56,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_node_next_setter": {
            "name": "test_node_next_setter",
            "location": 64,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_node_str": {
            "name": "test_node_str",
            "location": 77,
            "return": [],
            "arguments": {
                "value": [],
                "str_value": []
            }
        },
        "an_empty_list": {
            "name": "an_empty_list",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "the_list": {
            "name": "the_list",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_list_init": {
            "name": "test_list_init",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 105,
            "return": [],
            "arguments": {
                "an_empty_list": [],
                "the_list": []
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 112,
            "return": [],
            "arguments": {
                "an_empty_list": [],
                "the_list": []
            }
        },
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 119,
            "return": [],
            "arguments": {
                "an_empty_list": [],
                "the_list": []
            }
        },
        "test_size": {
            "name": "test_size",
            "location": 126,
            "return": [],
            "arguments": {
                "an_empty_list": [],
                "the_list": []
            }
        },
        "test_add": {
            "name": "test_add",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_orderedlist_search": {
            "name": "test_orderedlist_search",
            "location": 148,
            "return": [],
            "arguments": {
                "the_list": [],
                "value": [],
                "result": []
            }
        },
        "test_append": {
            "name": "test_append",
            "location": 162,
            "return": [],
            "arguments": {
                "a_list": [],
                "expected": []
            }
        },
        "test_insert": {
            "name": "test_insert",
            "location": 180,
            "return": [],
            "arguments": {
                "a_list": [],
                "expected": []
            }
        },
        "test_index": {
            "name": "test_index",
            "location": 198,
            "return": [],
            "arguments": {
                "a_list": [],
                "a_number": [],
                "expected": []
            }
        },
        "test_pop_last": {
            "name": "test_pop_last",
            "location": 210,
            "return": [],
            "arguments": {
                "a_list": [],
                "expected": []
            }
        },
        "test_pop_error_1": {
            "name": "test_pop_error_1",
            "location": 218,
            "return": [],
            "arguments": {
                "an_empty_list": []
            }
        },
        "test_pop_error_2": {
            "name": "test_pop_error_2",
            "location": 226,
            "return": [],
            "arguments": {
                "an_empty_list": []
            }
        },
        "test_pop_error_3": {
            "name": "test_pop_error_3",
            "location": 234,
            "return": [],
            "arguments": {
                "the_list": []
            }
        },
        "test_pop_error_4": {
            "name": "test_pop_error_4",
            "location": 242,
            "return": [],
            "arguments": {
                "the_list": []
            }
        },
        "test_pop": {
            "name": "test_pop",
            "location": 259,
            "return": [],
            "arguments": {
                "a_list": [],
                "position": [],
                "expected": []
            }
        },
        "test_getitem_simple": {
            "name": "test_getitem_simple",
            "location": 269,
            "return": [],
            "arguments": {
                "the_list": [],
                "index": [],
                "value": []
            }
        },
        "test_getitem_error_1": {
            "name": "test_getitem_error_1",
            "location": 274,
            "return": [],
            "arguments": {
                "the_list": []
            }
        },
        "test_getitem_error_2": {
            "name": "test_getitem_error_2",
            "location": 285,
            "return": [],
            "arguments": {
                "an_empty_list": []
            }
        },
        "test_getitem_error_3": {
            "name": "test_getitem_error_3",
            "location": 293,
            "return": [],
            "arguments": {
                "the_list": []
            }
        },
        "test_getitem_error_4": {
            "name": "test_getitem_error_4",
            "location": 301,
            "return": [],
            "arguments": {
                "the_list": []
            }
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 318,
            "return": [],
            "arguments": {
                "a_list": [],
                "position": [],
                "expected": []
            }
        }
    },
    "ads-class-pub-main/exercises/recursion/recursion.py": {
        "gcd": {
            "name": "gcd",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "diamond_ite": {
            "name": "diamond_ite",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "levels": [
                    "int"
                ]
            }
        },
        "diamond_rec": {
            "name": "diamond_rec",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "levels": [
                    "int"
                ]
            }
        },
        "hourglass_ite": {
            "name": "hourglass_ite",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "levels": [
                    "int"
                ]
            }
        },
        "hourglass_rec": {
            "name": "hourglass_rec",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "levels": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/exercises/recursion/recursion_test.py": {
        "test_gcd": {
            "name": "test_gcd",
            "location": 18,
            "return": [],
            "arguments": {
                "number1": [],
                "number2": [],
                "result": []
            }
        },
        "test_diamond_ite": {
            "name": "test_diamond_ite",
            "location": 46,
            "return": [],
            "arguments": {
                "n": [],
                "expected_output": [],
                "capsys": []
            }
        },
        "test_diamond_rec": {
            "name": "test_diamond_rec",
            "location": 76,
            "return": [],
            "arguments": {
                "n": [],
                "expected_output": [],
                "capsys": []
            }
        },
        "test_hourglass_ite": {
            "name": "test_hourglass_ite",
            "location": 106,
            "return": [],
            "arguments": {
                "n": [],
                "expected_output": [],
                "capsys": []
            }
        },
        "test_hourglass_rec": {
            "name": "test_hourglass_rec",
            "location": 136,
            "return": [],
            "arguments": {
                "n": [],
                "expected_output": [],
                "capsys": []
            }
        }
    },
    "ads-class-pub-main/exercises/stacks/stacks.py": {
        "rev_string": {
            "name": "rev_string",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "my_str": [
                    "str"
                ]
            }
        },
        "par_checker": {
            "name": "par_checker",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "par_checker_ext": {
            "name": "par_checker_ext",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "par_checker_file": {
            "name": "par_checker_file",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "base_converter": {
            "name": "base_converter",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "dec_num": [
                    "int"
                ],
                "base": [
                    "int"
                ]
            }
        },
        "rpn_calc": {
            "name": "rpn_calc",
            "location": 71,
            "return": [
                "Union[(int, float)]"
            ],
            "arguments": {
                "postfix_expr": [
                    "str"
                ]
            }
        },
        "do_math": {
            "name": "do_math",
            "location": 77,
            "return": [],
            "arguments": {
                "operation": [
                    "str"
                ],
                "operand1": [
                    "Union[(int, float)]"
                ],
                "operand2": [
                    "Union[(int, float)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "StackError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/exercises/stacks/stacks_test.py": {
        "test_rev_string": {
            "name": "test_rev_string",
            "location": 28,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_par_checker": {
            "name": "test_par_checker",
            "location": 38,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_par_checker_ext": {
            "name": "test_par_checker_ext",
            "location": 47,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_par_checker_file": {
            "name": "test_par_checker_file",
            "location": 52,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_base_converter": {
            "name": "test_base_converter",
            "location": 85,
            "return": [],
            "arguments": {
                "number": [],
                "base": [],
                "expected": []
            }
        },
        "test_base_converter_error": {
            "name": "test_base_converter_error",
            "location": 94,
            "return": [],
            "arguments": {
                "number": [],
                "base": []
            }
        },
        "test_rpn_calc": {
            "name": "test_rpn_calc",
            "location": 106,
            "return": [],
            "arguments": {
                "expression": [],
                "expected": []
            }
        },
        "test_rpn_calc_float": {
            "name": "test_rpn_calc_float",
            "location": 120,
            "return": [],
            "arguments": {
                "expression": [],
                "expected": []
            }
        },
        "test_rpn_calc_stack_err": {
            "name": "test_rpn_calc_stack_err",
            "location": 129,
            "return": [],
            "arguments": {
                "expression": [],
                "err_message": []
            }
        },
        "test_rpn_calc_token_err": {
            "name": "test_rpn_calc_token_err",
            "location": 141,
            "return": [],
            "arguments": {
                "expression": [],
                "err_message": [],
                "token": []
            }
        }
    },
    "ads-class-pub-main/exercises/zoo/zoo.py": {
        "main": {
            "name": "main",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "Animal.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "spec_init": [
                    "str"
                ],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ]
            }
        },
        "Animal.sound": {
            "name": "sound",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Animal.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bird.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "spec_init": [],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ],
                "flying_init": [
                    "bool"
                ]
            }
        },
        "Bird.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mammal.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "spec_init": [
                    "str"
                ],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ],
                "habitat_init": [
                    "str"
                ]
            }
        },
        "Parrot.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ],
                "talking_init": [
                    "bool"
                ]
            }
        },
        "Parrot.sound": {
            "name": "sound",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Penguin.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ]
            }
        },
        "Penguin.sound": {
            "name": "sound",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Canine.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "spec_init": [],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ],
                "habitat_init": [
                    "str"
                ]
            }
        },
        "Feline.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "spec_init": [
                    "str"
                ],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ],
                "habitat_init": [
                    "str"
                ]
            }
        },
        "Feline.sound": {
            "name": "sound",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dog.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ]
            }
        },
        "Dog.sound": {
            "name": "sound",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseCat.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ]
            }
        },
        "BobCat.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "age_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ],
                "habitat_init": [
                    "str"
                ]
            }
        },
        "BobCat.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/exercises/zoo/zoo_test.py": {
        "test_animal_init_error": {
            "name": "test_animal_init_error",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_bird_init_error": {
            "name": "test_bird_init_error",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_mammal_init_error": {
            "name": "test_mammal_init_error",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_canine_init_error": {
            "name": "test_canine_init_error",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_feline_init_error": {
            "name": "test_feline_init_error",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_parrot_init_": {
            "name": "test_parrot_init_",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_parrot_str": {
            "name": "test_parrot_str",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_parrot_sound": {
            "name": "test_parrot_sound",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_penguin_init": {
            "name": "test_penguin_init",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_penguin_str": {
            "name": "test_penguin_str",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_penguin_sound": {
            "name": "test_penguin_sound",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_dog_init": {
            "name": "test_dog_init",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_dog_str": {
            "name": "test_dog_str",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_dog_sound": {
            "name": "test_dog_sound",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_housecat_init": {
            "name": "test_housecat_init",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_housecat_str": {
            "name": "test_housecat_str",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_housecat_sound": {
            "name": "test_housecat_sound",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_bobcat_init": {
            "name": "test_bobcat_init",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "test_bobcat_init_error": {
            "name": "test_bobcat_init_error",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_bobcat_str": {
            "name": "test_bobcat_str",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_bobcat_sound": {
            "name": "test_bobcat_sound",
            "location": 188,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/projects/bank/bank.py": {
        "main": {
            "name": "main",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "Address.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "street": [
                    "str"
                ],
                "city": [
                    "str"
                ],
                "state": [
                    "str"
                ],
                "zip_code": [
                    "str"
                ]
            }
        },
        "Address.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Customer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_init": [
                    "str"
                ],
                "dob_init": [
                    "str"
                ],
                "address_init": [
                    "Address"
                ]
            }
        },
        "Customer.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Customer.move": {
            "name": "move",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_address": [
                    "Address"
                ]
            }
        },
        "Account.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [
                    "Customer"
                ],
                "balance": [
                    "Decimal"
                ]
            }
        },
        "Account.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__eq__": {
            "name": "__eq__",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Account.deposit": {
            "name": "deposit",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "Decimal"
                ]
            }
        },
        "Account.close": {
            "name": "close",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckingAccount.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [
                    "Customer"
                ],
                "fee": [
                    "Decimal"
                ],
                "balance": [
                    "Decimal"
                ]
            }
        },
        "CheckingAccount.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckingAccount.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckingAccount.__eq__": {
            "name": "__eq__",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "CheckingAccount.process_check": {
            "name": "process_check",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "Decimal"
                ]
            }
        },
        "SavingsAccount.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [
                    "Customer"
                ],
                "interest_rate": [
                    "Decimal"
                ],
                "balance": [
                    "Decimal"
                ]
            }
        },
        "SavingsAccount.yield_interest": {
            "name": "yield_interest",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SavingsAccount.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SavingsAccount.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SavingsAccount.__eq__": {
            "name": "__eq__",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        }
    },
    "ads-class-pub-main/projects/bank/bank_test.py": {
        "TestAccount.test_abstract_class_account": {
            "name": "test_abstract_class_account",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_address_init": {
            "name": "test_address_init",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "street": [],
                "city": [],
                "state": [],
                "zip_code": []
            }
        },
        "TestAddress.test_address_members": {
            "name": "test_address_members",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "street": [],
                "city": [],
                "state": [],
                "zip_code": []
            }
        },
        "TestAddress.test_address_repr": {
            "name": "test_address_repr",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "street": [],
                "city": [],
                "state": [],
                "zip_code": []
            }
        },
        "TestAddress.test_address_str": {
            "name": "test_address_str",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "street": [],
                "city": [],
                "state": [],
                "zip_code": []
            }
        },
        "TestAddress.test_address_eq": {
            "name": "test_address_eq",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "street": [],
                "city": [],
                "state": [],
                "zip_code": []
            }
        },
        "TestAddress.test_address_street_setter": {
            "name": "test_address_street_setter",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "street": [],
                "city": [],
                "state": [],
                "zip_code": []
            }
        },
        "TestCustomer.test_customer_init": {
            "name": "test_customer_init",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dob": [],
                "address": []
            }
        },
        "TestCustomer.test_customer_repr": {
            "name": "test_customer_repr",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dob": [],
                "address": []
            }
        },
        "TestCustomer.test_customer_str": {
            "name": "test_customer_str",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dob": [],
                "address": []
            }
        },
        "TestCustomer.test_customer_eq": {
            "name": "test_customer_eq",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dob": [],
                "address": []
            }
        },
        "TestCustomer.test_customer_move": {
            "name": "test_customer_move",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dob": [],
                "address": []
            }
        },
        "TestCheckingAccount.test_checking_account_init": {
            "name": "test_checking_account_init",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestCheckingAccount.test_checking_account_repr": {
            "name": "test_checking_account_repr",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestCheckingAccount.test_checking_account_str": {
            "name": "test_checking_account_str",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestCheckingAccount.test_checking_account_eq": {
            "name": "test_checking_account_eq",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestCheckingAccount.test_checking_account_deposit": {
            "name": "test_checking_account_deposit",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestCheckingAccount.test_checking_account_deposit_error": {
            "name": "test_checking_account_deposit_error",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestCheckingAccount.test_checking_account_close": {
            "name": "test_checking_account_close",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestCheckingAccount.test_checking_process_check": {
            "name": "test_checking_process_check",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "fee": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_init": {
            "name": "test_savings_account_init",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_repr": {
            "name": "test_savings_account_repr",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_str": {
            "name": "test_savings_account_str",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_eq": {
            "name": "test_savings_account_eq",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_deposit": {
            "name": "test_savings_account_deposit",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_deposit_error": {
            "name": "test_savings_account_deposit_error",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_close": {
            "name": "test_savings_account_close",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        },
        "TestSavingsAccount.test_savings_account_yield_interest": {
            "name": "test_savings_account_yield_interest",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "rate": [],
                "balance": []
            }
        }
    },
    "ads-class-pub-main/projects/dice/dice.py": {
        "main": {
            "name": "main",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "Die.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "possible_values": [
                    "Sequence"
                ]
            }
        },
        "Die.value": {
            "name": "value",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "Die.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Die.roll": {
            "name": "roll",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenDie.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "possible_values": [
                    "Sequence"
                ]
            }
        },
        "FrozenDie.frozen": {
            "name": "frozen",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "bool"
                ]
            }
        },
        "FrozenDie.roll": {
            "name": "roll",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cup.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_dice": [
                    "int"
                ],
                "num_sides": [
                    "int"
                ]
            }
        },
        "Cup.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cup.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cup.shake": {
            "name": "shake",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cup.add": {
            "name": "add",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "die": [
                    "Die"
                ]
            }
        },
        "Cup.remove": {
            "name": "remove",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Cup.roll": {
            "name": "roll",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/projects/dice/dice_test.py": {
        "die": {
            "name": "die",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "frozen_die": {
            "name": "frozen_die",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "cup": {
            "name": "cup",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "yahtzee": {
            "name": "yahtzee",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_die_get_value": {
            "name": "test_die_get_value",
            "location": 42,
            "return": [],
            "arguments": {
                "die": []
            }
        },
        "test_die_set_value": {
            "name": "test_die_set_value",
            "location": 52,
            "return": [],
            "arguments": {
                "die": []
            }
        },
        "test_die_str": {
            "name": "test_die_str",
            "location": 60,
            "return": [],
            "arguments": {
                "capsys": [],
                "die": []
            }
        },
        "test_die_roll": {
            "name": "test_die_roll",
            "location": 72,
            "return": [],
            "arguments": {
                "die": []
            }
        },
        "test_frozen_die_roll": {
            "name": "test_frozen_die_roll",
            "location": 82,
            "return": [],
            "arguments": {
                "frozen_die": []
            }
        },
        "test_cup_shake": {
            "name": "test_cup_shake",
            "location": 91,
            "return": [],
            "arguments": {
                "cup": []
            }
        },
        "test_cup_str": {
            "name": "test_cup_str",
            "location": 104,
            "return": [],
            "arguments": {
                "capsys": [],
                "cup": []
            }
        },
        "test_cup_add": {
            "name": "test_cup_add",
            "location": 117,
            "return": [],
            "arguments": {
                "cup": []
            }
        },
        "test_cup_remove": {
            "name": "test_cup_remove",
            "location": 129,
            "return": [],
            "arguments": {
                "cup": []
            }
        },
        "test_cup_roll": {
            "name": "test_cup_roll",
            "location": 141,
            "return": [],
            "arguments": {
                "yahtzee": []
            }
        }
    },
    "ads-class-pub-main/projects/interview/stack.py": {
        "StackError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__bool__": {
            "name": "__bool__",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__len__": {
            "name": "__len__",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/projects/interview/stack_test.py": {
        "test_init": {
            "name": "test_init",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_push": {
            "name": "test_push",
            "location": 22,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "test_pop": {
            "name": "test_pop",
            "location": 34,
            "return": [],
            "arguments": {
                "items": [],
                "result": []
            }
        },
        "test_pop_error": {
            "name": "test_pop_error",
            "location": 43,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "test_peek": {
            "name": "test_peek",
            "location": 57,
            "return": [],
            "arguments": {
                "items": [],
                "result": []
            }
        },
        "test_peek_error": {
            "name": "test_peek_error",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_bool": {
            "name": "test_bool",
            "location": 85,
            "return": [],
            "arguments": {
                "items": [],
                "n": [],
                "result": []
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 98,
            "return": [],
            "arguments": {
                "items": [],
                "size": []
            }
        },
        "test_operations": {
            "name": "test_operations",
            "location": 119,
            "return": [],
            "arguments": {
                "items": [],
                "size": []
            }
        }
    },
    "ads-class-pub-main/projects/kevinbacon/kevinbacon.py": {
        "read_file": {
            "name": "read_file",
            "location": 17,
            "return": [
                "Graph"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "find_max_kbn_actors": {
            "name": "find_max_kbn_actors",
            "location": 24,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/projects/kevinbacon/kevinbacon_test.py": {
        "graph": {
            "name": "graph",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_read_file_vertices": {
            "name": "test_read_file_vertices",
            "location": 27,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "test_read_file_edges": {
            "name": "test_read_file_edges",
            "location": 32,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "test_bfs": {
            "name": "test_bfs",
            "location": 37,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "test_traversal": {
            "name": "test_traversal",
            "location": 44,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "test_max_kbn": {
            "name": "test_max_kbn",
            "location": 54,
            "return": [],
            "arguments": {
                "graph": []
            }
        }
    },
    "ads-class-pub-main/projects/keyboard/keyboard.py": {
        "spell_check": {
            "name": "spell_check",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/projects/keyboard/keyboard_test.py": {
        "test_output": {
            "name": "test_output",
            "location": 32,
            "return": [],
            "arguments": {
                "filename": [],
                "capsys": []
            }
        }
    },
    "ads-class-pub-main/projects/mapadt/mapadt.py": {
        "main": {
            "name": "main",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "HashMap.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "size_init": [
                    "int"
                ]
            }
        },
        "HashMap.__setitem__": {
            "name": "__setitem__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "HashMap.put": {
            "name": "put",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "HashMap.__getitem__": {
            "name": "__getitem__",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "HashMap.get": {
            "name": "get",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "HashMap.__len__": {
            "name": "__len__",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashMap.__contains__": {
            "name": "__contains__",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "HashMap.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashMap._hash": {
            "name": "_hash",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "HashMap._rehash": {
            "name": "_rehash",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "old_hash": [
                    "int"
                ],
                "step": [
                    "int"
                ]
            }
        },
        "HashMap.keys": {
            "name": "keys",
            "location": 117,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashMap.values": {
            "name": "values",
            "location": 126,
            "return": [
                "list[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashMap.items": {
            "name": "items",
            "location": 135,
            "return": [
                "list[tuple[(int, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/projects/mapadt/mapadt_test.py": {
        "empty_map": {
            "name": "empty_map",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "zoo": {
            "name": "zoo",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_setitem_new": {
            "name": "test_setitem_new",
            "location": 49,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_setitem_update": {
            "name": "test_setitem_update",
            "location": 61,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_setitem_error": {
            "name": "test_setitem_error",
            "location": 75,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_getitem_nokey": {
            "name": "test_getitem_nokey",
            "location": 85,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_getitem_validkey": {
            "name": "test_getitem_validkey",
            "location": 95,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_len_empty": {
            "name": "test_len_empty",
            "location": 101,
            "return": [],
            "arguments": {
                "empty_map": []
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 106,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_contains": {
            "name": "test_contains",
            "location": 116,
            "return": [],
            "arguments": {
                "zoo": [],
                "key": [],
                "result": []
            }
        },
        "test_str_empty": {
            "name": "test_str_empty",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 127,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_keys_empty": {
            "name": "test_keys_empty",
            "location": 135,
            "return": [],
            "arguments": {
                "empty_map": []
            }
        },
        "test_keys": {
            "name": "test_keys",
            "location": 140,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_values_empty": {
            "name": "test_values_empty",
            "location": 145,
            "return": [],
            "arguments": {
                "empty_map": []
            }
        },
        "test_values": {
            "name": "test_values",
            "location": 150,
            "return": [],
            "arguments": {
                "zoo": []
            }
        },
        "test_items_empty": {
            "name": "test_items_empty",
            "location": 165,
            "return": [],
            "arguments": {
                "empty_map": []
            }
        },
        "test_items": {
            "name": "test_items",
            "location": 170,
            "return": [],
            "arguments": {
                "zoo": []
            }
        }
    },
    "ads-class-pub-main/projects/morse/morse.py": {
        "main": {
            "name": "main",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "Coder.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "file_in": [
                    "str"
                ]
            }
        },
        "Coder.follow_and_insert": {
            "name": "follow_and_insert",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code_str": [
                    "str"
                ],
                "letter": [
                    "str"
                ]
            }
        },
        "Coder.follow_and_retrieve": {
            "name": "follow_and_retrieve",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code_str": [
                    "str"
                ]
            }
        },
        "Coder.find_path": {
            "name": "find_path",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "BinaryTree"
                ],
                "letter": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Coder.encode": {
            "name": "encode",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "Coder.decode": {
            "name": "decode",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        }
    },
    "ads-class-pub-main/projects/morse/morse_test.py": {
        "fixture_the_tree": {
            "name": "fixture_the_tree",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_init_error": {
            "name": "test_init_error",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_follow_and_insert": {
            "name": "test_follow_and_insert",
            "location": 48,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "code": [
                    "str"
                ],
                "letter": [
                    "str"
                ]
            }
        },
        "test_follow_and_retrieve": {
            "name": "test_follow_and_retrieve",
            "location": 57,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "code": [
                    "str"
                ],
                "letter": [
                    "str"
                ]
            }
        },
        "test_follow_and_retrieve_error": {
            "name": "test_follow_and_retrieve_error",
            "location": 63,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_find_path": {
            "name": "test_find_path",
            "location": 74,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "letter": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_find_path_error": {
            "name": "test_find_path_error",
            "location": 80,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "letter": [
                    "str"
                ]
            }
        },
        "test_encode": {
            "name": "test_encode",
            "location": 94,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "text": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_encode_error": {
            "name": "test_encode_error",
            "location": 102,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "text": [
                    "str"
                ],
                "symbol": [
                    "str"
                ]
            }
        },
        "test_decode": {
            "name": "test_decode",
            "location": 119,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "code": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "test_decode_error": {
            "name": "test_decode_error",
            "location": 133,
            "return": [],
            "arguments": {
                "the_tree": [
                    "Coder"
                ],
                "code": [
                    "str"
                ],
                "symbol": [
                    "str"
                ]
            }
        }
    },
    "ads-class-pub-main/projects/rpn/rpn.py": {
        "postfix_eval": {
            "name": "postfix_eval",
            "location": 28,
            "return": [
                "float"
            ],
            "arguments": {
                "postfix_expr": [
                    "str"
                ]
            }
        },
        "do_math": {
            "name": "do_math",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "operation": [
                    "str"
                ],
                "operand1": [
                    "int"
                ],
                "operand2": [
                    "int"
                ]
            }
        },
        "rpn_calc": {
            "name": "rpn_calc",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "StackError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/projects/rpn/rpn_test.py": {
        "test_postfix_eval": {
            "name": "test_postfix_eval",
            "location": 20,
            "return": [],
            "arguments": {
                "expression": [],
                "expected": []
            }
        },
        "test_checksum": {
            "name": "test_checksum",
            "location": 26,
            "return": [],
            "arguments": {
                "filename": [],
                "expected": []
            }
        },
        "test_postfix_eval_stack_error": {
            "name": "test_postfix_eval_stack_error",
            "location": 42,
            "return": [],
            "arguments": {
                "expression": [],
                "err_message": []
            }
        },
        "test_postfix_eval_token_error": {
            "name": "test_postfix_eval_token_error",
            "location": 54,
            "return": [],
            "arguments": {
                "expression": [],
                "err_message": [],
                "err_token": []
            }
        },
        "test_do_math_simple_int_success": {
            "name": "test_do_math_simple_int_success",
            "location": 66,
            "return": [],
            "arguments": {
                "operation": [],
                "operand1": [],
                "operand2": [],
                "expected": []
            }
        },
        "test_do_math_simple_float_success": {
            "name": "test_do_math_simple_float_success",
            "location": 74,
            "return": [],
            "arguments": {
                "operation": [],
                "operand1": [],
                "operand2": [],
                "expected": []
            }
        },
        "test_do_math_simple_error": {
            "name": "test_do_math_simple_error",
            "location": 86,
            "return": [],
            "arguments": {
                "operation": [],
                "operand1": [],
                "operand2": [],
                "err_message": []
            }
        },
        "test_do_math_syntax_error": {
            "name": "test_do_math_syntax_error",
            "location": 95,
            "return": [],
            "arguments": {
                "symbol": []
            }
        },
        "test_do_math_advanced": {
            "name": "test_do_math_advanced",
            "location": 107,
            "return": [],
            "arguments": {
                "operation": [],
                "operand1": [],
                "operand2": [],
                "expected": []
            }
        },
        "test_do_math_bitwise": {
            "name": "test_do_math_bitwise",
            "location": 124,
            "return": [],
            "arguments": {
                "operation": [],
                "operand1": [],
                "operand2": [],
                "expected": []
            }
        },
        "test_do_math_advanced_error": {
            "name": "test_do_math_advanced_error",
            "location": 136,
            "return": [],
            "arguments": {
                "operation": [],
                "operand1": [],
                "operand2": [],
                "err_message": []
            }
        }
    },
    "ads-class-pub-main/projects/water/water.py": {
        "search": {
            "name": "search",
            "location": 78,
            "return": [],
            "arguments": {
                "start_state": [
                    "State"
                ],
                "goal": [
                    "State"
                ],
                "moves_lst": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "State.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jug_1": [
                    "int"
                ],
                "jug_2": [
                    "int"
                ]
            }
        },
        "State.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "State.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.clone": {
            "name": "clone",
            "location": 39,
            "return": [
                "'State'"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.fill_jug_1": {
            "name": "fill_jug_1",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.fill_jug_2": {
            "name": "fill_jug_2",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.empty_jug_1": {
            "name": "empty_jug_1",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.empty_jug_2": {
            "name": "empty_jug_2",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.pour_jug_1_to_jug_2": {
            "name": "pour_jug_1_to_jug_2",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.pour_jug_2_to_jug_1": {
            "name": "pour_jug_2_to_jug_1",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/projects/water/water_test.py": {
        "test_State_init": {
            "name": "test_State_init",
            "location": 15,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": []
            }
        },
        "test_State_init_empty_error": {
            "name": "test_State_init_empty_error",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_State_init_type_error": {
            "name": "test_State_init_type_error",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_State_init_value_error": {
            "name": "test_State_init_value_error",
            "location": 44,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "issue_jug": []
            }
        },
        "test_state_eq": {
            "name": "test_state_eq",
            "location": 53,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": []
            }
        },
        "test_state_str": {
            "name": "test_state_str",
            "location": 62,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "expected": []
            }
        },
        "test_state_clone": {
            "name": "test_state_clone",
            "location": 69,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": []
            }
        },
        "test_state_fill_jug_1": {
            "name": "test_state_fill_jug_1",
            "location": 78,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "expected": []
            }
        },
        "test_state_fill_jug_2": {
            "name": "test_state_fill_jug_2",
            "location": 86,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "expected": []
            }
        },
        "test_state_empty_jug_1": {
            "name": "test_state_empty_jug_1",
            "location": 94,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "expected": []
            }
        },
        "test_state_empty_jug_2": {
            "name": "test_state_empty_jug_2",
            "location": 102,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "expected": []
            }
        },
        "test_state_pour_jug_1_to_jug_2": {
            "name": "test_state_pour_jug_1_to_jug_2",
            "location": 120,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "expected": []
            }
        },
        "test_state_pour_jug_2_to_jug_1": {
            "name": "test_state_pour_jug_2_to_jug_1",
            "location": 138,
            "return": [],
            "arguments": {
                "jug_1": [],
                "jug_2": [],
                "expected": []
            }
        },
        "test_search_default": {
            "name": "test_search_default",
            "location": 174,
            "return": [],
            "arguments": {
                "jug_1_start": [],
                "jug_2_start": [],
                "jug_1_goal": [],
                "jug_2_goal": []
            }
        },
        "test_search_simple": {
            "name": "test_search_simple",
            "location": 195,
            "return": [],
            "arguments": {
                "jug_1_start": [],
                "jug_2_start": [],
                "jug_1_goal": [],
                "jug_2_goal": []
            }
        },
        "test_search_advanced": {
            "name": "test_search_advanced",
            "location": 216,
            "return": [],
            "arguments": {
                "jug_1_start": [],
                "jug_2_start": [],
                "jug_1_goal": [],
                "jug_2_goal": []
            }
        }
    },
    "ads-class-pub-main/projects/wordladder/wordladder.py": {
        "main": {
            "name": "main",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Solver.distance": {
            "name": "distance",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "word1": [
                    "str"
                ],
                "word2": [
                    "str"
                ]
            }
        },
        "Solver.diff_by_one_all": {
            "name": "diff_by_one_all",
            "location": 36,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "all_words": [
                    "set[str]"
                ],
                "used_words": [
                    "set[str]"
                ]
            }
        },
        "Solver.build_ladder": {
            "name": "build_ladder",
            "location": 49,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "word_start": [
                    "str"
                ],
                "word_stop": [
                    "str"
                ]
            }
        }
    },
    "ads-class-pub-main/projects/wordladder/wordladder_test.py": {
        "fixture_solver": {
            "name": "fixture_solver",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 23,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "test_init_error": {
            "name": "test_init_error",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_distance": {
            "name": "test_distance",
            "location": 52,
            "return": [],
            "arguments": {
                "solver": [],
                "word1": [
                    "str"
                ],
                "word2": [
                    "str"
                ],
                "expected": [
                    "int"
                ]
            }
        },
        "test_distance_error": {
            "name": "test_distance_error",
            "location": 64,
            "return": [],
            "arguments": {
                "solver": [],
                "word1": [],
                "word2": []
            }
        },
        "test_diff_by_one_all": {
            "name": "test_diff_by_one_all",
            "location": 91,
            "return": [],
            "arguments": {
                "solver": [],
                "word": [
                    "str"
                ],
                "all_words": [
                    "set[str]"
                ],
                "used_words": [
                    "set[str]"
                ],
                "expected": [
                    "list[str]"
                ]
            }
        },
        "test_build_ladder": {
            "name": "test_build_ladder",
            "location": 116,
            "return": [],
            "arguments": {
                "solver": [],
                "word1": [
                    "str"
                ],
                "word2": [
                    "str"
                ]
            }
        },
        "test_no_ladder": {
            "name": "test_no_ladder",
            "location": 131,
            "return": [],
            "arguments": {
                "solver": [],
                "word1": [
                    "str"
                ],
                "word2": [
                    "str"
                ]
            }
        }
    },
    "ads-class-pub-main/src/exercises/presidents/presidents.py": {
        "build_dictionary": {
            "name": "build_dictionary",
            "location": 10,
            "return": [
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_number_of_presidents_alive": {
            "name": "get_number_of_presidents_alive",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "presidents_dict": [
                    "dict"
                ],
                "year": [
                    "int"
                ]
            }
        },
        "get_names_of_presidents_alive": {
            "name": "get_names_of_presidents_alive",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "presidents_dict": [
                    "dict"
                ],
                "year": [
                    "int"
                ]
            }
        },
        "get_most_alive_year": {
            "name": "get_most_alive_year",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "presidents_dict": [
                    "dict"
                ]
            }
        },
        "get_most_alive_all_years": {
            "name": "get_most_alive_all_years",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "presidents_dict": [
                    "dict"
                ]
            }
        },
        "print_all_names": {
            "name": "print_all_names",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "presidents_dict": [
                    "dict"
                ],
                "year": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/src/exercises/presidents/__init__.py": {},
    "ads-class-pub-main/src/exercises/sorting/sorting.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/src/notes/basicds/linkedlists.py": {
        "main": {
            "name": "main",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_value": [
                    "Any"
                ]
            }
        },
        "Node.get_data": {
            "name": "get_data",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.set_data": {
            "name": "set_data",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_data": []
            }
        },
        "Node.next": {
            "name": "next",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "new_next": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.is_empty": {
            "name": "is_empty",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.size": {
            "name": "size",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.add": {
            "name": "add",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_node": [
                    "Node"
                ]
            }
        },
        "LinkedList.search": {
            "name": "search",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LinkedList.index": {
            "name": "index",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LinkedList.append": {
            "name": "append",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_node": [
                    "object"
                ]
            }
        },
        "LinkedList.insert": {
            "name": "insert",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "new_node": [
                    "Node"
                ]
            }
        },
        "LinkedList.pop": {
            "name": "pop",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        }
    },
    "ads-class-pub-main/src/notes/basicds/stacks.py": {
        "main": {
            "name": "main",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.size": {
            "name": "size",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/src/notes/basics/args_demo.py": {
        "args_demo": {
            "name": "args_demo",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "kwargs_demo": {
            "name": "kwargs_demo",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "demo": {
            "name": "demo",
            "location": 26,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "FridayError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/src/notes/basics/fileops.py": {},
    "ads-class-pub-main/src/notes/basics/overview.py": {},
    "ads-class-pub-main/src/notes/graphs/graphs.py": {
        "Vertex.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Vertex.get_key": {
            "name": "get_key",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_all_neighbors": {
            "name": "get_all_neighbors",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_neighbor": {
            "name": "get_neighbor",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Vertex.set_neighbor": {
            "name": "set_neighbor",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "weight": []
            }
        },
        "Vertex.get_previous": {
            "name": "get_previous",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_previous": {
            "name": "set_previous",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Vertex.get_distance": {
            "name": "get_distance",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_distance": {
            "name": "set_distance",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Vertex.get_color": {
            "name": "get_color",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_color": {
            "name": "set_color",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__contains__": {
            "name": "__contains__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Graph.__iter__": {
            "name": "__iter__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__len__": {
            "name": "__len__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_vertex": {
            "name": "add_vertex",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "src_vertex": [],
                "dst_vertex": [],
                "weight": []
            }
        },
        "Graph.get_vertex": {
            "name": "get_vertex",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Graph.get_vertices": {
            "name": "get_vertices",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.bfs": {
            "name": "bfs",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        }
    },
    "ads-class-pub-main/src/notes/graphs/__init__.py": {},
    "ads-class-pub-main/src/notes/interview/interview.py": {
        "solve1": {
            "name": "solve1",
            "location": 10,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "solve2": {
            "name": "solve2",
            "location": 21,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "solve3": {
            "name": "solve3",
            "location": 43,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "ads-class-pub-main/src/notes/oop/cats.py": {
        "Cat.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "legs_init": [
                    "int"
                ],
                "color_init": [
                    "str"
                ]
            }
        },
        "Cat.sleep": {
            "name": "sleep",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cat.noise": {
            "name": "noise",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "some_noise": []
            }
        },
        "Cat.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cat.__add__": {
            "name": "__add__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cat.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cat.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "object"
                ]
            }
        },
        "Cat.__lt__": {
            "name": "__lt__",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "object"
                ]
            }
        },
        "Dog.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Dog.legs": {
            "name": "legs",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dog.get_name": {
            "name": "get_name",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dog.set_name": {
            "name": "set_name",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "Dog.rename": {
            "name": "rename",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "Dog.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/src/notes/oop/exceptions.py": {
        "initials": {
            "name": "initials",
            "location": 3,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/src/notes/oop/inheritance.py": {
        "main": {
            "name": "main",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "Animal.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "legs_init_value": []
            }
        },
        "Animal.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Animal.get_legs": {
            "name": "get_legs",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Animal.set_legs": {
            "name": "set_legs",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "Animal.grow_a_limb": {
            "name": "grow_a_limb",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Animal.eat": {
            "name": "eat",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deer.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deer.eat": {
            "name": "eat",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Snake.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Snake.grow_a_limb": {
            "name": "grow_a_limb",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Snake.eat": {
            "name": "eat",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/src/notes/oop/markers.py": {
        "Marker.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "color_param": [],
                "length_param": [],
                "resource_param": []
            }
        },
        "Marker.color": {
            "name": "color",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marker.get_resource": {
            "name": "get_resource",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marker.set_resource": {
            "name": "set_resource",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "Marker.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marker.__lt__": {
            "name": "__lt__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Marker.__add__": {
            "name": "__add__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Marker.write": {
            "name": "write",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RefillableMarker.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "color_param": [],
                "length_param": [],
                "size_param": [],
                "resource_param": []
            }
        },
        "RefillableMarker.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/src/notes/oop/oop.py": {
        "foo": {
            "name": "foo",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "Student.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "some_name": [
                    "str"
                ],
                "year_in_school": [
                    "str"
                ]
            }
        },
        "Student.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Student.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Student.__lt__": {
            "name": "__lt__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Student.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Student.study": {
            "name": "study",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Student.eat": {
            "name": "eat",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Student.name": {
            "name": "name",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Student.get_year": {
            "name": "get_year",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Student.set_year": {
            "name": "set_year",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "ads-class-pub-main/src/notes/recursion/recursion.py": {
        "some_method": {
            "name": "some_method",
            "location": 1,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "some_method_iter": {
            "name": "some_method_iter",
            "location": 7,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "list_sum": {
            "name": "list_sum",
            "location": 13,
            "return": [],
            "arguments": {
                "lst": []
            }
        },
        "list_sum_2": {
            "name": "list_sum_2",
            "location": 22,
            "return": [],
            "arguments": {
                "lst": []
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/src/notes/recursion/recursion2.py": {
        "a": {
            "name": "a",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "b": {
            "name": "b",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "c": {
            "name": "c",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "sumn": {
            "name": "sumn",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "nums": [
                    "list"
                ]
            }
        },
        "sumi": {
            "name": "sumi",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "nums": [
                    "list"
                ]
            }
        }
    },
    "ads-class-pub-main/src/notes/trees/BinaryTree.py": {
        "BinaryTree.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BinaryTree.get_root_val": {
            "name": "get_root_val",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.set_root_val": {
            "name": "set_root_val",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "new_key": []
            }
        },
        "BinaryTree.get_child_left": {
            "name": "get_child_left",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.set_child_left": {
            "name": "set_child_left",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "new_child_left": []
            }
        },
        "BinaryTree.get_child_right": {
            "name": "get_child_right",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.set_child_right": {
            "name": "set_child_right",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "new_child_right": []
            }
        },
        "BinaryTree.is_leaf": {
            "name": "is_leaf",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.insert_left": {
            "name": "insert_left",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "new_node": []
            }
        },
        "BinaryTree.insert_right": {
            "name": "insert_right",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "new_node": []
            }
        },
        "BinaryTree.preorder": {
            "name": "preorder",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.inorder": {
            "name": "inorder",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.postorder": {
            "name": "postorder",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ads-class-pub-main/src/notes/trees/__init__.py": {},
    "ads-class-pub-main/src/projects/customproblem/customproblem.py": {},
    "ads-class-pub-main/src/projects/customproblem/__init__.py": {},
    "ads-class-pub-main/src/projects/stringsearch/nonrepeat.py": {
        "find_non_repeat": {
            "name": "find_non_repeat",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "a_string": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/src/projects/stringsearch/test_nonrepeat.py": {
        "test_find_non_repeat": {
            "name": "test_find_non_repeat",
            "location": 21,
            "return": [],
            "arguments": {
                "a_string": [],
                "an_answer": []
            }
        },
        "test_find_non_repeat_long_beginning": {
            "name": "test_find_non_repeat_long_beginning",
            "location": 29,
            "return": [],
            "arguments": {
                "str_len": []
            }
        },
        "test_find_non_repeat_long_end": {
            "name": "test_find_non_repeat_long_end",
            "location": 38,
            "return": [],
            "arguments": {
                "str_len": []
            }
        },
        "test_find_non_repeat_error": {
            "name": "test_find_non_repeat_error",
            "location": 45,
            "return": [],
            "arguments": {
                "a_string": []
            }
        },
        "test_find_non_repeat_error_long": {
            "name": "test_find_non_repeat_error_long",
            "location": 54,
            "return": [],
            "arguments": {}
        }
    },
    "ads-class-pub-main/src/projects/stringsearch/__init__.py": {},
    "ads-class-pub-main/tests/projects/customproblem/test_customproblem.py": {
        "TestCustomProblemMethods.setup_class": {
            "name": "setup_class",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_a": {
            "name": "test_a",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_b": {
            "name": "test_b",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_c": {
            "name": "test_c",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_d": {
            "name": "test_d",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_e": {
            "name": "test_e",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_f": {
            "name": "test_f",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_g": {
            "name": "test_g",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_h": {
            "name": "test_h",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_i": {
            "name": "test_i",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProblemMethods.test_j": {
            "name": "test_j",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
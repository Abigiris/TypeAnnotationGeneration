{
    "advent_of_code_2018-master/Day 01/day01.py": {
        "find_freq": {
            "name": "find_freq",
            "location": 9,
            "return": [],
            "arguments": {
                "changes": []
            }
        },
        "calibrate": {
            "name": "calibrate",
            "location": 14,
            "return": [],
            "arguments": {
                "changes": []
            }
        }
    },
    "advent_of_code_2018-master/Day 02/day02.py": {
        "count_codes": {
            "name": "count_codes",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "codes": [
                    "List"
                ]
            }
        },
        "generate_sequences": {
            "name": "generate_sequences",
            "location": 29,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "codes": [
                    "List[str]"
                ]
            }
        },
        "find_one_char_distance": {
            "name": "find_one_char_distance",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "codes": [
                    "List[str]"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 03/day03.py": {
        "parselines": {
            "name": "parselines",
            "location": 9,
            "return": [
                "Tuple[(List[int], List[Tuple[(int, int, int, int)]])]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "claim_inches": {
            "name": "claim_inches",
            "location": 19,
            "return": [
                "Iterator[Tuple[(int, int)]]"
            ],
            "arguments": {
                "coords": [
                    "List[Tuple[(int, int, int, int)]]"
                ]
            }
        },
        "count_overlap": {
            "name": "count_overlap",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "non_overlapping": {
            "name": "non_overlapping",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 04/day04.py": {
        "get_notes": {
            "name": "get_notes",
            "location": 38,
            "return": [
                "List[Note]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "get_naps": {
            "name": "get_naps",
            "location": 49,
            "return": [
                "List[Nap]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "sleepiest_id": {
            "name": "sleepiest_id",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "naps": [
                    "List[Nap]"
                ]
            }
        },
        "sleepiest_minute": {
            "name": "sleepiest_minute",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "naps": [
                    "List[Nap]"
                ],
                "id": [
                    "int"
                ]
            }
        },
        "sleepiest_guard_x_min": {
            "name": "sleepiest_guard_x_min",
            "location": 94,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "overall_sleepiest_minute_x_guard": {
            "name": "overall_sleepiest_minute_x_guard",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "naps": [
                    "List[Nap]"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 05/day05.py": {
        "react": {
            "name": "react",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "polymer": [
                    "str"
                ]
            }
        },
        "react_with_remove": {
            "name": "react_with_remove",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "polymer": [
                    "str"
                ],
                "rm_char": [
                    "str"
                ]
            }
        },
        "shortest_polymer": {
            "name": "shortest_polymer",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "polymer": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 06/day06.py": {
        "manhattan": {
            "name": "manhattan",
            "location": 33,
            "return": [],
            "arguments": {
                "a": [
                    "Coord"
                ],
                "b": [
                    "Coord"
                ]
            }
        },
        "build_grid": {
            "name": "build_grid",
            "location": 37,
            "return": [
                "Grid"
            ],
            "arguments": {
                "coords": [
                    "List[Coord]"
                ]
            }
        },
        "parse_text": {
            "name": "parse_text",
            "location": 51,
            "return": [
                "List[Coord]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "closest_coord": {
            "name": "closest_coord",
            "location": 63,
            "return": [
                "Coord"
            ],
            "arguments": {
                "loc": [
                    "Coord"
                ],
                "coords": [
                    "List[Coord]"
                ]
            }
        },
        "count_areas": {
            "name": "count_areas",
            "location": 71,
            "return": [
                "Tuple[(Coord, int)]"
            ],
            "arguments": {
                "coords": [
                    "List[Coord]"
                ]
            }
        },
        "count_distances": {
            "name": "count_distances",
            "location": 112,
            "return": [
                "int"
            ],
            "arguments": {
                "coords": [
                    "List[Coord]"
                ],
                "treshold": [
                    "int"
                ]
            }
        },
        "Coord.distance": {
            "name": "distance",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Coord"
                ]
            }
        },
        "Grid.all_locations": {
            "name": "all_locations",
            "location": 21,
            "return": [
                "Iterator[Coord]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.is_contour": {
            "name": "is_contour",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Coord"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 07/day07.py": {
        "parse": {
            "name": "parse",
            "location": 30,
            "return": [
                "TaskList"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "ready_tasks": {
            "name": "ready_tasks",
            "location": 43,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "tl": [
                    "TaskList"
                ]
            }
        },
        "get_seq": {
            "name": "get_seq",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "tl": [
                    "TaskList"
                ]
            }
        },
        "do_task": {
            "name": "do_task",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "w_time": [
                    "int"
                ],
                "tl": [
                    "TaskList"
                ],
                "t_id": [
                    "str"
                ],
                "delta": []
            }
        },
        "get_time": {
            "name": "get_time",
            "location": 97,
            "return": [
                "int"
            ],
            "arguments": {
                "tl": [
                    "TaskList"
                ],
                "n_workers": [
                    "int"
                ],
                "delta": [
                    "int"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.followers": {
            "name": "followers",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.add_follower": {
            "name": "add_follower",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code_2018-master/Day 08/day08.py": {
        "find_next_leaf": {
            "name": "find_next_leaf",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "List[int]"
                ]
            }
        },
        "get_node": {
            "name": "get_node",
            "location": 20,
            "return": [
                "Tuple[(Node, List[int])]"
            ],
            "arguments": {
                "data": [
                    "List[int]"
                ],
                "is_root": []
            }
        },
        "sum_metadata": {
            "name": "sum_metadata",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 09/day09.py": {
        "parse_line": {
            "name": "parse_line",
            "location": 25,
            "return": [
                "Game"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "play": {
            "name": "play",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "game": [
                    "Game"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 10/day10.py": {
        "parse_lines": {
            "name": "parse_lines",
            "location": 14,
            "return": [
                "List[Point]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "grid_shape": {
            "name": "grid_shape",
            "location": 66,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "points": [
                    "List[Point]"
                ]
            }
        },
        "plot_points": {
            "name": "plot_points",
            "location": 77,
            "return": [],
            "arguments": {
                "points": [
                    "List[Point]"
                ]
            }
        },
        "move_one": {
            "name": "move_one",
            "location": 85,
            "return": [
                "List[Point]"
            ],
            "arguments": {
                "points": [
                    "List[Point]"
                ]
            }
        },
        "get_area": {
            "name": "get_area",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "points": []
            }
        },
        "play_sequence": {
            "name": "play_sequence",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "points": [
                    "List[Point]"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 11/day11.py": {
        "power_level": {
            "name": "power_level",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "serial_number": [
                    "int"
                ]
            }
        },
        "largest_power": {
            "name": "largest_power",
            "location": 31,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "serial_number": [],
                "size": [
                    "int"
                ],
                "grid_shape": [
                    "int"
                ]
            }
        },
        "largest_power_dynamic": {
            "name": "largest_power_dynamic",
            "location": 61,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "serial_number": [],
                "grid_size": [
                    "int"
                ]
            }
        },
        "largest_power_np": {
            "name": "largest_power_np",
            "location": 118,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "serial_number": [],
                "grid_size": [
                    "int"
                ]
            }
        },
        "largest_power_sat": {
            "name": "largest_power_sat",
            "location": 150,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "serial_number": [],
                "grid_size": [
                    "int"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 12/day12.py": {
        "parse_lines": {
            "name": "parse_lines",
            "location": 36,
            "return": [
                "Tuple[(str, Notes)]"
            ],
            "arguments": {
                "lines": [
                    "List[str]"
                ]
            }
        },
        "forward_generations": {
            "name": "forward_generations",
            "location": 59,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "notes": [
                    "Notes"
                ],
                "generations": [
                    "int"
                ]
            }
        },
        "pad_cut": {
            "name": "pad_cut",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "gen": [
                    "Generation"
                ],
                "L": [
                    "int"
                ]
            }
        },
        "crop": {
            "name": "crop",
            "location": 118,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "i_zero": [
                    "int"
                ]
            }
        },
        "count": {
            "name": "count",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "zero": [
                    "int"
                ]
            }
        },
        "search_loop": {
            "name": "search_loop",
            "location": 144,
            "return": [
                "Tuple[(bool, str, int, int, int)]"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "notes": [
                    "Notes"
                ],
                "end_time": [
                    "int"
                ]
            }
        },
        "Notes.__missing__": {
            "name": "__missing__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "advent_of_code_2018-master/Day 13/day13.py": {
        "Cart.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "val": [
                    "str"
                ]
            }
        },
        "Cart.position": {
            "name": "position",
            "location": 37,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cart.move": {
            "name": "move",
            "location": 43,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "map": [
                    "'Map'"
                ]
            }
        },
        "Cart.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "paths": [
                    "str"
                ]
            }
        },
        "Map.get": {
            "name": "get",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Map.set": {
            "name": "set",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "v": [
                    "str"
                ]
            }
        },
        "Map.iterate_all": {
            "name": "iterate_all",
            "location": 110,
            "return": [
                "Iterator[Tuple[(int, int, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.__repr__": {
            "name": "__repr__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.find_carts": {
            "name": "find_carts",
            "location": 121,
            "return": [
                "Set[Cart]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.move": {
            "name": "move",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "ticks": [
                    "int"
                ]
            }
        },
        "Cart.__init__.decide": {
            "name": "decide",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "advent_of_code_2018-master/Day 14/day14.py": {
        "new_recipes": {
            "name": "new_recipes",
            "location": 11,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "elf1": [
                    "int"
                ],
                "elf2": [
                    "int"
                ],
                "scoreboard": [
                    "List[int]"
                ]
            }
        },
        "move_elf": {
            "name": "move_elf",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "elf": [
                    "int"
                ],
                "scoreboard": [
                    "List[int]"
                ]
            }
        },
        "move_forward": {
            "name": "move_forward",
            "location": 25,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "elf1": [
                    "int"
                ],
                "elf2": [
                    "int"
                ],
                "scoreboard": [
                    "List[int]"
                ]
            }
        },
        "ten_recipes_after_n": {
            "name": "ten_recipes_after_n",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "n_recipes": [
                    "int"
                ]
            }
        },
        "n_recipes_before_score": {
            "name": "n_recipes_before_score",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "score": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 15/day15.py": {
        "Position.add": {
            "name": "add",
            "location": 13,
            "return": [
                "'Position'"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "'Position'"
                ]
            }
        },
        "Position.adjacents": {
            "name": "adjacents",
            "location": 17,
            "return": [
                "List['Position']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.attack": {
            "name": "attack",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [
                    "'Unit'"
                ]
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Map.units": {
            "name": "units",
            "location": 70,
            "return": [
                "List[Unit]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.round": {
            "name": "round",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.move": {
            "name": "move",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [
                    "Unit"
                ]
            }
        },
        "Map.all_rounds": {
            "name": "all_rounds",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code_2018-master/Day 16/day16.py": {
        "addr": {
            "name": "addr",
            "location": 30,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "addi": {
            "name": "addi",
            "location": 36,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "mulr": {
            "name": "mulr",
            "location": 42,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "muli": {
            "name": "muli",
            "location": 48,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "banr": {
            "name": "banr",
            "location": 54,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "bani": {
            "name": "bani",
            "location": 60,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "borr": {
            "name": "borr",
            "location": 66,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "bori": {
            "name": "bori",
            "location": 72,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "setr": {
            "name": "setr",
            "location": 78,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "seti": {
            "name": "seti",
            "location": 84,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "gtir": {
            "name": "gtir",
            "location": 90,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "gtri": {
            "name": "gtri",
            "location": 96,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "gtrr": {
            "name": "gtrr",
            "location": 102,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "eqir": {
            "name": "eqir",
            "location": 108,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "eqri": {
            "name": "eqri",
            "location": 114,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "eqrr": {
            "name": "eqrr",
            "location": 120,
            "return": [
                "Register"
            ],
            "arguments": {
                "r": [
                    "Register"
                ],
                "i": []
            }
        },
        "more_than_3": {
            "name": "more_than_3",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "Sample"
                ]
            }
        },
        "cnt_more_than_3": {
            "name": "cnt_more_than_3",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "samples": [
                    "List[Sample]"
                ]
            }
        },
        "read_samples": {
            "name": "read_samples",
            "location": 165,
            "return": [
                "List[Sample]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 203,
            "return": [
                "Dict"
            ],
            "arguments": {
                "sample": [
                    "Sample"
                ],
                "op_to_code": [
                    "Dict"
                ]
            }
        },
        "consolidate": {
            "name": "consolidate",
            "location": 212,
            "return": [
                "Dict"
            ],
            "arguments": {
                "d": [
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 17/day17.py": {
        "parse_scan": {
            "name": "parse_scan",
            "location": 86,
            "return": [
                "Grid"
            ],
            "arguments": {
                "scan": [
                    "str"
                ],
                "spring": [
                    "Optional[Position]"
                ]
            }
        },
        "fill": {
            "name": "fill",
            "location": 113,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "grid": [
                    "Grid"
                ]
            }
        },
        "Position.add": {
            "name": "add",
            "location": 31,
            "return": [
                "'Position'"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Position.up": {
            "name": "up",
            "location": 35,
            "return": [
                "'Position'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.left": {
            "name": "left",
            "location": 39,
            "return": [
                "'Position'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.right": {
            "name": "right",
            "location": 43,
            "return": [
                "'Position'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.down": {
            "name": "down",
            "location": 47,
            "return": [
                "'Position'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "clays": [
                    "Set[Position]"
                ],
                "spring": [
                    "Position"
                ]
            }
        },
        "Grid.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_scan.parse": {
            "name": "parse",
            "location": 99,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "num": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code_2018-master/Day 18/day18.py": {
        "minute": {
            "name": "minute",
            "location": 70,
            "return": [
                "Grid"
            ],
            "arguments": {
                "grid": [
                    "Grid"
                ]
            }
        },
        "evolve": {
            "name": "evolve",
            "location": 99,
            "return": [],
            "arguments": {
                "grid": [
                    "Grid"
                ],
                "minutes": [
                    "int"
                ]
            }
        },
        "Pos.add": {
            "name": "add",
            "location": 18,
            "return": [
                "'Pos'"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Pos.nb8": {
            "name": "nb8",
            "location": 22,
            "return": [
                "List['Pos']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Grid.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.total_resource_value": {
            "name": "total_resource_value",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.hash": {
            "name": "hash",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code_2018-master/Day 19/day19.py": {
        "execute": {
            "name": "execute",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "r": [
                    "List[int]"
                ],
                "instr": [
                    "Instruction"
                ]
            }
        },
        "run_program": {
            "name": "run_program",
            "location": 71,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "program": [
                    "str"
                ],
                "registers": [
                    "Optional[List[int]]"
                ]
            }
        }
    }
}
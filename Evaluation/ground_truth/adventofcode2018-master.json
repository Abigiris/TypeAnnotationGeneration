{
    "adventofcode2018-master/common.py": {
        "run_test_cases": {
            "name": "run_test_cases",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cases": [
                    "Sequence[Test]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/run.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day01/calibration.py": {
        "final_frequency": {
            "name": "final_frequency",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "changes": [
                    "Sequence[int]"
                ]
            }
        },
        "first_frequency_twice": {
            "name": "first_frequency_twice",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "changes": [
                    "Sequence[int]"
                ]
            }
        }
    },
    "adventofcode2018-master/day01/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day01/tests.py": {
        "run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day02/inventory.py": {
        "sum_pairs": {
            "name": "sum_pairs",
            "location": 6,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "t": [
                    "Tuple[(int, int)]"
                ],
                "u": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "classify_candidate": {
            "name": "classify_candidate",
            "location": 11,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "box_id": [
                    "str"
                ]
            }
        },
        "checksum": {
            "name": "checksum",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "box_ids": [
                    "Sequence[str]"
                ]
            }
        },
        "common_letters_prototype": {
            "name": "common_letters_prototype",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "box_ids": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "adventofcode2018-master/day02/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day02/tests.py": {
        "run": {
            "name": "run",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day03/fabric.py": {
        "parse_claim": {
            "name": "parse_claim",
            "location": 13,
            "return": [
                "Optional[Claim]"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "overlapping": {
            "name": "overlapping",
            "location": 31,
            "return": [
                "Tuple[(int, Set[int])]"
            ],
            "arguments": {
                "claims": [
                    "Sequence[Claim]"
                ],
                "min_claims": [
                    "int"
                ]
            }
        }
    },
    "adventofcode2018-master/day03/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day03/tests.py": {
        "run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day04/guards.py": {
        "parse_record": {
            "name": "parse_record",
            "location": 20,
            "return": [
                "Record"
            ],
            "arguments": {
                "record": [
                    "str"
                ]
            }
        },
        "guard_stats": {
            "name": "guard_stats",
            "location": 49,
            "return": [
                "Dict[(int, GuardStat)]"
            ],
            "arguments": {
                "records": [
                    "Sequence[Record]"
                ]
            }
        },
        "strategy_1": {
            "name": "strategy_1",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "stats": [
                    "Dict[(int, GuardStat)]"
                ]
            }
        },
        "strategy_2": {
            "name": "strategy_2",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "stats": [
                    "Dict[(int, GuardStat)]"
                ]
            }
        }
    },
    "adventofcode2018-master/day04/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day04/tests.py": {
        "run": {
            "name": "run",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day05/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day05/polymer.py": {
        "react": {
            "name": "react",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "unit_left": [
                    "str"
                ],
                "unit_right": [
                    "str"
                ]
            }
        },
        "reduction": {
            "name": "reduction",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "polymer": [
                    "str"
                ],
                "ignore": [
                    "Set[str]"
                ]
            }
        },
        "best_reduction": {
            "name": "best_reduction",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "polymer": [
                    "str"
                ]
            }
        }
    },
    "adventofcode2018-master/day05/tests.py": {
        "run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day06/coordinates.py": {
        "parse_coordinate": {
            "name": "parse_coordinate",
            "location": 19,
            "return": [
                "Coordinate"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "manhattan_distance": {
            "name": "manhattan_distance",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "p": [
                    "Coordinate"
                ],
                "q": [
                    "Coordinate"
                ]
            }
        },
        "find_boundaries": {
            "name": "find_boundaries",
            "location": 30,
            "return": [
                "Boundaries"
            ],
            "arguments": {
                "coordinates": [
                    "Sequence[Coordinate]"
                ]
            }
        },
        "compare": {
            "name": "compare",
            "location": 45,
            "return": [
                "Tuple[(Set[Coordinate], int)]"
            ],
            "arguments": {
                "location": [
                    "Coordinate"
                ],
                "coordinates": [
                    "Sequence[Coordinate]"
                ]
            }
        },
        "sizes": {
            "name": "sizes",
            "location": 67,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "coordinates": [
                    "Sequence[Coordinate]"
                ],
                "region_threshold": [
                    "int"
                ]
            }
        }
    },
    "adventofcode2018-master/day06/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day06/tests.py": {
        "run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day07/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day07/steps.py": {
        "parse_requirement": {
            "name": "parse_requirement",
            "location": 10,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "instruction": [
                    "str"
                ]
            }
        },
        "get_ready": {
            "name": "get_ready",
            "location": 22,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "queue": [
                    "Set[str]"
                ],
                "done": [
                    "Sequence[str]"
                ],
                "parents": [
                    "Dict[(str, Set[str])]"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "duration": {
            "name": "duration",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "step": [
                    "str"
                ],
                "base_duration": [
                    "int"
                ]
            }
        },
        "complete": {
            "name": "complete",
            "location": 45,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "requirements": [
                    "Sequence[Requirement]"
                ],
                "workers": [
                    "int"
                ],
                "base_duration": [
                    "int"
                ]
            }
        }
    },
    "adventofcode2018-master/day07/tests.py": {
        "run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day08/license.py": {
        "make_tree": {
            "name": "make_tree",
            "location": 11,
            "return": [
                "Tree"
            ],
            "arguments": {
                "values": [
                    "List[int]"
                ]
            }
        },
        "total_metadata": {
            "name": "total_metadata",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "tree": [
                    "Tree"
                ]
            }
        },
        "value": {
            "name": "value",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "tree": [
                    "Tree"
                ]
            }
        }
    },
    "adventofcode2018-master/day08/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day08/tests.py": {
        "run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day09/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day09/marbles.py": {
        "parse_game_setup": {
            "name": "parse_game_setup",
            "location": 5,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "highest_score": {
            "name": "highest_score",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "players": [
                    "int"
                ],
                "last_marble": [
                    "int"
                ]
            }
        },
        "MarbleCircle.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ],
                "prev": [
                    "'MarbleCircle'"
                ],
                "next": [
                    "'MarbleCircle'"
                ]
            }
        },
        "MarbleCircle.insertAfter": {
            "name": "insertAfter",
            "location": 27,
            "return": [
                "'MarbleCircle'"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "MarbleCircle.removeBefore": {
            "name": "removeBefore",
            "location": 37,
            "return": [
                "Tuple[(int, 'MarbleCircle')]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "MarbleCircle.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode2018-master/day09/tests.py": {
        "run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day10/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day10/stars.py": {
        "parse_point": {
            "name": "parse_point",
            "location": 16,
            "return": [
                "Point"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "move": {
            "name": "move",
            "location": 32,
            "return": [
                "Point"
            ],
            "arguments": {
                "point": [
                    "Point"
                ],
                "second": [
                    "int"
                ]
            }
        },
        "display": {
            "name": "display",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "points": [
                    "Sequence[Point]"
                ]
            }
        },
        "message": {
            "name": "message",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "points": [
                    "Sequence[Point]"
                ]
            }
        }
    },
    "adventofcode2018-master/day10/tests.py": {
        "run": {
            "name": "run",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day11/charge.py": {
        "power_level": {
            "name": "power_level",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "serial": [
                    "int"
                ]
            }
        },
        "power_square": {
            "name": "power_square",
            "location": 10,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "serial": [
                    "int"
                ],
                "constraint": [
                    "int"
                ]
            }
        }
    },
    "adventofcode2018-master/day11/main.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day11/tests.py": {
        "run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day12/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day12/plants.py": {
        "parse_initial_state": {
            "name": "parse_initial_state",
            "location": 15,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "parse_rule": {
            "name": "parse_rule",
            "location": 23,
            "return": [
                "Optional[SpreadRule]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "parse_notes": {
            "name": "parse_notes",
            "location": 32,
            "return": [
                "Tuple[(Set[SpreadRule], str)]"
            ],
            "arguments": {
                "lines": [
                    "Sequence[str]"
                ]
            }
        },
        "print_generation": {
            "name": "print_generation",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "pots": [
                    "str"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "pad_pots": {
            "name": "pad_pots",
            "location": 64,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "pots": [
                    "str"
                ]
            }
        },
        "sum_planted_pots": {
            "name": "sum_planted_pots",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "rules": [
                    "Set[SpreadRule]"
                ],
                "init": [
                    "str"
                ],
                "generations": [
                    "int"
                ],
                "display": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day12/tests.py": {
        "run": {
            "name": "run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day13/carts.py": {
        "next_turn": {
            "name": "next_turn",
            "location": 55,
            "return": [
                "Turn"
            ],
            "arguments": {
                "turn": [
                    "Turn"
                ]
            }
        },
        "parse_map": {
            "name": "parse_map",
            "location": 105,
            "return": [
                "Tuple[(Tracks, List[Cart])]"
            ],
            "arguments": {
                "map_lines": [
                    "Sequence[str]"
                ]
            }
        },
        "display_map": {
            "name": "display_map",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "tracks": [
                    "Tracks"
                ],
                "carts": [
                    "List[Cart]"
                ]
            }
        },
        "first_crash_location": {
            "name": "first_crash_location",
            "location": 150,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "tracks": [
                    "Tracks"
                ],
                "carts": [
                    "List[Cart]"
                ],
                "display": [
                    "bool"
                ]
            }
        },
        "last_cart_location": {
            "name": "last_cart_location",
            "location": 174,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "tracks": [
                    "Tracks"
                ],
                "carts": [
                    "List[Cart]"
                ],
                "display": [
                    "bool"
                ]
            }
        },
        "Direction.from_char": {
            "name": "from_char",
            "location": 36,
            "return": [
                "'Direction'"
            ],
            "arguments": {
                "cls": [],
                "char": [
                    "str"
                ]
            }
        },
        "Direction.apply_turn": {
            "name": "apply_turn",
            "location": 42,
            "return": [
                "'Direction'"
            ],
            "arguments": {
                "self": [],
                "turn": [
                    "Turn"
                ]
            }
        },
        "Direction.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cart._ahead": {
            "name": "_ahead",
            "location": 68,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cart.move": {
            "name": "move",
            "location": 78,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "Tracks"
                ]
            }
        }
    },
    "adventofcode2018-master/day13/main.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day13/tests.py": {
        "run": {
            "name": "run",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "adventofcode2018-master/day14/chocolate.py": {
        "score_after": {
            "name": "score_after",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "rounds": [
                    "int"
                ],
                "recipes": [
                    "int"
                ],
                "initial": [
                    "Sequence[int]"
                ]
            }
        },
        "recipes_before": {
            "name": "recipes_before",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "sequence": [
                    "str"
                ],
                "initial": [
                    "Sequence[int]"
                ]
            }
        }
    },
    "adventofcode2018-master/day14/main.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode2018-master/day14/tests.py": {
        "run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    }
}
{
    "aio-service-master/setup.py": {
        "load_require": {
            "name": "load_require",
            "location": 11,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "aio-service-master/aio_service/app.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "loop": []
            }
        },
        "App.started": {
            "name": "started",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.subscribe": {
            "name": "subscribe",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.dispatch": {
            "name": "dispatch",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.handler": {
            "name": "handler",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.stop": {
            "name": "stop",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-service-master/aio_service/communication.py": {
        "create_dispatcher": {
            "name": "create_dispatcher",
            "location": 16,
            "return": [
                "Callable"
            ],
            "arguments": {
                "app": [
                    "App"
                ]
            }
        },
        "create_subscriber": {
            "name": "create_subscriber",
            "location": 33,
            "return": [
                "Callable"
            ],
            "arguments": {
                "app": [
                    "App"
                ]
            }
        }
    },
    "aio-service-master/aio_service/config.py": {
        "get_env": {
            "name": "get_env",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "env": [
                    "Dict[(str, str)]"
                ],
                "name": [
                    "str"
                ],
                "default": [
                    "str"
                ],
                "prefix": [
                    "Union[(None, str)]"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 41,
            "return": [
                "Config"
            ],
            "arguments": {
                "app": [
                    "App"
                ]
            }
        },
        "set_config": {
            "name": "set_config",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "App"
                ],
                "config": [
                    "Config"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Config.get_env": {
            "name": "get_env",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        }
    },
    "aio-service-master/aio_service/db.py": {
        "get_objects": {
            "name": "get_objects",
            "location": 13,
            "return": [
                "peewee_async.Manager"
            ],
            "arguments": {
                "app": [
                    "App"
                ]
            }
        },
        "get_database": {
            "name": "get_database",
            "location": 17,
            "return": [
                "peewee_asyncext.PooledPostgresqlExtDatabase"
            ],
            "arguments": {
                "app": [
                    "App"
                ]
            }
        },
        "create_database": {
            "name": "create_database",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "App"
                ]
            }
        }
    },
    "aio-service-master/aio_service/log.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "App"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        }
    },
    "aio-service-master/aio_service/models.py": {},
    "aio-service-master/aio_service/redis.py": {
        "parse_redis_url": {
            "name": "parse_redis_url",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "get_redis_pool": {
            "name": "get_redis_pool",
            "location": 36,
            "return": [
                "aioredis.RedisPool"
            ],
            "arguments": {
                "app": [
                    "App"
                ]
            }
        }
    },
    "aio-service-master/aio_service/routing.py": {
        "resolve_routing_key": {
            "name": "resolve_routing_key",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "result": [
                    "Result"
                ]
            }
        },
        "create_router": {
            "name": "create_router",
            "location": 24,
            "return": [
                "Callable"
            ],
            "arguments": {
                "routes": [
                    "Dict[(str, IRoute)]"
                ],
                "key_resolver": [
                    "IKeyResolver"
                ],
                "default": [
                    "IRoute"
                ]
            }
        }
    },
    "aio-service-master/aio_service/__init__.py": {},
    "aio-service-master/tests/conftest.py": {
        "async_val": {
            "name": "async_val",
            "location": 6,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "create_random_name": {
            "name": "create_random_name",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "async_val._async_val": {
            "name": "_async_val",
            "location": 7,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "create_random_name.creator": {
            "name": "creator",
            "location": 16,
            "return": [],
            "arguments": {
                "prefix": []
            }
        }
    },
    "aio-service-master/tests/itegration/conftest.py": {
        "create_app": {
            "name": "create_app",
            "location": 21,
            "return": [],
            "arguments": {
                "handler": [],
                "loop": [],
                "logger": []
            }
        },
        "app_creator": {
            "name": "app_creator",
            "location": 31,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "app_creator.app_creator_inner": {
            "name": "app_creator_inner",
            "location": 34,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "aio-service-master/tests/itegration/test_communication.py": {},
    "aio-service-master/tests/unit/conftest.py": {
        "q_dispatch": {
            "name": "q_dispatch",
            "location": 9,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "q_subscribe": {
            "name": "q_subscribe",
            "location": 14,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "dispatch": {
            "name": "dispatch",
            "location": 19,
            "return": [],
            "arguments": {
                "q_dispatch": []
            }
        },
        "subscribe": {
            "name": "subscribe",
            "location": 26,
            "return": [],
            "arguments": {
                "q_subscribe": []
            }
        },
        "fake_app_creator": {
            "name": "fake_app_creator",
            "location": 33,
            "return": [],
            "arguments": {
                "loop": [],
                "dispatch": [],
                "subscribe": []
            }
        },
        "fake_app_creator.app_creator_inner": {
            "name": "app_creator_inner",
            "location": 35,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "aio-service-master/tests/unit/test_app.py": {
        "app": {
            "name": "app",
            "location": 13,
            "return": [],
            "arguments": {
                "fake_app_creator": [],
                "loop": []
            }
        },
        "test_app_hooks.make_handler": {
            "name": "make_handler",
            "location": 44,
            "return": [],
            "arguments": {
                "x": [],
                "called": []
            }
        }
    },
    "aio-service-master/tests/unit/test_config.py": {
        "test_get_env": {
            "name": "test_get_env",
            "location": 25,
            "return": [],
            "arguments": {
                "args": [],
                "expected": []
            }
        },
        "test_get_env_calls_in_Config_prefix": {
            "name": "test_get_env_calls_in_Config_prefix",
            "location": 29,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_config_leging_level": {
            "name": "test_config_leging_level",
            "location": 55,
            "return": [],
            "arguments": {
                "value": [],
                "expected": [],
                "mocker": []
            }
        }
    },
    "aio-service-master/tests/unit/test_routing.py": {
        "TestResolveRoutingKey.result_message_without_type": {
            "name": "result_message_without_type",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResolveRoutingKey.expected_key_for_message_without_type": {
            "name": "expected_key_for_message_without_type",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResolveRoutingKey.test_correctly_resolves_for_message_without_type": {
            "name": "test_correctly_resolves_for_message_without_type",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "result_message_without_type": [],
                "expected_key_for_message_without_type": []
            }
        },
        "TestResolveRoutingKey.result_message_with_type": {
            "name": "result_message_with_type",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResolveRoutingKey.expected_key_for_message_with_type": {
            "name": "expected_key_for_message_with_type",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResolveRoutingKey.test_correctly_resolves_for_message_with_type": {
            "name": "test_correctly_resolves_for_message_with_type",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "result_message_with_type": [],
                "expected_key_for_message_with_type": []
            }
        },
        "TestRouter.mocked_app": {
            "name": "mocked_app",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRouter.result": {
            "name": "result",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRouter.routes": {
            "name": "routes",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRouter.correct_key_resolver": {
            "name": "correct_key_resolver",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRouter.default_route": {
            "name": "default_route",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRouter.correct_resolver_router": {
            "name": "correct_resolver_router",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "routes": [],
                "correct_key_resolver": [],
                "default_route": []
            }
        },
        "TestRouter.missing_key_resolver": {
            "name": "missing_key_resolver",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRouter.missing_resolver_router": {
            "name": "missing_resolver_router",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "routes": [],
                "missing_key_resolver": [],
                "default_route": []
            }
        }
    }
}
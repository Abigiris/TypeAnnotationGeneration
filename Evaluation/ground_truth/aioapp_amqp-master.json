{
    "aioapp_amqp-master/setup.py": {},
    "aioapp_amqp-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [],
            "arguments": {
                "pubkey": []
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [],
            "arguments": {
                "pubkey": [],
                "password": []
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [],
            "arguments": {
                "repo": []
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [],
            "arguments": {
                "filepath": [],
                "line": []
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [],
            "arguments": {
                "filepath": [],
                "config": []
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [],
            "arguments": {
                "encrypted_password": []
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "aioapp_amqp-master/aioapp_amqp/__init__.py": {
        "AmqpTracerConfig.on_publish_start": {
            "name": "on_publish_start",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "'Span'"
                ],
                "channel": [
                    "'aioamqp.channel.Channel'"
                ],
                "payload": [
                    "bytes"
                ],
                "exchange_name": [
                    "str"
                ],
                "routing_key": [
                    "str"
                ],
                "properties": [
                    "Optional[dict]"
                ],
                "mandatory": [
                    "bool"
                ],
                "immediate": [
                    "bool"
                ]
            }
        },
        "AmqpTracerConfig.on_publish_end": {
            "name": "on_publish_end",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "'Span'"
                ],
                "channel": [
                    "'aioamqp.channel.Channel'"
                ],
                "err": [
                    "Optional[Exception]"
                ]
            }
        },
        "AmqpTracerConfig.on_ack_start": {
            "name": "on_ack_start",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "'Span'"
                ],
                "channel": [
                    "'aioamqp.channel.Channel'"
                ],
                "delivery_tag": [
                    "str"
                ],
                "multiple": [
                    "bool"
                ]
            }
        },
        "AmqpTracerConfig.on_ack_end": {
            "name": "on_ack_end",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "'Span'"
                ],
                "channel": [
                    "'aioamqp.channel.Channel'"
                ],
                "err": [
                    "Optional[Exception]"
                ]
            }
        },
        "AmqpTracerConfig.on_nack_start": {
            "name": "on_nack_start",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "'Span'"
                ],
                "channel": [
                    "'aioamqp.channel.Channel'"
                ],
                "delivery_tag": [
                    "str"
                ],
                "multiple": [
                    "bool"
                ]
            }
        },
        "AmqpTracerConfig.on_nack_end": {
            "name": "on_nack_end",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "'Span'"
                ],
                "channel": [
                    "'aioamqp.channel.Channel'"
                ],
                "err": [
                    "Optional[Exception]"
                ]
            }
        },
        "Amqp.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Optional[str]"
                ],
                "channels": [
                    "List[Channel]"
                ],
                "heartbeat": [
                    "int"
                ],
                "connect_max_attempts": [
                    "int"
                ],
                "connect_retry_delay": [
                    "float"
                ]
            }
        },
        "Amqp._masked_url": {
            "name": "_masked_url",
            "location": 369,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Amqp.channel": {
            "name": "channel",
            "location": 452,
            "return": [
                "Optional['Channel']"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "aioapp_amqp-master/examples/amqp.py": {},
    "aioapp_amqp-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 24,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 28,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "rabbitmq_override_addr": {
            "name": "rabbitmq_override_addr",
            "location": 39,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "rabbitmq": {
            "name": "rabbitmq",
            "location": 123,
            "return": [],
            "arguments": {
                "docker_compose": []
            }
        },
        "get_free_port": {
            "name": "get_free_port",
            "location": 127,
            "return": [],
            "arguments": {
                "protocol": []
            }
        }
    },
    "aioapp_amqp-master/tests/test_amqp.py": {
        "_create_span": {
            "name": "_create_span",
            "location": 28,
            "return": [
                "Optional[azs.SpanAbc]"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_amqp.Pubchannel.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "exchange": [],
                "queue": []
            }
        },
        "test_amqp.SubChannel.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "queue": []
            }
        }
    },
    "aioapp_amqp-master/tests/__init__.py": {}
}
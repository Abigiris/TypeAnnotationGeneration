{
    "aiocometd-chat-demo-master/aiocometd_chat_demo/channels.py": {
        "ChannelItem.__post_init__": {
            "name": "__post_init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelItem.__lt__": {
            "name": "__lt__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'ChannelItem'"
                ]
            }
        },
        "ChannelsModel.__post_init__": {
            "name": "__post_init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelsModel.rowCount": {
            "name": "rowCount",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[QModelIndex]"
                ]
            }
        },
        "ChannelsModel.roleNames": {
            "name": "roleNames",
            "location": 107,
            "return": [
                "Dict[(int, QByteArray)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelsModel.data": {
            "name": "data",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "QModelIndex"
                ],
                "role": [
                    "Optional[int]"
                ]
            }
        },
        "ChannelsModel._add_channel": {
            "name": "_add_channel",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ChannelsModel._remove_channel": {
            "name": "_remove_channel",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ChannelsModel._channel_index": {
            "name": "_channel_index",
            "location": 186,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ChannelsModel.update_available_channels": {
            "name": "update_available_channels",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_names": [
                    "Set[str]"
                ]
            }
        },
        "ChannelsModel.add_incoming_message": {
            "name": "add_incoming_message",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str"
                ],
                "channel_type": [
                    "ChannelType"
                ],
                "message": [
                    "ChatMessage"
                ]
            }
        }
    },
    "aiocometd-chat-demo-master/aiocometd_chat_demo/chat_service.py": {
        "ChatService.url": {
            "name": "url",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "ChatService.username": {
            "name": "username",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "ChatService.channels_model": {
            "name": "channels_model",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[ChannelsModel]"
                ]
            }
        },
        "ChatService.last_error": {
            "name": "last_error",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "str"
                ]
            }
        },
        "ChatService._room_channel": {
            "name": "_room_channel",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatService._members_channel": {
            "name": "_members_channel",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatService.connect_": {
            "name": "connect_",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatService.on_connected": {
            "name": "on_connected",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatService.disconnect_": {
            "name": "disconnect_",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatService.on_disconnected": {
            "name": "on_disconnected",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatService.on_error": {
            "name": "on_error",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ]
            }
        },
        "ChatService.message_received": {
            "name": "message_received",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "JsonObject"
                ]
            }
        },
        "ChatService.send_message": {
            "name": "send_message",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str"
                ],
                "channel_type": [
                    "ChannelType"
                ],
                "contents": [
                    "str"
                ]
            }
        }
    },
    "aiocometd-chat-demo-master/aiocometd_chat_demo/cometd.py": {
        "run_coro": {
            "name": "run_coro",
            "location": 21,
            "return": [
                "'futures.Future[T_co]'"
            ],
            "arguments": {
                "coro": [
                    "Awaitable[T_co]"
                ],
                "callback": [
                    "Optional[Callable[(['futures.Future[T_co]'], Any)]]"
                ],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "CometdClient.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "subscriptions": [
                    "Iterable[str]"
                ],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "CometdClient.state": {
            "name": "state",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state": [
                    "ClientState"
                ]
            }
        },
        "CometdClient.connect_": {
            "name": "connect_",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CometdClient._on_connect_done": {
            "name": "_on_connect_done",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "'futures.Future[None]'"
                ]
            }
        },
        "CometdClient.disconnect_": {
            "name": "disconnect_",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CometdClient.publish": {
            "name": "publish",
            "location": 206,
            "return": [
                "MessageResponse"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "data": [
                    "JsonObject"
                ]
            }
        },
        "CometdClient._on_publish_done": {
            "name": "_on_publish_done",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "MessageResponse"
                ],
                "future": [
                    "'futures.Future[JsonObject]'"
                ]
            }
        }
    },
    "aiocometd-chat-demo-master/aiocometd_chat_demo/conversation.py": {
        "ConversationModel.__post_init__": {
            "name": "__post_init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversationModel.channel": {
            "name": "channel",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversationModel.rowCount": {
            "name": "rowCount",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[QModelIndex]"
                ]
            }
        },
        "ConversationModel.roleNames": {
            "name": "roleNames",
            "location": 81,
            "return": [
                "Dict[(int, QByteArray)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversationModel.data": {
            "name": "data",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "QModelIndex"
                ],
                "role": [
                    "Optional[int]"
                ]
            }
        },
        "ConversationModel.send_message": {
            "name": "send_message",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str"
                ]
            }
        },
        "ConversationModel.add_incoming_message": {
            "name": "add_incoming_message",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "ChatMessage"
                ]
            }
        }
    },
    "aiocometd-chat-demo-master/aiocometd_chat_demo/exceptions.py": {},
    "aiocometd-chat-demo-master/aiocometd_chat_demo/_metadata.py": {},
    "aiocometd-chat-demo-master/aiocometd_chat_demo/__init__.py": {},
    "aiocometd-chat-demo-master/aiocometd_chat_demo/__main__.py": {
        "register_types": {
            "name": "register_types",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiocometd-chat-demo-master/tests/test_channels.py": {
        "TestChannelItem.test_less_then_comparable_by_name": {
            "name": "test_less_then_comparable_by_name",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_init": {
            "name": "test_init",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_init_sets_up_signal_forwarding": {
            "name": "test_init_sets_up_signal_forwarding",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_row_count": {
            "name": "test_row_count",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_role_names": {
            "name": "test_role_names",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_channel_index": {
            "name": "test_channel_index",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_add_channel_inserts_channel_in_sorted_order": {
            "name": "test_add_channel_inserts_channel_in_sorted_order",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_add_channel_sets_up_signal_forwarding": {
            "name": "test_add_channel_sets_up_signal_forwarding",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_remove_channel": {
            "name": "test_remove_channel",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_remove_channel_does_nothing_on_nonexistant_channel": {
            "name": "test_remove_channel_does_nothing_on_nonexistant_channel",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_update_available_channels": {
            "name": "test_update_available_channels",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_add_incoming_message_on_group_channel": {
            "name": "test_add_incoming_message_on_group_channel",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_add_incoming_message_on_user_channel": {
            "name": "test_add_incoming_message_on_user_channel",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModel.test_add_incoming_message_ignore_nonexistant_channel": {
            "name": "test_add_incoming_message_ignore_nonexistant_channel",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModelData.setUp": {
            "name": "setUp",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModelData.test_data": {
            "name": "test_data",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModelData.test_data_return_none_for_invalid_index": {
            "name": "test_data_return_none_for_invalid_index",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChannelsModelData.test_data_return_none_for_unhandled_role": {
            "name": "test_data_return_none_for_unhandled_role",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-chat-demo-master/tests/test_chat_service.py": {
        "TestChatService.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_url": {
            "name": "test_url",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_username": {
            "name": "test_username",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_channels_model": {
            "name": "test_channels_model",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_last_error": {
            "name": "test_last_error",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_room_channel": {
            "name": "test_room_channel",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_members_channel": {
            "name": "test_members_channel",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_connect": {
            "name": "test_connect",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "cometd_cls": [],
                "channels_cls": []
            }
        },
        "TestChatService.test_on_connected": {
            "name": "test_on_connected",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_on_connected_sets_error_on_no_client": {
            "name": "test_on_connected_sets_error_on_no_client",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_disconnect": {
            "name": "test_disconnect",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_disconnect_does_nothing_if_not_connected": {
            "name": "test_disconnect_does_nothing_if_not_connected",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_on_disconnected": {
            "name": "test_on_disconnected",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_on_disconnected_sets_error_on_no_client": {
            "name": "test_on_disconnected_sets_error_on_no_client",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_on_error": {
            "name": "test_on_error",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_message_received_on_chat_message": {
            "name": "test_message_received_on_chat_message",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "datetime_cls": []
            }
        },
        "TestChatService.test_message_received_on_members_message": {
            "name": "test_message_received_on_members_message",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_message_received_ignores_unrecognized_channels": {
            "name": "test_message_received_ignores_unrecognized_channels",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_message_received_sets_error_on_no_channels_model": {
            "name": "test_message_received_sets_error_on_no_channels_model",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_send_message_group_channel": {
            "name": "test_send_message_group_channel",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_send_message_user_channel": {
            "name": "test_send_message_user_channel",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChatService.test_send_message_sets_error_on_no_client": {
            "name": "test_send_message_sets_error_on_no_client",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-chat-demo-master/tests/test_cometd.py": {
        "TestCometdClient.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.make_async_iterator": {
            "name": "make_async_iterator",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "TestCometdClient.test_init": {
            "name": "test_init",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_connect": {
            "name": "test_connect",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "run_coro": []
            }
        },
        "TestCometdClient.test_connect_do_nothing_if_connected": {
            "name": "test_connect_do_nothing_if_connected",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "run_coro": []
            }
        },
        "TestCometdClient.test_disconnect": {
            "name": "test_disconnect",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_disconnect_does_nothing_if_disconnected": {
            "name": "test_disconnect_does_nothing_if_disconnected",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_disconnect_does_nothing_in_error_state": {
            "name": "test_disconnect_does_nothing_in_error_state",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_disconnect_error_on_no_task": {
            "name": "test_disconnect_error_on_no_task",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_on_connect_done_does_nothing_on_normal_return": {
            "name": "test_on_connect_done_does_nothing_on_normal_return",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_on_connect_done_does_nothing_on_cancelled_error": {
            "name": "test_on_connect_done_does_nothing_on_cancelled_error",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_on_connect_done_set_error_on_exception": {
            "name": "test_on_connect_done_set_error_on_exception",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_publish": {
            "name": "test_publish",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "run_coro": [],
                "partial_func": []
            }
        },
        "TestCometdClient.test_publish_error_if_not_connected": {
            "name": "test_publish_error_if_not_connected",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_publish_error_if_client_not_initialized": {
            "name": "test_publish_error_if_client_not_initialized",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test__on_publish_done_on_normal_return": {
            "name": "test__on_publish_done_on_normal_return",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test__on_publish_done_error_on_exception": {
            "name": "test__on_publish_done_error_on_exception",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_set_state_connected": {
            "name": "test_set_state_connected",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_set_state_disconnected": {
            "name": "test_set_state_disconnected",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_set_state_no_state_change": {
            "name": "test_set_state_no_state_change",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCometdClient.test_set_state_on_error": {
            "name": "test_set_state_on_error",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRunCoro.test_with_loop_and_callback": {
            "name": "test_with_loop_and_callback",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "asyncio_mod": []
            }
        },
        "TestRunCoro.test_without_callback": {
            "name": "test_without_callback",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "asyncio_mod": []
            }
        },
        "TestRunCoro.test_without_loop": {
            "name": "test_without_loop",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "asyncio_mod": []
            }
        }
    },
    "aiocometd-chat-demo-master/tests/test_conversation.py": {
        "TestConversationModel.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModel.test_init": {
            "name": "test_init",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModel.test_channel": {
            "name": "test_channel",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModel.test_row_count_returns_message_count": {
            "name": "test_row_count_returns_message_count",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModel.test_row_count_zero_on_empty_model": {
            "name": "test_row_count_zero_on_empty_model",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModel.test_role_names": {
            "name": "test_role_names",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModel.test_send_message": {
            "name": "test_send_message",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModel.test_add_incoming_message": {
            "name": "test_add_incoming_message",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModelData.setUp": {
            "name": "setUp",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModelData.test_data": {
            "name": "test_data",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModelData.test_data_return_none_for_invalid_index": {
            "name": "test_data_return_none_for_invalid_index",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConversationModelData.test_data_return_none_for_unhandled_role": {
            "name": "test_data_return_none_for_unhandled_role",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-chat-demo-master/tests/test_main.py": {
        "TestMain.test_register_types": {
            "name": "test_register_types",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "register_type": [],
                "register_uncreatable_type": []
            }
        },
        "TestMain.test_main": {
            "name": "test_main",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "logging_mod": [],
                "gui_app_cls": [],
                "event_loop_cls": [],
                "asyncio_mod": [],
                "register_types_func": [],
                "engine_cls": [],
                "sys_mod": []
            }
        }
    },
    "aiocometd-chat-demo-master/tests/__init__.py": {}
}
{
    "aiodine-master/setup.py": {},
    "aiodine-master/aiodine/compat.py": {
        "wrap_async": {
            "name": "wrap_async",
            "location": 21,
            "return": [
                "Callable[(..., Awaitable)]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "wrap_generator_async": {
            "name": "wrap_generator_async",
            "location": 29,
            "return": [
                "Callable[(..., AsyncGenerator)]"
            ],
            "arguments": {
                "gen": [
                    "Generator"
                ]
            }
        }
    },
    "aiodine-master/aiodine/consumers.py": {
        "Consumer.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "store": [
                    "'Store'"
                ],
                "consumer_function": [
                    "Union[(partial, Callable, CoroutineFunction)]"
                ]
            }
        },
        "Consumer.resolve": {
            "name": "resolve",
            "location": 77,
            "return": [
                "ResolvedProviders"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodine-master/aiodine/datatypes.py": {},
    "aiodine-master/aiodine/exceptions.py": {
        "RecursiveProviderError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "first": [
                    "str"
                ],
                "second": [
                    "str"
                ]
            }
        },
        "ProviderDoesNotExist.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "aiodine-master/aiodine/providers.py": {
        "Provider.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ],
                "name": [
                    "str"
                ],
                "scope": [
                    "str"
                ],
                "lazy": [
                    "bool"
                ],
                "autouse": [
                    "bool"
                ]
            }
        },
        "Provider.create": {
            "name": "create",
            "location": 71,
            "return": [
                "'Provider'"
            ],
            "arguments": {
                "cls": [],
                "func": []
            }
        },
        "Provider.__call__": {
            "name": "__call__",
            "location": 80,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "AsyncExitStack"
                ]
            }
        },
        "FunctionProvider.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "AsyncExitStack"
                ]
            }
        },
        "SessionProvider.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionProvider.__call__": {
            "name": "__call__",
            "location": 152,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "AsyncExitStack"
                ]
            }
        },
        "ContextProvider.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "store": [
                    "'Store'"
                ]
            }
        },
        "ContextProvider._build_provider": {
            "name": "_build_provider",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ContextProvider._set": {
            "name": "_set",
            "location": 185,
            "return": [
                "List[Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextProvider._reset": {
            "name": "_reset",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextProvider.assign": {
            "name": "assign",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodine-master/aiodine/scopes.py": {},
    "aiodine-master/aiodine/sessions.py": {
        "Session.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "store": [
                    "'Store'"
                ]
            }
        }
    },
    "aiodine-master/aiodine/store.py": {
        "Store.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "providers_module": [],
                "scope_aliases": [
                    "Dict[(str, str)]"
                ],
                "default_scope": [
                    "str"
                ]
            }
        },
        "Store.empty": {
            "name": "empty",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.has_provider": {
            "name": "has_provider",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Store._get": {
            "name": "_get",
            "location": 58,
            "return": [
                "Optional[Provider]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Store._get_providers": {
            "name": "_get_providers",
            "location": 66,
            "return": [
                "Dict[(str, Provider)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Store.discover_default": {
            "name": "discover_default",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.discover": {
            "name": "discover",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "Store.provider": {
            "name": "provider",
            "location": 88,
            "return": [
                "Provider"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ],
                "scope": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "lazy": [
                    "bool"
                ],
                "autouse": [
                    "bool"
                ]
            }
        },
        "Store._add": {
            "name": "_add",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "prov": [
                    "Provider"
                ]
            }
        },
        "Store._check_for_recursive_providers": {
            "name": "_check_for_recursive_providers",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "func": [
                    "Callable"
                ]
            }
        },
        "Store.consumer": {
            "name": "consumer",
            "location": 143,
            "return": [
                "Consumer"
            ],
            "arguments": {
                "self": [],
                "consumer_function": [
                    "Union[(partial, Callable, CoroutineFunction)]"
                ]
            }
        },
        "Store.useprovider": {
            "name": "useprovider",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.get_used_providers": {
            "name": "get_used_providers",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Store.create_context_provider": {
            "name": "create_context_provider",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.freeze": {
            "name": "freeze",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.exit_freeze": {
            "name": "exit_freeze",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.session": {
            "name": "session",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.useprovider.decorate": {
            "name": "decorate",
            "location": 151,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "aiodine-master/aiodine/__init__.py": {},
    "aiodine-master/scripts/changelog_bump.py": {
        "update": {
            "name": "update",
            "location": 10,
            "return": [],
            "arguments": {
                "content": [],
                "match": [
                    "Optional[Match]"
                ],
                "first_line": [
                    "Callable"
                ],
                "second_line": [
                    "Callable"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "bump_changelog": {
            "name": "bump_changelog",
            "location": 28,
            "return": [],
            "arguments": {
                "content": [
                    "str"
                ],
                "next_version": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "next_version": [
                    "str"
                ]
            }
        }
    },
    "aiodine-master/tests/conftest.py": {
        "store": {
            "name": "store",
            "location": 10,
            "return": [
                "Store"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "aiodine-master/tests/test_async_providers.py": {
        "test_use_async_provider.play_sync": {
            "name": "play_sync",
            "location": 16,
            "return": [],
            "arguments": {
                "pitch": []
            }
        }
    },
    "aiodine-master/tests/test_autouse.py": {},
    "aiodine-master/tests/test_consumers.py": {
        "test_if_provider_does_not_exist_then_missing_argument.gra": {
            "name": "gra",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_if_provider_exists_then_injected.arg": {
            "name": "arg",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_if_provider_exists_then_injected.func": {
            "name": "func",
            "location": 43,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_non_provider_parameters_after_provider_parameters_ok.pitch": {
            "name": "pitch",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_non_provider_parameters_after_provider_parameters_ok.play": {
            "name": "play",
            "location": 57,
            "return": [],
            "arguments": {
                "pitch": [],
                "duration": []
            }
        },
        "test_non_provider_parameters_before_provider_parameters_ok.pitch": {
            "name": "pitch",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_non_provider_parameters_before_provider_parameters_ok.play": {
            "name": "play",
            "location": 73,
            "return": [],
            "arguments": {
                "duration": [],
                "pitch": []
            }
        },
        "test_async_consumer.pitch": {
            "name": "pitch",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_class_based_consumer.pitch": {
            "name": "pitch",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_if_wrapper_then_wrapped_must_be_async.not_async": {
            "name": "not_async",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_class_based_consumer.Consumer.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "pitch": [
                    "str"
                ]
            }
        }
    },
    "aiodine-master/tests/test_context_providers.py": {},
    "aiodine-master/tests/test_decorators.py": {
        "test_at_provider_returns_a_provider_object": {
            "name": "test_at_provider_returns_a_provider_object",
            "location": 4,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "test_at_provider_returns_a_provider_object.example": {
            "name": "example",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "aiodine-master/tests/test_discover_default.py": {
        "providers_module": {
            "name": "providers_module",
            "location": 9,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "test_default_providers_module": {
            "name": "test_default_providers_module",
            "location": 20,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "test_if_no_provider_module_then_ok": {
            "name": "test_if_no_provider_module_then_ok",
            "location": 24,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "providers_module.FixtureConf.example": {
            "name": "example",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "aiodine-master/tests/test_discover_modules.py": {
        "notes_module": {
            "name": "notes_module",
            "location": 8,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "test_if_module_does_not_exist_then_error": {
            "name": "test_if_module_does_not_exist_then_error",
            "location": 26,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "notes_module.NotesModule.pitch": {
            "name": "pitch",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "aiodine-master/tests/test_generator_providers.py": {
        "test_sync_function_yield_provider.resource": {
            "name": "resource",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_sync_function_yield_provider.consume": {
            "name": "consume",
            "location": 20,
            "return": [],
            "arguments": {
                "resource": [
                    "str"
                ]
            }
        },
        "test_async_function_generator_provider.consume": {
            "name": "consume",
            "location": 40,
            "return": [],
            "arguments": {
                "resource": [
                    "str"
                ]
            }
        },
        "test_session_generator_provider.consume": {
            "name": "consume",
            "location": 60,
            "return": [],
            "arguments": {
                "resource": [
                    "str"
                ]
            }
        }
    },
    "aiodine-master/tests/test_names.py": {
        "test_name_is_function_name_by_default": {
            "name": "test_name_is_function_name_by_default",
            "location": 4,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "test_if_name_given_then_used": {
            "name": "test_if_name_given_then_used",
            "location": 12,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "test_name_is_function_name_by_default.example": {
            "name": "example",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_if_name_given_then_used.example": {
            "name": "example",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "aiodine-master/tests/test_nested_providers.py": {
        "test_detect_recursive_provider.b": {
            "name": "b",
            "location": 42,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_provider_uses_provider.a": {
            "name": "a",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_provider_uses_provider.b": {
            "name": "b",
            "location": 18,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_provider_uses_provider_declared_later.b": {
            "name": "b",
            "location": 29,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_provider_uses_provider_declared_later.a": {
            "name": "a",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_detect_recursive_provider.a": {
            "name": "a",
            "location": 48,
            "return": [],
            "arguments": {
                "b": []
            }
        }
    },
    "aiodine-master/tests/test_override_provider.py": {},
    "aiodine-master/tests/test_provider_factories.py": {},
    "aiodine-master/tests/test_scopes.py": {
        "test_default_scope": {
            "name": "test_default_scope",
            "location": 15,
            "return": [],
            "arguments": {
                "store": [],
                "expected_scope": []
            }
        },
        "test_unknown_scope": {
            "name": "test_unknown_scope",
            "location": 77,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "test_default_scope.items": {
            "name": "items",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_reuse_of_provided_values.items": {
            "name": "items",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_reuse_of_provided_values.add": {
            "name": "add",
            "location": 36,
            "return": [],
            "arguments": {
                "items": [],
                "value": []
            }
        },
        "test_scope_aliases.items": {
            "name": "items",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_scope_aliases.add": {
            "name": "add",
            "location": 69,
            "return": [],
            "arguments": {
                "items": [],
                "value": []
            }
        },
        "test_unknown_scope.items": {
            "name": "items",
            "location": 81,
            "return": [],
            "arguments": {}
        }
    },
    "aiodine-master/tests/test_sessions.py": {
        "test_session_provider_instanciate_on_enter.consumer": {
            "name": "consumer",
            "location": 17,
            "return": [],
            "arguments": {
                "resources": [
                    "None"
                ]
            }
        },
        "test_session_provider_destroyed_on_exit.consumer": {
            "name": "consumer",
            "location": 30,
            "return": [],
            "arguments": {
                "resources": [
                    "list"
                ]
            }
        },
        "test_reuse_session_provider_within_session.consumer": {
            "name": "consumer",
            "location": 52,
            "return": [],
            "arguments": {
                "foo": [],
                "bar": []
            }
        }
    },
    "aiodine-master/tests/test_useprovider.py": {
        "declare_provider": {
            "name": "declare_provider",
            "location": 8,
            "return": [],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        }
    },
    "aiodine-master/tests/__init__.py": {}
}
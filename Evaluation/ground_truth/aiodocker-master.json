{
    "aiodocker-master/setup.py": {},
    "aiodocker-master/aiodocker/channel.py": {
        "ChannelSubscriber.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ChannelSubscriber.__del__": {
            "name": "__del__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.subscribe": {
            "name": "subscribe",
            "location": 26,
            "return": [
                "ChannelSubscriber"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodocker-master/aiodocker/configs.py": {
        "DockerConfigs.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        }
    },
    "aiodocker-master/aiodocker/constants.py": {},
    "aiodocker-master/aiodocker/containers.py": {
        "DockerContainers.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        },
        "DockerContainers.container": {
            "name": "container",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "container_id": []
            }
        },
        "DockerContainers.exec": {
            "name": "exec",
            "location": 107,
            "return": [
                "Exec"
            ],
            "arguments": {
                "self": [],
                "exec_id": [
                    "str"
                ]
            }
        },
        "DockerContainer.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        },
        "DockerContainer.id": {
            "name": "id",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer.log": {
            "name": "log",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer.attach": {
            "name": "attach",
            "location": 246,
            "return": [
                "Stream"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer.stats": {
            "name": "stats",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer.__getitem__": {
            "name": "__getitem__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DockerContainer.__hasitem__": {
            "name": "__hasitem__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "aiodocker-master/aiodocker/docker.py": {
        "Docker.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Optional[str]"
                ],
                "connector": [
                    "Optional[aiohttp.BaseConnector]"
                ],
                "session": [
                    "Optional[aiohttp.ClientSession]"
                ],
                "ssl_context": [
                    "Optional[ssl.SSLContext]"
                ],
                "api_version": [
                    "str"
                ]
            }
        },
        "Docker._canonicalize_url": {
            "name": "_canonicalize_url",
            "location": 176,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, URL)]"
                ]
            }
        },
        "Docker._query": {
            "name": "_query",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, URL)]"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "Docker._query_chunked_post": {
            "name": "_query_chunked_post",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, URL)]"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "Docker._docker_machine_ssl_context": {
            "name": "_docker_machine_ssl_context",
            "location": 363,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {}
        }
    },
    "aiodocker-master/aiodocker/events.py": {
        "DockerEvents.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        },
        "DockerEvents.listen": {
            "name": "listen",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerEvents.subscribe": {
            "name": "subscribe",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerEvents._transform_event": {
            "name": "_transform_event",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "aiodocker-master/aiodocker/exceptions.py": {
        "DockerError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "data": []
            }
        },
        "DockerError.__repr__": {
            "name": "__repr__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerError.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerContainerError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "data": [],
                "container_id": []
            }
        },
        "DockerContainerError.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerContainerError.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodocker-master/aiodocker/execs.py": {
        "Exec.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docker": [
                    "'Docker'"
                ],
                "id": [
                    "str"
                ],
                "tty": [
                    "Optional[bool]"
                ]
            }
        },
        "Exec.id": {
            "name": "id",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exec.start": {
            "name": "start",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodocker-master/aiodocker/images.py": {
        "DockerImages.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        },
        "DockerImages.pull": {
            "name": "pull",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "from_image": [
                    "str"
                ]
            }
        },
        "DockerImages._handle_response": {
            "name": "_handle_response",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "cm": [],
                "stream": []
            }
        },
        "DockerImages.push": {
            "name": "push",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DockerImages.build": {
            "name": "build",
            "location": 275,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerImages.export_image": {
            "name": "export_image",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DockerImages.import_image": {
            "name": "import_image",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "stream": [
                    "bool"
                ]
            }
        },
        "_ExportCM.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "cm": []
            }
        }
    },
    "aiodocker-master/aiodocker/jsonstream.py": {
        "json_stream_stream": {
            "name": "json_stream_stream",
            "location": 46,
            "return": [],
            "arguments": {
                "response": [],
                "transform": []
            }
        },
        "_JsonStreamResult.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "transform": []
            }
        },
        "_JsonStreamResult.__aiter__": {
            "name": "__aiter__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_JsonStreamResult.__anext__": {
            "name": "__anext__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodocker-master/aiodocker/logs.py": {
        "DockerLog.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docker": [
                    "'Docker'"
                ],
                "container": [
                    "'DockerContainer'"
                ]
            }
        },
        "DockerLog.listen": {
            "name": "listen",
            "location": 22,
            "return": [
                "ChannelSubscriber"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerLog.subscribe": {
            "name": "subscribe",
            "location": 28,
            "return": [
                "ChannelSubscriber"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodocker-master/aiodocker/multiplexed.py": {
        "MultiplexedResult.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "raw": []
            }
        },
        "MultiplexedResult.__aiter__": {
            "name": "__aiter__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedResult.fetch": {
            "name": "fetch",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedResult.fetch_raw": {
            "name": "fetch_raw",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiodocker-master/aiodocker/networks.py": {
        "DockerNetworks.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        },
        "DockerNetwork.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "docker": [],
                "id_": []
            }
        }
    },
    "aiodocker-master/aiodocker/nodes.py": {
        "DockerSwarmNodes.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        }
    },
    "aiodocker-master/aiodocker/secrets.py": {
        "DockerSecrets.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        }
    },
    "aiodocker-master/aiodocker/services.py": {
        "DockerServices.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        },
        "DockerServices.logs": {
            "name": "logs",
            "location": 181,
            "return": [
                "Union[(str, AsyncIterator[str])]"
            ],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        }
    },
    "aiodocker-master/aiodocker/stream.py": {
        "Stream.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docker": [
                    "'Docker'"
                ],
                "setup": [
                    "Callable[([], Awaitable[Tuple[(URL, Optional[bytes], bool)]])]"
                ],
                "timeout": [
                    "Optional[aiohttp.ClientTimeout]"
                ]
            }
        },
        "Stream.__del__": {
            "name": "__del__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_warnings": []
            }
        },
        "_ExecParser.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [],
                "tty": []
            }
        },
        "_ExecParser.set_exception": {
            "name": "set_exception",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "_ExecParser.feed_eof": {
            "name": "feed_eof",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExecParser.feed_data": {
            "name": "feed_data",
            "location": 156,
            "return": [
                "Tuple[(bool, bytes)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "aiodocker-master/aiodocker/swarm.py": {
        "DockerSwarm.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docker": []
            }
        }
    },
    "aiodocker-master/aiodocker/system.py": {
        "DockerSystem.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docker": []
            }
        }
    },
    "aiodocker-master/aiodocker/tasks.py": {
        "DockerTasks.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        }
    },
    "aiodocker-master/aiodocker/utils.py": {
        "parse_content_type": {
            "name": "parse_content_type",
            "location": 60,
            "return": [
                "Tuple[(str, str, Mapping[(str, str)])]"
            ],
            "arguments": {
                "ct": [
                    "str"
                ]
            }
        },
        "identical": {
            "name": "identical",
            "location": 90,
            "return": [],
            "arguments": {
                "d1": [],
                "d2": []
            }
        },
        "human_bool": {
            "name": "human_bool",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "httpize": {
            "name": "httpize",
            "location": 126,
            "return": [
                "Optional[Mapping[(str, Any)]]"
            ],
            "arguments": {
                "d": [
                    "Optional[Mapping]"
                ]
            }
        },
        "clean_map": {
            "name": "clean_map",
            "location": 176,
            "return": [
                "Mapping[(Any, Any)]"
            ],
            "arguments": {
                "obj": [
                    "Mapping[(Any, Any)]"
                ]
            }
        },
        "format_env": {
            "name": "format_env",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [],
                "value": [
                    "Union[(None, bytes, str)]"
                ]
            }
        },
        "clean_networks": {
            "name": "clean_networks",
            "location": 196,
            "return": [
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "networks": [
                    "Iterable[str]"
                ]
            }
        },
        "clean_filters": {
            "name": "clean_filters",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "filters": [
                    "Mapping"
                ]
            }
        },
        "mktar_from_dockerfile": {
            "name": "mktar_from_dockerfile",
            "location": 230,
            "return": [
                "IO"
            ],
            "arguments": {
                "fileobject": [
                    "BinaryIO"
                ]
            }
        },
        "compose_auth_header": {
            "name": "compose_auth_header",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "auth": [
                    "Union[(MutableMapping, str, bytes)]"
                ],
                "registry_addr": [
                    "str"
                ]
            }
        },
        "_DecodeHelper.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [],
                "encoding": []
            }
        },
        "_DecodeHelper.__aiter__": {
            "name": "__aiter__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncCM.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        }
    },
    "aiodocker-master/aiodocker/volumes.py": {
        "DockerVolumes.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "docker": []
            }
        },
        "DockerVolume.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "docker": [],
                "name": []
            }
        }
    },
    "aiodocker-master/aiodocker/__init__.py": {},
    "aiodocker-master/docs/conf.py": {},
    "aiodocker-master/examples/events.py": {},
    "aiodocker-master/examples/info.py": {},
    "aiodocker-master/examples/stdio_stdout.py": {},
    "aiodocker-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 39,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_random_name": {
            "name": "_random_name",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "random_name": {
            "name": "random_name",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "image_name": {
            "name": "image_name",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "testing_images": {
            "name": "testing_images",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "image_name": [
                    "str"
                ]
            }
        },
        "docker": {
            "name": "docker",
            "location": 111,
            "return": [],
            "arguments": {
                "event_loop": [],
                "testing_images": []
            }
        },
        "swarm": {
            "name": "swarm",
            "location": 147,
            "return": [],
            "arguments": {
                "event_loop": [],
                "docker": []
            }
        },
        "make_container": {
            "name": "make_container",
            "location": 156,
            "return": [],
            "arguments": {
                "event_loop": [],
                "docker": []
            }
        },
        "requires_api_version.check": {
            "name": "check",
            "location": 139,
            "return": [],
            "arguments": {
                "version": [],
                "reason": []
            }
        }
    },
    "aiodocker-master/tests/test_configs.py": {
        "tmp_config": {
            "name": "tmp_config",
            "location": 7,
            "return": [],
            "arguments": {
                "event_loop": [],
                "swarm": [],
                "random_name": []
            }
        }
    },
    "aiodocker-master/tests/test_containers.py": {},
    "aiodocker-master/tests/test_events.py": {},
    "aiodocker-master/tests/test_execs.py": {},
    "aiodocker-master/tests/test_images.py": {
        "skip_windows": {
            "name": "skip_windows",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "aiodocker-master/tests/test_integration.py": {
        "skip_windows": {
            "name": "skip_windows",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "aiodocker-master/tests/test_networks.py": {},
    "aiodocker-master/tests/test_nodes.py": {},
    "aiodocker-master/tests/test_secrets.py": {
        "tmp_secret": {
            "name": "tmp_secret",
            "location": 7,
            "return": [],
            "arguments": {
                "event_loop": [],
                "swarm": [],
                "random_name": []
            }
        }
    },
    "aiodocker-master/tests/test_services.py": {
        "tmp_service": {
            "name": "tmp_service",
            "location": 20,
            "return": [],
            "arguments": {
                "event_loop": [],
                "swarm": [],
                "random_name": []
            }
        }
    },
    "aiodocker-master/tests/test_swarm.py": {},
    "aiodocker-master/tests/test_system.py": {},
    "aiodocker-master/tests/test_utils.py": {
        "test_clean_mapping": {
            "name": "test_clean_mapping",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_parse_content_type": {
            "name": "test_parse_content_type",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_format_env": {
            "name": "test_format_env",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_clean_networks": {
            "name": "test_clean_networks",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_clean_filters": {
            "name": "test_clean_filters",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "aiodocker-master/tests/test_volumes.py": {}
}
{
    "aiohttp-master/setup.py": {},
    "aiohttp-master/aiohttp/abc.py": {
        "AbstractRouter.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRouter.post_init": {
            "name": "post_init",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Application"
                ]
            }
        },
        "AbstractRouter.frozen": {
            "name": "frozen",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRouter.freeze": {
            "name": "freeze",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMatchInfo.handler": {
            "name": "handler",
            "location": 61,
            "return": [
                "Callable[([Request], Awaitable[StreamResponse])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMatchInfo.expect_handler": {
            "name": "expect_handler",
            "location": 66,
            "return": [
                "Callable[([Request], Awaitable[None])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMatchInfo.http_exception": {
            "name": "http_exception",
            "location": 71,
            "return": [
                "Optional[HTTPException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMatchInfo.get_info": {
            "name": "get_info",
            "location": 75,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMatchInfo.apps": {
            "name": "apps",
            "location": 80,
            "return": [
                "Tuple[(Application, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMatchInfo.add_app": {
            "name": "add_app",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Application"
                ]
            }
        },
        "AbstractMatchInfo.freeze": {
            "name": "freeze",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractView.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Request"
                ]
            }
        },
        "AbstractView.request": {
            "name": "request",
            "location": 109,
            "return": [
                "Request"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractView.__await__": {
            "name": "__await__",
            "location": 114,
            "return": [
                "Generator[(Any, None, StreamResponse)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractCookieJar.clear": {
            "name": "clear",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Optional[ClearCookiePredicate]"
                ]
            }
        },
        "AbstractCookieJar.clear_domain": {
            "name": "clear_domain",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "AbstractCookieJar.update_cookies": {
            "name": "update_cookies",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "LooseCookies"
                ],
                "response_url": [
                    "URL"
                ]
            }
        },
        "AbstractCookieJar.filter_cookies": {
            "name": "filter_cookies",
            "location": 155,
            "return": [
                "'BaseCookie[str]'"
            ],
            "arguments": {
                "self": [],
                "request_url": [
                    "URL"
                ]
            }
        },
        "AbstractStreamWriter.enable_compression": {
            "name": "enable_compression",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ]
            }
        },
        "AbstractStreamWriter.enable_chunking": {
            "name": "enable_chunking",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAccessLogger.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "log_format": [
                    "str"
                ]
            }
        },
        "AbstractAccessLogger.log": {
            "name": "log",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/base_protocol.py": {
        "BaseProtocol.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "BaseProtocol.pause_writing": {
            "name": "pause_writing",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProtocol.resume_writing": {
            "name": "resume_writing",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProtocol.pause_reading": {
            "name": "pause_reading",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProtocol.resume_reading": {
            "name": "resume_reading",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProtocol.connection_made": {
            "name": "connection_made",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.BaseTransport"
                ]
            }
        },
        "BaseProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/client.py": {
        "request": {
            "name": "request",
            "location": 1172,
            "return": [
                "_SessionRequestContextManager"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "Optional[StrOrURL]"
                ]
            }
        },
        "ClientSession.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type['ClientSession']"
                ]
            }
        },
        "ClientSession.__del__": {
            "name": "__del__",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_warnings": [
                    "Any"
                ]
            }
        },
        "ClientSession.request": {
            "name": "request",
            "location": 312,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession._build_url": {
            "name": "_build_url",
            "location": 318,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "str_or_url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.ws_connect": {
            "name": "ws_connect",
            "location": 650,
            "return": [
                "'_WSRequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession._prepare_headers": {
            "name": "_prepare_headers",
            "location": 896,
            "return": [
                "'CIMultiDict[str]'"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Optional[LooseHeaders]"
                ]
            }
        },
        "ClientSession.get": {
            "name": "get",
            "location": 912,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.options": {
            "name": "options",
            "location": 920,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.head": {
            "name": "head",
            "location": 930,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.post": {
            "name": "post",
            "location": 940,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.put": {
            "name": "put",
            "location": 948,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.patch": {
            "name": "patch",
            "location": 956,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.delete": {
            "name": "delete",
            "location": 964,
            "return": [
                "'_RequestContextManager'"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "StrOrURL"
                ]
            }
        },
        "ClientSession.closed": {
            "name": "closed",
            "location": 979,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.connector": {
            "name": "connector",
            "location": 987,
            "return": [
                "Optional[BaseConnector]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.cookie_jar": {
            "name": "cookie_jar",
            "location": 992,
            "return": [
                "AbstractCookieJar"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.version": {
            "name": "version",
            "location": 997,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.requote_redirect_url": {
            "name": "requote_redirect_url",
            "location": 1002,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.timeout": {
            "name": "timeout",
            "location": 1007,
            "return": [
                "Union[(object, ClientTimeout)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.headers": {
            "name": "headers",
            "location": 1012,
            "return": [
                "'CIMultiDict[str]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.skip_auto_headers": {
            "name": "skip_auto_headers",
            "location": 1017,
            "return": [
                "FrozenSet[istr]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.auth": {
            "name": "auth",
            "location": 1022,
            "return": [
                "Optional[BasicAuth]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.json_serialize": {
            "name": "json_serialize",
            "location": 1027,
            "return": [
                "JSONEncoder"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.connector_owner": {
            "name": "connector_owner",
            "location": 1032,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.raise_for_status": {
            "name": "raise_for_status",
            "location": 1037,
            "return": [
                "Union[(bool, Callable[([ClientResponse], Awaitable[None])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.auto_decompress": {
            "name": "auto_decompress",
            "location": 1044,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.trust_env": {
            "name": "trust_env",
            "location": 1049,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.trace_configs": {
            "name": "trace_configs",
            "location": 1059,
            "return": [
                "List[TraceConfig]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientSession.detach": {
            "name": "detach",
            "location": 1063,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseRequestContextManager.__init__": {
            "name": "__init__",
            "location": 1086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "Coroutine[('asyncio.Future[Any]', None, _RetType)]"
                ]
            }
        },
        "_BaseRequestContextManager.send": {
            "name": "send",
            "location": 1089,
            "return": [
                "'asyncio.Future[Any]'"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "None"
                ]
            }
        },
        "_BaseRequestContextManager.throw": {
            "name": "throw",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "BaseException"
                ]
            }
        },
        "_BaseRequestContextManager.close": {
            "name": "close",
            "location": 1095,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseRequestContextManager.__await__": {
            "name": "__await__",
            "location": 1098,
            "return": [
                "Generator[(Any, None, _RetType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseRequestContextManager.__iter__": {
            "name": "__iter__",
            "location": 1102,
            "return": [
                "Generator[(Any, None, _RetType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SessionRequestContextManager.__init__": {
            "name": "__init__",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "Coroutine[('asyncio.Future[Any]', None, ClientResponse)]"
                ],
                "session": [
                    "ClientSession"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/client_exceptions.py": {
        "ClientResponseError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_info": [
                    "RequestInfo"
                ],
                "history": [
                    "Tuple[(ClientResponse, ...)]"
                ]
            }
        },
        "ClientResponseError.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponseError.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorError.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_key": [
                    "ConnectionKey"
                ],
                "os_error": [
                    "OSError"
                ]
            }
        },
        "ClientConnectorError.os_error": {
            "name": "os_error",
            "location": 138,
            "return": [
                "OSError"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorError.host": {
            "name": "host",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorError.port": {
            "name": "port",
            "location": 146,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorError.ssl": {
            "name": "ssl",
            "location": 150,
            "return": [
                "Union[(SSLContext, None, bool, 'Fingerprint')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorError.__str__": {
            "name": "__str__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnixClientConnectorError.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "connection_key": [
                    "ConnectionKey"
                ],
                "os_error": [
                    "OSError"
                ]
            }
        },
        "UnixClientConnectorError.path": {
            "name": "path",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnixClientConnectorError.__str__": {
            "name": "__str__",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerDisconnectedError.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Union[(RawResponseMessage, str, None)]"
                ]
            }
        },
        "ServerFingerprintMismatch.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "bytes"
                ],
                "got": [
                    "bytes"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "ServerFingerprintMismatch.__repr__": {
            "name": "__repr__",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidURL.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Any"
                ]
            }
        },
        "InvalidURL.url": {
            "name": "url",
            "location": 247,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidURL.__repr__": {
            "name": "__repr__",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorCertificateError.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_key": [
                    "ConnectionKey"
                ],
                "certificate_error": [
                    "Exception"
                ]
            }
        },
        "ClientConnectorCertificateError.certificate_error": {
            "name": "certificate_error",
            "location": 293,
            "return": [
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorCertificateError.host": {
            "name": "host",
            "location": 297,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorCertificateError.port": {
            "name": "port",
            "location": 301,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorCertificateError.ssl": {
            "name": "ssl",
            "location": 305,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnectorCertificateError.__str__": {
            "name": "__str__",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/client_proto.py": {
        "ResponseHandler.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "ResponseHandler.upgraded": {
            "name": "upgraded",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.should_close": {
            "name": "should_close",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.force_close": {
            "name": "force_close",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.close": {
            "name": "close",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.is_connected": {
            "name": "is_connected",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.connection_lost": {
            "name": "connection_lost",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Optional[BaseException]"
                ]
            }
        },
        "ResponseHandler.eof_received": {
            "name": "eof_received",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.pause_reading": {
            "name": "pause_reading",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.resume_reading": {
            "name": "resume_reading",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.set_exception": {
            "name": "set_exception",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "ResponseHandler.set_parser": {
            "name": "set_parser",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ],
                "payload": [
                    "Any"
                ]
            }
        },
        "ResponseHandler.set_response_params": {
            "name": "set_response_params",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler._drop_timeout": {
            "name": "_drop_timeout",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler._reschedule_timeout": {
            "name": "_reschedule_timeout",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler._on_read_timeout": {
            "name": "_on_read_timeout",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.data_received": {
            "name": "data_received",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/client_reqrep.py": {
        "_gen_default_accept_encoding": {
            "name": "_gen_default_accept_encoding",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Fingerprint.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "bytes"
                ]
            }
        },
        "Fingerprint.fingerprint": {
            "name": "fingerprint",
            "location": 129,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fingerprint.check": {
            "name": "check",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport"
                ]
            }
        },
        "ClientRequest.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "URL"
                ]
            }
        },
        "ClientRequest.is_ssl": {
            "name": "is_ssl",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.ssl": {
            "name": "ssl",
            "location": 269,
            "return": [
                "Union[('SSLContext', None, bool, Fingerprint)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.connection_key": {
            "name": "connection_key",
            "location": 273,
            "return": [
                "ConnectionKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.host": {
            "name": "host",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.port": {
            "name": "port",
            "location": 296,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.request_info": {
            "name": "request_info",
            "location": 300,
            "return": [
                "RequestInfo"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.update_host": {
            "name": "update_host",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "URL"
                ]
            }
        },
        "ClientRequest.update_version": {
            "name": "update_version",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "Union[(http.HttpVersion, str)]"
                ]
            }
        },
        "ClientRequest.update_headers": {
            "name": "update_headers",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Optional[LooseHeaders]"
                ]
            }
        },
        "ClientRequest.update_auto_headers": {
            "name": "update_auto_headers",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_auto_headers": [
                    "Iterable[str]"
                ]
            }
        },
        "ClientRequest.update_cookies": {
            "name": "update_cookies",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "Optional[LooseCookies]"
                ]
            }
        },
        "ClientRequest.update_content_encoding": {
            "name": "update_content_encoding",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "ClientRequest.update_transfer_encoding": {
            "name": "update_transfer_encoding",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.update_auth": {
            "name": "update_auth",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Optional[BasicAuth]"
                ]
            }
        },
        "ClientRequest.update_body_from_data": {
            "name": "update_body_from_data",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Any"
                ]
            }
        },
        "ClientRequest.update_expect_continue": {
            "name": "update_expect_continue",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expect": [
                    "bool"
                ]
            }
        },
        "ClientRequest.update_proxy": {
            "name": "update_proxy",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "Optional[URL]"
                ],
                "proxy_auth": [
                    "Optional[BasicAuth]"
                ],
                "proxy_headers": [
                    "Optional[LooseHeaders]"
                ]
            }
        },
        "ClientRequest.keep_alive": {
            "name": "keep_alive",
            "location": 503,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRequest.terminate": {
            "name": "terminate",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "URL"
                ]
            }
        },
        "ClientResponse.url": {
            "name": "url",
            "location": 717,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.real_url": {
            "name": "real_url",
            "location": 721,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.host": {
            "name": "host",
            "location": 725,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.headers": {
            "name": "headers",
            "location": 730,
            "return": [
                "'CIMultiDictProxy[str]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.raw_headers": {
            "name": "raw_headers",
            "location": 734,
            "return": [
                "RawHeaders"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.request_info": {
            "name": "request_info",
            "location": 738,
            "return": [
                "RequestInfo"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.content_disposition": {
            "name": "content_disposition",
            "location": 742,
            "return": [
                "Optional[ContentDisposition]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.__del__": {
            "name": "__del__",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_warnings": [
                    "Any"
                ]
            }
        },
        "ClientResponse.__repr__": {
            "name": "__repr__",
            "location": 768,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.connection": {
            "name": "connection",
            "location": 787,
            "return": [
                "Optional['Connection']"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.history": {
            "name": "history",
            "location": 791,
            "return": [
                "Tuple[('ClientResponse', ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.links": {
            "name": "links",
            "location": 796,
            "return": [
                "'MultiDictProxy[MultiDictProxy[Union[str, URL]]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse._response_eof": {
            "name": "_response_eof",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.closed": {
            "name": "closed",
            "location": 902,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.close": {
            "name": "close",
            "location": 905,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.release": {
            "name": "release",
            "location": 920,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.ok": {
            "name": "ok",
            "location": 935,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 943,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse._cleanup_writer": {
            "name": "_cleanup_writer",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse._notify_content": {
            "name": "_notify_content",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.get_encoding": {
            "name": "get_encoding",
            "location": 993,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/client_ws.py": {
        "ClientWebSocketResponse.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "'FlowControlDataQueue[WSMessage]'"
                ],
                "writer": [
                    "WebSocketWriter"
                ],
                "protocol": [
                    "Optional[str]"
                ],
                "response": [
                    "ClientResponse"
                ],
                "timeout": [
                    "ClientWSTimeout"
                ],
                "autoclose": [
                    "bool"
                ],
                "autoping": [
                    "bool"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "ClientWebSocketResponse._cancel_heartbeat": {
            "name": "_cancel_heartbeat",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse._reset_heartbeat": {
            "name": "_reset_heartbeat",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse._send_heartbeat": {
            "name": "_send_heartbeat",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse._pong_not_received": {
            "name": "_pong_not_received",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse.closed": {
            "name": "closed",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse.close_code": {
            "name": "close_code",
            "location": 135,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse.protocol": {
            "name": "protocol",
            "location": 139,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse.compress": {
            "name": "compress",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse.client_notakeover": {
            "name": "client_notakeover",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse.get_extra_info": {
            "name": "get_extra_info",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "ClientWebSocketResponse.exception": {
            "name": "exception",
            "location": 160,
            "return": [
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWebSocketResponse.__aiter__": {
            "name": "__aiter__",
            "location": 316,
            "return": [
                "'ClientWebSocketResponse'"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/connector.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "'BaseConnector'"
                ],
                "key": [
                    "'ConnectionKey'"
                ],
                "protocol": [
                    "ResponseHandler"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Connection.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.__del__": {
            "name": "__del__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_warnings": [
                    "Any"
                ]
            }
        },
        "Connection.transport": {
            "name": "transport",
            "location": 111,
            "return": [
                "Optional[asyncio.Transport]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.protocol": {
            "name": "protocol",
            "location": 117,
            "return": [
                "Optional[ResponseHandler]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.add_callback": {
            "name": "add_callback",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([], None)]"
                ]
            }
        },
        "Connection._notify_release": {
            "name": "_notify_release",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.release": {
            "name": "release",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.closed": {
            "name": "closed",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TransportPlaceholder.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "_TransportPlaceholder.close": {
            "name": "close",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector.__del__": {
            "name": "__del__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_warnings": [
                    "Any"
                ]
            }
        },
        "BaseConnector.force_close": {
            "name": "force_close",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector.limit": {
            "name": "limit",
            "location": 277,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector.limit_per_host": {
            "name": "limit_per_host",
            "location": 286,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector._cleanup": {
            "name": "_cleanup",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector._drop_acquired_per_host": {
            "name": "_drop_acquired_per_host",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "'ConnectionKey'"
                ],
                "val": [
                    "ResponseHandler"
                ]
            }
        },
        "BaseConnector._cleanup_closed": {
            "name": "_cleanup_closed",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector._close_immediately": {
            "name": "_close_immediately",
            "location": 383,
            "return": [
                "List['asyncio.Future[None]']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector.closed": {
            "name": "closed",
            "location": 428,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector._available_connections": {
            "name": "_available_connections",
            "location": 435,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "'ConnectionKey'"
                ]
            }
        },
        "BaseConnector._get": {
            "name": "_get",
            "location": 551,
            "return": [
                "Optional[ResponseHandler]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "'ConnectionKey'"
                ]
            }
        },
        "BaseConnector._release_waiter": {
            "name": "_release_waiter",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector._release_acquired": {
            "name": "_release_acquired",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "'ConnectionKey'"
                ],
                "proto": [
                    "ResponseHandler"
                ]
            }
        },
        "BaseConnector._release": {
            "name": "_release",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "'ConnectionKey'"
                ],
                "protocol": [
                    "ResponseHandler"
                ]
            }
        },
        "_DNSCacheTable.__init__": {
            "name": "__init__",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ttl": [
                    "Optional[float]"
                ]
            }
        },
        "_DNSCacheTable.__contains__": {
            "name": "__contains__",
            "location": 675,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "object"
                ]
            }
        },
        "_DNSCacheTable.add": {
            "name": "add",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Tuple[(str, int)]"
                ],
                "addrs": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "_DNSCacheTable.remove": {
            "name": "remove",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "_DNSCacheTable.clear": {
            "name": "clear",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DNSCacheTable.next_addrs": {
            "name": "next_addrs",
            "location": 694,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "_DNSCacheTable.expired": {
            "name": "expired",
            "location": 701,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "TCPConnector.__init__": {
            "name": "__init__",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPConnector._close_immediately": {
            "name": "_close_immediately",
            "location": 774,
            "return": [
                "List['asyncio.Future[None]']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPConnector.family": {
            "name": "family",
            "location": 780,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPConnector.use_dns_cache": {
            "name": "use_dns_cache",
            "location": 785,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPConnector.clear_dns_cache": {
            "name": "clear_dns_cache",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Optional[str]"
                ],
                "port": [
                    "Optional[int]"
                ]
            }
        },
        "TCPConnector._make_ssl_context": {
            "name": "_make_ssl_context",
            "location": 892,
            "return": [
                "SSLContext"
            ],
            "arguments": {
                "verified": [
                    "bool"
                ]
            }
        },
        "TCPConnector._get_ssl_context": {
            "name": "_get_ssl_context",
            "location": 913,
            "return": [
                "Optional[SSLContext]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "'ClientRequest'"
                ]
            }
        },
        "TCPConnector._get_fingerprint": {
            "name": "_get_fingerprint",
            "location": 946,
            "return": [
                "Optional['Fingerprint']"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "'ClientRequest'"
                ]
            }
        },
        "TCPConnector._warn_about_tls_in_tls": {
            "name": "_warn_about_tls_in_tls",
            "location": 975,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "underlying_transport": [
                    "asyncio.Transport"
                ],
                "req": [
                    "'ClientRequest'"
                ]
            }
        },
        "UnixConnector.__init__": {
            "name": "__init__",
            "location": 1264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "force_close": [
                    "bool"
                ],
                "keepalive_timeout": [
                    "Union[(_SENTINEL, float, None)]"
                ],
                "limit": [
                    "int"
                ],
                "limit_per_host": [
                    "int"
                ]
            }
        },
        "UnixConnector.path": {
            "name": "path",
            "location": 1281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedPipeConnector.__init__": {
            "name": "__init__",
            "location": 1316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "force_close": [
                    "bool"
                ],
                "keepalive_timeout": [
                    "Union[(_SENTINEL, float, None)]"
                ],
                "limit": [
                    "int"
                ],
                "limit_per_host": [
                    "int"
                ]
            }
        },
        "NamedPipeConnector.path": {
            "name": "path",
            "location": 1339,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPConnector._create_direct_connection.drop_exception": {
            "name": "drop_exception",
            "location": 1096,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": [
                    "'asyncio.Future[List[Dict[str, Any]]]'"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/cookiejar.py": {
        "CookieJar.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieJar.save": {
            "name": "save",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "PathLike"
                ]
            }
        },
        "CookieJar.load": {
            "name": "load",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "PathLike"
                ]
            }
        },
        "CookieJar.clear": {
            "name": "clear",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Optional[ClearCookiePredicate]"
                ]
            }
        },
        "CookieJar.clear_domain": {
            "name": "clear_domain",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "CookieJar.__iter__": {
            "name": "__iter__",
            "location": 141,
            "return": [
                "'Iterator[Morsel[str]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieJar.__len__": {
            "name": "__len__",
            "location": 146,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieJar._do_expiration": {
            "name": "_do_expiration",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieJar._expire_cookie": {
            "name": "_expire_cookie",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "datetime.datetime"
                ],
                "domain": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "CookieJar.update_cookies": {
            "name": "update_cookies",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "LooseCookies"
                ],
                "response_url": [
                    "URL"
                ]
            }
        },
        "CookieJar.filter_cookies": {
            "name": "filter_cookies",
            "location": 235,
            "return": [
                "Union[('BaseCookie[str]', 'SimpleCookie[str]')]"
            ],
            "arguments": {
                "self": [],
                "request_url": [
                    "URL"
                ]
            }
        },
        "CookieJar._is_domain_match": {
            "name": "_is_domain_match",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "domain": [
                    "str"
                ],
                "hostname": [
                    "str"
                ]
            }
        },
        "CookieJar._is_path_match": {
            "name": "_is_path_match",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "req_path": [
                    "str"
                ],
                "cookie_path": [
                    "str"
                ]
            }
        },
        "CookieJar._parse_date": {
            "name": "_parse_date",
            "location": 329,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "cls": [],
                "date_str": [
                    "str"
                ]
            }
        },
        "DummyCookieJar.__iter__": {
            "name": "__iter__",
            "location": 402,
            "return": [
                "'Iterator[Morsel[str]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCookieJar.__len__": {
            "name": "__len__",
            "location": 406,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCookieJar.clear": {
            "name": "clear",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Optional[ClearCookiePredicate]"
                ]
            }
        },
        "DummyCookieJar.clear_domain": {
            "name": "clear_domain",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "DummyCookieJar.update_cookies": {
            "name": "update_cookies",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "LooseCookies"
                ],
                "response_url": [
                    "URL"
                ]
            }
        },
        "DummyCookieJar.filter_cookies": {
            "name": "filter_cookies",
            "location": 418,
            "return": [
                "'BaseCookie[str]'"
            ],
            "arguments": {
                "self": [],
                "request_url": [
                    "URL"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/formdata.py": {
        "FormData.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Iterable[Any]"
                ],
                "quote_fields": [
                    "bool"
                ],
                "charset": [
                    "Optional[str]"
                ],
                "boundary": [
                    "Optional[str]"
                ]
            }
        },
        "FormData.is_multipart": {
            "name": "is_multipart",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormData.add_field": {
            "name": "add_field",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "FormData.add_fields": {
            "name": "add_fields",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormData._gen_form_urlencoded": {
            "name": "_gen_form_urlencoded",
            "location": 115,
            "return": [
                "payload.BytesPayload"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormData._gen_form_data": {
            "name": "_gen_form_data",
            "location": 133,
            "return": [
                "multipart.MultipartWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormData.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [
                "Payload"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/hdrs.py": {},
    "aiohttp-master/aiohttp/helpers.py": {
        "strip_auth_from_url": {
            "name": "strip_auth_from_url",
            "location": 196,
            "return": [
                "Tuple[(URL, Optional[BasicAuth])]"
            ],
            "arguments": {
                "url": [
                    "URL"
                ]
            }
        },
        "netrc_from_env": {
            "name": "netrc_from_env",
            "location": 204,
            "return": [
                "Optional[netrc.netrc]"
            ],
            "arguments": {}
        },
        "proxies_from_env": {
            "name": "proxies_from_env",
            "location": 252,
            "return": [
                "Dict[(str, ProxyInfo)]"
            ],
            "arguments": {}
        },
        "get_env_proxy_for_url": {
            "name": "get_env_proxy_for_url",
            "location": 283,
            "return": [
                "Tuple[(URL, Optional[BasicAuth])]"
            ],
            "arguments": {
                "url": [
                    "URL"
                ]
            }
        },
        "parse_mimetype": {
            "name": "parse_mimetype",
            "location": 306,
            "return": [
                "MimeType"
            ],
            "arguments": {
                "mimetype": [
                    "str"
                ]
            }
        },
        "guess_filename": {
            "name": "guess_filename",
            "location": 345,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "quoted_string": {
            "name": "quoted_string",
            "location": 356,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "content_disposition_header": {
            "name": "content_disposition_header",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {
                "disptype": [
                    "str"
                ],
                "quote_fields": [
                    "bool"
                ],
                "_charset": [
                    "str"
                ]
            }
        },
        "is_expected_content_type": {
            "name": "is_expected_content_type",
            "location": 422,
            "return": [
                "bool"
            ],
            "arguments": {
                "response_content_type": [
                    "str"
                ],
                "expected_content_type": [
                    "str"
                ]
            }
        },
        "_is_ip_address": {
            "name": "_is_ip_address",
            "location": 500,
            "return": [
                "bool"
            ],
            "arguments": {
                "regex": [
                    "Pattern[str]"
                ],
                "regexb": [
                    "Pattern[bytes]"
                ],
                "host": [
                    "Optional[Union[(str, bytes)]]"
                ]
            }
        },
        "is_ip_address": {
            "name": "is_ip_address",
            "location": 517,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "Optional[Union[(str, bytes, bytearray, memoryview)]]"
                ]
            }
        },
        "next_whole_second": {
            "name": "next_whole_second",
            "location": 521,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "rfc822_formatted_time": {
            "name": "rfc822_formatted_time",
            "location": 532,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_weakref_handle": {
            "name": "_weakref_handle",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "'Tuple[weakref.ref[object], str]'"
                ]
            }
        },
        "weakref_handle": {
            "name": "weakref_handle",
            "location": 580,
            "return": [
                "Optional[asyncio.TimerHandle]"
            ],
            "arguments": {
                "ob": [
                    "object"
                ],
                "name": [
                    "str"
                ],
                "timeout": [
                    "float"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "timeout_ceil_threshold": [
                    "float"
                ]
            }
        },
        "call_later": {
            "name": "call_later",
            "location": 596,
            "return": [
                "Optional[asyncio.TimerHandle]"
            ],
            "arguments": {
                "cb": [
                    "Callable[([], Any)]"
                ],
                "timeout": [
                    "float"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "timeout_ceil_threshold": [
                    "float"
                ]
            }
        },
        "ceil_timeout": {
            "name": "ceil_timeout",
            "location": 720,
            "return": [
                "async_timeout.Timeout"
            ],
            "arguments": {
                "delay": [
                    "Optional[float]"
                ],
                "ceil_threshold": [
                    "float"
                ]
            }
        },
        "set_result": {
            "name": "set_result",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": [
                    "'asyncio.Future[_T]'"
                ],
                "result": [
                    "_T@@"
                ]
            }
        },
        "set_exception": {
            "name": "set_exception",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": [
                    "'asyncio.Future[_T]'"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "populate_with_cookies": {
            "name": "populate_with_cookies",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "'CIMultiDict[str]'"
                ],
                "cookies": [
                    "'SimpleCookie[str]'"
                ]
            }
        },
        "validate_etag_value": {
            "name": "validate_etag_value",
            "location": 1031,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "parse_http_date": {
            "name": "parse_http_date",
            "location": 1038,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "date_str": [
                    "Optional[str]"
                ]
            }
        },
        "noop.__await__": {
            "name": "__await__",
            "location": 118,
            "return": [
                "Generator[(None, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "iscoroutinefunction": {
            "name": "iscoroutinefunction",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "BasicAuth.__new__": {
            "name": "__new__",
            "location": 138,
            "return": [
                "'BasicAuth'"
            ],
            "arguments": {
                "cls": [],
                "login": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "BasicAuth.decode": {
            "name": "decode",
            "location": 153,
            "return": [
                "'BasicAuth'"
            ],
            "arguments": {
                "cls": [],
                "auth_header": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "BasicAuth.from_url": {
            "name": "from_url",
            "location": 182,
            "return": [
                "Optional['BasicAuth']"
            ],
            "arguments": {
                "cls": [],
                "url": [
                    "URL"
                ]
            }
        },
        "BasicAuth.encode": {
            "name": "encode",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "reify.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "Callable[(..., _T)]"
                ]
            }
        },
        "reify.__get__": {
            "name": "__get__",
            "location": 453,
            "return": [
                "_T@@"
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "_TSelf[_T]"
                ],
                "owner": [
                    "Optional[Type[Any]]"
                ]
            }
        },
        "reify.__set__": {
            "name": "__set__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "_TSelf[_T]"
                ],
                "value": [
                    "_T@@"
                ]
            }
        },
        "TimeoutHandle.__init__": {
            "name": "__init__",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "timeout": [
                    "Optional[float]"
                ],
                "ceil_threshold": [
                    "float"
                ]
            }
        },
        "TimeoutHandle.register": {
            "name": "register",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "TimeoutHandle.close": {
            "name": "close",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutHandle.start": {
            "name": "start",
            "location": 634,
            "return": [
                "Optional[asyncio.Handle]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutHandle.timer": {
            "name": "timer",
            "location": 644,
            "return": [
                "'BaseTimerContext'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutHandle.__call__": {
            "name": "__call__",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerNoop.__enter__": {
            "name": "__enter__",
            "location": 665,
            "return": [
                "BaseTimerContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerNoop.__exit__": {
            "name": "__exit__",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "TimerContext.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "TimerContext.__enter__": {
            "name": "__enter__",
            "location": 685,
            "return": [
                "BaseTimerContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerContext.__exit__": {
            "name": "__exit__",
            "location": 699,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "TimerContext.timeout": {
            "name": "timeout",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadersMixin.__init__": {
            "name": "__init__",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadersMixin._parse_content_type": {
            "name": "_parse_content_type",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str"
                ]
            }
        },
        "HeadersMixin.content_type": {
            "name": "content_type",
            "location": 757,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadersMixin.charset": {
            "name": "charset",
            "location": 765,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadersMixin.content_length": {
            "name": "content_length",
            "location": 773,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppKey.__init__": {
            "name": "__init__",
            "location": 806,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "t": [
                    "Optional[Type[_T]]"
                ]
            }
        },
        "AppKey.__lt__": {
            "name": "__lt__",
            "location": 818,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "AppKey.__repr__": {
            "name": "__repr__",
            "location": 823,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMapProxy.__init__": {
            "name": "__init__",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maps": [
                    "Iterable[Mapping[(Union[(str, AppKey[Any])], Any)]]"
                ]
            }
        },
        "ChainMapProxy.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ChainMapProxy.__getitem__": {
            "name": "__getitem__",
            "location": 863,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, AppKey[_T])]"
                ]
            }
        },
        "ChainMapProxy.get": {
            "name": "get",
            "location": 883,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, AppKey[_T])]"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "ChainMapProxy.__len__": {
            "name": "__len__",
            "location": 889,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMapProxy.__iter__": {
            "name": "__iter__",
            "location": 893,
            "return": [
                "Iterator[Union[(str, AppKey[Any])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMapProxy.__contains__": {
            "name": "__contains__",
            "location": 900,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "object"
                ]
            }
        },
        "ChainMapProxy.__bool__": {
            "name": "__bool__",
            "location": 903,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMapProxy.__repr__": {
            "name": "__repr__",
            "location": 906,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieMixin.__init__": {
            "name": "__init__",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieMixin.cookies": {
            "name": "cookies",
            "location": 925,
            "return": [
                "'SimpleCookie[str]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieMixin.set_cookie": {
            "name": "set_cookie",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "CookieMixin.del_cookie": {
            "name": "del_cookie",
            "location": 988,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/http.py": {},
    "aiohttp-master/aiohttp/http_exceptions.py": {
        "HttpProcessingError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpProcessingError.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpProcessingError.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadHttpMessage.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LineTooLong.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "limit": [
                    "str"
                ],
                "actual_size": [
                    "str"
                ]
            }
        },
        "InvalidHeader.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hdr": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "BadStatusLine.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/http_parser.py": {
        "HeadersParser.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_line_size": [
                    "int"
                ],
                "max_field_size": [
                    "int"
                ]
            }
        },
        "HeadersParser.parse_headers": {
            "name": "parse_headers",
            "location": 133,
            "return": [
                "Tuple[('CIMultiDictProxy[str]', RawHeaders)]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[bytes]"
                ]
            }
        },
        "HttpParser.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "BaseProtocol"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "limit": [
                    "int"
                ],
                "max_line_size": [
                    "int"
                ],
                "max_field_size": [
                    "int"
                ],
                "timer": [
                    "Optional[BaseTimerContext]"
                ],
                "code": [
                    "Optional[int]"
                ],
                "method": [
                    "Optional[str]"
                ],
                "readall": [
                    "bool"
                ],
                "payload_exception": [
                    "Optional[Type[BaseException]]"
                ],
                "response_with_body": [
                    "bool"
                ],
                "read_until_eof": [
                    "bool"
                ],
                "auto_decompress": [
                    "bool"
                ]
            }
        },
        "HttpParser.parse_message": {
            "name": "parse_message",
            "location": 255,
            "return": [
                "_MsgT@@RawRequestMessage@@RawResponseMessage@@"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[bytes]"
                ]
            }
        },
        "HttpParser.feed_eof": {
            "name": "feed_eof",
            "location": 258,
            "return": [
                "Optional[_MsgT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpParser.feed_data": {
            "name": "feed_data",
            "location": 274,
            "return": [
                "Tuple[(List[Tuple[(_MsgT, StreamReader)]], bool, bytes)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "SEP": [
                    "bytes"
                ],
                "EMPTY": [
                    "bytes"
                ],
                "CONTENT_LENGTH": [
                    "istr"
                ],
                "METH_CONNECT": [
                    "str"
                ],
                "SEC_WEBSOCKET_KEY1": [
                    "istr"
                ]
            }
        },
        "HttpParser.parse_headers": {
            "name": "parse_headers",
            "location": 454,
            "return": [
                "Tuple[('CIMultiDictProxy[str]', RawHeaders, Optional[bool], Optional[str], bool, bool)]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[bytes]"
                ]
            }
        },
        "HttpParser.set_upgraded": {
            "name": "set_upgraded",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool"
                ]
            }
        },
        "HttpRequestParser.parse_message": {
            "name": "parse_message",
            "location": 519,
            "return": [
                "RawRequestMessage"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[bytes]"
                ]
            }
        },
        "HttpResponseParser.parse_message": {
            "name": "parse_message",
            "location": 608,
            "return": [
                "RawResponseMessage"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[bytes]"
                ]
            }
        },
        "HttpPayloadParser.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "StreamReader"
                ],
                "length": [
                    "Optional[int]"
                ],
                "chunked": [
                    "bool"
                ],
                "compression": [
                    "Optional[str]"
                ],
                "code": [
                    "Optional[int]"
                ],
                "method": [
                    "Optional[str]"
                ],
                "readall": [
                    "bool"
                ],
                "response_with_body": [
                    "bool"
                ],
                "auto_decompress": [
                    "bool"
                ]
            }
        },
        "HttpPayloadParser.feed_eof": {
            "name": "feed_eof",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpPayloadParser.feed_data": {
            "name": "feed_data",
            "location": 735,
            "return": [
                "Tuple[(bool, bytes)]"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "bytes"
                ],
                "SEP": [
                    "bytes"
                ],
                "CHUNK_EXT": [
                    "bytes"
                ]
            }
        },
        "DeflateBuffer.__init__": {
            "name": "__init__",
            "location": 860,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "StreamReader"
                ],
                "encoding": [
                    "Optional[str]"
                ]
            }
        },
        "DeflateBuffer.set_exception": {
            "name": "set_exception",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "DeflateBuffer.feed_data": {
            "name": "feed_data",
            "location": 898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "bytes"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "DeflateBuffer.feed_eof": {
            "name": "feed_eof",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateBuffer.begin_http_chunk_receiving": {
            "name": "begin_http_chunk_receiving",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateBuffer.end_http_chunk_receiving": {
            "name": "end_http_chunk_receiving",
            "location": 941,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateBuffer.__init__.BrotliDecoder.__init__": {
            "name": "__init__",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateBuffer.__init__.BrotliDecoder.decompress": {
            "name": "decompress",
            "location": 880,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "DeflateBuffer.__init__.BrotliDecoder.flush": {
            "name": "flush",
            "location": 885,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpParser.feed_data.get_content_length": {
            "name": "get_content_length",
            "location": 316,
            "return": [
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/aiohttp/http_websocket.py": {
        "_websocket_mask_python": {
            "name": "_websocket_mask_python",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "mask": [
                    "bytes"
                ],
                "data": [
                    "bytearray"
                ]
            }
        },
        "ws_ext_parse": {
            "name": "ws_ext_parse",
            "location": 167,
            "return": [
                "Tuple[(int, bool)]"
            ],
            "arguments": {
                "extstr": [
                    "Optional[str]"
                ],
                "isserver": [
                    "bool"
                ]
            }
        },
        "ws_ext_gen": {
            "name": "ws_ext_gen",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "compress": [
                    "int"
                ],
                "isserver": [
                    "bool"
                ],
                "server_notakeover": [
                    "bool"
                ]
            }
        },
        "WSMessage.json": {
            "name": "json",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketError.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "WebSocketError.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketReader.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "DataQueue[WSMessage]"
                ],
                "max_msg_size": [
                    "int"
                ],
                "compress": [
                    "bool"
                ]
            }
        },
        "WebSocketReader.feed_eof": {
            "name": "feed_eof",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketReader.feed_data": {
            "name": "feed_data",
            "location": 275,
            "return": [
                "Tuple[(bool, bytes)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "WebSocketReader._feed_data": {
            "name": "_feed_data",
            "location": 286,
            "return": [
                "Tuple[(bool, bytes)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "WebSocketReader.parse_frame": {
            "name": "parse_frame",
            "location": 409,
            "return": [
                "List[Tuple[(bool, Optional[int], bytearray, Optional[bool])]]"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "bytes"
                ]
            }
        },
        "WebSocketWriter.__init__": {
            "name": "__init__",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "BaseProtocol"
                ],
                "transport": [
                    "asyncio.Transport"
                ]
            }
        },
        "WebSocketWriter._write": {
            "name": "_write",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/http_writer.py": {
        "_safe_header": {
            "name": "_safe_header",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "_py_serialize_headers": {
            "name": "_py_serialize_headers",
            "location": 185,
            "return": [
                "bytes"
            ],
            "arguments": {
                "status_line": [
                    "str"
                ],
                "headers": [
                    "'CIMultiDict[str]'"
                ]
            }
        },
        "StreamWriter.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "BaseProtocol"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "on_chunk_sent": [
                    "_T_OnChunkSent"
                ],
                "on_headers_sent": [
                    "_T_OnHeadersSent"
                ]
            }
        },
        "StreamWriter.transport": {
            "name": "transport",
            "location": 54,
            "return": [
                "Optional[asyncio.Transport]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamWriter.protocol": {
            "name": "protocol",
            "location": 58,
            "return": [
                "BaseProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamWriter.enable_chunking": {
            "name": "enable_chunking",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamWriter.enable_compression": {
            "name": "enable_compression",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ],
                "strategy": [
                    "int"
                ]
            }
        },
        "StreamWriter._write": {
            "name": "_write",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "bytes"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/locks.py": {
        "EventResultOrError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "EventResultOrError.set": {
            "name": "set",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Optional[BaseException]"
                ]
            }
        },
        "EventResultOrError.cancel": {
            "name": "cancel",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/log.py": {},
    "aiohttp-master/aiohttp/multipart.py": {
        "parse_content_disposition": {
            "name": "parse_content_disposition",
            "location": 73,
            "return": [
                "Tuple[(Optional[str], Dict[(str, str)])]"
            ],
            "arguments": {
                "header": [
                    "Optional[str]"
                ]
            }
        },
        "content_disposition_filename": {
            "name": "content_disposition_filename",
            "location": 172,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "params": [
                    "Mapping[(str, str)]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "parse_content_disposition.is_token": {
            "name": "is_token",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "parse_content_disposition.is_quoted": {
            "name": "is_quoted",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "parse_content_disposition.is_rfc5987": {
            "name": "is_rfc5987",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "parse_content_disposition.is_extended_param": {
            "name": "is_extended_param",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "parse_content_disposition.is_continuous_param": {
            "name": "is_continuous_param",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "parse_content_disposition.unescape": {
            "name": "unescape",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "MultipartResponseWrapper.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "'ClientResponse'"
                ],
                "stream": [
                    "'MultipartReader'"
                ]
            }
        },
        "MultipartResponseWrapper.__aiter__": {
            "name": "__aiter__",
            "location": 220,
            "return": [
                "'MultipartResponseWrapper'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartResponseWrapper.at_eof": {
            "name": "at_eof",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyPartReader.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "boundary": [
                    "bytes"
                ],
                "headers": [
                    "'CIMultiDictProxy[str]'"
                ],
                "content": [
                    "StreamReader"
                ]
            }
        },
        "BodyPartReader.__aiter__": {
            "name": "__aiter__",
            "location": 278,
            "return": [
                "AsyncIterator['BodyPartReader']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyPartReader.at_eof": {
            "name": "at_eof",
            "location": 471,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyPartReader.decode": {
            "name": "decode",
            "location": 475,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "BodyPartReader._decode_content": {
            "name": "_decode_content",
            "location": 487,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "BodyPartReader._decode_content_transfer": {
            "name": "_decode_content_transfer",
            "location": 499,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "BodyPartReader.get_charset": {
            "name": "get_charset",
            "location": 513,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str"
                ]
            }
        },
        "BodyPartReader.name": {
            "name": "name",
            "location": 520,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyPartReader.filename": {
            "name": "filename",
            "location": 529,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyPartReaderPayload.__init__": {
            "name": "__init__",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "BodyPartReader"
                ]
            }
        },
        "MultipartReader.__init__": {
            "name": "__init__",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Mapping[(str, str)]"
                ],
                "content": [
                    "StreamReader"
                ]
            }
        },
        "MultipartReader.__aiter__": {
            "name": "__aiter__",
            "location": 587,
            "return": [
                "AsyncIterator['BodyPartReader']"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartReader.from_response": {
            "name": "from_response",
            "location": 601,
            "return": [
                "MultipartResponseWrapper"
            ],
            "arguments": {
                "cls": [],
                "response": [
                    "'ClientResponse'"
                ]
            }
        },
        "MultipartReader.at_eof": {
            "name": "at_eof",
            "location": 614,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartReader._get_part_reader": {
            "name": "_get_part_reader",
            "location": 651,
            "return": [
                "Union[('MultipartReader', BodyPartReader)]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "'CIMultiDictProxy[str]'"
                ]
            }
        },
        "MultipartReader._get_boundary": {
            "name": "_get_boundary",
            "location": 675,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartWriter.__init__": {
            "name": "__init__",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtype": [
                    "str"
                ],
                "boundary": [
                    "Optional[str]"
                ]
            }
        },
        "MultipartWriter.__enter__": {
            "name": "__enter__",
            "location": 791,
            "return": [
                "'MultipartWriter'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartWriter.__exit__": {
            "name": "__exit__",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "MultipartWriter.__iter__": {
            "name": "__iter__",
            "location": 802,
            "return": [
                "Iterator[_Part]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartWriter.__len__": {
            "name": "__len__",
            "location": 805,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartWriter.__bool__": {
            "name": "__bool__",
            "location": 808,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartWriter._boundary_value": {
            "name": "_boundary_value",
            "location": 815,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartWriter.boundary": {
            "name": "boundary",
            "location": 847,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartWriter.append": {
            "name": "append",
            "location": 850,
            "return": [
                "Payload"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "headers": [
                    "Optional[MultiMapping[str]]"
                ]
            }
        },
        "MultipartWriter.append_payload": {
            "name": "append_payload",
            "location": 865,
            "return": [
                "Payload"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Payload"
                ]
            }
        },
        "MultipartWriter.append_json": {
            "name": "append_json",
            "location": 897,
            "return": [
                "Payload"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "headers": [
                    "Optional[MultiMapping[str]]"
                ]
            }
        },
        "MultipartWriter.append_form": {
            "name": "append_form",
            "location": 906,
            "return": [
                "Payload"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Union[(Sequence[Tuple[(str, str)]], Mapping[(str, str)])]"
                ],
                "headers": [
                    "Optional[MultiMapping[str]]"
                ]
            }
        },
        "MultipartWriter.size": {
            "name": "size",
            "location": 928,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartPayloadWriter.__init__": {
            "name": "__init__",
            "location": 971,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "MultipartPayloadWriter.enable_encoding": {
            "name": "enable_encoding",
            "location": 977,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ]
            }
        },
        "MultipartPayloadWriter.enable_compression": {
            "name": "enable_compression",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ],
                "strategy": [
                    "int"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/payload.py": {
        "get_payload": {
            "name": "get_payload",
            "location": 71,
            "return": [
                "'Payload'"
            ],
            "arguments": {
                "data": [
                    "Any"
                ]
            }
        },
        "register_payload": {
            "name": "register_payload",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": [
                    "Type['Payload']"
                ],
                "type": [
                    "Any"
                ]
            }
        },
        "payload_type.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Any"
                ]
            }
        },
        "payload_type.__call__": {
            "name": "__call__",
            "location": 86,
            "return": [
                "Type['Payload']"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "Type['Payload']"
                ]
            }
        },
        "PayloadRegistry.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PayloadRegistry.get": {
            "name": "get",
            "location": 106,
            "return": [
                "'Payload'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "PayloadRegistry.register": {
            "name": "register",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "PayloadType"
                ],
                "type": [
                    "Any"
                ]
            }
        },
        "Payload.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "headers": [
                    "Optional[Union[(_CIMultiDict, Dict[(str, str)], Iterable[Tuple[(str, str)]])]]"
                ],
                "content_type": [
                    "Union[(None, str, _SENTINEL)]"
                ],
                "filename": [
                    "Optional[str]"
                ],
                "encoding": [
                    "Optional[str]"
                ]
            }
        },
        "Payload.size": {
            "name": "size",
            "location": 167,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payload.filename": {
            "name": "filename",
            "location": 172,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payload.headers": {
            "name": "headers",
            "location": 177,
            "return": [
                "_CIMultiDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payload._binary_headers": {
            "name": "_binary_headers",
            "location": 182,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payload.encoding": {
            "name": "encoding",
            "location": 191,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payload.content_type": {
            "name": "content_type",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payload.set_content_disposition": {
            "name": "set_content_disposition",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disptype": [
                    "str"
                ],
                "quote_fields": [
                    "bool"
                ],
                "_charset": [
                    "str"
                ]
            }
        },
        "BytesPayload.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "ByteString"
                ]
            }
        },
        "StringPayload.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringIOPayload.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "IO[str]"
                ]
            }
        },
        "IOBasePayload.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "IO[Any]"
                ],
                "disposition": [
                    "str"
                ]
            }
        },
        "TextIOPayload.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "TextIO"
                ]
            }
        },
        "TextIOPayload.size": {
            "name": "size",
            "location": 342,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesIOPayload.size": {
            "name": "size",
            "location": 366,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferedReaderPayload.size": {
            "name": "size",
            "location": 375,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonPayload.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "encoding": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "dumps": [
                    "JSONEncoder"
                ]
            }
        },
        "AsyncIterablePayload.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_AsyncIterable"
                ]
            }
        },
        "StreamReaderPayload.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "StreamReader"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/pytest_plugin.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 35,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "pytest_fixture_setup": {
            "name": "pytest_fixture_setup",
            "location": 56,
            "return": [],
            "arguments": {
                "fixturedef": []
            }
        },
        "fast": {
            "name": "fast",
            "location": 114,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "loop_debug": {
            "name": "loop_debug",
            "location": 120,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_runtime_warning_context": {
            "name": "_runtime_warning_context",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "_passthrough_loop_context": {
            "name": "_passthrough_loop_context",
            "location": 156,
            "return": [],
            "arguments": {
                "loop": [],
                "fast": []
            }
        },
        "pytest_pycollect_makeitem": {
            "name": "pytest_pycollect_makeitem",
            "location": 172,
            "return": [],
            "arguments": {
                "collector": [],
                "name": [],
                "obj": []
            }
        },
        "pytest_pyfunc_call": {
            "name": "pytest_pyfunc_call",
            "location": 178,
            "return": [],
            "arguments": {
                "pyfuncitem": []
            }
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 196,
            "return": [],
            "arguments": {
                "metafunc": []
            }
        },
        "loop": {
            "name": "loop",
            "location": 231,
            "return": [],
            "arguments": {
                "loop_factory": [],
                "fast": [],
                "loop_debug": []
            }
        },
        "proactor_loop": {
            "name": "proactor_loop",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "aiohttp_unused_port": {
            "name": "aiohttp_unused_port",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "aiohttp_server": {
            "name": "aiohttp_server",
            "location": 259,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "aiohttp_raw_server": {
            "name": "aiohttp_raw_server",
            "location": 282,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "aiohttp_client_cls": {
            "name": "aiohttp_client_cls",
            "location": 305,
            "return": [
                "Type[TestClient]"
            ],
            "arguments": {}
        },
        "aiohttp_client": {
            "name": "aiohttp_client",
            "location": 332,
            "return": [
                "Generator[(AiohttpClient, None, None)]"
            ],
            "arguments": {
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "aiohttp_client_cls": [
                    "Type[TestClient]"
                ]
            }
        },
        "pytest_fixture_setup.wrapper": {
            "name": "wrapper",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "pytest_fixture_setup.wrapper.finalizer": {
            "name": "finalizer",
            "location": 99,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp-master/aiohttp/resolver.py": {
        "ThreadedResolver.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncResolver.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/streams.py": {
        "AsyncStreamIterator.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "read_func": [
                    "Callable[([], Awaitable[_T])]"
                ]
            }
        },
        "AsyncStreamIterator.__aiter__": {
            "name": "__aiter__",
            "location": 36,
            "return": [
                "'AsyncStreamIterator[_T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkTupleAsyncStreamIterator.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "'StreamReader'"
                ]
            }
        },
        "ChunkTupleAsyncStreamIterator.__aiter__": {
            "name": "__aiter__",
            "location": 53,
            "return": [
                "'ChunkTupleAsyncStreamIterator'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncStreamReaderMixin.__aiter__": {
            "name": "__aiter__",
            "location": 64,
            "return": [
                "AsyncStreamIterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncStreamReaderMixin.iter_chunked": {
            "name": "iter_chunked",
            "location": 67,
            "return": [
                "AsyncStreamIterator[bytes]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "AsyncStreamReaderMixin.iter_any": {
            "name": "iter_any",
            "location": 73,
            "return": [
                "AsyncStreamIterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncStreamReaderMixin.iter_chunks": {
            "name": "iter_chunks",
            "location": 77,
            "return": [
                "ChunkTupleAsyncStreamIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "BaseProtocol"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "StreamReader.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.get_read_buffer_limits": {
            "name": "get_read_buffer_limits",
            "location": 142,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.exception": {
            "name": "exception",
            "location": 145,
            "return": [
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.set_exception": {
            "name": "set_exception",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "StreamReader.on_eof": {
            "name": "on_eof",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([], None)]"
                ]
            }
        },
        "StreamReader.feed_eof": {
            "name": "feed_eof",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.is_eof": {
            "name": "is_eof",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.at_eof": {
            "name": "at_eof",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.unread_data": {
            "name": "unread_data",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "StreamReader.feed_data": {
            "name": "feed_data",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "StreamReader.begin_http_chunk_receiving": {
            "name": "begin_http_chunk_receiving",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.end_http_chunk_receiving": {
            "name": "end_http_chunk_receiving",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.read_nowait": {
            "name": "read_nowait",
            "location": 434,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "StreamReader._read_nowait_chunk": {
            "name": "_read_nowait_chunk",
            "location": 449,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "StreamReader._read_nowait": {
            "name": "_read_nowait",
            "location": 476,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "EmptyStreamReader.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStreamReader.exception": {
            "name": "exception",
            "location": 495,
            "return": [
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStreamReader.set_exception": {
            "name": "set_exception",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "EmptyStreamReader.on_eof": {
            "name": "on_eof",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([], None)]"
                ]
            }
        },
        "EmptyStreamReader.feed_eof": {
            "name": "feed_eof",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStreamReader.is_eof": {
            "name": "is_eof",
            "location": 510,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStreamReader.at_eof": {
            "name": "at_eof",
            "location": 513,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStreamReader.feed_data": {
            "name": "feed_data",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "EmptyStreamReader.read_nowait": {
            "name": "read_nowait",
            "location": 539,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "DataQueue.__init__": {
            "name": "__init__",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "DataQueue.__len__": {
            "name": "__len__",
            "location": 557,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataQueue.is_eof": {
            "name": "is_eof",
            "location": 560,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataQueue.at_eof": {
            "name": "at_eof",
            "location": 563,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataQueue.exception": {
            "name": "exception",
            "location": 566,
            "return": [
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataQueue.set_exception": {
            "name": "set_exception",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "DataQueue.feed_data": {
            "name": "feed_data",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_T@@"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "DataQueue.feed_eof": {
            "name": "feed_eof",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataQueue.__aiter__": {
            "name": "__aiter__",
            "location": 615,
            "return": [
                "AsyncStreamIterator[_T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlDataQueue.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "BaseProtocol"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "FlowControlDataQueue.feed_data": {
            "name": "feed_data",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_T@@"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/tcp_helpers.py": {
        "tcp_nodelay": {
            "name": "tcp_nodelay",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "transport": [
                    "asyncio.Transport"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "tcp_keepalive": {
            "name": "tcp_keepalive",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "transport": [
                    "asyncio.Transport"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/test_utils.py": {
        "get_unused_port_socket": {
            "name": "get_unused_port_socket",
            "location": 64,
            "return": [
                "socket.socket"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "family": [
                    "socket.AddressFamily"
                ]
            }
        },
        "get_port_socket": {
            "name": "get_port_socket",
            "location": 70,
            "return": [
                "socket.socket"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "family": [
                    "socket.AddressFamily"
                ]
            }
        },
        "unused_port": {
            "name": "unused_port",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "loop_context": {
            "name": "loop_context",
            "location": 466,
            "return": [
                "Iterator[asyncio.AbstractEventLoop]"
            ],
            "arguments": {
                "loop_factory": [
                    "_LOOP_FACTORY"
                ],
                "fast": [
                    "bool"
                ]
            }
        },
        "setup_test_loop": {
            "name": "setup_test_loop",
            "location": 478,
            "return": [
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "loop_factory": [
                    "_LOOP_FACTORY"
                ]
            }
        },
        "teardown_test_loop": {
            "name": "teardown_test_loop",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "asyncio.AbstractEventLoop"
                ],
                "fast": [
                    "bool"
                ]
            }
        },
        "_create_app_mock": {
            "name": "_create_app_mock",
            "location": 526,
            "return": [
                "mock.MagicMock"
            ],
            "arguments": {}
        },
        "_create_transport": {
            "name": "_create_transport",
            "location": 543,
            "return": [
                "mock.Mock"
            ],
            "arguments": {
                "sslcontext": [
                    "Optional[SSLContext]"
                ]
            }
        },
        "make_mocked_request": {
            "name": "make_mocked_request",
            "location": 556,
            "return": [
                "Request"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "headers": [
                    "Any"
                ]
            }
        },
        "make_mocked_coro": {
            "name": "make_mocked_coro",
            "location": 646,
            "return": [
                "Any"
            ],
            "arguments": {
                "return_value": [
                    "Any"
                ],
                "raise_exception": [
                    "Any"
                ]
            }
        },
        "BaseTestServer.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestServer.make_url": {
            "name": "make_url",
            "location": 151,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseTestServer.started": {
            "name": "started",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestServer.closed": {
            "name": "closed",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestServer.handler": {
            "name": "handler",
            "location": 169,
            "return": [
                "Server"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServer.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Application"
                ]
            }
        },
        "RawTestServer.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "_RequestHandler"
                ]
            }
        },
        "TestClient.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "BaseTestServer"
                ]
            }
        },
        "TestClient.scheme": {
            "name": "scheme",
            "location": 277,
            "return": [
                "Union[(str, object)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.host": {
            "name": "host",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.port": {
            "name": "port",
            "location": 285,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.server": {
            "name": "server",
            "location": 289,
            "return": [
                "BaseTestServer"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.app": {
            "name": "app",
            "location": 293,
            "return": [
                "Optional[Application]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.session": {
            "name": "session",
            "location": 297,
            "return": [
                "ClientSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.make_url": {
            "name": "make_url",
            "location": 307,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.request": {
            "name": "request",
            "location": 316,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.get": {
            "name": "get",
            "location": 326,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.post": {
            "name": "post",
            "location": 330,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.options": {
            "name": "options",
            "location": 334,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.head": {
            "name": "head",
            "location": 338,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.put": {
            "name": "put",
            "location": 342,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.patch": {
            "name": "patch",
            "location": 346,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.delete": {
            "name": "delete",
            "location": 350,
            "return": [
                "_RequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestClient.ws_connect": {
            "name": "ws_connect",
            "location": 354,
            "return": [
                "_WSRequestContextManager"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "AioHTTPTestCase.get_app": {
            "name": "get_app",
            "location": 425,
            "return": [
                "Application"
            ],
            "arguments": {
                "self": []
            }
        },
        "AioHTTPTestCase.setUp": {
            "name": "setUp",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AioHTTPTestCase.tearDown": {
            "name": "tearDown",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_create_app_mock.get_dict": {
            "name": "get_dict",
            "location": 527,
            "return": [
                "Any"
            ],
            "arguments": {
                "app": [
                    "Any"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "_create_app_mock.set_dict": {
            "name": "set_dict",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "_create_transport.get_extra_info": {
            "name": "get_extra_info",
            "location": 546,
            "return": [
                "Optional[SSLContext]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/tracing.py": {
        "TraceConfig.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_config_ctx_factory": [
                    "Type[SimpleNamespace]"
                ]
            }
        },
        "TraceConfig.trace_config_ctx": {
            "name": "trace_config_ctx",
            "location": 106,
            "return": [
                "SimpleNamespace"
            ],
            "arguments": {
                "self": [],
                "trace_request_ctx": [
                    "Optional[SimpleNamespace]"
                ]
            }
        },
        "TraceConfig.freeze": {
            "name": "freeze",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_request_start": {
            "name": "on_request_start",
            "location": 131,
            "return": [
                "'Signal[_SignalCallback[TraceRequestStartParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_request_chunk_sent": {
            "name": "on_request_chunk_sent",
            "location": 135,
            "return": [
                "'Signal[_SignalCallback[TraceRequestChunkSentParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_response_chunk_received": {
            "name": "on_response_chunk_received",
            "location": 141,
            "return": [
                "'Signal[_SignalCallback[TraceResponseChunkReceivedParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_request_end": {
            "name": "on_request_end",
            "location": 147,
            "return": [
                "'Signal[_SignalCallback[TraceRequestEndParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_request_exception": {
            "name": "on_request_exception",
            "location": 151,
            "return": [
                "'Signal[_SignalCallback[TraceRequestExceptionParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_request_redirect": {
            "name": "on_request_redirect",
            "location": 157,
            "return": [
                "'Signal[_SignalCallback[TraceRequestRedirectParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_connection_queued_start": {
            "name": "on_connection_queued_start",
            "location": 163,
            "return": [
                "'Signal[_SignalCallback[TraceConnectionQueuedStartParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_connection_queued_end": {
            "name": "on_connection_queued_end",
            "location": 169,
            "return": [
                "'Signal[_SignalCallback[TraceConnectionQueuedEndParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_connection_create_start": {
            "name": "on_connection_create_start",
            "location": 175,
            "return": [
                "'Signal[_SignalCallback[TraceConnectionCreateStartParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_connection_create_end": {
            "name": "on_connection_create_end",
            "location": 181,
            "return": [
                "'Signal[_SignalCallback[TraceConnectionCreateEndParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_connection_reuseconn": {
            "name": "on_connection_reuseconn",
            "location": 187,
            "return": [
                "'Signal[_SignalCallback[TraceConnectionReuseconnParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_dns_resolvehost_start": {
            "name": "on_dns_resolvehost_start",
            "location": 193,
            "return": [
                "'Signal[_SignalCallback[TraceDnsResolveHostStartParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_dns_resolvehost_end": {
            "name": "on_dns_resolvehost_end",
            "location": 199,
            "return": [
                "'Signal[_SignalCallback[TraceDnsResolveHostEndParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_dns_cache_hit": {
            "name": "on_dns_cache_hit",
            "location": 205,
            "return": [
                "'Signal[_SignalCallback[TraceDnsCacheHitParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_dns_cache_miss": {
            "name": "on_dns_cache_miss",
            "location": 209,
            "return": [
                "'Signal[_SignalCallback[TraceDnsCacheMissParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.on_request_headers_sent": {
            "name": "on_request_headers_sent",
            "location": 213,
            "return": [
                "'Signal[_SignalCallback[TraceRequestHeadersSentParams]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trace.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "'ClientSession'"
                ],
                "trace_config": [
                    "TraceConfig"
                ],
                "trace_config_ctx": [
                    "SimpleNamespace"
                ]
            }
        },
        "_SignalCallback.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "Awaitable[None]"
            ],
            "arguments": {
                "self": [],
                "__client_session": [
                    "ClientSession"
                ],
                "__trace_config_ctx": [
                    "SimpleNamespace"
                ],
                "__params": [
                    "_ParamT_contra@@"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/typedefs.py": {},
    "aiohttp-master/aiohttp/web.py": {
        "_cancel_tasks": {
            "name": "_cancel_tasks",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "to_cancel": [
                    "Set['asyncio.Task[Any]']"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "run_app": {
            "name": "run_app",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Union[(Application, Awaitable[Application])]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_app.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type['Application']"
                ]
            }
        },
        "Application.__eq__": {
            "name": "__eq__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Application.__getitem__": {
            "name": "__getitem__",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, AppKey[_T])]"
                ]
            }
        },
        "Application._check_frozen": {
            "name": "_check_frozen",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__setitem__": {
            "name": "__setitem__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, AppKey[_T])]"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Application.__delitem__": {
            "name": "__delitem__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, AppKey[_T])]"
                ]
            }
        },
        "Application.__len__": {
            "name": "__len__",
            "location": 185,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__iter__": {
            "name": "__iter__",
            "location": 188,
            "return": [
                "Iterator[Union[(str, AppKey[Any])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.get": {
            "name": "get",
            "location": 203,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, AppKey[_T])]"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "Application._set_loop": {
            "name": "_set_loop",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "Application.pre_frozen": {
            "name": "pre_frozen",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.pre_freeze": {
            "name": "pre_freeze",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.frozen": {
            "name": "frozen",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.freeze": {
            "name": "freeze",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.debug": {
            "name": "debug",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._reg_subapp_signals": {
            "name": "_reg_subapp_signals",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subapp": [
                    "'Application'"
                ]
            }
        },
        "Application.add_subapp": {
            "name": "add_subapp",
            "location": 279,
            "return": [
                "AbstractResource"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "subapp": [
                    "'Application'"
                ]
            }
        },
        "Application._add_subapp": {
            "name": "_add_subapp",
            "location": 288,
            "return": [
                "AbstractResource"
            ],
            "arguments": {
                "self": [],
                "resource_factory": [
                    "Callable[([], AbstractResource)]"
                ],
                "subapp": [
                    "'Application'"
                ]
            }
        },
        "Application.add_domain": {
            "name": "add_domain",
            "location": 302,
            "return": [
                "AbstractResource"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ],
                "subapp": [
                    "'Application'"
                ]
            }
        },
        "Application.add_routes": {
            "name": "add_routes",
            "location": 312,
            "return": [
                "List[AbstractRoute]"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "Iterable[AbstractRouteDef]"
                ]
            }
        },
        "Application.on_response_prepare": {
            "name": "on_response_prepare",
            "location": 316,
            "return": [
                "_RespPrepareSignal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.on_startup": {
            "name": "on_startup",
            "location": 320,
            "return": [
                "_AppSignal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.on_shutdown": {
            "name": "on_shutdown",
            "location": 324,
            "return": [
                "_AppSignal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.on_cleanup": {
            "name": "on_cleanup",
            "location": 328,
            "return": [
                "_AppSignal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.cleanup_ctx": {
            "name": "cleanup_ctx",
            "location": 332,
            "return": [
                "'CleanupContext'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.router": {
            "name": "router",
            "location": 336,
            "return": [
                "UrlDispatcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.middlewares": {
            "name": "middlewares",
            "location": 340,
            "return": [
                "_Middlewares"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._prepare_middleware": {
            "name": "_prepare_middleware",
            "location": 368,
            "return": [
                "Iterator[Middleware]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__call__": {
            "name": "__call__",
            "location": 397,
            "return": [
                "'Application'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__repr__": {
            "name": "__repr__",
            "location": 401,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__bool__": {
            "name": "__bool__",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanupError.exceptions": {
            "name": "exceptions",
            "location": 410,
            "return": [
                "List[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanupContext.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._reg_subapp_signals.reg_handler": {
            "name": "reg_handler",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "signame": [
                    "str"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_exceptions.py": {
        "_initialize_default_reason": {
            "name": "_initialize_default_reason",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "HTTPException.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.__bool__": {
            "name": "__bool__",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.status": {
            "name": "status",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.reason": {
            "name": "reason",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.text": {
            "name": "text",
            "location": 150,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.headers": {
            "name": "headers",
            "location": 154,
            "return": [
                "'CIMultiDict[str]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.__str__": {
            "name": "__str__",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 165,
            "return": [
                "Tuple[(Any, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPMove.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "StrOrURL"
                ]
            }
        },
        "HTTPMove.location": {
            "name": "location",
            "location": 235,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPMethodNotAllowed.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "allowed_methods": [
                    "Iterable[str]"
                ]
            }
        },
        "HTTPMethodNotAllowed.allowed_methods": {
            "name": "allowed_methods",
            "location": 327,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPMethodNotAllowed.method": {
            "name": "method",
            "location": 331,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequestEntityTooLarge.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_size": [
                    "int"
                ],
                "actual_size": [
                    "int"
                ]
            }
        },
        "HTTPUnavailableForLegalReasons.__init__": {
            "name": "__init__",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "StrOrURL"
                ]
            }
        },
        "HTTPUnavailableForLegalReasons.link": {
            "name": "link",
            "location": 438,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/web_fileresponse.py": {
        "FileResponse.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "chunk_size": [
                    "int"
                ],
                "status": [
                    "int"
                ],
                "reason": [
                    "Optional[str]"
                ],
                "headers": [
                    "Optional[LooseHeaders]"
                ]
            }
        },
        "FileResponse._strong_etag_match": {
            "name": "_strong_etag_match",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "etag_value": [
                    "str"
                ],
                "etags": [
                    "Tuple[(ETag, ...)]"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_log.py": {
        "AccessLogger.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "log_format": [
                    "str"
                ]
            }
        },
        "AccessLogger.compile_format": {
            "name": "compile_format",
            "location": 79,
            "return": [
                "Tuple[(str, List[KeyMethod])]"
            ],
            "arguments": {
                "self": [],
                "log_format": [
                    "str"
                ]
            }
        },
        "AccessLogger._format_i": {
            "name": "_format_i",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_o": {
            "name": "_format_o",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_a": {
            "name": "_format_a",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_t": {
            "name": "_format_t",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_P": {
            "name": "_format_P",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_r": {
            "name": "_format_r",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_s": {
            "name": "_format_s",
            "location": 167,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_b": {
            "name": "_format_b",
            "location": 171,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_T": {
            "name": "_format_T",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_Tf": {
            "name": "_format_Tf",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_D": {
            "name": "_format_D",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger._format_line": {
            "name": "_format_line",
            "location": 186,
            "return": [
                "Iterable[Tuple[(str, Callable[([BaseRequest, StreamResponse, float], str)])]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        },
        "AccessLogger.log": {
            "name": "log",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ],
                "response": [
                    "StreamResponse"
                ],
                "time": [
                    "float"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_middlewares.py": {
        "middleware": {
            "name": "middleware",
            "location": 34,
            "return": [
                "_Func@@"
            ],
            "arguments": {
                "f": [
                    "_Func@@"
                ]
            }
        },
        "normalize_path_middleware": {
            "name": "normalize_path_middleware",
            "location": 45,
            "return": [
                "Middleware"
            ],
            "arguments": {}
        },
        "_fix_request_current_app": {
            "name": "_fix_request_current_app",
            "location": 116,
            "return": [
                "Middleware"
            ],
            "arguments": {
                "app": [
                    "'Application'"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_protocol.py": {
        "AccessLoggerWrapper.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_logger": [
                    "AbstractAccessLogger"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "RequestHandler.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [
                    "'Server'"
                ]
            }
        },
        "RequestHandler.__repr__": {
            "name": "__repr__",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.keepalive_timeout": {
            "name": "keepalive_timeout",
            "location": 264,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.connection_made": {
            "name": "connection_made",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.BaseTransport"
                ]
            }
        },
        "RequestHandler.connection_lost": {
            "name": "connection_lost",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Optional[BaseException]"
                ]
            }
        },
        "RequestHandler.set_parser": {
            "name": "set_parser",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "RequestHandler.eof_received": {
            "name": "eof_received",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.data_received": {
            "name": "data_received",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "RequestHandler.keep_alive": {
            "name": "keep_alive",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool"
                ]
            }
        },
        "RequestHandler.close": {
            "name": "close",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.force_close": {
            "name": "force_close",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.log_debug": {
            "name": "log_debug",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.log_exception": {
            "name": "log_exception",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler._process_keepalive": {
            "name": "_process_keepalive",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.handle_error": {
            "name": "handle_error",
            "location": 644,
            "return": [
                "StreamResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ],
                "status": [
                    "int"
                ],
                "exc": [
                    "Optional[BaseException]"
                ],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "RequestHandler._make_error_handler": {
            "name": "_make_error_handler",
            "location": 695,
            "return": [
                "Callable[([BaseRequest], Awaitable[StreamResponse])]"
            ],
            "arguments": {
                "self": [],
                "err_info": [
                    "_ErrInfo"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_request.py": {
        "BaseRequest.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "RawRequestMessage"
                ],
                "payload": [
                    "StreamReader"
                ],
                "protocol": [
                    "'RequestHandler'"
                ],
                "payload_writer": [
                    "AbstractStreamWriter"
                ],
                "task": [
                    "'asyncio.Task[None]'"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "BaseRequest.clone": {
            "name": "clone",
            "location": 207,
            "return": [
                "'BaseRequest'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.task": {
            "name": "task",
            "location": 267,
            "return": [
                "'asyncio.Task[None]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.protocol": {
            "name": "protocol",
            "location": 271,
            "return": [
                "'RequestHandler'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.transport": {
            "name": "transport",
            "location": 275,
            "return": [
                "Optional[asyncio.Transport]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.writer": {
            "name": "writer",
            "location": 281,
            "return": [
                "AbstractStreamWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.client_max_size": {
            "name": "client_max_size",
            "location": 285,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.rel_url": {
            "name": "rel_url",
            "location": 289,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.__getitem__": {
            "name": "__getitem__",
            "location": 294,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "BaseRequest.__setitem__": {
            "name": "__setitem__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseRequest.__delitem__": {
            "name": "__delitem__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "BaseRequest.__len__": {
            "name": "__len__",
            "location": 303,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.__iter__": {
            "name": "__iter__",
            "location": 306,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.secure": {
            "name": "secure",
            "location": 312,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.forwarded": {
            "name": "forwarded",
            "location": 317,
            "return": [
                "Tuple[(Mapping[(str, str)], ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.scheme": {
            "name": "scheme",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.method": {
            "name": "method",
            "location": 394,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.version": {
            "name": "version",
            "location": 402,
            "return": [
                "HttpVersion"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.host": {
            "name": "host",
            "location": 410,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.remote": {
            "name": "remote",
            "location": 425,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.url": {
            "name": "url",
            "location": 440,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.path": {
            "name": "path",
            "location": 445,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.path_qs": {
            "name": "path_qs",
            "location": 453,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.raw_path": {
            "name": "raw_path",
            "location": 461,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.query": {
            "name": "query",
            "location": 471,
            "return": [
                "MultiDictProxy[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.query_string": {
            "name": "query_string",
            "location": 476,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.headers": {
            "name": "headers",
            "location": 484,
            "return": [
                "'CIMultiDictProxy[str]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.raw_headers": {
            "name": "raw_headers",
            "location": 489,
            "return": [
                "RawHeaders"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.if_modified_since": {
            "name": "if_modified_since",
            "location": 494,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.if_unmodified_since": {
            "name": "if_unmodified_since",
            "location": 502,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest._etag_values": {
            "name": "_etag_values",
            "location": 510,
            "return": [
                "Iterator[ETag]"
            ],
            "arguments": {
                "etag_header": [
                    "str"
                ]
            }
        },
        "BaseRequest._if_match_or_none_impl": {
            "name": "_if_match_or_none_impl",
            "location": 531,
            "return": [
                "Optional[Tuple[(ETag, ...)]]"
            ],
            "arguments": {
                "cls": [],
                "header_value": [
                    "Optional[str]"
                ]
            }
        },
        "BaseRequest.if_match": {
            "name": "if_match",
            "location": 540,
            "return": [
                "Optional[Tuple[(ETag, ...)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.if_none_match": {
            "name": "if_none_match",
            "location": 548,
            "return": [
                "Optional[Tuple[(ETag, ...)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.if_range": {
            "name": "if_range",
            "location": 556,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.keep_alive": {
            "name": "keep_alive",
            "location": 564,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.cookies": {
            "name": "cookies",
            "location": 569,
            "return": [
                "Mapping[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.http_range": {
            "name": "http_range",
            "location": 579,
            "return": [
                "slice"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.content": {
            "name": "content",
            "location": 615,
            "return": [
                "StreamReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.can_read_body": {
            "name": "can_read_body",
            "location": 620,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.body_exists": {
            "name": "body_exists",
            "location": 625,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.get_extra_info": {
            "name": "get_extra_info",
            "location": 787,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "BaseRequest.__repr__": {
            "name": "__repr__",
            "location": 799,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.__eq__": {
            "name": "__eq__",
            "location": 807,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "BaseRequest.__bool__": {
            "name": "__bool__",
            "location": 810,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest._cancel": {
            "name": "_cancel",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "BaseRequest._finish": {
            "name": "_finish",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.clone": {
            "name": "clone",
            "location": 861,
            "return": [
                "'Request'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.match_info": {
            "name": "match_info",
            "location": 886,
            "return": [
                "'UrlMappingMatchInfo'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.app": {
            "name": "app",
            "location": 893,
            "return": [
                "'Application'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.config_dict": {
            "name": "config_dict",
            "location": 900,
            "return": [
                "ChainMapProxy"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/web_response.py": {
        "json_response": {
            "name": "json_response",
            "location": 735,
            "return": [
                "Response"
            ],
            "arguments": {
                "data": [
                    "Any"
                ]
            }
        },
        "StreamResponse.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.prepared": {
            "name": "prepared",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.task": {
            "name": "task",
            "location": 132,
            "return": [
                "'Optional[asyncio.Task[None]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.status": {
            "name": "status",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.chunked": {
            "name": "chunked",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.compression": {
            "name": "compression",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.reason": {
            "name": "reason",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.set_status": {
            "name": "set_status",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int"
                ],
                "reason": [
                    "Optional[str]"
                ],
                "_RESPONSES": [
                    "Mapping[(int, Tuple[(str, str)])]"
                ]
            }
        },
        "StreamResponse.keep_alive": {
            "name": "keep_alive",
            "location": 172,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.force_close": {
            "name": "force_close",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.body_length": {
            "name": "body_length",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.enable_chunked_encoding": {
            "name": "enable_chunked_encoding",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.enable_compression": {
            "name": "enable_compression",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "Optional[ContentCoding]"
                ]
            }
        },
        "StreamResponse.headers": {
            "name": "headers",
            "location": 198,
            "return": [
                "'CIMultiDict[str]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.content_length": {
            "name": "content_length",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]"
                ]
            }
        },
        "StreamResponse.content_type": {
            "name": "content_type",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StreamResponse.charset": {
            "name": "charset",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "StreamResponse.last_modified": {
            "name": "last_modified",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Union[(int, float, datetime.datetime, str)]]"
                ]
            }
        },
        "StreamResponse.etag": {
            "name": "etag",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Union[(ETag, str)]]"
                ]
            }
        },
        "StreamResponse._generate_content_type_header": {
            "name": "_generate_content_type_header",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "CONTENT_TYPE": [
                    "istr"
                ]
            }
        },
        "StreamResponse.__repr__": {
            "name": "__repr__",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.__getitem__": {
            "name": "__getitem__",
            "location": 477,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "StreamResponse.__setitem__": {
            "name": "__setitem__",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "StreamResponse.__delitem__": {
            "name": "__delitem__",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "StreamResponse.__len__": {
            "name": "__len__",
            "location": 486,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.__iter__": {
            "name": "__iter__",
            "location": 489,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.__hash__": {
            "name": "__hash__",
            "location": 492,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamResponse.__eq__": {
            "name": "__eq__",
            "location": 495,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.body": {
            "name": "body",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "bytes"
                ],
                "CONTENT_TYPE": [
                    "istr"
                ],
                "CONTENT_LENGTH": [
                    "istr"
                ]
            }
        },
        "Response.text": {
            "name": "text",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Response.content_length": {
            "name": "content_length",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]"
                ]
            }
        },
        "Response._compress_body": {
            "name": "_compress_body",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zlib_mode": [
                    "int"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_routedef.py": {
        "route": {
            "name": "route",
            "location": 102,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "head": {
            "name": "head",
            "location": 106,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "options": {
            "name": "options",
            "location": 110,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 114,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 127,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 131,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "patch": {
            "name": "patch",
            "location": 135,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 139,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "_HandlerType"
                ]
            }
        },
        "view": {
            "name": "view",
            "location": 143,
            "return": [
                "RouteDef"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "handler": [
                    "Type[AbstractView]"
                ]
            }
        },
        "static": {
            "name": "static",
            "location": 147,
            "return": [
                "StaticDef"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "path": [
                    "PathLike"
                ]
            }
        },
        "AbstractRouteDef.register": {
            "name": "register",
            "location": 50,
            "return": [
                "List[AbstractRoute]"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "UrlDispatcher"
                ]
            }
        },
        "RouteDef.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteDef.register": {
            "name": "register",
            "location": 72,
            "return": [
                "List[AbstractRoute]"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "UrlDispatcher"
                ]
            }
        },
        "StaticDef.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticDef.register": {
            "name": "register",
            "location": 96,
            "return": [
                "List[AbstractRoute]"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "UrlDispatcher"
                ]
            }
        },
        "RouteTableDef.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTableDef.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTableDef.__getitem__": {
            "name": "__getitem__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "RouteTableDef.__iter__": {
            "name": "__iter__",
            "location": 174,
            "return": [
                "Iterator[AbstractRouteDef]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTableDef.__len__": {
            "name": "__len__",
            "location": 177,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTableDef.__contains__": {
            "name": "__contains__",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "object"
                ]
            }
        },
        "RouteTableDef.route": {
            "name": "route",
            "location": 183,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.head": {
            "name": "head",
            "location": 190,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.get": {
            "name": "get",
            "location": 193,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.post": {
            "name": "post",
            "location": 196,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.put": {
            "name": "put",
            "location": 199,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.patch": {
            "name": "patch",
            "location": 202,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.delete": {
            "name": "delete",
            "location": 205,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.options": {
            "name": "options",
            "location": 208,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.view": {
            "name": "view",
            "location": 211,
            "return": [
                "_Deco"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RouteTableDef.static": {
            "name": "static",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "path": [
                    "PathLike"
                ]
            }
        },
        "RouteTableDef.route.inner": {
            "name": "inner",
            "location": 184,
            "return": [
                "_HandlerType"
            ],
            "arguments": {
                "handler": [
                    "_HandlerType"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_runner.py": {
        "_raise_graceful_exit": {
            "name": "_raise_graceful_exit",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseSite.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "'BaseRunner'"
                ]
            }
        },
        "BaseSite.name": {
            "name": "name",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPSite.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "'BaseRunner'"
                ],
                "host": [
                    "Optional[str]"
                ],
                "port": [
                    "Optional[int]"
                ]
            }
        },
        "TCPSite.name": {
            "name": "name",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnixSite.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "'BaseRunner'"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "UnixSite.name": {
            "name": "name",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedPipeSite.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "'BaseRunner'"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "NamedPipeSite.name": {
            "name": "name",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockSite.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "'BaseRunner'"
                ],
                "sock": [
                    "socket.socket"
                ]
            }
        },
        "SockSite.name": {
            "name": "name",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRunner.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRunner.server": {
            "name": "server",
            "location": 255,
            "return": [
                "Optional[Server]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRunner.addresses": {
            "name": "addresses",
            "location": 259,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRunner.sites": {
            "name": "sites",
            "location": 271,
            "return": [
                "Set[BaseSite]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRunner._reg_site": {
            "name": "_reg_site",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "BaseSite"
                ]
            }
        },
        "BaseRunner._check_site": {
            "name": "_check_site",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "BaseSite"
                ]
            }
        },
        "BaseRunner._unreg_site": {
            "name": "_unreg_site",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "BaseSite"
                ]
            }
        },
        "ServerRunner.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_server": [
                    "Server"
                ]
            }
        },
        "AppRunner.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Application"
                ]
            }
        },
        "AppRunner.app": {
            "name": "app",
            "location": 391,
            "return": [
                "Application"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRunner._make_request": {
            "name": "_make_request",
            "location": 408,
            "return": [
                "Request"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "RawRequestMessage"
                ],
                "payload": [
                    "StreamReader"
                ],
                "protocol": [
                    "RequestHandler"
                ],
                "writer": [
                    "AbstractStreamWriter"
                ],
                "task": [
                    "'asyncio.Task[None]'"
                ],
                "_cls": [
                    "Type[Request]"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "_RequestHandler"
                ]
            }
        },
        "Server.connections": {
            "name": "connections",
            "location": 38,
            "return": [
                "List[RequestHandler]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.connection_made": {
            "name": "connection_made",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "RequestHandler"
                ],
                "transport": [
                    "asyncio.Transport"
                ]
            }
        },
        "Server.connection_lost": {
            "name": "connection_lost",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "RequestHandler"
                ],
                "exc": [
                    "Optional[BaseException]"
                ]
            }
        },
        "Server._make_request": {
            "name": "_make_request",
            "location": 52,
            "return": [
                "BaseRequest"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "RawRequestMessage"
                ],
                "payload": [
                    "StreamReader"
                ],
                "protocol": [
                    "RequestHandler"
                ],
                "writer": [
                    "AbstractStreamWriter"
                ],
                "task": [
                    "'asyncio.Task[None]'"
                ]
            }
        },
        "Server.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [
                "RequestHandler"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/web_urldispatcher.py": {
        "_quote_path": {
            "name": "_quote_path",
            "location": 1186,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "_unquote_path": {
            "name": "_unquote_path",
            "location": 1192,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "_requote_path": {
            "name": "_requote_path",
            "location": 1196,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "AbstractResource.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResource.name": {
            "name": "name",
            "location": 113,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResource.canonical": {
            "name": "canonical",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResource.url_for": {
            "name": "url_for",
            "location": 126,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResource.add_prefix": {
            "name": "add_prefix",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "AbstractResource.get_info": {
            "name": "get_info",
            "location": 144,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResource.freeze": {
            "name": "freeze",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResource.raw_match": {
            "name": "raw_match",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "AbstractRoute.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "handler": [
                    "Union[(Handler, Type[AbstractView])]"
                ]
            }
        },
        "AbstractRoute.method": {
            "name": "method",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRoute.handler": {
            "name": "handler",
            "location": 196,
            "return": [
                "Handler"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRoute.name": {
            "name": "name",
            "location": 201,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRoute.resource": {
            "name": "resource",
            "location": 205,
            "return": [
                "Optional[AbstractResource]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRoute.get_info": {
            "name": "get_info",
            "location": 209,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRoute.url_for": {
            "name": "url_for",
            "location": 213,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "match_dict": [
                    "Dict[(str, str)]"
                ],
                "route": [
                    "AbstractRoute"
                ]
            }
        },
        "UrlMappingMatchInfo.handler": {
            "name": "handler",
            "location": 229,
            "return": [
                "Handler"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.route": {
            "name": "route",
            "location": 233,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.expect_handler": {
            "name": "expect_handler",
            "location": 237,
            "return": [
                "_ExpectHandler"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.http_exception": {
            "name": "http_exception",
            "location": 241,
            "return": [
                "Optional[HTTPException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.get_info": {
            "name": "get_info",
            "location": 244,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.apps": {
            "name": "apps",
            "location": 248,
            "return": [
                "Tuple[('Application', ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.add_app": {
            "name": "add_app",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "'Application'"
                ]
            }
        },
        "UrlMappingMatchInfo.current_app": {
            "name": "current_app",
            "location": 259,
            "return": [
                "'Application'"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.set_current_app": {
            "name": "set_current_app",
            "location": 265,
            "return": [
                "Generator[(None, None, None)]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "'Application'"
                ]
            }
        },
        "UrlMappingMatchInfo.freeze": {
            "name": "freeze",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlMappingMatchInfo.__repr__": {
            "name": "__repr__",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchInfoError.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_exception": [
                    "HTTPException"
                ]
            }
        },
        "MatchInfoError.http_exception": {
            "name": "http_exception",
            "location": 293,
            "return": [
                "HTTPException"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchInfoError.__repr__": {
            "name": "__repr__",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.add_route": {
            "name": "add_route",
            "location": 321,
            "return": [
                "'ResourceRoute'"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "handler": [
                    "Union[(Type[AbstractView], Handler)]"
                ]
            }
        },
        "Resource.register_route": {
            "name": "register_route",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "'ResourceRoute'"
                ]
            }
        },
        "Resource._match": {
            "name": "_match",
            "location": 364,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Resource.__len__": {
            "name": "__len__",
            "location": 367,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.__iter__": {
            "name": "__iter__",
            "location": 370,
            "return": [
                "Iterator['ResourceRoute']"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainResource.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PlainResource.canonical": {
            "name": "canonical",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainResource.freeze": {
            "name": "freeze",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainResource.add_prefix": {
            "name": "add_prefix",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "PlainResource._match": {
            "name": "_match",
            "location": 396,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PlainResource.raw_match": {
            "name": "raw_match",
            "location": 403,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PlainResource.get_info": {
            "name": "get_info",
            "location": 406,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainResource.url_for": {
            "name": "url_for",
            "location": 409,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainResource.__repr__": {
            "name": "__repr__",
            "location": 412,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicResource.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DynamicResource.canonical": {
            "name": "canonical",
            "location": 457,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicResource.add_prefix": {
            "name": "add_prefix",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "DynamicResource._match": {
            "name": "_match",
            "location": 467,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DynamicResource.raw_match": {
            "name": "raw_match",
            "location": 476,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DynamicResource.get_info": {
            "name": "get_info",
            "location": 479,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicResource.url_for": {
            "name": "url_for",
            "location": 482,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicResource.__repr__": {
            "name": "__repr__",
            "location": 486,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixResource.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "PrefixResource.canonical": {
            "name": "canonical",
            "location": 502,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixResource.add_prefix": {
            "name": "add_prefix",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "PrefixResource.raw_match": {
            "name": "raw_match",
            "location": 512,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "StaticResource.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "directory": [
                    "PathLike"
                ]
            }
        },
        "StaticResource.url_for": {
            "name": "url_for",
            "location": 559,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticResource._get_file_hash": {
            "name": "_get_file_hash",
            "location": 598,
            "return": [
                "str"
            ],
            "arguments": {
                "byte_array": [
                    "bytes"
                ]
            }
        },
        "StaticResource.get_info": {
            "name": "get_info",
            "location": 604,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticResource.set_options_route": {
            "name": "set_options_route",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Handler"
                ]
            }
        },
        "StaticResource.__len__": {
            "name": "__len__",
            "location": 631,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticResource.__iter__": {
            "name": "__iter__",
            "location": 634,
            "return": [
                "Iterator[AbstractRoute]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticResource._directory_as_html": {
            "name": "_directory_as_html",
            "location": 675,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Path"
                ]
            }
        },
        "StaticResource.__repr__": {
            "name": "__repr__",
            "location": 711,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixedSubAppResource.__init__": {
            "name": "__init__",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "app": [
                    "'Application'"
                ]
            }
        },
        "PrefixedSubAppResource.add_prefix": {
            "name": "add_prefix",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "PrefixedSubAppResource.url_for": {
            "name": "url_for",
            "location": 730,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixedSubAppResource.get_info": {
            "name": "get_info",
            "location": 733,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixedSubAppResource.__len__": {
            "name": "__len__",
            "location": 750,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixedSubAppResource.__iter__": {
            "name": "__iter__",
            "location": 753,
            "return": [
                "Iterator[AbstractRoute]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixedSubAppResource.__repr__": {
            "name": "__repr__",
            "location": 756,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRuleMatching.get_info": {
            "name": "get_info",
            "location": 768,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRuleMatching.canonical": {
            "name": "canonical",
            "location": 773,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.__init__": {
            "name": "__init__",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "Domain.canonical": {
            "name": "canonical",
            "location": 785,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.validation": {
            "name": "validation",
            "location": 788,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "Domain.match_domain": {
            "name": "match_domain",
            "location": 810,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ]
            }
        },
        "Domain.get_info": {
            "name": "get_info",
            "location": 813,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaskDomain.__init__": {
            "name": "__init__",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "MaskDomain.canonical": {
            "name": "canonical",
            "location": 826,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaskDomain.match_domain": {
            "name": "match_domain",
            "location": 829,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ]
            }
        },
        "MatchedSubAppResource.__init__": {
            "name": "__init__",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "AbstractRuleMatching"
                ],
                "app": [
                    "'Application'"
                ]
            }
        },
        "MatchedSubAppResource.canonical": {
            "name": "canonical",
            "location": 841,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchedSubAppResource.get_info": {
            "name": "get_info",
            "location": 844,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchedSubAppResource.__repr__": {
            "name": "__repr__",
            "location": 858,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceRoute.__init__": {
            "name": "__init__",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "handler": [
                    "Union[(Handler, Type[AbstractView])]"
                ],
                "resource": [
                    "AbstractResource"
                ]
            }
        },
        "ResourceRoute.__repr__": {
            "name": "__repr__",
            "location": 877,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceRoute.name": {
            "name": "name",
            "location": 883,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceRoute.url_for": {
            "name": "url_for",
            "location": 888,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceRoute.get_info": {
            "name": "get_info",
            "location": 893,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemRoute.__init__": {
            "name": "__init__",
            "location": 899,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_exception": [
                    "HTTPException"
                ]
            }
        },
        "SystemRoute.url_for": {
            "name": "url_for",
            "location": 903,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemRoute.name": {
            "name": "name",
            "location": 907,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemRoute.get_info": {
            "name": "get_info",
            "location": 910,
            "return": [
                "_InfoDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemRoute.status": {
            "name": "status",
            "location": 917,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemRoute.reason": {
            "name": "reason",
            "location": 921,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemRoute.__repr__": {
            "name": "__repr__",
            "location": 924,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.__await__": {
            "name": "__await__",
            "location": 939,
            "return": [
                "Generator[(Any, None, StreamResponse)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._raise_allowed_methods": {
            "name": "_raise_allowed_methods",
            "location": 942,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourcesView.__init__": {
            "name": "__init__",
            "location": 948,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "List[AbstractResource]"
                ]
            }
        },
        "ResourcesView.__len__": {
            "name": "__len__",
            "location": 951,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourcesView.__iter__": {
            "name": "__iter__",
            "location": 954,
            "return": [
                "Iterator[AbstractResource]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourcesView.__contains__": {
            "name": "__contains__",
            "location": 957,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "object"
                ]
            }
        },
        "RoutesView.__init__": {
            "name": "__init__",
            "location": 962,
            "return": [],
            "arguments": {
                "self": [],
                "resources": [
                    "List[AbstractResource]"
                ]
            }
        },
        "RoutesView.__len__": {
            "name": "__len__",
            "location": 968,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutesView.__iter__": {
            "name": "__iter__",
            "location": 971,
            "return": [
                "Iterator[AbstractRoute]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutesView.__contains__": {
            "name": "__contains__",
            "location": 974,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "object"
                ]
            }
        },
        "UrlDispatcher.__init__": {
            "name": "__init__",
            "location": 982,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlDispatcher.__iter__": {
            "name": "__iter__",
            "location": 1003,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlDispatcher.__len__": {
            "name": "__len__",
            "location": 1006,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlDispatcher.__contains__": {
            "name": "__contains__",
            "location": 1009,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "object"
                ]
            }
        },
        "UrlDispatcher.__getitem__": {
            "name": "__getitem__",
            "location": 1012,
            "return": [
                "AbstractResource"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UrlDispatcher.resources": {
            "name": "resources",
            "location": 1015,
            "return": [
                "ResourcesView"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlDispatcher.routes": {
            "name": "routes",
            "location": 1018,
            "return": [
                "RoutesView"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlDispatcher.named_resources": {
            "name": "named_resources",
            "location": 1021,
            "return": [
                "Mapping[(str, AbstractResource)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlDispatcher.register_resource": {
            "name": "register_resource",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "AbstractResource"
                ]
            }
        },
        "UrlDispatcher.add_resource": {
            "name": "add_resource",
            "location": 1057,
            "return": [
                "Resource"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "UrlDispatcher.add_route": {
            "name": "add_route",
            "location": 1073,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "handler": [
                    "Union[(Handler, Type[AbstractView])]"
                ]
            }
        },
        "UrlDispatcher.add_static": {
            "name": "add_static",
            "location": 1085,
            "return": [
                "AbstractResource"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "path": [
                    "PathLike"
                ]
            }
        },
        "UrlDispatcher.add_head": {
            "name": "add_head",
            "location": 1119,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Handler"
                ]
            }
        },
        "UrlDispatcher.add_options": {
            "name": "add_options",
            "location": 1123,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Handler"
                ]
            }
        },
        "UrlDispatcher.add_get": {
            "name": "add_get",
            "location": 1127,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Handler"
                ]
            }
        },
        "UrlDispatcher.add_post": {
            "name": "add_post",
            "location": 1146,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Handler"
                ]
            }
        },
        "UrlDispatcher.add_put": {
            "name": "add_put",
            "location": 1150,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Handler"
                ]
            }
        },
        "UrlDispatcher.add_patch": {
            "name": "add_patch",
            "location": 1154,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Handler"
                ]
            }
        },
        "UrlDispatcher.add_delete": {
            "name": "add_delete",
            "location": 1158,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Handler"
                ]
            }
        },
        "UrlDispatcher.add_view": {
            "name": "add_view",
            "location": 1162,
            "return": [
                "AbstractRoute"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "handler": [
                    "Type[AbstractView]"
                ]
            }
        },
        "UrlDispatcher.freeze": {
            "name": "freeze",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlDispatcher.add_routes": {
            "name": "add_routes",
            "location": 1173,
            "return": [
                "List[AbstractRoute]"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "Iterable[AbstractRouteDef]"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/web_ws.py": {
        "WebSocketReady.__bool__": {
            "name": "__bool__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse._cancel_heartbeat": {
            "name": "_cancel_heartbeat",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse._reset_heartbeat": {
            "name": "_reset_heartbeat",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse._send_heartbeat": {
            "name": "_send_heartbeat",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse._pong_not_received": {
            "name": "_pong_not_received",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse._handshake": {
            "name": "_handshake",
            "location": 177,
            "return": [
                "Tuple[('CIMultiDict[str]', str, bool, bool)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ]
            }
        },
        "WebSocketResponse._pre_start": {
            "name": "_pre_start",
            "location": 262,
            "return": [
                "Tuple[(str, WebSocketWriter)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ]
            }
        },
        "WebSocketResponse._post_start": {
            "name": "_post_start",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ],
                "protocol": [
                    "str"
                ],
                "writer": [
                    "WebSocketWriter"
                ]
            }
        },
        "WebSocketResponse.can_prepare": {
            "name": "can_prepare",
            "location": 296,
            "return": [
                "WebSocketReady"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "BaseRequest"
                ]
            }
        },
        "WebSocketResponse.closed": {
            "name": "closed",
            "location": 307,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse.close_code": {
            "name": "close_code",
            "location": 311,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse.ws_protocol": {
            "name": "ws_protocol",
            "location": 315,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse.compress": {
            "name": "compress",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse.exception": {
            "name": "exception",
            "location": 322,
            "return": [
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse.__aiter__": {
            "name": "__aiter__",
            "location": 509,
            "return": [
                "'WebSocketResponse'"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse._cancel": {
            "name": "_cancel",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        }
    },
    "aiohttp-master/aiohttp/worker.py": {
        "GunicornWebWorker.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWebWorker.init_process": {
            "name": "init_process",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWebWorker.run": {
            "name": "run",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWebWorker._wait_next_notify": {
            "name": "_wait_next_notify",
            "location": 128,
            "return": [
                "'asyncio.Future[bool]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWebWorker._notify_waiter_done": {
            "name": "_notify_waiter_done",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "waiter": [
                    "Optional['asyncio.Future[bool]']"
                ]
            }
        },
        "GunicornWebWorker.init_signals": {
            "name": "init_signals",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWebWorker.handle_quit": {
            "name": "handle_quit",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int"
                ],
                "frame": [
                    "FrameType"
                ]
            }
        },
        "GunicornWebWorker.handle_abort": {
            "name": "handle_abort",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int"
                ],
                "frame": [
                    "FrameType"
                ]
            }
        },
        "GunicornWebWorker._create_ssl_context": {
            "name": "_create_ssl_context",
            "location": 205,
            "return": [
                "'SSLContext'"
            ],
            "arguments": {
                "cfg": [
                    "Any"
                ]
            }
        },
        "GunicornWebWorker._get_valid_log_format": {
            "name": "_get_valid_log_format",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source_format": [
                    "str"
                ]
            }
        },
        "GunicornUVLoopWebWorker.init_process": {
            "name": "init_process",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornTokioWebWorker.init_process": {
            "name": "init_process",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/aiohttp/__init__.py": {},
    "aiohttp-master/docs/conf.py": {},
    "aiohttp-master/examples/background_tasks.py": {
        "init": {
            "name": "init",
            "location": 60,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/client_auth.py": {},
    "aiohttp-master/examples/client_json.py": {},
    "aiohttp-master/examples/client_ws.py": {
        "start_client.stdin_callback": {
            "name": "stdin_callback",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/cli_app.py": {
        "init": {
            "name": "init",
            "location": 30,
            "return": [
                "web.Application"
            ],
            "arguments": {
                "argv": [
                    "Optional[Sequence[str]]"
                ]
            }
        }
    },
    "aiohttp-master/examples/curl.py": {},
    "aiohttp-master/examples/fake_server.py": {
        "FakeResolver.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fakes": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "FakeFacebook.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/examples/lowlevel_srv.py": {},
    "aiohttp-master/examples/server_simple.py": {},
    "aiohttp-master/examples/static_files.py": {},
    "aiohttp-master/examples/web_classview.py": {
        "init": {
            "name": "init",
            "location": 52,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/web_cookies.py": {
        "init": {
            "name": "init",
            "location": 37,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/web_rewrite_headers_middleware.py": {
        "init": {
            "name": "init",
            "location": 22,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/web_srv.py": {
        "init": {
            "name": "init",
            "location": 48,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/web_srv_route_deco.py": {
        "init": {
            "name": "init",
            "location": 54,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/web_srv_route_table.py": {
        "init": {
            "name": "init",
            "location": 48,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/examples/web_ws.py": {
        "init": {
            "name": "init",
            "location": 55,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/conftest.py": {
        "tls_certificate_authority": {
            "name": "tls_certificate_authority",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "tls_certificate": {
            "name": "tls_certificate",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "tls_certificate_authority": [
                    "Any"
                ]
            }
        },
        "ssl_ctx": {
            "name": "ssl_ctx",
            "location": 60,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {
                "tls_certificate": [
                    "Any"
                ]
            }
        },
        "client_ssl_ctx": {
            "name": "client_ssl_ctx",
            "location": 67,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {
                "tls_certificate_authority": [
                    "Any"
                ]
            }
        },
        "tls_ca_certificate_pem_path": {
            "name": "tls_ca_certificate_pem_path",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "tls_certificate_authority": [
                    "Any"
                ]
            }
        },
        "tls_certificate_pem_path": {
            "name": "tls_certificate_pem_path",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "tls_certificate": [
                    "Any"
                ]
            }
        },
        "tls_certificate_pem_bytes": {
            "name": "tls_certificate_pem_bytes",
            "location": 86,
            "return": [
                "bytes"
            ],
            "arguments": {
                "tls_certificate": [
                    "Any"
                ]
            }
        },
        "tls_certificate_fingerprint_sha256": {
            "name": "tls_certificate_fingerprint_sha256",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "tls_certificate_pem_bytes": [
                    "Any"
                ]
            }
        },
        "pipe_name": {
            "name": "pipe_name",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_mocked_conn": {
            "name": "create_mocked_conn",
            "location": 103,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "unix_sockname": {
            "name": "unix_sockname",
            "location": 114,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "Any"
                ],
                "tmp_path_factory": [
                    "Any"
                ]
            }
        },
        "selector_loop": {
            "name": "selector_loop",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_mocked_conn._proto_factory": {
            "name": "_proto_factory",
            "location": 104,
            "return": [],
            "arguments": {
                "conn_closing_result": []
            }
        },
        "unix_sockname.make_tmp_dir": {
            "name": "make_tmp_dir",
            "location": 144,
            "return": [],
            "arguments": {
                "base_tmp_dir": []
            }
        },
        "unix_sockname.assert_sock_fits": {
            "name": "assert_sock_fits",
            "location": 151,
            "return": [],
            "arguments": {
                "sock_path": []
            }
        }
    },
    "aiohttp-master/tests/test_base_protocol.py": {},
    "aiohttp-master/tests/test_circular_imports.py": {
        "_find_all_importables": {
            "name": "_find_all_importables",
            "location": 25,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "pkg": [
                    "ModuleType"
                ]
            }
        },
        "_discover_path_importables": {
            "name": "_discover_path_importables",
            "location": 39,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {
                "pkg_pth": [
                    "Path"
                ],
                "pkg_name": [
                    "str"
                ]
            }
        },
        "test_no_warnings": {
            "name": "test_no_warnings",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "import_path": [
                    "str"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_classbasedview.py": {
        "test_ctor": {
            "name": "test_ctor",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_client_connection.py": {
        "key": {
            "name": "key",
            "location": 11,
            "return": [
                "object"
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "connector": {
            "name": "connector",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "protocol": {
            "name": "protocol",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "test_ctor": {
            "name": "test_ctor",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_callbacks_on_close": {
            "name": "test_callbacks_on_close",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_callbacks_on_release": {
            "name": "test_callbacks_on_release",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_callbacks_exception": {
            "name": "test_callbacks_exception",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_del": {
            "name": "test_del",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_close": {
            "name": "test_close",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_release": {
            "name": "test_release",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_release_proto_should_close": {
            "name": "test_release_proto_should_close",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_release_released": {
            "name": "test_release_released",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "connector": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "test_callbacks_on_close.cb": {
            "name": "cb",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callbacks_on_release.cb": {
            "name": "cb",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callbacks_exception.cb1": {
            "name": "cb1",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callbacks_exception.cb2": {
            "name": "cb2",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_client_exceptions.py": {
        "TestClientResponseError.test_default_status": {
            "name": "test_default_status",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientResponseError.test_status": {
            "name": "test_status",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientResponseError.test_pickle": {
            "name": "test_pickle",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientResponseError.test_repr": {
            "name": "test_repr",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientResponseError.test_str": {
            "name": "test_str",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorError.test_ctor": {
            "name": "test_ctor",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorError.test_pickle": {
            "name": "test_pickle",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorError.test_repr": {
            "name": "test_repr",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorError.test_str": {
            "name": "test_str",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorCertificateError.test_ctor": {
            "name": "test_ctor",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorCertificateError.test_pickle": {
            "name": "test_pickle",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorCertificateError.test_repr": {
            "name": "test_repr",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientConnectorCertificateError.test_str": {
            "name": "test_str",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerDisconnectedError.test_ctor": {
            "name": "test_ctor",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerDisconnectedError.test_pickle": {
            "name": "test_pickle",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerDisconnectedError.test_repr": {
            "name": "test_repr",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerDisconnectedError.test_str": {
            "name": "test_str",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFingerprintMismatch.test_ctor": {
            "name": "test_ctor",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFingerprintMismatch.test_pickle": {
            "name": "test_pickle",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFingerprintMismatch.test_repr": {
            "name": "test_repr",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidURL.test_ctor": {
            "name": "test_ctor",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidURL.test_pickle": {
            "name": "test_pickle",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidURL.test_repr": {
            "name": "test_repr",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidURL.test_str": {
            "name": "test_str",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_client_fingerprint.py": {
        "test_fingerprint_sha256": {
            "name": "test_fingerprint_sha256",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fingerprint_sha1": {
            "name": "test_fingerprint_sha1",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fingerprint_md5": {
            "name": "test_fingerprint_md5",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fingerprint_check_no_ssl": {
            "name": "test_fingerprint_check_no_ssl",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_client_functional.py": {
        "here": {
            "name": "here",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "fname": {
            "name": "fname",
            "location": 32,
            "return": [],
            "arguments": {
                "here": [
                    "Any"
                ]
            }
        },
        "create_server_for_url_and_handler": {
            "name": "create_server_for_url_and_handler",
            "location": 2339,
            "return": [],
            "arguments": {
                "aiohttp_server": [
                    "Any"
                ],
                "tls_certificate_authority": [
                    "Any"
                ]
            }
        },
        "test_json_custom.dumps": {
            "name": "dumps",
            "location": 1603,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "create_server_for_url_and_handler.create": {
            "name": "create",
            "location": 2342,
            "return": [],
            "arguments": {
                "url": [
                    "URL"
                ],
                "srv": [
                    "Any"
                ]
            }
        },
        "test_error_in_performing_request.exception_handler": {
            "name": "exception_handler",
            "location": 2829,
            "return": [],
            "arguments": {
                "loop": [],
                "context": []
            }
        },
        "test_server_close_keepalive_connection.Proto.connection_made": {
            "name": "connection_made",
            "location": 2744,
            "return": [],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "test_server_close_keepalive_connection.Proto.data_received": {
            "name": "data_received",
            "location": 2748,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_server_close_keepalive_connection.Proto.connection_lost": {
            "name": "connection_lost",
            "location": 2760,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "test_handle_keepalive_on_closed_connection.Proto.connection_made": {
            "name": "connection_made",
            "location": 2785,
            "return": [],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "test_handle_keepalive_on_closed_connection.Proto.data_received": {
            "name": "data_received",
            "location": 2789,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_handle_keepalive_on_closed_connection.Proto.connection_lost": {
            "name": "connection_lost",
            "location": 2797,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "test_readline_error_on_conn_close.do_release": {
            "name": "do_release",
            "location": 743,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_client_proto.py": {},
    "aiohttp-master/tests/test_client_request.py": {
        "make_request": {
            "name": "make_request",
            "location": 27,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "buf": {
            "name": "buf",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "protocol": {
            "name": "protocol",
            "location": 46,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "transport": [
                    "Any"
                ]
            }
        },
        "transport": {
            "name": "transport",
            "location": 55,
            "return": [],
            "arguments": {
                "buf": [
                    "Any"
                ]
            }
        },
        "conn": {
            "name": "conn",
            "location": 72,
            "return": [],
            "arguments": {
                "transport": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ]
            }
        },
        "test_method1": {
            "name": "test_method1",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_method2": {
            "name": "test_method2",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_method3": {
            "name": "test_method3",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_method_invalid": {
            "name": "test_method_invalid",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_version_1_0": {
            "name": "test_version_1_0",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_version_default": {
            "name": "test_version_default",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_request_info": {
            "name": "test_request_info",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_request_info_with_fragment": {
            "name": "test_request_info_with_fragment",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_version_err": {
            "name": "test_version_err",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_keep_alive": {
            "name": "test_keep_alive",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_default_http": {
            "name": "test_host_port_default_http",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_default_https": {
            "name": "test_host_port_default_https",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_nondefault_http": {
            "name": "test_host_port_nondefault_http",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_nondefault_https": {
            "name": "test_host_port_nondefault_https",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_default_ws": {
            "name": "test_host_port_default_ws",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_default_wss": {
            "name": "test_host_port_default_wss",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_nondefault_ws": {
            "name": "test_host_port_nondefault_ws",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_nondefault_wss": {
            "name": "test_host_port_nondefault_wss",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_none_port": {
            "name": "test_host_port_none_port",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_port_err": {
            "name": "test_host_port_err",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_hostname_err": {
            "name": "test_hostname_err",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_host_first": {
            "name": "test_host_header_host_first",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_host_without_port": {
            "name": "test_host_header_host_without_port",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_host_with_default_port": {
            "name": "test_host_header_host_with_default_port",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_host_with_nondefault_port": {
            "name": "test_host_header_host_with_nondefault_port",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_host_idna_encode": {
            "name": "test_host_header_host_idna_encode",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_host_unicode": {
            "name": "test_host_header_host_unicode",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_explicit_host": {
            "name": "test_host_header_explicit_host",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_explicit_host_with_port": {
            "name": "test_host_header_explicit_host_with_port",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_ipv4": {
            "name": "test_host_header_ipv4",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_ipv6": {
            "name": "test_host_header_ipv6",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_ipv4_with_port": {
            "name": "test_host_header_ipv4_with_port",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_host_header_ipv6_with_port": {
            "name": "test_host_header_ipv6_with_port",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_default_headers_useragent": {
            "name": "test_default_headers_useragent",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_default_headers_useragent_custom": {
            "name": "test_default_headers_useragent_custom",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_skip_default_useragent_header": {
            "name": "test_skip_default_useragent_header",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_headers": {
            "name": "test_headers",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_headers_list": {
            "name": "test_headers_list",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_headers_default": {
            "name": "test_headers_default",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_invalid_url": {
            "name": "test_invalid_url",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_no_path": {
            "name": "test_no_path",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_ipv6_default_http_port": {
            "name": "test_ipv6_default_http_port",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_ipv6_default_https_port": {
            "name": "test_ipv6_default_https_port",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_ipv6_nondefault_http_port": {
            "name": "test_ipv6_nondefault_http_port",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_ipv6_nondefault_https_port": {
            "name": "test_ipv6_nondefault_https_port",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_basic_auth": {
            "name": "test_basic_auth",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_basic_auth_utf8": {
            "name": "test_basic_auth_utf8",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_basic_auth_tuple_forbidden": {
            "name": "test_basic_auth_tuple_forbidden",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_basic_auth_from_url": {
            "name": "test_basic_auth_from_url",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_basic_auth_from_url_overridden": {
            "name": "test_basic_auth_from_url_overridden",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_path_is_not_double_encoded1": {
            "name": "test_path_is_not_double_encoded1",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_path_is_not_double_encoded2": {
            "name": "test_path_is_not_double_encoded2",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_path_is_not_double_encoded3": {
            "name": "test_path_is_not_double_encoded3",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_path_safe_chars_preserved": {
            "name": "test_path_safe_chars_preserved",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_params_are_added_before_fragment1": {
            "name": "test_params_are_added_before_fragment1",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_params_are_added_before_fragment2": {
            "name": "test_params_are_added_before_fragment2",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_path_not_contain_fragment1": {
            "name": "test_path_not_contain_fragment1",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_path_not_contain_fragment2": {
            "name": "test_path_not_contain_fragment2",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_cookies": {
            "name": "test_cookies",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_cookies_is_quoted_with_special_characters": {
            "name": "test_cookies_is_quoted_with_special_characters",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_cookies_merge_with_headers": {
            "name": "test_cookies_merge_with_headers",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_query_multivalued_param": {
            "name": "test_query_multivalued_param",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_query_str_param": {
            "name": "test_query_str_param",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_query_bytes_param_raises": {
            "name": "test_query_bytes_param_raises",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_query_str_param_is_not_encoded": {
            "name": "test_query_str_param_is_not_encoded",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_params_update_path_and_url": {
            "name": "test_params_update_path_and_url",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_params_empty_path_and_url": {
            "name": "test_params_empty_path_and_url",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_gen_netloc_all": {
            "name": "test_gen_netloc_all",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_gen_netloc_no_port": {
            "name": "test_gen_netloc_no_port",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_terminate_with_closed_loop": {
            "name": "test_terminate_with_closed_loop",
            "location": 1103,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "conn": [
                    "Any"
                ]
            }
        },
        "test_terminate_without_writer": {
            "name": "test_terminate_without_writer",
            "location": 1124,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_bad_fingerprint": {
            "name": "test_bad_fingerprint",
            "location": 1184,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_insecure_fingerprint_md5": {
            "name": "test_insecure_fingerprint_md5",
            "location": 1189,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_insecure_fingerprint_sha1": {
            "name": "test_insecure_fingerprint_sha1",
            "location": 1194,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_loose_cookies_types": {
            "name": "test_loose_cookies_types",
            "location": 1199,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_gen_default_accept_encoding": {
            "name": "test_gen_default_accept_encoding",
            "location": 1227,
            "return": [
                "None"
            ],
            "arguments": {
                "has_brotli": [
                    "Any"
                ],
                "expected": [
                    "Any"
                ]
            }
        },
        "make_request.maker": {
            "name": "maker",
            "location": 30,
            "return": [],
            "arguments": {
                "method": [],
                "url": []
            }
        },
        "transport.write": {
            "name": "write",
            "location": 58,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "test_custom_response_class.CustomResponse.read": {
            "name": "read",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "decode": []
            }
        }
    },
    "aiohttp-master/tests/test_client_response.py": {
        "session": {
            "name": "session",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_del": {
            "name": "test_del",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ]
            }
        },
        "test_close": {
            "name": "test_close",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_wait_for_100_1": {
            "name": "test_wait_for_100_1",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_wait_for_100_2": {
            "name": "test_wait_for_100_2",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_repr_non_ascii_url": {
            "name": "test_repr_non_ascii_url",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_non_ascii_reason": {
            "name": "test_repr_non_ascii_reason",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_encoding_unknown": {
            "name": "test_get_encoding_unknown",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_raise_for_status_2xx": {
            "name": "test_raise_for_status_2xx",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_for_status_4xx": {
            "name": "test_raise_for_status_4xx",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_for_status_4xx_without_reason": {
            "name": "test_raise_for_status_4xx_without_reason",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resp_host": {
            "name": "test_resp_host",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_type": {
            "name": "test_content_type",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_type_no_header": {
            "name": "test_content_type_no_header",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_charset": {
            "name": "test_charset",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_charset_no_header": {
            "name": "test_charset_no_header",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_charset_no_charset": {
            "name": "test_charset_no_charset",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_disposition_full": {
            "name": "test_content_disposition_full",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_disposition_no_parameters": {
            "name": "test_content_disposition_no_parameters",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_disposition_no_header": {
            "name": "test_content_disposition_no_header",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_request_info": {
            "name": "test_response_request_info",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_info_in_exception": {
            "name": "test_request_info_in_exception",
            "location": 974,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_redirect_history_in_exception": {
            "name": "test_no_redirect_history_in_exception",
            "location": 995,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect_history_in_exception": {
            "name": "test_redirect_history_in_exception",
            "location": 1016,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_real_url": {
            "name": "test_response_real_url",
            "location": 1095,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_response_links_comma_separated": {
            "name": "test_response_links_comma_separated",
            "location": 1112,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_response_links_multiple_headers": {
            "name": "test_response_links_multiple_headers",
            "location": 1142,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_response_links_no_rel": {
            "name": "test_response_links_no_rel",
            "location": 1167,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_response_links_quoted": {
            "name": "test_response_links_quoted",
            "location": 1186,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_response_links_relative": {
            "name": "test_response_links_relative",
            "location": 1209,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_response_links_empty": {
            "name": "test_response_links_empty",
            "location": 1232,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_response_not_closed_after_get_ok": {
            "name": "test_response_not_closed_after_get_ok",
            "location": 1249,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_read_and_release_connection.side_effect": {
            "name": "side_effect",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "test_release_on_del.run": {
            "name": "run",
            "location": 261,
            "return": [],
            "arguments": {
                "conn": []
            }
        },
        "test_text.side_effect": {
            "name": "side_effect",
            "location": 357,
            "return": [],
            "arguments": {}
        },
        "test_text_bad_encoding.side_effect": {
            "name": "side_effect",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "test_text_custom_encoding.side_effect": {
            "name": "side_effect",
            "location": 414,
            "return": [],
            "arguments": {}
        },
        "test_text_detect_encoding.side_effect": {
            "name": "side_effect",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "test_text_detect_encoding_if_invalid_charset.side_effect": {
            "name": "side_effect",
            "location": 471,
            "return": [],
            "arguments": {}
        },
        "test_get_encoding_body_none.side_effect": {
            "name": "side_effect",
            "location": 500,
            "return": [],
            "arguments": {}
        },
        "test_text_after_read.side_effect": {
            "name": "side_effect",
            "location": 530,
            "return": [],
            "arguments": {}
        },
        "test_json.side_effect": {
            "name": "side_effect",
            "location": 557,
            "return": [],
            "arguments": {}
        },
        "test_json_extended_content_type.side_effect": {
            "name": "side_effect",
            "location": 584,
            "return": [],
            "arguments": {}
        },
        "test_json_custom_content_type.side_effect": {
            "name": "side_effect",
            "location": 613,
            "return": [],
            "arguments": {}
        },
        "test_json_custom_loader.custom": {
            "name": "custom",
            "location": 642,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "test_json_override_encoding.side_effect": {
            "name": "side_effect",
            "location": 702,
            "return": [],
            "arguments": {}
        },
        "test_response_read_triggers_callback.side_effect": {
            "name": "side_effect",
            "location": 1076,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_client_session.py": {
        "connector": {
            "name": "connector",
            "location": 26,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "create_mocked_conn": [
                    "Any"
                ]
            }
        },
        "create_session": {
            "name": "create_session",
            "location": 38,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 52,
            "return": [],
            "arguments": {
                "create_session": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "params": {
            "name": "params",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_http_GET": {
            "name": "test_http_GET",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_http_OPTIONS": {
            "name": "test_http_OPTIONS",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_http_HEAD": {
            "name": "test_http_HEAD",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_http_POST": {
            "name": "test_http_POST",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_http_PUT": {
            "name": "test_http_PUT",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_http_PATCH": {
            "name": "test_http_PATCH",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_http_DELETE": {
            "name": "test_http_DELETE",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_connector_loop": {
            "name": "test_connector_loop",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_detach": {
            "name": "test_detach",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "session": [
                    "Any"
                ]
            }
        },
        "test_proxy_str": {
            "name": "test_proxy_str",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "test_client_session_inheritance": {
            "name": "test_client_session_inheritance",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_tracing_url_params.reset_mocks": {
            "name": "reset_mocks",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_tracing_url_params.to_trace_urls": {
            "name": "to_trace_urls",
            "location": 636,
            "return": [
                "List[URL]"
            ],
            "arguments": {
                "mock_func": [
                    "mock.Mock"
                ]
            }
        },
        "test_request_tracing_url_params.to_url": {
            "name": "to_url",
            "location": 639,
            "return": [
                "URL"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_request_tracing_interpose_headers.MyClientRequest.__init__": {
            "name": "__init__",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_client_ws.py": {
        "key_data": {
            "name": "key_data",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "key": {
            "name": "key",
            "location": 24,
            "return": [],
            "arguments": {
                "key_data": [
                    "Any"
                ]
            }
        },
        "ws_key": {
            "name": "ws_key",
            "location": 29,
            "return": [],
            "arguments": {
                "key": [
                    "Any"
                ]
            }
        },
        "test_ws_connect_custom_response.CustomResponse.read": {
            "name": "read",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "decode": []
            }
        }
    },
    "aiohttp-master/tests/test_client_ws_functional.py": {},
    "aiohttp-master/tests/test_connector.py": {
        "key": {
            "name": "key",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "key2": {
            "name": "key2",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "ssl_key": {
            "name": "ssl_key",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "unix_server": {
            "name": "unix_server",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "unix_sockname": [
                    "Any"
                ]
            }
        },
        "named_pipe_server": {
            "name": "named_pipe_server",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "proactor_loop": [
                    "Any"
                ],
                "pipe_name": [
                    "Any"
                ]
            }
        },
        "create_mocked_conn": {
            "name": "create_mocked_conn",
            "location": 82,
            "return": [],
            "arguments": {
                "conn_closing_result": [
                    "Optional[Any]"
                ]
            }
        },
        "test_connection_del": {
            "name": "test_connection_del",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_connection_del_loop_debug": {
            "name": "test_connection_del_loop_debug",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_connection_del_loop_closed": {
            "name": "test_connection_del_loop_closed",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_del_with_closed_loop": {
            "name": "test_del_with_closed_loop",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "dns_response": {
            "name": "dns_response",
            "location": 693,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "dns_response_error": {
            "name": "dns_response_error",
            "location": 780,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_tcp_connector_cancel_dns_error_captured.exception_handler": {
            "name": "exception_handler",
            "location": 795,
            "return": [],
            "arguments": {
                "loop": [],
                "context": []
            }
        },
        "test_connect_with_capacity_release_waiters.check_with_exc": {
            "name": "check_with_exc",
            "location": 1620,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "TestDNSCacheTable.dns_cache_table": {
            "name": "dns_cache_table",
            "location": 2147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDNSCacheTable.test_next_addrs_basic": {
            "name": "test_next_addrs_basic",
            "location": 2150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns_cache_table": [
                    "Any"
                ]
            }
        },
        "TestDNSCacheTable.test_remove": {
            "name": "test_remove",
            "location": 2161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns_cache_table": [
                    "Any"
                ]
            }
        },
        "TestDNSCacheTable.test_clear": {
            "name": "test_clear",
            "location": 2167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns_cache_table": [
                    "Any"
                ]
            }
        },
        "TestDNSCacheTable.test_not_expired_ttl_None": {
            "name": "test_not_expired_ttl_None",
            "location": 2173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns_cache_table": [
                    "Any"
                ]
            }
        },
        "TestDNSCacheTable.test_not_expired_ttl": {
            "name": "test_not_expired_ttl",
            "location": 2177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDNSCacheTable.test_next_addrs": {
            "name": "test_next_addrs",
            "location": 2188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns_cache_table": [
                    "Any"
                ]
            }
        },
        "TestDNSCacheTable.test_next_addrs_single": {
            "name": "test_next_addrs_single",
            "location": 2205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns_cache_table": [
                    "Any"
                ]
            }
        },
        "test_tcp_connector_multiple_hosts_errors.create_connection.get_extra_info": {
            "name": "get_extra_info",
            "location": 643,
            "return": [],
            "arguments": {
                "param": []
            }
        }
    },
    "aiohttp-master/tests/test_cookiejar.py": {
        "cookies_to_send": {
            "name": "cookies_to_send",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "cookies_to_send_with_expired": {
            "name": "cookies_to_send_with_expired",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "cookies_to_receive": {
            "name": "cookies_to_receive",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_date_parsing": {
            "name": "test_date_parsing",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_domain_matching": {
            "name": "test_domain_matching",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_matching": {
            "name": "test_path_matching",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCookieJarBase.setUp": {
            "name": "setUp",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarBase.tearDown": {
            "name": "tearDown",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarBase.request_reply_with_same_url": {
            "name": "request_reply_with_same_url",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "Any"
                ]
            }
        },
        "TestCookieJarSafe.setUp": {
            "name": "setUp",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.timed_request": {
            "name": "timed_request",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "Any"
                ],
                "update_time": [
                    "Any"
                ],
                "send_time": [
                    "Any"
                ]
            }
        },
        "TestCookieJarSafe.test_domain_filter_same_host": {
            "name": "test_domain_filter_same_host",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_domain_filter_same_host_and_subdomain": {
            "name": "test_domain_filter_same_host_and_subdomain",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_domain_filter_same_host_diff_subdomain": {
            "name": "test_domain_filter_same_host_diff_subdomain",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_domain_filter_diff_host": {
            "name": "test_domain_filter_diff_host",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_domain_filter_host_only": {
            "name": "test_domain_filter_host_only",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_secure_filter": {
            "name": "test_secure_filter",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_filter_root": {
            "name": "test_path_filter_root",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_filter_folder": {
            "name": "test_path_filter_folder",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_filter_file": {
            "name": "test_path_filter_file",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_filter_subfolder": {
            "name": "test_path_filter_subfolder",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_filter_subsubfolder": {
            "name": "test_path_filter_subsubfolder",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_filter_different_folder": {
            "name": "test_path_filter_different_folder",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_value": {
            "name": "test_path_value",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_expires": {
            "name": "test_expires",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_max_age": {
            "name": "test_max_age",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_invalid_values": {
            "name": "test_invalid_values",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_cookie_not_expired_when_added_after_removal": {
            "name": "test_cookie_not_expired_when_added_after_removal",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCookieJarSafe.test_path_filter_diff_folder_same_name": {
            "name": "test_path_filter_diff_folder_same_name",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_flowcontrol_streams.py": {
        "protocol": {
            "name": "protocol",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "stream": {
            "name": "stream",
            "location": 16,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ]
            }
        },
        "buffer": {
            "name": "buffer",
            "location": 23,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ]
            }
        },
        "TestFlowControlDataQueue.test_feed_pause": {
            "name": "test_feed_pause",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_formdata.py": {
        "buf": {
            "name": "buf",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "writer": {
            "name": "writer",
            "location": 16,
            "return": [],
            "arguments": {
                "buf": [
                    "Any"
                ]
            }
        },
        "test_formdata_multipart": {
            "name": "test_formdata_multipart",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": [
                    "Any"
                ],
                "writer": [
                    "Any"
                ]
            }
        },
        "test_invalid_formdata_payload": {
            "name": "test_invalid_formdata_payload",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_formdata_params": {
            "name": "test_invalid_formdata_params",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_formdata_params2": {
            "name": "test_invalid_formdata_params2",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_formdata_content_type": {
            "name": "test_invalid_formdata_content_type",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_formdata_filename": {
            "name": "test_invalid_formdata_filename",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_formdata_content_transfer_encoding": {
            "name": "test_invalid_formdata_content_transfer_encoding",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_helpers.py": {
        "test_parse_mimetype": {
            "name": "test_parse_mimetype",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "mimetype": [],
                "expected": []
            }
        },
        "test_guess_filename_with_file_object": {
            "name": "test_guess_filename_with_file_object",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_guess_filename_with_path": {
            "name": "test_guess_filename_with_path",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_guess_filename_with_default": {
            "name": "test_guess_filename_with_default",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth1": {
            "name": "test_basic_auth1",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth2": {
            "name": "test_basic_auth2",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_with_auth_colon_in_login": {
            "name": "test_basic_with_auth_colon_in_login",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth3": {
            "name": "test_basic_auth3",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth4": {
            "name": "test_basic_auth4",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_decode": {
            "name": "test_basic_auth_decode",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "header": []
            }
        },
        "test_basic_auth_invalid": {
            "name": "test_basic_auth_invalid",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_decode_not_basic": {
            "name": "test_basic_auth_decode_not_basic",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_decode_bad_base64": {
            "name": "test_basic_auth_decode_bad_base64",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_decode_illegal_chars_base64": {
            "name": "test_basic_auth_decode_illegal_chars_base64",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "header": []
            }
        },
        "test_basic_auth_decode_invalid_credentials": {
            "name": "test_basic_auth_decode_invalid_credentials",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_decode_blank_username": {
            "name": "test_basic_auth_decode_blank_username",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [],
                "expected_auth": []
            }
        },
        "test_basic_auth_from_url": {
            "name": "test_basic_auth_from_url",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_from_not_url": {
            "name": "test_basic_auth_from_not_url",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_ip_address": {
            "name": "test_is_ip_address",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_ip_address_bytes": {
            "name": "test_is_ip_address_bytes",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv4_addresses": {
            "name": "test_ipv4_addresses",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv6_addresses": {
            "name": "test_ipv6_addresses",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_host_addresses": {
            "name": "test_host_addresses",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_ip_address_invalid_type": {
            "name": "test_is_ip_address_invalid_type",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_handle": {
            "name": "test_timeout_handle",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        },
        "test_when_timeout_smaller_second": {
            "name": "test_when_timeout_smaller_second",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        },
        "test_when_timeout_smaller_second_with_low_threshold": {
            "name": "test_when_timeout_smaller_second_with_low_threshold",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        },
        "test_timeout_handle_cb_exc": {
            "name": "test_timeout_handle_cb_exc",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        },
        "test_timer_context_not_cancelled": {
            "name": "test_timer_context_not_cancelled",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timer_context_no_task": {
            "name": "test_timer_context_no_task",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        },
        "test_ceil_call_later": {
            "name": "test_ceil_call_later",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ceil_call_later_with_small_threshold": {
            "name": "test_ceil_call_later_with_small_threshold",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ceil_call_later_no_timeout": {
            "name": "test_ceil_call_later_no_timeout",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_disposition": {
            "name": "test_content_disposition",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "result": []
            }
        },
        "test_content_disposition_bad_type": {
            "name": "test_content_disposition_bad_type",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_content_disposition_bad_param": {
            "name": "test_set_content_disposition_bad_param",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proxies_from_env": {
            "name": "test_proxies_from_env",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "url_input": [],
                "expected_scheme": []
            }
        },
        "test_proxies_from_env_skipped": {
            "name": "test_proxies_from_env_skipped",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "url_input": [],
                "expected_scheme": []
            }
        },
        "test_proxies_from_env_http_with_auth": {
            "name": "test_proxies_from_env_http_with_auth",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "url_input": [],
                "expected_scheme": []
            }
        },
        "proxy_env_vars": {
            "name": "proxy_env_vars",
            "location": 594,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "request": []
            }
        },
        "test_get_env_proxy_for_url_negative": {
            "name": "test_get_env_proxy_for_url_negative",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "url_input": [],
                "expected_err_msg": []
            }
        },
        "test_get_env_proxy_for_url": {
            "name": "test_get_env_proxy_for_url",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_env_vars": [],
                "url_input": []
            }
        },
        "test_is_expected_content_type_json_match_exact": {
            "name": "test_is_expected_content_type_json_match_exact",
            "location": 788,
            "return": [],
            "arguments": {}
        },
        "test_is_expected_content_type_json_match_partially": {
            "name": "test_is_expected_content_type_json_match_partially",
            "location": 796,
            "return": [],
            "arguments": {}
        },
        "test_is_expected_content_type_non_application_json_suffix": {
            "name": "test_is_expected_content_type_non_application_json_suffix",
            "location": 804,
            "return": [],
            "arguments": {}
        },
        "test_is_expected_content_type_non_application_json_private_suffix": {
            "name": "test_is_expected_content_type_non_application_json_private_suffix",
            "location": 812,
            "return": [],
            "arguments": {}
        },
        "test_is_expected_content_type_json_non_lowercase": {
            "name": "test_is_expected_content_type_json_non_lowercase",
            "location": 820,
            "return": [],
            "arguments": {}
        },
        "test_is_expected_content_type_json_trailing_chars": {
            "name": "test_is_expected_content_type_json_trailing_chars",
            "location": 829,
            "return": [],
            "arguments": {}
        },
        "test_is_expected_content_type_non_json_match_exact": {
            "name": "test_is_expected_content_type_non_json_match_exact",
            "location": 837,
            "return": [],
            "arguments": {}
        },
        "test_is_expected_content_type_non_json_not_match": {
            "name": "test_is_expected_content_type_non_json_not_match",
            "location": 845,
            "return": [],
            "arguments": {}
        },
        "test_cookies_mixin": {
            "name": "test_cookies_mixin",
            "location": 859,
            "return": [],
            "arguments": {}
        },
        "test_cookies_mixin_path": {
            "name": "test_cookies_mixin_path",
            "location": 888,
            "return": [],
            "arguments": {}
        },
        "test_sutonse_cookie__issue_del_cookie": {
            "name": "test_sutonse_cookie__issue_del_cookie",
            "location": 922,
            "return": [],
            "arguments": {}
        },
        "test_cookie_set_after_del": {
            "name": "test_cookie_set_after_del",
            "location": 936,
            "return": [],
            "arguments": {}
        },
        "test_populate_with_cookies": {
            "name": "test_populate_with_cookies",
            "location": 946,
            "return": [],
            "arguments": {}
        },
        "test_parse_http_date": {
            "name": "test_parse_http_date",
            "location": 976,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "ReifyMixin.test_reify": {
            "name": "test_reify",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify_class": {
            "name": "test_reify_class",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify_assignment": {
            "name": "test_reify_assignment",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_inheritance": {
            "name": "test_inheritance",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_getitem": {
            "name": "test_getitem",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_getitem_not_found": {
            "name": "test_getitem_not_found",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_get": {
            "name": "test_get",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_get_default": {
            "name": "test_get_default",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_get_non_default": {
            "name": "test_get_non_default",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_len": {
            "name": "test_len",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_iter": {
            "name": "test_iter",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_contains": {
            "name": "test_contains",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_bool": {
            "name": "test_bool",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainMapProxy.test_repr": {
            "name": "test_repr",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify.A.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify.A.prop": {
            "name": "prop",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify_class.A.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify_class.A.prop": {
            "name": "prop",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify_assignment.A.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReifyMixin.test_reify_assignment.A.prop": {
            "name": "prop",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_http_exceptions.py": {
        "TestHttpProcessingError.test_ctor": {
            "name": "test_ctor",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpProcessingError.test_pickle": {
            "name": "test_pickle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpProcessingError.test_str": {
            "name": "test_str",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpProcessingError.test_repr": {
            "name": "test_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadHttpMessage.test_ctor": {
            "name": "test_ctor",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadHttpMessage.test_pickle": {
            "name": "test_pickle",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadHttpMessage.test_str": {
            "name": "test_str",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadHttpMessage.test_repr": {
            "name": "test_repr",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineTooLong.test_ctor": {
            "name": "test_ctor",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineTooLong.test_pickle": {
            "name": "test_pickle",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineTooLong.test_str": {
            "name": "test_str",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineTooLong.test_repr": {
            "name": "test_repr",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidHeader.test_ctor": {
            "name": "test_ctor",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidHeader.test_pickle": {
            "name": "test_pickle",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidHeader.test_str": {
            "name": "test_str",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidHeader.test_repr": {
            "name": "test_repr",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadStatusLine.test_ctor": {
            "name": "test_ctor",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadStatusLine.test_ctor2": {
            "name": "test_ctor2",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadStatusLine.test_pickle": {
            "name": "test_pickle",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_http_parser.py": {
        "protocol": {
            "name": "protocol",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "_gen_ids": {
            "name": "_gen_ids",
            "location": 46,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "parsers": [
                    "List[Any]"
                ]
            }
        },
        "parser": {
            "name": "parser",
            "location": 54,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "request_cls": {
            "name": "request_cls",
            "location": 66,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "response": {
            "name": "response",
            "location": 72,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "response_cls": {
            "name": "response_cls",
            "location": 84,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "stream": {
            "name": "stream",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_c_parser_loaded": {
            "name": "test_c_parser_loaded",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_parse_headers": {
            "name": "test_parse_headers",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse": {
            "name": "test_parse",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_delayed": {
            "name": "test_parse_delayed",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_headers_multi_feed": {
            "name": "test_headers_multi_feed",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_headers_split_field": {
            "name": "test_headers_split_field",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_headers_multi": {
            "name": "test_parse_headers_multi",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_default_1_0": {
            "name": "test_conn_default_1_0",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_default_1_1": {
            "name": "test_conn_default_1_1",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_close": {
            "name": "test_conn_close",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_close_1_0": {
            "name": "test_conn_close_1_0",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_keep_alive_1_0": {
            "name": "test_conn_keep_alive_1_0",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_keep_alive_1_1": {
            "name": "test_conn_keep_alive_1_1",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_other_1_0": {
            "name": "test_conn_other_1_0",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_other_1_1": {
            "name": "test_conn_other_1_1",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_request_chunked": {
            "name": "test_request_chunked",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_request_te_chunked_with_content_length": {
            "name": "test_request_te_chunked_with_content_length",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_request_te_chunked123": {
            "name": "test_request_te_chunked123",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_conn_upgrade": {
            "name": "test_conn_upgrade",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_compression_empty": {
            "name": "test_compression_empty",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_compression_deflate": {
            "name": "test_compression_deflate",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_compression_gzip": {
            "name": "test_compression_gzip",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_compression_brotli": {
            "name": "test_compression_brotli",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_compression_unknown": {
            "name": "test_compression_unknown",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_url_connect": {
            "name": "test_url_connect",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_headers_connect": {
            "name": "test_headers_connect",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_url_absolute": {
            "name": "test_url_absolute",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_headers_old_websocket_key1": {
            "name": "test_headers_old_websocket_key1",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_headers_content_length_err_1": {
            "name": "test_headers_content_length_err_1",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_headers_content_length_err_2": {
            "name": "test_headers_content_length_err_2",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_invalid_header": {
            "name": "test_invalid_header",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_invalid_name": {
            "name": "test_invalid_name",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_max_header_field_size": {
            "name": "test_max_header_field_size",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "size": [
                    "Any"
                ]
            }
        },
        "test_max_header_field_size_under_limit": {
            "name": "test_max_header_field_size_under_limit",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_max_header_value_size": {
            "name": "test_max_header_value_size",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "size": [
                    "Any"
                ]
            }
        },
        "test_max_header_value_size_under_limit": {
            "name": "test_max_header_value_size_under_limit",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_max_header_value_size_continuation": {
            "name": "test_max_header_value_size_continuation",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "size": [
                    "Any"
                ]
            }
        },
        "test_max_header_value_size_continuation_under_limit": {
            "name": "test_max_header_value_size_continuation_under_limit",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_parser": {
            "name": "test_http_request_parser",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_bad_status_line": {
            "name": "test_http_request_bad_status_line",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_upgrade": {
            "name": "test_http_request_upgrade",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_parser_utf8": {
            "name": "test_http_request_parser_utf8",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_parser_non_utf8": {
            "name": "test_http_request_parser_non_utf8",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_parser_two_slashes": {
            "name": "test_http_request_parser_two_slashes",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_parser_bad_method": {
            "name": "test_http_request_parser_bad_method",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_parser_bad_version": {
            "name": "test_http_request_parser_bad_version",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_max_status_line": {
            "name": "test_http_request_max_status_line",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "size": [
                    "Any"
                ]
            }
        },
        "test_http_request_max_status_line_under_limit": {
            "name": "test_http_request_max_status_line_under_limit",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_utf8": {
            "name": "test_http_response_parser_utf8",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_bad_status_line_too_long": {
            "name": "test_http_response_parser_bad_status_line_too_long",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ],
                "size": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_status_line_under_limit": {
            "name": "test_http_response_parser_status_line_under_limit",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_bad_version": {
            "name": "test_http_response_parser_bad_version",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_no_reason": {
            "name": "test_http_response_parser_no_reason",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_bad": {
            "name": "test_http_response_parser_bad",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_code_under_100": {
            "name": "test_http_response_parser_code_under_100",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_code_above_999": {
            "name": "test_http_response_parser_code_above_999",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_response_parser_code_not_int": {
            "name": "test_http_response_parser_code_not_int",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_http_request_chunked_payload": {
            "name": "test_http_request_chunked_payload",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_chunked_payload_and_next_message": {
            "name": "test_http_request_chunked_payload_and_next_message",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_http_request_chunked_payload_chunks": {
            "name": "test_http_request_chunked_payload_chunks",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_chunked_payload_chunk_extension": {
            "name": "test_parse_chunked_payload_chunk_extension",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "_test_parse_no_length_or_te_on_post": {
            "name": "_test_parse_no_length_or_te_on_post",
            "location": 774,
            "return": [],
            "arguments": {
                "loop": [],
                "protocol": [],
                "request_cls": []
            }
        },
        "test_parse_payload_response_without_body": {
            "name": "test_parse_payload_response_without_body",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "response_cls": [
                    "Any"
                ]
            }
        },
        "test_parse_length_payload": {
            "name": "test_parse_length_payload",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "test_parse_no_length_payload": {
            "name": "test_parse_no_length_payload",
            "location": 805,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_partial_url": {
            "name": "test_partial_url",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_url_parse_non_strict_mode": {
            "name": "test_url_parse_non_strict_mode",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_uri_percent_encoded": {
            "name": "test_parse_uri_percent_encoded",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "uri": [
                    "Any"
                ],
                "path": [
                    "Any"
                ],
                "query": [
                    "Any"
                ],
                "fragment": [
                    "Any"
                ]
            }
        },
        "test_parse_uri_utf8": {
            "name": "test_parse_uri_utf8",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_uri_utf8_percent_encoded": {
            "name": "test_parse_uri_utf8_percent_encoded",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_bad_method_for_c_parser_raises": {
            "name": "test_parse_bad_method_for_c_parser_raises",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_http_writer.py": {
        "buf": {
            "name": "buf",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "transport": {
            "name": "transport",
            "location": 20,
            "return": [],
            "arguments": {
                "buf": [
                    "Any"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 32,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "transport": [
                    "Any"
                ]
            }
        },
        "test_payloadwriter_properties": {
            "name": "test_payloadwriter_properties",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "transport": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "transport.write": {
            "name": "write",
            "location": 23,
            "return": [],
            "arguments": {
                "chunk": []
            }
        }
    },
    "aiohttp-master/tests/test_locks.py": {},
    "aiohttp-master/tests/test_loop.py": {
        "test_default_loop": {
            "name": "test_default_loop",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_setup_loop_non_main_thread": {
            "name": "test_setup_loop_non_main_thread",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCase.test_default_loop": {
            "name": "test_default_loop",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_setup_loop_non_main_thread.target": {
            "name": "target",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_multipart.py": {
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "metafunc": [
                    "Any"
                ]
            }
        },
        "buf": {
            "name": "buf",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "stream": {
            "name": "stream",
            "location": 40,
            "return": [],
            "arguments": {
                "buf": [
                    "Any"
                ]
            }
        },
        "writer": {
            "name": "writer",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_writer_serialize_with_content_encoding_unknown": {
            "name": "test_writer_serialize_with_content_encoding_unknown",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ],
                "writer": [
                    "Any"
                ]
            }
        },
        "test_writer_content_transfer_encoding_unknown": {
            "name": "test_writer_content_transfer_encoding_unknown",
            "location": 1199,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": [
                    "Any"
                ],
                "stream": [
                    "Any"
                ],
                "writer": [
                    "Any"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Any"
                ],
                "content": [
                    "Any"
                ]
            }
        },
        "Stream.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "Stream.at_eof": {
            "name": "at_eof",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stream.unread_data": {
            "name": "unread_data",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "StreamWithShortenRead.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "TestMultipartResponseWrapper.test_at_eof": {
            "name": "test_at_eof",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartReader.test_from_response": {
            "name": "test_from_response",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newline": [
                    "Any"
                ]
            }
        },
        "TestMultipartReader.test_bad_boundary": {
            "name": "test_bad_boundary",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartReader.test_dispatch": {
            "name": "test_dispatch",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newline": [
                    "Any"
                ]
            }
        },
        "TestMultipartReader.test_dispatch_bodypart": {
            "name": "test_dispatch_bodypart",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newline": [
                    "Any"
                ]
            }
        },
        "TestMultipartReader.test_dispatch_multipart": {
            "name": "test_dispatch_multipart",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newline": [
                    "Any"
                ]
            }
        },
        "TestMultipartReader.test_dispatch_custom_multipart_reader": {
            "name": "test_dispatch_custom_multipart_reader",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newline": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_default_subtype": {
            "name": "test_default_subtype",
            "location": 1207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_unquoted_boundary": {
            "name": "test_unquoted_boundary",
            "location": 1213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartWriter.test_quoted_boundary": {
            "name": "test_quoted_boundary",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartWriter.test_bad_boundary": {
            "name": "test_bad_boundary",
            "location": 1223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartWriter.test_default_headers": {
            "name": "test_default_headers",
            "location": 1231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_iter_parts": {
            "name": "test_iter_parts",
            "location": 1235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_append": {
            "name": "test_append",
            "location": 1241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_append_with_headers": {
            "name": "test_append_with_headers",
            "location": 1247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_append_json": {
            "name": "test_append_json",
            "location": 1253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_append_part": {
            "name": "test_append_part",
            "location": 1259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_append_json_overrides_content_type": {
            "name": "test_append_json_overrides_content_type",
            "location": 1266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_append_form": {
            "name": "test_append_form",
            "location": 1272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_append_multipart": {
            "name": "test_append_multipart",
            "location": 1278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "Any"
                ]
            }
        },
        "TestMultipartWriter.test_with": {
            "name": "test_with",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartWriter.test_append_int_not_allowed": {
            "name": "test_append_int_not_allowed",
            "location": 1293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartWriter.test_append_float_not_allowed": {
            "name": "test_append_float_not_allowed",
            "location": 1298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipartWriter.test_append_none_not_allowed": {
            "name": "test_append_none_not_allowed",
            "location": 1303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartReader.test_read_incomplete_chunk.prepare": {
            "name": "prepare",
            "location": 168,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "TestPartReader.test_read_boundary_with_incomplete_chunk.prepare": {
            "name": "prepare",
            "location": 217,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "aiohttp-master/tests/test_multipart_helpers.py": {
        "TestParseContentDisposition.test_parse_empty": {
            "name": "test_parse_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_inlonly": {
            "name": "test_inlonly",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_inlonlyquoted": {
            "name": "test_inlonlyquoted",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_semicolon": {
            "name": "test_semicolon",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_inlwithasciifilename": {
            "name": "test_inlwithasciifilename",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_inlwithfnattach": {
            "name": "test_inlwithfnattach",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attonly": {
            "name": "test_attonly",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attonlyquoted": {
            "name": "test_attonlyquoted",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attonlyucase": {
            "name": "test_attonlyucase",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilename": {
            "name": "test_attwithasciifilename",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_inlwithasciifilenamepdf": {
            "name": "test_inlwithasciifilenamepdf",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilename25": {
            "name": "test_attwithasciifilename25",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilename35": {
            "name": "test_attwithasciifilename35",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifnescapedchar": {
            "name": "test_attwithasciifnescapedchar",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifnescapedquote": {
            "name": "test_attwithasciifnescapedquote",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithquotedsemicolon": {
            "name": "test_attwithquotedsemicolon",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfilenameandextparam": {
            "name": "test_attwithfilenameandextparam",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfilenameandextparamescaped": {
            "name": "test_attwithfilenameandextparamescaped",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilenameucase": {
            "name": "test_attwithasciifilenameucase",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilenamenq": {
            "name": "test_attwithasciifilenamenq",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithtokfncommanq": {
            "name": "test_attwithtokfncommanq",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilenamenqs": {
            "name": "test_attwithasciifilenamenqs",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attemptyparam": {
            "name": "test_attemptyparam",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilenamenqws": {
            "name": "test_attwithasciifilenamenqws",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfntokensq": {
            "name": "test_attwithfntokensq",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithisofnplain": {
            "name": "test_attwithisofnplain",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithutf8fnplain": {
            "name": "test_attwithutf8fnplain",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfnrawpctenca": {
            "name": "test_attwithfnrawpctenca",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfnusingpct": {
            "name": "test_attwithfnusingpct",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfnrawpctencaq": {
            "name": "test_attwithfnrawpctencaq",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithnamepct": {
            "name": "test_attwithnamepct",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfilenamepctandiso": {
            "name": "test_attwithfilenamepctandiso",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfnrawpctenclong": {
            "name": "test_attwithfnrawpctenclong",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithasciifilenamews1": {
            "name": "test_attwithasciifilenamews1",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwith2filenames": {
            "name": "test_attwith2filenames",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfnbrokentoken": {
            "name": "test_attfnbrokentoken",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfnbrokentokeniso": {
            "name": "test_attfnbrokentokeniso",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfnbrokentokenutf": {
            "name": "test_attfnbrokentokenutf",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmissingdisposition": {
            "name": "test_attmissingdisposition",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmissingdisposition2": {
            "name": "test_attmissingdisposition2",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmissingdisposition3": {
            "name": "test_attmissingdisposition3",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmissingdisposition4": {
            "name": "test_attmissingdisposition4",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_emptydisposition": {
            "name": "test_emptydisposition",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_doublecolon": {
            "name": "test_doublecolon",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attandinline": {
            "name": "test_attandinline",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attandinline2": {
            "name": "test_attandinline2",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attbrokenquotedfn": {
            "name": "test_attbrokenquotedfn",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attbrokenquotedfn2": {
            "name": "test_attbrokenquotedfn2",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attbrokenquotedfn3": {
            "name": "test_attbrokenquotedfn3",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmultinstances": {
            "name": "test_attmultinstances",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmissingdelim": {
            "name": "test_attmissingdelim",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmissingdelim2": {
            "name": "test_attmissingdelim2",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmissingdelim3": {
            "name": "test_attmissingdelim3",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attreversed": {
            "name": "test_attreversed",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attconfusedparam": {
            "name": "test_attconfusedparam",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attabspath": {
            "name": "test_attabspath",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attabspathwin": {
            "name": "test_attabspathwin",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attcdate": {
            "name": "test_attcdate",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attmdate": {
            "name": "test_attmdate",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_dispext": {
            "name": "test_dispext",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_dispextbadfn": {
            "name": "test_dispextbadfn",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithisofn2231iso": {
            "name": "test_attwithisofn2231iso",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231utf8": {
            "name": "test_attwithfn2231utf8",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231noc": {
            "name": "test_attwithfn2231noc",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231utf8comp": {
            "name": "test_attwithfn2231utf8comp",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231utf8_bad": {
            "name": "test_attwithfn2231utf8_bad",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231iso_bad": {
            "name": "test_attwithfn2231iso_bad",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231ws1": {
            "name": "test_attwithfn2231ws1",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231ws2": {
            "name": "test_attwithfn2231ws2",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231ws3": {
            "name": "test_attwithfn2231ws3",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231quot": {
            "name": "test_attwithfn2231quot",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231quot2": {
            "name": "test_attwithfn2231quot2",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231singleqmissing": {
            "name": "test_attwithfn2231singleqmissing",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231nbadpct1": {
            "name": "test_attwithfn2231nbadpct1",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231nbadpct2": {
            "name": "test_attwithfn2231nbadpct2",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231dpct": {
            "name": "test_attwithfn2231dpct",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attwithfn2231abspathdisguised": {
            "name": "test_attwithfn2231abspathdisguised",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfncont": {
            "name": "test_attfncont",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfncontqs": {
            "name": "test_attfncontqs",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfncontenc": {
            "name": "test_attfncontenc",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfncontlz": {
            "name": "test_attfncontlz",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfncontnc": {
            "name": "test_attfncontnc",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfnconts1": {
            "name": "test_attfnconts1",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfncontord": {
            "name": "test_attfncontord",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfnboth": {
            "name": "test_attfnboth",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfnboth2": {
            "name": "test_attfnboth2",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attfnboth3": {
            "name": "test_attfnboth3",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attnewandfn": {
            "name": "test_attnewandfn",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attrfc2047token": {
            "name": "test_attrfc2047token",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_attrfc2047quoted": {
            "name": "test_attrfc2047quoted",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseContentDisposition.test_bad_continuous_param": {
            "name": "test_bad_continuous_param",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_no_filename": {
            "name": "test_no_filename",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_filename": {
            "name": "test_filename",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_filename_ext": {
            "name": "test_filename_ext",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfncont": {
            "name": "test_attfncont",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfncontqs": {
            "name": "test_attfncontqs",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfncontenc": {
            "name": "test_attfncontenc",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfncontlz": {
            "name": "test_attfncontlz",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfncontnc": {
            "name": "test_attfncontnc",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfnconts1": {
            "name": "test_attfnconts1",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfnboth": {
            "name": "test_attfnboth",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attfnboth3": {
            "name": "test_attfnboth3",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDispositionFilename.test_attrfc2047quoted": {
            "name": "test_attrfc2047quoted",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_payload.py": {
        "registry": {
            "name": "registry",
            "location": 11,
            "return": [
                "Iterator[payload.PayloadRegistry]"
            ],
            "arguments": {}
        },
        "test_register_type": {
            "name": "test_register_type",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "Any"
                ]
            }
        },
        "test_register_unsupported_order": {
            "name": "test_register_unsupported_order",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "Any"
                ]
            }
        },
        "test_payload_ctor": {
            "name": "test_payload_ctor",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_payload_content_type": {
            "name": "test_payload_content_type",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bytes_payload_default_content_type": {
            "name": "test_bytes_payload_default_content_type",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bytes_payload_explicit_content_type": {
            "name": "test_bytes_payload_explicit_content_type",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bytes_payload_bad_type": {
            "name": "test_bytes_payload_bad_type",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bytes_payload_memoryview_correct_size": {
            "name": "test_bytes_payload_memoryview_correct_size",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_payload": {
            "name": "test_string_payload",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_io_payload": {
            "name": "test_string_io_payload",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_iterable_payload_default_content_type": {
            "name": "test_async_iterable_payload_default_content_type",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_iterable_payload_explicit_content_type": {
            "name": "test_async_iterable_payload_explicit_content_type",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_iterable_payload_not_async_iterable": {
            "name": "test_async_iterable_payload_not_async_iterable",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_proxy.py": {
        "TestProxy.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.test_connect": {
            "name": "test_connect",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_proxy_headers": {
            "name": "test_proxy_headers",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_proxy_auth": {
            "name": "test_proxy_auth",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.test_proxy_dns_error": {
            "name": "test_proxy_dns_error",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.test_proxy_connection_error": {
            "name": "test_proxy_connection_error",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.test_https_connect": {
            "name": "test_https_connect",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_https_connect_certificate_error": {
            "name": "test_https_connect_certificate_error",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_https_connect_ssl_error": {
            "name": "test_https_connect_ssl_error",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_https_connect_http_proxy_error": {
            "name": "test_https_connect_http_proxy_error",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_https_connect_resp_start_error": {
            "name": "test_https_connect_resp_start_error",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_request_port": {
            "name": "test_request_port",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_proxy_auth_property": {
            "name": "test_proxy_auth_property",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.test_proxy_auth_property_default": {
            "name": "test_proxy_auth_property_default",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxy.test_https_connect_pass_ssl_context": {
            "name": "test_https_connect_pass_ssl_context",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        },
        "TestProxy.test_https_auth": {
            "name": "test_https_auth",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClientRequestMock": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_proxy_functional.py": {
        "secure_proxy_url": {
            "name": "secure_proxy_url",
            "location": 38,
            "return": [],
            "arguments": {
                "tls_certificate_pem_path": []
            }
        },
        "web_server_endpoint_payload": {
            "name": "web_server_endpoint_payload",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "web_server_endpoint_type": {
            "name": "web_server_endpoint_type",
            "location": 71,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_pretend_asyncio_supports_tls_in_tls": {
            "name": "_pretend_asyncio_supports_tls_in_tls",
            "location": 105,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "web_server_endpoint_type": []
            }
        },
        "proxy_test_server": {
            "name": "proxy_test_server",
            "location": 211,
            "return": [],
            "arguments": {
                "aiohttp_raw_server": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ],
                "monkeypatch": [
                    "Any"
                ]
            }
        },
        "get_request": {
            "name": "get_request",
            "location": 258,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "_patch_ssl_transport": {
            "name": "_patch_ssl_transport",
            "location": 675,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "mock_is_file": {
            "name": "mock_is_file",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_patch_ssl_transport._make_ssl_transport_dummy": {
            "name": "_make_ssl_transport_dummy",
            "location": 677,
            "return": [],
            "arguments": {
                "self": [],
                "rawsock": [],
                "protocol": [],
                "sslcontext": [],
                "waiter": []
            }
        }
    },
    "aiohttp-master/tests/test_pytest_plugin.py": {
        "test_aiohttp_plugin": {
            "name": "test_aiohttp_plugin",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Any"
                ]
            }
        },
        "test_warning_checks": {
            "name": "test_warning_checks",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Any"
                ]
            }
        },
        "test_aiohttp_plugin_async_fixture": {
            "name": "test_aiohttp_plugin_async_fixture",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Any"
                ],
                "capsys": [
                    "Any"
                ]
            }
        },
        "test_aiohttp_plugin_async_gen_fixture": {
            "name": "test_aiohttp_plugin_async_gen_fixture",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Any"
                ]
            }
        },
        "test_warnings_propagated": {
            "name": "test_warnings_propagated",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "recwarn": [
                    "Any"
                ]
            }
        },
        "test_aiohttp_client_cls_fixture_custom_client_used": {
            "name": "test_aiohttp_client_cls_fixture_custom_client_used",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Any"
                ]
            }
        },
        "test_aiohttp_client_cls_fixture_factory": {
            "name": "test_aiohttp_client_cls_fixture_factory",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_resolver.py": {
        "fake_addrinfo": {
            "name": "fake_addrinfo",
            "location": 42,
            "return": [
                "Callable[(..., Awaitable[Any])]"
            ],
            "arguments": {
                "hosts": [
                    "Any"
                ]
            }
        },
        "test_default_resolver": {
            "name": "test_default_resolver",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeResult.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "addresses": [
                    "Any"
                ]
            }
        },
        "FakeQueryResult.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_route_def.py": {
        "router": {
            "name": "router",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_head": {
            "name": "test_head",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_options": {
            "name": "test_options",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_post": {
            "name": "test_post",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_put": {
            "name": "test_put",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_patch": {
            "name": "test_patch",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route": {
            "name": "test_route",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_static": {
            "name": "test_static",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_head_deco": {
            "name": "test_head_deco",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_get_deco": {
            "name": "test_get_deco",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_post_deco": {
            "name": "test_post_deco",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_put_deco": {
            "name": "test_put_deco",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_patch_deco": {
            "name": "test_patch_deco",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_delete_deco": {
            "name": "test_delete_deco",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_options_deco": {
            "name": "test_options_deco",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_deco": {
            "name": "test_route_deco",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_routedef_sequence_protocol": {
            "name": "test_routedef_sequence_protocol",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_route_def": {
            "name": "test_repr_route_def",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_route_def_with_extra_info": {
            "name": "test_repr_route_def_with_extra_info",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_static_def": {
            "name": "test_repr_static_def",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_route_table_def": {
            "name": "test_repr_route_table_def",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_run_app.py": {
        "skip_if_no_dict": {
            "name": "skip_if_no_dict",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "skip_if_on_windows": {
            "name": "skip_if_on_windows",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_loop": {
            "name": "patched_loop",
            "location": 68,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "stopper": {
            "name": "stopper",
            "location": 80,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_http": {
            "name": "test_run_app_http",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_close_loop": {
            "name": "test_run_app_close_loop",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_mixed_bindings": {
            "name": "test_run_app_mixed_bindings",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "run_app_kwargs": [
                    "Any"
                ],
                "expected_server_calls": [
                    "Any"
                ],
                "expected_unix_server_calls": [
                    "Any"
                ],
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_https": {
            "name": "test_run_app_https",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_nondefault_host_port": {
            "name": "test_run_app_nondefault_host_port",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ],
                "aiohttp_unused_port": [
                    "Any"
                ]
            }
        },
        "test_run_app_multiple_hosts": {
            "name": "test_run_app_multiple_hosts",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_custom_backlog": {
            "name": "test_run_app_custom_backlog",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_custom_backlog_unix": {
            "name": "test_run_app_custom_backlog_unix",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_http_unix_socket": {
            "name": "test_run_app_http_unix_socket",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ],
                "tmp_path": [
                    "Any"
                ]
            }
        },
        "test_run_app_https_unix_socket": {
            "name": "test_run_app_https_unix_socket",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ],
                "tmp_path": [
                    "Any"
                ]
            }
        },
        "test_run_app_abstract_linux_socket": {
            "name": "test_run_app_abstract_linux_socket",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_preexisting_inet_socket": {
            "name": "test_run_app_preexisting_inet_socket",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ],
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_run_app_preexisting_inet6_socket": {
            "name": "test_run_app_preexisting_inet6_socket",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_preexisting_unix_socket": {
            "name": "test_run_app_preexisting_unix_socket",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ],
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_run_app_multiple_preexisting_sockets": {
            "name": "test_run_app_multiple_preexisting_sockets",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_sigint": {
            "name": "test_sigint",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sigterm": {
            "name": "test_sigterm",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_startup_cleanup_signals_even_on_failure": {
            "name": "test_startup_cleanup_signals_even_on_failure",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_coro": {
            "name": "test_run_app_coro",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_default_logger": {
            "name": "test_run_app_default_logger",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Any"
                ],
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_default_logger_setup_requires_debug": {
            "name": "test_run_app_default_logger_setup_requires_debug",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_default_logger_setup_requires_default_logger": {
            "name": "test_run_app_default_logger_setup_requires_default_logger",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_default_logger_setup_only_if_unconfigured": {
            "name": "test_run_app_default_logger_setup_only_if_unconfigured",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_cancels_all_pending_tasks": {
            "name": "test_run_app_cancels_all_pending_tasks",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_cancels_done_tasks": {
            "name": "test_run_app_cancels_done_tasks",
            "location": 825,
            "return": [],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_cancels_failed_tasks": {
            "name": "test_run_app_cancels_failed_tasks",
            "location": 843,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "test_run_app_keepalive_timeout": {
            "name": "test_run_app_keepalive_timeout",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_loop": [
                    "Any"
                ],
                "mocker": [
                    "Any"
                ],
                "monkeypatch": [
                    "Any"
                ]
            }
        },
        "test_run_app_context_vars": {
            "name": "test_run_app_context_vars",
            "location": 896,
            "return": [],
            "arguments": {
                "patched_loop": [
                    "Any"
                ]
            }
        },
        "stopper.raiser": {
            "name": "raiser",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "stopper.f": {
            "name": "f",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_run_app_keepalive_timeout.base_runner_init_spy": {
            "name": "base_runner_init_spy",
            "location": 882,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_streams.py": {
        "chunkify": {
            "name": "chunkify",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [
                    "Any"
                ],
                "n": [
                    "Any"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "get_memory_usage": {
            "name": "get_memory_usage",
            "location": 47,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "test_isinstance_check": {
            "name": "test_isinstance_check",
            "location": 1477,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestStreamReader._make_one": {
            "name": "_make_one",
            "location": 76,
            "return": [
                "streams.StreamReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataQueue.test_is_eof": {
            "name": "test_is_eof",
            "location": 1086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Any"
                ]
            }
        },
        "TestDataQueue.test_at_eof": {
            "name": "test_at_eof",
            "location": 1091,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Any"
                ]
            }
        },
        "TestDataQueue.test_feed_data": {
            "name": "test_feed_data",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Any"
                ]
            }
        },
        "TestDataQueue.test_feed_eof": {
            "name": "test_feed_eof",
            "location": 1103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Any"
                ]
            }
        },
        "TestDataQueue.test_exception": {
            "name": "test_exception",
            "location": 1195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Any"
                ]
            }
        },
        "TestStreamReader.test_read.cb": {
            "name": "cb",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_read_eof.cb": {
            "name": "cb",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_read_until_eof.cb": {
            "name": "cb",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_readline.cb": {
            "name": "cb",
            "location": 279,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_readline_limit.cb": {
            "name": "cb",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_readuntil.cb": {
            "name": "cb",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_readuntil_limit.cb": {
            "name": "cb",
            "location": 423,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_readexactly.cb": {
            "name": "cb",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_readexactly_eof.cb": {
            "name": "cb",
            "location": 540,
            "return": [],
            "arguments": {}
        },
        "TestStreamReader.test_readchunk.cb": {
            "name": "cb",
            "location": 726,
            "return": [],
            "arguments": {}
        },
        "TestDataQueue.test_read.cb": {
            "name": "cb",
            "location": 1111,
            "return": [],
            "arguments": {}
        },
        "TestDataQueue.test_read_eof.cb": {
            "name": "cb",
            "location": 1122,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_tcp_helpers.py": {
        "test_tcp_nodelay_exception": {
            "name": "test_tcp_nodelay_exception",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tcp_nodelay_enable": {
            "name": "test_tcp_nodelay_enable",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tcp_nodelay_enable_and_disable": {
            "name": "test_tcp_nodelay_enable_and_disable",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tcp_nodelay_enable_ipv6": {
            "name": "test_tcp_nodelay_enable_ipv6",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tcp_nodelay_enable_unix": {
            "name": "test_tcp_nodelay_enable_unix",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tcp_nodelay_enable_no_socket": {
            "name": "test_tcp_nodelay_enable_no_socket",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_test_utils.py": {
        "_create_example_app": {
            "name": "_create_example_app",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_client": {
            "name": "test_client",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "app": [
                    "Any"
                ]
            }
        },
        "test_get_route": {
            "name": "test_get_route",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "test_client": [
                    "Any"
                ]
            }
        },
        "test_make_mocked_request": {
            "name": "test_make_mocked_request",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "Any"
                ]
            }
        },
        "test_make_mocked_request_sslcontext": {
            "name": "test_make_mocked_request_sslcontext",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_mocked_request_unknown_extra_info": {
            "name": "test_make_mocked_request_unknown_extra_info",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_mocked_request_app": {
            "name": "test_make_mocked_request_app",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_mocked_request_app_can_store_values": {
            "name": "test_make_mocked_request_app_can_store_values",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_mocked_request_app_access_non_existing": {
            "name": "test_make_mocked_request_app_access_non_existing",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_mocked_request_match_info": {
            "name": "test_make_mocked_request_match_info",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_mocked_request_content": {
            "name": "test_make_mocked_request_content",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_mocked_request_transport": {
            "name": "test_make_mocked_request_transport",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_unsupported_arg": {
            "name": "test_client_unsupported_arg",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_testcase_no_app": {
            "name": "test_testcase_no_app",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "testdir": [
                    "Any"
                ],
                "loop": [
                    "Any"
                ]
            }
        },
        "TestAioHTTPTestCase.get_app": {
            "name": "get_app",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAioHTTPTestCase.test_inner_example": {
            "name": "test_inner_example",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_base_test_server_socket_factory.factory": {
            "name": "factory",
            "location": 354,
            "return": [
                "socket"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_tracing.py": {
        "TestTraceConfig.test_trace_config_ctx_default": {
            "name": "test_trace_config_ctx_default",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraceConfig.test_trace_config_ctx_factory": {
            "name": "test_trace_config_ctx_factory",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraceConfig.test_trace_config_ctx_request_ctx": {
            "name": "test_trace_config_ctx_request_ctx",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraceConfig.test_freeze": {
            "name": "test_freeze",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_urldispatch.py": {
        "make_handler": {
            "name": "make_handler",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "make_partial_handler": {
            "name": "make_partial_handler",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "router": {
            "name": "router",
            "location": 52,
            "return": [],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "fill_routes": {
            "name": "fill_routes",
            "location": 57,
            "return": [],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_register_uncommon_http_methods": {
            "name": "test_register_uncommon_http_methods",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_invalid_path": {
            "name": "test_add_invalid_path",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_url_invalid1": {
            "name": "test_add_url_invalid1",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_url_invalid2": {
            "name": "test_add_url_invalid2",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_url_invalid3": {
            "name": "test_add_url_invalid3",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_url_invalid4": {
            "name": "test_add_url_invalid4",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_double_add_url_with_the_same_name": {
            "name": "test_double_add_url_with_the_same_name",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_plain": {
            "name": "test_route_plain",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_unknown_route_name": {
            "name": "test_route_unknown_route_name",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_dynamic": {
            "name": "test_route_dynamic",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static": {
            "name": "test_add_static",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version": {
            "name": "test_add_static_append_version",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version_set_from_constructor": {
            "name": "test_add_static_append_version_set_from_constructor",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version_override_constructor": {
            "name": "test_add_static_append_version_override_constructor",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version_filename_without_slash": {
            "name": "test_add_static_append_version_filename_without_slash",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version_non_exists_file": {
            "name": "test_add_static_append_version_non_exists_file",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version_non_exists_file_without_slash": {
            "name": "test_add_static_append_version_non_exists_file_without_slash",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version_follow_symlink": {
            "name": "test_add_static_append_version_follow_symlink",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ],
                "tmp_path": [
                    "Any"
                ]
            }
        },
        "test_add_static_append_version_not_follow_symlink": {
            "name": "test_add_static_append_version_not_follow_symlink",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ],
                "tmp_path": [
                    "Any"
                ]
            }
        },
        "test_add_static_quoting": {
            "name": "test_add_static_quoting",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_plain_not_match": {
            "name": "test_plain_not_match",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_dynamic_not_match": {
            "name": "test_dynamic_not_match",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_dynamic_with_trailing_slash": {
            "name": "test_dynamic_with_trailing_slash",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_iter": {
            "name": "test_iter",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_contains": {
            "name": "test_contains",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_static_repr": {
            "name": "test_static_repr",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_static_adds_slash": {
            "name": "test_static_adds_slash",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_static_remove_trailing_slash": {
            "name": "test_static_remove_trailing_slash",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_route_with_invalid_re": {
            "name": "test_add_route_with_invalid_re",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_dynamic_with_regex_spec": {
            "name": "test_route_dynamic_with_regex_spec",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_dynamic_with_regex_spec_and_trailing_slash": {
            "name": "test_route_dynamic_with_regex_spec_and_trailing_slash",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_dynamic_with_regex": {
            "name": "test_route_dynamic_with_regex",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_route_dynamic_quoting": {
            "name": "test_route_dynamic_quoting",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_default_expect_handler": {
            "name": "test_default_expect_handler",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_custom_expect_handler_plain": {
            "name": "test_custom_expect_handler_plain",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_custom_expect_handler_dynamic": {
            "name": "test_custom_expect_handler_dynamic",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_expect_handler_non_coroutine": {
            "name": "test_expect_handler_non_coroutine",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_route_not_started_with_slash": {
            "name": "test_add_route_not_started_with_slash",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_add_route_invalid_method": {
            "name": "test_add_route_invalid_method",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_routes_view_len": {
            "name": "test_routes_view_len",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ],
                "fill_routes": [
                    "Any"
                ]
            }
        },
        "test_routes_view_iter": {
            "name": "test_routes_view_iter",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ],
                "fill_routes": [
                    "Any"
                ]
            }
        },
        "test_routes_view_contains": {
            "name": "test_routes_view_contains",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ],
                "fill_routes": [
                    "Any"
                ]
            }
        },
        "test_routes_abc": {
            "name": "test_routes_abc",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_named_resources_abc": {
            "name": "test_named_resources_abc",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_named_resources": {
            "name": "test_named_resources",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_resource_iter": {
            "name": "test_resource_iter",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_view_route": {
            "name": "test_view_route",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_resource_route_match": {
            "name": "test_resource_route_match",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_error_on_double_route_adding": {
            "name": "test_error_on_double_route_adding",
            "location": 843,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_error_on_adding_route_after_wildcard": {
            "name": "test_error_on_adding_route_after_wildcard",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_static_resource_get_info": {
            "name": "test_static_resource_get_info",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_resources_view_len": {
            "name": "test_resources_view_len",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_resources_view_iter": {
            "name": "test_resources_view_iter",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_resources_view_contains": {
            "name": "test_resources_view_contains",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_resources_abc": {
            "name": "test_resources_abc",
            "location": 952,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_static_route_user_home": {
            "name": "test_static_route_user_home",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_static_route_points_to_file": {
            "name": "test_static_route_points_to_file",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_url_for_in_static_resource": {
            "name": "test_url_for_in_static_resource",
            "location": 995,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_url_for_in_static_resource_pathlib": {
            "name": "test_url_for_in_static_resource_pathlib",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_url_for_in_resource_route": {
            "name": "test_url_for_in_resource_route",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_subapp_get_info": {
            "name": "test_subapp_get_info",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_domain_validation_error": {
            "name": "test_domain_validation_error",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {
                "domain": [
                    "Any"
                ],
                "error": [
                    "Any"
                ]
            }
        },
        "test_domain_valid": {
            "name": "test_domain_valid",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_domain": {
            "name": "test_match_domain",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ],
                "result": [
                    "Any"
                ]
            }
        },
        "test_add_subapp_errors": {
            "name": "test_add_subapp_errors",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_subapp_rule_resource": {
            "name": "test_subapp_rule_resource",
            "location": 1064,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_subapp_url_for": {
            "name": "test_subapp_url_for",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_subapp_repr": {
            "name": "test_subapp_repr",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_subapp_len": {
            "name": "test_subapp_len",
            "location": 1133,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_subapp_iter": {
            "name": "test_subapp_iter",
            "location": 1141,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_invalid_route_name": {
            "name": "test_invalid_route_name",
            "location": 1154,
            "return": [
                "None"
            ],
            "arguments": {
                "router": []
            }
        },
        "test_frozen_router": {
            "name": "test_frozen_router",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_frozen_router_subapp": {
            "name": "test_frozen_router_subapp",
            "location": 1165,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_frozen_app_on_subapp": {
            "name": "test_frozen_app_on_subapp",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_set_options_route": {
            "name": "test_set_options_route",
            "location": 1179,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_dynamic_url_with_name_started_from_underscore": {
            "name": "test_dynamic_url_with_name_started_from_underscore",
            "location": 1196,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [
                    "Any"
                ]
            }
        },
        "test_cannot_add_subapp_with_empty_prefix": {
            "name": "test_cannot_add_subapp_with_empty_prefix",
            "location": 1201,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_cannot_add_subapp_with_slash_prefix": {
            "name": "test_cannot_add_subapp_with_slash_prefix",
            "location": 1207,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "test_plain_resource_canonical": {
            "name": "test_plain_resource_canonical",
            "location": 1222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dynamic_resource_canonical": {
            "name": "test_dynamic_resource_canonical",
            "location": 1228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_static_resource_canonical": {
            "name": "test_static_resource_canonical",
            "location": 1240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prefixed_subapp_resource_canonical": {
            "name": "test_prefixed_subapp_resource_canonical",
            "location": 1248,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Any"
                ]
            }
        },
        "fill_routes.go": {
            "name": "go",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_add_sync_handler.handler": {
            "name": "handler",
            "location": 90,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_expect_handler_non_coroutine.handler": {
            "name": "handler",
            "location": 709,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "aiohttp-master/tests/test_websocket_handshake.py": {
        "gen_ws_headers": {
            "name": "gen_ws_headers",
            "location": 13,
            "return": [
                "Tuple[(List[Tuple[(str, str)]], str)]"
            ],
            "arguments": {
                "protocols": [
                    "str"
                ],
                "compress": [
                    "int"
                ],
                "extension_text": [
                    "str"
                ],
                "server_notakeover": [
                    "bool"
                ],
                "client_notakeover": [
                    "bool"
                ]
            }
        },
        "test_handshake_compress_server_notakeover": {
            "name": "test_handshake_compress_server_notakeover",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handshake_compress_client_notakeover": {
            "name": "test_handshake_compress_client_notakeover",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handshake_compress_wbits": {
            "name": "test_handshake_compress_wbits",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handshake_compress_wbits_error": {
            "name": "test_handshake_compress_wbits_error",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handshake_compress_bad_ext": {
            "name": "test_handshake_compress_bad_ext",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handshake_compress_multi_ext_bad": {
            "name": "test_handshake_compress_multi_ext_bad",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handshake_compress_multi_ext_wbits": {
            "name": "test_handshake_compress_multi_ext_wbits",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handshake_no_transfer_encoding": {
            "name": "test_handshake_no_transfer_encoding",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_websocket_parser.py": {
        "build_frame": {
            "name": "build_frame",
            "location": 25,
            "return": [],
            "arguments": {
                "message": [
                    "Any"
                ],
                "opcode": [
                    "Any"
                ],
                "use_mask": [
                    "bool"
                ],
                "noheader": [
                    "bool"
                ],
                "is_fin": [
                    "bool"
                ],
                "compress": [
                    "bool"
                ]
            }
        },
        "build_close_frame": {
            "name": "build_close_frame",
            "location": 77,
            "return": [],
            "arguments": {
                "code": [
                    "int"
                ],
                "message": [
                    "bytes"
                ],
                "noheader": [
                    "bool"
                ]
            }
        },
        "out": {
            "name": "out",
            "location": 87,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "parser": {
            "name": "parser",
            "location": 92,
            "return": [],
            "arguments": {
                "out": [
                    "Any"
                ]
            }
        },
        "test_parse_frame": {
            "name": "test_parse_frame",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_frame_length0": {
            "name": "test_parse_frame_length0",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_frame_length2": {
            "name": "test_parse_frame_length2",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_frame_length4": {
            "name": "test_parse_frame_length4",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_frame_mask": {
            "name": "test_parse_frame_mask",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_frame_header_reversed_bits": {
            "name": "test_parse_frame_header_reversed_bits",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_frame_header_control_frame": {
            "name": "test_parse_frame_header_control_frame",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "_test_parse_frame_header_new_data_err": {
            "name": "_test_parse_frame_header_new_data_err",
            "location": 149,
            "return": [],
            "arguments": {
                "out": [],
                "parser": []
            }
        },
        "test_parse_frame_header_payload_size": {
            "name": "test_parse_frame_header_payload_size",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_ping_frame": {
            "name": "test_ping_frame",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_pong_frame": {
            "name": "test_pong_frame",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_close_frame": {
            "name": "test_close_frame",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_close_frame_info": {
            "name": "test_close_frame_info",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_close_frame_invalid": {
            "name": "test_close_frame_invalid",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_close_frame_invalid_2": {
            "name": "test_close_frame_invalid_2",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_close_frame_unicode_err": {
            "name": "test_close_frame_unicode_err",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_unknown_frame": {
            "name": "test_unknown_frame",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_simple_text": {
            "name": "test_simple_text",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_simple_text_unicode_err": {
            "name": "test_simple_text_unicode_err",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_simple_binary": {
            "name": "test_simple_binary",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_fragmentation_header": {
            "name": "test_fragmentation_header",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation": {
            "name": "test_continuation",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation_with_ping": {
            "name": "test_continuation_with_ping",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation_err": {
            "name": "test_continuation_err",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation_with_close": {
            "name": "test_continuation_with_close",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation_with_close_unicode_err": {
            "name": "test_continuation_with_close_unicode_err",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation_with_close_bad_code": {
            "name": "test_continuation_with_close_bad_code",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation_with_close_bad_payload": {
            "name": "test_continuation_with_close_bad_payload",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_continuation_with_close_empty": {
            "name": "test_continuation_with_close_empty",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "test_websocket_mask_python": {
            "name": "test_websocket_mask_python",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_websocket_mask_cython": {
            "name": "test_websocket_mask_cython",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_websocket_mask_python_empty": {
            "name": "test_websocket_mask_python_empty",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_websocket_mask_cython_empty": {
            "name": "test_websocket_mask_cython_empty",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_compress_frame_single": {
            "name": "test_parse_compress_frame_single",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_compress_frame_multi": {
            "name": "test_parse_compress_frame_multi",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_compress_error_frame": {
            "name": "test_parse_compress_error_frame",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Any"
                ]
            }
        },
        "test_parse_no_compress_frame_single": {
            "name": "test_parse_no_compress_frame_single",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_msg_too_large": {
            "name": "test_msg_too_large",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ]
            }
        },
        "test_msg_too_large_not_fin": {
            "name": "test_msg_too_large_not_fin",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ]
            }
        },
        "test_compressed_msg_too_large": {
            "name": "test_compressed_msg_too_large",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "Any"
                ]
            }
        },
        "TestWebSocketError.test_ctor": {
            "name": "test_ctor",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketError.test_pickle": {
            "name": "test_pickle",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_websocket_writer.py": {
        "protocol": {
            "name": "protocol",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "transport": {
            "name": "transport",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "writer": {
            "name": "writer",
            "location": 27,
            "return": [],
            "arguments": {
                "protocol": [
                    "Any"
                ],
                "transport": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_web_app.py": {
        "test_app_call": {
            "name": "test_app_call",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logging": {
            "name": "test_logging",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_appkey": {
            "name": "test_appkey",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_appkey_repr_concrete": {
            "name": "test_appkey_repr_concrete",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_appkey_repr_nonconcrete": {
            "name": "test_appkey_repr_nonconcrete",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_appkey_repr_annotated": {
            "name": "test_appkey_repr_annotated",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_str_keys": {
            "name": "test_app_str_keys",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_get": {
            "name": "test_app_get",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_freeze": {
            "name": "test_app_freeze",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equality": {
            "name": "test_equality",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_run_middlewares": {
            "name": "test_app_run_middlewares",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subapp_pre_frozen_after_adding": {
            "name": "test_subapp_pre_frozen_after_adding",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_inheritance": {
            "name": "test_app_inheritance",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_custom_attr": {
            "name": "test_app_custom_attr",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_iter": {
            "name": "test_app_iter",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_forbid_nonslot_attr": {
            "name": "test_app_forbid_nonslot_attr",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forbid_changing_frozen_app": {
            "name": "test_forbid_changing_frozen_app",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_boolean": {
            "name": "test_app_boolean",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cleanup_ctx.f": {
            "name": "f",
            "location": 217,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "test_cleanup_ctx_exception_on_startup.f": {
            "name": "f",
            "location": 240,
            "return": [],
            "arguments": {
                "num": [],
                "fail": []
            }
        },
        "test_cleanup_ctx_exception_on_cleanup.f": {
            "name": "f",
            "location": 268,
            "return": [],
            "arguments": {
                "num": [],
                "fail": []
            }
        },
        "test_cleanup_ctx_exception_on_cleanup_multiple.f": {
            "name": "f",
            "location": 320,
            "return": [],
            "arguments": {
                "num": [],
                "fail": []
            }
        },
        "test_cleanup_ctx_multiple_yields.f": {
            "name": "f",
            "location": 349,
            "return": [],
            "arguments": {
                "num": []
            }
        }
    },
    "aiohttp-master/tests/test_web_cli.py": {
        "test_entry_func_empty": {
            "name": "test_entry_func_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_entry_func_only_module": {
            "name": "test_entry_func_only_module",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_entry_func_only_function": {
            "name": "test_entry_func_only_function",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_entry_func_only_separator": {
            "name": "test_entry_func_only_separator",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_entry_func_relative_module": {
            "name": "test_entry_func_relative_module",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_entry_func_non_existent_module": {
            "name": "test_entry_func_non_existent_module",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_entry_func_non_existent_attribute": {
            "name": "test_entry_func_non_existent_attribute",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_path_when_unsupported": {
            "name": "test_path_when_unsupported",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ],
                "monkeypatch": [
                    "Any"
                ]
            }
        },
        "test_entry_func_call": {
            "name": "test_entry_func_call",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        },
        "test_running_application": {
            "name": "test_running_application",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_web_exceptions.py": {
        "test_all_http_exceptions_exported": {
            "name": "test_all_http_exceptions_exported",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_terminal_classes_has_status_code": {
            "name": "test_terminal_classes_has_status_code",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_with_text": {
            "name": "test_with_text",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_text": {
            "name": "test_default_text",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_text_204": {
            "name": "test_empty_text_204",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_text_205": {
            "name": "test_empty_text_205",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_text_304": {
            "name": "test_empty_text_304",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_HTTPException_retains_cause": {
            "name": "test_HTTPException_retains_cause",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestHTTPOk.test_ctor_all": {
            "name": "test_ctor_all",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPOk.test_pickle": {
            "name": "test_pickle",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPFound.test_location_str": {
            "name": "test_location_str",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPFound.test_location_url": {
            "name": "test_location_url",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPFound.test_empty_location": {
            "name": "test_empty_location",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPFound.test_location_CRLF": {
            "name": "test_location_CRLF",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPFound.test_pickle": {
            "name": "test_pickle",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPMethodNotAllowed.test_pickle": {
            "name": "test_pickle",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPRequestEntityTooLarge.test_ctor": {
            "name": "test_ctor",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPRequestEntityTooLarge.test_pickle": {
            "name": "test_pickle",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPUnavailableForLegalReasons.test_ctor": {
            "name": "test_ctor",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPUnavailableForLegalReasons.test_pickle": {
            "name": "test_pickle",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_web_functional.py": {
        "here": {
            "name": "here",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "fname": {
            "name": "fname",
            "location": 34,
            "return": [],
            "arguments": {
                "here": [
                    "Any"
                ]
            }
        },
        "new_dummy_form": {
            "name": "new_dummy_form",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_repr_for_application": {
            "name": "test_repr_for_application",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_single_file.check_file": {
            "name": "check_file",
            "location": 310,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "test_post_files.check_file": {
            "name": "check_file",
            "location": 373,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "test_subapp_on_response_prepare.make_signal": {
            "name": "make_signal",
            "location": 1255,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_subapp_middleware_context.show_app_context": {
            "name": "show_app_context",
            "location": 1357,
            "return": [],
            "arguments": {
                "appname": []
            }
        },
        "test_subapp_middleware_context.make_handler": {
            "name": "make_handler",
            "location": 1364,
            "return": [],
            "arguments": {
                "appname": []
            }
        },
        "test_request_tracing.FakeResolver.__init__": {
            "name": "__init__",
            "location": 1770,
            "return": [],
            "arguments": {
                "self": [],
                "fakes": []
            }
        }
    },
    "aiohttp-master/tests/test_web_log.py": {
        "test_access_logger_format": {
            "name": "test_access_logger_format",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_access_logger_atoms": {
            "name": "test_access_logger_atoms",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Any"
                ],
                "log_format": [
                    "Any"
                ],
                "expected": [
                    "Any"
                ],
                "extra": [
                    "Any"
                ]
            }
        },
        "test_access_logger_dicts": {
            "name": "test_access_logger_dicts",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_access_logger_unix_socket": {
            "name": "test_access_logger_unix_socket",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_no_message": {
            "name": "test_logger_no_message",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_internal_error": {
            "name": "test_logger_internal_error",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_no_transport": {
            "name": "test_logger_no_transport",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_abc": {
            "name": "test_logger_abc",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_access_logger_atoms.PatchedDatetime.now": {
            "name": "now",
            "location": 90,
            "return": [],
            "arguments": {
                "tz": []
            }
        },
        "test_logger_abc.Logger.log": {
            "name": "log",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "time": []
            }
        },
        "test_exc_info_context.Logger.log": {
            "name": "log",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "time": []
            }
        },
        "test_contextvars_logger.Logger.log": {
            "name": "log",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "time": []
            }
        }
    },
    "aiohttp-master/tests/test_web_middleware.py": {
        "cli": {
            "name": "cli",
            "location": 142,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "aiohttp_client": [
                    "Any"
                ]
            }
        },
        "test_middleware_chain.make_middleware": {
            "name": "make_middleware",
            "location": 62,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "test_middleware_subapp.make_middleware": {
            "name": "make_middleware",
            "location": 107,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "cli.wrapper": {
            "name": "wrapper",
            "location": 146,
            "return": [],
            "arguments": {
                "extra_middlewares": []
            }
        }
    },
    "aiohttp-master/tests/test_web_request.py": {
        "protocol": {
            "name": "protocol",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_base_ctor": {
            "name": "test_base_ctor",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor": {
            "name": "test_ctor",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_doubleslashes": {
            "name": "test_doubleslashes",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_type_not_specified": {
            "name": "test_content_type_not_specified",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_type_from_spec": {
            "name": "test_content_type_from_spec",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_type_from_spec_with_charset": {
            "name": "test_content_type_from_spec_with_charset",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calc_content_type_on_getting_charset": {
            "name": "test_calc_content_type_on_getting_charset",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urlencoded_querystring": {
            "name": "test_urlencoded_querystring",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_ascii_path": {
            "name": "test_non_ascii_path",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_ascii_raw_path": {
            "name": "test_non_ascii_raw_path",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_absolute_url": {
            "name": "test_absolute_url",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_length": {
            "name": "test_content_length",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_range_to_slice_head": {
            "name": "test_range_to_slice_head",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_range_to_slice_mid": {
            "name": "test_range_to_slice_mid",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_range_to_slice_tail_start": {
            "name": "test_range_to_slice_tail_start",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_range_to_slice_tail_stop": {
            "name": "test_range_to_slice_tail_stop",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_keepalive_on_http10": {
            "name": "test_non_keepalive_on_http10",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_keepalive_on_closing": {
            "name": "test_non_keepalive_on_closing",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_request_cookies": {
            "name": "test_no_request_cookies",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_cookie": {
            "name": "test_request_cookie",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_cookie__set_item": {
            "name": "test_request_cookie__set_item",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_info": {
            "name": "test_match_info",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_is_mutable_mapping": {
            "name": "test_request_is_mutable_mapping",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_delitem": {
            "name": "test_request_delitem",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_len": {
            "name": "test_request_len",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_iter": {
            "name": "test_request_iter",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test___repr__": {
            "name": "test___repr__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test___repr___non_ascii_path": {
            "name": "test___repr___non_ascii_path",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_http_scheme": {
            "name": "test_http_scheme",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_https_scheme_by_ssl_transport": {
            "name": "test_https_scheme_by_ssl_transport",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header": {
            "name": "test_single_forwarded_header",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forwarded_node_identifier": {
            "name": "test_forwarded_node_identifier",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "forward_for_in": [
                    "Any"
                ],
                "forward_for_out": [
                    "Any"
                ]
            }
        },
        "test_single_forwarded_header_camelcase": {
            "name": "test_single_forwarded_header_camelcase",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_single_param": {
            "name": "test_single_forwarded_header_single_param",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_multiple_param": {
            "name": "test_single_forwarded_header_multiple_param",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_quoted_escaped": {
            "name": "test_single_forwarded_header_quoted_escaped",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_custom_param": {
            "name": "test_single_forwarded_header_custom_param",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_empty_params": {
            "name": "test_single_forwarded_header_empty_params",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_bad_separator": {
            "name": "test_single_forwarded_header_bad_separator",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_injection1": {
            "name": "test_single_forwarded_header_injection1",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_injection2": {
            "name": "test_single_forwarded_header_injection2",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_forwarded_header_long_quoted_string": {
            "name": "test_single_forwarded_header_long_quoted_string",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_forwarded_headers": {
            "name": "test_multiple_forwarded_headers",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_forwarded_headers_bad_syntax": {
            "name": "test_multiple_forwarded_headers_bad_syntax",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_forwarded_headers_injection": {
            "name": "test_multiple_forwarded_headers_injection",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_host_by_host_header": {
            "name": "test_host_by_host_header",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raw_headers": {
            "name": "test_raw_headers",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rel_url": {
            "name": "test_rel_url",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_url": {
            "name": "test_url_url",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone": {
            "name": "test_clone",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_client_max_size": {
            "name": "test_clone_client_max_size",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_override_client_max_size": {
            "name": "test_clone_override_client_max_size",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_method": {
            "name": "test_clone_method",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_rel_url": {
            "name": "test_clone_rel_url",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_rel_url_str": {
            "name": "test_clone_rel_url_str",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_headers": {
            "name": "test_clone_headers",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_headers_dict": {
            "name": "test_clone_headers_dict",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remote_peername_tcp": {
            "name": "test_remote_peername_tcp",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remote_peername_unix": {
            "name": "test_remote_peername_unix",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_save_state_on_clone": {
            "name": "test_save_state_on_clone",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_scheme": {
            "name": "test_clone_scheme",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_host": {
            "name": "test_clone_host",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_remote": {
            "name": "test_clone_remote",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_custom_attr": {
            "name": "test_request_custom_attr",
            "location": 729,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remote_with_closed_transport": {
            "name": "test_remote_with_closed_transport",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_http_with_closed_transport": {
            "name": "test_url_http_with_closed_transport",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_https_with_closed_transport": {
            "name": "test_url_https_with_closed_transport",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weakref_creation": {
            "name": "test_weakref_creation",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_headers": {
            "name": "test_etag_headers",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [],
                "header_attr": [],
                "header_val": [],
                "expected": []
            }
        },
        "test_datetime_headers": {
            "name": "test_datetime_headers",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [],
                "header_attr": [],
                "header_val": [],
                "expected": []
            }
        },
        "test_range_to_slice_head.bytes_gen": {
            "name": "bytes_gen",
            "location": 181,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "test_range_to_slice_mid.bytes_gen": {
            "name": "bytes_gen",
            "location": 194,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "test_range_to_slice_tail_start.bytes_gen": {
            "name": "bytes_gen",
            "location": 207,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "test_range_to_slice_tail_stop.bytes_gen": {
            "name": "bytes_gen",
            "location": 220,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "test_get_extra_info.get_extra_info": {
            "name": "get_extra_info",
            "location": 760,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_web_request_handler.py": {},
    "aiohttp-master/tests/test_web_response.py": {
        "make_request": {
            "name": "make_request",
            "location": 25,
            "return": [],
            "arguments": {
                "method": [
                    "Any"
                ],
                "path": [
                    "Any"
                ],
                "headers": [
                    "Any"
                ],
                "version": [
                    "Any"
                ],
                "on_response_prepare": [
                    "Optional[Any]"
                ]
            }
        },
        "buf": {
            "name": "buf",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "writer": {
            "name": "writer",
            "location": 51,
            "return": [],
            "arguments": {
                "buf": [
                    "Any"
                ]
            }
        },
        "test_stream_response_ctor": {
            "name": "test_stream_response_ctor",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stream_response_hashable": {
            "name": "test_stream_response_hashable",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stream_response_eq": {
            "name": "test_stream_response_eq",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stream_response_is_mutable_mapping": {
            "name": "test_stream_response_is_mutable_mapping",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stream_response_delitem": {
            "name": "test_stream_response_delitem",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stream_response_len": {
            "name": "test_stream_response_len",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_iter": {
            "name": "test_request_iter",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_length": {
            "name": "test_content_length",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_length_setter": {
            "name": "test_content_length_setter",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_length_setter_with_enable_chunked_encoding": {
            "name": "test_content_length_setter_with_enable_chunked_encoding",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_drop_content_length_header_on_setting_len_to_None": {
            "name": "test_drop_content_length_header_on_setting_len_to_None",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_content_length_to_None_on_non_set": {
            "name": "test_set_content_length_to_None_on_non_set",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_content_type": {
            "name": "test_setting_content_type",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_charset": {
            "name": "test_setting_charset",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_charset": {
            "name": "test_default_charset",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_charset": {
            "name": "test_reset_charset",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_charset_after_setting": {
            "name": "test_reset_charset_after_setting",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_charset_without_content_type": {
            "name": "test_charset_without_content_type",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_modified_initial": {
            "name": "test_last_modified_initial",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_modified_string": {
            "name": "test_last_modified_string",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_modified_timestamp": {
            "name": "test_last_modified_timestamp",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_modified_datetime": {
            "name": "test_last_modified_datetime",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_modified_reset": {
            "name": "test_last_modified_reset",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_modified_string_invalid": {
            "name": "test_last_modified_string_invalid",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "header_val": [],
                "expected": []
            }
        },
        "test_etag_initial": {
            "name": "test_etag_initial",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_string": {
            "name": "test_etag_string",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_class": {
            "name": "test_etag_class",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "etag": [],
                "expected_header": []
            }
        },
        "test_etag_any": {
            "name": "test_etag_any",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_invalid_value_set": {
            "name": "test_etag_invalid_value_set",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_value": []
            }
        },
        "test_etag_invalid_value_get": {
            "name": "test_etag_invalid_value_get",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "header": []
            }
        },
        "test_etag_invalid_value_class": {
            "name": "test_etag_invalid_value_class",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid": []
            }
        },
        "test_etag_reset": {
            "name": "test_etag_reset",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_chunked_encoding_with_content_length": {
            "name": "test_enable_chunked_encoding_with_content_length",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_force_close": {
            "name": "test_force_close",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_status_with_reason": {
            "name": "test_set_status_with_reason",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test___repr___not_prepared": {
            "name": "test___repr___not_prepared",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_ctor": {
            "name": "test_response_ctor",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_content_type": {
            "name": "test_ctor_content_type",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_text_body_combined": {
            "name": "test_ctor_text_body_combined",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_charset": {
            "name": "test_ctor_charset",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_charset_default_utf8": {
            "name": "test_ctor_charset_default_utf8",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_charset_in_content_type": {
            "name": "test_ctor_charset_in_content_type",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_charset_without_text": {
            "name": "test_ctor_charset_without_text",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_content_type_with_extra": {
            "name": "test_ctor_content_type_with_extra",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_both_content_type_param_and_header_with_text": {
            "name": "test_ctor_both_content_type_param_and_header_with_text",
            "location": 875,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_both_charset_param_and_header_with_text": {
            "name": "test_ctor_both_charset_param_and_header_with_text",
            "location": 884,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_both_content_type_param_and_header": {
            "name": "test_ctor_both_content_type_param_and_header",
            "location": 891,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ctor_both_charset_param_and_header": {
            "name": "test_ctor_both_charset_param_and_header",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assign_nonstr_text": {
            "name": "test_assign_nonstr_text",
            "location": 916,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_set_content_length": {
            "name": "test_response_set_content_length",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_text_with_content_type": {
            "name": "test_set_text_with_content_type",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_text_with_charset": {
            "name": "test_set_text_with_charset",
            "location": 1017,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_content_type_in_stream_response": {
            "name": "test_default_content_type_in_stream_response",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_content_type_in_response": {
            "name": "test_default_content_type_in_response",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_type_with_set_text": {
            "name": "test_content_type_with_set_text",
            "location": 1038,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_type_with_set_body": {
            "name": "test_content_type_with_set_body",
            "location": 1043,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_started_when_not_started": {
            "name": "test_started_when_not_started",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nonstr_text_in_ctor": {
            "name": "test_nonstr_text_in_ctor",
            "location": 1072,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_in_ctor_with_content_type": {
            "name": "test_text_in_ctor_with_content_type",
            "location": 1077,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_in_ctor_with_content_type_header": {
            "name": "test_text_in_ctor_with_content_type_header",
            "location": 1083,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_in_ctor_with_content_type_header_multidict": {
            "name": "test_text_in_ctor_with_content_type_header_multidict",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_body_in_ctor_with_content_type_header_multidict": {
            "name": "test_body_in_ctor_with_content_type_header_multidict",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_with_empty_payload": {
            "name": "test_text_with_empty_payload",
            "location": 1106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_with_content_length_header_without_body": {
            "name": "test_response_with_content_length_header_without_body",
            "location": 1112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_with_immutable_headers": {
            "name": "test_response_with_immutable_headers",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weakref_creation": {
            "name": "test_weakref_creation",
            "location": 1151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "writer.acquire": {
            "name": "acquire",
            "location": 54,
            "return": [],
            "arguments": {
                "cb": []
            }
        },
        "writer.buffer_data": {
            "name": "buffer_data",
            "location": 57,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "writer.write": {
            "name": "write",
            "location": 60,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "TestJSONResponse.test_content_type_is_application_json_by_default": {
            "name": "test_content_type_is_application_json_by_default",
            "location": 1157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONResponse.test_passing_text_only": {
            "name": "test_passing_text_only",
            "location": 1161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONResponse.test_data_and_text_raises_value_error": {
            "name": "test_data_and_text_raises_value_error",
            "location": 1165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONResponse.test_data_and_body_raises_value_error": {
            "name": "test_data_and_body_raises_value_error",
            "location": 1171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONResponse.test_text_is_json_encoded": {
            "name": "test_text_is_json_encoded",
            "location": 1177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONResponse.test_content_type_is_overrideable": {
            "name": "test_content_type_is_overrideable",
            "location": 1181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-master/tests/test_web_runner.py": {
        "app": {
            "name": "app",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "make_runner": {
            "name": "make_runner",
            "location": 21,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ],
                "app": [
                    "Any"
                ]
            }
        },
        "test_non_app": {
            "name": "test_non_app",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_handler_args": {
            "name": "test_app_handler_args",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_after_asyncio_run": {
            "name": "test_run_after_asyncio_run",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_runner.go": {
            "name": "go",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_run_after_asyncio_run.spy": {
            "name": "spy",
            "location": 250,
            "return": [],
            "arguments": {}
        },
        "test_app_make_handler_access_log_class1.Logger.log": {
            "name": "log",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "time": []
            }
        },
        "test_app_make_handler_access_log_class2.Logger.log": {
            "name": "log",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "time": []
            }
        }
    },
    "aiohttp-master/tests/test_web_sendfile.py": {
        "test_using_gzip_if_header_present_and_file_available": {
            "name": "test_using_gzip_if_header_present_and_file_available",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_gzip_if_header_not_present_and_file_available": {
            "name": "test_gzip_if_header_not_present_and_file_available",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_gzip_if_header_not_present_and_file_not_available": {
            "name": "test_gzip_if_header_not_present_and_file_not_available",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_gzip_if_header_present_and_file_not_available": {
            "name": "test_gzip_if_header_present_and_file_not_available",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "test_status_controlled_by_user": {
            "name": "test_status_controlled_by_user",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/test_web_sendfile_functional.py": {
        "loop_without_sendfile": {
            "name": "loop_without_sendfile",
            "location": 20,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "loop_with_mocked_native_sendfile": {
            "name": "loop_with_mocked_native_sendfile",
            "location": 29,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "sender": {
            "name": "sender",
            "location": 40,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "loop_without_sendfile": [
                    "Any"
                ]
            }
        },
        "app_with_static_route": {
            "name": "app_with_static_route",
            "location": 51,
            "return": [
                "web.Application"
            ],
            "arguments": {
                "sender": [
                    "Any"
                ]
            }
        },
        "test_static_route_path_existence_check": {
            "name": "test_static_route_path_existence_check",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "loop_without_sendfile.sendfile": {
            "name": "sendfile",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "loop_with_mocked_native_sendfile.sendfile": {
            "name": "sendfile",
            "location": 30,
            "return": [],
            "arguments": {
                "transport": [],
                "fobj": [],
                "offset": [],
                "count": []
            }
        },
        "sender.maker": {
            "name": "maker",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_web_server.py": {},
    "aiohttp-master/tests/test_web_urldispatcher.py": {
        "test_system_route": {
            "name": "test_system_route",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reuse_last_added_resource": {
            "name": "test_reuse_last_added_resource",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "test_resource_raw_match": {
            "name": "test_resource_raw_match",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test_web_websocket.py": {
        "app": {
            "name": "app",
            "location": 18,
            "return": [],
            "arguments": {
                "loop": [
                    "Any"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "make_request": {
            "name": "make_request",
            "location": 35,
            "return": [],
            "arguments": {
                "app": [
                    "Any"
                ],
                "protocol": [
                    "Any"
                ]
            }
        },
        "test_websocket_ready": {
            "name": "test_websocket_ready",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_websocket_not_ready": {
            "name": "test_websocket_not_ready",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_websocket_ready_unknown_protocol": {
            "name": "test_websocket_ready_unknown_protocol",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool_websocket_ready": {
            "name": "test_bool_websocket_ready",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool_websocket_not_ready": {
            "name": "test_bool_websocket_not_ready",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_prepare_ok": {
            "name": "test_can_prepare_ok",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_can_prepare_unknown_protocol": {
            "name": "test_can_prepare_unknown_protocol",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_can_prepare_without_upgrade": {
            "name": "test_can_prepare_without_upgrade",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "make_request": [
                    "Any"
                ]
            }
        },
        "test_closed_after_ctor": {
            "name": "test_closed_after_ctor",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_request.maker": {
            "name": "maker",
            "location": 36,
            "return": [],
            "arguments": {
                "method": [],
                "path": [],
                "headers": [],
                "protocols": []
            }
        }
    },
    "aiohttp-master/tests/test_web_websocket_functional.py": {},
    "aiohttp-master/tests/test_worker.py": {
        "skip_if_no_dict": {
            "name": "skip_if_no_dict",
            "location": 27,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "worker": {
            "name": "worker",
            "location": 57,
            "return": [],
            "arguments": {
                "request": [],
                "loop": []
            }
        },
        "test_init_process": {
            "name": "test_init_process",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "loop": []
            }
        },
        "test_run_async_factory": {
            "name": "test_run_async_factory",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "loop": []
            }
        },
        "test_run_not_app": {
            "name": "test_run_not_app",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "loop": []
            }
        },
        "test_handle_quit": {
            "name": "test_handle_quit",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "loop": []
            }
        },
        "test_handle_abort": {
            "name": "test_handle_abort",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": []
            }
        },
        "test__wait_next_notify": {
            "name": "test__wait_next_notify",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": []
            }
        },
        "test__notify_waiter_done": {
            "name": "test__notify_waiter_done",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": []
            }
        },
        "test__notify_waiter_done_explicit_waiter": {
            "name": "test__notify_waiter_done_explicit_waiter",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": []
            }
        },
        "test_init_signals": {
            "name": "test_init_signals",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": []
            }
        },
        "test__get_valid_log_format_ok": {
            "name": "test__get_valid_log_format_ok",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "source": [],
                "result": []
            }
        },
        "test__get_valid_log_format_exc": {
            "name": "test__get_valid_log_format_exc",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": []
            }
        },
        "test__create_ssl_context_without_certs_and_ciphers": {
            "name": "test__create_ssl_context_without_certs_and_ciphers",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "tls_certificate_pem_path": []
            }
        },
        "test__create_ssl_context_with_ciphers": {
            "name": "test__create_ssl_context_with_ciphers",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "tls_certificate_pem_path": []
            }
        },
        "test__create_ssl_context_with_ca_certs": {
            "name": "test__create_ssl_context_with_ca_certs",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "worker": [],
                "tls_ca_certificate_pem_path": [],
                "tls_certificate_pem_path": []
            }
        },
        "BaseTestWorker.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__run_exc.raiser": {
            "name": "raiser",
            "location": 238,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp-master/tests/test___all__.py": {
        "test___all__": {
            "name": "test___all__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "pytester": [
                    "Any"
                ]
            }
        },
        "test_web___all__": {
            "name": "test_web___all__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "pytester": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/autobahn/test_autobahn.py": {
        "report_dir": {
            "name": "report_dir",
            "location": 13,
            "return": [
                "Path"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "TempPathFactory"
                ]
            }
        },
        "build_autobahn_testsuite": {
            "name": "build_autobahn_testsuite",
            "location": 18,
            "return": [
                "Generator[(None, None, None)]"
            ],
            "arguments": {}
        },
        "get_failed_tests": {
            "name": "get_failed_tests",
            "location": 35,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "report_path": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "test_client": {
            "name": "test_client",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "report_dir": [
                    "Path"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "test_server": {
            "name": "test_server",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "report_dir": [
                    "Path"
                ],
                "request": [
                    "Any"
                ]
            }
        }
    },
    "aiohttp-master/tests/autobahn/client/client.py": {},
    "aiohttp-master/tests/autobahn/server/server.py": {},
    "aiohttp-master/tools/bench-asyncio-write.py": {
        "fm_size": {
            "name": "fm_size",
            "location": 37,
            "return": [],
            "arguments": {
                "s": [],
                "_fms": []
            }
        },
        "fm_time": {
            "name": "fm_time",
            "location": 45,
            "return": [],
            "arguments": {
                "s": [],
                "_fms": []
            }
        },
        "_job": {
            "name": "_job",
            "location": 55,
            "return": [
                "Tuple[(str, List[bytes])]"
            ],
            "arguments": {
                "j": [
                    "List[int]"
                ]
            }
        }
    },
    "aiohttp-master/tools/check_changes.py": {
        "get_root": {
            "name": "get_root",
            "location": 11,
            "return": [],
            "arguments": {
                "script_path": []
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "aiohttp-master/tools/check_sum.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "aiohttp-master/tools/cleanup_changes.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp-master/tools/gen.py": {
        "calc_headers": {
            "name": "calc_headers",
            "location": 14,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "factory": {
            "name": "factory",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 33,
            "return": [],
            "arguments": {
                "headers": []
            }
        },
        "gen_prefix": {
            "name": "gen_prefix",
            "location": 100,
            "return": [],
            "arguments": {
                "prefix": [],
                "k": []
            }
        },
        "gen_block": {
            "name": "gen_block",
            "location": 107,
            "return": [],
            "arguments": {
                "dct": [],
                "prefix": [],
                "used_blocks": [],
                "missing": [],
                "out": []
            }
        },
        "gen": {
            "name": "gen",
            "location": 141,
            "return": [],
            "arguments": {
                "dct": []
            }
        },
        "gen_headers": {
            "name": "gen_headers",
            "location": 151,
            "return": [],
            "arguments": {
                "headers": []
            }
        }
    }
}
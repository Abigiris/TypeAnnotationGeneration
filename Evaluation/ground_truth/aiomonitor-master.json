{
    "aiomonitor-master/setup.py": {
        "read": {
            "name": "read",
            "location": 13,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "read_version": {
            "name": "read_version",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "aiomonitor-master/aiomonitor/cli.py": {
        "monitor_client": {
            "name": "monitor_client",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiomonitor-master/aiomonitor/monitor.py": {
        "start_monitor": {
            "name": "start_monitor",
            "location": 415,
            "return": [
                "Monitor"
            ],
            "arguments": {
                "loop": [
                    "Loop"
                ]
            }
        },
        "MultipleCommandException.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmds": [
                    "List['CmdName']"
                ]
            }
        },
        "Monitor.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Monitor.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.start": {
            "name": "start",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.closed": {
            "name": "closed",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.__enter__": {
            "name": "__enter__",
            "location": 113,
            "return": [
                "'Monitor'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.__exit__": {
            "name": "__exit__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[TracebackType]"
                ]
            }
        },
        "Monitor.close": {
            "name": "close",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._server": {
            "name": "_server",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._interactive_loop": {
            "name": "_interactive_loop",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sin": [
                    "IO[str]"
                ],
                "sout": [
                    "IO[str]"
                ]
            }
        },
        "Monitor._command_dispatch": {
            "name": "_command_dispatch",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_input": [
                    "str"
                ]
            }
        },
        "Monitor._filter_cmds": {
            "name": "_filter_cmds",
            "location": 225,
            "return": [
                "Generator[(CmdName, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.map_args": {
            "name": "map_args",
            "location": 238,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "Callable[(..., Any)]"
                ],
                "args": [
                    "Sequence[str]"
                ]
            }
        },
        "Monitor.precmd": {
            "name": "precmd",
            "location": 272,
            "return": [
                "Tuple[(Callable[(..., Any)], List[str])]"
            ],
            "arguments": {
                "self": [],
                "comm": [
                    "str"
                ],
                "args": [
                    "Sequence[str]"
                ]
            }
        },
        "Monitor.postcmd": {
            "name": "postcmd",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comm": [
                    "str"
                ],
                "args": [
                    "Sequence[str]"
                ],
                "result": [
                    "Any"
                ],
                "exception": [
                    "Optional[Exception]"
                ]
            }
        },
        "Monitor.getcmd": {
            "name": "getcmd",
            "location": 286,
            "return": [
                "Callable[(..., Any)]"
            ],
            "arguments": {
                "self": [],
                "comm": [
                    "str"
                ]
            }
        },
        "Monitor.emptyline": {
            "name": "emptyline",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.default": {
            "name": "default",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comm": [
                    "str"
                ]
            }
        },
        "Monitor.do_help": {
            "name": "do_help",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.do_ps": {
            "name": "do_ps",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.do_where": {
            "name": "do_where",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "taskid": [
                    "int"
                ]
            }
        },
        "Monitor.do_signal": {
            "name": "do_signal",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signame": [
                    "str"
                ]
            }
        },
        "Monitor.do_stacktrace": {
            "name": "do_stacktrace",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.do_cancel": {
            "name": "do_cancel",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "taskid": [
                    "int"
                ]
            }
        },
        "Monitor.do_exit": {
            "name": "do_exit",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.do_console": {
            "name": "do_console",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.do_help._h": {
            "name": "_h",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "Monitor.map_args.type_": {
            "name": "type_",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [
                    "Any"
                ]
            }
        }
    },
    "aiomonitor-master/aiomonitor/mypy_types.py": {},
    "aiomonitor-master/aiomonitor/utils.py": {
        "_get_stack": {
            "name": "_get_stack",
            "location": 19,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "task": [
                    "'asyncio.Task[Any]'"
                ]
            }
        },
        "_format_stack": {
            "name": "_format_stack",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "'asyncio.Task[Any]'"
                ]
            }
        },
        "task_by_id": {
            "name": "task_by_id",
            "location": 53,
            "return": [
                "'Optional[asyncio.Task[Any]]'"
            ],
            "arguments": {
                "taskid": [
                    "int"
                ],
                "loop": [
                    "Loop"
                ]
            }
        },
        "init_console_server": {
            "name": "init_console_server",
            "location": 64,
            "return": [
                "'Future[Server]'"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "locals": [
                    "OptLocals"
                ],
                "loop": [
                    "Loop"
                ]
            }
        },
        "console_proxy": {
            "name": "console_proxy",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "sin": [
                    "IO[str]"
                ],
                "sout": [
                    "IO[str]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "alt_names": {
            "name": "alt_names",
            "location": 115,
            "return": [
                "Callable[(..., Any)]"
            ],
            "arguments": {
                "names": [
                    "str"
                ]
            }
        },
        "all_tasks": {
            "name": "all_tasks",
            "location": 129,
            "return": [
                "'Set[asyncio.Task[Any]]'"
            ],
            "arguments": {
                "loop": [
                    "Loop"
                ]
            }
        },
        "init_console_server._factory": {
            "name": "_factory",
            "location": 68,
            "return": [
                "aioconsole.AsynchronousConsole"
            ],
            "arguments": {
                "streams": [
                    "Any"
                ]
            }
        },
        "alt_names.decorator": {
            "name": "decorator",
            "location": 123,
            "return": [
                "Callable[(..., Any)]"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., Any)]"
                ]
            }
        }
    },
    "aiomonitor-master/aiomonitor/__init__.py": {},
    "aiomonitor-master/docs/conf.py": {},
    "aiomonitor-master/examples/simple_aiohttp_srv.py": {},
    "aiomonitor-master/examples/simple_loop.py": {},
    "aiomonitor-master/examples/web_srv.py": {},
    "aiomonitor-master/examples/web_srv_custom_monitor.py": {
        "WebMonitor.do_hello": {
            "name": "do_hello",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "sin": [],
                "sout": [],
                "name": []
            }
        }
    },
    "aiomonitor-master/tests/conftest.py": {
        "unused_port": {
            "name": "unused_port",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 18,
            "return": [],
            "arguments": {
                "metafunc": []
            }
        },
        "loop": {
            "name": "loop",
            "location": 25,
            "return": [],
            "arguments": {
                "request": [],
                "loop_type": []
            }
        },
        "unused_port.f": {
            "name": "f",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "aiomonitor-master/tests/test_monitor.py": {
        "monitor_common": {
            "name": "monitor_common",
            "location": 12,
            "return": [],
            "arguments": {
                "loop": [],
                "monitor_cls": []
            }
        },
        "monitor": {
            "name": "monitor",
            "location": 34,
            "return": [],
            "arguments": {
                "request": [],
                "loop": []
            }
        },
        "tn_client": {
            "name": "tn_client",
            "location": 45,
            "return": [],
            "arguments": {
                "monitor": []
            }
        },
        "console_enabled": {
            "name": "console_enabled",
            "location": 62,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_ctor": {
            "name": "test_ctor",
            "location": 66,
            "return": [],
            "arguments": {
                "loop": [],
                "unused_port": [],
                "console_enabled": []
            }
        },
        "execute": {
            "name": "execute",
            "location": 97,
            "return": [],
            "arguments": {
                "tn": [],
                "command": [],
                "pattern": []
            }
        },
        "get_task_ids": {
            "name": "get_task_ids",
            "location": 103,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "test_basic_monitor": {
            "name": "test_basic_monitor",
            "location": 107,
            "return": [],
            "arguments": {
                "monitor": [],
                "tn_client": [],
                "loop": []
            }
        },
        "test_cancel_where_tasks": {
            "name": "test_cancel_where_tasks",
            "location": 143,
            "return": [],
            "arguments": {
                "monitor": [],
                "tn_client": [],
                "loop": []
            }
        },
        "test_monitor_with_console": {
            "name": "test_monitor_with_console",
            "location": 163,
            "return": [],
            "arguments": {
                "monitor": [],
                "tn_client": []
            }
        },
        "test_custom_monitor_class": {
            "name": "test_custom_monitor_class",
            "location": 180,
            "return": [],
            "arguments": {
                "monitor": [],
                "tn_client": []
            }
        },
        "monitor_common.make_baz": {
            "name": "make_baz",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "monitor_common.f": {
            "name": "f",
            "location": 19,
            "return": [],
            "arguments": {
                "mon": [],
                "loop": [],
                "ev": []
            }
        },
        "monitor.MonitorSubclass.do_something": {
            "name": "do_something",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        }
    }
}
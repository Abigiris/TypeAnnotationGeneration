{
    "airflow-postgres-plugin-master/setup.py": {},
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/plugin.py": {},
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/__init__.py": {},
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/hooks/postgres_hook.py": {
        "PostgresHook.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "postgres_conn_id": [
                    "str"
                ],
                "database": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "PostgresHook._serialize_cell": {
            "name": "_serialize_cell",
            "location": 46,
            "return": [],
            "arguments": {
                "cell": [],
                "conn": []
            }
        },
        "PostgresHook.engine": {
            "name": "engine",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresHook.get_conn": {
            "name": "get_conn",
            "location": 56,
            "return": [
                "psycopg2._psycopg.connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresHook.get_sqlalchemy_sessionmaker": {
            "name": "get_sqlalchemy_sessionmaker",
            "location": 89,
            "return": [
                "Type[Session]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresHook.get_sqlalchemy_session": {
            "name": "get_sqlalchemy_session",
            "location": 95,
            "return": [
                "Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresHook.get_sqlalchemy_metadata": {
            "name": "get_sqlalchemy_metadata",
            "location": 99,
            "return": [
                "MetaData"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str"
                ]
            }
        },
        "PostgresHook.get_sqlalchemy_table": {
            "name": "get_sqlalchemy_table",
            "location": 108,
            "return": [
                "sqlalchemy.Table"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "PostgresHook.sqlalchemy_session": {
            "name": "sqlalchemy_session",
            "location": 118,
            "return": [
                "Generator[(Session, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresHook.duplicate_table_to_temp_table": {
            "name": "duplicate_table_to_temp_table",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "from_table": [
                    "str"
                ],
                "temp_name": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "include_constraints": [
                    "bool"
                ]
            }
        },
        "PostgresHook.duplicate_table": {
            "name": "duplicate_table",
            "location": 152,
            "return": [
                "sqlalchemy.Table"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "duplicate_name": [
                    "str"
                ],
                "include_constraints": [
                    "bool"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "PostgresHook.upsert": {
            "name": "upsert",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "from_table": [
                    "sqlalchemy.Table"
                ],
                "to_table": [
                    "sqlalchemy.Table"
                ],
                "extra_constraints": [
                    "List[str]"
                ]
            }
        },
        "PostgresHook.load": {
            "name": "load",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "PostgresHook.get_table_if_exists": {
            "name": "get_table_if_exists",
            "location": 229,
            "return": [
                "Optional[sqlalchemy.Table]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "engine": [
                    "sqlalchemy.engine.Engine"
                ]
            }
        },
        "PostgresHook.get_sqlalchemy_col_types": {
            "name": "get_sqlalchemy_col_types",
            "location": 240,
            "return": [
                "Dict[(str, Type)]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "sqlalchemy.Table"
                ],
                "exclude": [
                    "List[str]"
                ]
            }
        },
        "PostgresHook.get_sqlalchemy_table_python_types": {
            "name": "get_sqlalchemy_table_python_types",
            "location": 249,
            "return": [
                "Dict[(str, Type)]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "sqlalchemy.Table"
                ],
                "exclude": [
                    "List[str]"
                ]
            }
        },
        "PostgresHook.load_df": {
            "name": "load_df",
            "location": 264,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pandas.DataFrame"
                ],
                "table": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "chunksize": [
                    "int"
                ],
                "include_index": [
                    "bool"
                ],
                "engine": [
                    "Optional[sqlalchemy.engine.Engine]"
                ],
                "conn": [
                    "Optional[psycopg2.extensions.connection]"
                ],
                "col_type_map": [
                    "Dict[(str, sqlalchemy.sql.type_api.TypeEngine)]"
                ],
                "create_tables": [
                    "bool"
                ],
                "column_map": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "PostgresHook.stream_csv_to_df": {
            "name": "stream_csv_to_df",
            "location": 320,
            "return": [
                "Generator[(None, None, pandas.DataFrame)]"
            ],
            "arguments": {
                "self": [],
                "csv_file": [
                    "Union[(IO, str)]"
                ],
                "schema": [
                    "str"
                ],
                "sep": [
                    "str"
                ],
                "compression": [
                    "str"
                ],
                "chunksize": [
                    "int"
                ],
                "table": [
                    "Optional[str]"
                ],
                "quoting": [
                    "int"
                ],
                "include_index": [
                    "bool"
                ],
                "col_type_map": [
                    "Dict[(str, Type)]"
                ],
                "columns": [
                    "List[str]"
                ]
            }
        },
        "PostgresHook.load_pandas": {
            "name": "load_pandas",
            "location": 356,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "sep": [
                    "str"
                ],
                "compression": [
                    "str"
                ],
                "chunksize": [
                    "int"
                ],
                "filepath": [
                    "Union[(IO, str)]"
                ],
                "quoting": [
                    "int"
                ],
                "include_index": [
                    "bool"
                ],
                "templates_dict": [
                    "Dict[(str, str)]"
                ],
                "create_tables": [
                    "bool"
                ]
            }
        },
        "PostgresHook.dump": {
            "name": "dump",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "PostgresHook.query": {
            "name": "query",
            "location": 423,
            "return": [
                "Generator[(Optional[List[Any]], None, None)]"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str"
                ],
                "parameters": [
                    "List[str]"
                ],
                "include_headers": [
                    "bool"
                ],
                "returns_rows": [
                    "bool"
                ]
            }
        },
        "PostgresHook.export": {
            "name": "export",
            "location": 452,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str"
                ],
                "filepath": [
                    "str"
                ],
                "parameters": [
                    "List[str]"
                ],
                "include_headers": [
                    "bool"
                ]
            }
        },
        "PostgresHook.closed_conn_if_created": {
            "name": "closed_conn_if_created",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "PostgresHook.open_buffer_from_file": {
            "name": "open_buffer_from_file",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "open": []
            }
        },
        "PostgresHook.copy_expert": {
            "name": "copy_expert",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [],
                "filename": [],
                "open": [],
                "conn": []
            }
        },
        "PostgresHook.bulk_load": {
            "name": "bulk_load",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "tmp_file": [],
                "schema": [],
                "conn": [],
                "columns": []
            }
        },
        "PostgresHook.bulk_dump": {
            "name": "bulk_dump",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "tmp_file": []
            }
        },
        "StringIteratorIO.__init__": {
            "name": "__init__",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "iter": [
                    "Iterator[str]"
                ]
            }
        },
        "StringIteratorIO.readable": {
            "name": "readable",
            "location": 550,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringIteratorIO._read1": {
            "name": "_read1",
            "location": 553,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "Optional[int]"
                ]
            }
        },
        "StringIteratorIO.read": {
            "name": "read",
            "location": 563,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "Optional[int]"
                ]
            }
        }
    },
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/hooks/__init__.py": {},
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/operators/file_to_postgres_table_operator.py": {
        "FileToPostgresTableOperator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "conn_id": [
                    "str"
                ],
                "table": [
                    "str"
                ],
                "filepath": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "temp_table": [
                    "bool"
                ]
            }
        },
        "FileToPostgresTableOperator.hook": {
            "name": "hook",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "FileToPostgresTableOperator.execute": {
            "name": "execute",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/operators/pandas_to_postgres_bulk.py": {
        "temp_environ": {
            "name": "temp_environ",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "PandasToPostgresBulkOperator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "conn_id": [
                    "str"
                ],
                "filepaths": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "sep": [
                    "str"
                ],
                "compression": [
                    "str"
                ],
                "chunksize": [
                    "int"
                ],
                "templates_dict": [
                    "Dict[(str, str)]"
                ],
                "max_connections": [
                    "int"
                ],
                "quoting": [
                    "int"
                ],
                "include_index": [
                    "bool"
                ],
                "s3_conn_id": [
                    "str"
                ]
            }
        },
        "PandasToPostgresBulkOperator.hook": {
            "name": "hook",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "PandasToPostgresBulkOperator.s3_hook": {
            "name": "s3_hook",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "PandasToPostgresBulkOperator._get_s3_credentials": {
            "name": "_get_s3_credentials",
            "location": 76,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasToPostgresBulkOperator._load_file": {
            "name": "_load_file",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "PandasToPostgresBulkOperator.execute": {
            "name": "execute",
            "location": 105,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/operators/pandas_to_postgres_operator.py": {
        "temp_environ": {
            "name": "temp_environ",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "PandasToPostgresTableOperator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "conn_id": [
                    "str"
                ],
                "table": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "sep": [
                    "str"
                ],
                "compression": [
                    "str"
                ],
                "chunksize": [
                    "int"
                ],
                "templates_dict": [
                    "Dict[(str, str)]"
                ],
                "filepath": [
                    "Union[(IO, str)]"
                ],
                "quoting": [
                    "int"
                ],
                "s3_conn_id": [
                    "str"
                ],
                "include_index": [
                    "bool"
                ],
                "temp_table": [
                    "bool"
                ]
            }
        },
        "PandasToPostgresTableOperator.hook": {
            "name": "hook",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "PandasToPostgresTableOperator.s3_hook": {
            "name": "s3_hook",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "PandasToPostgresTableOperator._get_s3_credentials": {
            "name": "_get_s3_credentials",
            "location": 79,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasToPostgresTableOperator.execute": {
            "name": "execute",
            "location": 86,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/operators/postgres_table_to_file_operator.py": {
        "PostgresTableToFileOperator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "conn_id": [
                    "str"
                ],
                "table": [
                    "str"
                ],
                "filepath": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "PostgresTableToFileOperator.hook": {
            "name": "hook",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "PostgresTableToFileOperator.execute": {
            "name": "execute",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/operators/postgres_to_file_operator.py": {
        "PostgresToFileOperator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "conn_id": [
                    "str"
                ],
                "sql": [
                    "str"
                ],
                "sql_args": [
                    "str"
                ],
                "filepath": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "PostgresToFileOperator.hook": {
            "name": "hook",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "PostgresToFileOperator.execute": {
            "name": "execute",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "airflow-postgres-plugin-master/src/airflow_postgres_plugin/operators/__init__.py": {},
    "airflow-postgres-plugin-master/tasks/__init__.py": {
        "typecheck": {
            "name": "typecheck",
            "location": 16,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "build_package": {
            "name": "build_package",
            "location": 24,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "upload": {
            "name": "upload",
            "location": 37,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "build_docs": {
            "name": "build_docs",
            "location": 46,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    }
}
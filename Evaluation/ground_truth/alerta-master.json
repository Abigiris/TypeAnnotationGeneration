{
    "alerta-master/setup.py": {
        "read": {
            "name": "read",
            "location": 10,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "alerta-master/wsgi.py": {},
    "alerta-master/alerta/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 48,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config_override": [
                    "Dict[(str, Any)]"
                ],
                "environment": [
                    "str"
                ]
            }
        },
        "create_celery_app": {
            "name": "create_celery_app",
            "location": 101,
            "return": [
                "'Celery'"
            ],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "create_celery_app.ContextTask.__call__": {
            "name": "__call__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/commands.py": {
        "_create_app": {
            "name": "_create_app",
            "location": 17,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config_override": [
                    "Dict[(str, Any)]"
                ],
                "environment": [
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 33,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "key": {
            "name": "key",
            "location": 55,
            "return": [],
            "arguments": {
                "username": [],
                "want_key": [],
                "scopes": [],
                "duration": [],
                "text": [],
                "customer": [],
                "all": [],
                "force": []
            }
        },
        "keys": {
            "name": "keys",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 154,
            "return": [],
            "arguments": {
                "name": [],
                "email": [],
                "password": [],
                "text": [],
                "all": []
            }
        },
        "users": {
            "name": "users",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "key.create_key": {
            "name": "create_key",
            "location": 69,
            "return": [],
            "arguments": {
                "admin": [],
                "key": []
            }
        },
        "CommandWithOptionalPassword.parse_args": {
            "name": "parse_args",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "args": []
            }
        },
        "user.create_user": {
            "name": "create_user",
            "location": 168,
            "return": [],
            "arguments": {
                "name": [],
                "login": []
            }
        }
    },
    "alerta-master/alerta/dev.py": {},
    "alerta-master/alerta/exceptions.py": {
        "handle_http_error": {
            "name": "handle_http_error",
            "location": 83,
            "return": [
                "Tuple[(Response, int)]"
            ],
            "arguments": {
                "error": [
                    "HTTPException"
                ]
            }
        },
        "handle_api_error": {
            "name": "handle_api_error",
            "location": 98,
            "return": [
                "Tuple[(Response, int)]"
            ],
            "arguments": {
                "error": [
                    "ApiError"
                ]
            }
        },
        "handle_basic_auth_error": {
            "name": "handle_basic_auth_error",
            "location": 110,
            "return": [
                "Tuple[(Response, int, Dict[(str, Any)])]"
            ],
            "arguments": {
                "error": [
                    "BasicAuthError"
                ]
            }
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 120,
            "return": [
                "Union[(Tuple[(Response, int)], Exception)]"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ]
            }
        },
        "BaseError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "code": [],
                "errors": []
            }
        },
        "HeartbeatReceived.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "ExceptionHandlers.register": {
            "name": "register",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "alerta-master/alerta/settings.py": {},
    "alerta-master/alerta/tasks.py": {
        "action_alerts": {
            "name": "action_alerts",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "alerts": [
                    "List[str]"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "timeout": [
                    "Optional[int]"
                ]
            }
        }
    },
    "alerta-master/alerta/version.py": {},
    "alerta-master/alerta/__init__.py": {},
    "alerta-master/alerta/auth/basic.py": {
        "signup": {
            "name": "signup",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "verify_email": {
            "name": "verify_email",
            "location": 109,
            "return": [],
            "arguments": {
                "hash": []
            }
        },
        "forgot": {
            "name": "forgot",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 151,
            "return": [],
            "arguments": {
                "hash": []
            }
        }
    },
    "alerta-master/alerta/auth/basic_ldap.py": {
        "login": {
            "name": "login",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/decorators.py": {
        "permission": {
            "name": "permission",
            "location": 24,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "permission.decorated": {
            "name": "decorated",
            "location": 25,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "permission.decorated.wrapped": {
            "name": "wrapped",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/github.py": {
        "github": {
            "name": "github",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/hmac.py": {
        "get_credentials": {
            "name": "get_credentials",
            "location": 5,
            "return": [],
            "arguments": {
                "key_id": [
                    "str"
                ]
            }
        },
        "HmacAuth.authenticate": {
            "name": "authenticate",
            "location": 22,
            "return": [],
            "arguments": {
                "r": [
                    "Request"
                ]
            }
        }
    },
    "alerta-master/alerta/auth/login.py": {
        "login": {
            "name": "login",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/logout.py": {
        "logout": {
            "name": "logout",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/oidc.py": {
        "get_oidc_configuration": {
            "name": "get_oidc_configuration",
            "location": 20,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "openid": {
            "name": "openid",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/saml.py": {
        "get_saml2_config": {
            "name": "get_saml2_config",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "saml_client": {
            "name": "saml_client",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "saml_redirect_to_idp": {
            "name": "saml_redirect_to_idp",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "saml_response_from_idp": {
            "name": "saml_response_from_idp",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "saml_metadata": {
            "name": "saml_metadata",
            "location": 122,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/userinfo.py": {
        "userinfo": {
            "name": "userinfo",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/utils.py": {
        "not_authorized": {
            "name": "not_authorized",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "allowed_setting": [
                    "str"
                ],
                "groups": [
                    "List[str]"
                ]
            }
        },
        "get_customers": {
            "name": "get_customers",
            "location": 39,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "login": [
                    "str"
                ],
                "groups": [
                    "List[str]"
                ]
            }
        },
        "create_token": {
            "name": "create_token",
            "location": 49,
            "return": [
                "'Jwt'"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "login": [
                    "str"
                ],
                "provider": [
                    "str"
                ],
                "customers": [
                    "List[str]"
                ],
                "scopes": [
                    "List[str]"
                ],
                "email": [
                    "str"
                ],
                "email_verified": [
                    "bool"
                ],
                "picture": [
                    "str"
                ]
            }
        },
        "link": {
            "name": "link",
            "location": 73,
            "return": [],
            "arguments": {
                "base_url": []
            }
        },
        "send_confirmation": {
            "name": "send_confirmation",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "'User'"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "send_password_reset": {
            "name": "send_password_reset",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "'User'"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "generate_email_token": {
            "name": "generate_email_token",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "salt": [
                    "str"
                ]
            }
        },
        "confirm_email_token": {
            "name": "confirm_email_token",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "salt": [
                    "str"
                ],
                "expiration": [
                    "int"
                ]
            }
        },
        "generate_password_hash": {
            "name": "generate_password_hash",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "password": [
                    "Any"
                ]
            }
        },
        "check_password_hash": {
            "name": "check_password_hash",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "pwhash": [
                    "str"
                ],
                "password": [
                    "Any"
                ]
            }
        }
    },
    "alerta-master/alerta/auth/__init__.py": {
        "only_json": {
            "name": "only_json",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "AuthBlueprint.register": {
            "name": "register",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "options": []
            }
        }
    },
    "alerta-master/alerta/database/base.py": {
        "get_backend": {
            "name": "get_backend",
            "location": 20,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "load_backend": {
            "name": "load_backend",
            "location": 31,
            "return": [],
            "arguments": {
                "backend": []
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Database.init_db": {
            "name": "init_db",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Database.create_engine": {
            "name": "create_engine",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "uri": [],
                "dbname": [],
                "raise_on_error": []
            }
        },
        "Database.connect": {
            "name": "connect",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.name": {
            "name": "name",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.version": {
            "name": "version",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.is_alive": {
            "name": "is_alive",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.close": {
            "name": "close",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "Database.destroy": {
            "name": "destroy",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.get_db": {
            "name": "get_db",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.teardown_db": {
            "name": "teardown_db",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "Database.get_severity": {
            "name": "get_severity",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Database.get_status": {
            "name": "get_status",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Database.is_duplicate": {
            "name": "is_duplicate",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Database.is_correlated": {
            "name": "is_correlated",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Database.is_flapping": {
            "name": "is_flapping",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "window": [],
                "count": []
            }
        },
        "Database.dedup_alert": {
            "name": "dedup_alert",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "history": []
            }
        },
        "Database.correlate_alert": {
            "name": "correlate_alert",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "history": []
            }
        },
        "Database.create_alert": {
            "name": "create_alert",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Database.set_alert": {
            "name": "set_alert",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "severity": [],
                "status": [],
                "tags": [],
                "attributes": [],
                "timeout": [],
                "previous_severity": [],
                "update_time": [],
                "history": []
            }
        },
        "Database.get_alert": {
            "name": "get_alert",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Database.set_status": {
            "name": "set_status",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "status": [],
                "timeout": [],
                "update_time": [],
                "history": []
            }
        },
        "Database.tag_alert": {
            "name": "tag_alert",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Database.untag_alert": {
            "name": "untag_alert",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Database.update_tags": {
            "name": "update_tags",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Database.update_attributes": {
            "name": "update_attributes",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "old_attrs": [],
                "new_attrs": []
            }
        },
        "Database.add_history": {
            "name": "add_history",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "history": []
            }
        },
        "Database.delete_alert": {
            "name": "delete_alert",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.tag_alerts": {
            "name": "tag_alerts",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "tags": []
            }
        },
        "Database.untag_alerts": {
            "name": "untag_alerts",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "tags": []
            }
        },
        "Database.update_attributes_by_query": {
            "name": "update_attributes_by_query",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "attributes": []
            }
        },
        "Database.delete_alerts": {
            "name": "delete_alerts",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.get_alerts": {
            "name": "get_alerts",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "raw_data": [],
                "history": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_alert_history": {
            "name": "get_alert_history",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_history": {
            "name": "get_history",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_count": {
            "name": "get_count",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.get_counts": {
            "name": "get_counts",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": []
            }
        },
        "Database.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.get_topn_count": {
            "name": "get_topn_count",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Database.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Database.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Database.get_environments": {
            "name": "get_environments",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Database.get_services": {
            "name": "get_services",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Database.get_alert_groups": {
            "name": "get_alert_groups",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Database.get_alert_tags": {
            "name": "get_alert_tags",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Database.create_blackout": {
            "name": "create_blackout",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "blackout": []
            }
        },
        "Database.get_blackout": {
            "name": "get_blackout",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Database.get_blackouts": {
            "name": "get_blackouts",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_blackouts_count": {
            "name": "get_blackouts_count",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.is_blackout_period": {
            "name": "is_blackout_period",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Database.update_blackout": {
            "name": "update_blackout",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.delete_blackout": {
            "name": "delete_blackout",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.upsert_heartbeat": {
            "name": "upsert_heartbeat",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "heartbeat": []
            }
        },
        "Database.get_heartbeat": {
            "name": "get_heartbeat",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Database.get_heartbeats": {
            "name": "get_heartbeats",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_heartbeats_by_status": {
            "name": "get_heartbeats_by_status",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_heartbeats_count": {
            "name": "get_heartbeats_count",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.create_key": {
            "name": "create_key",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Database.get_key": {
            "name": "get_key",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "user": []
            }
        },
        "Database.get_keys": {
            "name": "get_keys",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_keys_by_user": {
            "name": "get_keys_by_user",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Database.get_keys_count": {
            "name": "get_keys_count",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.update_key": {
            "name": "update_key",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Database.update_key_last_used": {
            "name": "update_key_last_used",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Database.delete_key": {
            "name": "delete_key",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Database.create_user": {
            "name": "create_user",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Database.get_user": {
            "name": "get_user",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_users": {
            "name": "get_users",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_users_count": {
            "name": "get_users_count",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Database.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Database.get_user_by_hash": {
            "name": "get_user_by_hash",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "hash": []
            }
        },
        "Database.update_last_login": {
            "name": "update_last_login",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.update_user": {
            "name": "update_user",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.update_user_attributes": {
            "name": "update_user_attributes",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "old_attrs": [],
                "new_attrs": []
            }
        },
        "Database.delete_user": {
            "name": "delete_user",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.set_email_hash": {
            "name": "set_email_hash",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "hash": []
            }
        },
        "Database.create_group": {
            "name": "create_group",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Database.get_group": {
            "name": "get_group",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_group_users": {
            "name": "get_group_users",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_groups": {
            "name": "get_groups",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_groups_count": {
            "name": "get_groups_count",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.update_group": {
            "name": "update_group",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "user": []
            }
        },
        "Database.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "user": []
            }
        },
        "Database.delete_group": {
            "name": "delete_group",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_groups_by_user": {
            "name": "get_groups_by_user",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Database.create_perm": {
            "name": "create_perm",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "Database.get_perm": {
            "name": "get_perm",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_perms": {
            "name": "get_perms",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_perms_count": {
            "name": "get_perms_count",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.update_perm": {
            "name": "update_perm",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.delete_perm": {
            "name": "delete_perm",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_scopes_by_match": {
            "name": "get_scopes_by_match",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "login": [],
                "matches": []
            }
        },
        "Database.create_customer": {
            "name": "create_customer",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "Database.get_customer": {
            "name": "get_customer",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_customers": {
            "name": "get_customers",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_customers_count": {
            "name": "get_customers_count",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Database.update_customer": {
            "name": "update_customer",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.delete_customer": {
            "name": "delete_customer",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_customers_by_match": {
            "name": "get_customers_by_match",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "login": [],
                "matches": []
            }
        },
        "Database.create_note": {
            "name": "create_note",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "note": []
            }
        },
        "Database.get_note": {
            "name": "get_note",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_notes": {
            "name": "get_notes",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.get_customer_notes": {
            "name": "get_customer_notes",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "page": [],
                "page_size": []
            }
        },
        "Database.update_note": {
            "name": "update_note",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.delete_note": {
            "name": "delete_note",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Database.get_metrics": {
            "name": "get_metrics",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "Database.set_gauge": {
            "name": "set_gauge",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "gauge": []
            }
        },
        "Database.inc_counter": {
            "name": "inc_counter",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "Database.update_timer": {
            "name": "update_timer",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "timer": []
            }
        },
        "Database.get_expired": {
            "name": "get_expired",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "expired_threshold": [],
                "info_threshold": []
            }
        },
        "Database.get_unshelve": {
            "name": "get_unshelve",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.get_unack": {
            "name": "get_unack",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryBuilder.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "QueryBuilder.init_app": {
            "name": "init_app",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "QueryBuilder.Alerts.from_params": {
            "name": "from_params",
            "location": 474,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        },
        "QueryBuilder.Blackouts.from_params": {
            "name": "from_params",
            "location": 480,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        },
        "QueryBuilder.Heartbeats.from_params": {
            "name": "from_params",
            "location": 486,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        },
        "QueryBuilder.ApiKeys.from_params": {
            "name": "from_params",
            "location": 492,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        },
        "QueryBuilder.Users.from_params": {
            "name": "from_params",
            "location": 498,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        },
        "QueryBuilder.Groups.from_params": {
            "name": "from_params",
            "location": 504,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        },
        "QueryBuilder.Permissions.from_params": {
            "name": "from_params",
            "location": 510,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        },
        "QueryBuilder.Customers.from_params": {
            "name": "from_params",
            "location": 516,
            "return": [],
            "arguments": {
                "params": [],
                "customers": [],
                "query_time": []
            }
        }
    },
    "alerta-master/alerta/database/__init__.py": {},
    "alerta-master/alerta/database/backends/__init__.py": {},
    "alerta-master/alerta/database/backends/mongodb/base.py": {
        "Backend.create_engine": {
            "name": "create_engine",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "uri": [],
                "dbname": [],
                "raise_on_error": []
            }
        },
        "Backend.connect": {
            "name": "connect",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend._create_indexes": {
            "name": "_create_indexes",
            "location": 50,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "Backend._update_lookups": {
            "name": "_update_lookups",
            "location": 70,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "Backend.name": {
            "name": "name",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.version": {
            "name": "version",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.is_alive": {
            "name": "is_alive",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.close": {
            "name": "close",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "Backend.destroy": {
            "name": "destroy",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_severity": {
            "name": "get_severity",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.get_status": {
            "name": "get_status",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.is_duplicate": {
            "name": "is_duplicate",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.is_correlated": {
            "name": "is_correlated",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.is_flapping": {
            "name": "is_flapping",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "window": [],
                "count": []
            }
        },
        "Backend.dedup_alert": {
            "name": "dedup_alert",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "history": []
            }
        },
        "Backend.correlate_alert": {
            "name": "correlate_alert",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "history": []
            }
        },
        "Backend.create_alert": {
            "name": "create_alert",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.set_alert": {
            "name": "set_alert",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "severity": [],
                "status": [],
                "tags": [],
                "attributes": [],
                "timeout": [],
                "previous_severity": [],
                "update_time": [],
                "history": []
            }
        },
        "Backend.get_alert": {
            "name": "get_alert",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Backend.set_status": {
            "name": "set_status",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "status": [],
                "timeout": [],
                "update_time": [],
                "history": []
            }
        },
        "Backend.tag_alert": {
            "name": "tag_alert",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Backend.untag_alert": {
            "name": "untag_alert",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Backend.update_tags": {
            "name": "update_tags",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Backend.update_attributes": {
            "name": "update_attributes",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "old_attrs": [],
                "new_attrs": []
            }
        },
        "Backend.delete_alert": {
            "name": "delete_alert",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.tag_alerts": {
            "name": "tag_alerts",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "tags": []
            }
        },
        "Backend.untag_alerts": {
            "name": "untag_alerts",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "tags": []
            }
        },
        "Backend.update_attributes_by_query": {
            "name": "update_attributes_by_query",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "attributes": []
            }
        },
        "Backend.delete_alerts": {
            "name": "delete_alerts",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.add_history": {
            "name": "add_history",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "history": []
            }
        },
        "Backend.get_alerts": {
            "name": "get_alerts",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "raw_data": [],
                "history": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_alert_history": {
            "name": "get_alert_history",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_history": {
            "name": "get_history",
            "location": 603,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_count": {
            "name": "get_count",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_counts": {
            "name": "get_counts",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": []
            }
        },
        "Backend.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_topn_count": {
            "name": "get_topn_count",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Backend.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Backend.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 763,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Backend.get_environments": {
            "name": "get_environments",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.get_services": {
            "name": "get_services",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.get_alert_groups": {
            "name": "get_alert_groups",
            "location": 881,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.get_alert_tags": {
            "name": "get_alert_tags",
            "location": 904,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.create_blackout": {
            "name": "create_blackout",
            "location": 928,
            "return": [],
            "arguments": {
                "self": [],
                "blackout": []
            }
        },
        "Backend.get_blackout": {
            "name": "get_blackout",
            "location": 958,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Backend.get_blackouts": {
            "name": "get_blackouts",
            "location": 966,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_blackouts_count": {
            "name": "get_blackouts_count",
            "location": 970,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.is_blackout_period": {
            "name": "is_blackout_period",
            "location": 974,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.update_blackout": {
            "name": "update_blackout",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_blackout": {
            "name": "delete_blackout",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.upsert_heartbeat": {
            "name": "upsert_heartbeat",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "heartbeat": []
            }
        },
        "Backend.get_heartbeat": {
            "name": "get_heartbeat",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Backend.get_heartbeats": {
            "name": "get_heartbeats",
            "location": 1102,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_heartbeats_by_status": {
            "name": "get_heartbeats_by_status",
            "location": 1106,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_heartbeats_count": {
            "name": "get_heartbeats_count",
            "location": 1135,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 1139,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.create_key": {
            "name": "create_key",
            "location": 1146,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.get_key": {
            "name": "get_key",
            "location": 1164,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "user": []
            }
        },
        "Backend.get_keys": {
            "name": "get_keys",
            "location": 1171,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_keys_by_user": {
            "name": "get_keys_by_user",
            "location": 1175,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Backend.get_keys_count": {
            "name": "get_keys_count",
            "location": 1178,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.update_key": {
            "name": "update_key",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.update_key_last_used": {
            "name": "update_key_last_used",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.delete_key": {
            "name": "delete_key",
            "location": 1200,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.create_user": {
            "name": "create_user",
            "location": 1207,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Backend.get_user": {
            "name": "get_user",
            "location": 1227,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_users": {
            "name": "get_users",
            "location": 1232,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_users_count": {
            "name": "get_users_count",
            "location": 1236,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 1240,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Backend.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 1246,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Backend.get_user_by_hash": {
            "name": "get_user_by_hash",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": [],
                "hash": []
            }
        },
        "Backend.update_last_login": {
            "name": "update_last_login",
            "location": 1256,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.update_user": {
            "name": "update_user",
            "location": 1262,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.update_user_attributes": {
            "name": "update_user_attributes",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "old_attrs": [],
                "new_attrs": []
            }
        },
        "Backend.delete_user": {
            "name": "delete_user",
            "location": 1294,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.set_email_hash": {
            "name": "set_email_hash",
            "location": 1298,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "hash": []
            }
        },
        "Backend.create_group": {
            "name": "create_group",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Backend.get_group": {
            "name": "get_group",
            "location": 1315,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_groups": {
            "name": "get_groups",
            "location": 1319,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_groups_count": {
            "name": "get_groups_count",
            "location": 1323,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_group_users": {
            "name": "get_group_users",
            "location": 1327,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.update_group": {
            "name": "update_group",
            "location": 1354,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "user": []
            }
        },
        "Backend.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 1366,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "user": []
            }
        },
        "Backend.delete_group": {
            "name": "delete_group",
            "location": 1370,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_groups_by_user": {
            "name": "get_groups_by_user",
            "location": 1374,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Backend.create_perm": {
            "name": "create_perm",
            "location": 1379,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "Backend.get_perm": {
            "name": "get_perm",
            "location": 1388,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_perms": {
            "name": "get_perms",
            "location": 1392,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_perms_count": {
            "name": "get_perms_count",
            "location": 1396,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.update_perm": {
            "name": "update_perm",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_perm": {
            "name": "delete_perm",
            "location": 1407,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_scopes_by_match": {
            "name": "get_scopes_by_match",
            "location": 1411,
            "return": [],
            "arguments": {
                "self": [],
                "login": [],
                "matches": []
            }
        },
        "Backend.create_customer": {
            "name": "create_customer",
            "location": 1430,
            "return": [],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "Backend.get_customer": {
            "name": "get_customer",
            "location": 1439,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_customers": {
            "name": "get_customers",
            "location": 1443,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_customers_count": {
            "name": "get_customers_count",
            "location": 1447,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.update_customer": {
            "name": "update_customer",
            "location": 1451,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_customer": {
            "name": "delete_customer",
            "location": 1458,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_customers_by_match": {
            "name": "get_customers_by_match",
            "location": 1462,
            "return": [],
            "arguments": {
                "self": [],
                "login": [],
                "matches": []
            }
        },
        "Backend.create_note": {
            "name": "create_note",
            "location": 1481,
            "return": [],
            "arguments": {
                "self": [],
                "note": []
            }
        },
        "Backend.get_note": {
            "name": "get_note",
            "location": 1498,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_notes": {
            "name": "get_notes",
            "location": 1502,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 1506,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_customer_notes": {
            "name": "get_customer_notes",
            "location": 1513,
            "return": [],
            "arguments": {
                "self": [],
                "customer": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.update_note": {
            "name": "update_note",
            "location": 1516,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_note": {
            "name": "delete_note",
            "location": 1524,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_metrics": {
            "name": "get_metrics",
            "location": 1530,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "Backend.set_gauge": {
            "name": "set_gauge",
            "location": 1534,
            "return": [],
            "arguments": {
                "self": [],
                "gauge": []
            }
        },
        "Backend.inc_counter": {
            "name": "inc_counter",
            "location": 1555,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "Backend.update_timer": {
            "name": "update_timer",
            "location": 1576,
            "return": [],
            "arguments": {
                "self": [],
                "timer": []
            }
        },
        "Backend.get_expired": {
            "name": "get_expired",
            "location": 1598,
            "return": [],
            "arguments": {
                "self": [],
                "expired_threshold": [],
                "info_threshold": []
            }
        },
        "Backend.get_unshelve": {
            "name": "get_unshelve",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_unack": {
            "name": "get_unack",
            "location": 1674,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_environments.pipeline": {
            "name": "pipeline",
            "location": 803,
            "return": [],
            "arguments": {
                "group_by": []
            }
        },
        "Backend.get_services.pipeline": {
            "name": "pipeline",
            "location": 840,
            "return": [],
            "arguments": {
                "group_by": []
            }
        }
    },
    "alerta-master/alerta/database/backends/mongodb/queryparser.py": {
        "UnaryOperation.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "BinaryOperation.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "SearchModifier.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchAnd.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchOr.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchNot.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTerm.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "SearchTerm.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "default_field": [],
                "default_operator": []
            }
        },
        "SearchTerm.__repr__.range_term": {
            "name": "range_term",
            "location": 83,
            "return": [],
            "arguments": {
                "field": [],
                "operator": [],
                "range": []
            }
        }
    },
    "alerta-master/alerta/database/backends/mongodb/utils.py": {
        "QueryBuilder.sort_by_columns": {
            "name": "sort_by_columns",
            "location": 31,
            "return": [],
            "arguments": {
                "params": [],
                "valid_params": []
            }
        },
        "QueryBuilder.filter_query": {
            "name": "filter_query",
            "location": 57,
            "return": [],
            "arguments": {
                "params": [],
                "valid_params": [],
                "query": []
            }
        },
        "Alerts.from_params": {
            "name": "from_params",
            "location": 139,
            "return": [],
            "arguments": {
                "params": [
                    "ImmutableMultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Blackouts.from_params": {
            "name": "from_params",
            "location": 221,
            "return": [],
            "arguments": {
                "params": [
                    "ImmutableMultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Heartbeats.from_params": {
            "name": "from_params",
            "location": 273,
            "return": [],
            "arguments": {
                "params": [
                    "ImmutableMultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "ApiKeys.from_params": {
            "name": "from_params",
            "location": 316,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Users.from_params": {
            "name": "from_params",
            "location": 367,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Groups.from_params": {
            "name": "from_params",
            "location": 390,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Permissions.from_params": {
            "name": "from_params",
            "location": 413,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Customers.from_params": {
            "name": "from_params",
            "location": 435,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        }
    },
    "alerta-master/alerta/database/backends/mongodb/__init__.py": {},
    "alerta-master/alerta/database/backends/postgres/base.py": {
        "HistoryAdapter.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "history": []
            }
        },
        "HistoryAdapter.prepare": {
            "name": "prepare",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "HistoryAdapter.getquoted": {
            "name": "getquoted",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HistoryAdapter.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.create_engine": {
            "name": "create_engine",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "uri": [],
                "dbname": [],
                "raise_on_error": []
            }
        },
        "Backend.connect": {
            "name": "connect",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend._adapt_datetime": {
            "name": "_adapt_datetime",
            "location": 119,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "Backend.name": {
            "name": "name",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.version": {
            "name": "version",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.is_alive": {
            "name": "is_alive",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.close": {
            "name": "close",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "Backend.destroy": {
            "name": "destroy",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_severity": {
            "name": "get_severity",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.get_status": {
            "name": "get_status",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.is_duplicate": {
            "name": "is_duplicate",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.is_correlated": {
            "name": "is_correlated",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.is_flapping": {
            "name": "is_flapping",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "window": [],
                "count": []
            }
        },
        "Backend.dedup_alert": {
            "name": "dedup_alert",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "history": []
            }
        },
        "Backend.correlate_alert": {
            "name": "correlate_alert",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "history": []
            }
        },
        "Backend.create_alert": {
            "name": "create_alert",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.set_alert": {
            "name": "set_alert",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "severity": [],
                "status": [],
                "tags": [],
                "attributes": [],
                "timeout": [],
                "previous_severity": [],
                "update_time": [],
                "history": []
            }
        },
        "Backend.get_alert": {
            "name": "get_alert",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Backend.set_status": {
            "name": "set_status",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "status": [],
                "timeout": [],
                "update_time": [],
                "history": []
            }
        },
        "Backend.tag_alert": {
            "name": "tag_alert",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Backend.untag_alert": {
            "name": "untag_alert",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Backend.update_tags": {
            "name": "update_tags",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "tags": []
            }
        },
        "Backend.update_attributes": {
            "name": "update_attributes",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "old_attrs": [],
                "new_attrs": []
            }
        },
        "Backend.delete_alert": {
            "name": "delete_alert",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.tag_alerts": {
            "name": "tag_alerts",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "tags": []
            }
        },
        "Backend.untag_alerts": {
            "name": "untag_alerts",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "tags": []
            }
        },
        "Backend.update_attributes_by_query": {
            "name": "update_attributes_by_query",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "attributes": []
            }
        },
        "Backend.delete_alerts": {
            "name": "delete_alerts",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.add_history": {
            "name": "add_history",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "history": []
            }
        },
        "Backend.get_alerts": {
            "name": "get_alerts",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "raw_data": [],
                "history": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_alert_history": {
            "name": "get_alert_history",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_history": {
            "name": "get_history",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_count": {
            "name": "get_count",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_counts": {
            "name": "get_counts",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": []
            }
        },
        "Backend.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_topn_count": {
            "name": "get_topn_count",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Backend.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Backend.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 594,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "group": [],
                "topn": []
            }
        },
        "Backend.get_environments": {
            "name": "get_environments",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.get_services": {
            "name": "get_services",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.get_alert_groups": {
            "name": "get_alert_groups",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.get_alert_tags": {
            "name": "get_alert_tags",
            "location": 703,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "topn": []
            }
        },
        "Backend.create_blackout": {
            "name": "create_blackout",
            "location": 714,
            "return": [],
            "arguments": {
                "self": [],
                "blackout": []
            }
        },
        "Backend.get_blackout": {
            "name": "get_blackout",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Backend.get_blackouts": {
            "name": "get_blackouts",
            "location": 735,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_blackouts_count": {
            "name": "get_blackouts_count",
            "location": 745,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.is_blackout_period": {
            "name": "is_blackout_period",
            "location": 753,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Backend.update_blackout": {
            "name": "update_blackout",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_blackout": {
            "name": "delete_blackout",
            "location": 870,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.upsert_heartbeat": {
            "name": "upsert_heartbeat",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "heartbeat": []
            }
        },
        "Backend.get_heartbeat": {
            "name": "get_heartbeat",
            "location": 892,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "customers": []
            }
        },
        "Backend.get_heartbeats": {
            "name": "get_heartbeats",
            "location": 903,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_heartbeats_by_status": {
            "name": "get_heartbeats_by_status",
            "location": 915,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_heartbeats_count": {
            "name": "get_heartbeats_count",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 958,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.create_key": {
            "name": "create_key",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.get_key": {
            "name": "get_key",
            "location": 976,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "user": []
            }
        },
        "Backend.get_keys": {
            "name": "get_keys",
            "location": 984,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_keys_by_user": {
            "name": "get_keys_by_user",
            "location": 993,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Backend.get_keys_count": {
            "name": "get_keys_count",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.update_key": {
            "name": "update_key",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.update_key_last_used": {
            "name": "update_key_last_used",
            "location": 1031,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.delete_key": {
            "name": "delete_key",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Backend.create_user": {
            "name": "create_user",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Backend.get_user": {
            "name": "get_user",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_users": {
            "name": "get_users",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_users_count": {
            "name": "get_users_count",
            "location": 1072,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Backend.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Backend.get_user_by_hash": {
            "name": "get_user_by_hash",
            "location": 1088,
            "return": [],
            "arguments": {
                "self": [],
                "hash": []
            }
        },
        "Backend.update_last_login": {
            "name": "update_last_login",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.update_user": {
            "name": "update_user",
            "location": 1100,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.update_user_attributes": {
            "name": "update_user_attributes",
            "location": 1131,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "old_attrs": [],
                "new_attrs": []
            }
        },
        "Backend.delete_user": {
            "name": "delete_user",
            "location": 1143,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.set_email_hash": {
            "name": "set_email_hash",
            "location": 1151,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "hash": []
            }
        },
        "Backend.create_group": {
            "name": "create_group",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Backend.get_group": {
            "name": "get_group",
            "location": 1169,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_groups": {
            "name": "get_groups",
            "location": 1173,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_groups_count": {
            "name": "get_groups_count",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.get_group_users": {
            "name": "get_group_users",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.update_group": {
            "name": "update_group",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 1216,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "user": []
            }
        },
        "Backend.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 1225,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "user": []
            }
        },
        "Backend.delete_group": {
            "name": "delete_group",
            "location": 1234,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_groups_by_user": {
            "name": "get_groups_by_user",
            "location": 1242,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Backend.create_perm": {
            "name": "create_perm",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "Backend.get_perm": {
            "name": "get_perm",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_perms": {
            "name": "get_perms",
            "location": 1264,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_perms_count": {
            "name": "get_perms_count",
            "location": 1273,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.update_perm": {
            "name": "update_perm",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_perm": {
            "name": "delete_perm",
            "location": 1298,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_scopes_by_match": {
            "name": "get_scopes_by_match",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": [],
                "login": [],
                "matches": []
            }
        },
        "Backend.create_customer": {
            "name": "create_customer",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "Backend.get_customer": {
            "name": "get_customer",
            "location": 1334,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_customers": {
            "name": "get_customers",
            "location": 1338,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_customers_count": {
            "name": "get_customers_count",
            "location": 1347,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Backend.update_customer": {
            "name": "update_customer",
            "location": 1355,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_customer": {
            "name": "delete_customer",
            "location": 1372,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_customers_by_match": {
            "name": "get_customers_by_match",
            "location": 1380,
            "return": [],
            "arguments": {
                "self": [],
                "login": [],
                "matches": []
            }
        },
        "Backend.create_note": {
            "name": "create_note",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": [],
                "note": []
            }
        },
        "Backend.get_note": {
            "name": "get_note",
            "location": 1410,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_notes": {
            "name": "get_notes",
            "location": 1417,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.get_customer_notes": {
            "name": "get_customer_notes",
            "location": 1433,
            "return": [],
            "arguments": {
                "self": [],
                "customer": [],
                "page": [],
                "page_size": []
            }
        },
        "Backend.update_note": {
            "name": "update_note",
            "location": 1440,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.delete_note": {
            "name": "delete_note",
            "location": 1459,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Backend.get_metrics": {
            "name": "get_metrics",
            "location": 1469,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "Backend.set_gauge": {
            "name": "set_gauge",
            "location": 1475,
            "return": [],
            "arguments": {
                "self": [],
                "gauge": []
            }
        },
        "Backend.inc_counter": {
            "name": "inc_counter",
            "location": 1485,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "Backend.update_timer": {
            "name": "update_timer",
            "location": 1495,
            "return": [],
            "arguments": {
                "self": [],
                "timer": []
            }
        },
        "Backend.get_expired": {
            "name": "get_expired",
            "location": 1507,
            "return": [],
            "arguments": {
                "self": [],
                "expired_threshold": [],
                "info_threshold": []
            }
        },
        "Backend.get_unshelve": {
            "name": "get_unshelve",
            "location": 1537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_unack": {
            "name": "get_unack",
            "location": 1551,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backend._insert": {
            "name": "_insert",
            "location": 1567,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": []
            }
        },
        "Backend._fetchone": {
            "name": "_fetchone",
            "location": 1577,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": []
            }
        },
        "Backend._fetchall": {
            "name": "_fetchall",
            "location": 1586,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": [],
                "limit": [],
                "offset": []
            }
        },
        "Backend._updateone": {
            "name": "_updateone",
            "location": 1598,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": [],
                "returning": []
            }
        },
        "Backend._updateall": {
            "name": "_updateall",
            "location": 1608,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": [],
                "returning": []
            }
        },
        "Backend._upsert": {
            "name": "_upsert",
            "location": 1618,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": []
            }
        },
        "Backend._deleteone": {
            "name": "_deleteone",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": [],
                "returning": []
            }
        },
        "Backend._deleteall": {
            "name": "_deleteall",
            "location": 1634,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "vars": [],
                "returning": []
            }
        },
        "Backend._log": {
            "name": "_log",
            "location": 1644,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "query": [],
                "vars": []
            }
        },
        "HistoryAdapter.getquoted.quoted": {
            "name": "quoted",
            "location": 33,
            "return": [],
            "arguments": {
                "o": []
            }
        }
    },
    "alerta-master/alerta/database/backends/postgres/queryparser.py": {
        "UnaryOperation.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "BinaryOperation.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "SearchModifier.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchAnd.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchOr.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchNot.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTerm.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "SearchTerm.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "default_field": []
            }
        }
    },
    "alerta-master/alerta/database/backends/postgres/utils.py": {
        "QueryBuilder.sort_by_columns": {
            "name": "sort_by_columns",
            "location": 28,
            "return": [],
            "arguments": {
                "params": [],
                "valid_params": []
            }
        },
        "QueryBuilder.filter_query": {
            "name": "filter_query",
            "location": 55,
            "return": [],
            "arguments": {
                "params": [],
                "valid_params": [],
                "query": [],
                "qvars": []
            }
        },
        "Alerts.from_params": {
            "name": "from_params",
            "location": 142,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Blackouts.from_params": {
            "name": "from_params",
            "location": 225,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Heartbeats.from_params": {
            "name": "from_params",
            "location": 276,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "ApiKeys.from_params": {
            "name": "from_params",
            "location": 316,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Users.from_params": {
            "name": "from_params",
            "location": 366,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Groups.from_params": {
            "name": "from_params",
            "location": 390,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Permissions.from_params": {
            "name": "from_params",
            "location": 414,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        },
        "Customers.from_params": {
            "name": "from_params",
            "location": 437,
            "return": [],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "customers": [],
                "query_time": []
            }
        }
    },
    "alerta-master/alerta/database/backends/postgres/__init__.py": {},
    "alerta-master/alerta/management/views.py": {
        "management": {
            "name": "management",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "manifest": {
            "name": "manifest",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "properties": {
            "name": "properties",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "switchboard": {
            "name": "switchboard",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "good_to_go": {
            "name": "good_to_go",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "health_check": {
            "name": "health_check",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "housekeeping": {
            "name": "housekeeping",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "status": {
            "name": "status",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "prometheus_metrics": {
            "name": "prometheus_metrics",
            "location": 228,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/management/__init__.py": {},
    "alerta-master/alerta/models/alert.py": {
        "Alert.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str"
                ],
                "event": [
                    "str"
                ]
            }
        },
        "Alert.parse": {
            "name": "parse",
            "location": 82,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "Alert.serialize": {
            "name": "serialize",
            "location": 119,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.get_id": {
            "name": "get_id",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "short": [
                    "bool"
                ]
            }
        },
        "Alert.get_body": {
            "name": "get_body",
            "location": 155,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "bool"
                ]
            }
        },
        "Alert.__repr__": {
            "name": "__repr__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.from_document": {
            "name": "from_document",
            "location": 170,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Alert.from_record": {
            "name": "from_record",
            "location": 203,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Alert.from_db": {
            "name": "from_db",
            "location": 236,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "Alert.is_duplicate": {
            "name": "is_duplicate",
            "location": 242,
            "return": [
                "Optional['Alert']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.is_correlated": {
            "name": "is_correlated",
            "location": 246,
            "return": [
                "Optional['Alert']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.is_flapping": {
            "name": "is_flapping",
            "location": 250,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Alert.get_status_and_value": {
            "name": "get_status_and_value",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alert._get_hist_info": {
            "name": "_get_hist_info",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Alert.deduplicate": {
            "name": "deduplicate",
            "location": 281,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "duplicate_of": []
            }
        },
        "Alert.update": {
            "name": "update",
            "location": 334,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "correlate_with": []
            }
        },
        "Alert.create": {
            "name": "create",
            "location": 378,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.find_by_id": {
            "name": "find_by_id",
            "location": 413,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "customers": [
                    "List[str]"
                ]
            }
        },
        "Alert.is_blackout": {
            "name": "is_blackout",
            "location": 416,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.is_suppressed": {
            "name": "is_suppressed",
            "location": 424,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.set_status": {
            "name": "set_status",
            "location": 429,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Alert.tag": {
            "name": "tag",
            "location": 448,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "List[str]"
                ]
            }
        },
        "Alert.untag": {
            "name": "untag",
            "location": 452,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "List[str]"
                ]
            }
        },
        "Alert.update_tags": {
            "name": "update_tags",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "List[str]"
                ]
            }
        },
        "Alert.update_attributes": {
            "name": "update_attributes",
            "location": 460,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Alert.delete": {
            "name": "delete",
            "location": 464,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.tag_find_all": {
            "name": "tag_find_all",
            "location": 469,
            "return": [],
            "arguments": {
                "query": [],
                "tags": []
            }
        },
        "Alert.untag_find_all": {
            "name": "untag_find_all",
            "location": 474,
            "return": [],
            "arguments": {
                "query": [],
                "tags": []
            }
        },
        "Alert.update_attributes_find_all": {
            "name": "update_attributes_find_all",
            "location": 479,
            "return": [],
            "arguments": {
                "query": [],
                "attributes": []
            }
        },
        "Alert.delete_find_all": {
            "name": "delete_find_all",
            "location": 484,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "Alert.find_all": {
            "name": "find_all",
            "location": 489,
            "return": [
                "List['Alert']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "raw_data": [
                    "bool"
                ],
                "history": [
                    "bool"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Alert.get_alert_history": {
            "name": "get_alert_history",
            "location": 493,
            "return": [],
            "arguments": {
                "alert": [],
                "page": [],
                "page_size": []
            }
        },
        "Alert.get_history": {
            "name": "get_history",
            "location": 498,
            "return": [
                "List[RichHistory]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [],
                "page_size": []
            }
        },
        "Alert.get_count": {
            "name": "get_count",
            "location": 503,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 508,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 513,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_top10_count": {
            "name": "get_top10_count",
            "location": 518,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_topn_count": {
            "name": "get_topn_count",
            "location": 522,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "topn": [
                    "int"
                ]
            }
        },
        "Alert.get_top10_flapping": {
            "name": "get_top10_flapping",
            "location": 527,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 531,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "topn": [
                    "int"
                ]
            }
        },
        "Alert.get_top10_standing": {
            "name": "get_top10_standing",
            "location": 536,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 540,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "topn": [
                    "int"
                ]
            }
        },
        "Alert.get_environments": {
            "name": "get_environments",
            "location": 545,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_services": {
            "name": "get_services",
            "location": 550,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_groups": {
            "name": "get_groups",
            "location": 555,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.get_tags": {
            "name": "get_tags",
            "location": 560,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Alert.add_note": {
            "name": "add_note",
            "location": 564,
            "return": [
                "Note"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Alert.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 581,
            "return": [
                "List['Note']"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Alert.delete_note": {
            "name": "delete_note",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "note_id": []
            }
        },
        "Alert.housekeeping": {
            "name": "housekeeping",
            "location": 601,
            "return": [
                "Tuple[(List['Alert'], List['Alert'], List['Alert'])]"
            ],
            "arguments": {
                "expired_threshold": [
                    "int"
                ],
                "info_threshold": [
                    "int"
                ]
            }
        },
        "Alert.from_status": {
            "name": "from_status",
            "location": 608,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Alert.from_action": {
            "name": "from_action",
            "location": 636,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Alert.from_expired": {
            "name": "from_expired",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Alert.from_timeout": {
            "name": "from_timeout",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "timeout": [
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/models/blackout.py": {
        "Blackout.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str"
                ]
            }
        },
        "Blackout.status": {
            "name": "status",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blackout.parse": {
            "name": "parse",
            "location": 93,
            "return": [
                "'Blackout'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "Blackout.serialize": {
            "name": "serialize",
            "location": 117,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.from_document": {
            "name": "from_document",
            "location": 169,
            "return": [
                "'Blackout'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Blackout.from_record": {
            "name": "from_record",
            "location": 191,
            "return": [
                "'Blackout'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Blackout.from_db": {
            "name": "from_db",
            "location": 213,
            "return": [
                "'Blackout'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "Blackout.create": {
            "name": "create",
            "location": 220,
            "return": [
                "'Blackout'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.find_by_id": {
            "name": "find_by_id",
            "location": 225,
            "return": [
                "Optional['Blackout']"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "customers": [
                    "List[str]"
                ]
            }
        },
        "Blackout.find_all": {
            "name": "find_all",
            "location": 229,
            "return": [
                "List['Blackout']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Blackout.count": {
            "name": "count",
            "location": 233,
            "return": [
                "int"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Blackout.update": {
            "name": "update",
            "location": 236,
            "return": [
                "'Blackout'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.delete": {
            "name": "delete",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/customer.py": {
        "Customer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str"
                ],
                "customer": [
                    "str"
                ]
            }
        },
        "Customer.parse": {
            "name": "parse",
            "location": 20,
            "return": [
                "'Customer'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "Customer.serialize": {
            "name": "serialize",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.from_document": {
            "name": "from_document",
            "location": 41,
            "return": [
                "'Customer'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Customer.from_record": {
            "name": "from_record",
            "location": 49,
            "return": [
                "'Customer'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Customer.from_db": {
            "name": "from_db",
            "location": 57,
            "return": [
                "'Customer'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "Customer.create": {
            "name": "create",
            "location": 63,
            "return": [
                "'Customer'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.find_by_id": {
            "name": "find_by_id",
            "location": 67,
            "return": [
                "Optional['Customer']"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Customer.find_all": {
            "name": "find_all",
            "location": 71,
            "return": [
                "List['Customer']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Customer.count": {
            "name": "count",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Customer.update": {
            "name": "update",
            "location": 78,
            "return": [
                "'Customer'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.delete": {
            "name": "delete",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.lookup": {
            "name": "lookup",
            "location": 85,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "login": [
                    "str"
                ],
                "groups": [
                    "List[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/models/enums.py": {
        "Scope.init_app": {
            "name": "init_app",
            "location": 88,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "Scope.create": {
            "name": "create",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [],
                "scope": []
            }
        },
        "Scope.find_all": {
            "name": "find_all",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Scope.action": {
            "name": "action",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.resource": {
            "name": "resource",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.type": {
            "name": "type",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.from_str": {
            "name": "from_str",
            "location": 125,
            "return": [],
            "arguments": {
                "action": [
                    "str"
                ],
                "resource": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/models/group.py": {
        "GroupUser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "login": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "status": [
                    "str"
                ]
            }
        },
        "GroupUser.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupUser.from_document": {
            "name": "from_document",
            "location": 30,
            "return": [
                "'GroupUser'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GroupUser.from_record": {
            "name": "from_record",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "GroupUser.from_db": {
            "name": "from_db",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "GroupUsers.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "users": [
                    "List[GroupUser]"
                ]
            }
        },
        "GroupUsers.find_by_id": {
            "name": "find_by_id",
            "location": 62,
            "return": [
                "List['GroupUser']"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Group.parse": {
            "name": "parse",
            "location": 81,
            "return": [
                "'Group'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "Group.serialize": {
            "name": "serialize",
            "location": 89,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.from_document": {
            "name": "from_document",
            "location": 103,
            "return": [
                "'Group'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Group.from_record": {
            "name": "from_record",
            "location": 112,
            "return": [
                "'Group'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Group.from_db": {
            "name": "from_db",
            "location": 121,
            "return": [
                "'Group'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "Group.create": {
            "name": "create",
            "location": 127,
            "return": [
                "'Group'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.find_by_id": {
            "name": "find_by_id",
            "location": 131,
            "return": [
                "Optional['Group']"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Group.find_all": {
            "name": "find_all",
            "location": 135,
            "return": [
                "List['Group']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Group.count": {
            "name": "count",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Group.update": {
            "name": "update",
            "location": 142,
            "return": [
                "'Group'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.add_user": {
            "name": "add_user",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Group.remove_user": {
            "name": "remove_user",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Group.delete": {
            "name": "delete",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/heartbeat.py": {
        "Heartbeat.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str"
                ],
                "tags": [
                    "List[str]"
                ],
                "create_time": [
                    "datetime"
                ],
                "timeout": [
                    "int"
                ],
                "customer": [
                    "str"
                ]
            }
        },
        "Heartbeat.status": {
            "name": "status",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.parse": {
            "name": "parse",
            "location": 73,
            "return": [
                "'Heartbeat'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "Heartbeat.serialize": {
            "name": "serialize",
            "location": 94,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.from_document": {
            "name": "from_document",
            "location": 117,
            "return": [
                "'Heartbeat'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Heartbeat.from_record": {
            "name": "from_record",
            "location": 133,
            "return": [
                "'Heartbeat'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Heartbeat.from_db": {
            "name": "from_db",
            "location": 149,
            "return": [
                "'Heartbeat'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "Heartbeat.create": {
            "name": "create",
            "location": 156,
            "return": [
                "'Heartbeat'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.find_by_id": {
            "name": "find_by_id",
            "location": 161,
            "return": [
                "Optional['Heartbeat']"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "customers": [
                    "List[str]"
                ]
            }
        },
        "Heartbeat.find_all": {
            "name": "find_all",
            "location": 166,
            "return": [
                "List['Heartbeat']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Heartbeat.find_all_by_status": {
            "name": "find_all_by_status",
            "location": 170,
            "return": [
                "List['Heartbeat']"
            ],
            "arguments": {
                "status": [
                    "List[str]"
                ],
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Heartbeat.count": {
            "name": "count",
            "location": 174,
            "return": [
                "int"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Heartbeat.delete": {
            "name": "delete",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/history.py": {
        "History.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "event": []
            }
        },
        "History.serialize": {
            "name": "serialize",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.from_document": {
            "name": "from_document",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": []
            }
        },
        "History.from_record": {
            "name": "from_record",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "History.from_db": {
            "name": "from_db",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "RichHistory.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "resource": [],
                "event": []
            }
        },
        "RichHistory.serialize": {
            "name": "serialize",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RichHistory.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RichHistory.from_document": {
            "name": "from_document",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": []
            }
        },
        "RichHistory.from_record": {
            "name": "from_record",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "RichHistory.from_db": {
            "name": "from_db",
            "location": 186,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        }
    },
    "alerta-master/alerta/models/key.py": {
        "ApiKey.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "scopes": [
                    "List[str]"
                ],
                "text": [
                    "str"
                ],
                "expire_time": [
                    "datetime"
                ],
                "customer": [
                    "str"
                ]
            }
        },
        "ApiKey.type": {
            "name": "type",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.status": {
            "name": "status",
            "location": 40,
            "return": [
                "ApiKeyStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.parse": {
            "name": "parse",
            "location": 44,
            "return": [
                "'ApiKey'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "ApiKey.serialize": {
            "name": "serialize",
            "location": 63,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.from_document": {
            "name": "from_document",
            "location": 84,
            "return": [
                "'ApiKey'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ApiKey.from_record": {
            "name": "from_record",
            "location": 99,
            "return": [
                "'ApiKey'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "ApiKey.from_db": {
            "name": "from_db",
            "location": 113,
            "return": [
                "'ApiKey'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "ApiKey.create": {
            "name": "create",
            "location": 119,
            "return": [
                "'ApiKey'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.find_by_id": {
            "name": "find_by_id",
            "location": 126,
            "return": [
                "Optional['ApiKey']"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "ApiKey.find_all": {
            "name": "find_all",
            "location": 133,
            "return": [
                "List['ApiKey']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "ApiKey.count": {
            "name": "count",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "ApiKey.find_by_user": {
            "name": "find_by_user",
            "location": 144,
            "return": [
                "List['ApiKey']"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "ApiKey.update": {
            "name": "update",
            "location": 150,
            "return": [
                "'ApiKey'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.delete": {
            "name": "delete",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.verify_key": {
            "name": "verify_key",
            "location": 161,
            "return": [
                "Optional['ApiKey']"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/models/metrics.py": {
        "timer": {
            "name": "timer",
            "location": 253,
            "return": [],
            "arguments": {
                "metric": []
            }
        },
        "Gauge.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "name": [],
                "title": [],
                "description": [],
                "value": []
            }
        },
        "Gauge.serialize": {
            "name": "serialize",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "format": []
            }
        },
        "Gauge.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gauge.from_document": {
            "name": "from_document",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": []
            }
        },
        "Gauge.from_record": {
            "name": "from_record",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Gauge.from_db": {
            "name": "from_db",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "Gauge.set": {
            "name": "set",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Gauge.find_all": {
            "name": "find_all",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "name": [],
                "title": [],
                "description": [],
                "count": []
            }
        },
        "Counter.serialize": {
            "name": "serialize",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "format": []
            }
        },
        "Counter.__repr__": {
            "name": "__repr__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Counter.from_document": {
            "name": "from_document",
            "location": 116,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": []
            }
        },
        "Counter.from_record": {
            "name": "from_record",
            "location": 126,
            "return": [],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Counter.from_db": {
            "name": "from_db",
            "location": 136,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "Counter.inc": {
            "name": "inc",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "Counter.find_all": {
            "name": "find_all",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "name": [],
                "title": [],
                "description": [],
                "count": [],
                "total_time": []
            }
        },
        "Timer.serialize": {
            "name": "serialize",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "format": []
            }
        },
        "Timer.__repr__": {
            "name": "__repr__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.from_document": {
            "name": "from_document",
            "location": 200,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": []
            }
        },
        "Timer.from_record": {
            "name": "from_record",
            "location": 211,
            "return": [],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Timer.from_db": {
            "name": "from_db",
            "location": 222,
            "return": [],
            "arguments": {
                "cls": [],
                "r": []
            }
        },
        "Timer._time_in_millis": {
            "name": "_time_in_millis",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.start_timer": {
            "name": "start_timer",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.stop_timer": {
            "name": "stop_timer",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "count": []
            }
        },
        "Timer.find_all": {
            "name": "find_all",
            "location": 249,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "timer.decorated": {
            "name": "decorated",
            "location": 254,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "timer.decorated.wrapped": {
            "name": "wrapped",
            "location": 256,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/models/note.py": {
        "Note.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "note_type": [
                    "str"
                ]
            }
        },
        "Note.parse": {
            "name": "parse",
            "location": 31,
            "return": [
                "'Note'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "Note.serialize": {
            "name": "serialize",
            "location": 45,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.from_document": {
            "name": "from_document",
            "location": 73,
            "return": [
                "'Note'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Note.from_record": {
            "name": "from_record",
            "location": 87,
            "return": [
                "'Note'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Note.from_db": {
            "name": "from_db",
            "location": 101,
            "return": [
                "'Note'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "Note.create": {
            "name": "create",
            "location": 107,
            "return": [
                "'Note'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.from_alert": {
            "name": "from_alert",
            "location": 111,
            "return": [],
            "arguments": {
                "alert": [],
                "text": []
            }
        },
        "Note.find_by_id": {
            "name": "find_by_id",
            "location": 129,
            "return": [
                "Optional['Note']"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Note.find_all": {
            "name": "find_all",
            "location": 133,
            "return": [
                "List['Note']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Note.update": {
            "name": "update",
            "location": 136,
            "return": [
                "'Note'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.delete": {
            "name": "delete",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.delete_by_id": {
            "name": "delete_by_id",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/models/permission.py": {
        "Permission.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str"
                ],
                "scopes": [
                    "List[Scope]"
                ]
            }
        },
        "Permission.parse": {
            "name": "parse",
            "location": 23,
            "return": [
                "'Permission'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "Permission.serialize": {
            "name": "serialize",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.from_document": {
            "name": "from_document",
            "location": 46,
            "return": [
                "'Permission'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Permission.from_record": {
            "name": "from_record",
            "location": 54,
            "return": [
                "'Permission'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "Permission.from_db": {
            "name": "from_db",
            "location": 62,
            "return": [
                "'Permission'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "Permission.create": {
            "name": "create",
            "location": 68,
            "return": [
                "'Permission'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.find_by_id": {
            "name": "find_by_id",
            "location": 72,
            "return": [
                "Optional['Permission']"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Permission.find_all": {
            "name": "find_all",
            "location": 76,
            "return": [
                "List['Permission']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Permission.count": {
            "name": "count",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "Permission.update": {
            "name": "update",
            "location": 83,
            "return": [
                "'Permission'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.delete": {
            "name": "delete",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.is_in_scope": {
            "name": "is_in_scope",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "want_scope": [
                    "str"
                ],
                "have_scopes": [
                    "List[Scope]"
                ]
            }
        },
        "Permission.lookup": {
            "name": "lookup",
            "location": 113,
            "return": [
                "List[Scope]"
            ],
            "arguments": {
                "cls": [],
                "login": [
                    "str"
                ],
                "roles": [
                    "List[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/models/switch.py": {
        "SwitchState.to_state": {
            "name": "to_state",
            "location": 9,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "SwitchState.to_string": {
            "name": "to_string",
            "location": 13,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "Switch.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "title": [],
                "description": [],
                "state": []
            }
        },
        "Switch.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Switch.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Switch.find_by_name": {
            "name": "find_by_name",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Switch.find_all": {
            "name": "find_all",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Switch.set_state": {
            "name": "set_state",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Switch.is_on": {
            "name": "is_on",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/token.py": {
        "Jwt.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iss": [
                    "str"
                ],
                "typ": [
                    "str"
                ],
                "sub": [
                    "str"
                ],
                "aud": [
                    "str"
                ],
                "exp": [
                    "dt"
                ],
                "nbf": [
                    "dt"
                ],
                "iat": [
                    "dt"
                ],
                "jti": [
                    "str"
                ]
            }
        },
        "Jwt.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "'Jwt'"
            ],
            "arguments": {
                "cls": [],
                "token": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "verify": [
                    "bool"
                ],
                "algorithm": [
                    "str"
                ]
            }
        },
        "Jwt.serialize": {
            "name": "serialize",
            "location": 79,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jwt.tokenize": {
            "name": "tokenize",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str"
                ]
            }
        },
        "Jwt.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "login": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "roles": [
                    "List[str]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "User.domain": {
            "name": "domain",
            "location": 48,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 62,
            "return": [
                "'User'"
            ],
            "arguments": {
                "cls": [],
                "json": [
                    "JSON"
                ]
            }
        },
        "User.verify_password": {
            "name": "verify_password",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "User.serialize": {
            "name": "serialize",
            "location": 80,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.from_document": {
            "name": "from_document",
            "location": 104,
            "return": [
                "'User'"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "User.from_record": {
            "name": "from_record",
            "location": 122,
            "return": [
                "'User'"
            ],
            "arguments": {
                "cls": [],
                "rec": []
            }
        },
        "User.from_db": {
            "name": "from_db",
            "location": 140,
            "return": [
                "'User'"
            ],
            "arguments": {
                "cls": [],
                "r": [
                    "Union[(Dict, Tuple)]"
                ]
            }
        },
        "User.create": {
            "name": "create",
            "location": 146,
            "return": [
                "'User'"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.find_by_id": {
            "name": "find_by_id",
            "location": 150,
            "return": [
                "Optional['User']"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "User.find_by_username": {
            "name": "find_by_username",
            "location": 154,
            "return": [
                "Optional['User']"
            ],
            "arguments": {
                "username": [
                    "str"
                ]
            }
        },
        "User.find_by_email": {
            "name": "find_by_email",
            "location": 159,
            "return": [
                "Optional['User']"
            ],
            "arguments": {
                "email": [
                    "str"
                ]
            }
        },
        "User.find_all": {
            "name": "find_all",
            "location": 163,
            "return": [
                "List['User']"
            ],
            "arguments": {
                "query": [
                    "Query"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "User.count": {
            "name": "count",
            "location": 167,
            "return": [
                "int"
            ],
            "arguments": {
                "query": [
                    "Query"
                ]
            }
        },
        "User.update_last_login": {
            "name": "update_last_login",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.update": {
            "name": "update",
            "location": 173,
            "return": [
                "'User'"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.update_attributes": {
            "name": "update_attributes",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_groups": {
            "name": "get_groups",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.check_credentials": {
            "name": "check_credentials",
            "location": 195,
            "return": [
                "Optional['User']"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "User.verify_hash": {
            "name": "verify_hash",
            "location": 202,
            "return": [
                "'User'"
            ],
            "arguments": {
                "hash": [],
                "salt": [
                    "str"
                ]
            }
        },
        "User._set_email_hash": {
            "name": "_set_email_hash",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "str"
                ]
            }
        },
        "User._clear_email_hash": {
            "name": "_clear_email_hash",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.send_confirmation": {
            "name": "send_confirmation",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.set_email_verified": {
            "name": "set_email_verified",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verified": [
                    "bool"
                ]
            }
        },
        "User.send_password_reset": {
            "name": "send_password_reset",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.reset_password": {
            "name": "reset_password",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/models/__init__.py": {},
    "alerta-master/alerta/models/alarms/alerta.py": {
        "StateMachine.valid_severities": {
            "name": "valid_severities",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.register": {
            "name": "register",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "StateMachine.trend": {
            "name": "trend",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "previous": [],
                "current": []
            }
        },
        "StateMachine.transition": {
            "name": "transition",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "current_status": [],
                "previous_status": [],
                "action": []
            }
        },
        "StateMachine.is_suppressed": {
            "name": "is_suppressed",
            "location": 256,
            "return": [],
            "arguments": {
                "alert": []
            }
        },
        "StateMachine.transition.next_state": {
            "name": "next_state",
            "location": 124,
            "return": [],
            "arguments": {
                "rule": [],
                "severity": [],
                "status": []
            }
        }
    },
    "alerta-master/alerta/models/alarms/isa_18_2.py": {
        "StateMachine.register": {
            "name": "register",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "StateMachine.trend": {
            "name": "trend",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "previous": [],
                "current": []
            }
        },
        "StateMachine.transition": {
            "name": "transition",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "current_status": [],
                "previous_status": [],
                "action": []
            }
        },
        "StateMachine.is_suppressed": {
            "name": "is_suppressed",
            "location": 177,
            "return": [],
            "arguments": {
                "alert": []
            }
        },
        "StateMachine.transition.next_state": {
            "name": "next_state",
            "location": 104,
            "return": [],
            "arguments": {
                "rule": [],
                "severity": [],
                "status": []
            }
        }
    },
    "alerta-master/alerta/models/alarms/__init__.py": {
        "load_alarm_model": {
            "name": "load_alarm_model",
            "location": 8,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "AlarmModel.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "AlarmModel.init_app": {
            "name": "init_app",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "AlarmModel.register": {
            "name": "register",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "AlarmModel.trend": {
            "name": "trend",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "previous": [],
                "current": []
            }
        },
        "AlarmModel.transition": {
            "name": "transition",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "current_status": [],
                "previous_status": [],
                "action": []
            }
        },
        "AlarmModel.is_suppressed": {
            "name": "is_suppressed",
            "location": 47,
            "return": [],
            "arguments": {
                "alert": []
            }
        }
    },
    "alerta-master/alerta/plugins/acked_by.py": {
        "AckedBy.pre_receive": {
            "name": "pre_receive",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "AckedBy.post_receive": {
            "name": "post_receive",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "AckedBy.status_change": {
            "name": "status_change",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "AckedBy.take_action": {
            "name": "take_action",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "AckedBy.delete": {
            "name": "delete",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/alerta/plugins/blackout.py": {
        "BlackoutHandler.pre_receive": {
            "name": "pre_receive",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "BlackoutHandler.post_receive": {
            "name": "post_receive",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "BlackoutHandler.status_change": {
            "name": "status_change",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "BlackoutHandler.take_action": {
            "name": "take_action",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "BlackoutHandler.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/alerta/plugins/escalate.py": {
        "EscalateSeverity.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EscalateSeverity.pre_receive": {
            "name": "pre_receive",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "EscalateSeverity.post_receive": {
            "name": "post_receive",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "EscalateSeverity.status_change": {
            "name": "status_change",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "EscalateSeverity.take_action": {
            "name": "take_action",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "EscalateSeverity.take_note": {
            "name": "take_note",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "text": []
            }
        },
        "EscalateSeverity.delete": {
            "name": "delete",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/alerta/plugins/forwarder.py": {
        "append_to_header": {
            "name": "append_to_header",
            "location": 20,
            "return": [],
            "arguments": {
                "origin": []
            }
        },
        "is_in_xloop": {
            "name": "is_in_xloop",
            "location": 25,
            "return": [],
            "arguments": {
                "server": []
            }
        },
        "Forwarder.pre_receive": {
            "name": "pre_receive",
            "location": 36,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        },
        "Forwarder.post_receive": {
            "name": "post_receive",
            "location": 43,
            "return": [
                "Optional['Alert']"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        },
        "Forwarder.status_change": {
            "name": "status_change",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "status": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Forwarder.take_action": {
            "name": "take_action",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Forwarder.delete": {
            "name": "delete",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/heartbeat.py": {
        "HeartbeatReceiver.pre_receive": {
            "name": "pre_receive",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "HeartbeatReceiver.post_receive": {
            "name": "post_receive",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "HeartbeatReceiver.status_change": {
            "name": "status_change",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "HeartbeatReceiver.take_action": {
            "name": "take_action",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "HeartbeatReceiver.delete": {
            "name": "delete",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/alerta/plugins/reject.py": {
        "RejectPolicy.pre_receive": {
            "name": "pre_receive",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "RejectPolicy.post_receive": {
            "name": "post_receive",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "RejectPolicy.status_change": {
            "name": "status_change",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "RejectPolicy.take_action": {
            "name": "take_action",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "RejectPolicy.delete": {
            "name": "delete",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/alerta/plugins/remote_ip.py": {
        "RemoteIpAddr.pre_receive": {
            "name": "pre_receive",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "RemoteIpAddr.post_receive": {
            "name": "post_receive",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "RemoteIpAddr.status_change": {
            "name": "status_change",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "RemoteIpAddr.take_action": {
            "name": "take_action",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "RemoteIpAddr.delete": {
            "name": "delete",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/alerta/plugins/timeout.py": {
        "TimeoutPolicy.pre_receive": {
            "name": "pre_receive",
            "location": 18,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        },
        "TimeoutPolicy.post_receive": {
            "name": "post_receive",
            "location": 21,
            "return": [
                "Optional['Alert']"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        },
        "TimeoutPolicy.status_change": {
            "name": "status_change",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "status": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "TimeoutPolicy.take_action": {
            "name": "take_action",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "TimeoutPolicy.take_note": {
            "name": "take_note",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "text": [
                    "Optional[str]"
                ]
            }
        },
        "TimeoutPolicy.delete": {
            "name": "delete",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/__init__.py": {
        "PluginBase.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PluginBase.pre_receive": {
            "name": "pre_receive",
            "location": 20,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        },
        "PluginBase.post_receive": {
            "name": "post_receive",
            "location": 28,
            "return": [
                "Optional['Alert']"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        },
        "PluginBase.status_change": {
            "name": "status_change",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "status": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "PluginBase.take_action": {
            "name": "take_action",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "PluginBase.take_note": {
            "name": "take_note",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ],
                "text": [
                    "Optional[str]"
                ]
            }
        },
        "PluginBase.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        },
        "PluginBase.get_config": {
            "name": "get_config",
            "location": 50,
            "return": [],
            "arguments": {
                "key": [],
                "default": [],
                "type": []
            }
        },
        "FakeApp.init_app": {
            "name": "init_app",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/utils/api.py": {
        "assign_customer": {
            "name": "assign_customer",
            "location": 14,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "wanted": [
                    "str"
                ],
                "permission": [
                    "str"
                ]
            }
        },
        "process_alert": {
            "name": "process_alert",
            "location": 31,
            "return": [
                "Alert"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ]
            }
        },
        "process_action": {
            "name": "process_action",
            "location": 94,
            "return": [
                "Tuple[(Alert, str, str, Optional[int])]"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "process_note": {
            "name": "process_note",
            "location": 129,
            "return": [
                "Tuple[(Alert, str)]"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "process_status": {
            "name": "process_status",
            "location": 159,
            "return": [
                "Tuple[(Alert, str, str)]"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ],
                "status": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "process_delete": {
            "name": "process_delete",
            "location": 191,
            "return": [
                "bool"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/audit.py": {
        "AuditTrail.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail.init_app": {
            "name": "init_app",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail._log_response": {
            "name": "_log_response",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ],
                "category": [
                    "str"
                ],
                "event": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "customers": [
                    "List[str]"
                ],
                "scopes": [
                    "List[str]"
                ],
                "resource_id": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "AuditTrail._webhook_response": {
            "name": "_webhook_response",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ],
                "category": [
                    "str"
                ],
                "event": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "customers": [
                    "List[str]"
                ],
                "scopes": [
                    "List[str]"
                ],
                "resource_id": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "AuditTrail.admin_log_response": {
            "name": "admin_log_response",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail.admin_webhook_response": {
            "name": "admin_webhook_response",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail.write_log_response": {
            "name": "write_log_response",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail.write_webhook_response": {
            "name": "write_webhook_response",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail.auth_log_response": {
            "name": "auth_log_response",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail.auth_webhook_response": {
            "name": "auth_webhook_response",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "AuditTrail._fmt": {
            "name": "_fmt",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "app": [],
                "category": [
                    "str"
                ],
                "event": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "customers": [
                    "List[str]"
                ],
                "scopes": [
                    "List[str]"
                ],
                "resource_id": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "AuditTrail._fmt.get_redacted_data": {
            "name": "get_redacted_data",
            "location": 83,
            "return": [],
            "arguments": {
                "r": []
            }
        }
    },
    "alerta-master/alerta/utils/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "endpoint": [],
                "key": [],
                "secret": [],
                "token": [],
                "username": [],
                "password": [],
                "timeout": [],
                "ssl_verify": [],
                "headers": [],
                "debug": []
            }
        },
        "Client.send_alert": {
            "name": "send_alert",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "resource": [],
                "event": []
            }
        },
        "Client.action": {
            "name": "action",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "action": [],
                "text": [],
                "timeout": []
            }
        },
        "Client.delete_alert": {
            "name": "delete_alert",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "ApiKeyAuth.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "api_key": [],
                "auth_token": []
            }
        },
        "ApiKeyAuth.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "TokenAuth.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "auth_token": []
            }
        },
        "TokenAuth.__call__": {
            "name": "__call__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "endpoint": [],
                "key": [],
                "secret": [],
                "token": [],
                "username": [],
                "password": [],
                "timeout": [],
                "ssl_verify": [],
                "headers": [],
                "debug": []
            }
        },
        "HTTPClient.default_headers": {
            "name": "default_headers",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "HTTPClient.get": {
            "name": "get",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query": []
            }
        },
        "HTTPClient.post": {
            "name": "post",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "data": []
            }
        },
        "HTTPClient.put": {
            "name": "put",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "data": []
            }
        },
        "HTTPClient.delete": {
            "name": "delete",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CustomJsonEncoder.default": {
            "name": "default",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        }
    },
    "alerta-master/alerta/utils/collections.py": {
        "merge": {
            "name": "merge",
            "location": 1,
            "return": [],
            "arguments": {
                "dict1": [],
                "dict2": []
            }
        }
    },
    "alerta-master/alerta/utils/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 119,
            "return": [],
            "arguments": {
                "key": [],
                "default": [],
                "type": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Config.init_app": {
            "name": "init_app",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Config.get_user_config": {
            "name": "get_user_config",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/utils/format.py": {
        "custom_json_dumps": {
            "name": "custom_json_dumps",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "object"
                ]
            }
        },
        "register_custom_serializer": {
            "name": "register_custom_serializer",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CustomJSONEncoder.default": {
            "name": "default",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ]
            }
        },
        "DateTime.parse": {
            "name": "parse",
            "location": 30,
            "return": [
                "Optional[dt]"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "DateTime.iso8601": {
            "name": "iso8601",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "dt": [
                    "dt"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/hooks.py": {
        "HookTrigger.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "HookTrigger.init_app": {
            "name": "init_app",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "HookTrigger.process_pre_receive": {
            "name": "process_pre_receive",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "HookTrigger.process_post_receive": {
            "name": "process_post_receive",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "HookTrigger.process_status_change": {
            "name": "process_status_change",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "HookTrigger.process_take_action": {
            "name": "process_take_action",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        }
    },
    "alerta-master/alerta/utils/key.py": {
        "ApiKeyHelper.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "ApiKeyHelper.init_app": {
            "name": "init_app",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "ApiKeyHelper.generate": {
            "name": "generate",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKeyHelper.scopes_to_type": {
            "name": "scopes_to_type",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "List[str]"
                ]
            }
        },
        "ApiKeyHelper.type_to_scopes": {
            "name": "type_to_scopes",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "key_type": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/logging.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Logger.setup_logging": {
            "name": "setup_logging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Logger.log_response": {
            "name": "log_response",
            "location": 132,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "RequestFilter.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "methods": []
            }
        },
        "RequestFilter.filter": {
            "name": "filter",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ContextFilter.filter": {
            "name": "filter",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "CustomFormatter.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomFormatter.format": {
            "name": "format",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "JSONFormatter.format": {
            "name": "format",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "SyslogFormatter.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "facility": []
            }
        },
        "SyslogFormatter.format": {
            "name": "format",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Logger.setup_logging.open_file": {
            "name": "open_file",
            "location": 20,
            "return": [],
            "arguments": {
                "filename": [],
                "mode": []
            }
        }
    },
    "alerta-master/alerta/utils/mailer.py": {
        "Mailer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Mailer.register": {
            "name": "register",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Mailer.send_email": {
            "name": "send_email",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "body": [
                    "str"
                ],
                "mime": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/paging.py": {
        "Page.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ],
                "items": [
                    "int"
                ]
            }
        },
        "Page.from_params": {
            "name": "from_params",
            "location": 19,
            "return": [
                "'Page'"
            ],
            "arguments": {
                "params": [
                    "MultiDict"
                ],
                "items": [
                    "int"
                ]
            }
        },
        "Page.pages": {
            "name": "pages",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.has_more": {
            "name": "has_more",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/utils/plugin.py": {
        "Plugins.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugins.register": {
            "name": "register",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Plugins.routing": {
            "name": "routing",
            "location": 51,
            "return": [
                "'Tuple[Iterable[PluginBase], Config]'"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "'Alert'"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/response.py": {
        "jsonp": {
            "name": "jsonp",
            "location": 7,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "absolute_url": {
            "name": "absolute_url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "base_url": {
            "name": "base_url",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "jsonp.decorated": {
            "name": "decorated",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/utils/tracing.py": {
        "Tracing.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Tracing.setup_tracing": {
            "name": "setup_tracing",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Tracing.get_request_id": {
            "name": "get_request_id",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "Tracing.set_request_id": {
            "name": "set_request_id",
            "location": 28,
            "return": [],
            "arguments": {
                "response": []
            }
        }
    },
    "alerta-master/alerta/utils/webhook.py": {
        "WebhookRule.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "rule": [],
                "endpoint": [],
                "methods": []
            }
        },
        "CustomWebhooks.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomWebhooks.register": {
            "name": "register",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "CustomWebhooks.iter_rules": {
            "name": "iter_rules",
            "location": 35,
            "return": [
                "Iterator[WebhookRule]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/utils/__init__.py": {},
    "alerta-master/alerta/views/alerts.py": {
        "receive": {
            "name": "receive",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "get_alert": {
            "name": "get_alert",
            "location": 87,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "set_status": {
            "name": "set_status",
            "location": 103,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "action_alert": {
            "name": "action_alert",
            "location": 144,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "tag_alert": {
            "name": "tag_alert",
            "location": 190,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "untag_alert": {
            "name": "untag_alert",
            "location": 217,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "update_attributes": {
            "name": "update_attributes",
            "location": 244,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "delete_alert": {
            "name": "delete_alert",
            "location": 271,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "search_alerts": {
            "name": "search_alerts",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "history": {
            "name": "history",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "get_counts": {
            "name": "get_counts",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "get_topn_count": {
            "name": "get_topn_count",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "get_topn_standing": {
            "name": "get_topn_standing",
            "location": 455,
            "return": [],
            "arguments": {}
        },
        "get_environments": {
            "name": "get_environments",
            "location": 481,
            "return": [],
            "arguments": {}
        },
        "get_services": {
            "name": "get_services",
            "location": 506,
            "return": [],
            "arguments": {}
        },
        "get_groups": {
            "name": "get_groups",
            "location": 531,
            "return": [],
            "arguments": {}
        },
        "get_tags": {
            "name": "get_tags",
            "location": 556,
            "return": [],
            "arguments": {}
        },
        "add_note": {
            "name": "add_note",
            "location": 580,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "get_notes": {
            "name": "get_notes",
            "location": 621,
            "return": [],
            "arguments": {
                "alert_id": []
            }
        },
        "update_note": {
            "name": "update_note",
            "location": 650,
            "return": [],
            "arguments": {
                "alert_id": [],
                "note_id": []
            }
        },
        "delete_note": {
            "name": "delete_note",
            "location": 685,
            "return": [],
            "arguments": {
                "alert_id": [],
                "note_id": []
            }
        },
        "receive.audit_trail_alert": {
            "name": "audit_trail_alert",
            "location": 48,
            "return": [],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/views/blackouts.py": {
        "create_blackout": {
            "name": "create_blackout",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "get_blackout": {
            "name": "get_blackout",
            "location": 52,
            "return": [],
            "arguments": {
                "blackout_id": []
            }
        },
        "list_blackouts": {
            "name": "list_blackouts",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "update_blackout": {
            "name": "update_blackout",
            "location": 98,
            "return": [],
            "arguments": {
                "blackout_id": []
            }
        },
        "delete_blackout": {
            "name": "delete_blackout",
            "location": 131,
            "return": [],
            "arguments": {
                "blackout_id": []
            }
        }
    },
    "alerta-master/alerta/views/bulk.py": {
        "task_status": {
            "name": "task_status",
            "location": 23,
            "return": [],
            "arguments": {
                "task_id": []
            }
        },
        "bulk_set_status": {
            "name": "bulk_set_status",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "bulk_action_alert": {
            "name": "bulk_action_alert",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "bulk_tag_alert": {
            "name": "bulk_tag_alert",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "bulk_untag_alert": {
            "name": "bulk_untag_alert",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "bulk_update_attributes": {
            "name": "bulk_update_attributes",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "bulk_delete_alert": {
            "name": "bulk_delete_alert",
            "location": 146,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/config.py": {
        "config": {
            "name": "config",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/customers.py": {
        "create_customer": {
            "name": "create_customer",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "get_customer": {
            "name": "get_customer",
            "location": 44,
            "return": [],
            "arguments": {
                "customer_id": []
            }
        },
        "list_customers": {
            "name": "list_customers",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "update_customer": {
            "name": "update_customer",
            "location": 93,
            "return": [],
            "arguments": {
                "customer_id": []
            }
        },
        "delete_customer": {
            "name": "delete_customer",
            "location": 116,
            "return": [],
            "arguments": {
                "customer_id": []
            }
        }
    },
    "alerta-master/alerta/views/groups.py": {
        "create_group": {
            "name": "create_group",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "get_group": {
            "name": "get_group",
            "location": 45,
            "return": [],
            "arguments": {
                "group_id": []
            }
        },
        "get_group_users": {
            "name": "get_group_users",
            "location": 58,
            "return": [],
            "arguments": {
                "group_id": []
            }
        },
        "list_groups": {
            "name": "list_groups",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "update_group": {
            "name": "update_group",
            "location": 115,
            "return": [],
            "arguments": {
                "group_id": []
            }
        },
        "add_user_to_group": {
            "name": "add_user_to_group",
            "location": 138,
            "return": [],
            "arguments": {
                "group_id": [],
                "user_id": []
            }
        },
        "remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 160,
            "return": [],
            "arguments": {
                "group_id": [],
                "user_id": []
            }
        },
        "delete_group": {
            "name": "delete_group",
            "location": 182,
            "return": [],
            "arguments": {
                "group_id": []
            }
        }
    },
    "alerta-master/alerta/views/heartbeats.py": {
        "create_heartbeat": {
            "name": "create_heartbeat",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "get_heartbeat": {
            "name": "get_heartbeat",
            "location": 47,
            "return": [],
            "arguments": {
                "heartbeat_id": []
            }
        },
        "list_heartbeats": {
            "name": "list_heartbeats",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 95,
            "return": [],
            "arguments": {
                "heartbeat_id": []
            }
        }
    },
    "alerta-master/alerta/views/keys.py": {
        "create_key": {
            "name": "create_key",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_key": {
            "name": "get_key",
            "location": 61,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "list_keys": {
            "name": "list_keys",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "update_key": {
            "name": "update_key",
            "location": 120,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "delete_key": {
            "name": "delete_key",
            "location": 156,
            "return": [],
            "arguments": {
                "key": []
            }
        }
    },
    "alerta-master/alerta/views/oembed.py": {
        "oembed": {
            "name": "oembed",
            "location": 19,
            "return": [],
            "arguments": {
                "format": []
            }
        },
        "embed_js": {
            "name": "embed_js",
            "location": 69,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/permissions.py": {
        "create_perm": {
            "name": "create_perm",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "get_perm": {
            "name": "get_perm",
            "location": 56,
            "return": [],
            "arguments": {
                "perm_id": []
            }
        },
        "list_perms": {
            "name": "list_perms",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "update_perm": {
            "name": "update_perm",
            "location": 136,
            "return": [],
            "arguments": {
                "perm_id": []
            }
        },
        "delete_perm": {
            "name": "delete_perm",
            "location": 163,
            "return": [],
            "arguments": {
                "perm_id": []
            }
        },
        "list_scopes": {
            "name": "list_scopes",
            "location": 182,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/users.py": {
        "create_user": {
            "name": "create_user",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 67,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "get_user_groups": {
            "name": "get_user_groups",
            "location": 80,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "get_me": {
            "name": "get_me",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "get_me_attributes": {
            "name": "get_me_attributes",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "list_users": {
            "name": "list_users",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "update_user": {
            "name": "update_user",
            "location": 167,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "update_me": {
            "name": "update_me",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "update_user_attributes": {
            "name": "update_user_attributes",
            "location": 237,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "update_me_attributes": {
            "name": "update_me_attributes",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "delete_user": {
            "name": "delete_user",
            "location": 283,
            "return": [],
            "arguments": {
                "user_id": []
            }
        }
    },
    "alerta-master/alerta/views/__init__.py": {
        "before_request": {
            "name": "before_request",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "debug": {
            "name": "debug",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/webhooks/cloudwatch.py": {
        "CloudWatchWebhook.cw_state_to_severity": {
            "name": "cw_state_to_severity",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "state": [
                    "str"
                ]
            }
        },
        "CloudWatchWebhook.incoming": {
            "name": "incoming",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/custom.py": {
        "custom": {
            "name": "custom",
            "location": 21,
            "return": [],
            "arguments": {
                "webhook": [],
                "path": []
            }
        },
        "custom.audit_trail_alert": {
            "name": "audit_trail_alert",
            "location": 49,
            "return": [],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/grafana.py": {
        "parse_grafana": {
            "name": "parse_grafana",
            "location": 18,
            "return": [
                "Alert"
            ],
            "arguments": {
                "args": [
                    "ImmutableMultiDict"
                ],
                "alert": [
                    "JSON"
                ],
                "match": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GrafanaWebhook.incoming": {
            "name": "incoming",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/graylog.py": {
        "GraylogWebhook.incoming": {
            "name": "incoming",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/newrelic.py": {
        "NewRelicWebhook.incoming": {
            "name": "incoming",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/pagerduty.py": {
        "parse_pagerduty": {
            "name": "parse_pagerduty",
            "location": 13,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {
                "message": [
                    "JSON"
                ]
            }
        },
        "PagerDutyWebhook.incoming": {
            "name": "incoming",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/pingdom.py": {
        "PingdomWebhook.incoming": {
            "name": "incoming",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/prometheus.py": {
        "parse_prometheus": {
            "name": "parse_prometheus",
            "location": 16,
            "return": [
                "Alert"
            ],
            "arguments": {
                "alert": [
                    "JSON"
                ],
                "external_url": [
                    "str"
                ]
            }
        },
        "PrometheusWebhook.incoming": {
            "name": "incoming",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/riemann.py": {
        "RiemannWebhook.incoming": {
            "name": "incoming",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/serverdensity.py": {
        "ServerDensityWebhook.incoming": {
            "name": "incoming",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/slack.py": {
        "parse_slack": {
            "name": "parse_slack",
            "location": 17,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {
                "data": [
                    "ImmutableMultiDict"
                ]
            }
        },
        "build_slack_response": {
            "name": "build_slack_response",
            "location": 34,
            "return": [
                "JSON"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ],
                "action": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "data": [
                    "ImmutableMultiDict"
                ]
            }
        },
        "SlackWebhook.incoming": {
            "name": "incoming",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/stackdriver.py": {
        "StackDriverWebhook.incoming": {
            "name": "incoming",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/telegram.py": {
        "send_message_reply": {
            "name": "send_message_reply",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "alert": [
                    "Alert"
                ],
                "action": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "data": [
                    "JSON"
                ]
            }
        },
        "TelegramWebhook.incoming": {
            "name": "incoming",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/alerta/webhooks/__init__.py": {
        "before_request": {
            "name": "before_request",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "WebhookBase.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WebhookBase.incoming": {
            "name": "incoming",
            "location": 38,
            "return": [
                "Union[(Alert, JSON)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "query_string": [
                    "ImmutableMultiDict"
                ],
                "payload": [
                    "Any"
                ]
            }
        }
    },
    "alerta-master/contrib/plugins/gitlab/alerta_gitlab.py": {
        "GitlabIssue.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GitlabIssue.pre_receive": {
            "name": "pre_receive",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "GitlabIssue.post_receive": {
            "name": "post_receive",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "GitlabIssue.status_change": {
            "name": "status_change",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "GitlabIssue.take_action": {
            "name": "take_action",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        }
    },
    "alerta-master/contrib/plugins/gitlab/setup.py": {},
    "alerta-master/contrib/routing/routing.py": {
        "rules": {
            "name": "rules",
            "location": 4,
            "return": [],
            "arguments": {
                "alert": [],
                "plugins": []
            }
        }
    },
    "alerta-master/contrib/routing/setup.py": {},
    "alerta-master/examples/plugins/routing/routing.py": {
        "rules": {
            "name": "rules",
            "location": 22,
            "return": [],
            "arguments": {
                "alert": [],
                "plugins": []
            }
        }
    },
    "alerta-master/examples/plugins/routing/setup.py": {},
    "alerta-master/examples/plugins/transient/alerta_transient.py": {
        "TransientAlert.pre_receive": {
            "name": "pre_receive",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "TransientAlert.post_receive": {
            "name": "post_receive",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "TransientAlert.status_change": {
            "name": "status_change",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        }
    },
    "alerta-master/examples/plugins/transient/setup.py": {},
    "alerta-master/tests/test_actions.py": {
        "ActionsTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionsTestCase.tearDown": {
            "name": "tearDown",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionsTestCase.test_alert": {
            "name": "test_alert",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActionsTestCase.test_unwind_actions": {
            "name": "test_unwind_actions",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_aggregations.py": {
        "AggregationsTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AggregationsTestCase.tearDown": {
            "name": "tearDown",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AggregationsTestCase.test_aggregations": {
            "name": "test_aggregations",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AggregationsTestCase.setUp.random_resource": {
            "name": "random_resource",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/tests/test_alerts.py": {
        "AlertsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.tearDown": {
            "name": "tearDown",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert": {
            "name": "test_alert",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_not_found": {
            "name": "test_alert_not_found",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_get_alerts": {
            "name": "test_get_alerts",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_status": {
            "name": "test_alert_status",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_closed_alerts": {
            "name": "test_closed_alerts",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_expired_alerts": {
            "name": "test_expired_alerts",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_reopen_alerts": {
            "name": "test_reopen_alerts",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_duplicate_status": {
            "name": "test_duplicate_status",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_duplicate_value": {
            "name": "test_duplicate_value",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_tagging": {
            "name": "test_alert_tagging",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_no_attributes": {
            "name": "test_alert_no_attributes",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_attributes": {
            "name": "test_alert_attributes",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_history_limit": {
            "name": "test_history_limit",
            "location": 612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_timeout": {
            "name": "test_timeout",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_filter_params": {
            "name": "test_filter_params",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_query_param": {
            "name": "test_query_param",
            "location": 739,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_filter_and_query_params": {
            "name": "test_filter_and_query_params",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alerts_show_fields": {
            "name": "test_alerts_show_fields",
            "location": 763,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_get_body": {
            "name": "test_get_body",
            "location": 788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyRemoteIPPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 826,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummyRemoteIPPlugin.post_receive": {
            "name": "post_receive",
            "location": 829,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummyRemoteIPPlugin.status_change": {
            "name": "status_change",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        }
    },
    "alerta-master/tests/test_auth.py": {
        "AuthTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_401_error": {
            "name": "test_401_error",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_user_defined_key": {
            "name": "test_user_defined_key",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_admin_key": {
            "name": "test_admin_key",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_readwrite_key": {
            "name": "test_readwrite_key",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_rw_delete_key": {
            "name": "test_rw_delete_key",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_readonly_key": {
            "name": "test_readonly_key",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_users": {
            "name": "test_users",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_login": {
            "name": "test_login",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_x_api_key": {
            "name": "test_x_api_key",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_edit_api_keys": {
            "name": "test_edit_api_keys",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_basic_auth": {
            "name": "test_basic_auth",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_edit_user": {
            "name": "test_edit_user",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_hmac_auth": {
            "name": "test_hmac_auth",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_blackouts.py": {
        "BlackoutsTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.tearDown": {
            "name": "tearDown",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_suppress_blackout": {
            "name": "test_suppress_blackout",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_notification_blackout": {
            "name": "test_notification_blackout",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_previous_status": {
            "name": "test_previous_status",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_whole_environment_blackout": {
            "name": "test_whole_environment_blackout",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_combination_blackout": {
            "name": "test_combination_blackout",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_origin_blackout": {
            "name": "test_origin_blackout",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_custom_notify": {
            "name": "test_custom_notify",
            "location": 676,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_edit_blackout": {
            "name": "test_edit_blackout",
            "location": 725,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_user_info": {
            "name": "test_user_info",
            "location": 785,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blackout.pre_receive": {
            "name": "pre_receive",
            "location": 804,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Blackout.post_receive": {
            "name": "post_receive",
            "location": 814,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Blackout.status_change": {
            "name": "status_change",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustomNotify.pre_receive": {
            "name": "pre_receive",
            "location": 823,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustomNotify.post_receive": {
            "name": "post_receive",
            "location": 826,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustomNotify.status_change": {
            "name": "status_change",
            "location": 844,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        }
    },
    "alerta-master/tests/test_builtins.py": {
        "BuiltinsTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.tearDown": {
            "name": "tearDown",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_remote_ip_alert": {
            "name": "test_remote_ip_alert",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_reject_alert": {
            "name": "test_reject_alert",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_heartbeat_alert": {
            "name": "test_heartbeat_alert",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_acked_by_plugin": {
            "name": "test_acked_by_plugin",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_commands.py": {
        "CommandsTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_key_cmd": {
            "name": "test_key_cmd",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_keys_cmd": {
            "name": "test_keys_cmd",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_user_cmd": {
            "name": "test_user_cmd",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_users_cmd": {
            "name": "test_users_cmd",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_config.py": {
        "ConfigTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.test_config": {
            "name": "test_config",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_cors.py": {
        "HTTPCorsTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPCorsTestCase.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPCorsTestCase.test_cors_headers": {
            "name": "test_cors_headers",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_customers.py": {
        "CustomersTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_customers": {
            "name": "test_customers",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_blackouts": {
            "name": "test_blackouts",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_assign_customer": {
            "name": "test_assign_customer",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_invalid_customer": {
            "name": "test_invalid_customer",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_edit_customer": {
            "name": "test_edit_customer",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_forwarder.py": {
        "ForwarderTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwarderTestCase.tearDown": {
            "name": "tearDown",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwarderTestCase.test_forward_alert": {
            "name": "test_forward_alert",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ForwarderTestCase.test_forward_action": {
            "name": "test_forward_action",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ForwarderTestCase.test_forward_delete": {
            "name": "test_forward_delete",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ForwarderTestCase.test_forward_heartbeat": {
            "name": "test_forward_heartbeat",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ForwarderTestCase.test_already_processed": {
            "name": "test_already_processed",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ForwarderTestCase.test_forward_loop": {
            "name": "test_forward_loop",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ForwarderTestCase.test_do_not_forward": {
            "name": "test_do_not_forward",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwarderTestCase.test_base_url": {
            "name": "test_base_url",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_groups.py": {
        "GroupsTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsTestCase.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsTestCase.test_groups": {
            "name": "test_groups",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_heartbeats.py": {
        "HeartbeatsTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_heartbeat": {
            "name": "test_heartbeat",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_heartbeat_not_found": {
            "name": "test_heartbeat_not_found",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_get_heartbeats": {
            "name": "test_get_heartbeats",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_timeout": {
            "name": "test_timeout",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_heartbeat_from_alert": {
            "name": "test_heartbeat_from_alert",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_hooks.py": {
        "PluginsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.tearDown": {
            "name": "tearDown",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_run_hooks": {
            "name": "test_run_hooks",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Plugin1.pre_receive": {
            "name": "pre_receive",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Plugin1.post_receive": {
            "name": "post_receive",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Plugin1.take_action": {
            "name": "take_action",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "Plugin1.status_change": {
            "name": "status_change",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "Plugin1.take_note": {
            "name": "take_note",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "text": []
            }
        },
        "Plugin1.delete": {
            "name": "delete",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/tests/test_isa_18_2.py": {
        "Isa182TestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.tearDown": {
            "name": "tearDown",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_ack_active_alarm": {
            "name": "test_ack_active_alarm",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_rtn_before_ack": {
            "name": "test_rtn_before_ack",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_operator_shelve": {
            "name": "test_operator_shelve",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_out_of_service": {
            "name": "test_out_of_service",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotificationBlackout.pre_receive": {
            "name": "pre_receive",
            "location": 728,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "NotificationBlackout.post_receive": {
            "name": "post_receive",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "NotificationBlackout.status_change": {
            "name": "status_change",
            "location": 736,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        }
    },
    "alerta-master/tests/test_logging.py": {
        "LoggingTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingTestCase.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingTestCase.test_audit_log": {
            "name": "test_audit_log",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingTestCase.test_audit_url": {
            "name": "test_audit_url",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "alerta-master/tests/test_management.py": {
        "ManagementTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.tearDown": {
            "name": "tearDown",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_manifest": {
            "name": "test_manifest",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_properties": {
            "name": "test_properties",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_good_to_go": {
            "name": "test_good_to_go",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_health_check": {
            "name": "test_health_check",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_housekeeping": {
            "name": "test_housekeeping",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_status": {
            "name": "test_status",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_prometheus": {
            "name": "test_prometheus",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.setUp.random_resource": {
            "name": "random_resource",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/tests/test_metrics.py": {
        "MetricsTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetricsTestCase.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetricsTestCase.test_metrics": {
            "name": "test_metrics",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetricsTestCase.test_prometheus": {
            "name": "test_prometheus",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_notes.py": {
        "AlertNotesTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertNotesTestCase.tearDown": {
            "name": "tearDown",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlertNotesTestCase.test_alert_notes": {
            "name": "test_alert_notes",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_plugins.py": {
        "PluginsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.tearDown": {
            "name": "tearDown",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_status_update": {
            "name": "test_status_update",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_take_action": {
            "name": "test_take_action",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_invalid_action": {
            "name": "test_invalid_action",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_im_a_teapot": {
            "name": "test_im_a_teapot",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_take_note": {
            "name": "test_take_note",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_delete": {
            "name": "test_delete",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_add_and_remove_tags": {
            "name": "test_add_and_remove_tags",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_custom_ack": {
            "name": "test_custom_ack",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "OldPlugin1.post_receive": {
            "name": "post_receive",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "OldPlugin1.status_change": {
            "name": "status_change",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustPlugin1.post_receive": {
            "name": "post_receive",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustPlugin1.status_change": {
            "name": "status_change",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustPlugin2.pre_receive": {
            "name": "pre_receive",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustPlugin2.post_receive": {
            "name": "post_receive",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustPlugin2.status_change": {
            "name": "status_change",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustPlugin3.pre_receive": {
            "name": "pre_receive",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustPlugin3.post_receive": {
            "name": "post_receive",
            "location": 510,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustPlugin3.status_change": {
            "name": "status_change",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustActionPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustActionPlugin1.post_receive": {
            "name": "post_receive",
            "location": 533,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustActionPlugin1.status_change": {
            "name": "status_change",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustActionPlugin1.take_action": {
            "name": "take_action",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "CustActionPlugin2.pre_receive": {
            "name": "pre_receive",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustActionPlugin2.post_receive": {
            "name": "post_receive",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustActionPlugin2.status_change": {
            "name": "status_change",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustActionPlugin2.take_action": {
            "name": "take_action",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "CustActionPlugin3.pre_receive": {
            "name": "pre_receive",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustActionPlugin3.post_receive": {
            "name": "post_receive",
            "location": 587,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustActionPlugin3.status_change": {
            "name": "status_change",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustActionPlugin3.take_action": {
            "name": "take_action",
            "location": 593,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "CustNotePlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 603,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustNotePlugin1.post_receive": {
            "name": "post_receive",
            "location": 606,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustNotePlugin1.status_change": {
            "name": "status_change",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustNotePlugin1.take_note": {
            "name": "take_note",
            "location": 612,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "text": []
            }
        },
        "CustDeletePlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustDeletePlugin1.post_receive": {
            "name": "post_receive",
            "location": 630,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustDeletePlugin1.status_change": {
            "name": "status_change",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustDeletePlugin1.take_action": {
            "name": "take_action",
            "location": 636,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "CustDeletePlugin1.delete": {
            "name": "delete",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustDeletePlugin2.pre_receive": {
            "name": "pre_receive",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustDeletePlugin2.post_receive": {
            "name": "post_receive",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustDeletePlugin2.status_change": {
            "name": "status_change",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustDeletePlugin2.take_action": {
            "name": "take_action",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "CustDeletePlugin2.delete": {
            "name": "delete",
            "location": 657,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustAckPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 663,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustAckPlugin1.post_receive": {
            "name": "post_receive",
            "location": 666,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "CustAckPlugin1.status_change": {
            "name": "status_change",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "CustAckPlugin1.take_action": {
            "name": "take_action",
            "location": 672,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "CustAckPlugin1.delete": {
            "name": "delete",
            "location": 678,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Teapot.pre_receive": {
            "name": "pre_receive",
            "location": 684,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Teapot.post_receive": {
            "name": "post_receive",
            "location": 693,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "Teapot.status_change": {
            "name": "status_change",
            "location": 701,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "Teapot.take_action": {
            "name": "take_action",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        },
        "Teapot.take_note": {
            "name": "take_note",
            "location": 718,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "text": []
            }
        },
        "Teapot.delete": {
            "name": "delete",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        }
    },
    "alerta-master/tests/test_providers.py": {
        "AuthProvidersTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthProvidersTestCase.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthProvidersTestCase.test_amazon_cognito": {
            "name": "test_amazon_cognito",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_azure_v1": {
            "name": "test_azure_v1",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_azure_v2": {
            "name": "test_azure_v2",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_github": {
            "name": "test_github",
            "location": 605,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_gitlab": {
            "name": "test_gitlab",
            "location": 814,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_google": {
            "name": "test_google",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_keycloak": {
            "name": "test_keycloak",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_openid_auth0": {
            "name": "test_openid_auth0",
            "location": 1429,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_openid_idp": {
            "name": "test_openid_idp",
            "location": 1618,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_openid_okta": {
            "name": "test_openid_okta",
            "location": 1838,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "alerta-master/tests/test_queryparser.py": {
        "skip_postgres": {
            "name": "skip_postgres",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "skip_mongodb": {
            "name": "skip_mongodb",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "PostgresQueryTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_word_and_phrase_terms": {
            "name": "test_word_and_phrase_terms",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_field_names": {
            "name": "test_field_names",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_wildcards": {
            "name": "test_wildcards",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_regular_expressions": {
            "name": "test_regular_expressions",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_fuzziness": {
            "name": "test_fuzziness",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_proximity_searches": {
            "name": "test_proximity_searches",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_ranges": {
            "name": "test_ranges",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_unbounded_ranges": {
            "name": "test_unbounded_ranges",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_boosting": {
            "name": "test_boosting",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_boolean_operators": {
            "name": "test_boolean_operators",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_grouping": {
            "name": "test_grouping",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.setUp": {
            "name": "setUp",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_word_and_phrase_terms": {
            "name": "test_word_and_phrase_terms",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_field_names": {
            "name": "test_field_names",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_wildcards": {
            "name": "test_wildcards",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_regular_expressions": {
            "name": "test_regular_expressions",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_fuzziness": {
            "name": "test_fuzziness",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_proximity_searches": {
            "name": "test_proximity_searches",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_ranges": {
            "name": "test_ranges",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_unbounded_ranges": {
            "name": "test_unbounded_ranges",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_boosting": {
            "name": "test_boosting",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_boolean_operators": {
            "name": "test_boolean_operators",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_grouping": {
            "name": "test_grouping",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_response.py": {
        "ApiResponseTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiResponseTestCase.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiResponseTestCase.test_response_custom_id": {
            "name": "test_response_custom_id",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiResponseTestCase.test_response_href": {
            "name": "test_response_href",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_scopes.py": {
        "ScopesTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_scopes": {
            "name": "test_scopes",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_is_in_scope": {
            "name": "test_is_in_scope",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_edit_perms": {
            "name": "test_edit_perms",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_custom_scopes": {
            "name": "test_custom_scopes",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_system_roles": {
            "name": "test_system_roles",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.setUp.make_key": {
            "name": "make_key",
            "location": 27,
            "return": [],
            "arguments": {
                "user": [],
                "scopes": [],
                "type": [],
                "text": []
            }
        }
    },
    "alerta-master/tests/test_search.py": {
        "SearchTestCase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_filter": {
            "name": "test_alerts_filter",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_sort_by": {
            "name": "test_alerts_sort_by",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_query": {
            "name": "test_alerts_query",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_attributes": {
            "name": "test_alerts_attributes",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_blackouts_filter": {
            "name": "test_blackouts_filter",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_blackouts_sort_by": {
            "name": "test_blackouts_sort_by",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_blackouts_query": {
            "name": "test_blackouts_query",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "mock_datetime": []
            }
        },
        "SearchTestCase.test_heartbeats_filter": {
            "name": "test_heartbeats_filter",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_heartbeats_sort_by": {
            "name": "test_heartbeats_sort_by",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_heartbeats_query": {
            "name": "test_heartbeats_query",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_keys_filter": {
            "name": "test_keys_filter",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_keys_sort_by": {
            "name": "test_keys_sort_by",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_keys_query": {
            "name": "test_keys_query",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "mock_datetime": []
            }
        },
        "SearchTestCase.test_users_filter": {
            "name": "test_users_filter",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_users_sort_by": {
            "name": "test_users_sort_by",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_users_query": {
            "name": "test_users_query",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_groups_filter": {
            "name": "test_groups_filter",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_groups_sort_by": {
            "name": "test_groups_sort_by",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_groups_query": {
            "name": "test_groups_query",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_perms_filter": {
            "name": "test_perms_filter",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_perms_sort_by": {
            "name": "test_perms_sort_by",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_perms_query": {
            "name": "test_perms_query",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_customers_filter": {
            "name": "test_customers_filter",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_customers_sort_by": {
            "name": "test_customers_sort_by",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_customers_query": {
            "name": "test_customers_query",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.setUp": {
            "name": "setUp",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.tearDown": {
            "name": "tearDown",
            "location": 708,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase._search": {
            "name": "_search",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "q": []
            }
        },
        "QueryParserTestCase.test_single_word_terms": {
            "name": "test_single_word_terms",
            "location": 717,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_phrase_terms": {
            "name": "test_phrase_terms",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_field_names": {
            "name": "test_field_names",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_wildcards": {
            "name": "test_wildcards",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_regex": {
            "name": "test_regex",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_ranges": {
            "name": "test_ranges",
            "location": 762,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_boolean_operators": {
            "name": "test_boolean_operators",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_grouping": {
            "name": "test_grouping",
            "location": 795,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_severity.py": {
        "SeverityTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.tearDown": {
            "name": "tearDown",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.test_inactive": {
            "name": "test_inactive",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.test_active": {
            "name": "test_active",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.test_invalid": {
            "name": "test_invalid",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_shelving.py": {
        "ShelvingTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShelvingTestCase.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShelvingTestCase.test_shelved_status": {
            "name": "test_shelved_status",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShelvingTestCase.test_shelve_action": {
            "name": "test_shelve_action",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_tags.py": {
        "TagsTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TagsTestCase.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TagsTestCase.test_tag_alert": {
            "name": "test_tag_alert",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TagPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "TagPlugin.post_receive": {
            "name": "post_receive",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "TagPlugin.status_change": {
            "name": "status_change",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "TagPlugin.take_action": {
            "name": "take_action",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "action": [],
                "text": []
            }
        }
    },
    "alerta-master/tests/test_users.py": {
        "UsersTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersTestCase.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersTestCase.test_user": {
            "name": "test_user",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UsersTestCase.test_user_attributes": {
            "name": "test_user_attributes",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_webhooks.py": {
        "WebhooksTestCase.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.tearDown": {
            "name": "tearDown",
            "location": 761,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_cloudwatch_webhook": {
            "name": "test_cloudwatch_webhook",
            "location": 765,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_grafana_webhook": {
            "name": "test_grafana_webhook",
            "location": 803,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_graylog_webhook": {
            "name": "test_graylog_webhook",
            "location": 881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_new_relic_webhook": {
            "name": "test_new_relic_webhook",
            "location": 894,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_pagerduty_webhook": {
            "name": "test_pagerduty_webhook",
            "location": 906,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_pingdom_webhook": {
            "name": "test_pingdom_webhook",
            "location": 938,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_prometheus_webhook": {
            "name": "test_prometheus_webhook",
            "location": 960,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_riemann_webhook": {
            "name": "test_riemann_webhook",
            "location": 993,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_stackdriver_webhook": {
            "name": "test_stackdriver_webhook",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_telegram_webhook": {
            "name": "test_telegram_webhook",
            "location": 1028,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_vmware_webhook": {
            "name": "test_vmware_webhook",
            "location": 1072,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_custom_webhook": {
            "name": "test_custom_webhook",
            "location": 1089,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VmwareWebhook.incoming": {
            "name": "incoming",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        },
        "DummyJsonWebhook.incoming": {
            "name": "incoming",
            "location": 1181,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        },
        "DummyTextWebhook.incoming": {
            "name": "incoming",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        },
        "DummyFormWebhook.incoming": {
            "name": "incoming",
            "location": 1208,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        },
        "DummyMultiPartFormWebhook.incoming": {
            "name": "incoming",
            "location": 1219,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        },
        "DummyUserDefinedWebhook.incoming": {
            "name": "incoming",
            "location": 1230,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        },
        "TeapotWebhook.incoming": {
            "name": "incoming",
            "location": 1240,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "query_string": [],
                "payload": []
            }
        }
    },
    "alerta-master/tests/test_zrouting.py": {
        "rules": {
            "name": "rules",
            "location": 297,
            "return": [],
            "arguments": {
                "alert": [],
                "plugins": []
            }
        },
        "RoutingTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.tearDown": {
            "name": "tearDown",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.test_config": {
            "name": "test_config",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.test_config_precedence": {
            "name": "test_config_precedence",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.test_routing": {
            "name": "test_routing",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyConfigPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummyConfigPlugin.post_receive": {
            "name": "post_receive",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummyConfigPlugin.status_change": {
            "name": "status_change",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "DummyPagerDutyPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummyPagerDutyPlugin.post_receive": {
            "name": "post_receive",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummyPagerDutyPlugin.status_change": {
            "name": "status_change",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        },
        "DummySlackPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummySlackPlugin.post_receive": {
            "name": "post_receive",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "alert": []
            }
        },
        "DummySlackPlugin.status_change": {
            "name": "status_change",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "alert": [],
                "status": [],
                "text": []
            }
        }
    },
    "alerta-master/tests/__init__.py": {},
    "alerta-master/tests/helpers/utils.py": {
        "mod_env": {
            "name": "mod_env",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/tests/helpers/__init__.py": {},
    "alerta-master/tests/integration/test_auth_ldap.py": {
        "LDAPIntegrationTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login": {
            "name": "test_login",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login_with_ldap_domain": {
            "name": "test_login_with_ldap_domain",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login_with_no_domain": {
            "name": "test_login_with_no_domain",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login_invalid_group": {
            "name": "test_login_invalid_group",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/integration/test_auth_saml.py": {
        "xpath": {
            "name": "xpath",
            "location": 15,
            "return": [],
            "arguments": {
                "el": [],
                "path": []
            }
        },
        "SAMLIntegrationTestCase.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAMLIntegrationTestCase.test_login_redirect": {
            "name": "test_login_redirect",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAMLIntegrationTestCase.test_saml2_metadata": {
            "name": "test_saml2_metadata",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
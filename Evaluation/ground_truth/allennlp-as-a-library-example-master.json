{
    "allennlp-as-a-library-example-master/my_library/__init__.py": {},
    "allennlp-as-a-library-example-master/my_library/dataset_readers/semantic_scholar_papers.py": {
        "SemanticScholarDatasetReader.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "tokenizer": [
                    "Tokenizer"
                ],
                "token_indexers": [
                    "Dict[(str, TokenIndexer)]"
                ]
            }
        },
        "SemanticScholarDatasetReader._read": {
            "name": "_read",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "SemanticScholarDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 70,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "abstract": [
                    "str"
                ],
                "venue": [
                    "str"
                ]
            }
        }
    },
    "allennlp-as-a-library-example-master/my_library/dataset_readers/__init__.py": {},
    "allennlp-as-a-library-example-master/my_library/models/academic_paper_classifier.py": {
        "AcademicPaperClassifier.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Vocabulary"
                ],
                "text_field_embedder": [
                    "TextFieldEmbedder"
                ],
                "title_encoder": [
                    "Seq2VecEncoder"
                ],
                "abstract_encoder": [
                    "Seq2VecEncoder"
                ],
                "classifier_feedforward": [
                    "FeedForward"
                ],
                "initializer": [
                    "InitializerApplicator"
                ],
                "regularizer": [
                    "Optional[RegularizerApplicator]"
                ]
            }
        },
        "AcademicPaperClassifier.forward": {
            "name": "forward",
            "location": 78,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "Dict[(str, torch.LongTensor)]"
                ],
                "abstract": [
                    "Dict[(str, torch.LongTensor)]"
                ],
                "label": [
                    "torch.LongTensor"
                ]
            }
        },
        "AcademicPaperClassifier.decode": {
            "name": "decode",
            "location": 121,
            "return": [
                "Dict[(str, torch.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[(str, torch.Tensor)]"
                ]
            }
        },
        "AcademicPaperClassifier.get_metrics": {
            "name": "get_metrics",
            "location": 137,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "allennlp-as-a-library-example-master/my_library/models/__init__.py": {},
    "allennlp-as-a-library-example-master/my_library/predictors/paper_classifier_predictor.py": {
        "PaperClassifierPredictor.predict_json": {
            "name": "predict_json",
            "location": 10,
            "return": [
                "JsonDict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "JsonDict"
                ]
            }
        },
        "PaperClassifierPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 21,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "JsonDict"
                ]
            }
        }
    },
    "allennlp-as-a-library-example-master/my_library/predictors/__init__.py": {},
    "allennlp-as-a-library-example-master/tests/dataset_readers/semantic_scholar_dataset_reader_test.py": {
        "TestSemanticScholarDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-as-a-library-example-master/tests/dataset_readers/__init__.py": {},
    "allennlp-as-a-library-example-master/tests/models/academic_paper_classifier_test.py": {
        "AcademicPaperClassifierTest.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcademicPaperClassifierTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-as-a-library-example-master/tests/models/__init__.py": {},
    "allennlp-as-a-library-example-master/tests/predictors/predictor_test.py": {
        "TestPaperClassifierPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "annofab-api-python-client-main/annofabapi/api.py": {
        "_raise_for_status": {
            "name": "_raise_for_status",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "requests.Response"
                ]
            }
        },
        "_log_error_response": {
            "name": "_log_error_response",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "arg_logger": [
                    "logging.Logger"
                ],
                "response": [
                    "requests.Response"
                ]
            }
        },
        "_create_request_body_for_logger": {
            "name": "_create_request_body_for_logger",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [
                    "Any"
                ]
            }
        },
        "_create_query_params_for_logger": {
            "name": "_create_query_params_for_logger",
            "location": 136,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_should_retry_with_status": {
            "name": "_should_retry_with_status",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "status_code": [
                    "int"
                ]
            }
        },
        "my_backoff": {
            "name": "my_backoff",
            "location": 177,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "_log_error_response.mask_key": {
            "name": "mask_key",
            "location": 58,
            "return": [],
            "arguments": {
                "d": [],
                "key": [
                    "str"
                ]
            }
        },
        "_create_request_body_for_logger.mask_key": {
            "name": "mask_key",
            "location": 113,
            "return": [],
            "arguments": {
                "d": [],
                "key": [
                    "str"
                ]
            }
        },
        "_create_query_params_for_logger.mask_key": {
            "name": "mask_key",
            "location": 148,
            "return": [],
            "arguments": {
                "d": [],
                "key": [
                    "str"
                ]
            }
        },
        "my_backoff.wrapped": {
            "name": "wrapped",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "AnnofabApi.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "login_user_id": [
                    "str"
                ],
                "login_password": [
                    "str"
                ],
                "endpoint_url": [
                    "str"
                ]
            }
        },
        "AnnofabApi._encode_query_params": {
            "name": "_encode_query_params",
            "location": 269,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "query_params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AnnofabApi._create_kwargs": {
            "name": "_create_kwargs",
            "location": 288,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "headers": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AnnofabApi._response_to_content": {
            "name": "_response_to_content",
            "location": 333,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": [
                    "requests.Response"
                ]
            }
        },
        "AnnofabApi._execute_http_request": {
            "name": "_execute_http_request",
            "location": 362,
            "return": [
                "requests.Response"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "AnnofabApi._request_wrapper": {
            "name": "_request_wrapper",
            "location": 458,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str"
                ],
                "url_path": [
                    "str"
                ]
            }
        },
        "AnnofabApi._get_signed_cookie": {
            "name": "_get_signed_cookie",
            "location": 571,
            "return": [
                "Tuple[(Dict[(str, Any)], requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AnnofabApi._request_get_with_cookie": {
            "name": "_request_get_with_cookie",
            "location": 590,
            "return": [
                "requests.Response"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "AnnofabApi.login": {
            "name": "login",
            "location": 625,
            "return": [
                "Tuple[(Dict[(str, Any)], requests.Response)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnofabApi.logout": {
            "name": "logout",
            "location": 646,
            "return": [
                "Tuple[(Dict[(str, Any)], requests.Response)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnofabApi.refresh_token": {
            "name": "refresh_token",
            "location": 668,
            "return": [
                "Tuple[(Dict[(str, Any)], requests.Response)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnofabApi.account_id": {
            "name": "account_id",
            "location": 695,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_backoff.wrapped.fatal_code": {
            "name": "fatal_code",
            "location": 184,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "AnnofabApi._MyToken.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "id_token": [
                    "str"
                ]
            }
        },
        "AnnofabApi._MyToken.__call__": {
            "name": "__call__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "req": []
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/api2.py": {
        "AnnofabApi2.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "api": [
                    "AnnofabApi"
                ]
            }
        },
        "AnnofabApi2._request_wrapper": {
            "name": "_request_wrapper",
            "location": 46,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str"
                ],
                "url_path": [
                    "str"
                ]
            }
        },
        "AnnofabApi2._get_signed_access_v2": {
            "name": "_get_signed_access_v2",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "url_path": [
                    "str"
                ]
            }
        },
        "AnnofabApi2.get_signed_access_v2": {
            "name": "get_signed_access_v2",
            "location": 182,
            "return": [
                "Tuple[(Dict[(str, Any)], requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "query_params": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/exceptions.py": {
        "AnnotationOuterFileNotFoundError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "outer_file_path": [
                    "str"
                ],
                "zipfile_path": [
                    "Optional[str]"
                ]
            }
        },
        "NotLoggedInError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "CheckSumError.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "uploaded_data_hash": [
                    "str"
                ],
                "response_etag": [
                    "str"
                ]
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/generated_api.py": {
        "AbstractAnnofabApi._request_wrapper": {
            "name": "_request_wrapper",
            "location": 26,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str"
                ],
                "url_path": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "header_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.batch_update_annotations": {
            "name": "batch_update_annotations",
            "location": 41,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.get_annotation": {
            "name": "get_annotation",
            "location": 71,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_annotation_archive": {
            "name": "get_annotation_archive",
            "location": 99,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_annotation_list": {
            "name": "get_annotation_list",
            "location": 123,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_archive_full_with_pro_id": {
            "name": "get_archive_full_with_pro_id",
            "location": 158,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_editor_annotation": {
            "name": "get_editor_annotation",
            "location": 188,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.post_annotation_archive_update": {
            "name": "post_annotation_archive_update",
            "location": 220,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.put_annotation": {
            "name": "put_annotation",
            "location": 244,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.get_annotation_specs": {
            "name": "get_annotation_specs",
            "location": 281,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_annotation_specs_histories": {
            "name": "get_annotation_specs_histories",
            "location": 312,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.put_annotation_specs": {
            "name": "put_annotation_specs",
            "location": 336,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.batch_update_comments": {
            "name": "batch_update_comments",
            "location": 371,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.get_comments": {
            "name": "get_comments",
            "location": 412,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.batch_update_inputs": {
            "name": "batch_update_inputs",
            "location": 449,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.create_temp_path": {
            "name": "create_temp_path",
            "location": 479,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.delete_input_data": {
            "name": "delete_input_data",
            "location": 503,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_input_data": {
            "name": "get_input_data",
            "location": 528,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_input_data_list": {
            "name": "get_input_data_list",
            "location": 553,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.put_input_data": {
            "name": "put_input_data",
            "location": 590,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.batch_update_inspections": {
            "name": "batch_update_inspections",
            "location": 626,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.get_inspections": {
            "name": "get_inspections",
            "location": 664,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.delete_instruction_image": {
            "name": "delete_instruction_image",
            "location": 701,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "image_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_instruction": {
            "name": "get_instruction",
            "location": 726,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_instruction_history": {
            "name": "get_instruction_history",
            "location": 756,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_instruction_image_url_for_put": {
            "name": "get_instruction_image_url_for_put",
            "location": 786,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "image_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_instruction_images": {
            "name": "get_instruction_images",
            "location": 813,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.put_instruction": {
            "name": "put_instruction",
            "location": 837,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_project_job": {
            "name": "delete_project_job",
            "location": 872,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_type": [
                    "str"
                ],
                "job_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_job": {
            "name": "get_organization_job",
            "location": 900,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_job": {
            "name": "get_project_job",
            "location": 932,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_my_account": {
            "name": "get_my_account",
            "location": 969,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAnnofabApi.get_my_member_in_project": {
            "name": "get_my_member_in_project",
            "location": 992,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_my_organizations": {
            "name": "get_my_organizations",
            "location": 1016,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAnnofabApi.get_my_project_members": {
            "name": "get_my_project_members",
            "location": 1039,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAnnofabApi.get_my_projects": {
            "name": "get_my_projects",
            "location": 1062,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.put_my_account": {
            "name": "put_my_account",
            "location": 1095,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.update_organization": {
            "name": "update_organization",
            "location": 1122,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.create_new_organization": {
            "name": "create_new_organization",
            "location": 1160,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_organization": {
            "name": "delete_organization",
            "location": 1187,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization": {
            "name": "get_organization",
            "location": 1211,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_activity": {
            "name": "get_organization_activity",
            "location": 1235,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_projects_of_organization": {
            "name": "get_projects_of_organization",
            "location": 1259,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.put_organization": {
            "name": "put_organization",
            "location": 1297,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_organization_input_data": {
            "name": "delete_organization_input_data",
            "location": 1332,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "input_data_set_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_input_data_set": {
            "name": "get_input_data_set",
            "location": 1360,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "input_data_set_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_input_data_set_list": {
            "name": "get_input_data_set_list",
            "location": 1387,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_input_data": {
            "name": "get_organization_input_data",
            "location": 1411,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "input_data_set_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_input_data_list": {
            "name": "get_organization_input_data_list",
            "location": 1439,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "input_data_set_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.put_input_data_set": {
            "name": "put_input_data_set",
            "location": 1477,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "input_data_set_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.accept_organization_invitation": {
            "name": "accept_organization_invitation",
            "location": 1513,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_organization_member": {
            "name": "delete_organization_member",
            "location": 1544,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_member": {
            "name": "get_organization_member",
            "location": 1571,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_members": {
            "name": "get_organization_members",
            "location": 1596,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.invite_organization_member": {
            "name": "invite_organization_member",
            "location": 1620,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.update_organization_member_role": {
            "name": "update_organization_member_role",
            "location": 1651,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_organization_plugin": {
            "name": "delete_organization_plugin",
            "location": 1687,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "plugin_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_plugin": {
            "name": "get_organization_plugin",
            "location": 1714,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "plugin_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_plugins": {
            "name": "get_organization_plugins",
            "location": 1741,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.put_organization_plugin": {
            "name": "put_organization_plugin",
            "location": 1765,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "plugin_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_project": {
            "name": "delete_project",
            "location": 1801,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_organization_of_project": {
            "name": "get_organization_of_project",
            "location": 1825,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project": {
            "name": "get_project",
            "location": 1849,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_comments_url": {
            "name": "get_project_comments_url",
            "location": 1873,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_inputs_url": {
            "name": "get_project_inputs_url",
            "location": 1897,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_inspections_url": {
            "name": "get_project_inspections_url",
            "location": 1921,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_task_histories_url": {
            "name": "get_project_task_histories_url",
            "location": 1951,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_task_history_events_url": {
            "name": "get_project_task_history_events_url",
            "location": 1975,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_tasks_url": {
            "name": "get_project_tasks_url",
            "location": 2005,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.initiate_project_copy": {
            "name": "initiate_project_copy",
            "location": 2029,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.post_project_inputs_update": {
            "name": "post_project_inputs_update",
            "location": 2059,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.post_project_tasks_update": {
            "name": "post_project_tasks_update",
            "location": 2083,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.put_project": {
            "name": "put_project",
            "location": 2107,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_member": {
            "name": "get_project_member",
            "location": 2149,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_project_members": {
            "name": "get_project_members",
            "location": 2174,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.put_project_member": {
            "name": "put_project_member",
            "location": 2204,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.get_account_daily_statistics": {
            "name": "get_account_daily_statistics",
            "location": 2240,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_inspection_daily_statistics": {
            "name": "get_inspection_daily_statistics",
            "location": 2271,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_label_statistics": {
            "name": "get_label_statistics",
            "location": 2302,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_markers": {
            "name": "get_markers",
            "location": 2326,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_phase_daily_statistics": {
            "name": "get_phase_daily_statistics",
            "location": 2350,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_statistics_available_dates": {
            "name": "get_statistics_available_dates",
            "location": 2381,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_task_daily_statistics": {
            "name": "get_task_daily_statistics",
            "location": 2405,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_worktime_daily_statistics": {
            "name": "get_worktime_daily_statistics",
            "location": 2436,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.get_worktime_daily_statistics_by_account": {
            "name": "get_worktime_daily_statistics_by_account",
            "location": 2467,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "account_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.put_markers": {
            "name": "put_markers",
            "location": 2499,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_supplementary_data": {
            "name": "delete_supplementary_data",
            "location": 2534,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "supplementary_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_supplementary_data_list": {
            "name": "get_supplementary_data_list",
            "location": 2562,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.put_supplementary_data": {
            "name": "put_supplementary_data",
            "location": 2589,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "supplementary_data_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.assign_tasks": {
            "name": "assign_tasks",
            "location": 2631,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.batch_update_tasks": {
            "name": "batch_update_tasks",
            "location": 2661,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_task": {
            "name": "delete_task",
            "location": 2691,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_task": {
            "name": "get_task",
            "location": 2716,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_task_histories": {
            "name": "get_task_histories",
            "location": 2741,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_tasks": {
            "name": "get_tasks",
            "location": 2766,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi.initiate_tasks_generation": {
            "name": "initiate_tasks_generation",
            "location": 2812,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.operate_task": {
            "name": "operate_task",
            "location": 2842,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.patch_tasks_metadata": {
            "name": "patch_tasks_metadata",
            "location": 2873,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.put_task": {
            "name": "put_task",
            "location": 2903,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.delete_webhook": {
            "name": "delete_webhook",
            "location": 2939,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "webhook_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.get_webhooks": {
            "name": "get_webhooks",
            "location": 2964,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi.put_webhook": {
            "name": "put_webhook",
            "location": 2988,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "webhook_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi.test_webhook": {
            "name": "test_webhook",
            "location": 3019,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "webhook_id": [
                    "str"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/generated_api2.py": {
        "AbstractAnnofabApi2._request_wrapper": {
            "name": "_request_wrapper",
            "location": 26,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str"
                ],
                "url_path": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "header_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_annotation_specs_v2": {
            "name": "get_annotation_specs_v2",
            "location": 41,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_organization_member_v2": {
            "name": "get_organization_member_v2",
            "location": 78,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_organization_members_v2": {
            "name": "get_organization_members_v2",
            "location": 109,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_organization_by_name_v2": {
            "name": "get_organization_by_name_v2",
            "location": 144,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_organization_cache_by_name_v2": {
            "name": "get_organization_cache_by_name_v2",
            "location": 174,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi2.get_organization_cache_v2": {
            "name": "get_organization_cache_v2",
            "location": 198,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi2.get_organization_v2": {
            "name": "get_organization_v2",
            "location": 222,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_project_task_count_v2": {
            "name": "get_project_task_count_v2",
            "location": 252,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "organization_id": [
                    "str"
                ],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi2.get_project_member_v2": {
            "name": "get_project_member_v2",
            "location": 284,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_project_members_v2": {
            "name": "get_project_members_v2",
            "location": 315,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_project_cache_v2": {
            "name": "get_project_cache_v2",
            "location": 351,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi2.get_account_daily_statistics_v2": {
            "name": "get_account_daily_statistics_v2",
            "location": 380,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_inspection_daily_statistics_v2": {
            "name": "get_inspection_daily_statistics_v2",
            "location": 411,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_label_statistics_v2": {
            "name": "get_label_statistics_v2",
            "location": 442,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_phase_daily_statistics_v2": {
            "name": "get_phase_daily_statistics_v2",
            "location": 472,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_task_daily_statistics_v2": {
            "name": "get_task_daily_statistics_v2",
            "location": 503,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_worktime_daily_statistics_by_account_v2": {
            "name": "get_worktime_daily_statistics_by_account_v2",
            "location": 534,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "account_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_worktime_daily_statistics_v2": {
            "name": "get_worktime_daily_statistics_v2",
            "location": 566,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_account_v2": {
            "name": "get_account_v2",
            "location": 602,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "account_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_user_cache_v2": {
            "name": "get_user_cache_v2",
            "location": 632,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "account_id": [
                    "str"
                ]
            }
        },
        "AbstractAnnofabApi2.get_user_organizations_v2": {
            "name": "get_user_organizations_v2",
            "location": 656,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "account_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_user_project_members_v2": {
            "name": "get_user_project_members_v2",
            "location": 686,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "account_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractAnnofabApi2.get_user_projects_v2": {
            "name": "get_user_projects_v2",
            "location": 716,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "account_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/models.py": {},
    "annofab-api-python-client-main/annofabapi/parser.py": {
        "_trim_extension": {
            "name": "_trim_extension",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "__parse_annotation_dir": {
            "name": "__parse_annotation_dir",
            "location": 464,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "annotation_dir_path": [
                    "Path"
                ],
                "clazz": []
            }
        },
        "lazy_parse_simple_annotation_dir": {
            "name": "lazy_parse_simple_annotation_dir",
            "location": 480,
            "return": [
                "Iterator[SimpleAnnotationParser]"
            ],
            "arguments": {
                "annotation_dir_path": [
                    "Path"
                ]
            }
        },
        "lazy_parse_full_annotation_dir": {
            "name": "lazy_parse_full_annotation_dir",
            "location": 493,
            "return": [
                "Iterator[SimpleAnnotationParser]"
            ],
            "arguments": {
                "annotation_dir_path": [
                    "Path"
                ]
            }
        },
        "lazy_parse_simple_annotation_zip_by_task": {
            "name": "lazy_parse_simple_annotation_zip_by_task",
            "location": 505,
            "return": [
                "Iterator[SimpleAnnotationParserByTask]"
            ],
            "arguments": {
                "zip_file_path": [
                    "Path"
                ]
            }
        },
        "lazy_parse_simple_annotation_dir_by_task": {
            "name": "lazy_parse_simple_annotation_dir_by_task",
            "location": 564,
            "return": [
                "Iterator[SimpleAnnotationParserByTask]"
            ],
            "arguments": {
                "annotation_dir_path": [
                    "Path"
                ]
            }
        },
        "__parse_annotation_zip": {
            "name": "__parse_annotation_zip",
            "location": 586,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "zip_file_path": [
                    "Path"
                ],
                "clazz": []
            }
        },
        "lazy_parse_simple_annotation_zip": {
            "name": "lazy_parse_simple_annotation_zip",
            "location": 609,
            "return": [
                "Iterator[SimpleAnnotationParser]"
            ],
            "arguments": {
                "zip_file_path": [
                    "Path"
                ]
            }
        },
        "lazy_parse_full_annotation_zip": {
            "name": "lazy_parse_full_annotation_zip",
            "location": 623,
            "return": [
                "Iterator[FullAnnotationParser]"
            ],
            "arguments": {
                "zip_file_path": [
                    "Path"
                ]
            }
        },
        "SimpleAnnotationParser.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationParser.task_id": {
            "name": "task_id",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationParser.json_file_path": {
            "name": "json_file_path",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationParser.input_data_id": {
            "name": "input_data_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationParser.open_outer_file": {
            "name": "open_outer_file",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "data_uri": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationParser.parse": {
            "name": "parse",
            "location": 77,
            "return": [
                "SimpleAnnotation"
            ],
            "arguments": {
                "self": [],
                "convert_detail_data_func": [
                    "Optional[CONVERT_ANNOTATION_DETAIL_DATA_FUNC]"
                ]
            }
        },
        "SimpleAnnotationParser.load_json": {
            "name": "load_json",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullAnnotationParser.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "FullAnnotationParser.task_id": {
            "name": "task_id",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullAnnotationParser.json_file_path": {
            "name": "json_file_path",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullAnnotationParser.input_data_id": {
            "name": "input_data_id",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullAnnotationParser.open_outer_file": {
            "name": "open_outer_file",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "data_uri": [
                    "str"
                ]
            }
        },
        "FullAnnotationParser.load_json": {
            "name": "load_json",
            "location": 160,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullAnnotationParser.parse": {
            "name": "parse",
            "location": 165,
            "return": [
                "FullAnnotation"
            ],
            "arguments": {
                "self": [],
                "convert_detail_data_func": [
                    "Optional[CONVERT_ANNOTATION_DETAIL_DATA_FUNC]"
                ]
            }
        },
        "SimpleAnnotationZipParser.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "zip_file": [
                    "zipfile.ZipFile"
                ],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationZipParser.load_json": {
            "name": "load_json",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationZipParser.open_outer_file": {
            "name": "open_outer_file",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "data_uri": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationDirParser.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "Path"
                ]
            }
        },
        "SimpleAnnotationDirParser.load_json": {
            "name": "load_json",
            "location": 238,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationDirParser.open_outer_file": {
            "name": "open_outer_file",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "data_uri": [
                    "str"
                ]
            }
        },
        "FullAnnotationZipParser.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "zip_file": [
                    "zipfile.ZipFile"
                ],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "FullAnnotationZipParser.load_json": {
            "name": "load_json",
            "location": 272,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullAnnotationZipParser.open_outer_file": {
            "name": "open_outer_file",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "data_uri": [
                    "str"
                ]
            }
        },
        "FullAnnotationDirParser.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "Path"
                ]
            }
        },
        "FullAnnotationDirParser.load_json": {
            "name": "load_json",
            "location": 306,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullAnnotationDirParser.open_outer_file": {
            "name": "open_outer_file",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "data_uri": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationParserByTask.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationParserByTask.task_id": {
            "name": "task_id",
            "location": 331,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationParserByTask.json_file_path_list": {
            "name": "json_file_path_list",
            "location": 336,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationParserByTask.get_parser": {
            "name": "get_parser",
            "location": 342,
            "return": [
                "SimpleAnnotationParser"
            ],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationParserByTask.lazy_parse": {
            "name": "lazy_parse",
            "location": 358,
            "return": [
                "Iterator[SimpleAnnotationParser]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationZipParserByTask.__get_json_file_path_list": {
            "name": "__get_json_file_path_list",
            "location": 380,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationZipParserByTask.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "zip_file": [
                    "zipfile.ZipFile"
                ],
                "task_id": [
                    "str"
                ],
                "json_path_list": [
                    "Optional[List[str]]"
                ]
            }
        },
        "SimpleAnnotationZipParserByTask.lazy_parse": {
            "name": "lazy_parse",
            "location": 412,
            "return": [
                "Iterator[SimpleAnnotationZipParser]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationZipParserByTask.json_file_path_list": {
            "name": "json_file_path_list",
            "location": 416,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationZipParserByTask.get_parser": {
            "name": "get_parser",
            "location": 419,
            "return": [
                "SimpleAnnotationParser"
            ],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "SimpleAnnotationDirParserByTask.__init__": {
            "name": "__init__",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "task_dir_path": [
                    "Path"
                ]
            }
        },
        "SimpleAnnotationDirParserByTask.lazy_parse": {
            "name": "lazy_parse",
            "location": 448,
            "return": [
                "Iterator[SimpleAnnotationDirParser]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationDirParserByTask.json_file_path_list": {
            "name": "json_file_path_list",
            "location": 454,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAnnotationDirParserByTask.get_parser": {
            "name": "get_parser",
            "location": 457,
            "return": [
                "SimpleAnnotationParser"
            ],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "lazy_parse_simple_annotation_zip_by_task.get_task_id_from_path": {
            "name": "get_task_id_from_path",
            "location": 516,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "lazy_parse_simple_annotation_zip_by_task.is_input_data_json": {
            "name": "is_input_data_json",
            "location": 522,
            "return": [
                "bool"
            ],
            "arguments": {
                "zip_info": [
                    "zipfile.ZipInfo"
                ]
            }
        },
        "lazy_parse_simple_annotation_zip_by_task.create_task_dict": {
            "name": "create_task_dict",
            "location": 533,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "arg_info_list": [
                    "List[zipfile.ZipInfo]"
                ]
            }
        },
        "__parse_annotation_zip.lazy_parser": {
            "name": "lazy_parser",
            "location": 587,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {
                "zip_file": [
                    "zipfile.ZipFile"
                ],
                "info": [
                    "zipfile.ZipInfo"
                ]
            }
        },
        "SimpleAnnotationZipParserByTask.__get_json_file_path_list._match_task_id_and_contain_input_data_json": {
            "name": "_match_task_id_and_contain_input_data_json",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "zip_info": [
                    "zipfile.ZipInfo"
                ]
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/resource.py": {
        "build": {
            "name": "build",
            "location": 40,
            "return": [
                "Resource"
            ],
            "arguments": {
                "login_user_id": [
                    "Optional[str]"
                ],
                "login_password": [
                    "Optional[str]"
                ],
                "endpoint_url": [
                    "str"
                ]
            }
        },
        "build_from_netrc": {
            "name": "build_from_netrc",
            "location": 80,
            "return": [
                "Resource"
            ],
            "arguments": {
                "endpoint_url": [
                    "str"
                ]
            }
        },
        "build_from_env": {
            "name": "build_from_env",
            "location": 110,
            "return": [
                "Resource"
            ],
            "arguments": {
                "endpoint_url": [
                    "str"
                ]
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "login_user_id": [
                    "str"
                ],
                "login_password": [
                    "str"
                ],
                "endpoint_url": [
                    "str"
                ]
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/utils.py": {
        "str_now": {
            "name": "str_now",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "to_iso8601_extension": {
            "name": "to_iso8601_extension",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "datetime.datetime"
                ],
                "tz": [
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "get_task_history_index_skipped_acceptance": {
            "name": "get_task_history_index_skipped_acceptance",
            "location": 48,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "task_history_list": [
                    "List[TaskHistory]"
                ]
            }
        },
        "get_task_history_index_skipped_inspection": {
            "name": "get_task_history_index_skipped_inspection",
            "location": 86,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "task_history_list": [
                    "List[TaskHistory]"
                ]
            }
        },
        "get_number_of_rejections": {
            "name": "get_number_of_rejections",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "task_histories": [
                    "List[TaskHistoryShort]"
                ],
                "phase": [
                    "TaskPhase"
                ],
                "phase_stage": [
                    "int"
                ]
            }
        },
        "can_put_annotation": {
            "name": "can_put_annotation",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "task": [
                    "Task"
                ],
                "my_account_id": [
                    "str"
                ]
            }
        },
        "get_message_for_i18n": {
            "name": "get_message_for_i18n",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "internationalization_message": [
                    "Dict[(str, Any)]"
                ],
                "lang": [
                    "str"
                ]
            }
        }
    },
    "annofab-api-python-client-main/annofabapi/wrapper.py": {
        "Wrapper.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "api": [
                    "AnnofabApi"
                ]
            }
        },
        "Wrapper._get_mime_type": {
            "name": "_get_mime_type",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "Wrapper._get_all_objects": {
            "name": "_get_all_objects",
            "location": 161,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "func_get_list": [
                    "Callable"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "Wrapper.execute_http_get": {
            "name": "execute_http_get",
            "location": 198,
            "return": [
                "requests.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Wrapper.download": {
            "name": "download",
            "location": 221,
            "return": [
                "requests.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.get_editor_annotation_or_none": {
            "name": "get_editor_annotation_or_none",
            "location": 254,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "Wrapper.download_annotation_archive": {
            "name": "download_annotation_archive",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.download_full_annotation_archive": {
            "name": "download_full_annotation_archive",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.get_all_annotation_list": {
            "name": "get_all_annotation_list",
            "location": 335,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Wrapper.__replace_annotation_specs_id": {
            "name": "__replace_annotation_specs_id",
            "location": 353,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "detail": [
                    "Dict[(str, Any)]"
                ],
                "annotation_specs_relation": [
                    "AnnotationSpecsRelation"
                ]
            }
        },
        "Wrapper.__to_dest_annotation_detail": {
            "name": "__to_dest_annotation_detail",
            "location": 395,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "dest_project_id": [
                    "str"
                ],
                "detail": [
                    "Dict[(str, Any)]"
                ],
                "account_id": [
                    "str"
                ]
            }
        },
        "Wrapper._create_request_body_for_copy_annotation": {
            "name": "_create_request_body_for_copy_annotation",
            "location": 437,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "src_details": [
                    "List[Dict[(str, Any)]]"
                ],
                "account_id": [
                    "Optional[str]"
                ],
                "annotation_specs_relation": [
                    "Optional[AnnotationSpecsRelation]"
                ]
            }
        },
        "Wrapper.copy_annotation": {
            "name": "copy_annotation",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "TaskFrameKey"
                ],
                "dest": [
                    "TaskFrameKey"
                ],
                "account_id": [
                    "Optional[str]"
                ],
                "annotation_specs_relation": [
                    "Optional[AnnotationSpecsRelation]"
                ]
            }
        },
        "Wrapper.__get_label_info_from_label_name": {
            "name": "__get_label_info_from_label_name",
            "location": 511,
            "return": [
                "Optional[LabelV1]"
            ],
            "arguments": {
                "self": [],
                "label_name": [
                    "str"
                ],
                "annotation_specs_labels": [
                    "List[LabelV1]"
                ]
            }
        },
        "Wrapper.__get_additional_data_from_attribute_name": {
            "name": "__get_additional_data_from_attribute_name",
            "location": 519,
            "return": [
                "Optional[AdditionalDataDefinitionV1]"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str"
                ],
                "label_info": [
                    "LabelV1"
                ]
            }
        },
        "Wrapper._get_choice_id_from_name": {
            "name": "_get_choice_id_from_name",
            "location": 528,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "choices": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "Wrapper.__get_data_holding_type_from_data": {
            "name": "__get_data_holding_type_from_data",
            "location": 536,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "FullAnnotationData"
                ]
            }
        },
        "Wrapper._create_annotation_id": {
            "name": "_create_annotation_id",
            "location": 543,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "FullAnnotationData"
                ],
                "label_id": [
                    "str"
                ]
            }
        },
        "Wrapper.__to_additional_data_list": {
            "name": "__to_additional_data_list",
            "location": 549,
            "return": [
                "List[AdditionalData]"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "Dict[(str, Any)]"
                ],
                "label_info": [
                    "LabelV1"
                ]
            }
        },
        "Wrapper.__to_annotation_detail_for_request": {
            "name": "__to_annotation_detail_for_request",
            "location": 595,
            "return": [
                "Optional[AnnotationDetail]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "parser": [
                    "SimpleAnnotationParser"
                ],
                "detail": [
                    "SimpleAnnotationDetail"
                ],
                "annotation_specs_labels": [
                    "List[LabelV1]"
                ]
            }
        },
        "Wrapper.__convert_annotation_specs_labels_v2_to_v1": {
            "name": "__convert_annotation_specs_labels_v2_to_v1",
            "location": 658,
            "return": [
                "List[LabelV1]"
            ],
            "arguments": {
                "self": [],
                "labels_v2": [
                    "List[Dict[(str, Any)]]"
                ],
                "additionals_v2": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "Wrapper.put_annotation_for_simple_annotation_json": {
            "name": "put_annotation_for_simple_annotation_json",
            "location": 693,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "simple_annotation_json": [
                    "str"
                ],
                "annotation_specs_labels": [
                    "List[Dict[(str, Any)]]"
                ],
                "annotation_specs_additionals": [
                    "Optional[List[Dict[(str, Any)]]]"
                ]
            }
        },
        "Wrapper.__get_label_name_en": {
            "name": "__get_label_name_en",
            "location": 775,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Wrapper.__get_additional_data_definition_name_en": {
            "name": "__get_additional_data_definition_name_en",
            "location": 781,
            "return": [
                "str"
            ],
            "arguments": {
                "additional_data_definition": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Wrapper.__get_choice_name_en": {
            "name": "__get_choice_name_en",
            "location": 787,
            "return": [
                "str"
            ],
            "arguments": {
                "choice": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Wrapper.__get_dest_additional": {
            "name": "__get_dest_additional",
            "location": 792,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "src_additional": [
                    "Dict[(str, Any)]"
                ],
                "dest_additionals": [
                    "List[Dict[(str, Any)]]"
                ],
                "src_labels": [
                    "List[Dict[(str, Any)]]"
                ],
                "dest_labels": [
                    "List[Dict[(str, Any)]]"
                ],
                "dict_label_id": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Wrapper.get_annotation_specs_relation": {
            "name": "get_annotation_specs_relation",
            "location": 831,
            "return": [
                "AnnotationSpecsRelation"
            ],
            "arguments": {
                "self": [],
                "src_project_id": [
                    "str"
                ],
                "dest_project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_input_data_or_none": {
            "name": "get_input_data_or_none",
            "location": 900,
            "return": [
                "Optional[InputData]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_all_input_data_list": {
            "name": "get_all_input_data_list",
            "location": 920,
            "return": [
                "List[InputData]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Wrapper.upload_file_to_s3": {
            "name": "upload_file_to_s3",
            "location": 937,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "content_type": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper.upload_data_to_s3": {
            "name": "upload_data_to_s3",
            "location": 968,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "data": [
                    "Any"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "Wrapper.put_input_data_from_file": {
            "name": "put_input_data_from_file",
            "location": 1027,
            "return": [
                "InputData"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "request_body": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "content_type": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper._get_statistics_content": {
            "name": "_get_statistics_content",
            "location": 1064,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ],
                "response": [
                    "requests.Response"
                ]
            }
        },
        "Wrapper.get_label_statistics": {
            "name": "get_label_statistics",
            "location": 1087,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper._get_statistics_daily_xxx": {
            "name": "_get_statistics_daily_xxx",
            "location": 1103,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[([Dict[(str, Any)]], List[Dict[(str, Any)]])]"
                ],
                "dt_from_date": [
                    "datetime.date"
                ],
                "dt_to_date": [
                    "datetime.date"
                ]
            }
        },
        "Wrapper._get_from_and_to_date_for_statistics_webapi": {
            "name": "_get_from_and_to_date_for_statistics_webapi",
            "location": 1136,
            "return": [
                "Tuple[(datetime.date, datetime.date)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "from_date": [
                    "Optional[str]"
                ],
                "to_date": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper.get_account_daily_statistics": {
            "name": "get_account_daily_statistics",
            "location": 1168,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_inspection_daily_statistics": {
            "name": "get_inspection_daily_statistics",
            "location": 1202,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_phase_daily_statistics": {
            "name": "get_phase_daily_statistics",
            "location": 1232,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_task_daily_statistics": {
            "name": "get_task_daily_statistics",
            "location": 1261,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_worktime_daily_statistics": {
            "name": "get_worktime_daily_statistics",
            "location": 1290,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_worktime_daily_statistics_by_account": {
            "name": "get_worktime_daily_statistics_by_account",
            "location": 1319,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "account_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_supplementary_data_list_or_none": {
            "name": "get_supplementary_data_list_or_none",
            "location": 1353,
            "return": [
                "Optional[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "Wrapper.put_supplementary_data_from_file": {
            "name": "put_supplementary_data_from_file",
            "location": 1374,
            "return": [
                "SupplementaryData"
            ],
            "arguments": {
                "self": [],
                "project_id": [],
                "input_data_id": [
                    "str"
                ],
                "supplementary_data_id": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "request_body": [
                    "Dict[(str, Any)]"
                ],
                "content_type": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper.update_status_of_inspections": {
            "name": "update_status_of_inspections",
            "location": 1429,
            "return": [
                "List[Inspection]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "filter_inspection": [
                    "Callable[([Inspection], bool)]"
                ],
                "inspection_status": [
                    "InspectionStatus"
                ],
                "updated_datetime": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper.get_all_my_organizations": {
            "name": "get_all_my_organizations",
            "location": 1485,
            "return": [
                "List[MyOrganization]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wrapper.get_organization_or_none": {
            "name": "get_organization_or_none",
            "location": 1499,
            "return": [
                "Optional[Organization]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "Wrapper.get_all_projects_of_organization": {
            "name": "get_all_projects_of_organization",
            "location": 1518,
            "return": [
                "List[Project]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Wrapper.get_organization_member_or_none": {
            "name": "get_organization_member_or_none",
            "location": 1541,
            "return": [
                "Optional[OrganizationMember]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_all_organization_members": {
            "name": "get_all_organization_members",
            "location": 1560,
            "return": [
                "List[OrganizationMember]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ]
            }
        },
        "Wrapper.get_project_or_none": {
            "name": "get_project_or_none",
            "location": 1578,
            "return": [
                "Optional[Project]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.download_project_inputs_url": {
            "name": "download_project_inputs_url",
            "location": 1596,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.download_project_tasks_url": {
            "name": "download_project_tasks_url",
            "location": 1620,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.download_project_inspections_url": {
            "name": "download_project_inspections_url",
            "location": 1645,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.download_project_comments_url": {
            "name": "download_project_comments_url",
            "location": 1677,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.download_project_task_history_events_url": {
            "name": "download_project_task_history_events_url",
            "location": 1701,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.download_project_task_histories_url": {
            "name": "download_project_task_histories_url",
            "location": 1726,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "dest_path": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Wrapper.get_project_member_or_none": {
            "name": "get_project_member_or_none",
            "location": 1754,
            "return": [
                "Optional[ProjectMember]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_all_project_members": {
            "name": "get_all_project_members",
            "location": 1773,
            "return": [
                "List[ProjectMember]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Wrapper.initiate_tasks_generation_by_csv": {
            "name": "initiate_tasks_generation_by_csv",
            "location": 1793,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "csvfile_path": [
                    "str"
                ]
            }
        },
        "Wrapper.get_task_or_none": {
            "name": "get_task_or_none",
            "location": 1814,
            "return": [
                "Optional[Task]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_task_histories_or_none": {
            "name": "get_task_histories_or_none",
            "location": 1834,
            "return": [
                "Optional[List[Task]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_all_tasks": {
            "name": "get_all_tasks",
            "location": 1853,
            "return": [
                "List[Task]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Wrapper.change_task_status_to_working": {
            "name": "change_task_status_to_working",
            "location": 1866,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.change_task_status_to_break": {
            "name": "change_task_status_to_break",
            "location": 1895,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.change_task_status_to_on_hold": {
            "name": "change_task_status_to_on_hold",
            "location": 1925,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.complete_task": {
            "name": "complete_task",
            "location": 1955,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.cancel_submitted_task": {
            "name": "cancel_submitted_task",
            "location": 1986,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.cancel_completed_task": {
            "name": "cancel_completed_task",
            "location": 2021,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "operator_account_id": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper.change_task_operator": {
            "name": "change_task_operator",
            "location": 2053,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "operator_account_id": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper.reject_task": {
            "name": "reject_task",
            "location": 2089,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_latest_instruction": {
            "name": "get_latest_instruction",
            "location": 2129,
            "return": [
                "Optional[Instruction]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.upload_instruction_image": {
            "name": "upload_instruction_image",
            "location": 2146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "image_id": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "content_type": [
                    "Optional[str]"
                ]
            }
        },
        "Wrapper.upload_data_as_instruction_image": {
            "name": "upload_data_as_instruction_image",
            "location": 2166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "image_id": [
                    "str"
                ],
                "data": [
                    "Any"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "Wrapper.delete_all_succeeded_job": {
            "name": "delete_all_succeeded_job",
            "location": 2197,
            "return": [
                "List[ProjectJobInfo]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_type": [
                    "ProjectJobType"
                ]
            }
        },
        "Wrapper.get_all_project_job": {
            "name": "get_all_project_job",
            "location": 2217,
            "return": [
                "List[ProjectJobInfo]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "query_params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Wrapper.job_in_progress": {
            "name": "job_in_progress",
            "location": 2238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_type": [
                    "ProjectJobType"
                ]
            }
        },
        "Wrapper.wait_for_completion": {
            "name": "wait_for_completion",
            "location": 2257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_type": [
                    "ProjectJobType"
                ],
                "job_access_interval": [
                    "int"
                ],
                "max_job_access": [
                    "int"
                ]
            }
        },
        "Wrapper.wait_until_job_finished": {
            "name": "wait_until_job_finished",
            "location": 2287,
            "return": [
                "Optional[JobStatus]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_type": [
                    "ProjectJobType"
                ],
                "job_id": [
                    "Optional[str]"
                ],
                "job_access_interval": [
                    "int"
                ],
                "max_job_access": [
                    "int"
                ]
            }
        },
        "Wrapper.can_execute_job": {
            "name": "can_execute_job",
            "location": 2397,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_type": [
                    "ProjectJobType"
                ]
            }
        },
        "Wrapper.wait_until_job_is_executable": {
            "name": "wait_until_job_is_executable",
            "location": 2421,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_type": [
                    "ProjectJobType"
                ],
                "job_access_interval": [
                    "int"
                ],
                "max_job_access": [
                    "int"
                ]
            }
        },
        "Wrapper.__convert_annotation_specs_labels_v2_to_v1.get_additional": {
            "name": "get_additional",
            "location": 671,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "additional_data_definition_id": [
                    "str"
                ]
            }
        },
        "Wrapper.__convert_annotation_specs_labels_v2_to_v1.to_label_v1": {
            "name": "to_label_v1",
            "location": 676,
            "return": [
                "LabelV1"
            ],
            "arguments": {
                "label_v2": []
            }
        },
        "Wrapper.upload_data_to_s3.get_md5_value_from_file": {
            "name": "get_md5_value_from_file",
            "location": 984,
            "return": [],
            "arguments": {
                "fp": []
            }
        },
        "Wrapper.get_account_daily_statistics.decorator": {
            "name": "decorator",
            "location": 1182,
            "return": [],
            "arguments": {
                "f": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_inspection_daily_statistics.decorator": {
            "name": "decorator",
            "location": 1218,
            "return": [],
            "arguments": {
                "f": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_phase_daily_statistics.decorator": {
            "name": "decorator",
            "location": 1247,
            "return": [],
            "arguments": {
                "f": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_task_daily_statistics.decorator": {
            "name": "decorator",
            "location": 1276,
            "return": [],
            "arguments": {
                "f": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_worktime_daily_statistics.decorator": {
            "name": "decorator",
            "location": 1304,
            "return": [],
            "arguments": {
                "f": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_worktime_daily_statistics_by_account.decorator": {
            "name": "decorator",
            "location": 1334,
            "return": [],
            "arguments": {
                "f": [],
                "project_id": [
                    "str"
                ],
                "account_id": [
                    "str"
                ]
            }
        },
        "Wrapper.update_status_of_inspections.not_reply_comment": {
            "name": "not_reply_comment",
            "location": 1460,
            "return": [
                "bool"
            ],
            "arguments": {
                "arg_inspection": [
                    "Inspection"
                ]
            }
        },
        "Wrapper.update_status_of_inspections.search_updated_inspections": {
            "name": "search_updated_inspections",
            "location": 1464,
            "return": [
                "bool"
            ],
            "arguments": {
                "arg_inspection": [
                    "Inspection"
                ]
            }
        },
        "Wrapper.wait_until_job_finished.get_latest_job": {
            "name": "get_latest_job",
            "location": 2311,
            "return": [
                "Optional[ProjectJobInfo]"
            ],
            "arguments": {}
        },
        "Wrapper.wait_until_job_finished.get_job_from_job_id": {
            "name": "get_job_from_job_id",
            "location": 2318,
            "return": [
                "Optional[ProjectJobInfo]"
            ],
            "arguments": {
                "arg_job_id": [
                    "str"
                ]
            }
        },
        "Wrapper.get_account_daily_statistics.decorator.wrapper": {
            "name": "wrapper",
            "location": 1184,
            "return": [],
            "arguments": {}
        },
        "Wrapper.get_inspection_daily_statistics.decorator.wrapper": {
            "name": "wrapper",
            "location": 1220,
            "return": [],
            "arguments": {}
        },
        "Wrapper.get_phase_daily_statistics.decorator.wrapper": {
            "name": "wrapper",
            "location": 1249,
            "return": [],
            "arguments": {}
        },
        "Wrapper.get_task_daily_statistics.decorator.wrapper": {
            "name": "wrapper",
            "location": 1278,
            "return": [],
            "arguments": {}
        },
        "Wrapper.get_worktime_daily_statistics.decorator.wrapper": {
            "name": "wrapper",
            "location": 1306,
            "return": [],
            "arguments": {}
        },
        "Wrapper.get_worktime_daily_statistics_by_account.decorator.wrapper": {
            "name": "wrapper",
            "location": 1336,
            "return": [],
            "arguments": {}
        }
    },
    "annofab-api-python-client-main/annofabapi/_utils.py": {
        "_issue_deprecated_warning_with_class": {
            "name": "_issue_deprecated_warning_with_class",
            "location": 7,
            "return": [],
            "arguments": {
                "cls": [],
                "stacklevel": [
                    "int"
                ],
                "deprecated_date": [
                    "str"
                ],
                "new_class_name": [
                    "Optional[str]"
                ]
            }
        },
        "_process_class": {
            "name": "_process_class",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "deprecated_date": [
                    "str"
                ],
                "new_class_name": [
                    "Optional[str]"
                ]
            }
        },
        "_process_enum_class": {
            "name": "_process_enum_class",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "deprecated_date": [
                    "str"
                ],
                "new_class_name": [
                    "Optional[str]"
                ]
            }
        },
        "deprecated_class": {
            "name": "deprecated_class",
            "location": 44,
            "return": [],
            "arguments": {
                "_cls": []
            }
        },
        "_process_class.decorator": {
            "name": "decorator",
            "location": 19,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "_process_enum_class.getattribute": {
            "name": "getattribute",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "deprecated_class.wrap": {
            "name": "wrap",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_process_class.decorator.wrapped": {
            "name": "wrapped",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "annofab-api-python-client-main/annofabapi/__init__.py": {},
    "annofab-api-python-client-main/annofabapi/__version__.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/annotation.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/annotation_specs.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/input.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/inspection.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/instruction.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/job.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/my.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/organization.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/organization_member.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/project.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/project_member.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/statistics.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/supplementary.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/task.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/webhook.py": {},
    "annofab-api-python-client-main/annofabapi/dataclass/__init__.py": {},
    "annofab-api-python-client-main/docs/conf.py": {},
    "annofab-api-python-client-main/generate/partial-footer/models_partial_footer.py": {},
    "annofab-api-python-client-main/generate/partial-header/generated_api_partial_header_v1.py": {
        "AbstractAnnofabApi._request_wrapper": {
            "name": "_request_wrapper",
            "location": 24,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str"
                ],
                "url_path": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "header_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "annofab-api-python-client-main/generate/partial-header/generated_api_partial_header_v2.py": {
        "AbstractAnnofabApi2._request_wrapper": {
            "name": "_request_wrapper",
            "location": 24,
            "return": [
                "Tuple[(Any, requests.Response)]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str"
                ],
                "url_path": [
                    "str"
                ],
                "query_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "header_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "request_body": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "annofab-api-python-client-main/generate/partial-header/models_partial_header_v1.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/annotation.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/annotation_specs.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/common.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/input.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/instruction.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/job.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/my.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/organization.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/organization_member.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/project.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/project_member.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/statistics.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/supplementary.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/task.py": {},
    "annofab-api-python-client-main/generate/partial-header/dataclass/webhook.py": {},
    "annofab-api-python-client-main/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 6,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 12,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 17,
            "return": [],
            "arguments": {
                "config": [],
                "items": []
            }
        },
        "pytest_cmdline_main": {
            "name": "pytest_cmdline_main",
            "location": 30,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "annofab-api-python-client-main/tests/create_test_project.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "set_logging": {
            "name": "set_logging",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CreatingTestProject.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "service": [
                    "annofabapi.Resource"
                ]
            }
        },
        "CreatingTestProject.create_project": {
            "name": "create_project",
            "location": 24,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "project_title": [
                    "Optional[str]"
                ]
            }
        },
        "CreatingTestProject.create_webhook": {
            "name": "create_webhook",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "webhook_id": [
                    "str"
                ]
            }
        },
        "CreatingTestProject._create_bbox_label": {
            "name": "_create_bbox_label",
            "location": 52,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatingTestProject.create_annotation_specs": {
            "name": "create_annotation_specs",
            "location": 75,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "CreatingTestProject.create_input_data": {
            "name": "create_input_data",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "image_path": [
                    "str"
                ]
            }
        },
        "CreatingTestProject.create_supplementary_data": {
            "name": "create_supplementary_data",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ],
                "supplementary_data_id": [
                    "str"
                ],
                "supplementary_data_path": [
                    "str"
                ]
            }
        },
        "CreatingTestProject.create_task": {
            "name": "create_task",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id_list": [
                    "List[str]"
                ]
            }
        },
        "CreatingTestProject.upload_instruction": {
            "name": "upload_instruction",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "CreatingTestProject.create_annotations": {
            "name": "create_annotations",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "CreatingTestProject.add_inspection_comment": {
            "name": "add_inspection_comment",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task": [
                    "Dict[(str, Any)]"
                ],
                "input_data_id": [
                    "str"
                ],
                "inspection_comment": [
                    "str"
                ]
            }
        },
        "CreatingTestProject.create_inspection_comment": {
            "name": "create_inspection_comment",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "CreatingTestProject.main": {
            "name": "main",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str"
                ],
                "project_title": [
                    "Optional[str]"
                ]
            }
        }
    },
    "annofab-api-python-client-main/tests/tests_local_api.py": {
        "TestMyBackoff.requestexception_connectionerror_then_true": {
            "name": "requestexception_connectionerror_then_true",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "log": []
            }
        },
        "TestMyBackoff.test_assert_retry": {
            "name": "test_assert_retry",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMyBackoff.chunkedencodingerror_requestsconnectionerror_then_true": {
            "name": "chunkedencodingerror_requestsconnectionerror_then_true",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "log": []
            }
        },
        "TestMyBackoff.test_assert_retry2": {
            "name": "test_assert_retry2",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMyBackoff.httperror_then_true": {
            "name": "httperror_then_true",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "log": []
            }
        },
        "TestMyBackoff.test_assert_retry_with_httperror": {
            "name": "test_assert_retry_with_httperror",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMyBackoff.httperror_with_400": {
            "name": "httperror_with_400",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "log": []
            }
        },
        "TestMyBackoff.test_assert_not_retry": {
            "name": "test_assert_not_retry",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test__create_request_body_for_logger.test_data_dict": {
            "name": "test_data_dict",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test__create_request_body_for_logger.test_data_dict2": {
            "name": "test_data_dict2",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test__create_request_body_for_logger.test_data_list": {
            "name": "test_data_list",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/test_api.py": {
        "TestAnnotation.setup_class": {
            "name": "setup_class",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestAnnotation.test_wrapper_get_all_annotation_list": {
            "name": "test_wrapper_get_all_annotation_list",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_get_annotation": {
            "name": "test_get_annotation",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_get_editor_annotation": {
            "name": "test_get_editor_annotation",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_get_annotation_archive": {
            "name": "test_get_annotation_archive",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_get_archive_full_with_pro_id": {
            "name": "test_get_archive_full_with_pro_id",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_wrapper_download_annotation_archive": {
            "name": "test_wrapper_download_annotation_archive",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_post_annotation_archive_update": {
            "name": "test_post_annotation_archive_update",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_wrapper_copy_annotation": {
            "name": "test_wrapper_copy_annotation",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_wrapper_put_annotation_for_simple_annotation_json": {
            "name": "test_wrapper_put_annotation_for_simple_annotation_json",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationSpecs.test_get_annotation_specs": {
            "name": "test_get_annotation_specs",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationSpecs.test_put_annotation_specs": {
            "name": "test_put_annotation_specs",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationSpecs.test_get_annotation_specs_histories": {
            "name": "test_get_annotation_specs_histories",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationSpecs.test_get_annotation_specs_relation": {
            "name": "test_get_annotation_specs_relation",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComment.setup_class": {
            "name": "setup_class",
            "location": 125,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestComment.test_put_get_delete_comment": {
            "name": "test_put_get_delete_comment",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComment.teardown_class": {
            "name": "teardown_class",
            "location": 176,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestInputData.setup_class": {
            "name": "setup_class",
            "location": 182,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestInputData.test_wrapper_get_input_data_list": {
            "name": "test_wrapper_get_input_data_list",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInputData.test_get_input_data": {
            "name": "test_get_input_data",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInputData.test_wrapper_put_input_data_from_file_and_delete_input_data": {
            "name": "test_wrapper_put_input_data_from_file_and_delete_input_data",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInputData.test_put_input_data_from_file_and_batch_update_inputs": {
            "name": "test_put_input_data_from_file_and_batch_update_inputs",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_wrapper_get_latest_instruction": {
            "name": "test_wrapper_get_latest_instruction",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_get_instruction_history": {
            "name": "test_get_instruction_history",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_wrapper_upload_instruction_image_and_delete_instruction_image": {
            "name": "test_wrapper_upload_instruction_image_and_delete_instruction_image",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_get_instruction_images": {
            "name": "test_get_instruction_images",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_put_instruction": {
            "name": "test_put_instruction",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_wait_for_completion": {
            "name": "test_wait_for_completion",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_wait_until_job_finished": {
            "name": "test_wait_until_job_finished",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_get_all_project_job": {
            "name": "test_get_all_project_job",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_delete_all_succeeded_job": {
            "name": "test_delete_all_succeeded_job",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_job_in_progress": {
            "name": "test_job_in_progress",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_can_execute_job": {
            "name": "test_can_execute_job",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_wait_until_job_is_executable": {
            "name": "test_wait_until_job_is_executable",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_delete_project_job": {
            "name": "test_delete_project_job",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLogin.test_login": {
            "name": "test_login",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_get_my_account": {
            "name": "test_get_my_account",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_get_my_project_members": {
            "name": "test_get_my_project_members",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_wrapper_get_all_my_organizations": {
            "name": "test_wrapper_get_all_my_organizations",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_get_my_projects": {
            "name": "test_get_my_projects",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_get_my_member_in_project": {
            "name": "test_get_my_member_in_project",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganization.setup_class": {
            "name": "setup_class",
            "location": 324,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestOrganization.test_get_organization": {
            "name": "test_get_organization",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganization.test_get_organization_activity": {
            "name": "test_get_organization_activity",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganization.test_wrapper_get_all_projects_of_organization": {
            "name": "test_wrapper_get_all_projects_of_organization",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizationMember.setup_class": {
            "name": "setup_class",
            "location": 339,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestOrganizationMember.test_wrapper_get_all_organization_members": {
            "name": "test_wrapper_get_all_organization_members",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizationMember.test_get_organization_member": {
            "name": "test_get_organization_member",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizationMember.test_update_organization_member_role": {
            "name": "test_update_organization_member_role",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_get_project": {
            "name": "test_get_project",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_get_organization_of_project": {
            "name": "test_get_organization_of_project",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_post_project_tasks_update": {
            "name": "test_post_project_tasks_update",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_wrapper_download_project_inputs_url": {
            "name": "test_wrapper_download_project_inputs_url",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_wrapper_download_project_tasks_url": {
            "name": "test_wrapper_download_project_tasks_url",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_wrapper_download_project_task_history_events_url": {
            "name": "test_wrapper_download_project_task_history_events_url",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_wrapper_download_project_task_histories_url": {
            "name": "test_wrapper_download_project_task_histories_url",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_wrapper_download_project_comments_url": {
            "name": "test_wrapper_download_project_comments_url",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProjectMember.test_get_project_member": {
            "name": "test_get_project_member",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProjectMember.test_wrapper_get_all_project_members": {
            "name": "test_wrapper_get_all_project_members",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_wrapper_get_account_daily_statistics": {
            "name": "test_wrapper_get_account_daily_statistics",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_wrapper_get_inspection_daily_statistics": {
            "name": "test_wrapper_get_inspection_daily_statistics",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_wrapper_get_phase_daily_statistics": {
            "name": "test_wrapper_get_phase_daily_statistics",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_wrapper_get_task_daily_statistics": {
            "name": "test_wrapper_get_task_daily_statistics",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_wrapper_get_worktime_daily_statistics": {
            "name": "test_wrapper_get_worktime_daily_statistics",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_wrapper_get_worktime_daily_statistics_by_account": {
            "name": "test_wrapper_get_worktime_daily_statistics_by_account",
            "location": 456,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_wrapper_get_label_statistics": {
            "name": "test_wrapper_get_label_statistics",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_graph_marker": {
            "name": "test_graph_marker",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_get_statistics_available_dates": {
            "name": "test_get_statistics_available_dates",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Testsupplementary.setup_class": {
            "name": "setup_class",
            "location": 508,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Testsupplementary.test_supplementary": {
            "name": "test_supplementary",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.setup_class": {
            "name": "setup_class",
            "location": 536,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestTask.test_wraper_get_all_tasks": {
            "name": "test_wraper_get_all_tasks",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_initiate_tasks_generation_by_csv": {
            "name": "test_initiate_tasks_generation_by_csv",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_get_task": {
            "name": "test_get_task",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_put_task_and_delete_task": {
            "name": "test_put_task_and_delete_task",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_assign_task": {
            "name": "test_assign_task",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_operate_task_in_change_task_status_to_break": {
            "name": "test_operate_task_in_change_task_status_to_break",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_get_task_histories": {
            "name": "test_get_task_histories",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_batch_update_tasks": {
            "name": "test_batch_update_tasks",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_patch_tasks_metadata": {
            "name": "test_patch_tasks_metadata",
            "location": 586,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWebhook.test_scenario": {
            "name": "test_scenario",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetObjOrNone.setup_class": {
            "name": "setup_class",
            "location": 635,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestGetObjOrNone.test_get_input_data_or_none": {
            "name": "test_get_input_data_or_none",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetObjOrNone.test_get_organization_or_none": {
            "name": "test_get_organization_or_none",
            "location": 646,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetObjOrNone.test_get_organization_member_or_none": {
            "name": "test_get_organization_member_or_none",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetObjOrNone.test_get_project_or_none": {
            "name": "test_get_project_or_none",
            "location": 658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetObjOrNone.test_get_project_member_or_none": {
            "name": "test_get_project_member_or_none",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetObjOrNone.test_get_task_or_none": {
            "name": "test_get_task_or_none",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetObjOrNone.test_get_task_histories_or_none": {
            "name": "test_get_task_histories_or_none",
            "location": 684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProtectedMethod.setup_class": {
            "name": "setup_class",
            "location": 695,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestProtectedMethod.test__request_get_with_cookie_with_project_url": {
            "name": "test__request_get_with_cookie_with_project_url",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProtectedMethod.test__request_get_with_cookie_with_input_data_set_url": {
            "name": "test__request_get_with_cookie_with_input_data_set_url",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProtectedMethod.test_request_get_with_cookie_failed": {
            "name": "test_request_get_with_cookie_failed",
            "location": 709,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperty.test_account_id": {
            "name": "test_account_id",
            "location": 717,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/test_api2.py": {
        "test_project": {
            "name": "test_project",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "annofab-api-python-client-main/tests/test_dataclass_webapi.py": {
        "TestAnnotation.setup_class": {
            "name": "setup_class",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestAnnotation.test_get_editor_annotation": {
            "name": "test_get_editor_annotation",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_simple_annotation": {
            "name": "test_simple_annotation",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_full_annotation": {
            "name": "test_full_annotation",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationSpecsV1.test_annotation_specs": {
            "name": "test_annotation_specs",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInput.test_input_data": {
            "name": "test_input_data",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInspection.setup_class": {
            "name": "setup_class",
            "location": 80,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestInspection.test_inspection": {
            "name": "test_inspection",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_instruction": {
            "name": "test_instruction",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_instruction_history": {
            "name": "test_instruction_history",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_instruction_image": {
            "name": "test_instruction_image",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_job": {
            "name": "test_job",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_my_organization": {
            "name": "test_my_organization",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_my_account": {
            "name": "test_my_account",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganization.setup_class": {
            "name": "setup_class",
            "location": 130,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestOrganization.test_organization": {
            "name": "test_organization",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganization.test_organization_activity": {
            "name": "test_organization_activity",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizationMember.setup_class": {
            "name": "setup_class",
            "location": 146,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestOrganizationMember.test_organization_member": {
            "name": "test_organization_member",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_project": {
            "name": "test_project",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProjectMember.test_project_member": {
            "name": "test_project_member",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_statistics_get_label_statistics": {
            "name": "test_statistics_get_label_statistics",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_markers": {
            "name": "test_markers",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSupplementary.setup_class": {
            "name": "setup_class",
            "location": 185,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestSupplementary.test_supplementary": {
            "name": "test_supplementary",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_task": {
            "name": "test_task",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_task_history": {
            "name": "test_task_history",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWebhook.test_webhook": {
            "name": "test_webhook",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/test_local_models.py": {},
    "annofab-api-python-client-main/tests/test_local_parser.py": {
        "TestSimpleAnnotationParser.test_SimpleAnnotationZipParser": {
            "name": "test_SimpleAnnotationZipParser",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotationParser.convert_deitail_data": {
            "name": "convert_deitail_data",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "dict_data": []
            }
        },
        "TestSimpleAnnotationParser.test_parse_for_zip": {
            "name": "test_parse_for_zip",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotationParser.test_SimpleAnnotationDirParser": {
            "name": "test_SimpleAnnotationDirParser",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotationParserByTask.test_SimpleAnnotationDirParserByTask": {
            "name": "test_SimpleAnnotationDirParserByTask",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotationParserByTask.test_SimpleAnnotationZipParserByTask": {
            "name": "test_SimpleAnnotationZipParserByTask",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotation.test_simple_annotation_zip": {
            "name": "test_simple_annotation_zip",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotation.test_simple_annotation_dir": {
            "name": "test_simple_annotation_dir",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotation.test_lazy_parse_simple_annotation_zip_by_task": {
            "name": "test_lazy_parse_simple_annotation_zip_by_task",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAnnotation.test_lazy_parse_simple_annotation_dir_by_task": {
            "name": "test_lazy_parse_simple_annotation_dir_by_task",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullAnnotation.test_full_annotation_zip": {
            "name": "test_full_annotation_zip",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullAnnotation.test_full_annotation_dir": {
            "name": "test_full_annotation_dir",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullAnnotation.convert_deitail_data": {
            "name": "convert_deitail_data",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "dict_data": []
            }
        },
        "TestFullAnnotation.test_parse_for_zip": {
            "name": "test_parse_for_zip",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/test_local_resource.py": {
        "TestBuild.test_raise_ValueError": {
            "name": "test_raise_ValueError",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuild.test_build_from_env_raise_AnnofabApiException": {
            "name": "test_build_from_env_raise_AnnofabApiException",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuild.test_build_from_env": {
            "name": "test_build_from_env",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuild.test_build": {
            "name": "test_build",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuild.test_build_with_endpoint": {
            "name": "test_build_with_endpoint",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/test_local_utils.py": {
        "test_get_message_for_i18n": {
            "name": "test_get_message_for_i18n",
            "location": 620,
            "return": [],
            "arguments": {}
        },
        "TestTaskHistoryUtils.test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7\u5f8c\u306b\u53d7\u5165\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7\u5f8c\u306b\u53d7\u5165\u53d6\u6d88",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_task_history_index_skipped_acceptance_\u691c\u67fb1\u56de_\u691c\u67fb\u3067\u63d0\u51fa\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb1\u56de_\u691c\u67fb\u3067\u63d0\u51fa\u53d6\u6d88",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u691c\u67fb\u30b9\u30ad\u30c3\u30d7": {
            "name": "test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u691c\u67fb\u30b9\u30ad\u30c3\u30d7",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_task_history_index_skipped_inspection_\u691c\u67fb2\u56de_\u691c\u67fb1\u56de\u76ee\u3067\u63d0\u51fa\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_inspection_\u691c\u67fb2\u56de_\u691c\u67fb1\u56de\u76ee\u3067\u63d0\u51fa\u53d6\u6d88",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_number_of_rejections_\u6559\u5e2b\u4ed81\u56de\u76ee": {
            "name": "test_get_number_of_rejections_\u6559\u5e2b\u4ed81\u56de\u76ee",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_number_of_rejections_\u53d7\u5165\u30671\u56de\u5dee\u623b": {
            "name": "test_get_number_of_rejections_\u53d7\u5165\u30671\u56de\u5dee\u623b",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_number_of_rejections_\u691c\u67fb\u30671\u56de\u5dee\u623b": {
            "name": "test_get_number_of_rejections_\u691c\u67fb\u30671\u56de\u5dee\u623b",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils.test_get_number_of_rejections_\u691c\u67fb\u3068\u53d7\u5165\u30671\u56de\u5dee\u623b": {
            "name": "test_get_number_of_rejections_\u691c\u67fb\u3068\u53d7\u5165\u30671\u56de\u5dee\u623b",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils2.test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils2.test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7\u5f8c\u306b\u53d7\u5165\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u53d7\u5165\u30b9\u30ad\u30c3\u30d7\u5f8c\u306b\u53d7\u5165\u53d6\u6d88",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils2.test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb0\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils2.test_get_task_history_index_skipped_acceptance_\u691c\u67fb1\u56de_\u691c\u67fb\u3067\u63d0\u51fa\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_acceptance_\u691c\u67fb1\u56de_\u691c\u67fb\u3067\u63d0\u51fa\u53d6\u6d88",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils2.test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u691c\u67fb\u30b9\u30ad\u30c3\u30d7": {
            "name": "test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u691c\u67fb\u30b9\u30ad\u30c3\u30d7",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTaskHistoryUtils2.test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88": {
            "name": "test_get_task_history_index_skipped_inspection_\u691c\u67fb1\u56de_\u6559\u5e2b\u4ed8\u3067\u63d0\u51fa\u53d6\u6d88",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/test_local_wrapper.py": {
        "TestWrapperUtils.test__get_mime_type": {
            "name": "test__get_mime_type",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/test_sandbox.py": {
        "TestAnnotation.test_wrapper_put_annotation_for_simple_annotation_json_v1": {
            "name": "test_wrapper_put_annotation_for_simple_annotation_json_v1",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_wrapper_put_annotation_for_simple_annotation_json_v2": {
            "name": "test_wrapper_put_annotation_for_simple_annotation_json_v2",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/utils_for_test.py": {
        "create_csv_for_task": {
            "name": "create_csv_for_task",
            "location": 7,
            "return": [],
            "arguments": {
                "file_path": [],
                "task_id": [
                    "str"
                ],
                "input_data_id": [
                    "str"
                ]
            }
        },
        "WrapperForTest.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "api": [
                    "AnnofabApi"
                ]
            }
        },
        "WrapperForTest.get_first_task_id": {
            "name": "get_first_task_id",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": []
            }
        },
        "WrapperForTest.get_first_input_data_id_in_task": {
            "name": "get_first_input_data_id_in_task",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [],
                "task_id": []
            }
        },
        "WrapperForTest.get_first_input_data": {
            "name": "get_first_input_data",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": []
            }
        },
        "WrapperForTest.get_first_annotation": {
            "name": "get_first_annotation",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": []
            }
        }
    },
    "annofab-api-python-client-main/tests/_test_dataclass_file.py": {
        "TestAnnotation.test_annotation": {
            "name": "test_annotation",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_simple_annotation_for_image": {
            "name": "test_simple_annotation_for_image",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_simple_annotation_for_movie": {
            "name": "test_simple_annotation_for_movie",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotation.test_full_annotation": {
            "name": "test_full_annotation",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationSpecsV1.test_annotation_specs": {
            "name": "test_annotation_specs",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInput.test_input_data": {
            "name": "test_input_data",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInspection.test_inspection": {
            "name": "test_inspection",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_instruction": {
            "name": "test_instruction",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_instruction_history": {
            "name": "test_instruction_history",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInstruction.test_instruction_image": {
            "name": "test_instruction_image",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJob.test_job": {
            "name": "test_job",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_my_organization": {
            "name": "test_my_organization",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMy.test_my_account": {
            "name": "test_my_account",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganization.test_organization": {
            "name": "test_organization",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganization.test_organization_activity": {
            "name": "test_organization_activity",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizationMember.test_organization_member": {
            "name": "test_organization_member",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_project": {
            "name": "test_project",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProjectMember.test_project_member": {
            "name": "test_project_member",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_statistics_get_task_statistics": {
            "name": "test_statistics_get_task_statistics",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_statistics_get_account_statistics": {
            "name": "test_statistics_get_account_statistics",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_statistics_get_inspection_statistics": {
            "name": "test_statistics_get_inspection_statistics",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_statistics_get_task_phase_statistics": {
            "name": "test_statistics_get_task_phase_statistics",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_statistics_get_label_statistics": {
            "name": "test_statistics_get_label_statistics",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_statistics_get_worktime_statistics": {
            "name": "test_statistics_get_worktime_statistics",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistics.test_markers": {
            "name": "test_markers",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSupplementary.test_supplementary": {
            "name": "test_supplementary",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_task": {
            "name": "test_task",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_task_history": {
            "name": "test_task_history",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWebhook.test_webhook": {
            "name": "test_webhook",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "annofab-api-python-client-main/tests/__init__.py": {}
}
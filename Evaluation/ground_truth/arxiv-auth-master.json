{
    "arxiv-auth-master/mock_vault.py": {
        "log_in": {
            "name": "log_in",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "get_kv_secret": {
            "name": "get_kv_secret",
            "location": 26,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_aws_secret": {
            "name": "get_aws_secret",
            "location": 53,
            "return": [],
            "arguments": {
                "role": []
            }
        },
        "get_database_creds": {
            "name": "get_database_creds",
            "location": 75,
            "return": [],
            "arguments": {
                "role": []
            }
        },
        "look_up_a_token": {
            "name": "look_up_a_token",
            "location": 95,
            "return": [],
            "arguments": {}
        }
    },
    "arxiv-auth-master/accounts/app.py": {},
    "arxiv-auth-master/accounts/create_user.py": {
        "_random_category": {
            "name": "_random_category",
            "location": 30,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        },
        "_prob": {
            "name": "_prob",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "P": [
                    "int"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 51,
            "return": [],
            "arguments": {
                "username": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "suffix_name": [
                    "str"
                ],
                "affiliation": [
                    "str"
                ],
                "home_page": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/accounts/wsgi.py": {
        "application": {
            "name": "application",
            "location": 8,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/config.py": {},
    "arxiv-auth-master/accounts/accounts/factory.py": {
        "create_web_app": {
            "name": "create_web_app",
            "location": 18,
            "return": [
                "Flask"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/accounts/accounts/__init__.py": {},
    "arxiv-auth-master/accounts/accounts/controllers/authentication.py": {
        "login": {
            "name": "login",
            "location": 44,
            "return": [
                "ResponseData"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "form_data": [
                    "MultiDict"
                ],
                "ip": [
                    "str"
                ],
                "next_page": [
                    "str"
                ],
                "track": [
                    "str"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 134,
            "return": [
                "ResponseData"
            ],
            "arguments": {
                "session_cookie": [
                    "Optional[str]"
                ],
                "classic_session_cookie": [
                    "Optional[str]"
                ],
                "next_page": [
                    "str"
                ]
            }
        },
        "_do_authn": {
            "name": "_do_authn",
            "location": 194,
            "return": [
                "Tuple[(User, Authorizations)]"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "_do_login": {
            "name": "_do_login",
            "location": 201,
            "return": [
                "Tuple[(Session, str)]"
            ],
            "arguments": {
                "auths": [
                    "Authorizations"
                ],
                "ip": [
                    "str"
                ],
                "tracking_cookie": [
                    "str"
                ],
                "user": [
                    "User"
                ]
            }
        },
        "_do_logout": {
            "name": "_do_logout",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "classic_session_cookie": [
                    "str"
                ]
            }
        },
        "good_next_page": {
            "name": "good_next_page",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "next_page": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/controllers/captcha_image.py": {
        "get": {
            "name": "get",
            "location": 13,
            "return": [
                "ResponseData"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "secret": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ],
                "font": [
                    "Optional[str]"
                ]
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/controllers/registration.py": {
        "_login_classic": {
            "name": "_login_classic",
            "location": 39,
            "return": [
                "Tuple[(domain.Session, str)]"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ],
                "auth": [
                    "domain.Authorizations"
                ],
                "ip": [
                    "Optional[str]"
                ]
            }
        },
        "_logout": {
            "name": "_logout",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": [
                    "str"
                ]
            }
        },
        "_login": {
            "name": "_login",
            "location": 61,
            "return": [
                "Tuple[(domain.Session, str)]"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ],
                "auth": [
                    "domain.Authorizations"
                ],
                "ip": [
                    "Optional[str]"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 74,
            "return": [
                "ResponseData"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "params": [
                    "MultiDict"
                ],
                "captcha_secret": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "next_page": [
                    "str"
                ]
            }
        },
        "view_profile": {
            "name": "view_profile",
            "location": 118,
            "return": [
                "ResponseData"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "session": [
                    "domain.Session"
                ]
            }
        },
        "edit_profile": {
            "name": "edit_profile",
            "location": 124,
            "return": [
                "ResponseData"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "session": [
                    "domain.Session"
                ],
                "params": [
                    "Optional[MultiDict]"
                ],
                "ip": [
                    "Optional[str]"
                ]
            }
        },
        "ProfileForm.from_domain": {
            "name": "from_domain",
            "location": 211,
            "return": [
                "'ProfileForm'"
            ],
            "arguments": {
                "cls": [],
                "user": [
                    "domain.User"
                ]
            }
        },
        "ProfileForm.to_domain": {
            "name": "to_domain",
            "location": 228,
            "return": [
                "domain.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrationForm.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrationForm.configure_captcha": {
            "name": "configure_captcha",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "captcha_secret": [
                    "str"
                ],
                "ip": [
                    "str"
                ]
            }
        },
        "RegistrationForm.validate_username": {
            "name": "validate_username",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "StringField"
                ]
            }
        },
        "RegistrationForm.validate_email": {
            "name": "validate_email",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "StringField"
                ]
            }
        },
        "RegistrationForm.validate_captcha_value": {
            "name": "validate_captcha_value",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "StringField"
                ]
            }
        },
        "RegistrationForm.validate_password": {
            "name": "validate_password",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "StringField"
                ]
            }
        },
        "RegistrationForm.from_domain": {
            "name": "from_domain",
            "location": 343,
            "return": [
                "'RegistrationForm'"
            ],
            "arguments": {
                "cls": [],
                "user": [
                    "domain.User"
                ]
            }
        },
        "RegistrationForm.to_domain": {
            "name": "to_domain",
            "location": 350,
            "return": [
                "domain.User"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/controllers/util.py": {
        "MultiCheckboxField.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ul_class": [
                    "str"
                ]
            }
        },
        "OptGroupSelectWidget.__call__": {
            "name": "__call__",
            "location": 38,
            "return": [
                "HTMLString"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "SelectField"
                ]
            }
        },
        "OptGroupSelectField.pre_validate": {
            "name": "pre_validate",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Form"
                ]
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/controllers/__init__.py": {
        "generate_tracking_cookie": {
            "name": "generate_tracking_cookie",
            "location": 7,
            "return": [
                "bytes"
            ],
            "arguments": {
                "ip_address": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/controllers/tests/test_authentication.py": {
        "raise_authentication_failed": {
            "name": "raise_authentication_failed",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "TestLogout.test_logout": {
            "name": "test_logout",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "mock_legacy": [],
                "mock_SessionStore": []
            }
        },
        "TestLogout.test_logout_anonymous": {
            "name": "test_logout_anonymous",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "mock_legacy": [],
                "mock_SessionStore": []
            }
        },
        "TestGETLogin.setUp": {
            "name": "setUp",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGETLogin.test_login": {
            "name": "test_login",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestPOSTLogin.setUp": {
            "name": "setUp",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPOSTLogin.test_post_invalid_data": {
            "name": "test_post_invalid_data",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestPOSTLogin.test_post_valid_data_bad_credentials": {
            "name": "test_post_valid_data_bad_credentials",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "mock_legacy": [],
                "mock_SessionStore": [],
                "mock_users": []
            }
        },
        "TestPOSTLogin.test_post_great": {
            "name": "test_post_great",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "mock_legacy": [],
                "mock_SessionStore": [],
                "mock_users": []
            }
        },
        "TestPOSTLogin.test_post_not_verified": {
            "name": "test_post_not_verified",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "mock_legacy": [],
                "mock_SessionStore": [],
                "mock_users": []
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/controllers/tests/test_registration.py": {},
    "arxiv-auth-master/accounts/accounts/controllers/tests/__init__.py": {},
    "arxiv-auth-master/accounts/accounts/routes/ui.py": {
        "user_is_owner": {
            "name": "user_is_owner",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "domain.Session"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "anonymous_only": {
            "name": "anonymous_only",
            "location": 27,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "set_cookies": {
            "name": "set_cookies",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "unset_submission_cookie": {
            "name": "unset_submission_cookie",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "unset_permanent_cookie": {
            "name": "unset_permanent_cookie",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "apply_response_headers": {
            "name": "apply_response_headers",
            "location": 101,
            "return": [
                "Response"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 111,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 133,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 162,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "captcha": {
            "name": "captcha",
            "location": 188,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "auth_status": {
            "name": "auth_status",
            "location": 198,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "anonymous_only.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/accounts/accounts/routes/__init__.py": {},
    "arxiv-auth-master/accounts/accounts/services/legacy.py": {},
    "arxiv-auth-master/accounts/accounts/services/sessions.py": {},
    "arxiv-auth-master/accounts/accounts/services/users.py": {
        "create_all": {
            "name": "create_all",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/accounts/accounts/services/__init__.py": {},
    "arxiv-auth-master/accounts/accounts/stateless_captcha/tests.py": {
        "TestCaptcha.test_new_captcha": {
            "name": "test_new_captcha",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaptcha.test_not_a_token": {
            "name": "test_not_a_token",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaptcha.test_forged_captcha": {
            "name": "test_forged_captcha",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaptcha.test_ip_address_changed": {
            "name": "test_ip_address_changed",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaptcha.test_malformed_captcha": {
            "name": "test_malformed_captcha",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaptcha.test_check_valid": {
            "name": "test_check_valid",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaptcha.test_check_invalid": {
            "name": "test_check_invalid",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/stateless_captcha/__init__.py": {
        "_generate_random_string": {
            "name": "_generate_random_string",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "N": [
                    "int"
                ]
            }
        },
        "_secret": {
            "name": "_secret",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "secret": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ]
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "secret": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ]
            }
        },
        "new": {
            "name": "new",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "secret": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ],
                "expires": [
                    "int"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 145,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "secret": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ],
                "font": [
                    "Optional[str]"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "secret": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/tests/test_end_to_end.py": {
        "_parse_cookies": {
            "name": "_parse_cookies",
            "location": 20,
            "return": [],
            "arguments": {
                "cookie_data": []
            }
        },
        "auth_check": {
            "name": "auth_check",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "TestLoginLogoutRoutes.setUpClass": {
            "name": "setUpClass",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.setUp": {
            "name": "setUp",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.tearDown": {
            "name": "tearDown",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.test_get_login": {
            "name": "test_get_login",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.test_post_login": {
            "name": "test_post_login",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.test_login_get_something_protected": {
            "name": "test_login_get_something_protected",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.test_already_logged_in_redirect": {
            "name": "test_already_logged_in_redirect",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.test_post_login_baddata": {
            "name": "test_post_login_baddata",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.test_login_logout": {
            "name": "test_login_logout",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutRoutes.test_logout_clears_legacy_submit_cookie": {
            "name": "test_logout_clears_legacy_submit_cookie",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/accounts/accounts/tests/__init__.py": {},
    "arxiv-auth-master/authenticator/wsgi.py": {
        "application": {
            "name": "application",
            "location": 9,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        }
    },
    "arxiv-auth-master/authenticator/authenticator/config.py": {},
    "arxiv-auth-master/authenticator/authenticator/factory.py": {
        "jsonify_exception": {
            "name": "jsonify_exception",
            "location": 15,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 22,
            "return": [
                "Flask"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/authenticator/authenticator/routes.py": {
        "authenticate": {
            "name": "authenticate",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "_authenticate_from_cookie": {
            "name": "_authenticate_from_cookie",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "auth_cookie": [
                    "str"
                ]
            }
        },
        "_authenticate_from_header": {
            "name": "_authenticate_from_header",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "auth_token": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/authenticator/authenticator/__init__.py": {},
    "arxiv-auth-master/authenticator/authenticator/services/sessions.py": {},
    "arxiv-auth-master/authenticator/authenticator/services/__init__.py": {},
    "arxiv-auth-master/authenticator/authenticator/tests/__init__.py": {},
    "arxiv-auth-master/authenticator/tests/test_application.py": {
        "TestAuthenticateWithCookie.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithCookie.test_no_auth_data": {
            "name": "test_no_auth_data",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithCookie.test_not_a_token": {
            "name": "test_not_a_token",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "mock_sessions": []
            }
        },
        "TestAuthenticateWithCookie.test_malformed_token": {
            "name": "test_malformed_token",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithCookie.test_token_with_bad_encryption": {
            "name": "test_token_with_bad_encryption",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithCookie.test_expired_token": {
            "name": "test_expired_token",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestAuthenticateWithCookie.test_other_forged_token": {
            "name": "test_other_forged_token",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestAuthenticateWithCookie.test_empty_session": {
            "name": "test_empty_session",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestAuthenticateWithCookie.test_valid_token": {
            "name": "test_valid_token",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestAuthenticateWithHeader.setUp": {
            "name": "setUp",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithHeader.test_not_a_token": {
            "name": "test_not_a_token",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestAuthenticateWithHeader.test_expired_token": {
            "name": "test_expired_token",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestAuthenticateWithHeader.test_invalid_token": {
            "name": "test_invalid_token",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        },
        "TestAuthenticateWithHeader.test_valid_token": {
            "name": "test_valid_token",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": []
            }
        }
    },
    "arxiv-auth-master/authenticator/tests/__init__.py": {},
    "arxiv-auth-master/cloud_auth/conftest.py": {
        "escape_bind": {
            "name": "escape_bind",
            "location": 38,
            "return": [],
            "arguments": {
                "stmt": []
            }
        },
        "engine": {
            "name": "engine",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "user_db": {
            "name": "user_db",
            "location": 49,
            "return": [],
            "arguments": {
                "engine": []
            }
        },
        "get_test_db": {
            "name": "get_test_db",
            "location": 66,
            "return": [],
            "arguments": {
                "user_db": []
            }
        },
        "secret": {
            "name": "secret",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "userstore": {
            "name": "userstore",
            "location": 87,
            "return": [],
            "arguments": {
                "get_test_db": []
            }
        },
        "api_auth": {
            "name": "api_auth",
            "location": 93,
            "return": [],
            "arguments": {
                "userstore": [],
                "secret": []
            }
        },
        "get_test_db.override_get_db": {
            "name": "override_get_db",
            "location": 71,
            "return": [],
            "arguments": {}
        }
    },
    "arxiv-auth-master/cloud_auth/arxiv/cloud_auth/domain.py": {},
    "arxiv-auth-master/cloud_auth/arxiv/cloud_auth/gcp_token_check.py": {
        "locked_session": {
            "name": "locked_session",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "verify_token": {
            "name": "verify_token",
            "location": 55,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "audience": [
                    "str"
                ],
                "token": [
                    "Union[(str, bytes)]"
                ]
            }
        },
        "email_from_idinfo": {
            "name": "email_from_idinfo",
            "location": 66,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "idinfo": []
            }
        }
    },
    "arxiv-auth-master/cloud_auth/arxiv/cloud_auth/jwt.py": {
        "decode": {
            "name": "decode",
            "location": 6,
            "return": [],
            "arguments": {
                "token": [
                    "str"
                ],
                "secret": [
                    "str"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "Auth"
                ],
                "secret": [
                    "str"
                ]
            }
        },
        "user_jwt": {
            "name": "user_jwt",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "secret": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/cloud_auth/arxiv/cloud_auth/userstore.py": {
        "UserStoreDB.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserStoreDB.invalidate_user": {
            "name": "invalidate_user",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ]
            }
        },
        "UserStoreDB.getuser": {
            "name": "getuser",
            "location": 46,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ],
                "db": [
                    "Session"
                ]
            }
        },
        "UserStoreDB.getuser_by_nick": {
            "name": "getuser_by_nick",
            "location": 53,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "nick": [
                    "str"
                ],
                "db": [
                    "Session"
                ]
            }
        },
        "UserStoreDB.getuser_by_email": {
            "name": "getuser_by_email",
            "location": 64,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "db": [
                    "Session"
                ]
            }
        },
        "UserStoreDB._getfromdb_by_email": {
            "name": "_getfromdb_by_email",
            "location": 74,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "db": [
                    "Session"
                ]
            }
        },
        "UserStoreDB._getfromdb_by_nick": {
            "name": "_getfromdb_by_nick",
            "location": 84,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "nick": [
                    "str"
                ],
                "db": [
                    "Session"
                ]
            }
        },
        "UserStoreDB.to_name": {
            "name": "to_name",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "first_name": [],
                "last_name": []
            }
        },
        "UserStoreDB._getfromdb": {
            "name": "_getfromdb",
            "location": 101,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ],
                "db": [
                    "Session"
                ]
            }
        },
        "UserStoreDB._cats_and_archives": {
            "name": "_cats_and_archives",
            "location": 135,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ],
                "db": [
                    "Session"
                ]
            }
        },
        "UserStore.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "userstore": [
                    "UserStoreDB"
                ],
                "db": [
                    "Union[(Session, Callable[([], Session)])]"
                ]
            }
        },
        "UserStore.invalidate_user": {
            "name": "invalidate_user",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ]
            }
        },
        "UserStore.getuser": {
            "name": "getuser",
            "location": 218,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ]
            }
        },
        "UserStore.getuser_by_nick": {
            "name": "getuser_by_nick",
            "location": 222,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "nick": [
                    "str"
                ]
            }
        },
        "UserStore.getuser_by_email": {
            "name": "getuser_by_email",
            "location": 225,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ]
            }
        },
        "UserStore.to_name": {
            "name": "to_name",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "first_name": [],
                "last_name": []
            }
        },
        "UserStore.__init__.to_db": {
            "name": "to_db",
            "location": 205,
            "return": [],
            "arguments": {}
        }
    },
    "arxiv-auth-master/cloud_auth/arxiv/cloud_auth/userstore_test_tables.py": {
        "load_test_data": {
            "name": "load_test_data",
            "location": 188,
            "return": [],
            "arguments": {
                "engine": []
            }
        }
    },
    "arxiv-auth-master/cloud_auth/arxiv/cloud_auth/fastapi/auth.py": {
        "mod_header_user": {
            "name": "mod_header_user",
            "location": 40,
            "return": [
                "Optional[User]"
            ],
            "arguments": {}
        },
        "enable_modkey": {
            "name": "enable_modkey",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "enable_modkey.mod_header_user_enabled": {
            "name": "mod_header_user_enabled",
            "location": 48,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "modkey": [
                    "Optional[str]"
                ],
                "userstore": [
                    "UserStore"
                ]
            }
        },
        "AuthorizedUser.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "secret": [
                    "str"
                ],
                "audience": [
                    "str"
                ],
                "userstore": [
                    "UserStore"
                ]
            }
        },
        "AuthorizedUser.decode_ng_jwt": {
            "name": "decode_ng_jwt",
            "location": 138,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "self": [],
                "jwt": []
            }
        }
    },
    "arxiv-auth-master/cloud_auth/tests/test_auth.py": {
        "test_modkey": {
            "name": "test_modkey",
            "location": 17,
            "return": [],
            "arguments": {
                "api_auth": []
            }
        },
        "test_modkey.FakeUS.getuser_by_nick": {
            "name": "getuser_by_nick",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "nick": []
            }
        }
    },
    "arxiv-auth-master/cloud_auth/tests/test_fastapi_auth.py": {
        "test_auth": {
            "name": "test_auth",
            "location": 12,
            "return": [],
            "arguments": {
                "fastapi": [],
                "secret": []
            }
        },
        "test_unprivileged_user": {
            "name": "test_unprivileged_user",
            "location": 41,
            "return": [],
            "arguments": {
                "fastapi": [],
                "secret": []
            }
        },
        "test_mod": {
            "name": "test_mod",
            "location": 53,
            "return": [],
            "arguments": {
                "fastapi": [],
                "secret": []
            }
        }
    },
    "arxiv-auth-master/cloud_auth/tests/test_gcp_jwt.py": {
        "test_unknown_user": {
            "name": "test_unknown_user",
            "location": 19,
            "return": [],
            "arguments": {
                "mocker": [],
                "fastapi": []
            }
        },
        "test_unprivileged_user": {
            "name": "test_unprivileged_user",
            "location": 29,
            "return": [],
            "arguments": {
                "mocker": [],
                "fastapi": []
            }
        },
        "test_admin_user": {
            "name": "test_admin_user",
            "location": 39,
            "return": [],
            "arguments": {
                "mocker": [],
                "fastapi": []
            }
        },
        "test_noemail": {
            "name": "test_noemail",
            "location": 51,
            "return": [],
            "arguments": {
                "mocker": [],
                "fastapi": []
            }
        },
        "test_on_gcp": {
            "name": "test_on_gcp",
            "location": 63,
            "return": [],
            "arguments": {
                "get_test_db": [],
                "fastapi": []
            }
        }
    },
    "arxiv-auth-master/cloud_auth/tests/test_jwt.py": {
        "test_encode_decode": {
            "name": "test_encode_decode",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "arxiv-auth-master/cloud_auth/tests/test_userstore.py": {
        "test_userstore": {
            "name": "test_userstore",
            "location": 6,
            "return": [],
            "arguments": {
                "userstore": []
            }
        }
    },
    "arxiv-auth-master/docs/source/conf.py": {},
    "arxiv-auth-master/registry/app.py": {},
    "arxiv-auth-master/registry/create_client.py": {
        "create_client": {
            "name": "create_client",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "scopes": [
                    "str"
                ],
                "redirect_uri": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/registry/create_db.py": {},
    "arxiv-auth-master/registry/wsgi.py": {
        "application": {
            "name": "application",
            "location": 9,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        }
    },
    "arxiv-auth-master/registry/registry/config.py": {},
    "arxiv-auth-master/registry/registry/domain.py": {},
    "arxiv-auth-master/registry/registry/factory.py": {
        "create_web_app": {
            "name": "create_web_app",
            "location": 20,
            "return": [
                "Flask"
            ],
            "arguments": {}
        },
        "register_error_handlers": {
            "name": "register_error_handlers",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "jsonify_exception": {
            "name": "jsonify_exception",
            "location": 62,
            "return": [
                "Response"
            ],
            "arguments": {
                "error": [
                    "HTTPException"
                ]
            }
        }
    },
    "arxiv-auth-master/registry/registry/filters.py": {
        "scope_label": {
            "name": "scope_label",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "scope": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/registry/registry/routes.py": {
        "redirect_to_login": {
            "name": "redirect_to_login",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "issue_token": {
            "name": "issue_token",
            "location": 37,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "authorize": {
            "name": "authorize",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "arxiv-auth-master/registry/registry/__init__.py": {},
    "arxiv-auth-master/registry/registry/oauth2/test_oauth2.py": {
        "TestOAuth2Client.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_scopes": {
            "name": "test_scopes",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_check_client_secret": {
            "name": "test_check_client_secret",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_check_grant_type": {
            "name": "test_check_grant_type",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_check_redirect_uri": {
            "name": "test_check_redirect_uri",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_check_requested_scopes": {
            "name": "test_check_requested_scopes",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestOAuth2Client.test_check_response_type": {
            "name": "test_check_response_type",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_check_token_endpoint_auth_method": {
            "name": "test_check_token_endpoint_auth_method",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_get_default_redirect_uri": {
            "name": "test_get_default_redirect_uri",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOAuth2Client.test_has_client_secret": {
            "name": "test_has_client_secret",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetClient.setUp": {
            "name": "setUp",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetClient.test_get_client": {
            "name": "test_get_client",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "mock_datastore": [],
                "mock_request": []
            }
        },
        "TestGetClient.test_get_nonexistant_client": {
            "name": "test_get_nonexistant_client",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "mock_datastore": []
            }
        },
        "TestSaveToken.test_save_token": {
            "name": "test_save_token",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "mock_SessionStore": [],
                "mock_request": []
            }
        },
        "TestCreateServer.test_create_server": {
            "name": "test_create_server",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitApp.test_init_app": {
            "name": "test_init_app",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "mock_server_class": []
            }
        }
    },
    "arxiv-auth-master/registry/registry/oauth2/__init__.py": {
        "get_client": {
            "name": "get_client",
            "location": 280,
            "return": [
                "Optional[OAuth2Client]"
            ],
            "arguments": {
                "client_id": [
                    "str"
                ]
            }
        },
        "save_token": {
            "name": "save_token",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "dict"
                ],
                "oauth_request": [
                    "OAuth2Request"
                ]
            }
        },
        "get_endorsements": {
            "name": "get_endorsements",
            "location": 336,
            "return": [
                "List[domain.Category]"
            ],
            "arguments": {
                "client": [
                    "domain.Client"
                ]
            }
        },
        "create_server": {
            "name": "create_server",
            "location": 355,
            "return": [
                "AuthorizationServer"
            ],
            "arguments": {}
        },
        "init_app": {
            "name": "init_app",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "OAuth2User.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "domain.User"
                ]
            }
        },
        "OAuth2User.get_user_id": {
            "name": "get_user_id",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2User.get_user_email": {
            "name": "get_user_email",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2User.get_username": {
            "name": "get_username",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2AuthorizationCode.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_code": [
                    "domain.AuthorizationCode"
                ]
            }
        },
        "OAuth2AuthorizationCode.__getattr__": {
            "name": "__getattr__",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "OAuth2AuthorizationCode.is_expired": {
            "name": "is_expired",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2AuthorizationCode.get_redirect_uri": {
            "name": "get_redirect_uri",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2AuthorizationCode.get_scope": {
            "name": "get_scope",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Client.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "domain.Client"
                ],
                "credential": [
                    "domain.ClientCredential"
                ],
                "authorizations": [
                    "List[domain.ClientAuthorization]"
                ],
                "grant_types": [
                    "List[domain.ClientGrantType]"
                ]
            }
        },
        "OAuth2Client.name": {
            "name": "name",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Client.description": {
            "name": "description",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Client.scopes": {
            "name": "scopes",
            "location": 118,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Client.url": {
            "name": "url",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Client.client_id": {
            "name": "client_id",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Client.get_allowed_scope": {
            "name": "get_allowed_scope",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str"
                ]
            }
        },
        "OAuth2Client.check_client_secret": {
            "name": "check_client_secret",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_secret": [
                    "str"
                ]
            }
        },
        "OAuth2Client.check_grant_type": {
            "name": "check_grant_type",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "grant_type": [
                    "str"
                ]
            }
        },
        "OAuth2Client.check_redirect_uri": {
            "name": "check_redirect_uri",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "redirect_uri": [
                    "str"
                ]
            }
        },
        "OAuth2Client.check_requested_scopes": {
            "name": "check_requested_scopes",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "set"
                ]
            }
        },
        "OAuth2Client.check_response_type": {
            "name": "check_response_type",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "str"
                ]
            }
        },
        "OAuth2Client.check_token_endpoint_auth_method": {
            "name": "check_token_endpoint_auth_method",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        },
        "OAuth2Client.get_default_redirect_uri": {
            "name": "get_default_redirect_uri",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Client.has_client_secret": {
            "name": "has_client_secret",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizationCodeGrant.create_authorization_code": {
            "name": "create_authorization_code",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "OAuth2Client"
                ],
                "grant_user": [
                    "OAuth2User"
                ],
                "request": [
                    "OAuth2Request"
                ]
            }
        },
        "AuthorizationCodeGrant.parse_authorization_code": {
            "name": "parse_authorization_code",
            "location": 240,
            "return": [
                "Optional[domain.AuthorizationCode]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "client": [
                    "OAuth2Client"
                ]
            }
        },
        "AuthorizationCodeGrant.delete_authorization_code": {
            "name": "delete_authorization_code",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_code": [
                    "OAuth2AuthorizationCode"
                ]
            }
        },
        "AuthorizationCodeGrant.authenticate_user": {
            "name": "authenticate_user",
            "location": 261,
            "return": [
                "OAuth2User"
            ],
            "arguments": {
                "self": [],
                "auth_code": [
                    "OAuth2AuthorizationCode"
                ]
            }
        }
    },
    "arxiv-auth-master/registry/registry/services/sessions.py": {},
    "arxiv-auth-master/registry/registry/services/__init__.py": {},
    "arxiv-auth-master/registry/registry/services/datastore/models.py": {},
    "arxiv-auth-master/registry/registry/services/datastore/test_datastore.py": {
        "get_g": {
            "name": "get_g",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "TestRoundTrip.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRoundTrip.tearDown": {
            "name": "tearDown",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRoundTrip.test_save_load_new_client": {
            "name": "test_save_load_new_client",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRoundTrip.test_save_load_client": {
            "name": "test_save_load_client",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRoundTrip.test_save_load_new_client_with_credential": {
            "name": "test_save_load_new_client_with_credential",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRoundTrip.test_save_load_new_client_with_auths_and_grants": {
            "name": "test_save_load_new_client_with_auths_and_grants",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRoundTrip.test_save_load_client_with_auths_and_grants": {
            "name": "test_save_load_client_with_auths_and_grants",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/registry/registry/services/datastore/util.py": {
        "transaction": {
            "name": "transaction",
            "location": 17,
            "return": [
                "Generator"
            ],
            "arguments": {
                "commit": [
                    "bool"
                ]
            }
        },
        "init_app": {
            "name": "init_app",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "object"
                ]
            }
        },
        "current_session": {
            "name": "current_session",
            "location": 34,
            "return": [
                "Session"
            ],
            "arguments": {}
        },
        "create_all": {
            "name": "create_all",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "drop_all": {
            "name": "drop_all",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/registry/registry/services/datastore/__init__.py": {
        "save_client": {
            "name": "save_client",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "domain.Client"
                ],
                "cred": [
                    "Optional[domain.ClientCredential]"
                ],
                "auths": [
                    "Optional[List[domain.ClientAuthorization]]"
                ],
                "grant_types": [
                    "Optional[List[domain.ClientGrantType]]"
                ]
            }
        },
        "set_credential": {
            "name": "set_credential",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "cred": [
                    "domain.ClientCredential"
                ],
                "client_id": [
                    "Optional[str]"
                ],
                "db_client": [
                    "Optional[models.DBClient]"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "update_authorizations": {
            "name": "update_authorizations",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "auths": [
                    "List[domain.ClientAuthorization]"
                ],
                "client_id": [
                    "Optional[str]"
                ],
                "db_client": [
                    "Optional[models.DBClient]"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "update_grant_types": {
            "name": "update_grant_types",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "grant_types": [
                    "List[domain.ClientGrantType]"
                ],
                "client_id": [
                    "Optional[str]"
                ],
                "db_client": [
                    "Optional[models.DBClient]"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "load_client": {
            "name": "load_client",
            "location": 170,
            "return": [
                "Tuple[(domain.Client, Optional[domain.ClientCredential], List[domain.ClientAuthorization], List[domain.ClientGrantType])]"
            ],
            "arguments": {
                "client_id": [
                    "str"
                ]
            }
        },
        "save_auth_code": {
            "name": "save_auth_code",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "domain.AuthorizationCode"
                ]
            }
        },
        "delete_auth_code": {
            "name": "delete_auth_code",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "client_id": [
                    "int"
                ]
            }
        },
        "load_auth_code": {
            "name": "load_auth_code",
            "location": 235,
            "return": [
                "domain.AuthorizationCode"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "client_id": [
                    "int"
                ]
            }
        },
        "load_auth_code_by_user": {
            "name": "load_auth_code_by_user",
            "location": 253,
            "return": [
                "domain.AuthorizationCode"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "_load_dbauthcode": {
            "name": "_load_dbauthcode",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "client_id": [
                    "int"
                ],
                "dbsession": [
                    "util.Session"
                ]
            }
        },
        "_load_dbclient": {
            "name": "_load_dbclient",
            "location": 290,
            "return": [
                "models.DBClient"
            ],
            "arguments": {
                "client_id": [
                    "str"
                ],
                "dbsession": [
                    "util.Session"
                ]
            }
        }
    },
    "arxiv-auth-master/registry/registry/tests/test_app.py": {
        "TestAuthentication.setUpClass": {
            "name": "setUpClass",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestAuthentication.tearDownClass": {
            "name": "tearDownClass",
            "location": 89,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestAuthentication.test_post_credentials": {
            "name": "test_post_credentials",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_post_invalid_credentials": {
            "name": "test_post_invalid_credentials",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_post_invalid_grant_type": {
            "name": "test_post_invalid_grant_type",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_post_invalid_scope": {
            "name": "test_post_invalid_scope",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_auth_code_workflow": {
            "name": "test_auth_code_workflow",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_user_is_not_logged_in": {
            "name": "test_user_is_not_logged_in",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_auth_confirmation_has_invalid_client": {
            "name": "test_auth_confirmation_has_invalid_client",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_auth_confirmation_has_unauthorized_scope": {
            "name": "test_auth_confirmation_has_unauthorized_scope",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_auth_confirmation_post_missing_confirmation": {
            "name": "test_auth_confirmation_post_missing_confirmation",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthentication.test_auth_invalid_code": {
            "name": "test_auth_invalid_code",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/registry/registry/tests/__init__.py": {},
    "arxiv-auth-master/users/app.py": {},
    "arxiv-auth-master/users/setup.py": {},
    "arxiv-auth-master/users/arxiv/users/domain.py": {
        "to_dict": {
            "name": "to_dict",
            "location": 345,
            "return": [
                "dict"
            ],
            "arguments": {
                "obj": [
                    "tuple"
                ]
            }
        },
        "from_dict": {
            "name": "from_dict",
            "location": 382,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "_is_a_namedtuple": {
            "name": "_is_a_namedtuple",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {
                "field_type": [
                    "type"
                ]
            }
        },
        "_is_typing_type": {
            "name": "_is_typing_type",
            "location": 426,
            "return": [
                "bool"
            ],
            "arguments": {
                "field_type": [
                    "type"
                ]
            }
        },
        "_is_nested_type": {
            "name": "_is_nested_type",
            "location": 431,
            "return": [
                "bool"
            ],
            "arguments": {
                "field_type": [
                    "type"
                ]
            }
        },
        "_get_cast_type_for_str": {
            "name": "_get_cast_type_for_str",
            "location": 436,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "field_type": [
                    "type"
                ]
            }
        },
        "_get_cast_type_for_dict": {
            "name": "_get_cast_type_for_dict",
            "location": 450,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "field_type": [
                    "type"
                ]
            }
        },
        "_get_cast_type": {
            "name": "_get_cast_type",
            "location": 476,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "field_type": [
                    "type"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "UserProfile.rank_display": {
            "name": "rank_display",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.default_archive": {
            "name": "default_archive",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.default_subject": {
            "name": "default_subject",
            "location": 69,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.groups_display": {
            "name": "groups_display",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.for_resource": {
            "name": "for_resource",
            "location": 111,
            "return": [
                "'Scope'"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ]
            }
        },
        "Scope.as_global": {
            "name": "as_global",
            "location": 115,
            "return": [
                "'Scope'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authorizations.endorsed_for": {
            "name": "endorsed_for",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "Category"
                ]
            }
        },
        "Authorizations.before_init": {
            "name": "before_init",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "dict"
                ]
            }
        },
        "User.asdict": {
            "name": "asdict",
            "location": 243,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.is_authorized": {
            "name": "is_authorized",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Scope"
                ],
                "resource": [
                    "str"
                ]
            }
        },
        "Session.expired": {
            "name": "expired",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.expires": {
            "name": "expires",
            "location": 330,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "to_dict._cast": {
            "name": "_cast",
            "location": 368,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/helpers.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "suffix_name": [
                    "str"
                ],
                "affiliation": [
                    "str"
                ],
                "rank": [
                    "int"
                ],
                "country": [
                    "str"
                ],
                "default_category": [
                    "domain.Category"
                ],
                "submission_groups": [
                    "str"
                ],
                "endorsements": [
                    "List[domain.Category]"
                ],
                "scope": [
                    "List[domain.Scope]"
                ],
                "verified": [
                    "bool"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/__init__.py": {},
    "arxiv-auth-master/users/arxiv/users/auth/decorators.py": {
        "scoped": {
            "name": "scoped",
            "location": 96,
            "return": [
                "Callable"
            ],
            "arguments": {
                "required": [
                    "Optional[domain.Scope]"
                ],
                "resource": [
                    "Optional[Callable]"
                ],
                "authorizer": [
                    "Optional[Callable]"
                ],
                "unauthorized": [
                    "Optional[Callable]"
                ]
            }
        },
        "scoped.protector": {
            "name": "protector",
            "location": 139,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "scoped.protector.wrapper": {
            "name": "wrapper",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/exceptions.py": {},
    "arxiv-auth-master/users/arxiv/users/auth/middleware.py": {
        "AuthMiddleware.before": {
            "name": "before",
            "location": 75,
            "return": [
                "WSGIRequest"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict"
                ],
                "start_response": [
                    "Callable"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/scopes.py": {
        "get_human_label": {
            "name": "get_human_label",
            "location": 206,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "scope": [
                    "Scope"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/tokens.py": {
        "encode": {
            "name": "encode",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "domain.Session"
                ],
                "secret": [
                    "str"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 43,
            "return": [
                "domain.Session"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "secret": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/__init__.py": {
        "Auth.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[Flask]"
                ]
            }
        },
        "Auth._get_legacy_session": {
            "name": "_get_legacy_session",
            "location": 54,
            "return": [
                "Optional[domain.Session]"
            ],
            "arguments": {
                "self": [],
                "cookie_value": [
                    "str"
                ]
            }
        },
        "Auth.init_app": {
            "name": "init_app",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Flask"
                ]
            }
        },
        "Auth.load_session": {
            "name": "load_session",
            "location": 108,
            "return": [
                "Optional[Response]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Auth.first_valid": {
            "name": "first_valid",
            "location": 152,
            "return": [
                "Optional[domain.Session]"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "List[str]"
                ]
            }
        },
        "Auth.legacy_cookies": {
            "name": "legacy_cookies",
            "location": 159,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Auth.init_app.teardown_request": {
            "name": "teardown_request",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "Optional[Exception]"
                ]
            }
        },
        "Auth.init_app.teardown_appcontext": {
            "name": "teardown_appcontext",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/sessions/store.py": {
        "_generate_nonce": {
            "name": "_generate_nonce",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        },
        "SessionStore.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "db": [
                    "int"
                ],
                "secret": [
                    "str"
                ],
                "duration": [
                    "int"
                ],
                "token": [
                    "Optional[str]"
                ],
                "cluster": [
                    "bool"
                ],
                "fake": [
                    "bool"
                ]
            }
        },
        "SessionStore.create": {
            "name": "create",
            "location": 66,
            "return": [
                "domain.Session"
            ],
            "arguments": {
                "self": [],
                "authorizations": [
                    "domain.Authorizations"
                ],
                "ip_address": [
                    "str"
                ],
                "remote_host": [
                    "str"
                ],
                "tracking_cookie": [
                    "str"
                ],
                "user": [
                    "Optional[domain.User]"
                ],
                "client": [
                    "Optional[domain.Client]"
                ],
                "session_id": [
                    "Optional[str]"
                ]
            }
        },
        "SessionStore.generate_cookie": {
            "name": "generate_cookie",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "domain.Session"
                ]
            }
        },
        "SessionStore.delete": {
            "name": "delete",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookie": [
                    "str"
                ]
            }
        },
        "SessionStore.delete_by_id": {
            "name": "delete_by_id",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str"
                ]
            }
        },
        "SessionStore.validate_session_against_cookie": {
            "name": "validate_session_against_cookie",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "domain.Session"
                ],
                "cookie": [
                    "str"
                ]
            }
        },
        "SessionStore.load": {
            "name": "load",
            "location": 175,
            "return": [
                "Union[(domain.Session, str, bytes)]"
            ],
            "arguments": {
                "self": [],
                "cookie": [
                    "str"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "SessionStore.load_by_id": {
            "name": "load_by_id",
            "location": 200,
            "return": [
                "Union[(domain.Session, str, bytes)]"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "SessionStore._encode": {
            "name": "_encode",
            "location": 211,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "session_data": [
                    "dict"
                ]
            }
        },
        "SessionStore._decode": {
            "name": "_decode",
            "location": 214,
            "return": [
                "domain.Session"
            ],
            "arguments": {
                "self": [],
                "session_jwt": [
                    "str"
                ]
            }
        },
        "SessionStore._unpack_cookie": {
            "name": "_unpack_cookie",
            "location": 224,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "cookie": [
                    "str"
                ]
            }
        },
        "SessionStore._pack_cookie": {
            "name": "_pack_cookie",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cookie_data": [
                    "dict"
                ]
            }
        },
        "SessionStore.init_app": {
            "name": "init_app",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "app": [
                    "object"
                ]
            }
        },
        "SessionStore.get_session": {
            "name": "get_session",
            "location": 250,
            "return": [
                "'SessionStore'"
            ],
            "arguments": {
                "cls": [],
                "app": [
                    "object"
                ]
            }
        },
        "SessionStore.current_session": {
            "name": "current_session",
            "location": 265,
            "return": [
                "'SessionStore'"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/sessions/__init__.py": {},
    "arxiv-auth-master/users/arxiv/users/auth/sessions/tests/test_integration.py": {
        "TestDistributedSessionServiceIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistributedSessionServiceIntegration.test_store_create": {
            "name": "test_store_create",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_config": []
            }
        },
        "TestDistributedSessionServiceIntegration.test_delete_session": {
            "name": "test_delete_session",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_config": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/sessions/tests/test_unit.py": {
        "TestDistributedSessionService.test_create": {
            "name": "test_create",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_get_config": []
            }
        },
        "TestDistributedSessionService.test_delete": {
            "name": "test_delete",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_get_config": []
            }
        },
        "TestDistributedSessionService.test_connection_failed": {
            "name": "test_connection_failed",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_not_a_token": {
            "name": "test_not_a_token",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_malformed_token": {
            "name": "test_malformed_token",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_token_with_bad_encryption": {
            "name": "test_token_with_bad_encryption",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_expired_token": {
            "name": "test_expired_token",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_forged_token": {
            "name": "test_forged_token",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_other_forged_token": {
            "name": "test_other_forged_token",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_empty_session": {
            "name": "test_empty_session",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        },
        "TestGetSession.test_valid_token": {
            "name": "test_valid_token",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_redis": [],
                "mock_get_config": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/sessions/tests/__init__.py": {},
    "arxiv-auth-master/users/arxiv/users/auth/tests/test_decorators.py": {
        "TestScoped.test_no_session": {
            "name": "test_no_session",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_legacy_is_valid": {
            "name": "test_legacy_is_valid",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_scope_is_missing": {
            "name": "test_scope_is_missing",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_scope_is_present": {
            "name": "test_scope_is_present",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_user_and_client_are_missing": {
            "name": "test_user_and_client_are_missing",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_authorizer_returns_false": {
            "name": "test_authorizer_returns_false",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_authorizer_returns_true": {
            "name": "test_authorizer_returns_true",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_session_has_global": {
            "name": "test_session_has_global",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_session_has_resource_scope": {
            "name": "test_session_has_resource_scope",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestScoped.test_no_session.protected": {
            "name": "protected",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_legacy_is_valid.protected": {
            "name": "protected",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_scope_is_missing.protected": {
            "name": "protected",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_scope_is_present.protected": {
            "name": "protected",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_user_and_client_are_missing.protected": {
            "name": "protected",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_authorizer_returns_false.return_false": {
            "name": "return_false",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "domain.Session"
                ]
            }
        },
        "TestScoped.test_authorizer_returns_false.protected": {
            "name": "protected",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_authorizer_returns_true.return_true": {
            "name": "return_true",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "domain.Session"
                ]
            }
        },
        "TestScoped.test_authorizer_returns_true.protected": {
            "name": "protected",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_session_has_global.return_false": {
            "name": "return_false",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "domain.Session"
                ]
            }
        },
        "TestScoped.test_session_has_global.protected": {
            "name": "protected",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "TestScoped.test_session_has_resource_scope.return_false": {
            "name": "return_false",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "domain.Session"
                ]
            }
        },
        "TestScoped.test_session_has_resource_scope.get_resource": {
            "name": "get_resource",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestScoped.test_session_has_resource_scope.protected": {
            "name": "protected",
            "location": 223,
            "return": [],
            "arguments": {}
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/tests/test_extension.py": {
        "TestAuthExtension.test_no_session_legacy_available": {
            "name": "test_no_session_legacy_available",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": [],
                "mock_legacy": []
            }
        },
        "TestAuthExtension.test_legacy_is_valid": {
            "name": "test_legacy_is_valid",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": [],
                "mock_legacy": []
            }
        },
        "TestAuthExtension.test_auth_session_rename": {
            "name": "test_auth_session_rename",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": [],
                "mock_legacy": []
            }
        },
        "TestAuthExtension.test_middleware_exception": {
            "name": "test_middleware_exception",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/tests/test_middleware.py": {
        "public": {
            "name": "public",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "TestAuthMiddleware.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthMiddleware.test_no_token": {
            "name": "test_no_token",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthMiddleware.test_user_token": {
            "name": "test_user_token",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthMiddleware.test_forged_user_token": {
            "name": "test_forged_user_token",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/tests/test_tokens.py": {
        "TestEncodeDecode.test_encode_session": {
            "name": "test_encode_session",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodeDecode.test_mismatched_secrets": {
            "name": "test_mismatched_secrets",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/auth/tests/__init__.py": {},
    "arxiv-auth-master/users/arxiv/users/legacy/accounts.py": {
        "does_username_exist": {
            "name": "does_username_exist",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "str"
                ]
            }
        },
        "does_email_exist": {
            "name": "does_email_exist",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "email": [
                    "str"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 70,
            "return": [
                "Tuple[(domain.User, domain.Authorizations)]"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ],
                "password": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "remote_host": [
                    "str"
                ]
            }
        },
        "get_user_by_id": {
            "name": "get_user_by_id",
            "location": 122,
            "return": [
                "domain.User"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 142,
            "return": [
                "Tuple[(domain.User, domain.Authorizations)]"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ]
            }
        },
        "_update_field_if_changed": {
            "name": "_update_field_if_changed",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "update_with": [
                    "Any"
                ]
            }
        },
        "_get_user_data": {
            "name": "_get_user_data",
            "location": 210,
            "return": [
                "Tuple[(DBUser, DBUserNickname, DBProfile)]"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "_create_profile": {
            "name": "_create_profile",
            "location": 233,
            "return": [
                "DBProfile"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ],
                "db_user": [
                    "DBUser"
                ]
            }
        },
        "_create": {
            "name": "_create",
            "location": 261,
            "return": [
                "Tuple[(DBUser, DBUserNickname, Optional[DBProfile])]"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ],
                "password": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "remote_host": [
                    "str"
                ]
            }
        },
        "_create_profile._has_group": {
            "name": "_has_group",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "group": [
                    "str"
                ]
            }
        },
        "update._has_group": {
            "name": "_has_group",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "group": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/authenticate.py": {
        "authenticate": {
            "name": "authenticate",
            "location": 28,
            "return": [
                "Tuple[(domain.User, domain.Authorizations)]"
            ],
            "arguments": {
                "username_or_email": [
                    "Optional[str]"
                ],
                "password": [
                    "Optional[str]"
                ],
                "token": [
                    "Optional[str]"
                ]
            }
        },
        "_authenticate_token": {
            "name": "_authenticate_token",
            "location": 93,
            "return": [
                "TokenData"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "_authenticate_password": {
            "name": "_authenticate_password",
            "location": 126,
            "return": [
                "PassData"
            ],
            "arguments": {
                "username_or_email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "_get_user_by_username": {
            "name": "_get_user_by_username",
            "location": 165,
            "return": [
                "PassData"
            ],
            "arguments": {
                "username_or_email": [
                    "str"
                ]
            }
        },
        "_invalidate_token": {
            "name": "_invalidate_token",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "secret": [
                    "str"
                ]
            }
        },
        "_get_token": {
            "name": "_get_token",
            "location": 243,
            "return": [
                "TokenData"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "secret": [
                    "str"
                ],
                "valid": [
                    "int"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/cookies.py": {
        "unpack": {
            "name": "unpack",
            "location": 12,
            "return": [
                "Tuple[(str, str, str, datetime, datetime, str)]"
            ],
            "arguments": {
                "cookie": [
                    "str"
                ]
            }
        },
        "pack": {
            "name": "pack",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "session_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "issued_at": [
                    "datetime"
                ],
                "capabilities": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/endorsements.py": {
        "get_endorsements": {
            "name": "get_endorsements",
            "location": 40,
            "return": [
                "Endorsements"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ],
                "compress": [
                    "bool"
                ]
            }
        },
        "_categories_in_archive": {
            "name": "_categories_in_archive",
            "location": 66,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "archive": [
                    "str"
                ]
            }
        },
        "_category": {
            "name": "_category",
            "location": 73,
            "return": [
                "domain.Category"
            ],
            "arguments": {
                "archive": [
                    "str"
                ],
                "subject_class": [
                    "str"
                ]
            }
        },
        "_get_archive": {
            "name": "_get_archive",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "category": [
                    "taxonomy.Category"
                ]
            }
        },
        "_all_archives": {
            "name": "_all_archives",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "endorsements": [
                    "Endorsements"
                ]
            }
        },
        "_all_subjects_in_archive": {
            "name": "_all_subjects_in_archive",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "archive": [
                    "str"
                ],
                "endorsements": [
                    "Endorsements"
                ]
            }
        },
        "compress_endorsements": {
            "name": "compress_endorsements",
            "location": 106,
            "return": [
                "Endorsements"
            ],
            "arguments": {
                "endorsements": [
                    "Endorsements"
                ]
            }
        },
        "explicit_endorsements": {
            "name": "explicit_endorsements",
            "location": 139,
            "return": [
                "Endorsements"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ]
            }
        },
        "implicit_endorsements": {
            "name": "implicit_endorsements",
            "location": 173,
            "return": [
                "Endorsements"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ]
            }
        },
        "is_academic": {
            "name": "is_academic",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ]
            }
        },
        "_disqualifying_invalidations": {
            "name": "_disqualifying_invalidations",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "category": [
                    "domain.Category"
                ],
                "invalidated": [
                    "Endorsements"
                ]
            }
        },
        "_endorse_by_email": {
            "name": "_endorse_by_email",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "category": [
                    "domain.Category"
                ],
                "policies": [
                    "Dict[(domain.Category, Dict)]"
                ],
                "user_is_academic": [
                    "bool"
                ]
            }
        },
        "_endorse_by_papers": {
            "name": "_endorse_by_papers",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "category": [
                    "domain.Category"
                ],
                "policies": [
                    "Dict[(domain.Category, Dict)]"
                ],
                "papers": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "domain_papers": {
            "name": "domain_papers",
            "location": 332,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ],
                "start_date": [
                    "Optional[datetime]"
                ]
            }
        },
        "category_policies": {
            "name": "category_policies",
            "location": 368,
            "return": [
                "Dict[(domain.Category, Dict)]"
            ],
            "arguments": {}
        },
        "invalidated_autoendorsements": {
            "name": "invalidated_autoendorsements",
            "location": 407,
            "return": [
                "Endorsements"
            ],
            "arguments": {
                "user": [
                    "domain.User"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/exceptions.py": {},
    "arxiv-auth-master/users/arxiv/users/legacy/models.py": {
        "DBProfile.groups": {
            "name": "groups",
            "location": 249,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBProfile.to_domain": {
            "name": "to_domain",
            "location": 254,
            "return": [
                "domain.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/sessions.py": {
        "_load": {
            "name": "_load",
            "location": 35,
            "return": [
                "DBSession"
            ],
            "arguments": {
                "session_id": [
                    "str"
                ]
            }
        },
        "_load_audit": {
            "name": "_load_audit",
            "location": 46,
            "return": [
                "DBSessionsAudit"
            ],
            "arguments": {
                "session_id": [
                    "str"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 57,
            "return": [
                "domain.Session"
            ],
            "arguments": {
                "cookie": [
                    "str"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 132,
            "return": [
                "domain.Session"
            ],
            "arguments": {
                "authorizations": [
                    "domain.Authorizations"
                ],
                "ip": [
                    "str"
                ],
                "remote_host": [
                    "str"
                ],
                "tracking_cookie": [
                    "str"
                ],
                "user": [
                    "Optional[domain.User]"
                ]
            }
        },
        "generate_cookie": {
            "name": "generate_cookie",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "domain.Session"
                ]
            }
        },
        "invalidate": {
            "name": "invalidate",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "cookie": [
                    "str"
                ]
            }
        },
        "invalidate_by_id": {
            "name": "invalidate_by_id",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": [
                    "str"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/util.py": {
        "now": {
            "name": "now",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "epoch": {
            "name": "epoch",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "t": [
                    "datetime"
                ]
            }
        },
        "from_epoch": {
            "name": "from_epoch",
            "location": 42,
            "return": [
                "datetime"
            ],
            "arguments": {
                "t": [
                    "int"
                ]
            }
        },
        "transaction": {
            "name": "transaction",
            "location": 48,
            "return": [
                "Generator"
            ],
            "arguments": {}
        },
        "init_app": {
            "name": "init_app",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "current_session": {
            "name": "current_session",
            "location": 68,
            "return": [
                "Session"
            ],
            "arguments": {}
        },
        "create_all": {
            "name": "create_all",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "drop_all": {
            "name": "drop_all",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "hash_password": {
            "name": "hash_password",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "check_password": {
            "name": "check_password",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "password": [
                    "str"
                ],
                "encrypted": [
                    "bytes"
                ]
            }
        },
        "compute_capabilities": {
            "name": "compute_capabilities",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "tapir_user": [
                    "DBUser"
                ]
            }
        },
        "get_scopes": {
            "name": "get_scopes",
            "location": 107,
            "return": [
                "List[domain.Scope]"
            ],
            "arguments": {
                "db_user": [
                    "DBUser"
                ]
            }
        },
        "is_configured": {
            "name": "is_configured",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_session_hash": {
            "name": "get_session_hash",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_session_duration": {
            "name": "get_session_duration",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "is_available": {
            "name": "is_available",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/__init__.py": {},
    "arxiv-auth-master/users/arxiv/users/legacy/tests/test_accounts.py": {
        "get_user": {
            "name": "get_user",
            "location": 21,
            "return": [],
            "arguments": {
                "session": [],
                "user_id": []
            }
        },
        "SetUpUserMixin.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUpUserMixin.tearDown": {
            "name": "tearDown",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsernameExists.test_with_nonexistant_user": {
            "name": "test_with_nonexistant_user",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsernameExists.test_with_existant_user": {
            "name": "test_with_existant_user",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmailExists.test_with_nonexistant_email": {
            "name": "test_with_nonexistant_email",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmailExists.test_with_existant_email": {
            "name": "test_with_existant_email",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_register_with_duplicate_username": {
            "name": "test_register_with_duplicate_username",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_register_with_duplicate_email": {
            "name": "test_register_with_duplicate_email",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_register_with_name_details": {
            "name": "test_register_with_name_details",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_register_with_bare_minimum": {
            "name": "test_register_with_bare_minimum",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_register_with_profile": {
            "name": "test_register_with_profile",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_can_authenticate_after_registration": {
            "name": "test_can_authenticate_after_registration",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetUserById.test_user_exists": {
            "name": "test_user_exists",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetUserById.test_user_does_not_exist": {
            "name": "test_user_does_not_exist",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetUserById.test_with_no_profile": {
            "name": "test_with_no_profile",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUpdate.test_user_without_id": {
            "name": "test_user_without_id",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUpdate.test_update_nonexistant_user": {
            "name": "test_update_nonexistant_user",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUpdate.test_update_name": {
            "name": "test_update_name",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUpdate.test_update_profile": {
            "name": "test_update_profile",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/tests/test_authenticate.py": {
        "TestAuthenticateWithPermanentToken.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPermanentToken.tearDown": {
            "name": "tearDown",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPermanentToken.test_token_is_malformed": {
            "name": "test_token_is_malformed",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPermanentToken.test_token_is_incorrect": {
            "name": "test_token_is_incorrect",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPermanentToken.test_token_is_invalid": {
            "name": "test_token_is_invalid",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPermanentToken.test_token_is_valid": {
            "name": "test_token_is_valid",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.setUp": {
            "name": "setUp",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.tearDown": {
            "name": "tearDown",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.test_no_username": {
            "name": "test_no_username",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.test_no_password": {
            "name": "test_no_password",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.test_password_is_incorrect": {
            "name": "test_password_is_incorrect",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.test_password_is_correct": {
            "name": "test_password_is_correct",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.test_login_with_email_and_correct_password": {
            "name": "test_login_with_email_and_correct_password",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthenticateWithPassword.test_no_such_user": {
            "name": "test_no_such_user",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/tests/test_bootstrap.py": {
        "_random_category": {
            "name": "_random_category",
            "location": 23,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        },
        "_get_locale": {
            "name": "_get_locale",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_prob": {
            "name": "_prob",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "P": [
                    "int"
                ]
            }
        },
        "TestBootstrap.setUpClass": {
            "name": "setUpClass",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestBootstrap.tearDownClass": {
            "name": "tearDownClass",
            "location": 210,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestBootstrap.test_authenticate_and_use_session": {
            "name": "test_authenticate_and_use_session",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/tests/test_endorsements.py": {
        "TestEndorsement.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsement.tearDown": {
            "name": "tearDown",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsement.test_get_endorsements": {
            "name": "test_get_endorsements",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAutoEndorsement.setUp": {
            "name": "setUp",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAutoEndorsement.tearDown": {
            "name": "tearDown",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAutoEndorsement.test_invalidated_autoendorsements": {
            "name": "test_invalidated_autoendorsements",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAutoEndorsement.test_category_policies": {
            "name": "test_category_policies",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAutoEndorsement.test_domain_papers": {
            "name": "test_domain_papers",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAutoEndorsement.test_is_academic": {
            "name": "test_is_academic",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/tests/test_sessions.py": {
        "TestCreateSession.test_create": {
            "name": "test_create",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_session_duration": []
            }
        },
        "TestInvalidateSession.test_invalidate": {
            "name": "test_invalidate",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_duration": []
            }
        },
        "TestInvalidateSession.test_invalidate_nonexistant_session": {
            "name": "test_invalidate_nonexistant_session",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_duration": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/tests/test_util.py": {
        "TestGetSession.test_load_returns_a_session": {
            "name": "test_load_returns_a_session",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/tests/util.py": {
        "temporary_db": {
            "name": "temporary_db",
            "location": 9,
            "return": [],
            "arguments": {
                "database_url": [
                    "str"
                ],
                "create": [
                    "bool"
                ],
                "drop": [
                    "bool"
                ]
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/legacy/tests/__init__.py": {},
    "arxiv-auth-master/users/arxiv/users/tests/test_domain.py": {
        "TestDictCoercion.test_minimal_class": {
            "name": "test_minimal_class",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictCoercion.test_class_with_children": {
            "name": "test_class_with_children",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictCoercion.test_class_with_nested_children": {
            "name": "test_class_with_nested_children",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictCoercion.test_class_with_datetime": {
            "name": "test_class_with_datetime",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictCoercion.test_with_session": {
            "name": "test_with_session",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-auth-master/users/arxiv/users/tests/test_helpers.py": {
        "TestGenerateToken.test_token_is_usable": {
            "name": "test_token_is_usable",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateToken.test_token_is_usable.protected": {
            "name": "protected",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "arxiv-auth-master/users/arxiv/users/tests/__init__.py": {}
}
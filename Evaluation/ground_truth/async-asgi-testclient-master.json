{
    "async-asgi-testclient-master/setup.py": {},
    "async-asgi-testclient-master/async_asgi_testclient/compatibility.py": {
        "is_double_callable": {
            "name": "is_double_callable",
            "location": 34,
            "return": [],
            "arguments": {
                "application": []
            }
        },
        "double_to_single_callable": {
            "name": "double_to_single_callable",
            "location": 56,
            "return": [],
            "arguments": {
                "application": []
            }
        },
        "guarantee_single_callable": {
            "name": "guarantee_single_callable",
            "location": 68,
            "return": [],
            "arguments": {
                "application": []
            }
        }
    },
    "async-asgi-testclient-master/async_asgi_testclient/multipart.py": {
        "encode_multipart_formdata": {
            "name": "encode_multipart_formdata",
            "location": 9,
            "return": [
                "Tuple[(bytes, str)]"
            ],
            "arguments": {
                "fields": [
                    "Dict[(str, Union[(str, Tuple)])]"
                ]
            }
        },
        "build_part": {
            "name": "build_part",
            "location": 25,
            "return": [
                "bytes"
            ],
            "arguments": {
                "boundary": [
                    "str"
                ],
                "field_name": [
                    "str"
                ],
                "file_tuple": [
                    "Union[(str, Tuple)]"
                ]
            }
        }
    },
    "async-asgi-testclient-master/async_asgi_testclient/response.py": {
        "BytesRW.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BytesRW.read": {
            "name": "read",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "BytesRW.write": {
            "name": "write",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "BytesRW.close": {
            "name": "close",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "bool"
                ],
                "receive": [],
                "send": []
            }
        }
    },
    "async-asgi-testclient-master/async_asgi_testclient/testing.py": {
        "TestClient.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "application": [],
                "use_cookies": [
                    "bool"
                ],
                "timeout": [
                    "Optional[Union[(int, float)]]"
                ],
                "headers": [
                    "Optional[Union[(dict, CIMultiDict)]]"
                ],
                "scope": [
                    "Optional[dict]"
                ]
            }
        },
        "TestClient.websocket_connect": {
            "name": "websocket_connect",
            "location": 110,
            "return": [
                "WebSocketSession"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "async-asgi-testclient-master/async_asgi_testclient/utils.py": {
        "flatten_headers": {
            "name": "flatten_headers",
            "location": 17,
            "return": [
                "List[Tuple]"
            ],
            "arguments": {
                "headers": [
                    "Union[(Dict, CIMultiDict)]"
                ]
            }
        },
        "make_test_headers_path_and_query_string": {
            "name": "make_test_headers_path_and_query_string",
            "location": 21,
            "return": [
                "Tuple[(CIMultiDict, str, bytes)]"
            ],
            "arguments": {
                "app": [
                    "Any"
                ],
                "path": [
                    "str"
                ],
                "headers": [
                    "Optional[Union[(dict, CIMultiDict)]]"
                ],
                "query_string": [
                    "Optional[dict]"
                ]
            }
        },
        "to_relative_path": {
            "name": "to_relative_path",
            "location": 59,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create_monitored_task": {
            "name": "create_monitored_task",
            "location": 82,
            "return": [],
            "arguments": {
                "coro": [],
                "send": []
            }
        },
        "_callback": {
            "name": "_callback",
            "location": 99,
            "return": [],
            "arguments": {
                "send": [],
                "fut": []
            }
        },
        "set_timeout": {
            "name": "set_timeout",
            "location": 118,
            "return": [],
            "arguments": {
                "queue": [],
                "timeout": []
            }
        },
        "current_task": {
            "name": "current_task",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "reason": [],
                "task": []
            }
        }
    },
    "async-asgi-testclient-master/async_asgi_testclient/websocket.py": {
        "WebSocketSession.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "testclient": [],
                "path": [],
                "headers": [
                    "Optional[Dict]"
                ],
                "cookies": [
                    "Optional[Dict]"
                ],
                "scheme": [
                    "str"
                ]
            }
        },
        "WebSocketSession.__aiter__": {
            "name": "__aiter__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "async-asgi-testclient-master/async_asgi_testclient/__init__.py": {},
    "async-asgi-testclient-master/async_asgi_testclient/tests/test_testing.py": {
        "quart_app": {
            "name": "quart_app",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "starlette_app": {
            "name": "starlette_app",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_upload_stream_from_download_stream.down_stream.gen": {
            "name": "gen",
            "location": 488,
            "return": [],
            "arguments": {}
        },
        "test_response_stream_crashes.stream_crashes.gen": {
            "name": "gen",
            "location": 539,
            "return": [],
            "arguments": {}
        }
    }
}
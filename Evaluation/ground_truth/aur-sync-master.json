{
    "aur-sync-master/setup.py": {},
    "aur-sync-master/aursync/flattener.py": {
        "compose_keys": {
            "name": "compose_keys",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "str"
                ],
                "leaf": [
                    "FlatKey"
                ],
                "separation": [
                    "FlatContainerType"
                ],
                "dict_sep": [
                    "str"
                ],
                "list_sep": [
                    "str"
                ]
            }
        },
        "_flatten": {
            "name": "_flatten",
            "location": 31,
            "return": [],
            "arguments": {
                "d": [
                    "FlatContainer"
                ],
                "list_sep": [
                    "str"
                ],
                "dict_sep": [
                    "str"
                ],
                "key_str": [
                    "str"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 47,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "ty.Dict"
                ],
                "list_sep": [],
                "dict_sep": []
            }
        },
        "inflate": {
            "name": "inflate",
            "location": 91,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "ty.Dict[(str, str)]"
                ],
                "dict_sep": [
                    "str"
                ],
                "list_sep": [
                    "str"
                ]
            }
        },
        "_Composition.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Composition.partial_compose": {
            "name": "partial_compose",
            "location": 57,
            "return": [
                "ty.Callable"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "FlatContainer"
                ]
            }
        },
        "_Composition.set_parent_and_compose": {
            "name": "set_parent_and_compose",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_target": [
                    "FlatKey"
                ],
                "layer_factory": [
                    "ty.Callable"
                ]
            }
        },
        "_Composition.reset": {
            "name": "reset",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Composition.add_dict": {
            "name": "add_dict",
            "location": 80,
            "return": [],
            "arguments": {
                "d": [
                    "dict"
                ],
                "k": [
                    "str"
                ],
                "v": [
                    "FlatContainer"
                ]
            }
        },
        "_Composition.add_list": {
            "name": "add_list",
            "location": 85,
            "return": [],
            "arguments": {
                "li": [
                    "list"
                ],
                "i": [
                    "int"
                ],
                "v": [
                    "FlatContainer"
                ]
            }
        }
    },
    "aur-sync-master/aursync/mpmc.py": {
        "MPMC.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "redis_conn": [
                    "aioredis.Redis"
                ],
                "serializer": [
                    "ty.Callable[([T_m], ty.Any)]"
                ],
                "deserializer": [
                    "ty.Callable[([ty.Any], T_m)]"
                ]
            }
        }
    },
    "aur-sync-master/aursync/sync.py": {
        "_listify_arg": {
            "name": "_listify_arg",
            "location": 75,
            "return": [
                "ty.Iterable[ty.Any]"
            ],
            "arguments": {
                "listy": [
                    "ty.Optional[ty.Union[(str, ty.Iterable[ty.Any])]]"
                ]
            }
        },
        "_flatten": {
            "name": "_flatten",
            "location": 85,
            "return": [],
            "arguments": {
                "li": [],
                "list_types": []
            }
        },
        "_parameterize": {
            "name": "_parameterize",
            "location": 101,
            "return": [],
            "arguments": {
                "deco_to_enhance": []
            }
        },
        "_link_args": {
            "name": "_link_args",
            "location": 119,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_timegate": {
            "name": "_timegate",
            "location": 132,
            "return": [
                "ty.Awaitable"
            ],
            "arguments": {
                "coro": [
                    "ty.Awaitable"
                ],
                "gate": []
            }
        },
        "_ConfigProxy.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "sync": [
                    "Sync"
                ],
                "key_root": []
            }
        },
        "_ConfigProxy._verify_redis": {
            "name": "_verify_redis",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigProxy.__setitem__": {
            "name": "__setitem__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "flattener.FlatKey"
                ],
                "v": [
                    "str"
                ]
            }
        },
        "_ConfigProxy.compose_key": {
            "name": "compose_key",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "_ConfigProxy.__delitem__": {
            "name": "__delitem__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "flattener.FlatKey"
                ]
            }
        },
        "_ConfigProxy.__getitem__": {
            "name": "__getitem__",
            "location": 64,
            "return": [
                "_ConfigProxy"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "flattener.FlatKey"
                ]
            }
        },
        "_ConfigProxy.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_parameterize.deco_factory": {
            "name": "deco_factory",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "_link_args.wrapper": {
            "name": "wrapper",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "AurRedis.aur_get": {
            "name": "aur_get",
            "location": 147,
            "return": [
                "ty.Coroutine[(ty.Union[(str, ty.List[str])], None, None)]"
            ],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "Sync.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "redis": [
                    "ty.Optional[AurRedis]"
                ],
                "serializer": [
                    "ty.Callable[([T_m], ty.Any)]"
                ],
                "deserializer": [
                    "ty.Callable[([ty.Any], T_m)]"
                ]
            }
        },
        "Sync.subscribe": {
            "name": "subscribe",
            "location": 277,
            "return": [
                "ty.Union[(ty.Awaitable, None)]"
            ],
            "arguments": {
                "self": [],
                "handler_func": [
                    "ty.Callable[([mpmc.T_m], ty.Any)]"
                ],
                "channels": [
                    "ty.Union[(str, ty.List[str])]"
                ],
                "channel_patterns": [
                    "ty.Union[(str, ty.List[str])]"
                ],
                "wait": []
            }
        },
        "Sync.publish": {
            "name": "publish",
            "location": 313,
            "return": [
                "ty.Union[(ty.Awaitable, None)]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "mpmc.T_m"
                ],
                "channels": [
                    "ty.Union[(str, ty.List[str])]"
                ],
                "wait": [
                    "bool"
                ],
                "callback": [
                    "ty.Callable[([mpmc.T_m], ty.Any)]"
                ]
            }
        },
        "_parameterize.deco_factory.deco_wrapper": {
            "name": "deco_wrapper",
            "location": 109,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Sync._handle.track_live_handlers": {
            "name": "track_live_handlers",
            "location": 266,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "aur-sync-master/aursync/__init__.py": {},
    "aur-sync-master/tests/compress_inflate_test.py": {
        "test_dict_getset": {
            "name": "test_dict_getset",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "aur-sync-master/tests/getset_test.py": {
        "makeEvilDict": {
            "name": "makeEvilDict",
            "location": 16,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "aur-sync-master/tests/test2.py": {},
    "aur-sync-master/tests/test3.py": {},
    "aur-sync-master/tests/tester.py": {
        "message": {
            "name": "message",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_long_sync_handler.handle": {
            "name": "handle",
            "location": 126,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    }
}
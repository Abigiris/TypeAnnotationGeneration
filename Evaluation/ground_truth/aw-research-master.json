{
    "aw-research-master/aw_research/algorithmia.py": {
        "_assert_api_key": {
            "name": "_assert_api_key",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "run_sentiment": {
            "name": "run_sentiment",
            "location": 24,
            "return": [],
            "arguments": {
                "docs": [
                    "List[str]"
                ]
            }
        },
        "run_LDA": {
            "name": "run_LDA",
            "location": 32,
            "return": [],
            "arguments": {
                "docs": [
                    "List[str]"
                ]
            }
        }
    },
    "aw-research-master/aw_research/classify.py": {
        "_read_class_csv": {
            "name": "_read_class_csv",
            "location": 31,
            "return": [
                "List[Tuple[(str, str, Optional[str])]]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "test_read_class_csv": {
            "name": "test_read_class_csv",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "_read_class_toml": {
            "name": "_read_class_toml",
            "location": 45,
            "return": [
                "List[Tuple[(str, str, Optional[str])]]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "test_read_class_toml": {
            "name": "test_read_class_toml",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "_init_classes": {
            "name": "_init_classes",
            "location": 77,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "new_classes": [
                    "List[Tuple[(str, str, Optional[str])]]"
                ]
            }
        },
        "requires_init_classes": {
            "name": "requires_init_classes",
            "location": 95,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "get_parent_categories": {
            "name": "get_parent_categories",
            "location": 106,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cat": [
                    "str"
                ]
            }
        },
        "build_category_hierarchy": {
            "name": "build_category_hierarchy",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "cat": [
                    "str"
                ],
                "app": [
                    "str"
                ]
            }
        },
        "classify": {
            "name": "classify",
            "location": 140,
            "return": [
                "List[Event]"
            ],
            "arguments": {
                "events": [
                    "List[Event]"
                ],
                "include_app": [],
                "max_category_depth": []
            }
        },
        "_hostname": {
            "name": "_hostname",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "group_by_url_hostname": {
            "name": "group_by_url_hostname",
            "location": 186,
            "return": [
                "Dict[(str, List[Event])]"
            ],
            "arguments": {
                "events": [
                    "List[Event]"
                ]
            }
        },
        "unfold_hier": {
            "name": "unfold_hier",
            "location": 190,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "time_per_category": {
            "name": "time_per_category",
            "location": 198,
            "return": [
                "typing.Counter[str]"
            ],
            "arguments": {
                "events": [
                    "List[Event]"
                ],
                "unfold": []
            }
        },
        "_plot_category_hierarchy_sunburst": {
            "name": "_plot_category_hierarchy_sunburst",
            "location": 211,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "_restrict_category_depth": {
            "name": "_restrict_category_depth",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "time_per_app": {
            "name": "time_per_app",
            "location": 242,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "query2ify": {
            "name": "query2ify",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "f": []
            }
        },
        "build_query": {
            "name": "build_query",
            "location": 276,
            "return": [],
            "arguments": {
                "hostname": [
                    "str"
                ]
            }
        },
        "_query_complete": {
            "name": "_query_complete",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "_get_events_toggl": {
            "name": "_get_events_toggl",
            "location": 325,
            "return": [
                "List[Event]"
            ],
            "arguments": {
                "since": [
                    "datetime"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "_get_events_smartertime": {
            "name": "_get_events_smartertime",
            "location": 353,
            "return": [
                "List[Event]"
            ],
            "arguments": {
                "since": [
                    "datetime"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "get_events": {
            "name": "get_events",
            "location": 382,
            "return": [
                "List[Event]"
            ],
            "arguments": {
                "hostname": [
                    "str"
                ],
                "since": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ],
                "include_smartertime": [],
                "include_toggl": [],
                "testing": [
                    "bool"
                ]
            }
        },
        "test_hostname": {
            "name": "test_hostname",
            "location": 434,
            "return": [],
            "arguments": {}
        },
        "_print_category": {
            "name": "_print_category",
            "location": 439,
            "return": [],
            "arguments": {
                "events": [],
                "cat": [],
                "n": []
            }
        },
        "_datetime_arg": {
            "name": "_datetime_arg",
            "location": 455,
            "return": [
                "datetime"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_build_argparse": {
            "name": "_build_argparse",
            "location": 459,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "pprint_secs_hhmmss": {
            "name": "pprint_secs_hhmmss",
            "location": 476,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "_print_summary": {
            "name": "_print_summary",
            "location": 486,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "_plot_category_daily_trend": {
            "name": "_plot_category_daily_trend",
            "location": 502,
            "return": [],
            "arguments": {
                "events": [],
                "categories": []
            }
        },
        "_main": {
            "name": "_main",
            "location": 526,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "_read_class_toml._register_category_object": {
            "name": "_register_category_object",
            "location": 50,
            "return": [],
            "arguments": {
                "d": [],
                "cat_name": [],
                "parent": []
            }
        },
        "requires_init_classes.g": {
            "name": "g",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "_plot_category_hierarchy_sunburst.dict_hier_to_list_hier": {
            "name": "dict_hier_to_list_hier",
            "location": 223,
            "return": [],
            "arguments": {
                "d": []
            }
        }
    },
    "aw-research-master/aw_research/filters.py": {
        "filter_short": {
            "name": "filter_short",
            "location": 11,
            "return": [],
            "arguments": {
                "events": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "filter_datafields": {
            "name": "filter_datafields",
            "location": 19,
            "return": [],
            "arguments": {
                "events": [
                    "List[Event]"
                ],
                "fields": [
                    "List[str]"
                ]
            }
        },
        "test_filter_data": {
            "name": "test_filter_data",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_short": {
            "name": "test_filter_short",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "aw-research-master/aw_research/main.py": {
        "assert_no_overlap": {
            "name": "assert_no_overlap",
            "location": 24,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "_get_window_events": {
            "name": "_get_window_events",
            "location": 36,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "_main_redact": {
            "name": "_main_redact",
            "location": 52,
            "return": [],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "ignore_case": [
                    "bool"
                ]
            }
        },
        "_main_analyse": {
            "name": "_main_analyse",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "_main_merge": {
            "name": "_main_merge",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "_main_heartbeat_reduce": {
            "name": "_main_heartbeat_reduce",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "_main_flood": {
            "name": "_main_flood",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "print_most_common_titles": {
            "name": "print_most_common_titles",
            "location": 127,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "main": {
            "name": "main",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "print_most_common_titles.total_duration": {
            "name": "total_duration",
            "location": 134,
            "return": [],
            "arguments": {
                "events": []
            }
        }
    },
    "aw-research-master/aw_research/merge.py": {
        "similar": {
            "name": "similar",
            "location": 6,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "merge_close_and_similar": {
            "name": "merge_close_and_similar",
            "location": 10,
            "return": [],
            "arguments": {
                "events": [],
                "pulsetime": []
            }
        }
    },
    "aw-research-master/aw_research/plot.py": {
        "color_gen": {
            "name": "color_gen",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "barchart": {
            "name": "barchart",
            "location": 20,
            "return": [],
            "arguments": {
                "x": [
                    "List[datetime]"
                ],
                "bar_sets": [
                    "List[List[float]]"
                ]
            }
        }
    },
    "aw-research-master/aw_research/plot_sunburst.py": {
        "sunburst": {
            "name": "sunburst",
            "location": 9,
            "return": [],
            "arguments": {
                "nodes": [],
                "total": [],
                "offset": [],
                "level": [],
                "ax": []
            }
        }
    },
    "aw-research-master/aw_research/redact.py": {
        "_redact_full": {
            "name": "_redact_full",
            "location": 16,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "_redact": {
            "name": "_redact",
            "location": 22,
            "return": [
                "Tuple[(List[Event], int)]"
            ],
            "arguments": {
                "events": [
                    "List[Event]"
                ],
                "f": [
                    "Callable[([str], bool)]"
                ]
            }
        },
        "redact_words": {
            "name": "redact_words",
            "location": 34,
            "return": [],
            "arguments": {
                "events": [
                    "List[Event]"
                ],
                "pattern": [
                    "str"
                ],
                "ignore_case": []
            }
        }
    },
    "aw-research-master/aw_research/thankful.py": {
        "find_patreon_link": {
            "name": "find_patreon_link",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "find_bitcoin_address": {
            "name": "find_bitcoin_address",
            "location": 51,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "find_eth_address": {
            "name": "find_eth_address",
            "location": 59,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "find_email_address": {
            "name": "find_email_address",
            "location": 66,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "find_youtube_content": {
            "name": "find_youtube_content",
            "location": 198,
            "return": [
                "List[Content]"
            ],
            "arguments": {
                "events": []
            }
        },
        "get_channels_from_videos": {
            "name": "get_channels_from_videos",
            "location": 215,
            "return": [],
            "arguments": {
                "videos": [
                    "List[Content]"
                ]
            }
        },
        "assign_videos_to_channels": {
            "name": "assign_videos_to_channels",
            "location": 232,
            "return": [],
            "arguments": {
                "videos": [],
                "channels": []
            }
        },
        "get_yt_videos": {
            "name": "get_yt_videos",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "get_channels": {
            "name": "get_channels",
            "location": 253,
            "return": [],
            "arguments": {
                "yt_videos": []
            }
        },
        "_main": {
            "name": "_main",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "PaymentMethod.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Creator.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "service": [],
                "identifier": []
            }
        },
        "Creator.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Creator.add_youtube_data": {
            "name": "add_youtube_data",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Creator.find_payment_methods": {
            "name": "find_payment_methods",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Creator.register_creation": {
            "name": "register_creation",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "creation": [
                    "'Content'"
                ]
            }
        },
        "Creator._find_patreon": {
            "name": "_find_patreon",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Creator._find_bitcoin": {
            "name": "_find_bitcoin",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Creator._find_eth": {
            "name": "_find_eth",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Creator._find_email": {
            "name": "_find_email",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Content.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "title": []
            }
        },
        "Content.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.add_youtube_data": {
            "name": "add_youtube_data",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.url": {
            "name": "url",
            "location": 182,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.uri": {
            "name": "uri",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aw-research-master/aw_research/tree.py": {
        "test_node": {
            "name": "test_node",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_node_timedelta": {
            "name": "test_node_timedelta",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__contains__": {
            "name": "__contains__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "Node.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "Node.__iadd__": {
            "name": "__iadd__",
            "location": 31,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Node'"
                ]
            }
        },
        "Node.total": {
            "name": "total",
            "location": 36,
            "return": [
                "Union[(int, timedelta)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.print": {
            "name": "print",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "depth": [],
                "width": [],
                "indent": [],
                "sort": []
            }
        }
    },
    "aw-research-master/aw_research/util.py": {
        "split_event_on_time": {
            "name": "split_event_on_time",
            "location": 9,
            "return": [
                "Tuple[(Event, Event)]"
            ],
            "arguments": {
                "event": [
                    "Event"
                ],
                "timestamp": [
                    "datetime"
                ]
            }
        },
        "next_hour": {
            "name": "next_hour",
            "location": 21,
            "return": [
                "datetime"
            ],
            "arguments": {
                "timestamp": [
                    "datetime"
                ]
            }
        },
        "test_next_hour": {
            "name": "test_next_hour",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "split_event_on_hour": {
            "name": "split_event_on_hour",
            "location": 32,
            "return": [
                "List[Event]"
            ],
            "arguments": {
                "event": [
                    "Event"
                ]
            }
        },
        "test_split_event_on_hour": {
            "name": "test_split_event_on_hour",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start_of_day": {
            "name": "start_of_day",
            "location": 57,
            "return": [
                "datetime"
            ],
            "arguments": {
                "dt": [
                    "datetime"
                ]
            }
        },
        "end_of_day": {
            "name": "end_of_day",
            "location": 62,
            "return": [
                "datetime"
            ],
            "arguments": {
                "dt": [
                    "datetime"
                ]
            }
        },
        "get_week_start": {
            "name": "get_week_start",
            "location": 66,
            "return": [
                "datetime"
            ],
            "arguments": {
                "dt": [
                    "datetime"
                ]
            }
        },
        "is_in_same_week": {
            "name": "is_in_same_week",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "dt1": [
                    "datetime"
                ],
                "dt2": [
                    "datetime"
                ]
            }
        },
        "split_into_weeks": {
            "name": "split_into_weeks",
            "location": 75,
            "return": [
                "List[Tuple[(datetime, datetime)]]"
            ],
            "arguments": {
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ]
            }
        },
        "test_split_into_weeks": {
            "name": "test_split_into_weeks",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "split_into_days": {
            "name": "split_into_days",
            "location": 105,
            "return": [
                "List[Tuple[(datetime, datetime)]]"
            ],
            "arguments": {
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ]
            }
        },
        "test_split_into_days": {
            "name": "test_split_into_days",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verify_no_overlap": {
            "name": "verify_no_overlap",
            "location": 122,
            "return": [],
            "arguments": {
                "events": [
                    "List[Event]"
                ]
            }
        },
        "categorytime_per_day": {
            "name": "categorytime_per_day",
            "location": 144,
            "return": [],
            "arguments": {
                "events": [],
                "category": []
            }
        },
        "categorytime_during_day": {
            "name": "categorytime_during_day",
            "location": 156,
            "return": [
                "pd.Series"
            ],
            "arguments": {
                "events": [
                    "List[Event]"
                ],
                "category": [
                    "str"
                ],
                "day": [
                    "datetime"
                ]
            }
        }
    },
    "aw-research-master/aw_research/__about__.py": {},
    "aw-research-master/aw_research/__init__.py": {},
    "aw-research-master/aw_research/__main__.py": {},
    "aw-research-master/aw_research/importers/smartertime.py": {
        "parse": {
            "name": "parse",
            "location": 14,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "import_as_bucket": {
            "name": "import_as_bucket",
            "location": 38,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "print_info": {
            "name": "print_info",
            "location": 53,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "default": {
            "name": "default",
            "location": 85,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "save_bucket": {
            "name": "save_bucket",
            "location": 94,
            "return": [],
            "arguments": {
                "bucket": []
            }
        },
        "import_to_awserver": {
            "name": "import_to_awserver",
            "location": 101,
            "return": [],
            "arguments": {
                "bucket": []
            }
        }
    },
    "aw-research-master/examples/afk_and_audible.py": {
        "_check_nonoverlapping": {
            "name": "_check_nonoverlapping",
            "location": 8,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 18,
            "return": [],
            "arguments": {
                "events1": [],
                "events2": []
            }
        },
        "all_active_webactivity": {
            "name": "all_active_webactivity",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "aw-research-master/examples/pandas_example.py": {
        "get_events": {
            "name": "get_events",
            "location": 8,
            "return": [],
            "arguments": {
                "bid": []
            }
        },
        "to_dataframe": {
            "name": "to_dataframe",
            "location": 12,
            "return": [],
            "arguments": {
                "events": []
            }
        }
    },
    "aw-research-master/examples/plot_timeperiods.py": {
        "_construct_date_array": {
            "name": "_construct_date_array",
            "location": 20,
            "return": [
                "'np.ndarray[str]'"
            ],
            "arguments": {
                "startdates": [
                    "List[datetime]"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 24,
            "return": [
                "LoadDataTuple"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "load_data_example": {
            "name": "load_data_example",
            "location": 33,
            "return": [
                "LoadDataTuple"
            ],
            "arguments": {}
        },
        "same_date": {
            "name": "same_date",
            "location": 49,
            "return": [],
            "arguments": {
                "dts": [
                    "List[datetime]"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 53,
            "return": [],
            "arguments": {
                "start": [
                    "'np.ndarray[datetime]'"
                ],
                "stop": [
                    "'np.ndarray[datetime]'"
                ],
                "state": [
                    "'np.ndarray[str]'"
                ],
                "cap": [
                    "'np.ndarray[str]'"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "plot.timelines": {
            "name": "timelines",
            "location": 67,
            "return": [],
            "arguments": {
                "y": [],
                "xstart": [],
                "xstop": [],
                "color": []
            }
        }
    },
    "aw-research-master/tests/test_all.py": {
        "test_imports": {
            "name": "test_imports",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "aw-research-master/tests/test_redact.py": {
        "test_redact_word": {
            "name": "test_redact_word",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    }
}
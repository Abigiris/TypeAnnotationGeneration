{
    "aw-server-master/__main__.py": {},
    "aw-server-master/aw_server/api.py": {
        "get_device_id": {
            "name": "get_device_id",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "check_bucket_exists": {
            "name": "check_bucket_exists",
            "location": 38,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "check_bucket_exists.g": {
            "name": "g",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "ServerAPI.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "testing": []
            }
        },
        "ServerAPI.get_info": {
            "name": "get_info",
            "location": 56,
            "return": [
                "Dict[(str, Dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerAPI.get_buckets": {
            "name": "get_buckets",
            "location": 66,
            "return": [
                "Dict[(str, Dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerAPI.get_bucket_metadata": {
            "name": "get_bucket_metadata",
            "location": 80,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ]
            }
        },
        "ServerAPI.export_bucket": {
            "name": "export_bucket",
            "location": 86,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ]
            }
        },
        "ServerAPI.export_all": {
            "name": "export_all",
            "location": 95,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerAPI.import_bucket": {
            "name": "import_bucket",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_data": [
                    "Any"
                ]
            }
        },
        "ServerAPI.import_all": {
            "name": "import_all",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ServerAPI.create_bucket": {
            "name": "create_bucket",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_type": [
                    "str"
                ],
                "client": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "created": [
                    "Optional[datetime]"
                ]
            }
        },
        "ServerAPI.delete_bucket": {
            "name": "delete_bucket",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ]
            }
        },
        "ServerAPI.get_event": {
            "name": "get_event",
            "location": 160,
            "return": [
                "Optional[Event]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": [
                    "int"
                ]
            }
        },
        "ServerAPI.get_events": {
            "name": "get_events",
            "location": 173,
            "return": [
                "List[Event]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ]
            }
        },
        "ServerAPI.create_events": {
            "name": "create_events",
            "location": 190,
            "return": [
                "Optional[Event]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "events": [
                    "List[Event]"
                ]
            }
        },
        "ServerAPI.get_eventcount": {
            "name": "get_eventcount",
            "location": 197,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "start": [
                    "datetime"
                ],
                "end": [
                    "datetime"
                ]
            }
        },
        "ServerAPI.delete_event": {
            "name": "delete_event",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": []
            }
        },
        "ServerAPI.heartbeat": {
            "name": "heartbeat",
            "location": 212,
            "return": [
                "Event"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "heartbeat": [
                    "Event"
                ],
                "pulsetime": [
                    "float"
                ]
            }
        },
        "ServerAPI.query2": {
            "name": "query2",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "query": [],
                "timeperiods": [],
                "cache": []
            }
        },
        "ServerAPI.get_log": {
            "name": "get_log",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aw-server-master/aw_server/config.py": {},
    "aw-server-master/aw_server/custom_static.py": {
        "get_custom_static_blueprint": {
            "name": "get_custom_static_blueprint",
            "location": 28,
            "return": [],
            "arguments": {
                "custom_static_directories": []
            }
        },
        "get_custom_static_blueprint.custom_static_supported_pages": {
            "name": "custom_static_supported_pages",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "get_custom_static_blueprint.custom_static_pages": {
            "name": "custom_static_pages",
            "location": 40,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "aw-server-master/aw_server/exceptions.py": {
        "BadRequest.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "NotFound.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Unauthorized.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "aw-server-master/aw_server/log.py": {
        "FlaskLogHandler.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlaskLogHandler.log": {
            "name": "log",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "levelname": [],
                "message": []
            }
        }
    },
    "aw-server-master/aw_server/main.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "parse_settings": {
            "name": "parse_settings",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "parse_str_to_dict": {
            "name": "parse_str_to_dict",
            "location": 122,
            "return": [],
            "arguments": {
                "str_value": []
            }
        }
    },
    "aw-server-master/aw_server/rest.py": {
        "host_header_check": {
            "name": "host_header_check",
            "location": 20,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "copy_doc": {
            "name": "copy_doc",
            "location": 114,
            "return": [],
            "arguments": {
                "api_method": []
            }
        },
        "host_header_check.decorator": {
            "name": "decorator",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "CustomJSONEncoder.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomJSONEncoder.default": {
            "name": "default",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AnyJson.format": {
            "name": "format",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "copy_doc.decorator": {
            "name": "decorator",
            "location": 119,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "InfoResource.get": {
            "name": "get",
            "location": 133,
            "return": [
                "Dict[(str, Dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketsResource.get": {
            "name": "get",
            "location": 144,
            "return": [
                "Dict[(str, Dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketResource.get": {
            "name": "get",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "BucketResource.post": {
            "name": "post",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "BucketResource.delete": {
            "name": "delete",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "EventsResource.get": {
            "name": "get",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "EventsResource.post": {
            "name": "post",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "EventCountResource.get": {
            "name": "get",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "EventResource.get": {
            "name": "get",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": [
                    "int"
                ]
            }
        },
        "EventResource.delete": {
            "name": "delete",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": [
                    "int"
                ]
            }
        },
        "HeartbeatResource.post": {
            "name": "post",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "QueryResource.post": {
            "name": "post",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExportAllResource.get": {
            "name": "get",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BucketExportResource.get": {
            "name": "get",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "ImportAllResource.post": {
            "name": "post",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogResource.get": {
            "name": "get",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aw-server-master/aw_server/server.py": {
        "create_app": {
            "name": "create_app",
            "location": 32,
            "return": [
                "AWFlask"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "testing": [],
                "storage_method": [],
                "cors_origins": [],
                "custom_static": []
            }
        },
        "static_root": {
            "name": "static_root",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "static_css": {
            "name": "static_css",
            "location": 67,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "static_js": {
            "name": "static_js",
            "location": 72,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_config_cors": {
            "name": "_config_cors",
            "location": 76,
            "return": [],
            "arguments": {
                "cors_origins": [
                    "List[str]"
                ],
                "testing": [
                    "bool"
                ]
            }
        },
        "_start": {
            "name": "_start",
            "location": 97,
            "return": [],
            "arguments": {
                "storage_method": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "testing": [
                    "bool"
                ],
                "cors_origins": [
                    "List[str]"
                ],
                "custom_static": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "AWFlask.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "aw-server-master/aw_server/__about__.py": {
        "get_rev": {
            "name": "get_rev",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_tag_exact": {
            "name": "get_tag_exact",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "get_tag_latest": {
            "name": "get_tag_latest",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "detect_version_git": {
            "name": "detect_version_git",
            "location": 72,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "detect_version_pkg": {
            "name": "detect_version_pkg",
            "location": 85,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "detect_version": {
            "name": "detect_version",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "assign_static_version": {
            "name": "assign_static_version",
            "location": 101,
            "return": [],
            "arguments": {}
        }
    },
    "aw-server-master/aw_server/__init__.py": {},
    "aw-server-master/aw_server/__main__.py": {},
    "aw-server-master/misc/process_logs.py": {},
    "aw-server-master/scripts/benchmark-api-heartbeat.py": {
        "benchmark": {
            "name": "benchmark",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "aw-server-master/scripts/profile-werkzeug-read.py": {},
    "aw-server-master/scripts/profile-werkzeug.py": {},
    "aw-server-master/tests/conftest.py": {
        "app": {
            "name": "app",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "flask_client": {
            "name": "flask_client",
            "location": 16,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "aw-server-master/tests/test_client.py": {
        "aw_client": {
            "name": "aw_client",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "bucket": {
            "name": "bucket",
            "location": 35,
            "return": [],
            "arguments": {
                "aw_client": []
            }
        },
        "queued_bucket": {
            "name": "queued_bucket",
            "location": 46,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_get_info": {
            "name": "test_get_info",
            "location": 54,
            "return": [],
            "arguments": {
                "aw_client": []
            }
        },
        "test_export": {
            "name": "test_export",
            "location": 59,
            "return": [],
            "arguments": {
                "aw_client": []
            }
        },
        "_create_heartbeat_events": {
            "name": "_create_heartbeat_events",
            "location": 67,
            "return": [],
            "arguments": {
                "start": [],
                "delta": []
            }
        },
        "_create_periodic_events": {
            "name": "_create_periodic_events",
            "location": 88,
            "return": [],
            "arguments": {
                "num_events": [],
                "start": [],
                "delta": []
            }
        },
        "test_heartbeat": {
            "name": "test_heartbeat",
            "location": 99,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_heartbeat_random_order": {
            "name": "test_heartbeat_random_order",
            "location": 113,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_queued_heartbeat": {
            "name": "test_queued_heartbeat",
            "location": 129,
            "return": [],
            "arguments": {
                "aw_client": [],
                "queued_bucket": []
            }
        },
        "test_list_buckets": {
            "name": "test_list_buckets",
            "location": 163,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_insert_event": {
            "name": "test_insert_event",
            "location": 168,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_insert_events": {
            "name": "test_insert_events",
            "location": 175,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_get_event_single": {
            "name": "test_get_event_single",
            "location": 187,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_get_events_interval": {
            "name": "test_get_events_interval",
            "location": 204,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "_round_td": {
            "name": "_round_td",
            "location": 239,
            "return": [
                "timedelta"
            ],
            "arguments": {
                "td": [
                    "timedelta"
                ]
            }
        },
        "_round_durations": {
            "name": "_round_durations",
            "location": 243,
            "return": [],
            "arguments": {
                "e": [
                    "Event"
                ]
            }
        },
        "test_store_many_events": {
            "name": "test_store_many_events",
            "location": 248,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_midnight": {
            "name": "test_midnight",
            "location": 260,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        },
        "test_midnight_heartbeats": {
            "name": "test_midnight_heartbeats",
            "location": 270,
            "return": [],
            "arguments": {
                "aw_client": [],
                "bucket": []
            }
        }
    },
    "aw-server-master/tests/test_server.py": {
        "bucket": {
            "name": "bucket",
            "location": 8,
            "return": [],
            "arguments": {
                "flask_client": []
            }
        },
        "test_info": {
            "name": "test_info",
            "location": 23,
            "return": [],
            "arguments": {
                "flask_client": []
            }
        },
        "test_buckets": {
            "name": "test_buckets",
            "location": 29,
            "return": [],
            "arguments": {
                "flask_client": [],
                "bucket": [],
                "benchmark": []
            }
        },
        "test_heartbeats": {
            "name": "test_heartbeats",
            "location": 38,
            "return": [],
            "arguments": {
                "flask_client": [],
                "bucket": [],
                "benchmark": []
            }
        },
        "test_get_events": {
            "name": "test_get_events",
            "location": 52,
            "return": [],
            "arguments": {
                "flask_client": [],
                "bucket": [],
                "benchmark": []
            }
        },
        "test_buckets.list_buckets": {
            "name": "list_buckets",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_heartbeats.heartbeat": {
            "name": "heartbeat",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_get_events.get_events": {
            "name": "get_events",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    }
}
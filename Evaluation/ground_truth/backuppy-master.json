{
    "backuppy-master/backuppy/args.py": {
        "subparser": {
            "name": "subparser",
            "location": 19,
            "return": [
                "Callable"
            ],
            "arguments": {
                "command": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "entrypoint": [
                    "Callable"
                ]
            }
        },
        "add_name_arg": {
            "name": "add_name_arg",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_preserve_scratch_arg": {
            "name": "add_preserve_scratch_arg",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 60,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "description": [
                    "str"
                ],
                "arg_list": [
                    "Optional[List[str]]"
                ]
            }
        },
        "CustomHelpFormatter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "prog": []
            }
        },
        "subparser.decorator": {
            "name": "decorator",
            "location": 26,
            "return": [],
            "arguments": {
                "add_args": []
            }
        },
        "subparser.decorator.wrapper": {
            "name": "wrapper",
            "location": 27,
            "return": [],
            "arguments": {
                "subparser": []
            }
        }
    },
    "backuppy-master/backuppy/blob.py": {
        "apply_diff": {
            "name": "apply_diff",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "orig_file": [
                    "IOIter"
                ],
                "diff_file": [
                    "IOIter"
                ],
                "new_file": [
                    "IOIter"
                ]
            }
        },
        "compute_diff": {
            "name": "compute_diff",
            "location": 62,
            "return": [
                "IOIter"
            ],
            "arguments": {
                "orig_file": [
                    "IOIter"
                ],
                "new_file": [
                    "IOIter"
                ],
                "diff_file": [
                    "IOIter"
                ],
                "discard_diff_percentage": [
                    "Optional[float]"
                ]
            }
        }
    },
    "backuppy-master/backuppy/config.py": {
        "setup_config": {
            "name": "setup_config",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "str"
                ]
            }
        }
    },
    "backuppy-master/backuppy/crypto.py": {
        "identity": {
            "name": "identity",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bytes"
                ]
            }
        },
        "compress_and_encrypt": {
            "name": "compress_and_encrypt",
            "location": 38,
            "return": [
                "bytes"
            ],
            "arguments": {
                "input_file": [
                    "IOIter"
                ],
                "output_file": [
                    "IOIter"
                ],
                "key_pair": [
                    "Optional[bytes]"
                ],
                "options": [
                    "OptionsDict"
                ]
            }
        },
        "decrypt_and_unpack": {
            "name": "decrypt_and_unpack",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "input_file": [
                    "IOIter"
                ],
                "output_file": [
                    "IOIter"
                ],
                "key_pair": [
                    "Optional[bytes]"
                ],
                "options": [
                    "OptionsDict"
                ]
            }
        },
        "generate_key_pair": {
            "name": "generate_key_pair",
            "location": 135,
            "return": [
                "bytes"
            ],
            "arguments": {
                "options": [
                    "OptionsDict"
                ]
            }
        },
        "encrypt_and_sign": {
            "name": "encrypt_and_sign",
            "location": 141,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "private_key_filename": [
                    "str"
                ]
            }
        },
        "decrypt_and_verify": {
            "name": "decrypt_and_verify",
            "location": 164,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "private_key_filename": [
                    "str"
                ]
            }
        },
        "_get_key": {
            "name": "_get_key",
            "location": 192,
            "return": [
                "RSAPrivateKey"
            ],
            "arguments": {
                "private_key_filename": [
                    "str"
                ]
            }
        },
        "compress_and_encrypt.last_block": {
            "name": "last_block",
            "location": 61,
            "return": [
                "Generator[(Tuple[(bytes, bool)], None, None)]"
            ],
            "arguments": {}
        }
    },
    "backuppy-master/backuppy/exceptions.py": {},
    "backuppy-master/backuppy/io.py": {
        "compute_sha": {
            "name": "compute_sha",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "file1": [
                    "IOIter"
                ]
            }
        },
        "io_copy": {
            "name": "io_copy",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "file1": [
                    "IOIter"
                ],
                "file2": [
                    "IOIter"
                ]
            }
        },
        "IOIter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ],
                "block_size": [
                    "int"
                ],
                "check_mtime": [
                    "bool"
                ]
            }
        },
        "IOIter.__enter__": {
            "name": "__enter__",
            "location": 43,
            "return": [
                "'IOIter'"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.__exit__": {
            "name": "__exit__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "IOIter.reader": {
            "name": "reader",
            "location": 69,
            "return": [
                "Generator[(bytes, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.writer": {
            "name": "writer",
            "location": 93,
            "return": [
                "Generator[(None, bytes, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.sha": {
            "name": "sha",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter._check_mtime": {
            "name": "_check_mtime",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.uid": {
            "name": "uid",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.gid": {
            "name": "gid",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.mode": {
            "name": "mode",
            "location": 161,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.mtime": {
            "name": "mtime",
            "location": 168,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.size": {
            "name": "size",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOIter.fd": {
            "name": "fd",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "backuppy-master/backuppy/manifest.py": {
        "get_manifest_keypair": {
            "name": "get_manifest_keypair",
            "location": 360,
            "return": [
                "bytes"
            ],
            "arguments": {
                "manifest_filename": [
                    "str"
                ],
                "private_key_filename": [
                    "str"
                ],
                "load": [
                    "Callable[([str, IOIter], IOIter)]"
                ]
            }
        },
        "unlock_manifest": {
            "name": "unlock_manifest",
            "location": 374,
            "return": [
                "Manifest"
            ],
            "arguments": {
                "manifest_filename": [
                    "str"
                ],
                "private_key_filename": [
                    "str"
                ],
                "load": [
                    "Callable[([str, IOIter], IOIter)]"
                ],
                "options": [
                    "OptionsDict"
                ]
            }
        },
        "lock_manifest": {
            "name": "lock_manifest",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "manifest": [
                    "Manifest"
                ],
                "private_key_filename": [
                    "str"
                ],
                "save": [
                    "Callable[([IOIter, str], None)]"
                ],
                "load": [
                    "Callable[([str, IOIter], IOIter)]"
                ],
                "options": [
                    "OptionsDict"
                ]
            }
        },
        "ManifestEntry.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abs_file_name": [
                    "str"
                ],
                "sha": [
                    "str"
                ],
                "base_sha": [
                    "Optional[str]"
                ],
                "uid": [
                    "int"
                ],
                "gid": [
                    "int"
                ],
                "mode": [
                    "int"
                ],
                "key_pair": [
                    "bytes"
                ],
                "base_key_pair": [
                    "Optional[bytes]"
                ],
                "commit_timestamp": [
                    "int"
                ]
            }
        },
        "ManifestEntry.from_row": {
            "name": "from_row",
            "location": 55,
            "return": [
                "'ManifestEntry'"
            ],
            "arguments": {
                "cls": [],
                "row": [
                    "sqlite3.Row"
                ]
            }
        },
        "Manifest.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "manifest_filename": [
                    "str"
                ]
            }
        },
        "Manifest.get_entry": {
            "name": "get_entry",
            "location": 98,
            "return": [
                "Optional[ManifestEntry]"
            ],
            "arguments": {
                "self": [],
                "abs_file_name": [
                    "str"
                ],
                "timestamp": [
                    "Optional[int]"
                ]
            }
        },
        "Manifest.get_entries_by_sha": {
            "name": "get_entries_by_sha",
            "location": 126,
            "return": [
                "List[ManifestEntry]"
            ],
            "arguments": {
                "self": [],
                "sha": [
                    "str"
                ]
            }
        },
        "Manifest.search": {
            "name": "search",
            "location": 134,
            "return": [
                "List[QueryResponse]"
            ],
            "arguments": {
                "self": [],
                "like": [
                    "str"
                ],
                "before_timestamp": [
                    "Optional[int]"
                ],
                "after_timestamp": [
                    "Optional[int]"
                ],
                "file_limit": [
                    "Optional[int]"
                ],
                "history_limit": [
                    "Optional[int]"
                ]
            }
        },
        "Manifest.insert_or_update": {
            "name": "insert_or_update",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "ManifestEntry"
                ]
            }
        },
        "Manifest.delete": {
            "name": "delete",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abs_file_name": [
                    "str"
                ]
            }
        },
        "Manifest.files": {
            "name": "files",
            "location": 247,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "Optional[int]"
                ]
            }
        },
        "Manifest.find_duplicate_entries": {
            "name": "find_duplicate_entries",
            "location": 265,
            "return": [
                "List[ManifestEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manifest.find_shas_with_multiple_key_pairs": {
            "name": "find_shas_with_multiple_key_pairs",
            "location": 279,
            "return": [
                "List[ManifestEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manifest.delete_entry": {
            "name": "delete_entry",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [
                    "ManifestEntry"
                ]
            }
        },
        "Manifest._commit": {
            "name": "_commit",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Manifest._create_manifest_tables": {
            "name": "_create_manifest_tables",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Manifest._ensure_correct_key_pairs": {
            "name": "_ensure_correct_key_pairs",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "sha": [
                    "str"
                ],
                "key_pair": [
                    "bytes"
                ]
            }
        }
    },
    "backuppy-master/backuppy/options.py": {},
    "backuppy-master/backuppy/run.py": {
        "_log_fns_for_level": {
            "name": "_log_fns_for_level",
            "location": 17,
            "return": [],
            "arguments": {
                "log_level": []
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level_str": [
                    "str"
                ],
                "log_file": [
                    "Optional[str]"
                ],
                "log_file_level_str": [
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "arg_list": [
                    "Optional[List[str]]"
                ]
            }
        },
        "_log_fns_for_level._log_fn": {
            "name": "_log_fn",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "_log_fns_for_level._root_log_fn": {
            "name": "_root_log_fn",
            "location": 22,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "backuppy-master/backuppy/util.py": {
        "ask_for_confirmation": {
            "name": "ask_for_confirmation",
            "location": 23,
            "return": [],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "compile_exclusions": {
            "name": "compile_exclusions",
            "location": 44,
            "return": [
                "List[Pattern]"
            ],
            "arguments": {
                "exclusions": [
                    "List[str]"
                ]
            }
        },
        "file_walker": {
            "name": "file_walker",
            "location": 49,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {
                "path": [],
                "on_error": [
                    "Optional[Callable]"
                ],
                "exclusions": [
                    "Optional[List[Pattern]]"
                ]
            }
        },
        "format_sha": {
            "name": "format_sha",
            "location": 96,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "sha": [
                    "str"
                ],
                "sha_length": [
                    "int"
                ]
            }
        },
        "format_time": {
            "name": "format_time",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "timestamp": [
                    "int"
                ]
            }
        },
        "get_scratch_dir": {
            "name": "get_scratch_dir",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "regex_search_list": {
            "name": "regex_search_list",
            "location": 108,
            "return": [],
            "arguments": {
                "needle": [
                    "str"
                ],
                "haystack": [
                    "List[str]"
                ]
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ]
            }
        },
        "path_join": {
            "name": "path_join",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "sha_to_path": {
            "name": "sha_to_path",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "sha": [
                    "str"
                ]
            }
        }
    },
    "backuppy-master/backuppy/__init__.py": {},
    "backuppy-master/backuppy/cli/backup.py": {
        "_scan_directory": {
            "name": "_scan_directory",
            "location": 21,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "abs_base_path": [
                    "str"
                ],
                "backup_store": [
                    "BackupStore"
                ],
                "exclusions": [
                    "List[Pattern]"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "add_backup_parser": {
            "name": "add_backup_parser",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "subparser": []
            }
        }
    },
    "backuppy-master/backuppy/cli/get.py": {
        "_get": {
            "name": "_get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "key_pair": [
                    "bytes"
                ],
                "backup_store": [
                    "BackupStore"
                ],
                "action": []
            }
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "add_get_parser": {
            "name": "add_get_parser",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "subparser": []
            }
        }
    },
    "backuppy-master/backuppy/cli/list.py": {
        "_split_root_prefix": {
            "name": "_split_root_prefix",
            "location": 23,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "abs_file_name": [
                    "str"
                ],
                "backup_name": [
                    "str"
                ]
            }
        },
        "_print_summary": {
            "name": "_print_summary",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "backup_name": [
                    "str"
                ],
                "search_results": [
                    "List[QueryResponse]"
                ],
                "deleted_only": [
                    "bool"
                ],
                "changed_only": [
                    "bool"
                ]
            }
        },
        "_print_details": {
            "name": "_print_details",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "backup_name": [
                    "str"
                ],
                "search_results": [
                    "List[QueryResponse]"
                ],
                "deleted_only": [
                    "bool"
                ],
                "changed_only": [
                    "bool"
                ],
                "sha_length": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "add_list_parser": {
            "name": "add_list_parser",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "subparser": []
            }
        }
    },
    "backuppy-master/backuppy/cli/put.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "add_put_parser": {
            "name": "add_put_parser",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "subparser": []
            }
        }
    },
    "backuppy-master/backuppy/cli/restore.py": {
        "_parse_destination": {
            "name": "_parse_destination",
            "location": 27,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "dest_input": [
                    "Optional[str]"
                ],
                "backup_name": [
                    "str"
                ]
            }
        },
        "_confirm_restore": {
            "name": "_confirm_restore",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "files_to_restore": [
                    "List[ManifestEntry]"
                ],
                "destination": [
                    "str"
                ],
                "destination_str": [
                    "str"
                ]
            }
        },
        "_restore": {
            "name": "_restore",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "files_to_restore": [
                    "List[ManifestEntry]"
                ],
                "destination": [
                    "str"
                ],
                "backup_store": [
                    "BackupStore"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "add_restore_parser": {
            "name": "add_restore_parser",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "subparser": []
            }
        }
    },
    "backuppy-master/backuppy/cli/verify.py": {
        "_check_entry": {
            "name": "_check_entry",
            "location": 23,
            "return": [],
            "arguments": {
                "entry": [
                    "ManifestEntry"
                ],
                "backup_store": [
                    "BackupStore"
                ]
            }
        },
        "_fix_duplicate_entries": {
            "name": "_fix_duplicate_entries",
            "location": 34,
            "return": [],
            "arguments": {
                "backup_store": [
                    "BackupStore"
                ]
            }
        },
        "_fix_shas_with_multiple_key_pairs": {
            "name": "_fix_shas_with_multiple_key_pairs",
            "location": 70,
            "return": [],
            "arguments": {
                "backup_store": [
                    "BackupStore"
                ]
            }
        },
        "_verify": {
            "name": "_verify",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "entries": [
                    "List[ManifestEntry]"
                ],
                "backup_store": [
                    "BackupStore"
                ],
                "show_all": [
                    "bool"
                ]
            }
        },
        "_fast_verify": {
            "name": "_fast_verify",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "backup_store": [
                    "BackupStore"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "add_verify_parser": {
            "name": "add_verify_parser",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "subparser": []
            }
        }
    },
    "backuppy-master/backuppy/cli/__init__.py": {},
    "backuppy-master/backuppy/stores/backup_store.py": {
        "_cleanup_and_exit": {
            "name": "_cleanup_and_exit",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int"
                ],
                "frame": [
                    "FrameType"
                ],
                "dry_run": [
                    "bool"
                ],
                "preserve_scratch": [
                    "bool"
                ]
            }
        },
        "_register_unlocked_store": {
            "name": "_register_unlocked_store",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "BackupStore"
                ],
                "dry_run": [
                    "bool"
                ],
                "preserve_scratch": [
                    "bool"
                ]
            }
        },
        "_unregister_store": {
            "name": "_unregister_store",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BackupStore.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backup_name": [
                    "str"
                ]
            }
        },
        "BackupStore.unlock": {
            "name": "unlock",
            "location": 68,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackupStore.save_if_new": {
            "name": "save_if_new",
            "location": 116,
            "return": [
                "Optional[ManifestEntry]"
            ],
            "arguments": {
                "self": [],
                "abs_file_name": [
                    "str"
                ]
            }
        },
        "BackupStore.restore_entry": {
            "name": "restore_entry",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "ManifestEntry"
                ],
                "orig_file": [
                    "IOIter"
                ],
                "diff_file": [
                    "IOIter"
                ],
                "restore_file": [
                    "IOIter"
                ]
            }
        },
        "BackupStore.save": {
            "name": "save",
            "location": 192,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "IOIter"
                ],
                "dest": [
                    "str"
                ],
                "key_pair": [
                    "bytes"
                ]
            }
        },
        "BackupStore.load": {
            "name": "load",
            "location": 212,
            "return": [
                "IOIter"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ],
                "dest": [
                    "IOIter"
                ],
                "key_pair": [
                    "Optional[bytes]"
                ]
            }
        },
        "BackupStore.rotate_manifests": {
            "name": "rotate_manifests",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackupStore.do_cleanup": {
            "name": "do_cleanup",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ],
                "preserve_scratch": [
                    "bool"
                ]
            }
        },
        "BackupStore._write_copy": {
            "name": "_write_copy",
            "location": 271,
            "return": [
                "ManifestEntry"
            ],
            "arguments": {
                "self": [],
                "abs_file_name": [
                    "str"
                ],
                "new_sha": [
                    "str"
                ],
                "file_obj": [
                    "IOIter"
                ],
                "force_copy": [
                    "bool"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "BackupStore._write_diff": {
            "name": "_write_diff",
            "location": 304,
            "return": [
                "ManifestEntry"
            ],
            "arguments": {
                "self": [],
                "abs_file_name": [
                    "str"
                ],
                "new_sha": [
                    "str"
                ],
                "curr_entry": [
                    "ManifestEntry"
                ],
                "file_obj": [
                    "IOIter"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "BackupStore._find_existing_entry_data": {
            "name": "_find_existing_entry_data",
            "location": 365,
            "return": [
                "Optional[Tuple[(bytes, Optional[str], Optional[bytes])]]"
            ],
            "arguments": {
                "self": [],
                "sha": [
                    "str"
                ]
            }
        },
        "BackupStore._save": {
            "name": "_save",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "IOIter"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "BackupStore._load": {
            "name": "_load",
            "location": 382,
            "return": [
                "IOIter"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "tmpfile": [
                    "IOIter"
                ]
            }
        },
        "BackupStore._query": {
            "name": "_query",
            "location": 386,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "BackupStore._delete": {
            "name": "_delete",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BackupStore.manifest": {
            "name": "manifest",
            "location": 394,
            "return": [
                "Manifest"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackupStore.options": {
            "name": "options",
            "location": 403,
            "return": [
                "OptionsDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "backuppy-master/backuppy/stores/local_backup_store.py": {
        "LocalBackupStore.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "backup_name": []
            }
        },
        "LocalBackupStore._save": {
            "name": "_save",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "IOIter"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "LocalBackupStore._load": {
            "name": "_load",
            "location": 41,
            "return": [
                "IOIter"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "output_file": [
                    "IOIter"
                ]
            }
        },
        "LocalBackupStore._query": {
            "name": "_query",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "LocalBackupStore._delete": {
            "name": "_delete",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "LocalBackupStore._rel_name": {
            "name": "_rel_name",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "backuppy-master/backuppy/stores/s3_backup_store.py": {
        "S3BackupStore.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "backup_name": []
            }
        },
        "S3BackupStore._save": {
            "name": "_save",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "IOIter"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "S3BackupStore._load": {
            "name": "_load",
            "location": 55,
            "return": [
                "IOIter"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "output_file": [
                    "IOIter"
                ]
            }
        },
        "S3BackupStore._query": {
            "name": "_query",
            "location": 64,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "S3BackupStore._delete": {
            "name": "_delete",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "S3BackupStore._compute_object_storage_class": {
            "name": "_compute_object_storage_class",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "IOIter"
                ]
            }
        }
    },
    "backuppy-master/backuppy/stores/__init__.py": {
        "get_backup_store": {
            "name": "get_backup_store",
            "location": 14,
            "return": [
                "BackupStore"
            ],
            "arguments": {
                "backup_name": []
            }
        }
    },
    "backuppy-master/itests/backup_restore_test.py": {
        "init": {
            "name": "init",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "clear_restore": {
            "name": "clear_restore",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "get_backup_dir_state": {
            "name": "get_backup_dir_state",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "assert_backup_store_correct": {
            "name": "assert_backup_store_correct",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "assert_restore_correct": {
            "name": "assert_restore_correct",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "check_backup_restore": {
            "name": "check_backup_restore",
            "location": 112,
            "return": [],
            "arguments": {
                "dry_run": []
            }
        },
        "initial_backup_files": {
            "name": "initial_backup_files",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "unchanged": {
            "name": "unchanged",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "contents_changed": {
            "name": "contents_changed",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "file_deleted": {
            "name": "file_deleted",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "file_restored": {
            "name": "file_restored",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "mode_changed": {
            "name": "mode_changed",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "contents_changed_after_delete": {
            "name": "contents_changed_after_delete",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "new_file_same_contents": {
            "name": "new_file_same_contents",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "old_file_same_contents": {
            "name": "old_file_same_contents",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "test_initial_backup": {
            "name": "test_initial_backup",
            "location": 220,
            "return": [],
            "arguments": {
                "dry_run": [],
                "fixture": []
            }
        }
    },
    "backuppy-master/itests/blob_test.py": {
        "generate_data": {
            "name": "generate_data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_validate_diffs": {
            "name": "test_validate_diffs",
            "location": 37,
            "return": [],
            "arguments": {
                "orig_data": [],
                "new_data": []
            }
        }
    },
    "backuppy-master/itests/conftest.py": {
        "compute_sha": {
            "name": "compute_sha",
            "location": 34,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "get_latest_manifest": {
            "name": "get_latest_manifest",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "initialize_session": {
            "name": "initialize_session",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "clean_up_temp_directories": {
            "name": "clean_up_temp_directories",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "make_trace_func": {
            "name": "make_trace_func",
            "location": 106,
            "return": [],
            "arguments": {
                "search_string": [],
                "side_effect": []
            }
        },
        "itest_setup": {
            "name": "itest_setup",
            "location": 135,
            "return": [],
            "arguments": {
                "test_file_history": []
            }
        },
        "_TestFileData.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "contents": [],
                "data_dir_index": [],
                "mode": []
            }
        },
        "_TestFileData.write": {
            "name": "write",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestFileData.backup_path": {
            "name": "backup_path",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestFileData.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_TestFileData.__ne__": {
            "name": "__ne__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "make_trace_func.trace_func": {
            "name": "trace_func",
            "location": 107,
            "return": [],
            "arguments": {
                "frame": [],
                "event": [],
                "arg": []
            }
        }
    },
    "backuppy-master/itests/file_guarantees_test.py": {
        "abort": {
            "name": "abort",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "make_modify_file_func": {
            "name": "make_modify_file_func",
            "location": 34,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "setup_manifest": {
            "name": "setup_manifest",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_f1_crash_file_save": {
            "name": "test_f1_crash_file_save",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_f2_lbs_atomicity_1": {
            "name": "test_f2_lbs_atomicity_1",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_f2_lbs_atomicity_2": {
            "name": "test_f2_lbs_atomicity_2",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_f3_file_changed_while_saving": {
            "name": "test_f3_file_changed_while_saving",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "make_modify_file_func.modify_file": {
            "name": "modify_file",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "backuppy-master/itests/manifest_guarantees_test.py": {
        "abort": {
            "name": "abort",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "assert_manifest_correct": {
            "name": "assert_manifest_correct",
            "location": 35,
            "return": [],
            "arguments": {
                "before": []
            }
        },
        "setup_manifest": {
            "name": "setup_manifest",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_m1_crash_before_save": {
            "name": "test_m1_crash_before_save",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_m1_crash_after_save": {
            "name": "test_m1_crash_after_save",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_m2_crash_before_file_save": {
            "name": "test_m2_crash_before_file_save",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_m2_crash_after_file_save": {
            "name": "test_m2_crash_after_file_save",
            "location": 101,
            "return": [],
            "arguments": {}
        }
    },
    "backuppy-master/itests/shutdown_test.py": {
        "test_shutdown_works": {
            "name": "test_shutdown_works",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_shutdown_works_with_error": {
            "name": "test_shutdown_works_with_error",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "DummyBackupStore._query": {
            "name": "_query",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "DummyBackupStore.options": {
            "name": "options",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "backuppy-master/itests/verify_test.py": {
        "use_encryption": {
            "name": "use_encryption",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "run_backup": {
            "name": "run_backup",
            "location": 39,
            "return": [],
            "arguments": {
                "use_encryption": []
            }
        },
        "test_verify": {
            "name": "test_verify",
            "location": 52,
            "return": [],
            "arguments": {
                "fast": [],
                "capsys": []
            }
        },
        "test_verify_corrupted": {
            "name": "test_verify_corrupted",
            "location": 59,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_base_sha_corrupted": {
            "name": "test_base_sha_corrupted",
            "location": 84,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_duplicate_entries": {
            "name": "test_duplicate_entries",
            "location": 120,
            "return": [],
            "arguments": {
                "both_bad": [],
                "capsys": []
            }
        },
        "test_shas_with_bad_key_pairs": {
            "name": "test_shas_with_bad_key_pairs",
            "location": 176,
            "return": [],
            "arguments": {
                "both_bad": [],
                "capsys": []
            }
        }
    },
    "backuppy-master/itests/__init__.py": {},
    "backuppy-master/tests/blob_test.py": {
        "sha_fn": {
            "name": "sha_fn",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_apply_parse_error_1": {
            "name": "test_apply_parse_error_1",
            "location": 16,
            "return": [],
            "arguments": {
                "mock_open_streams": []
            }
        },
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 24,
            "return": [],
            "arguments": {
                "mock_open_streams": [],
                "sha_fn": []
            }
        },
        "test_compute_diff_with_large_diff": {
            "name": "test_compute_diff_with_large_diff",
            "location": 39,
            "return": [],
            "arguments": {
                "mock_open_streams": []
            }
        }
    },
    "backuppy-master/tests/conftest.py": {
        "setup_logging_for_tests": {
            "name": "setup_logging_for_tests",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_config_file": {
            "name": "test_config_file",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "mock_open_streams": {
            "name": "mock_open_streams",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "count_matching_log_lines": {
            "name": "count_matching_log_lines",
            "location": 66,
            "return": [],
            "arguments": {
                "msg": [],
                "caplog": []
            }
        },
        "mock_open_streams.MockBytesIO.fileno": {
            "name": "fileno",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "backuppy-master/tests/crypto_test.py": {
        "test_compress_and_encrypt_no_compression_no_encryption": {
            "name": "test_compress_and_encrypt_no_compression_no_encryption",
            "location": 29,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_compress_and_encrypt_no_compression": {
            "name": "test_compress_and_encrypt_no_compression",
            "location": 43,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_compress_and_encrypt_no_encryption": {
            "name": "test_compress_and_encrypt_no_encryption",
            "location": 62,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_compress_and_encrypt": {
            "name": "test_compress_and_encrypt",
            "location": 78,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_decrypt_and_unpack_no_compression_no_encryption": {
            "name": "test_decrypt_and_unpack_no_compression_no_encryption",
            "location": 98,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_decrypt_and_unpack_no_compression": {
            "name": "test_decrypt_and_unpack_no_compression",
            "location": 106,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_decrypt_and_unpack_no_encryption": {
            "name": "test_decrypt_and_unpack_no_encryption",
            "location": 127,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_decrypt_and_unpack": {
            "name": "test_decrypt_and_unpack",
            "location": 143,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_decrypt_and_unpack_bad_signature": {
            "name": "test_decrypt_and_unpack_bad_signature",
            "location": 166,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_open_streams": []
            }
        },
        "test_rsa": {
            "name": "test_rsa",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_rsa_bad_signature": {
            "name": "test_rsa_bad_signature",
            "location": 193,
            "return": [],
            "arguments": {}
        }
    },
    "backuppy-master/tests/io_test.py": {
        "mock_io_iter": {
            "name": "mock_io_iter",
            "location": 18,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "foo_contents": {
            "name": "foo_contents",
            "location": 25,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "test_tmp_io_iter": {
            "name": "test_tmp_io_iter",
            "location": 32,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "test_context_manager": {
            "name": "test_context_manager",
            "location": 46,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_context_manager_twice": {
            "name": "test_context_manager_twice",
            "location": 52,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_reader_not_open": {
            "name": "test_reader_not_open",
            "location": 57,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_reader_contents": {
            "name": "test_reader_contents",
            "location": 62,
            "return": [],
            "arguments": {
                "mock_io_iter": [],
                "foo_contents": []
            }
        },
        "test_writer_not_open": {
            "name": "test_writer_not_open",
            "location": 74,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_writer": {
            "name": "test_writer",
            "location": 79,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_writer_tmp_file": {
            "name": "test_writer_tmp_file",
            "location": 94,
            "return": [],
            "arguments": {
                "block_size": []
            }
        },
        "test_no_sha_computed": {
            "name": "test_no_sha_computed",
            "location": 105,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_check_mtime_no_mtime": {
            "name": "test_check_mtime_no_mtime",
            "location": 110,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_check_mtime": {
            "name": "test_check_mtime",
            "location": 115,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_stat": {
            "name": "test_stat",
            "location": 123,
            "return": [],
            "arguments": {
                "mock_io_iter": []
            }
        },
        "test_compute_sha": {
            "name": "test_compute_sha",
            "location": 131,
            "return": [],
            "arguments": {
                "mock_io_iter": [],
                "foo_contents": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 138,
            "return": [],
            "arguments": {
                "mock_io_iter": [],
                "foo_contents": []
            }
        }
    },
    "backuppy-master/tests/manifest_test.py": {
        "mock_time": {
            "name": "mock_time",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "mock_stat": {
            "name": "mock_stat",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "mock_manifest": {
            "name": "mock_manifest",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_create_manifest_object": {
            "name": "test_create_manifest_object",
            "location": 53,
            "return": [],
            "arguments": {
                "existing_tables": []
            }
        },
        "test_corrupted_manifest": {
            "name": "test_corrupted_manifest",
            "location": 65,
            "return": [],
            "arguments": {
                "existing_tables": []
            }
        },
        "test_get_entry_no_entry": {
            "name": "test_get_entry_no_entry",
            "location": 74,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_get_entry_no_diff": {
            "name": "test_get_entry_no_diff",
            "location": 79,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "commit_timestamp": []
            }
        },
        "test_get_entry_with_diff": {
            "name": "test_get_entry_with_diff",
            "location": 88,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_get_entry_file_deleted": {
            "name": "test_get_entry_file_deleted",
            "location": 98,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_get_entries_by_sha": {
            "name": "test_get_entries_by_sha",
            "location": 107,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 112,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_search_with_query": {
            "name": "test_search_with_query",
            "location": 120,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_search_time_window": {
            "name": "test_search_time_window",
            "location": 127,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_search_file_limit": {
            "name": "test_search_file_limit",
            "location": 137,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "limit": []
            }
        },
        "test_search_history_limit": {
            "name": "test_search_history_limit",
            "location": 145,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "limit": []
            }
        },
        "test_insert_new_file": {
            "name": "test_insert_new_file",
            "location": 153,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "mock_stat": [],
                "base_sha": [],
                "base_key_pair": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 179,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "mock_stat": [],
                "base_sha": [],
                "base_key_pair": []
            }
        },
        "test_insert_duplicate": {
            "name": "test_insert_duplicate",
            "location": 204,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "mock_stat": []
            }
        },
        "test_insert_diff_key_pair_for_sha": {
            "name": "test_insert_diff_key_pair_for_sha",
            "location": 228,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "mock_stat": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 243,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_delete_unknown": {
            "name": "test_delete_unknown",
            "location": 266,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "caplog": []
            }
        },
        "test_tracked_files": {
            "name": "test_tracked_files",
            "location": 281,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "timestamp": []
            }
        },
        "test_find_duplicate_entries": {
            "name": "test_find_duplicate_entries",
            "location": 288,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_find_shas_with_multiple_key_pairs": {
            "name": "test_find_shas_with_multiple_key_pairs",
            "location": 301,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_delete_entry": {
            "name": "test_delete_entry",
            "location": 312,
            "return": [],
            "arguments": {
                "mock_manifest": []
            }
        },
        "test_unlock_manifest": {
            "name": "test_unlock_manifest",
            "location": 326,
            "return": [],
            "arguments": {
                "use_encryption": []
            }
        },
        "test_lock_manifest": {
            "name": "test_lock_manifest",
            "location": 343,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "use_encryption": []
            }
        },
        "test_lock_manifest_error": {
            "name": "test_lock_manifest_error",
            "location": 360,
            "return": [],
            "arguments": {
                "mock_manifest": [],
                "caplog": []
            }
        }
    },
    "backuppy-master/tests/util_test.py": {
        "test_file_walker": {
            "name": "test_file_walker",
            "location": 9,
            "return": [],
            "arguments": {
                "fs": []
            }
        }
    },
    "backuppy-master/tests/__init__.py": {},
    "backuppy-master/tests/cli/backup_test.py": {
        "test_scan_directory": {
            "name": "test_scan_directory",
            "location": 14,
            "return": [],
            "arguments": {
                "file_walker": [],
                "dry_run": []
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 34,
            "return": [],
            "arguments": {
                "dry_run": []
            }
        },
        "test_scan_directory.save_if_new": {
            "name": "save_if_new",
            "location": 18,
            "return": [],
            "arguments": {
                "filename": [],
                "dry_run": []
            }
        }
    },
    "backuppy-master/tests/cli/get_test.py": {
        "args": {
            "name": "args",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 26,
            "return": [],
            "arguments": {
                "action": [],
                "filename": []
            }
        },
        "test_main_two_args": {
            "name": "test_main_two_args",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_main_get_sha": {
            "name": "test_main_get_sha",
            "location": 51,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_main_no_entries": {
            "name": "test_main_no_entries",
            "location": 61,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_main_get_manifest": {
            "name": "test_main_get_manifest",
            "location": 69,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "backuppy-master/tests/cli/list_test.py": {
        "mock_search_results": {
            "name": "mock_search_results",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_split_root_prefix": {
            "name": "test_split_root_prefix",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_split_root_prefix_not_present": {
            "name": "test_split_root_prefix_not_present",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_print_summary": {
            "name": "test_print_summary",
            "location": 52,
            "return": [],
            "arguments": {
                "deleted": [],
                "changed": [],
                "mock_search_results": [],
                "capsys": []
            }
        },
        "test_print_details": {
            "name": "test_print_details",
            "location": 68,
            "return": [],
            "arguments": {
                "mock_search_results": [],
                "capsys": []
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 82,
            "return": [],
            "arguments": {
                "after": [],
                "before": [],
                "details": []
            }
        }
    },
    "backuppy-master/tests/cli/put_test.py": {
        "args": {
            "name": "args",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_main_file": {
            "name": "test_main_file",
            "location": 20,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_main_manifest_manifest_error": {
            "name": "test_main_manifest_manifest_error",
            "location": 29,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_main_manifest": {
            "name": "test_main_manifest",
            "location": 42,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "backuppy-master/tests/cli/restore_test.py": {
        "mock_manifest_entry_list": {
            "name": "mock_manifest_entry_list",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_parse_destination": {
            "name": "test_parse_destination",
            "location": 27,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "test_confirm_restore": {
            "name": "test_confirm_restore",
            "location": 43,
            "return": [],
            "arguments": {
                "retval": [],
                "mock_manifest_entry_list": [],
                "capsys": []
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 59,
            "return": [],
            "arguments": {
                "retval": [],
                "sha": [],
                "entries": []
            }
        }
    },
    "backuppy-master/tests/cli/verify_test.py": {
        "mock_manifest_entry_list": {
            "name": "mock_manifest_entry_list",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_fix_duplicate_entries_ok": {
            "name": "test_fix_duplicate_entries_ok",
            "location": 28,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_fix_duplicate_entries": {
            "name": "test_fix_duplicate_entries",
            "location": 36,
            "return": [],
            "arguments": {
                "has_good_entry": [],
                "path_exists": [],
                "mock_manifest_entry_list": [],
                "capsys": []
            }
        },
        "test_fix_shas_with_multiple_key_pairs_ok": {
            "name": "test_fix_shas_with_multiple_key_pairs_ok",
            "location": 56,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_fix_shas_with_multiple_key_pairs": {
            "name": "test_fix_shas_with_multiple_key_pairs",
            "location": 64,
            "return": [],
            "arguments": {
                "has_good_entry": [],
                "mock_manifest_entry_list": [],
                "capsys": []
            }
        },
        "test_verify_ok": {
            "name": "test_verify_ok",
            "location": 79,
            "return": [],
            "arguments": {
                "mock_manifest_entry_list": [],
                "capsys": []
            }
        },
        "test_verify_bad_sha": {
            "name": "test_verify_bad_sha",
            "location": 86,
            "return": [],
            "arguments": {
                "mock_manifest_entry_list": []
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 99,
            "return": [],
            "arguments": {
                "sha": [],
                "entries": [],
                "fast": []
            }
        }
    },
    "backuppy-master/tests/stores/backup_store_test.py": {
        "mock_save_load": {
            "name": "mock_save_load",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "current_entry": {
            "name": "current_entry",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "preexisting_entry": {
            "name": "preexisting_entry",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "backup_store": {
            "name": "backup_store",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 80,
            "return": [],
            "arguments": {
                "backup_store": []
            }
        },
        "test_unlock": {
            "name": "test_unlock",
            "location": 85,
            "return": [],
            "arguments": {
                "fs": [],
                "backup_store": [],
                "manifest_exists": []
            }
        },
        "test_open_locked_manifest": {
            "name": "test_open_locked_manifest",
            "location": 105,
            "return": [],
            "arguments": {
                "backup_store": []
            }
        },
        "test_restore_entry": {
            "name": "test_restore_entry",
            "location": 165,
            "return": [],
            "arguments": {
                "backup_store": [],
                "base_sha": [],
                "current_entry": []
            }
        },
        "test_save": {
            "name": "test_save",
            "location": 181,
            "return": [],
            "arguments": {
                "backup_store": []
            }
        },
        "test_load": {
            "name": "test_load",
            "location": 195,
            "return": [],
            "arguments": {
                "backup_store": []
            }
        },
        "test_rotate_manifests": {
            "name": "test_rotate_manifests",
            "location": 206,
            "return": [],
            "arguments": {
                "backup_store": [],
                "max_manifest_versions": []
            }
        },
        "test_do_cleanup": {
            "name": "test_do_cleanup",
            "location": 225,
            "return": [],
            "arguments": {
                "fs": [],
                "backup_store": [],
                "manifest": [],
                "dry_run": [],
                "preserve_scratch": []
            }
        },
        "test_write_copy": {
            "name": "test_write_copy",
            "location": 243,
            "return": [],
            "arguments": {
                "backup_store": [],
                "dry_run": [],
                "caplog": []
            }
        },
        "test_write_copy_preexisting_sha": {
            "name": "test_write_copy_preexisting_sha",
            "location": 254,
            "return": [],
            "arguments": {
                "backup_store": [],
                "force_copy": [],
                "preexisting_entry": []
            }
        },
        "test_write_diff": {
            "name": "test_write_diff",
            "location": 273,
            "return": [],
            "arguments": {
                "backup_store": [],
                "current_entry": [],
                "base_sha": [],
                "dry_run": [],
                "caplog": []
            }
        },
        "test_write_diff_too_big": {
            "name": "test_write_diff_too_big",
            "location": 297,
            "return": [],
            "arguments": {
                "backup_store": [],
                "current_entry": [],
                "dry_run": [],
                "caplog": []
            }
        },
        "test_write_diff_preexisting_sha": {
            "name": "test_write_diff_preexisting_sha",
            "location": 317,
            "return": [],
            "arguments": {
                "backup_store": [],
                "current_entry": [],
                "preexisting_entry": []
            }
        },
        "test_cleanup_and_exit_no_store": {
            "name": "test_cleanup_and_exit_no_store",
            "location": 335,
            "return": [],
            "arguments": {
                "backup_store": []
            }
        },
        "test_cleanup_and_exit": {
            "name": "test_cleanup_and_exit",
            "location": 348,
            "return": [],
            "arguments": {
                "backup_store": [],
                "side_effect": []
            }
        },
        "test_register_unlocked_store": {
            "name": "test_register_unlocked_store",
            "location": 361,
            "return": [],
            "arguments": {
                "backup_store": []
            }
        },
        "test_unregister_store": {
            "name": "test_unregister_store",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "TestSaveIfNew.setup_store": {
            "name": "setup_store",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "backup_store": []
            }
        },
        "TestSaveIfNew.test_force_save_if_new": {
            "name": "test_force_save_if_new",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "backup_store": [],
                "dry_run": []
            }
        },
        "TestSaveIfNew.test_save_if_new_with_new_file": {
            "name": "test_save_if_new_with_new_file",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "backup_store": [],
                "dry_run": []
            }
        },
        "TestSaveIfNew.test_save_if_new_sha_different": {
            "name": "test_save_if_new_sha_different",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "backup_store": [],
                "dry_run": []
            }
        },
        "TestSaveIfNew.test_save_if_new_sha_equal": {
            "name": "test_save_if_new_sha_equal",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "backup_store": [],
                "uid_changed": [],
                "dry_run": []
            }
        },
        "TestSaveIfNew.test_save_if_new_skip_diff": {
            "name": "test_save_if_new_skip_diff",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "backup_store": [],
                "dry_run": []
            }
        }
    },
    "backuppy-master/tests/stores/conftest.py": {
        "fake_filesystem": {
            "name": "fake_filesystem",
            "location": 7,
            "return": [],
            "arguments": {
                "fs": []
            }
        }
    },
    "backuppy-master/tests/stores/local_backup_store_test.py": {
        "mock_backup_store": {
            "name": "mock_backup_store",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "fake_output_func": {
            "name": "fake_output_func",
            "location": 22,
            "return": [],
            "arguments": {
                "content": [],
                "tmp": [],
                "loc": [],
                "key": [],
                "iv": []
            }
        },
        "test_save": {
            "name": "test_save",
            "location": 27,
            "return": [],
            "arguments": {
                "caplog": [],
                "mock_backup_store": []
            }
        },
        "test_load": {
            "name": "test_load",
            "location": 39,
            "return": [],
            "arguments": {
                "mock_backup_store": []
            }
        },
        "test_query": {
            "name": "test_query",
            "location": 46,
            "return": [],
            "arguments": {
                "mock_backup_store": []
            }
        },
        "test_query_2": {
            "name": "test_query_2",
            "location": 50,
            "return": [],
            "arguments": {
                "mock_backup_store": []
            }
        },
        "test_query_no_results": {
            "name": "test_query_no_results",
            "location": 54,
            "return": [],
            "arguments": {
                "mock_backup_store": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 58,
            "return": [],
            "arguments": {
                "mock_backup_store": []
            }
        }
    },
    "backuppy-master/tests/stores/s3_backup_store_test.py": {
        "s3_client": {
            "name": "s3_client",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "mock_backup_store": {
            "name": "mock_backup_store",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_save": {
            "name": "test_save",
            "location": 46,
            "return": [],
            "arguments": {
                "s3_client": [],
                "mock_backup_store": []
            }
        },
        "test_load": {
            "name": "test_load",
            "location": 60,
            "return": [],
            "arguments": {
                "s3_client": [],
                "mock_backup_store": []
            }
        },
        "test_query": {
            "name": "test_query",
            "location": 68,
            "return": [],
            "arguments": {
                "s3_client": [],
                "mock_backup_store": []
            }
        },
        "test_query_2": {
            "name": "test_query_2",
            "location": 72,
            "return": [],
            "arguments": {
                "s3_client": [],
                "mock_backup_store": []
            }
        },
        "test_query_no_results": {
            "name": "test_query_no_results",
            "location": 76,
            "return": [],
            "arguments": {
                "s3_client": [],
                "mock_backup_store": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 80,
            "return": [],
            "arguments": {
                "s3_client": [],
                "mock_backup_store": []
            }
        },
        "test_compute_object_storage_class_size_1": {
            "name": "test_compute_object_storage_class_size_1",
            "location": 91,
            "return": [],
            "arguments": {
                "mock_backup_store": [],
                "sc": []
            }
        },
        "test_compute_object_storage_class_size_2": {
            "name": "test_compute_object_storage_class_size_2",
            "location": 100,
            "return": [],
            "arguments": {
                "mock_backup_store": [],
                "size": []
            }
        },
        "test_compute_object_storage_class_size_3": {
            "name": "test_compute_object_storage_class_size_3",
            "location": 111,
            "return": [],
            "arguments": {
                "mock_backup_store": [],
                "size": []
            }
        },
        "test_compute_object_storage_class_size_4": {
            "name": "test_compute_object_storage_class_size_4",
            "location": 122,
            "return": [],
            "arguments": {
                "mock_backup_store": [],
                "size": []
            }
        },
        "test_compute_object_storage_class_size_5": {
            "name": "test_compute_object_storage_class_size_5",
            "location": 133,
            "return": [],
            "arguments": {
                "mock_backup_store": [],
                "size": []
            }
        },
        "test_compute_object_storage_manifest": {
            "name": "test_compute_object_storage_manifest",
            "location": 143,
            "return": [],
            "arguments": {
                "mock_backup_store": []
            }
        }
    },
    "backuppy-master/tests/stores/__init__.py": {}
}
{
    "basilisp-main/docs/conf.py": {},
    "basilisp-main/src/basilisp/cli.py": {
        "eval_file": {
            "name": "eval_file",
            "location": 29,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "ctx": [
                    "compiler.CompilerContext"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "eval_stream": {
            "name": "eval_stream",
            "location": 38,
            "return": [],
            "arguments": {
                "stream": [],
                "ctx": [
                    "compiler.CompilerContext"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "eval_str": {
            "name": "eval_str",
            "location": 47,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "ctx": [
                    "compiler.CompilerContext"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "eof": [
                    "Any"
                ]
            }
        },
        "bootstrap_repl": {
            "name": "bootstrap_repl",
            "location": 56,
            "return": [
                "types.ModuleType"
            ],
            "arguments": {
                "ctx": [
                    "compiler.CompilerContext"
                ],
                "which_ns": [
                    "str"
                ]
            }
        },
        "_to_bool": {
            "name": "_to_bool",
            "location": 64,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "v": [
                    "Optional[str]"
                ]
            }
        },
        "_set_envvar_action": {
            "name": "_set_envvar_action",
            "location": 76,
            "return": [
                "Type[argparse.Action]"
            ],
            "arguments": {
                "var": [
                    "str"
                ],
                "parent": [
                    "Type[argparse.Action]"
                ]
            }
        },
        "_add_compiler_arg_group": {
            "name": "_add_compiler_arg_group",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "_add_debug_arg_group": {
            "name": "_add_debug_arg_group",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "_subcommand": {
            "name": "_subcommand",
            "location": 227,
            "return": [],
            "arguments": {
                "subcommand": [
                    "str"
                ]
            }
        },
        "repl": {
            "name": "repl",
            "location": 247,
            "return": [],
            "arguments": {
                "_": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_add_repl_subcommand": {
            "name": "_add_repl_subcommand",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 343,
            "return": [],
            "arguments": {
                "_": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_add_run_subcommand": {
            "name": "_add_run_subcommand",
            "location": 393,
            "return": [],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 411,
            "return": [],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_add_test_subcommand": {
            "name": "_add_test_subcommand",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 432,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "_add_version_subcommand": {
            "name": "_add_version_subcommand",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "invoke_cli": {
            "name": "invoke_cli",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "_subcommand._wrap_add_subcommand": {
            "name": "_wrap_add_subcommand",
            "location": 234,
            "return": [],
            "arguments": {
                "f": [
                    "Callable[([argparse.ArgumentParser], None)]"
                ]
            }
        },
        "_set_envvar_action.EnvVarSetterAction.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "namespace": [
                    "argparse.Namespace"
                ],
                "values": [
                    "Any"
                ],
                "option_string": [
                    "str"
                ]
            }
        },
        "_subcommand._wrap_add_subcommand._wrapped_subcommand": {
            "name": "_wrapped_subcommand",
            "location": 235,
            "return": [],
            "arguments": {
                "subparsers": [
                    "'argparse._SubParsersAction'"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/importer.py": {
        "_r_long": {
            "name": "_r_long",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "int_bytes": [
                    "bytes"
                ]
            }
        },
        "_w_long": {
            "name": "_w_long",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "_basilisp_bytecode": {
            "name": "_basilisp_bytecode",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "mtime": [
                    "int"
                ],
                "source_size": [
                    "int"
                ],
                "code": [
                    "List[types.CodeType]"
                ]
            }
        },
        "_get_basilisp_bytecode": {
            "name": "_get_basilisp_bytecode",
            "location": 50,
            "return": [
                "List[types.CodeType]"
            ],
            "arguments": {
                "fullname": [
                    "str"
                ],
                "mtime": [
                    "int"
                ],
                "source_size": [
                    "int"
                ],
                "cache_data": [
                    "bytes"
                ]
            }
        },
        "_cache_from_source": {
            "name": "_cache_from_source",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_is_package": {
            "name": "_is_package",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_is_namespace_package": {
            "name": "_is_namespace_package",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "hook_imports": {
            "name": "hook_imports",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "BasilispImporter.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasilispImporter.find_spec": {
            "name": "find_spec",
            "location": 133,
            "return": [
                "Optional[ModuleSpec]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "path": [],
                "target": [
                    "types.ModuleType"
                ]
            }
        },
        "BasilispImporter.invalidate_caches": {
            "name": "invalidate_caches",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasilispImporter._cache_bytecode": {
            "name": "_cache_bytecode",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "source_path": [],
                "cache_path": [],
                "data": []
            }
        },
        "BasilispImporter.path_stats": {
            "name": "path_stats",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BasilispImporter.get_data": {
            "name": "get_data",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BasilispImporter.set_data": {
            "name": "set_data",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "data": []
            }
        },
        "BasilispImporter.get_filename": {
            "name": "get_filename",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "BasilispImporter.create_module": {
            "name": "create_module",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "spec": [
                    "ModuleSpec"
                ]
            }
        },
        "BasilispImporter._exec_cached_module": {
            "name": "_exec_cached_module",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "loader_state": [
                    "Mapping[(str, str)]"
                ],
                "path_stats": [
                    "Mapping[(str, int)]"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "BasilispImporter._exec_module": {
            "name": "_exec_module",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "loader_state": [
                    "Mapping[(str, str)]"
                ],
                "path_stats": [
                    "Mapping[(str, int)]"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "BasilispImporter.exec_module": {
            "name": "exec_module",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        }
    },
    "basilisp-main/src/basilisp/logconfig.py": {
        "get_level": {
            "name": "get_level",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_handler": {
            "name": "get_handler",
            "location": 10,
            "return": [
                "logging.Handler"
            ],
            "arguments": {
                "level": [
                    "str"
                ],
                "fmt": [
                    "str"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/main.py": {
        "init": {
            "name": "init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "opts": [
                    "Optional[CompilerOpts]"
                ]
            }
        },
        "bootstrap": {
            "name": "bootstrap",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "str"
                ],
                "opts": [
                    "Optional[CompilerOpts]"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/prompt.py": {
        "get_prompter": {
            "name": "get_prompter",
            "location": 165,
            "return": [
                "Prompter"
            ],
            "arguments": {}
        },
        "Prompter.prompt": {
            "name": "prompt",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "Prompter.print": {
            "name": "print",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "REPLCompleter.get_completions": {
            "name": "get_completions",
            "location": 48,
            "return": [
                "Iterable[Completion]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "Document"
                ],
                "_": [
                    "CompleteEvent"
                ]
            }
        },
        "PromptToolkitPrompter.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PromptToolkitPrompter._get_key_bindings": {
            "name": "_get_key_bindings",
            "location": 78,
            "return": [
                "KeyBindings"
            ],
            "arguments": {}
        },
        "PromptToolkitPrompter.prompt": {
            "name": "prompt",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "PromptToolkitPrompter._get_key_bindings._": {
            "name": "_",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "KeyPressEvent"
                ]
            }
        },
        "StyledPromptToolkitPrompter.print": {
            "name": "print",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/util.py": {
        "timed": {
            "name": "timed",
            "location": 8,
            "return": [],
            "arguments": {
                "f": [
                    "Optional[Callable[([int], None)]]"
                ]
            }
        },
        "partition": {
            "name": "partition",
            "location": 69,
            "return": [],
            "arguments": {
                "coll": [],
                "n": [
                    "int"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 83,
            "return": [],
            "arguments": {
                "coll": [],
                "n": [
                    "int"
                ]
            }
        },
        "Maybe.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "Optional[T]"
                ]
            }
        },
        "Maybe.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Maybe.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Maybe.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Maybe.or_else": {
            "name": "or_else",
            "location": 40,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "else_fn": [
                    "Callable[([], T)]"
                ]
            }
        },
        "Maybe.or_else_get": {
            "name": "or_else_get",
            "location": 45,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "else_v": [
                    "T"
                ]
            }
        },
        "Maybe.or_else_raise": {
            "name": "or_else_raise",
            "location": 50,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "raise_fn": [
                    "Callable[([], Exception)]"
                ]
            }
        },
        "Maybe.map": {
            "name": "map",
            "location": 55,
            "return": [
                "'Maybe[U]'"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], U)]"
                ]
            }
        },
        "Maybe.value": {
            "name": "value",
            "location": 61,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.is_present": {
            "name": "is_present",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/_pyast.py": {
        "Module.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "arguments.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/__init__.py": {},
    "basilisp-main/src/basilisp/__version__.py": {},
    "basilisp-main/src/basilisp/contrib/__init__.py": {},
    "basilisp-main/src/basilisp/contrib/pytest/testrunner.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 25,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "pytest_collect_file": {
            "name": "pytest_collect_file",
            "location": 29,
            "return": [],
            "arguments": {
                "parent": [],
                "path": []
            }
        },
        "TestFailuresInfo.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "data": [
                    "lmap.PersistentMap"
                ]
            }
        },
        "TestFailuresInfo.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFailuresInfo.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFailuresInfo.data": {
            "name": "data",
            "location": 55,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFailuresInfo.message": {
            "name": "message",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixtureManager.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "fixtures": [
                    "Iterable[FixtureFunction]"
                ]
            }
        },
        "FixtureManager._run_fixture": {
            "name": "_run_fixture",
            "location": 79,
            "return": [
                "Optional[Iterator[None]]"
            ],
            "arguments": {
                "fixture": [
                    "FixtureFunction"
                ]
            }
        },
        "FixtureManager._setup_fixtures": {
            "name": "_setup_fixtures",
            "location": 93,
            "return": [
                "Iterable[FixtureTeardown]"
            ],
            "arguments": {
                "cls": [],
                "fixtures": [
                    "Iterable[FixtureFunction]"
                ]
            }
        },
        "FixtureManager._teardown_fixtures": {
            "name": "_teardown_fixtures",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "teardowns": [
                    "Iterable[FixtureTeardown]"
                ]
            }
        },
        "FixtureManager.setup": {
            "name": "setup",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixtureManager.teardown": {
            "name": "teardown",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispFile.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fspath": [
                    "py.path.local"
                ],
                "parent": [],
                "config": [
                    "Optional[Config]"
                ],
                "session": [
                    "Optional['Session']"
                ],
                "nodeid": [
                    "Optional[str]"
                ]
            }
        },
        "BasilispFile._collected_fixtures": {
            "name": "_collected_fixtures",
            "location": 151,
            "return": [
                "Tuple[(Iterable[FixtureFunction], Iterable[FixtureFunction])]"
            ],
            "arguments": {
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "BasilispFile._collected_tests": {
            "name": "_collected_tests",
            "location": 163,
            "return": [
                "Iterable[runtime.Var]"
            ],
            "arguments": {
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "BasilispFile.setup": {
            "name": "setup",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispFile.teardown": {
            "name": "teardown",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispFile.collect": {
            "name": "collect",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasilispTestItem.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "parent": [
                    "BasilispFile"
                ],
                "run_test": [
                    "TestFunction"
                ],
                "namespace": [
                    "runtime.Namespace"
                ],
                "filename": [
                    "str"
                ],
                "fixture_manager": [
                    "FixtureManager"
                ]
            }
        },
        "BasilispTestItem.from_parent": {
            "name": "from_parent",
            "location": 255,
            "return": [],
            "arguments": {
                "cls": [],
                "parent": [
                    "'BasilispFile'"
                ],
                "name": [
                    "str"
                ],
                "run_test": [
                    "TestFunction"
                ],
                "namespace": [
                    "runtime.Namespace"
                ],
                "filename": [
                    "str"
                ],
                "fixture_manager": [
                    "FixtureManager"
                ]
            }
        },
        "BasilispTestItem.setup": {
            "name": "setup",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispTestItem.teardown": {
            "name": "teardown",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispTestItem.runtest": {
            "name": "runtest",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasilispTestItem.repr_failure": {
            "name": "repr_failure",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "excinfo": [],
                "style": []
            }
        },
        "BasilispTestItem.reportinfo": {
            "name": "reportinfo",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasilispTestItem._error_msg": {
            "name": "_error_msg",
            "location": 318,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Exception"
                ],
                "line": [
                    "Optional[int]"
                ]
            }
        },
        "BasilispTestItem._failure_msg": {
            "name": "_failure_msg",
            "location": 324,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "details": [
                    "lmap.PersistentMap"
                ]
            }
        },
        "BasilispFile._collected_tests._test_num": {
            "name": "_test_num",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "var": [
                    "runtime.Var"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/contrib/pytest/__init__.py": {},
    "basilisp-main/src/basilisp/contrib/sphinx/autodoc.py": {
        "_get_doc": {
            "name": "_get_doc",
            "location": 54,
            "return": [
                "Optional[List[List[str]]]"
            ],
            "arguments": {
                "reference": [
                    "IReference"
                ]
            }
        },
        "NamespaceDocumenter.can_document_member": {
            "name": "can_document_member",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "member": [
                    "Any"
                ],
                "membername": [
                    "str"
                ],
                "isattr": [
                    "bool"
                ],
                "parent": [
                    "Any"
                ]
            }
        },
        "NamespaceDocumenter.parse_name": {
            "name": "parse_name",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceDocumenter.resolve_name": {
            "name": "resolve_name",
            "location": 101,
            "return": [
                "Tuple[(str, List[str])]"
            ],
            "arguments": {
                "self": [],
                "modname": [
                    "str"
                ],
                "parents": [
                    "Any"
                ],
                "path": [
                    "str"
                ],
                "base": [
                    "Any"
                ]
            }
        },
        "NamespaceDocumenter.import_object": {
            "name": "import_object",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "raiseerror": [
                    "bool"
                ]
            }
        },
        "NamespaceDocumenter.get_doc": {
            "name": "get_doc",
            "location": 124,
            "return": [
                "Optional[List[List[str]]]"
            ],
            "arguments": {
                "self": [],
                "ignore": [
                    "int"
                ]
            }
        },
        "NamespaceDocumenter.get_object_members": {
            "name": "get_object_members",
            "location": 128,
            "return": [
                "Tuple[(bool, ObjectMembers)]"
            ],
            "arguments": {
                "self": [],
                "want_all": [
                    "bool"
                ]
            }
        },
        "NamespaceDocumenter.filter_members": {
            "name": "filter_members",
            "location": 146,
            "return": [
                "List[Tuple[(str, Any, bool)]]"
            ],
            "arguments": {
                "self": [],
                "members": [
                    "ObjectMembers"
                ],
                "want_all": [
                    "bool"
                ]
            }
        },
        "NamespaceDocumenter.sort_members": {
            "name": "sort_members",
            "location": 173,
            "return": [
                "List[Tuple[('Documenter', bool)]]"
            ],
            "arguments": {
                "self": [],
                "documenters": [
                    "List[Tuple[('Documenter', bool)]]"
                ],
                "order": [
                    "str"
                ]
            }
        },
        "NamespaceDocumenter.format_name": {
            "name": "format_name",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceDocumenter.format_signature": {
            "name": "format_signature",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarDocumenter.can_document_member": {
            "name": "can_document_member",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "member": [
                    "Any"
                ],
                "membername": [
                    "str"
                ],
                "isattr": [
                    "bool"
                ],
                "parent": [
                    "Any"
                ]
            }
        },
        "VarDocumenter.parse_name": {
            "name": "parse_name",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarDocumenter.resolve_name": {
            "name": "resolve_name",
            "location": 237,
            "return": [
                "Tuple[(str, List[str])]"
            ],
            "arguments": {
                "self": [],
                "modname": [
                    "str"
                ],
                "parents": [
                    "Any"
                ],
                "path": [
                    "str"
                ],
                "base": [
                    "Any"
                ]
            }
        },
        "VarDocumenter.import_object": {
            "name": "import_object",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "raiseerror": [
                    "bool"
                ]
            }
        },
        "VarDocumenter.get_sourcename": {
            "name": "get_sourcename",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarDocumenter.add_directive_header": {
            "name": "add_directive_header",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "VarDocumenter.get_doc": {
            "name": "get_doc",
            "location": 282,
            "return": [
                "Optional[List[List[str]]]"
            ],
            "arguments": {
                "self": [],
                "ignore": [
                    "int"
                ]
            }
        },
        "VarDocumenter.format_name": {
            "name": "format_name",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarDocumenter.format_signature": {
            "name": "format_signature",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarFnDocumenter.can_document_member": {
            "name": "can_document_member",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "member": [
                    "Any"
                ],
                "membername": [
                    "str"
                ],
                "isattr": [
                    "bool"
                ],
                "parent": [
                    "Any"
                ]
            }
        },
        "VarFnDocumenter.add_directive_header": {
            "name": "add_directive_header",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "VarFnDocumenter.format_name": {
            "name": "format_name",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarFnDocumenter.format_signature": {
            "name": "format_signature",
            "location": 323,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtocolDocumenter.can_document_member": {
            "name": "can_document_member",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "member": [
                    "Any"
                ],
                "membername": [
                    "str"
                ],
                "isattr": [
                    "bool"
                ],
                "parent": [
                    "Any"
                ]
            }
        },
        "ProtocolDocumenter.get_object_members": {
            "name": "get_object_members",
            "location": 362,
            "return": [
                "Tuple[(bool, ObjectMembers)]"
            ],
            "arguments": {
                "self": [],
                "want_all": [
                    "bool"
                ]
            }
        },
        "ProtocolDocumenter.filter_members": {
            "name": "filter_members",
            "location": 379,
            "return": [
                "List[Tuple[(str, Any, bool)]]"
            ],
            "arguments": {
                "self": [],
                "members": [
                    "ObjectMembers"
                ],
                "want_all": [
                    "bool"
                ]
            }
        },
        "TypeDocumenter.can_document_member": {
            "name": "can_document_member",
            "location": 408,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "member": [
                    "Any"
                ],
                "membername": [
                    "str"
                ],
                "isattr": [
                    "bool"
                ],
                "parent": [
                    "Any"
                ]
            }
        },
        "TypeDocumenter.get_object_members": {
            "name": "get_object_members",
            "location": 417,
            "return": [
                "Tuple[(bool, ObjectMembers)]"
            ],
            "arguments": {
                "self": [],
                "want_all": [
                    "bool"
                ]
            }
        },
        "RecordDocumenter.can_document_member": {
            "name": "can_document_member",
            "location": 425,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "member": [
                    "Any"
                ],
                "membername": [
                    "str"
                ],
                "isattr": [
                    "bool"
                ],
                "parent": [
                    "Any"
                ]
            }
        },
        "VarFnDocumenter.format_signature._format_sig": {
            "name": "_format_sig",
            "location": 329,
            "return": [
                "str"
            ],
            "arguments": {
                "arglist": [
                    "IPersistentVector"
                ]
            }
        },
        "NamespaceDocumenter.sort_members._line_num": {
            "name": "_line_num",
            "location": 190,
            "return": [
                "int"
            ],
            "arguments": {
                "e": [
                    "Tuple[('Documenter', bool)]"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/contrib/sphinx/domain.py": {
        "visit_lispparameterlist": {
            "name": "visit_lispparameterlist",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [
                    "HTMLTranslator"
                ],
                "node": [
                    "Element"
                ]
            }
        },
        "depart_lispparameterlist": {
            "name": "depart_lispparameterlist",
            "location": 61,
            "return": [],
            "arguments": {
                "_": [
                    "HTMLTranslator"
                ],
                "__": [
                    "Element"
                ]
            }
        },
        "visit_lispparameter": {
            "name": "visit_lispparameter",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [
                    "HTMLTranslator"
                ],
                "_": [
                    "Element"
                ]
            }
        },
        "depart_lispparameter": {
            "name": "depart_lispparameter",
            "location": 69,
            "return": [],
            "arguments": {
                "_": [
                    "HTMLTranslator"
                ],
                "__": [
                    "Element"
                ]
            }
        },
        "BasilispCurrentNamespace.run": {
            "name": "run",
            "location": 81,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispNamespace.run": {
            "name": "run",
            "location": 103,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispObject.handle_signature": {
            "name": "handle_signature",
            "location": 134,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ],
                "signode": [
                    "desc_signature"
                ]
            }
        },
        "BasilispObject.add_target_and_index": {
            "name": "add_target_and_index",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_cls": [
                    "Tuple[(str, str)]"
                ],
                "sig": [
                    "str"
                ],
                "signode": [
                    "desc_signature"
                ]
            }
        },
        "BasilispVar.get_signature_prefix": {
            "name": "get_signature_prefix",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "BasilispVar.handle_signature": {
            "name": "handle_signature",
            "location": 175,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ],
                "signode": [
                    "desc_signature"
                ]
            }
        },
        "BasilispVar.get_index_text": {
            "name": "get_index_text",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modname": [
                    "str"
                ],
                "name": [
                    "Tuple[(str, str)]"
                ]
            }
        },
        "BasilispFunctionLike.handle_signature": {
            "name": "handle_signature",
            "location": 200,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ],
                "signode": [
                    "desc_signature"
                ]
            }
        },
        "BasilispSpecialForm.get_signature_prefix": {
            "name": "get_signature_prefix",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "BasilispSpecialForm.add_target_and_index": {
            "name": "add_target_and_index",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_cls": [
                    "Tuple[(str, str)]"
                ],
                "sig": [
                    "str"
                ],
                "signode": [
                    "desc_signature"
                ]
            }
        },
        "BasilispSpecialForm.get_index_text": {
            "name": "get_index_text",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modname": [
                    "str"
                ],
                "name": [
                    "Tuple[(str, str)]"
                ]
            }
        },
        "BasilispFunction.get_signature_prefix": {
            "name": "get_signature_prefix",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "BasilispFunction.get_index_text": {
            "name": "get_index_text",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modname": [
                    "str"
                ],
                "name": [
                    "Tuple[(str, str)]"
                ]
            }
        },
        "BasilispClassLike.get_signature_prefix": {
            "name": "get_signature_prefix",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "BasilispClassLike.handle_signature": {
            "name": "handle_signature",
            "location": 278,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ],
                "signode": [
                    "desc_signature"
                ]
            }
        },
        "BasilispClassLike.get_index_text": {
            "name": "get_index_text",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modname": [
                    "str"
                ],
                "name": [
                    "Tuple[(str, str)]"
                ]
            }
        },
        "BasilispNamespaceIndex.generate": {
            "name": "generate",
            "location": 296,
            "return": [
                "Tuple[(List[Tuple[(str, List[IndexEntry])]], bool)]"
            ],
            "arguments": {
                "self": [],
                "docnames": [
                    "Iterable[str]"
                ]
            }
        },
        "BasilispXRefRole.process_link": {
            "name": "process_link",
            "location": 372,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "BuildEnvironment"
                ],
                "refnode": [
                    "Element"
                ],
                "has_explicit_title": [
                    "bool"
                ],
                "title": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "BasilispDomain.forms": {
            "name": "forms",
            "location": 455,
            "return": [
                "Dict[(str, FormEntry)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispDomain.note_form": {
            "name": "note_form",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "node_id": [
                    "str"
                ]
            }
        },
        "BasilispDomain.vars": {
            "name": "vars",
            "location": 467,
            "return": [
                "Dict[(str, VarEntry)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispDomain.note_var": {
            "name": "note_var",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "objtype": [
                    "str"
                ],
                "node_id": [
                    "str"
                ],
                "aliased": [
                    "bool"
                ]
            }
        },
        "BasilispDomain.namespaces": {
            "name": "namespaces",
            "location": 481,
            "return": [
                "Dict[(str, NamespaceEntry)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasilispDomain.note_namespace": {
            "name": "note_namespace",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "node_id": [
                    "str"
                ],
                "synopsis": [
                    "str"
                ],
                "platform": [
                    "str"
                ],
                "deprecated": [
                    "bool"
                ]
            }
        },
        "BasilispDomain.clear_doc": {
            "name": "clear_doc",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docname": [
                    "str"
                ]
            }
        },
        "BasilispDomain.merge_domaindata": {
            "name": "merge_domaindata",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docnames": [
                    "List[str]"
                ],
                "otherdata": [
                    "Dict"
                ]
            }
        },
        "BasilispDomain.resolve_xref": {
            "name": "resolve_xref",
            "location": 518,
            "return": [
                "Optional[Element]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "BuildEnvironment"
                ],
                "fromdocname": [
                    "str"
                ],
                "builder": [
                    "Builder"
                ],
                "typ": [
                    "str"
                ],
                "target": [
                    "str"
                ],
                "node": [
                    "pending_xref"
                ],
                "contnode": [
                    "Element"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/contrib/sphinx/__init__.py": {
        "setup": {
            "name": "setup",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Sphinx"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/atom.py": {
        "Atom.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "T"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ],
                "validator": [
                    "Optional[RefValidator]"
                ]
            }
        },
        "Atom._compare_and_set": {
            "name": "_compare_and_set",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "T"
                ],
                "new": [
                    "T"
                ]
            }
        },
        "Atom.compare_and_set": {
            "name": "compare_and_set",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "T"
                ],
                "new": [
                    "T"
                ]
            }
        },
        "Atom.deref": {
            "name": "deref",
            "location": 49,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.reset": {
            "name": "reset",
            "location": 54,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "T"
                ]
            }
        },
        "Atom.swap": {
            "name": "swap",
            "location": 63,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[(..., T)]"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/delay.py": {
        "Delay.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([], T)]"
                ]
            }
        },
        "Delay.__deref": {
            "name": "__deref",
            "location": 33,
            "return": [
                "_DelayState"
            ],
            "arguments": {
                "state": [
                    "_DelayState"
                ]
            }
        },
        "Delay.deref": {
            "name": "deref",
            "location": 39,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delay.is_realized": {
            "name": "is_realized",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/exception.py": {
        "ExceptionInfo.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionInfo.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/futures.py": {
        "Future.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.cancel": {
            "name": "cancel",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Future.cancelled": {
            "name": "cancelled",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Future.deref": {
            "name": "deref",
            "location": 33,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ],
                "timeout_val": [
                    "Optional[T]"
                ]
            }
        },
        "Future.done": {
            "name": "done",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Future.is_realized": {
            "name": "is_realized",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Future.result": {
            "name": "result",
            "location": 50,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ]
            }
        },
        "ProcessPoolExecutor.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "max_workers": [
                    "Optional[int]"
                ]
            }
        },
        "ProcessPoolExecutor.submit": {
            "name": "submit",
            "location": 64,
            "return": [
                "'Future[T]'"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable[(..., T)]"
                ]
            }
        },
        "ThreadPoolExecutor.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "max_workers": [
                    "Optional[int]"
                ],
                "thread_name_prefix": [
                    "str"
                ]
            }
        },
        "ThreadPoolExecutor.submit": {
            "name": "submit",
            "location": 79,
            "return": [
                "'Future[T]'"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable[(..., T)]"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/interfaces.py": {
        "seq_equals": {
            "name": "seq_equals",
            "location": 425,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [],
                "s2": []
            }
        },
        "IDeref.deref": {
            "name": "deref",
            "location": 28,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBlockingDeref.deref": {
            "name": "deref",
            "location": 37,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ],
                "timeout_val": [
                    "Optional[T]"
                ]
            }
        },
        "IExceptionInfo.data": {
            "name": "data",
            "location": 70,
            "return": [
                "'IPersistentMap'"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMapEntry.key": {
            "name": "key",
            "location": 83,
            "return": [
                "K"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMapEntry.value": {
            "name": "value",
            "location": 88,
            "return": [
                "V"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMeta.meta": {
            "name": "meta",
            "location": 97,
            "return": [
                "Optional['IPersistentMap']"
            ],
            "arguments": {
                "self": []
            }
        },
        "IWithMeta.with_meta": {
            "name": "with_meta",
            "location": 108,
            "return": [
                "T_with_meta"
            ],
            "arguments": {
                "self": [
                    "T_with_meta"
                ],
                "meta": [
                    "'Optional[IPersistentMap]'"
                ]
            }
        },
        "IReference.alter_meta": {
            "name": "alter_meta",
            "location": 119,
            "return": [
                "Optional['IPersistentMap']"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[(..., Optional['IPersistentMap'])]"
                ]
            }
        },
        "IReference.reset_meta": {
            "name": "reset_meta",
            "location": 125,
            "return": [
                "Optional['IPersistentMap']"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional['IPersistentMap']"
                ]
            }
        },
        "IRef.add_watch": {
            "name": "add_watch",
            "location": 140,
            "return": [
                "'IReference'"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "RefWatchKey"
                ],
                "wf": [
                    "RefWatcher"
                ]
            }
        },
        "IRef.remove_watch": {
            "name": "remove_watch",
            "location": 144,
            "return": [
                "'IReference'"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "RefWatchKey"
                ]
            }
        },
        "IRef.get_validator": {
            "name": "get_validator",
            "location": 148,
            "return": [
                "Optional[RefValidator]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IRef.set_validator": {
            "name": "set_validator",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vf": [
                    "Optional[RefValidator]"
                ]
            }
        },
        "IReversible.rseq": {
            "name": "rseq",
            "location": 166,
            "return": [
                "'ISeq[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ISeqable.seq": {
            "name": "seq",
            "location": 179,
            "return": [
                "'Optional[ISeq[T]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ILookup.val_at": {
            "name": "val_at",
            "location": 196,
            "return": [
                "Optional[V]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ],
                "default": [
                    "Optional[V]"
                ]
            }
        },
        "IPersistentCollection.cons": {
            "name": "cons",
            "location": 207,
            "return": [
                "'T_pcoll'"
            ],
            "arguments": {
                "self": [
                    "T_pcoll"
                ]
            }
        },
        "IPersistentCollection.empty": {
            "name": "empty",
            "location": 212,
            "return": [
                "'IPersistentCollection[T]'"
            ],
            "arguments": {}
        },
        "IAssociative.assoc": {
            "name": "assoc",
            "location": 223,
            "return": [
                "T_assoc"
            ],
            "arguments": {
                "self": [
                    "T_assoc"
                ]
            }
        },
        "IAssociative.contains": {
            "name": "contains",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "IAssociative.entry": {
            "name": "entry",
            "location": 231,
            "return": [
                "Optional[IMapEntry[(K, V)]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "IPersistentStack.peek": {
            "name": "peek",
            "location": 242,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPersistentStack.pop": {
            "name": "pop",
            "location": 246,
            "return": [
                "T_stack"
            ],
            "arguments": {
                "self": [
                    "T_stack"
                ]
            }
        },
        "IPersistentMap.cons": {
            "name": "cons",
            "location": 261,
            "return": [
                "T_map"
            ],
            "arguments": {
                "self": [
                    "T_map"
                ]
            }
        },
        "IPersistentMap.dissoc": {
            "name": "dissoc",
            "location": 267,
            "return": [
                "T_map"
            ],
            "arguments": {
                "self": [
                    "T_map"
                ]
            }
        },
        "IPersistentSet.disj": {
            "name": "disj",
            "location": 278,
            "return": [
                "T_set"
            ],
            "arguments": {
                "self": [
                    "T_set"
                ]
            }
        },
        "IPersistentVector.assoc": {
            "name": "assoc",
            "location": 296,
            "return": [
                "T_vec"
            ],
            "arguments": {
                "self": [
                    "T_vec"
                ]
            }
        },
        "IPersistentVector.cons": {
            "name": "cons",
            "location": 300,
            "return": [
                "T_vec"
            ],
            "arguments": {
                "self": [
                    "T_vec"
                ]
            }
        },
        "IPersistentVector.seq": {
            "name": "seq",
            "location": 304,
            "return": [
                "'Optional[ISeq[T]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "IEvolveableCollection.to_transient": {
            "name": "to_transient",
            "location": 313,
            "return": [
                "T_tcoll"
            ],
            "arguments": {
                "self": []
            }
        },
        "ITransientCollection.cons_transient": {
            "name": "cons_transient",
            "location": 321,
            "return": [
                "'T_tcoll'"
            ],
            "arguments": {
                "self": [
                    "T_tcoll"
                ]
            }
        },
        "ITransientCollection.to_persistent": {
            "name": "to_persistent",
            "location": 325,
            "return": [
                "'IPersistentCollection[T]'"
            ],
            "arguments": {
                "self": [
                    "T_tcoll"
                ]
            }
        },
        "ITransientAssociative.assoc_transient": {
            "name": "assoc_transient",
            "location": 336,
            "return": [
                "T_tassoc"
            ],
            "arguments": {
                "self": [
                    "T_tassoc"
                ]
            }
        },
        "ITransientAssociative.contains_transient": {
            "name": "contains_transient",
            "location": 340,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "ITransientAssociative.entry_transient": {
            "name": "entry_transient",
            "location": 344,
            "return": [
                "Optional[IMapEntry[(K, V)]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "ITransientMap.cons_transient": {
            "name": "cons_transient",
            "location": 355,
            "return": [
                "T_tmap"
            ],
            "arguments": {
                "self": [
                    "T_tmap"
                ]
            }
        },
        "ITransientMap.dissoc_transient": {
            "name": "dissoc_transient",
            "location": 361,
            "return": [
                "T_tmap"
            ],
            "arguments": {
                "self": [
                    "T_tmap"
                ]
            }
        },
        "ITransientSet.disj_transient": {
            "name": "disj_transient",
            "location": 372,
            "return": [
                "T_tset"
            ],
            "arguments": {
                "self": [
                    "T_tset"
                ]
            }
        },
        "ITransientVector.assoc_transient": {
            "name": "assoc_transient",
            "location": 386,
            "return": [
                "T_tvec"
            ],
            "arguments": {
                "self": [
                    "T_tvec"
                ]
            }
        },
        "ITransientVector.cons_transient": {
            "name": "cons_transient",
            "location": 390,
            "return": [
                "T_tvec"
            ],
            "arguments": {
                "self": [
                    "T_tvec"
                ]
            }
        },
        "ITransientVector.pop_transient": {
            "name": "pop_transient",
            "location": 394,
            "return": [
                "T_tvec"
            ],
            "arguments": {
                "self": [
                    "T_tvec"
                ]
            }
        },
        "IRecord.create": {
            "name": "create",
            "location": 407,
            "return": [
                "'IRecord'"
            ],
            "arguments": {
                "cls": [],
                "m": [
                    "IPersistentMap"
                ]
            }
        },
        "IRecord._lrepr": {
            "name": "_lrepr",
            "location": 411,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IRecord._record_lrepr": {
            "name": "_record_lrepr",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "kwargs": [
                    "Mapping"
                ]
            }
        },
        "ISeq.is_empty": {
            "name": "is_empty",
            "location": 471,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ISeq.first": {
            "name": "first",
            "location": 476,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ISeq.rest": {
            "name": "rest",
            "location": 481,
            "return": [
                "'ISeq[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ISeq.cons": {
            "name": "cons",
            "location": 485,
            "return": [
                "'ISeq[T]'"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "T"
                ]
            }
        },
        "ISeq.seq": {
            "name": "seq",
            "location": 488,
            "return": [
                "'Optional[ISeq[T]]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ISeq._lrepr": {
            "name": "_lrepr",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISeq.__eq__": {
            "name": "__eq__",
            "location": 494,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ISeq.__hash__": {
            "name": "__hash__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISeq.__iter__": {
            "name": "__iter__",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISeq._SeqIter.__init__": {
            "name": "__init__",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "seq": [
                    "'ISeq[T]'"
                ]
            }
        },
        "ISeq._SeqIter.__next__": {
            "name": "__next__",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISeq._SeqIter.__repr__": {
            "name": "__repr__",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/keyword.py": {
        "complete": {
            "name": "complete",
            "location": 66,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "kw_cache": [
                    "Optional[IPersistentMap[(int, Keyword)]]"
                ]
            }
        },
        "hash_kw": {
            "name": "hash_kw",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "ns": [
                    "Optional[str]"
                ]
            }
        },
        "keyword_from_hash": {
            "name": "keyword_from_hash",
            "location": 99,
            "return": [
                "Keyword"
            ],
            "arguments": {
                "kw_hash": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "ns": [
                    "Optional[str]"
                ]
            }
        },
        "keyword": {
            "name": "keyword",
            "location": 123,
            "return": [
                "Keyword"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "ns": [
                    "Optional[str]"
                ]
            }
        },
        "Keyword.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "ns": [
                    "Optional[str]"
                ]
            }
        },
        "Keyword.name": {
            "name": "name",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.ns": {
            "name": "ns",
            "location": 26,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword._lrepr": {
            "name": "_lrepr",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Keyword.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Keyword.__lt__": {
            "name": "__lt__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Keyword.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "m": [
                    "IAssociative"
                ],
                "default": []
            }
        },
        "Keyword.__reduce__": {
            "name": "__reduce__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/list.py": {
        "list": {
            "name": "list",
            "location": 93,
            "return": [
                "PersistentList"
            ],
            "arguments": {
                "members": [],
                "meta": []
            }
        },
        "l": {
            "name": "l",
            "location": 100,
            "return": [
                "PersistentList"
            ],
            "arguments": {}
        },
        "PersistentList.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "'PList[T]'"
                ],
                "meta": []
            }
        },
        "PersistentList.__bool__": {
            "name": "__bool__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PersistentList.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentList._lrepr": {
            "name": "_lrepr",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.meta": {
            "name": "meta",
            "location": 43,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.with_meta": {
            "name": "with_meta",
            "location": 46,
            "return": [
                "'PersistentList'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentList.is_empty": {
            "name": "is_empty",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.first": {
            "name": "first",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.rest": {
            "name": "rest",
            "location": 61,
            "return": [
                "ISeq[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.cons": {
            "name": "cons",
            "location": 66,
            "return": [
                "'PersistentList[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.empty": {
            "name": "empty",
            "location": 73,
            "return": [
                "'PersistentList'"
            ],
            "arguments": {}
        },
        "PersistentList.seq": {
            "name": "seq",
            "location": 76,
            "return": [
                "Optional[ISeq[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.peek": {
            "name": "peek",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.pop": {
            "name": "pop",
            "location": 84,
            "return": [
                "'PersistentList[T]'"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/map.py": {
        "map": {
            "name": "map",
            "location": 271,
            "return": [
                "PersistentMap[(K, V)]"
            ],
            "arguments": {
                "kvs": [
                    "Mapping[(K, V)]"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "m": {
            "name": "m",
            "location": 283,
            "return": [
                "PersistentMap[(str, V)]"
            ],
            "arguments": {}
        },
        "from_entries": {
            "name": "from_entries",
            "location": 288,
            "return": [
                "PersistentMap[(K, V)]"
            ],
            "arguments": {
                "entries": [
                    "Iterable[MapEntry[(K, V)]]"
                ]
            }
        },
        "hash_map": {
            "name": "hash_map",
            "location": 295,
            "return": [
                "PersistentMap"
            ],
            "arguments": {}
        },
        "TransientMap.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evolver": [
                    "'MapMutation[K, V]'"
                ]
            }
        },
        "TransientMap.__bool__": {
            "name": "__bool__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransientMap.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "TransientMap.__contains__": {
            "name": "__contains__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TransientMap.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TransientMap.__len__": {
            "name": "__len__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransientMap.assoc_transient": {
            "name": "assoc_transient",
            "location": 56,
            "return": [
                "'TransientMap'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientMap.contains_transient": {
            "name": "contains_transient",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "TransientMap.dissoc_transient": {
            "name": "dissoc_transient",
            "location": 64,
            "return": [
                "'TransientMap[K, V]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientMap.entry_transient": {
            "name": "entry_transient",
            "location": 72,
            "return": [
                "Optional[IMapEntry[(K, V)]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "TransientMap.val_at": {
            "name": "val_at",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "TransientMap.cons_transient": {
            "name": "cons_transient",
            "location": 81,
            "return": [
                "'TransientMap[K, V]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientMap.to_persistent": {
            "name": "to_persistent",
            "location": 111,
            "return": [
                "'PersistentMap[K, V]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "'_Map[K, V]'"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentMap.from_coll": {
            "name": "from_coll",
            "location": 133,
            "return": [
                "'PersistentMap[K, V]'"
            ],
            "arguments": {
                "cls": [],
                "members": [
                    "Union[(Mapping[(K, V)], Iterable[Tuple[(K, V)]])]"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentMap.__bool__": {
            "name": "__bool__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.__call__": {
            "name": "__call__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "PersistentMap.__contains__": {
            "name": "__contains__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PersistentMap.__eq__": {
            "name": "__eq__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PersistentMap.__getitem__": {
            "name": "__getitem__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PersistentMap.__hash__": {
            "name": "__hash__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.__iter__": {
            "name": "__iter__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.__len__": {
            "name": "__len__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap._lrepr": {
            "name": "_lrepr",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.meta": {
            "name": "meta",
            "location": 178,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.with_meta": {
            "name": "with_meta",
            "location": 181,
            "return": [
                "'PersistentMap'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentMap.assoc": {
            "name": "assoc",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.contains": {
            "name": "contains",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "PersistentMap.dissoc": {
            "name": "dissoc",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.entry": {
            "name": "entry",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "PersistentMap.val_at": {
            "name": "val_at",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "PersistentMap.update": {
            "name": "update",
            "location": 211,
            "return": [
                "'PersistentMap'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.update_with": {
            "name": "update_with",
            "location": 215,
            "return": [
                "'PersistentMap[K, V]'"
            ],
            "arguments": {
                "self": [],
                "merge_fn": [
                    "Callable[([V, V], V)]"
                ]
            }
        },
        "PersistentMap.cons": {
            "name": "cons",
            "location": 224,
            "return": [
                "'PersistentMap[K, V]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.empty": {
            "name": "empty",
            "location": 256,
            "return": [
                "'PersistentMap'"
            ],
            "arguments": {}
        },
        "PersistentMap.seq": {
            "name": "seq",
            "location": 259,
            "return": [
                "Optional[ISeq[IMapEntry[(K, V)]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.to_transient": {
            "name": "to_transient",
            "location": 264,
            "return": [
                "TransientMap[(K, V)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/multifn.py": {
        "MultiFunction.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "sym.Symbol"
                ],
                "dispatch": [
                    "DispatchFunction"
                ],
                "default": [
                    "T"
                ],
                "hierarchy": [
                    "Optional[IRef]"
                ]
            }
        },
        "MultiFunction.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiFunction._reset_cache": {
            "name": "_reset_cache",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiFunction._is_a": {
            "name": "_is_a",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "T"
                ],
                "parent": [
                    "T"
                ]
            }
        },
        "MultiFunction._has_preference": {
            "name": "_has_preference",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "preferred_key": [
                    "T"
                ],
                "other_key": [
                    "T"
                ]
            }
        },
        "MultiFunction._precedes": {
            "name": "_precedes",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "T"
                ],
                "parent": [
                    "T"
                ]
            }
        },
        "MultiFunction.add_method": {
            "name": "add_method",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T"
                ],
                "method": [
                    "Method"
                ]
            }
        },
        "MultiFunction._find_and_cache_method": {
            "name": "_find_and_cache_method",
            "location": 105,
            "return": [
                "Optional[Method]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T"
                ]
            }
        },
        "MultiFunction.get_method": {
            "name": "get_method",
            "location": 129,
            "return": [
                "Optional[Method]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T"
                ]
            }
        },
        "MultiFunction.prefer_method": {
            "name": "prefer_method",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferred_key": [
                    "T"
                ],
                "other_key": [
                    "T"
                ]
            }
        },
        "MultiFunction.prefers": {
            "name": "prefers",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiFunction.remove_method": {
            "name": "remove_method",
            "location": 163,
            "return": [
                "Optional[Method]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T"
                ]
            }
        },
        "MultiFunction.remove_all_methods": {
            "name": "remove_all_methods",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiFunction.default": {
            "name": "default",
            "location": 179,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiFunction.methods": {
            "name": "methods",
            "location": 183,
            "return": [
                "IPersistentMap[(T, Method)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/obj.py": {
        "_dec_print_level": {
            "name": "_dec_print_level",
            "location": 27,
            "return": [],
            "arguments": {
                "lvl": [
                    "PrintCountSetting"
                ]
            }
        },
        "_process_kwargs": {
            "name": "_process_kwargs",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "map_lrepr": {
            "name": "map_lrepr",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "entries": [
                    "Callable[([], Iterable[Tuple[(Any, Any)]])]"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "meta": []
            }
        },
        "seq_lrepr": {
            "name": "seq_lrepr",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "meta": []
            }
        },
        "lrepr": {
            "name": "lrepr",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "Any"
                ],
                "human_readable": [
                    "bool"
                ],
                "print_dup": [
                    "bool"
                ],
                "print_length": [
                    "PrintCountSetting"
                ],
                "print_level": [
                    "PrintCountSetting"
                ],
                "print_meta": [
                    "bool"
                ],
                "print_readably": [
                    "bool"
                ]
            }
        },
        "_lrepr_lisp_obj": {
            "name": "_lrepr_lisp_obj",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "Any"
                ],
                "human_readable": [
                    "bool"
                ],
                "print_dup": [
                    "bool"
                ],
                "print_length": [
                    "PrintCountSetting"
                ],
                "print_level": [
                    "PrintCountSetting"
                ],
                "print_meta": [
                    "bool"
                ],
                "print_readably": [
                    "bool"
                ]
            }
        },
        "_lrepr_bool": {
            "name": "_lrepr_bool",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "bool"
                ]
            }
        },
        "_lrepr_nil": {
            "name": "_lrepr_nil",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "_": [
                    "None"
                ]
            }
        },
        "_lrepr_str": {
            "name": "_lrepr_str",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "str"
                ],
                "human_readable": [
                    "bool"
                ],
                "print_readably": [
                    "bool"
                ]
            }
        },
        "_lrepr_py_list": {
            "name": "_lrepr_py_list",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "list"
                ]
            }
        },
        "_lrepr_py_dict": {
            "name": "_lrepr_py_dict",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "dict"
                ]
            }
        },
        "_lrepr_py_set": {
            "name": "_lrepr_py_set",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "set"
                ]
            }
        },
        "_lrepr_py_tuple": {
            "name": "_lrepr_py_tuple",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "tuple"
                ]
            }
        },
        "_lrepr_complex": {
            "name": "_lrepr_complex",
            "location": 242,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "complex"
                ]
            }
        },
        "_lrepr_float": {
            "name": "_lrepr_float",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "float"
                ]
            }
        },
        "_lrepr_datetime": {
            "name": "_lrepr_datetime",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "datetime.datetime"
                ]
            }
        },
        "_lrepr_decimal": {
            "name": "_lrepr_decimal",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "Decimal"
                ],
                "print_dup": [
                    "bool"
                ]
            }
        },
        "_lrepr_fraction": {
            "name": "_lrepr_fraction",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "Fraction"
                ]
            }
        },
        "_lrepr_path": {
            "name": "_lrepr_path",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "Path"
                ]
            }
        },
        "_lrepr_pattern": {
            "name": "_lrepr_pattern",
            "location": 278,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "Pattern"
                ]
            }
        },
        "_lrepr_uuid": {
            "name": "_lrepr_uuid",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "uuid.UUID"
                ]
            }
        },
        "LispObject.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LispObject.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LispObject._lrepr": {
            "name": "_lrepr",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LispObject.lrepr": {
            "name": "lrepr",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "map_lrepr.entry_reprs": {
            "name": "entry_reprs",
            "location": 88,
            "return": [],
            "arguments": {}
        }
    },
    "basilisp-main/src/basilisp/lang/promise.py": {
        "Promise.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Promise.deliver": {
            "name": "deliver",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "Promise.deref": {
            "name": "deref",
            "location": 24,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ],
                "timeout_val": [
                    "Optional[T]"
                ]
            }
        },
        "Promise.is_realized": {
            "name": "is_realized",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/queue.py": {
        "queue": {
            "name": "queue",
            "location": 87,
            "return": [
                "PersistentQueue"
            ],
            "arguments": {
                "members": [],
                "meta": []
            }
        },
        "q": {
            "name": "q",
            "location": 94,
            "return": [
                "PersistentQueue"
            ],
            "arguments": {}
        },
        "PersistentQueue.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "'PDeque[T]'"
                ],
                "meta": []
            }
        },
        "PersistentQueue.__bool__": {
            "name": "__bool__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PersistentQueue.__hash__": {
            "name": "__hash__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.__iter__": {
            "name": "__iter__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.__len__": {
            "name": "__len__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue._lrepr": {
            "name": "_lrepr",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.meta": {
            "name": "meta",
            "location": 54,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.with_meta": {
            "name": "with_meta",
            "location": 57,
            "return": [
                "'PersistentQueue'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentQueue.cons": {
            "name": "cons",
            "location": 60,
            "return": [
                "'PersistentQueue[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.empty": {
            "name": "empty",
            "location": 64,
            "return": [
                "'PersistentQueue'"
            ],
            "arguments": {}
        },
        "PersistentQueue.peek": {
            "name": "peek",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.pop": {
            "name": "pop",
            "location": 73,
            "return": [
                "'PersistentQueue[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentQueue.seq": {
            "name": "seq",
            "location": 78,
            "return": [
                "Optional[ISeq[T]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/reader.py": {
        "_py_from_lisp": {
            "name": "_py_from_lisp",
            "location": 230,
            "return": [
                "ReaderForm"
            ],
            "arguments": {
                "form": [
                    "object"
                ]
            }
        },
        "_py_tuple_from_list": {
            "name": "_py_tuple_from_list",
            "location": 235,
            "return": [
                "tuple"
            ],
            "arguments": {
                "form": [
                    "llist.PersistentList"
                ]
            }
        },
        "_py_dict_from_map": {
            "name": "_py_dict_from_map",
            "location": 240,
            "return": [
                "dict"
            ],
            "arguments": {
                "form": [
                    "lmap.PersistentMap"
                ]
            }
        },
        "_py_set_from_set": {
            "name": "_py_set_from_set",
            "location": 245,
            "return": [
                "set"
            ],
            "arguments": {
                "form": [
                    "lset.PersistentSet"
                ]
            }
        },
        "_py_list_from_vec": {
            "name": "_py_list_from_vec",
            "location": 250,
            "return": [
                "list"
            ],
            "arguments": {
                "form": [
                    "vec.PersistentVector"
                ]
            }
        },
        "_inst_from_str": {
            "name": "_inst_from_str",
            "location": 254,
            "return": [
                "datetime"
            ],
            "arguments": {
                "inst_str": [
                    "str"
                ]
            }
        },
        "_uuid_from_str": {
            "name": "_uuid_from_str",
            "location": 261,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "uuid_str": [
                    "str"
                ]
            }
        },
        "_with_loc": {
            "name": "_with_loc",
            "location": 469,
            "return": [
                "W"
            ],
            "arguments": {
                "f": [
                    "W"
                ]
            }
        },
        "_read_namespaced": {
            "name": "_read_namespaced",
            "location": 489,
            "return": [
                "Tuple[(Optional[str], str)]"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "allowed_suffix": [
                    "Optional[str]"
                ]
            }
        },
        "_read_coll": {
            "name": "_read_coll",
            "location": 533,
            "return": [],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "f": [
                    "Callable[([Collection[Any]], Union[(llist.PersistentList, lset.PersistentSet, vec.PersistentVector)])]"
                ],
                "end_token": [
                    "str"
                ],
                "coll_name": [
                    "str"
                ]
            }
        },
        "_read_list": {
            "name": "_read_list",
            "location": 580,
            "return": [
                "llist.PersistentList"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_vector": {
            "name": "_read_vector",
            "location": 588,
            "return": [
                "vec.PersistentVector"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_set": {
            "name": "_read_set",
            "location": 596,
            "return": [
                "lset.PersistentSet"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "__read_map_elems": {
            "name": "__read_map_elems",
            "location": 613,
            "return": [
                "Iterable[RawReaderForm]"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_map_key_processor": {
            "name": "_map_key_processor",
            "location": 650,
            "return": [
                "Callable[([Hashable], Hashable)]"
            ],
            "arguments": {
                "namespace": [
                    "Optional[str]"
                ]
            }
        },
        "_read_map": {
            "name": "_read_map",
            "location": 678,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "namespace": [
                    "Optional[str]"
                ]
            }
        },
        "_read_namespaced_map": {
            "name": "_read_namespaced_map",
            "location": 699,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_num": {
            "name": "_read_num",
            "location": 730,
            "return": [
                "MaybeNumber"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_str": {
            "name": "_read_str",
            "location": 835,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "allow_arbitrary_escapes": [
                    "bool"
                ]
            }
        },
        "_read_sym": {
            "name": "_read_sym",
            "location": 863,
            "return": [
                "MaybeSymbol"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_kw": {
            "name": "_read_kw",
            "location": 893,
            "return": [
                "kw.Keyword"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_meta": {
            "name": "_read_meta",
            "location": 921,
            "return": [
                "IMeta"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_walk": {
            "name": "_walk",
            "location": 955,
            "return": [],
            "arguments": {
                "form": [],
                "_": [],
                "outer_f": []
            }
        },
        "_walk_ipersistentlist": {
            "name": "_walk_ipersistentlist",
            "location": 963,
            "return": [],
            "arguments": {
                "form": [
                    "Union[(IPersistentList, ISeq)]"
                ],
                "inner_f": [],
                "outer_f": []
            }
        },
        "_walk_ipersistentvector": {
            "name": "_walk_ipersistentvector",
            "location": 968,
            "return": [],
            "arguments": {
                "form": [
                    "IPersistentVector"
                ],
                "inner_f": [],
                "outer_f": []
            }
        },
        "_walk_ipersistentmap": {
            "name": "_walk_ipersistentmap",
            "location": 973,
            "return": [],
            "arguments": {
                "form": [
                    "IPersistentMap"
                ],
                "inner_f": [],
                "outer_f": []
            }
        },
        "_walk_ipersistentset": {
            "name": "_walk_ipersistentset",
            "location": 978,
            "return": [],
            "arguments": {
                "form": [
                    "IPersistentSet"
                ],
                "inner_f": [],
                "outer_f": []
            }
        },
        "_postwalk": {
            "name": "_postwalk",
            "location": 982,
            "return": [],
            "arguments": {
                "f": [],
                "form": []
            }
        },
        "_read_function": {
            "name": "_read_function",
            "location": 990,
            "return": [
                "llist.PersistentList"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_quoted": {
            "name": "_read_quoted",
            "location": 1037,
            "return": [
                "llist.PersistentList"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_is_unquote": {
            "name": "_is_unquote",
            "location": 1045,
            "return": [
                "bool"
            ],
            "arguments": {
                "form": [
                    "RawReaderForm"
                ]
            }
        },
        "_is_unquote_splicing": {
            "name": "_is_unquote_splicing",
            "location": 1053,
            "return": [
                "bool"
            ],
            "arguments": {
                "form": [
                    "RawReaderForm"
                ]
            }
        },
        "_expand_syntax_quote": {
            "name": "_expand_syntax_quote",
            "location": 1061,
            "return": [
                "Iterable[LispForm]"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "form": [
                    "IterableLispForm"
                ]
            }
        },
        "_process_syntax_quoted_form": {
            "name": "_process_syntax_quoted_form",
            "location": 1088,
            "return": [
                "RawReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "form": [
                    "RawReaderForm"
                ]
            }
        },
        "_read_syntax_quoted": {
            "name": "_read_syntax_quoted",
            "location": 1145,
            "return": [
                "RawReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_unquote": {
            "name": "_read_unquote",
            "location": 1154,
            "return": [
                "LispForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_deref": {
            "name": "_read_deref",
            "location": 1182,
            "return": [
                "LispForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_character": {
            "name": "_read_character",
            "location": 1200,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_regex": {
            "name": "_read_regex",
            "location": 1243,
            "return": [
                "Pattern"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_numeric_constant": {
            "name": "_read_numeric_constant",
            "location": 1259,
            "return": [
                "float"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_should_splice_reader_conditional": {
            "name": "_should_splice_reader_conditional",
            "location": 1271,
            "return": [
                "bool"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "form": [
                    "LispReaderForm"
                ]
            }
        },
        "_read_reader_conditional_preserving": {
            "name": "_read_reader_conditional_preserving",
            "location": 1281,
            "return": [
                "ReaderConditional"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_reader_conditional": {
            "name": "_read_reader_conditional",
            "location": 1311,
            "return": [
                "LispReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_load_record_or_type": {
            "name": "_load_record_or_type",
            "location": 1335,
            "return": [
                "Union[(IRecord, IType)]"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ],
                "s": [
                    "sym.Symbol"
                ],
                "v": [
                    "LispReaderForm"
                ]
            }
        },
        "_read_reader_macro": {
            "name": "_read_reader_macro",
            "location": 1373,
            "return": [
                "LispReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_comment": {
            "name": "_read_comment",
            "location": 1419,
            "return": [
                "LispReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_next_consuming_comment": {
            "name": "_read_next_consuming_comment",
            "location": 1435,
            "return": [
                "RawReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_next_consuming_whitespace": {
            "name": "_read_next_consuming_whitespace",
            "location": 1447,
            "return": [
                "LispReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "_read_next": {
            "name": "_read_next",
            "location": 1456,
            "return": [
                "LispReaderForm"
            ],
            "arguments": {
                "ctx": [
                    "ReaderContext"
                ]
            }
        },
        "syntax_quote": {
            "name": "syntax_quote",
            "location": 1498,
            "return": [],
            "arguments": {
                "form": [
                    "RawReaderForm"
                ],
                "resolver": [
                    "Resolver"
                ],
                "data_readers": [
                    "DataReaders"
                ],
                "eof": [
                    "Any"
                ],
                "features": [
                    "Optional[IPersistentSet[kw.Keyword]]"
                ],
                "process_reader_cond": [
                    "bool"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 1520,
            "return": [
                "Iterable[RawReaderForm]"
            ],
            "arguments": {
                "stream": [],
                "resolver": [
                    "Resolver"
                ],
                "data_readers": [
                    "DataReaders"
                ],
                "eof": [
                    "Any"
                ],
                "is_eof_error": [
                    "bool"
                ],
                "features": [
                    "Optional[IPersistentSet[kw.Keyword]]"
                ],
                "process_reader_cond": [
                    "bool"
                ]
            }
        },
        "read_str": {
            "name": "read_str",
            "location": 1574,
            "return": [
                "Iterable[RawReaderForm]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "resolver": [
                    "Resolver"
                ],
                "data_readers": [
                    "DataReaders"
                ],
                "eof": [
                    "Any"
                ],
                "is_eof_error": [
                    "bool"
                ],
                "features": [
                    "Optional[IPersistentSet[kw.Keyword]]"
                ],
                "process_reader_cond": [
                    "bool"
                ]
            }
        },
        "read_file": {
            "name": "read_file",
            "location": 1599,
            "return": [
                "Iterable[RawReaderForm]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "resolver": [
                    "Resolver"
                ],
                "data_readers": [
                    "DataReaders"
                ],
                "eof": [
                    "Any"
                ],
                "is_eof_error": [
                    "bool"
                ],
                "features": [
                    "Optional[IPersistentSet[kw.Keyword]]"
                ],
                "process_reader_cond": [
                    "bool"
                ]
            }
        },
        "SyntaxError.__repr__": {
            "name": "__repr__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxError.__str__": {
            "name": "__str__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "io.TextIOBase"
                ],
                "pushback_depth": [
                    "int"
                ]
            }
        },
        "StreamReader.name": {
            "name": "name",
            "location": 171,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.col": {
            "name": "col",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.line": {
            "name": "line",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.loc": {
            "name": "loc",
            "location": 183,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader._update_loc": {
            "name": "_update_loc",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "StreamReader.peek": {
            "name": "peek",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.pushback": {
            "name": "pushback",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.advance": {
            "name": "advance",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamReader.next_token": {
            "name": "next_token",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "StreamReader"
                ],
                "resolver": [
                    "Resolver"
                ],
                "data_readers": [
                    "DataReaders"
                ],
                "eof": [
                    "Any"
                ],
                "features": [
                    "Optional[IPersistentSet[kw.Keyword]]"
                ],
                "process_reader_cond": [
                    "bool"
                ]
            }
        },
        "ReaderContext.data_readers": {
            "name": "data_readers",
            "location": 322,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.eof": {
            "name": "eof",
            "location": 326,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.reader_features": {
            "name": "reader_features",
            "location": 330,
            "return": [
                "IPersistentSet[kw.Keyword]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.should_process_reader_cond": {
            "name": "should_process_reader_cond",
            "location": 334,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.reader": {
            "name": "reader",
            "location": 338,
            "return": [
                "StreamReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.resolve": {
            "name": "resolve",
            "location": 341,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ]
            }
        },
        "ReaderContext.in_anon_fn": {
            "name": "in_anon_fn",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.is_in_anon_fn": {
            "name": "is_in_anon_fn",
            "location": 351,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.gensym_env": {
            "name": "gensym_env",
            "location": 358,
            "return": [
                "GenSymEnvironment"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.syntax_quoted": {
            "name": "syntax_quoted",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.unquoted": {
            "name": "unquoted",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.is_syntax_quoted": {
            "name": "is_syntax_quoted",
            "location": 376,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReaderContext.syntax_error": {
            "name": "syntax_error",
            "location": 382,
            "return": [
                "SyntaxError"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "ReaderContext.eof_error": {
            "name": "eof_error",
            "location": 389,
            "return": [
                "UnexpectedEOFError"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "ReaderConditional.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "llist.PersistentList[Tuple[(kw.Keyword, ReaderForm)]]"
                ],
                "is_splicing": [
                    "bool"
                ]
            }
        },
        "ReaderConditional._compile_feature_vec": {
            "name": "_compile_feature_vec",
            "location": 412,
            "return": [],
            "arguments": {
                "form": [
                    "IPersistentList[Tuple[(kw.Keyword, ReaderForm)]]"
                ]
            }
        },
        "ReaderConditional.val_at": {
            "name": "val_at",
            "location": 435,
            "return": [
                "Optional[ReaderForm]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "kw.Keyword"
                ],
                "default": [
                    "Optional[ReaderForm]"
                ]
            }
        },
        "ReaderConditional.is_splicing": {
            "name": "is_splicing",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderConditional.select_feature": {
            "name": "select_feature",
            "location": 449,
            "return": [
                "Union[(ReaderForm, object)]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "IPersistentSet[kw.Keyword]"
                ]
            }
        },
        "ReaderConditional._lrepr": {
            "name": "_lrepr",
            "location": 457,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_with_loc.with_lineno_and_col": {
            "name": "with_lineno_and_col",
            "location": 474,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "_read_set.set_if_valid": {
            "name": "set_if_valid",
            "location": 601,
            "return": [
                "lset.PersistentSet"
            ],
            "arguments": {
                "s": [
                    "Collection"
                ]
            }
        },
        "_map_key_processor.process_key": {
            "name": "process_key",
            "location": 661,
            "return": [
                "Any"
            ],
            "arguments": {
                "k": [
                    "Any"
                ]
            }
        },
        "_read_function.arg_suffix": {
            "name": "arg_suffix",
            "location": 999,
            "return": [],
            "arguments": {
                "arg_num": []
            }
        },
        "_read_function.sym_replacement": {
            "name": "sym_replacement",
            "location": 1007,
            "return": [],
            "arguments": {
                "arg_num": []
            }
        },
        "_read_function.identify_and_replace": {
            "name": "identify_and_replace",
            "location": 1011,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/reduced.py": {
        "Reduced.deref": {
            "name": "deref",
            "location": 14,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/reference.py": {
        "ReferenceBase.meta": {
            "name": "meta",
            "location": 43,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceBase.alter_meta": {
            "name": "alter_meta",
            "location": 47,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "AlterMeta"
                ]
            }
        },
        "ReferenceBase.reset_meta": {
            "name": "reset_meta",
            "location": 52,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "RefBase.add_watch": {
            "name": "add_watch",
            "location": 74,
            "return": [
                "'RefBase[T]'"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "RefWatchKey"
                ],
                "wf": [
                    "RefWatcher"
                ]
            }
        },
        "RefBase._notify_watches": {
            "name": "_notify_watches",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "old": [
                    "Any"
                ],
                "new": [
                    "Any"
                ]
            }
        },
        "RefBase.remove_watch": {
            "name": "remove_watch",
            "location": 83,
            "return": [
                "'RefBase[T]'"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "RefWatchKey"
                ]
            }
        },
        "RefBase.get_validator": {
            "name": "get_validator",
            "location": 88,
            "return": [
                "Optional[RefValidator]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefBase.set_validator": {
            "name": "set_validator",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vf": [
                    "Optional[RefValidator]"
                ]
            }
        },
        "RefBase._validate": {
            "name": "_validate",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "val": [
                    "Any"
                ],
                "vf": [
                    "Optional[RefValidator]"
                ]
            }
        },
        "AlterMeta.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/runtime.py": {
        "_supported_python_versions_features": {
            "name": "_supported_python_versions_features",
            "location": 146,
            "return": [
                "Iterable[kw.Keyword]"
            ],
            "arguments": {}
        },
        "_new_module": {
            "name": "_new_module",
            "location": 188,
            "return": [
                "BasilispModule"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "doc": []
            }
        },
        "get_thread_bindings": {
            "name": "get_thread_bindings",
            "location": 917,
            "return": [
                "IPersistentMap[(Var, Any)]"
            ],
            "arguments": {}
        },
        "push_thread_bindings": {
            "name": "push_thread_bindings",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "IPersistentMap[(Var, Any)]"
                ]
            }
        },
        "pop_thread_bindings": {
            "name": "pop_thread_bindings",
            "location": 940,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "first": {
            "name": "first",
            "location": 959,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "_first_none": {
            "name": "_first_none",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "None"
                ]
            }
        },
        "_first_iseq": {
            "name": "_first_iseq",
            "location": 974,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "o": [
                    "ISeq[T]"
                ]
            }
        },
        "rest": {
            "name": "rest",
            "location": 979,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "o": []
            }
        },
        "_rest_none": {
            "name": "_rest_none",
            "location": 989,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "_": [
                    "None"
                ]
            }
        },
        "_rest_iseq": {
            "name": "_rest_iseq",
            "location": 994,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "o": [
                    "ISeq[T]"
                ]
            }
        },
        "nthrest": {
            "name": "nthrest",
            "location": 1001,
            "return": [],
            "arguments": {
                "coll": [],
                "i": [
                    "int"
                ]
            }
        },
        "next_": {
            "name": "next_",
            "location": 1012,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "o": []
            }
        },
        "nthnext": {
            "name": "nthnext",
            "location": 1018,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "coll": [],
                "i": [
                    "int"
                ]
            }
        },
        "_cons": {
            "name": "_cons",
            "location": 1030,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "seq": [],
                "o": []
            }
        },
        "_cons_none": {
            "name": "_cons_none",
            "location": 1035,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "_": [
                    "None"
                ],
                "o": []
            }
        },
        "_cons_iseq": {
            "name": "_cons_iseq",
            "location": 1040,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "seq": [
                    "ISeq"
                ],
                "o": []
            }
        },
        "cons": {
            "name": "cons",
            "location": 1044,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "o": [],
                "seq": []
            }
        },
        "concat": {
            "name": "concat",
            "location": 1054,
            "return": [
                "ISeq"
            ],
            "arguments": {}
        },
        "apply": {
            "name": "apply",
            "location": 1062,
            "return": [],
            "arguments": {
                "f": [],
                "args": []
            }
        },
        "apply_kw": {
            "name": "apply_kw",
            "location": 1083,
            "return": [],
            "arguments": {
                "f": [],
                "args": []
            }
        },
        "count": {
            "name": "count",
            "location": 1104,
            "return": [
                "int"
            ],
            "arguments": {
                "coll": []
            }
        },
        "nth": {
            "name": "nth",
            "location": 1118,
            "return": [],
            "arguments": {
                "coll": [],
                "i": [
                    "int"
                ],
                "notfound": []
            }
        },
        "_nth_none": {
            "name": "_nth_none",
            "location": 1126,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "None"
                ],
                "i": [
                    "int"
                ],
                "notfound": []
            }
        },
        "_nth_sequence": {
            "name": "_nth_sequence",
            "location": 1131,
            "return": [],
            "arguments": {
                "coll": [
                    "Sequence"
                ],
                "i": [
                    "int"
                ],
                "notfound": []
            }
        },
        "_nth_iseq": {
            "name": "_nth_iseq",
            "location": 1141,
            "return": [],
            "arguments": {
                "coll": [
                    "ISeq"
                ],
                "i": [
                    "int"
                ],
                "notfound": []
            }
        },
        "contains": {
            "name": "contains",
            "location": 1153,
            "return": [],
            "arguments": {
                "coll": [],
                "k": []
            }
        },
        "_contains_none": {
            "name": "_contains_none",
            "location": 1159,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "_contains_iassociative": {
            "name": "_contains_iassociative",
            "location": 1164,
            "return": [],
            "arguments": {
                "coll": [],
                "k": []
            }
        },
        "get": {
            "name": "get",
            "location": 1169,
            "return": [],
            "arguments": {
                "m": [],
                "k": [],
                "default": []
            }
        },
        "_get_others": {
            "name": "_get_others",
            "location": 1177,
            "return": [],
            "arguments": {
                "m": [],
                "k": [],
                "default": []
            }
        },
        "_get_settypes": {
            "name": "_get_settypes",
            "location": 1188,
            "return": [],
            "arguments": {
                "m": [],
                "k": [],
                "default": []
            }
        },
        "_get_ilookup": {
            "name": "_get_ilookup",
            "location": 1195,
            "return": [],
            "arguments": {
                "m": [],
                "k": [],
                "default": []
            }
        },
        "assoc": {
            "name": "assoc",
            "location": 1200,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "_assoc_none": {
            "name": "_assoc_none",
            "location": 1209,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "_": [
                    "None"
                ]
            }
        },
        "_assoc_iassociative": {
            "name": "_assoc_iassociative",
            "location": 1214,
            "return": [],
            "arguments": {
                "m": [
                    "IAssociative"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 1219,
            "return": [],
            "arguments": {
                "m": [],
                "k": [],
                "f": []
            }
        },
        "_update_none": {
            "name": "_update_none",
            "location": 1229,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "_": [
                    "None"
                ],
                "k": [],
                "f": []
            }
        },
        "_update_iassociative": {
            "name": "_update_iassociative",
            "location": 1234,
            "return": [],
            "arguments": {
                "m": [
                    "IAssociative"
                ],
                "k": [],
                "f": []
            }
        },
        "conj": {
            "name": "conj",
            "location": 1241,
            "return": [],
            "arguments": {
                "coll": []
            }
        },
        "_conj_none": {
            "name": "_conj_none",
            "location": 1252,
            "return": [],
            "arguments": {
                "_": [
                    "None"
                ]
            }
        },
        "_conj_ipersistentcollection": {
            "name": "_conj_ipersistentcollection",
            "location": 1258,
            "return": [],
            "arguments": {
                "coll": [
                    "IPersistentCollection"
                ]
            }
        },
        "partial": {
            "name": "partial",
            "location": 1262,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "deref": {
            "name": "deref",
            "location": 1273,
            "return": [],
            "arguments": {
                "o": [],
                "timeout_s": [],
                "timeout_val": []
            }
        },
        "_deref_blocking": {
            "name": "_deref_blocking",
            "location": 1284,
            "return": [],
            "arguments": {
                "o": [
                    "IBlockingDeref"
                ],
                "timeout_s": [
                    "Optional[float]"
                ],
                "timeout_val": []
            }
        },
        "_deref": {
            "name": "_deref",
            "location": 1291,
            "return": [],
            "arguments": {
                "o": [
                    "IDeref"
                ]
            }
        },
        "equals": {
            "name": "equals",
            "location": 1295,
            "return": [
                "bool"
            ],
            "arguments": {
                "v1": [],
                "v2": []
            }
        },
        "divide": {
            "name": "divide",
            "location": 1305,
            "return": [
                "LispNumber"
            ],
            "arguments": {
                "x": [
                    "LispNumber"
                ],
                "y": [
                    "LispNumber"
                ]
            }
        },
        "_divide_ints": {
            "name": "_divide_ints",
            "location": 1312,
            "return": [
                "LispNumber"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "LispNumber"
                ]
            }
        },
        "quotient": {
            "name": "quotient",
            "location": 1318,
            "return": [
                "LispNumber"
            ],
            "arguments": {
                "num": [],
                "div": []
            }
        },
        "compare": {
            "name": "compare",
            "location": 1324,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_compare_nil": {
            "name": "_compare_nil",
            "location": 1337,
            "return": [
                "int"
            ],
            "arguments": {
                "_": [
                    "None"
                ],
                "y": []
            }
        },
        "_compare_decimal": {
            "name": "_compare_decimal",
            "location": 1343,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "decimal.Decimal"
                ],
                "y": []
            }
        },
        "_compare_float": {
            "name": "_compare_float",
            "location": 1351,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_compare_sets": {
            "name": "_compare_sets",
            "location": 1360,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "IPersistentSet"
                ],
                "y": []
            }
        },
        "sort": {
            "name": "sort",
            "location": 1372,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "coll": [],
                "f": []
            }
        },
        "sort_by": {
            "name": "sort_by",
            "location": 1378,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "keyfn": [],
                "coll": [],
                "cmp": []
            }
        },
        "is_special_form": {
            "name": "is_special_form",
            "location": 1412,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "sym.Symbol"
                ]
            }
        },
        "to_lisp": {
            "name": "to_lisp",
            "location": 1418,
            "return": [],
            "arguments": {
                "o": [],
                "keywordize_keys": [
                    "bool"
                ]
            }
        },
        "_to_lisp_vec": {
            "name": "_to_lisp_vec",
            "location": 1425,
            "return": [
                "vec.PersistentVector"
            ],
            "arguments": {
                "o": [
                    "Iterable"
                ],
                "keywordize_keys": [
                    "bool"
                ]
            }
        },
        "_keywordize_keys": {
            "name": "_keywordize_keys",
            "location": 1432,
            "return": [],
            "arguments": {
                "k": [],
                "keywordize_keys": [
                    "bool"
                ]
            }
        },
        "_keywordize_keys_str": {
            "name": "_keywordize_keys_str",
            "location": 1437,
            "return": [],
            "arguments": {
                "k": [],
                "keywordize_keys": [
                    "bool"
                ]
            }
        },
        "_to_lisp_map": {
            "name": "_to_lisp_map",
            "location": 1442,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "o": [
                    "Mapping"
                ],
                "keywordize_keys": [
                    "bool"
                ]
            }
        },
        "_to_lisp_set": {
            "name": "_to_lisp_set",
            "location": 1456,
            "return": [
                "lset.PersistentSet"
            ],
            "arguments": {
                "o": [
                    "AbstractSet"
                ],
                "keywordize_keys": [
                    "bool"
                ]
            }
        },
        "_kw_name": {
            "name": "_kw_name",
            "location": 1460,
            "return": [
                "str"
            ],
            "arguments": {
                "kw": [
                    "kw.Keyword"
                ]
            }
        },
        "to_py": {
            "name": "to_py",
            "location": 1465,
            "return": [],
            "arguments": {
                "o": [],
                "keyword_fn": [
                    "Callable[([kw.Keyword], Any)]"
                ]
            }
        },
        "_to_py_kw": {
            "name": "_to_py_kw",
            "location": 1473,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": [
                    "kw.Keyword"
                ],
                "keyword_fn": [
                    "Callable[([kw.Keyword], Any)]"
                ]
            }
        },
        "_to_py_list": {
            "name": "_to_py_list",
            "location": 1480,
            "return": [
                "list"
            ],
            "arguments": {
                "o": [
                    "Union[(IPersistentList, ISeq, IPersistentVector)]"
                ],
                "keyword_fn": [
                    "Callable[([kw.Keyword], Any)]"
                ]
            }
        },
        "_to_py_map": {
            "name": "_to_py_map",
            "location": 1488,
            "return": [
                "dict"
            ],
            "arguments": {
                "o": [
                    "IPersistentMap"
                ],
                "keyword_fn": [
                    "Callable[([kw.Keyword], Any)]"
                ]
            }
        },
        "_to_py_set": {
            "name": "_to_py_set",
            "location": 1498,
            "return": [
                "set"
            ],
            "arguments": {
                "o": [
                    "IPersistentSet"
                ],
                "keyword_fn": [
                    "Callable[([kw.Keyword], Any)]"
                ]
            }
        },
        "lrepr": {
            "name": "lrepr",
            "location": 1504,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [],
                "human_readable": [
                    "bool"
                ]
            }
        },
        "lstr": {
            "name": "lstr",
            "location": 1527,
            "return": [
                "str"
            ],
            "arguments": {
                "o": []
            }
        },
        "repl_completions": {
            "name": "repl_completions",
            "location": 1535,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_collect_args": {
            "name": "_collect_args",
            "location": 1553,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "args": []
            }
        },
        "_collect_args_tuple": {
            "name": "_collect_args_tuple",
            "location": 1559,
            "return": [
                "ISeq"
            ],
            "arguments": {
                "args": [
                    "tuple"
                ]
            }
        },
        "_trampoline": {
            "name": "_trampoline",
            "location": 1593,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_lisp_fn_apply_kwargs": {
            "name": "_lisp_fn_apply_kwargs",
            "location": 1610,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_lisp_fn_collect_kwargs": {
            "name": "_lisp_fn_collect_kwargs",
            "location": 1631,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_with_attrs": {
            "name": "_with_attrs",
            "location": 1650,
            "return": [],
            "arguments": {}
        },
        "_fn_with_meta": {
            "name": "_fn_with_meta",
            "location": 1662,
            "return": [],
            "arguments": {
                "f": [],
                "meta": [
                    "Optional[lmap.PersistentMap]"
                ]
            }
        },
        "_basilisp_fn": {
            "name": "_basilisp_fn",
            "location": 1690,
            "return": [],
            "arguments": {
                "arities": [
                    "Tuple[Union[(int, kw.Keyword)]]"
                ]
            }
        },
        "_basilisp_type": {
            "name": "_basilisp_type",
            "location": 1705,
            "return": [],
            "arguments": {
                "fields": [
                    "Iterable[str]"
                ],
                "interfaces": [
                    "Iterable[Type]"
                ],
                "artificially_abstract_bases": [
                    "AbstractSet[Type]"
                ],
                "members": [
                    "Iterable[str]"
                ]
            }
        },
        "resolve_alias": {
            "name": "resolve_alias",
            "location": 1783,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {
                "s": [
                    "sym.Symbol"
                ],
                "ns": [
                    "Optional[Namespace]"
                ]
            }
        },
        "resolve_var": {
            "name": "resolve_var",
            "location": 1803,
            "return": [
                "Optional[Var]"
            ],
            "arguments": {
                "s": [
                    "sym.Symbol"
                ],
                "ns": [
                    "Optional[Namespace]"
                ]
            }
        },
        "bindings": {
            "name": "bindings",
            "location": 1815,
            "return": [],
            "arguments": {
                "bindings": [
                    "Optional[Mapping[(Var, Any)]]"
                ]
            }
        },
        "ns_bindings": {
            "name": "ns_bindings",
            "location": 1833,
            "return": [
                "Iterator[Namespace]"
            ],
            "arguments": {
                "ns_name": [
                    "str"
                ],
                "module": [
                    "BasilispModule"
                ]
            }
        },
        "remove_ns_bindings": {
            "name": "remove_ns_bindings",
            "location": 1846,
            "return": [],
            "arguments": {}
        },
        "get_current_ns": {
            "name": "get_current_ns",
            "location": 1859,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "set_current_ns": {
            "name": "set_current_ns",
            "location": 1869,
            "return": [
                "Var"
            ],
            "arguments": {
                "ns_name": [
                    "str"
                ],
                "module": [
                    "BasilispModule"
                ]
            }
        },
        "add_generated_python": {
            "name": "add_generated_python",
            "location": 1889,
            "return": [
                "None"
            ],
            "arguments": {
                "generated_python": [
                    "str"
                ],
                "which_ns": [
                    "Optional[Namespace]"
                ]
            }
        },
        "print_generated_python": {
            "name": "print_generated_python",
            "location": 1911,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "init_ns_var": {
            "name": "init_ns_var",
            "location": 1926,
            "return": [
                "Var"
            ],
            "arguments": {}
        },
        "bootstrap_core": {
            "name": "bootstrap_core",
            "location": 1949,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler_opts": [
                    "CompilerOpts"
                ]
            }
        },
        "get_compiler_opts": {
            "name": "get_compiler_opts",
            "location": 2083,
            "return": [
                "CompilerOpts"
            ],
            "arguments": {}
        },
        "_VarBindings.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unbound.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "'Var'"
                ]
            }
        },
        "Unbound.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unbound.__eq__": {
            "name": "__eq__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Var.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "'Namespace'"
                ],
                "name": [
                    "sym.Symbol"
                ],
                "dynamic": [
                    "bool"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "Var.__repr__": {
            "name": "__repr__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Var.ns": {
            "name": "ns",
            "location": 271,
            "return": [
                "'Namespace'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.name": {
            "name": "name",
            "location": 275,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.dynamic": {
            "name": "dynamic",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.set_dynamic": {
            "name": "set_dynamic",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic": [
                    "bool"
                ]
            }
        },
        "Var.is_private": {
            "name": "is_private",
            "location": 291,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.is_bound": {
            "name": "is_bound",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var._set_root": {
            "name": "_set_root",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newval": []
            }
        },
        "Var.root": {
            "name": "root",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Var.bind_root": {
            "name": "bind_root",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Var.alter_root": {
            "name": "alter_root",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "Var.push_bindings": {
            "name": "push_bindings",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Var.pop_bindings": {
            "name": "pop_bindings",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Var.deref": {
            "name": "deref",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Var.is_thread_bound": {
            "name": "is_thread_bound",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Var.value": {
            "name": "value",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Var.set_value": {
            "name": "set_value",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Var.intern": {
            "name": "intern",
            "location": 375,
            "return": [
                "'Var'"
            ],
            "arguments": {
                "cls": [],
                "ns": [
                    "Union[('Namespace', sym.Symbol)]"
                ],
                "name": [
                    "sym.Symbol"
                ],
                "val": [],
                "dynamic": [
                    "bool"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "Var.intern_unbound": {
            "name": "intern_unbound",
            "location": 403,
            "return": [
                "'Var'"
            ],
            "arguments": {
                "cls": [],
                "ns": [
                    "Union[('Namespace', sym.Symbol)]"
                ],
                "name": [
                    "sym.Symbol"
                ],
                "dynamic": [
                    "bool"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "Var.find_in_ns": {
            "name": "find_in_ns",
            "location": 414,
            "return": [
                "'Optional[Var]'"
            ],
            "arguments": {
                "ns_or_sym": [
                    "Union[('Namespace', sym.Symbol)]"
                ],
                "name_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "Var.find": {
            "name": "find",
            "location": 427,
            "return": [
                "'Optional[Var]'"
            ],
            "arguments": {
                "cls": [],
                "ns_qualified_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "Var.find_safe": {
            "name": "find_safe",
            "location": 440,
            "return": [
                "'Var'"
            ],
            "arguments": {
                "cls": [],
                "ns_qualified_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "_ThreadBindings.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ThreadBindings.get_bindings": {
            "name": "get_bindings",
            "location": 462,
            "return": [
                "FrameStack"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadBindings.push_bindings": {
            "name": "push_bindings",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Frame"
                ]
            }
        },
        "_ThreadBindings.pop_bindings": {
            "name": "pop_bindings",
            "location": 468,
            "return": [
                "Frame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "sym.Symbol"
                ],
                "module": [
                    "BasilispModule"
                ]
            }
        },
        "Namespace.name": {
            "name": "name",
            "location": 585,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.module": {
            "name": "module",
            "location": 593,
            "return": [],
            "arguments": {
                "self": [],
                "m": [
                    "BasilispModule"
                ]
            }
        },
        "Namespace.aliases": {
            "name": "aliases",
            "location": 602,
            "return": [
                "NamespaceMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.imports": {
            "name": "imports",
            "location": 609,
            "return": [
                "ModuleMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.import_aliases": {
            "name": "import_aliases",
            "location": 616,
            "return": [
                "AliasMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.interns": {
            "name": "interns",
            "location": 622,
            "return": [
                "VarMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.refers": {
            "name": "refers",
            "location": 630,
            "return": [
                "VarMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__repr__": {
            "name": "__repr__",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__hash__": {
            "name": "__hash__",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.require": {
            "name": "require",
            "location": 643,
            "return": [
                "BasilispModule"
            ],
            "arguments": {
                "self": [],
                "ns_name": [
                    "str"
                ]
            }
        },
        "Namespace.add_alias": {
            "name": "add_alias",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "'Namespace'"
                ]
            }
        },
        "Namespace.get_alias": {
            "name": "get_alias",
            "location": 671,
            "return": [
                "'Optional[Namespace]'"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.remove_alias": {
            "name": "remove_alias",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.intern": {
            "name": "intern",
            "location": 681,
            "return": [
                "Var"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ],
                "var": [
                    "Var"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "Namespace.unmap": {
            "name": "unmap",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.find": {
            "name": "find",
            "location": 696,
            "return": [
                "Optional[Var]"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.add_import": {
            "name": "add_import",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ],
                "module": [
                    "Module"
                ]
            }
        },
        "Namespace.get_import": {
            "name": "get_import",
            "location": 716,
            "return": [
                "Optional[BasilispModule]"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.add_refer": {
            "name": "add_refer",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ],
                "var": [
                    "Var"
                ]
            }
        },
        "Namespace.get_refer": {
            "name": "get_refer",
            "location": 737,
            "return": [
                "Optional[Var]"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.refer_all": {
            "name": "refer_all",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other_ns": [
                    "'Namespace'"
                ]
            }
        },
        "Namespace.ns_cache": {
            "name": "ns_cache",
            "location": 752,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Namespace.__get_or_create": {
            "name": "__get_or_create",
            "location": 757,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "ns_cache": [
                    "NamespaceMap"
                ],
                "name": [
                    "sym.Symbol"
                ],
                "module": [
                    "BasilispModule"
                ]
            }
        },
        "Namespace.get_or_create": {
            "name": "get_or_create",
            "location": 771,
            "return": [
                "'Namespace'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "sym.Symbol"
                ],
                "module": [
                    "BasilispModule"
                ]
            }
        },
        "Namespace.get": {
            "name": "get",
            "location": 782,
            "return": [
                "'Optional[Namespace]'"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.remove": {
            "name": "remove",
            "location": 788,
            "return": [
                "Optional['Namespace']"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.__completion_matcher": {
            "name": "__completion_matcher",
            "location": 806,
            "return": [
                "CompletionMatcher"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Namespace.__complete_alias": {
            "name": "__complete_alias",
            "location": 816,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "name_in_ns": [
                    "Optional[str]"
                ]
            }
        },
        "Namespace.__complete_imports_and_aliases": {
            "name": "__complete_imports_and_aliases",
            "location": 836,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "name_in_module": [
                    "Optional[str]"
                ]
            }
        },
        "Namespace.__complete_interns": {
            "name": "__complete_interns",
            "location": 865,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "include_private_vars": [
                    "bool"
                ]
            }
        },
        "Namespace.__complete_refers": {
            "name": "__complete_refers",
            "location": 884,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Namespace.complete": {
            "name": "complete",
            "location": 895,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "partial.partial_f": {
            "name": "partial_f",
            "location": 1266,
            "return": [],
            "arguments": {}
        },
        "_TrampolineArgs.__init__": {
            "name": "__init__",
            "location": 1566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "has_varargs": [
                    "bool"
                ]
            }
        },
        "_TrampolineArgs.args": {
            "name": "args",
            "location": 1572,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrampolineArgs.kwargs": {
            "name": "kwargs",
            "location": 1589,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_trampoline.trampoline": {
            "name": "trampoline",
            "location": 1598,
            "return": [],
            "arguments": {}
        },
        "_lisp_fn_apply_kwargs.wrapped_f": {
            "name": "wrapped_f",
            "location": 1620,
            "return": [],
            "arguments": {}
        },
        "_lisp_fn_collect_kwargs.wrapped_f": {
            "name": "wrapped_f",
            "location": 1641,
            "return": [],
            "arguments": {}
        },
        "_with_attrs.decorator": {
            "name": "decorator",
            "location": 1654,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_basilisp_fn.wrap_fn": {
            "name": "wrap_fn",
            "location": 1694,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_basilisp_type.wrap_class": {
            "name": "wrap_class",
            "location": 1714,
            "return": [],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        },
        "bootstrap_core.in_ns": {
            "name": "in_ns",
            "location": 1956,
            "return": [],
            "arguments": {
                "s": [
                    "sym.Symbol"
                ]
            }
        },
        "Namespace.__completion_matcher.is_match": {
            "name": "is_match",
            "location": 810,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [
                    "Tuple[(sym.Symbol, Any)]"
                ]
            }
        },
        "_fn_with_meta.wrapped_f": {
            "name": "wrapped_f",
            "location": 1678,
            "return": [],
            "arguments": {}
        },
        "Namespace.__complete_interns.is_match": {
            "name": "is_match",
            "location": 875,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [
                    "Tuple[(sym.Symbol, Var)]"
                ]
            }
        },
        "sort_by.key.__init__": {
            "name": "__init__",
            "location": 1386,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "sort_by.key.__lt__": {
            "name": "__lt__",
            "location": 1389,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "sort_by.key.__gt__": {
            "name": "__gt__",
            "location": 1392,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "sort_by.key.__eq__": {
            "name": "__eq__",
            "location": 1395,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "sort_by.key.__le__": {
            "name": "__le__",
            "location": 1398,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "sort_by.key.__ge__": {
            "name": "__ge__",
            "location": 1401,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/seq.py": {
        "sequence": {
            "name": "sequence",
            "location": 254,
            "return": [
                "ISeq[Any]"
            ],
            "arguments": {
                "s": [
                    "Iterable"
                ]
            }
        },
        "_seq_or_nil": {
            "name": "_seq_or_nil",
            "location": 263,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "s": [
                    "Optional[ISeq]"
                ]
            }
        },
        "to_seq": {
            "name": "to_seq",
            "location": 271,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "o": []
            }
        },
        "_to_seq_none": {
            "name": "_to_seq_none",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "_to_seq_iseq": {
            "name": "_to_seq_iseq",
            "location": 282,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "o": [
                    "ISeq"
                ]
            }
        },
        "_to_seq_lazyseq": {
            "name": "_to_seq_lazyseq",
            "location": 287,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "o": [
                    "LazySeq"
                ]
            }
        },
        "_to_seq_iseqable": {
            "name": "_to_seq_iseqable",
            "location": 293,
            "return": [
                "Optional[ISeq]"
            ],
            "arguments": {
                "o": [
                    "ISeqable"
                ]
            }
        },
        "_EmptySequence.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "_EmptySequence.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EmptySequence.__bool__": {
            "name": "__bool__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EmptySequence.seq": {
            "name": "seq",
            "location": 28,
            "return": [
                "Optional[ISeq[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptySequence.meta": {
            "name": "meta",
            "location": 32,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptySequence.with_meta": {
            "name": "with_meta",
            "location": 35,
            "return": [
                "'_EmptySequence[T]'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "_EmptySequence.is_empty": {
            "name": "is_empty",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptySequence.first": {
            "name": "first",
            "location": 43,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptySequence.rest": {
            "name": "rest",
            "location": 47,
            "return": [
                "ISeq[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EmptySequence.cons": {
            "name": "cons",
            "location": 50,
            "return": [
                "ISeq[T]"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "T"
                ]
            }
        },
        "Cons.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [],
                "seq": [
                    "Optional[ISeq[T]]"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "Cons.is_empty": {
            "name": "is_empty",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.first": {
            "name": "first",
            "location": 75,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.rest": {
            "name": "rest",
            "location": 79,
            "return": [
                "ISeq[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.cons": {
            "name": "cons",
            "location": 82,
            "return": [
                "'Cons[T]'"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "T"
                ]
            }
        },
        "Cons.meta": {
            "name": "meta",
            "location": 86,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.with_meta": {
            "name": "with_meta",
            "location": 89,
            "return": [
                "'Cons[T]'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "_Sequence.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Iterator[T]"
                ],
                "first": [
                    "T"
                ]
            }
        },
        "_Sequence.meta": {
            "name": "meta",
            "location": 114,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Sequence.with_meta": {
            "name": "with_meta",
            "location": 117,
            "return": [
                "'_Sequence[T]'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "_Sequence.is_empty": {
            "name": "is_empty",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Sequence.first": {
            "name": "first",
            "location": 125,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Sequence.rest": {
            "name": "rest",
            "location": 130,
            "return": [
                "'ISeq[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Sequence.cons": {
            "name": "cons",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "LazySeq.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "Optional[LazySeqGenerator]"
                ],
                "obj": [
                    "Optional[ISeq[T]]"
                ],
                "seq": [
                    "Optional[ISeq[T]]"
                ]
            }
        },
        "LazySeq.meta": {
            "name": "meta",
            "location": 173,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySeq.with_meta": {
            "name": "with_meta",
            "location": 176,
            "return": [
                "'LazySeq[T]'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "LazySeq._compute_seq": {
            "name": "_compute_seq",
            "location": 188,
            "return": [
                "Optional[ISeq[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySeq.seq": {
            "name": "seq",
            "location": 210,
            "return": [
                "Optional[ISeq[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySeq.is_empty": {
            "name": "is_empty",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySeq.first": {
            "name": "first",
            "location": 233,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySeq.rest": {
            "name": "rest",
            "location": 240,
            "return": [
                "'ISeq[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySeq.cons": {
            "name": "cons",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "LazySeq.is_realized": {
            "name": "is_realized",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/set.py": {
        "set": {
            "name": "set",
            "location": 189,
            "return": [
                "PersistentSet[T]"
            ],
            "arguments": {
                "members": [
                    "Iterable[T]"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "s": {
            "name": "s",
            "location": 196,
            "return": [
                "PersistentSet[T]"
            ],
            "arguments": {}
        },
        "TransientSet.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evolver": [
                    "'MapMutation[T, T]'"
                ]
            }
        },
        "TransientSet.__bool__": {
            "name": "__bool__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransientSet.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "TransientSet.__contains__": {
            "name": "__contains__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TransientSet.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TransientSet.__len__": {
            "name": "__len__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransientSet.cons_transient": {
            "name": "cons_transient",
            "location": 50,
            "return": [
                "'TransientSet'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientSet.disj_transient": {
            "name": "disj_transient",
            "location": 55,
            "return": [
                "'TransientSet'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientSet.to_persistent": {
            "name": "to_persistent",
            "location": 63,
            "return": [
                "'PersistentSet[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "'_Map[T, T]'"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentSet.from_iterable": {
            "name": "from_iterable",
            "location": 85,
            "return": [
                "'PersistentSet'"
            ],
            "arguments": {
                "cls": [],
                "members": [
                    "Optional[Iterable[T]]"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentSet.__bool__": {
            "name": "__bool__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.__call__": {
            "name": "__call__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "PersistentSet.__contains__": {
            "name": "__contains__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PersistentSet.__eq__": {
            "name": "__eq__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PersistentSet.__hash__": {
            "name": "__hash__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.__iter__": {
            "name": "__iter__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.__len__": {
            "name": "__len__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet._lrepr": {
            "name": "_lrepr",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.difference": {
            "name": "difference",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.intersection": {
            "name": "intersection",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.union": {
            "name": "union",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.meta": {
            "name": "meta",
            "location": 152,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.with_meta": {
            "name": "with_meta",
            "location": 155,
            "return": [
                "'PersistentSet[T]'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentSet.cons": {
            "name": "cons",
            "location": 158,
            "return": [
                "'PersistentSet[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.disj": {
            "name": "disj",
            "location": 164,
            "return": [
                "'PersistentSet[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.empty": {
            "name": "empty",
            "location": 174,
            "return": [
                "'PersistentSet'"
            ],
            "arguments": {}
        },
        "PersistentSet.seq": {
            "name": "seq",
            "location": 177,
            "return": [
                "Optional[ISeq[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentSet.to_transient": {
            "name": "to_transient",
            "location": 182,
            "return": [
                "TransientSet"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/symbol.py": {
        "symbol": {
            "name": "symbol",
            "location": 75,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "ns": [
                    "Optional[str]"
                ],
                "meta": []
            }
        },
        "Symbol.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "ns": [
                    "Optional[str]"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "Symbol._lrepr": {
            "name": "_lrepr",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.name": {
            "name": "name",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.ns": {
            "name": "ns",
            "location": 38,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.meta": {
            "name": "meta",
            "location": 42,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.with_meta": {
            "name": "with_meta",
            "location": 45,
            "return": [
                "'Symbol'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "Symbol.as_python_sym": {
            "name": "as_python_sym",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Symbol.__hash__": {
            "name": "__hash__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__lt__": {
            "name": "__lt__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/typing.py": {},
    "basilisp-main/src/basilisp/lang/util.py": {
        "count": {
            "name": "count",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "seq": [
                    "Iterable"
                ]
            }
        },
        "munge": {
            "name": "munge",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "allow_builtins": [
                    "bool"
                ]
            }
        },
        "demunge": {
            "name": "demunge",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_abstract": {
            "name": "is_abstract",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "tp": [
                    "Type"
                ]
            }
        },
        "next_name_id": {
            "name": "next_name_id",
            "location": 202,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "genname": {
            "name": "genname",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "decimal_from_str": {
            "name": "decimal_from_str",
            "location": 213,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "decimal_str": [
                    "str"
                ]
            }
        },
        "fraction": {
            "name": "fraction",
            "location": 218,
            "return": [
                "Fraction"
            ],
            "arguments": {
                "numerator": [
                    "int"
                ],
                "denominator": [
                    "int"
                ]
            }
        },
        "inst_from_str": {
            "name": "inst_from_str",
            "location": 223,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "inst_str": [
                    "str"
                ]
            }
        },
        "regex_from_str": {
            "name": "regex_from_str",
            "location": 228,
            "return": [
                "Pattern"
            ],
            "arguments": {
                "regex_str": [
                    "str"
                ]
            }
        },
        "uuid_from_str": {
            "name": "uuid_from_str",
            "location": 233,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "uuid_str": [
                    "str"
                ]
            }
        },
        "demunge.demunge_replacer": {
            "name": "demunge_replacer",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "Match"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/vector.py": {
        "vector": {
            "name": "vector",
            "location": 226,
            "return": [
                "PersistentVector[T]"
            ],
            "arguments": {
                "members": [
                    "Iterable[T]"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "v": {
            "name": "v",
            "location": 233,
            "return": [
                "PersistentVector[T]"
            ],
            "arguments": {}
        },
        "TransientVector.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "'PVectorEvolver[T]'"
                ]
            }
        },
        "TransientVector.__bool__": {
            "name": "__bool__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransientVector.__contains__": {
            "name": "__contains__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TransientVector.__eq__": {
            "name": "__eq__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TransientVector.__len__": {
            "name": "__len__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransientVector.cons_transient": {
            "name": "cons_transient",
            "location": 43,
            "return": [
                "'TransientVector[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientVector.assoc_transient": {
            "name": "assoc_transient",
            "location": 48,
            "return": [
                "'TransientVector[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientVector.contains_transient": {
            "name": "contains_transient",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "TransientVector.entry_transient": {
            "name": "entry_transient",
            "location": 56,
            "return": [
                "Optional[IMapEntry[(int, T)]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "TransientVector.val_at": {
            "name": "val_at",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "default": []
            }
        },
        "TransientVector.pop_transient": {
            "name": "pop_transient",
            "location": 68,
            "return": [
                "'TransientVector[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransientVector.to_persistent": {
            "name": "to_persistent",
            "location": 74,
            "return": [
                "'PersistentVector[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "'PVector[T]'"
                ],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentVector.__bool__": {
            "name": "__bool__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.__contains__": {
            "name": "__contains__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PersistentVector.__eq__": {
            "name": "__eq__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PersistentVector.__getitem__": {
            "name": "__getitem__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PersistentVector.__hash__": {
            "name": "__hash__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.__iter__": {
            "name": "__iter__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.__len__": {
            "name": "__len__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.__lt__": {
            "name": "__lt__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PersistentVector._lrepr": {
            "name": "_lrepr",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.meta": {
            "name": "meta",
            "location": 134,
            "return": [
                "Optional[IPersistentMap]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.with_meta": {
            "name": "with_meta",
            "location": 137,
            "return": [
                "'PersistentVector[T]'"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Optional[IPersistentMap]"
                ]
            }
        },
        "PersistentVector.cons": {
            "name": "cons",
            "location": 140,
            "return": [
                "'PersistentVector[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.assoc": {
            "name": "assoc",
            "location": 146,
            "return": [
                "'PersistentVector[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.contains": {
            "name": "contains",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "PersistentVector.entry": {
            "name": "entry",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "PersistentVector.val_at": {
            "name": "val_at",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "PersistentVector.empty": {
            "name": "empty",
            "location": 165,
            "return": [
                "'PersistentVector[T]'"
            ],
            "arguments": {}
        },
        "PersistentVector.seq": {
            "name": "seq",
            "location": 168,
            "return": [
                "Optional[ISeq[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.peek": {
            "name": "peek",
            "location": 173,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.pop": {
            "name": "pop",
            "location": 178,
            "return": [
                "'PersistentVector[T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.rseq": {
            "name": "rseq",
            "location": 183,
            "return": [
                "ISeq[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentVector.to_transient": {
            "name": "to_transient",
            "location": 186,
            "return": [
                "TransientVector"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapEntry.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "'PVector[Union[K, V]]'"
                ]
            }
        },
        "MapEntry.key": {
            "name": "key",
            "location": 207,
            "return": [
                "K"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapEntry.value": {
            "name": "value",
            "location": 211,
            "return": [
                "V"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapEntry.of": {
            "name": "of",
            "location": 215,
            "return": [
                "'MapEntry[K, V]'"
            ],
            "arguments": {
                "k": [
                    "K"
                ],
                "v": [
                    "V"
                ]
            }
        },
        "MapEntry.from_vec": {
            "name": "from_vec",
            "location": 219,
            "return": [
                "'MapEntry[K, V]'"
            ],
            "arguments": {
                "v": [
                    "Sequence[Union[(K, V)]]"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/volatile.py": {
        "Volatile.deref": {
            "name": "deref",
            "location": 18,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volatile.reset": {
            "name": "reset",
            "location": 21,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "T"
                ]
            }
        },
        "Volatile.swap": {
            "name": "swap",
            "location": 25,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[(..., T)]"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/__init__.py": {},
    "basilisp-main/src/basilisp/lang/compiler/analyzer.py": {
        "_bool_meta_getter": {
            "name": "_bool_meta_getter",
            "location": 612,
            "return": [
                "BoolMetaGetter"
            ],
            "arguments": {
                "meta_kw": [
                    "kw.Keyword"
                ]
            }
        },
        "_meta_getter": {
            "name": "_meta_getter",
            "location": 624,
            "return": [
                "MetaGetter"
            ],
            "arguments": {
                "meta_kw": [
                    "kw.Keyword"
                ]
            }
        },
        "_loc": {
            "name": "_loc",
            "location": 645,
            "return": [
                "Optional[Tuple[(int, int)]]"
            ],
            "arguments": {
                "form": [
                    "Union[(LispForm, ISeq)]"
                ]
            }
        },
        "_with_loc": {
            "name": "_with_loc",
            "location": 660,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_clean_meta": {
            "name": "_clean_meta",
            "location": 675,
            "return": [
                "Optional[lmap.PersistentMap]"
            ],
            "arguments": {
                "meta": [
                    "Optional[lmap.PersistentMap]"
                ]
            }
        },
        "_body_ast": {
            "name": "_body_ast",
            "location": 684,
            "return": [
                "Tuple[(Iterable[Node], Node)]"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_call_args_ast": {
            "name": "_call_args_ast",
            "location": 716,
            "return": [
                "Tuple[(Iterable[Node], KeywordArgs)]"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_with_meta": {
            "name": "_with_meta",
            "location": 775,
            "return": [],
            "arguments": {
                "gen_node": []
            }
        },
        "_analyze_form": {
            "name": "_analyze_form",
            "location": 823,
            "return": [],
            "arguments": {
                "form": [
                    "Union[(ReaderForm, ISeq)]"
                ],
                "_": [
                    "AnalyzerContext"
                ]
            }
        },
        "_await_ast": {
            "name": "_await_ast",
            "location": 832,
            "return": [
                "Await"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_def_ast": {
            "name": "_def_ast",
            "location": 856,
            "return": [
                "Def"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "__deftype_method_param_bindings": {
            "name": "__deftype_method_param_bindings",
            "location": 1023,
            "return": [
                "Tuple[(bool, int, List[Binding])]"
            ],
            "arguments": {
                "params": [
                    "vec.PersistentVector"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "special_form": [
                    "sym.Symbol"
                ]
            }
        },
        "__deftype_classmethod": {
            "name": "__deftype_classmethod",
            "location": 1091,
            "return": [
                "DefTypeClassMethod"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "method_name": [
                    "str"
                ],
                "args": [
                    "vec.PersistentVector"
                ],
                "kwarg_support": [
                    "Optional[KeywordArgSupport]"
                ]
            }
        },
        "__deftype_or_reify_method": {
            "name": "__deftype_or_reify_method",
            "location": 1151,
            "return": [
                "DefTypeMethodArity"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "method_name": [
                    "str"
                ],
                "args": [
                    "vec.PersistentVector"
                ],
                "special_form": [
                    "sym.Symbol"
                ],
                "kwarg_support": [
                    "Optional[KeywordArgSupport]"
                ]
            }
        },
        "__deftype_or_reify_property": {
            "name": "__deftype_or_reify_property",
            "location": 1216,
            "return": [
                "DefTypeProperty"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "method_name": [
                    "str"
                ],
                "args": [
                    "vec.PersistentVector"
                ],
                "special_form": [
                    "sym.Symbol"
                ]
            }
        },
        "__deftype_staticmethod": {
            "name": "__deftype_staticmethod",
            "location": 1282,
            "return": [
                "DefTypeStaticMethod"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "method_name": [
                    "str"
                ],
                "args": [
                    "vec.PersistentVector"
                ],
                "kwarg_support": [
                    "Optional[KeywordArgSupport]"
                ]
            }
        },
        "__deftype_or_reify_prop_or_method_arity": {
            "name": "__deftype_or_reify_prop_or_method_arity",
            "location": 1320,
            "return": [
                "Union[(DefTypeMethodArity, DefTypePythonMember)]"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "special_form": [
                    "sym.Symbol"
                ]
            }
        },
        "__deftype_or_reify_method_node_from_arities": {
            "name": "__deftype_or_reify_method_node_from_arities",
            "location": 1402,
            "return": [
                "DefTypeMember"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "arities": [
                    "List[DefTypeMethodArity]"
                ],
                "special_form": [
                    "sym.Symbol"
                ]
            }
        },
        "__deftype_or_reify_impls": {
            "name": "__deftype_or_reify_impls",
            "location": 1462,
            "return": [
                "Tuple[(List[DefTypeBase], List[DefTypeMember])]"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "special_form": [
                    "sym.Symbol"
                ]
            }
        },
        "__is_deftype_member": {
            "name": "__is_deftype_member",
            "location": 1574,
            "return": [
                "bool"
            ],
            "arguments": {
                "mem": []
            }
        },
        "__is_reify_member": {
            "name": "__is_reify_member",
            "location": 1583,
            "return": [
                "bool"
            ],
            "arguments": {
                "mem": []
            }
        },
        "__deftype_and_reify_impls_are_all_abstract": {
            "name": "__deftype_and_reify_impls_are_all_abstract",
            "location": 1588,
            "return": [
                "Tuple[(bool, lset.PersistentSet[DefTypeBase])]"
            ],
            "arguments": {
                "special_form": [
                    "sym.Symbol"
                ],
                "fields": [
                    "Iterable[str]"
                ],
                "interfaces": [
                    "Iterable[DefTypeBase]"
                ],
                "members": [
                    "Iterable[DefTypeMember]"
                ]
            }
        },
        "_deftype_ast": {
            "name": "_deftype_ast",
            "location": 1724,
            "return": [
                "DefType"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_do_ast": {
            "name": "_do_ast",
            "location": 1819,
            "return": [
                "Do"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "__fn_method_ast": {
            "name": "__fn_method_ast",
            "location": 1830,
            "return": [
                "FnArity"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ],
                "fnname": [
                    "Optional[sym.Symbol]"
                ],
                "is_async": [
                    "bool"
                ]
            }
        },
        "__fn_kwargs_support": {
            "name": "__fn_kwargs_support",
            "location": 1920,
            "return": [
                "Optional[KeywordArgSupport]"
            ],
            "arguments": {
                "o": [
                    "IMeta"
                ]
            }
        },
        "__unquote_args": {
            "name": "__unquote_args",
            "location": 1941,
            "return": [],
            "arguments": {
                "f": [
                    "LispForm"
                ],
                "_": [
                    "FrozenSet[sym.Symbol]"
                ]
            }
        },
        "__unquote_args_sym": {
            "name": "__unquote_args_sym",
            "location": 1946,
            "return": [],
            "arguments": {
                "f": [
                    "sym.Symbol"
                ],
                "args": [
                    "FrozenSet[sym.Symbol]"
                ]
            }
        },
        "_inline_fn_ast": {
            "name": "_inline_fn_ast",
            "location": 1952,
            "return": [
                "Optional[Fn]"
            ],
            "arguments": {
                "ctx": [
                    "AnalyzerContext"
                ],
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "name": [
                    "Optional[Binding]"
                ],
                "arities": [
                    "vec.PersistentVector[FnArity]"
                ],
                "num_variadic": [
                    "int"
                ]
            }
        },
        "_fn_ast": {
            "name": "_fn_ast",
            "location": 2003,
            "return": [
                "Fn"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_host_call_ast": {
            "name": "_host_call_ast",
            "location": 2139,
            "return": [
                "HostCall"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_host_prop_ast": {
            "name": "_host_prop_ast",
            "location": 2162,
            "return": [
                "HostField"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_host_interop_ast": {
            "name": "_host_interop_ast",
            "location": 2214,
            "return": [
                "Union[(HostCall, HostField)]"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_if_ast": {
            "name": "_if_ast",
            "location": 2275,
            "return": [
                "If"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_import_ast": {
            "name": "_import_ast",
            "location": 2305,
            "return": [
                "Import"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "__handle_macroexpanded_ast": {
            "name": "__handle_macroexpanded_ast",
            "location": 2370,
            "return": [
                "Node"
            ],
            "arguments": {
                "original": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "expanded": [
                    "Union[(ReaderForm, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_invoke_ast": {
            "name": "_invoke_ast",
            "location": 2394,
            "return": [
                "Node"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_let_ast": {
            "name": "_let_ast",
            "location": 2438,
            "return": [
                "Let"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "__letfn_fn_body": {
            "name": "__letfn_fn_body",
            "location": 2488,
            "return": [
                "Fn"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_letfn_ast": {
            "name": "_letfn_ast",
            "location": 2530,
            "return": [
                "LetFn"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_loop_ast": {
            "name": "_loop_ast",
            "location": 2609,
            "return": [
                "Loop"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_quote_ast": {
            "name": "_quote_ast",
            "location": 2663,
            "return": [
                "Quote"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_assert_no_recur": {
            "name": "_assert_no_recur",
            "location": 2684,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "_assert_recur_is_tail": {
            "name": "_assert_recur_is_tail",
            "location": 2697,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "_recur_ast": {
            "name": "_recur_ast",
            "location": 2749,
            "return": [
                "Recur"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_reify_ast": {
            "name": "_reify_ast",
            "location": 2769,
            "return": [
                "Reify"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_require_ast": {
            "name": "_require_ast",
            "location": 2800,
            "return": [
                "Require"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_set_bang_ast": {
            "name": "_set_bang_ast",
            "location": 2847,
            "return": [
                "SetBang"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_throw_ast": {
            "name": "_throw_ast",
            "location": 2896,
            "return": [
                "Throw"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_catch_ast": {
            "name": "_catch_ast",
            "location": 2907,
            "return": [
                "Catch"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_try_ast": {
            "name": "_try_ast",
            "location": 2953,
            "return": [
                "Try"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_var_ast": {
            "name": "_var_ast",
            "location": 3028,
            "return": [
                "VarRef"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_yield_ast": {
            "name": "_yield_ast",
            "location": 3057,
            "return": [
                "Yield"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_list_node": {
            "name": "_list_node",
            "location": 3116,
            "return": [
                "Node"
            ],
            "arguments": {
                "form": [
                    "ISeq"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_resolve_nested_symbol": {
            "name": "_resolve_nested_symbol",
            "location": 3137,
            "return": [
                "HostField"
            ],
            "arguments": {
                "ctx": [
                    "AnalyzerContext"
                ],
                "form": [
                    "sym.Symbol"
                ]
            }
        },
        "__resolve_namespaced_symbol_in_ns": {
            "name": "__resolve_namespaced_symbol_in_ns",
            "location": 3156,
            "return": [
                "Optional[Union[(MaybeHostForm, VarRef)]]"
            ],
            "arguments": {
                "ctx": [
                    "AnalyzerContext"
                ],
                "which_ns": [
                    "runtime.Namespace"
                ],
                "form": [
                    "sym.Symbol"
                ]
            }
        },
        "__resolve_namespaced_symbol": {
            "name": "__resolve_namespaced_symbol",
            "location": 3233,
            "return": [
                "Union[(Const, HostField, MaybeClass, MaybeHostForm, VarRef)]"
            ],
            "arguments": {
                "ctx": [
                    "AnalyzerContext"
                ],
                "form": [
                    "sym.Symbol"
                ]
            }
        },
        "__resolve_bare_symbol": {
            "name": "__resolve_bare_symbol",
            "location": 3342,
            "return": [
                "Union[(Const, MaybeClass, VarRef)]"
            ],
            "arguments": {
                "ctx": [
                    "AnalyzerContext"
                ],
                "form": [
                    "sym.Symbol"
                ]
            }
        },
        "_resolve_sym": {
            "name": "_resolve_sym",
            "location": 3392,
            "return": [
                "Union[(Const, HostField, MaybeClass, MaybeHostForm, VarRef)]"
            ],
            "arguments": {
                "ctx": [
                    "AnalyzerContext"
                ],
                "form": [
                    "sym.Symbol"
                ]
            }
        },
        "_symbol_node": {
            "name": "_symbol_node",
            "location": 3419,
            "return": [
                "Union[(Const, HostField, Local, MaybeClass, MaybeHostForm, VarRef)]"
            ],
            "arguments": {
                "form": [
                    "sym.Symbol"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_py_dict_node": {
            "name": "_py_dict_node",
            "location": 3441,
            "return": [
                "Union[(Const, PyDict)]"
            ],
            "arguments": {
                "form": [
                    "dict"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_py_list_node": {
            "name": "_py_list_node",
            "location": 3460,
            "return": [
                "Union[(Const, PyList)]"
            ],
            "arguments": {
                "form": [
                    "list"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_py_set_node": {
            "name": "_py_set_node",
            "location": 3472,
            "return": [
                "Union[(Const, PySet)]"
            ],
            "arguments": {
                "form": [
                    "set"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_py_tuple_node": {
            "name": "_py_tuple_node",
            "location": 3484,
            "return": [
                "Union[(Const, PyTuple)]"
            ],
            "arguments": {
                "form": [
                    "tuple"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_map_node": {
            "name": "_map_node",
            "location": 3495,
            "return": [
                "MapNode"
            ],
            "arguments": {
                "form": [
                    "lmap.PersistentMap"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_map_node_or_quoted": {
            "name": "_map_node_or_quoted",
            "location": 3511,
            "return": [
                "Union[(Const, MapNode)]"
            ],
            "arguments": {
                "form": [
                    "lmap.PersistentMap"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_queue_node": {
            "name": "_queue_node",
            "location": 3520,
            "return": [
                "QueueNode"
            ],
            "arguments": {
                "form": [
                    "lqueue.PersistentQueue"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_queue_node_or_quoted": {
            "name": "_queue_node_or_quoted",
            "location": 3530,
            "return": [
                "Union[(Const, QueueNode)]"
            ],
            "arguments": {
                "form": [
                    "lqueue.PersistentQueue"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_set_node": {
            "name": "_set_node",
            "location": 3539,
            "return": [
                "SetNode"
            ],
            "arguments": {
                "form": [
                    "lset.PersistentSet"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_set_node_or_quoted": {
            "name": "_set_node_or_quoted",
            "location": 3549,
            "return": [
                "Union[(Const, SetNode)]"
            ],
            "arguments": {
                "form": [
                    "lset.PersistentSet"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_vector_node": {
            "name": "_vector_node",
            "location": 3558,
            "return": [
                "VectorNode"
            ],
            "arguments": {
                "form": [
                    "vec.PersistentVector"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_vector_node_or_quoted": {
            "name": "_vector_node_or_quoted",
            "location": 3568,
            "return": [
                "Union[(Const, VectorNode)]"
            ],
            "arguments": {
                "form": [
                    "vec.PersistentVector"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_const_node_type": {
            "name": "_const_node_type",
            "location": 3577,
            "return": [
                "ConstType"
            ],
            "arguments": {
                "_": [
                    "Any"
                ]
            }
        },
        "_const_node": {
            "name": "_const_node",
            "location": 3627,
            "return": [
                "Const"
            ],
            "arguments": {
                "form": [
                    "ReaderForm"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "analyze_form": {
            "name": "analyze_form",
            "location": 3699,
            "return": [
                "Node"
            ],
            "arguments": {
                "ctx": [
                    "AnalyzerContext"
                ],
                "form": [
                    "ReaderForm"
                ]
            }
        },
        "macroexpand_1": {
            "name": "macroexpand_1",
            "location": 3705,
            "return": [
                "ReaderForm"
            ],
            "arguments": {
                "form": [
                    "ReaderForm"
                ]
            }
        },
        "macroexpand": {
            "name": "macroexpand",
            "location": 3724,
            "return": [
                "ReaderForm"
            ],
            "arguments": {
                "form": [
                    "ReaderForm"
                ]
            }
        },
        "SymbolTableEntry.symbol": {
            "name": "symbol",
            "location": 188,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTableEntry.context": {
            "name": "context",
            "location": 192,
            "return": [
                "LocalType"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.new_symbol": {
            "name": "new_symbol",
            "location": 204,
            "return": [
                "'SymbolTable'"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "sym.Symbol"
                ],
                "binding": [
                    "Binding"
                ],
                "warn_if_unused": [
                    "bool"
                ]
            }
        },
        "SymbolTable.find_symbol": {
            "name": "find_symbol",
            "location": 217,
            "return": [
                "Optional[SymbolTableEntry]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "sym.Symbol"
                ]
            }
        },
        "SymbolTable.mark_used": {
            "name": "mark_used",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "sym.Symbol"
                ]
            }
        },
        "SymbolTable._warn_unused_names": {
            "name": "_warn_unused_names",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.new_frame": {
            "name": "new_frame",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "is_context_boundary": [
                    "bool"
                ],
                "warn_on_unused_names": [
                    "bool"
                ]
            }
        },
        "SymbolTable._as_env_map": {
            "name": "_as_env_map",
            "location": 281,
            "return": [
                "MutableMapping[(sym.Symbol, lmap.PersistentMap)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.as_env_map": {
            "name": "as_env_map",
            "location": 286,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.context_boundary": {
            "name": "context_boundary",
            "location": 292,
            "return": [
                "'SymbolTable'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ],
                "opts": [
                    "Optional[CompilerOpts]"
                ],
                "should_macroexpand": [
                    "bool"
                ],
                "allow_unresolved_symbols": [
                    "bool"
                ]
            }
        },
        "AnalyzerContext.current_ns": {
            "name": "current_ns",
            "location": 345,
            "return": [
                "runtime.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.filename": {
            "name": "filename",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.should_generate_auto_inlines": {
            "name": "should_generate_auto_inlines",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.should_inline_functions": {
            "name": "should_inline_functions",
            "location": 359,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.warn_on_unused_names": {
            "name": "warn_on_unused_names",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.warn_on_shadowed_name": {
            "name": "warn_on_shadowed_name",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.warn_on_shadowed_var": {
            "name": "warn_on_shadowed_var",
            "location": 376,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.warn_on_non_dynamic_set": {
            "name": "warn_on_non_dynamic_set",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.is_quoted": {
            "name": "is_quoted",
            "location": 391,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.quoted": {
            "name": "quoted",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.should_allow_unresolved_symbols": {
            "name": "should_allow_unresolved_symbols",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.should_macroexpand": {
            "name": "should_macroexpand",
            "location": 412,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.func_ctx": {
            "name": "func_ctx",
            "location": 417,
            "return": [
                "Optional[FunctionContext]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.is_async_ctx": {
            "name": "is_async_ctx",
            "location": 429,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.new_func_ctx": {
            "name": "new_func_ctx",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "context_type": [
                    "FunctionContext"
                ]
            }
        },
        "AnalyzerContext.recur_point": {
            "name": "recur_point",
            "location": 448,
            "return": [
                "Optional[RecurPoint]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.new_recur_point": {
            "name": "new_recur_point",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "loop_id": [
                    "str"
                ],
                "args": [
                    "Collection[Any]"
                ]
            }
        },
        "AnalyzerContext.symbol_table": {
            "name": "symbol_table",
            "location": 468,
            "return": [
                "SymbolTable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.put_new_symbol": {
            "name": "put_new_symbol",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "sym.Symbol"
                ],
                "binding": [
                    "Binding"
                ],
                "warn_on_shadowed_name": [
                    "bool"
                ],
                "warn_on_shadowed_var": [
                    "bool"
                ],
                "warn_if_unused": [
                    "bool"
                ],
                "symbol_table": [
                    "Optional[SymbolTable]"
                ]
            }
        },
        "AnalyzerContext.new_symbol_table": {
            "name": "new_symbol_table",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "is_context_boundary": [
                    "bool"
                ]
            }
        },
        "AnalyzerContext.hide_parent_symbol_table": {
            "name": "hide_parent_symbol_table",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.expr_pos": {
            "name": "expr_pos",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.stmt_pos": {
            "name": "stmt_pos",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.parent_pos": {
            "name": "parent_pos",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.syntax_position": {
            "name": "syntax_position",
            "location": 588,
            "return": [
                "NodeSyntacticPosition"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerContext.get_node_env": {
            "name": "get_node_env",
            "location": 593,
            "return": [
                "NodeEnv"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[NodeSyntacticPosition]"
                ]
            }
        },
        "_bool_meta_getter.has_meta_prop": {
            "name": "has_meta_prop",
            "location": 616,
            "return": [
                "bool"
            ],
            "arguments": {
                "o": [
                    "Union[(IMeta, Var)]"
                ]
            }
        },
        "_meta_getter.get_meta_prop": {
            "name": "get_meta_prop",
            "location": 628,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": [
                    "Union[(IMeta, Var)]"
                ]
            }
        },
        "_with_loc._analyze_form": {
            "name": "_analyze_form",
            "location": 665,
            "return": [
                "Node"
            ],
            "arguments": {
                "form": [
                    "Union[(LispForm, ISeq)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        },
        "_with_meta.with_meta": {
            "name": "with_meta",
            "location": 783,
            "return": [
                "Node"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, lmap.PersistentMap, ISeq, lset.PersistentSet, vec.PersistentVector)]"
                ],
                "ctx": [
                    "AnalyzerContext"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/compiler/constants.py": {},
    "basilisp-main/src/basilisp/lang/compiler/exception.py": {
        "_loc.__bool__": {
            "name": "__bool__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompilerException.data": {
            "name": "data",
            "location": 49,
            "return": [
                "IPersistentMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilerException.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/src/basilisp/lang/compiler/generator.py": {
        "_chain_py_ast": {
            "name": "_chain_py_ast",
            "location": 340,
            "return": [
                "Tuple[(PyASTStream, PyASTStream)]"
            ],
            "arguments": {}
        },
        "_load_attr": {
            "name": "_load_attr",
            "location": 352,
            "return": [
                "ast.Attribute"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "ctx": [
                    "PyASTCtx"
                ]
            }
        },
        "_simple_ast_generator": {
            "name": "_simple_ast_generator",
            "location": 368,
            "return": [],
            "arguments": {
                "gen_ast": []
            }
        },
        "_collection_ast": {
            "name": "_collection_ast",
            "location": 378,
            "return": [
                "Tuple[(PyASTStream, PyASTStream)]"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "form": [
                    "Iterable[Node]"
                ]
            }
        },
        "_class_ast": {
            "name": "_class_ast",
            "location": 385,
            "return": [
                "ast.ClassDef"
            ],
            "arguments": {
                "class_name": [
                    "str"
                ],
                "body": [
                    "List[ast.AST]"
                ],
                "bases": [
                    "Iterable[ast.AST]"
                ],
                "fields": [
                    "Iterable[str]"
                ],
                "members": [
                    "Iterable[str]"
                ],
                "verified_abstract": [
                    "bool"
                ],
                "artificially_abstract_bases": [
                    "Iterable[ast.AST]"
                ],
                "is_frozen": [
                    "bool"
                ],
                "use_slots": [
                    "bool"
                ]
            }
        },
        "_kwargs_ast": {
            "name": "_kwargs_ast",
            "location": 453,
            "return": [
                "Tuple[(PyASTStream, PyASTStream)]"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "kwargs": [
                    "KeywordArgs"
                ]
            }
        },
        "_clean_meta": {
            "name": "_clean_meta",
            "location": 472,
            "return": [
                "LispForm"
            ],
            "arguments": {
                "form": [
                    "IMeta"
                ]
            }
        },
        "_ast_with_loc": {
            "name": "_ast_with_loc",
            "location": 481,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "py_ast": [
                    "GeneratedPyAST"
                ],
                "env": [
                    "NodeEnv"
                ],
                "include_dependencies": [
                    "bool"
                ]
            }
        },
        "_with_ast_loc": {
            "name": "_with_ast_loc",
            "location": 503,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_with_ast_loc_deps": {
            "name": "_with_ast_loc_deps",
            "location": 519,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_is_dynamic": {
            "name": "_is_dynamic",
            "location": 538,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "Var"
                ]
            }
        },
        "_is_redefable": {
            "name": "_is_redefable",
            "location": 548,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "Var"
                ]
            }
        },
        "_noop_node": {
            "name": "_noop_node",
            "location": 555,
            "return": [
                "ast.AST"
            ],
            "arguments": {}
        },
        "_var_ns_as_python_sym": {
            "name": "_var_ns_as_python_sym",
            "location": 566,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "statementize": {
            "name": "statementize",
            "location": 671,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "e": [
                    "ast.AST"
                ]
            }
        },
        "expressionize": {
            "name": "expressionize",
            "location": 709,
            "return": [
                "ast.FunctionDef"
            ],
            "arguments": {
                "body": [
                    "GeneratedPyAST"
                ],
                "fn_name": [
                    "str"
                ],
                "args": [
                    "Optional[Iterable[ast.arg]]"
                ],
                "vargs": [
                    "Optional[ast.arg]"
                ]
            }
        },
        "_await_to_py_ast": {
            "name": "_await_to_py_ast",
            "location": 748,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Await"
                ]
            }
        },
        "__should_warn_on_redef": {
            "name": "__should_warn_on_redef",
            "location": 756,
            "return": [
                "bool"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "defsym": [
                    "sym.Symbol"
                ],
                "safe_name": [
                    "str"
                ],
                "def_meta": [
                    "lmap.PersistentMap"
                ]
            }
        },
        "_def_to_py_ast": {
            "name": "_def_to_py_ast",
            "location": 781,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Def"
                ]
            }
        },
        "__deftype_classmethod_to_py_ast": {
            "name": "__deftype_classmethod_to_py_ast",
            "location": 907,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefTypeClassMethod"
                ]
            }
        },
        "__deftype_property_to_py_ast": {
            "name": "__deftype_property_to_py_ast",
            "location": 943,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefTypeProperty"
                ]
            }
        },
        "__multi_arity_deftype_dispatch_method": {
            "name": "__multi_arity_deftype_dispatch_method",
            "location": 979,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "arity_map": [
                    "Mapping[(int, str)]"
                ],
                "default_name": [
                    "Optional[str]"
                ],
                "max_fixed_arity": [
                    "Optional[int]"
                ]
            }
        },
        "__multi_arity_deftype_method_to_py_ast": {
            "name": "__multi_arity_deftype_method_to_py_ast",
            "location": 1137,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefTypeMethod"
                ]
            }
        },
        "__deftype_method_arity_to_py_ast": {
            "name": "__deftype_method_arity_to_py_ast",
            "location": 1180,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefTypeMethod"
                ],
                "arity": [
                    "DefTypeMethodArity"
                ],
                "method_name": [
                    "Optional[str]"
                ]
            }
        },
        "__deftype_method_to_py_ast": {
            "name": "__deftype_method_to_py_ast",
            "location": 1226,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefTypeMethod"
                ]
            }
        },
        "__deftype_staticmethod_to_py_ast": {
            "name": "__deftype_staticmethod_to_py_ast",
            "location": 1240,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefTypeStaticMethod"
                ]
            }
        },
        "__deftype_member_to_py_ast": {
            "name": "__deftype_member_to_py_ast",
            "location": 1277,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefTypeMember"
                ]
            }
        },
        "__deftype_or_reify_bases_to_py_ast": {
            "name": "__deftype_or_reify_bases_to_py_ast",
            "location": 1289,
            "return": [
                "List[ast.AST]"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Union[(DefType, Reify)]"
                ],
                "interfaces": [
                    "Iterable[DefTypeBase]"
                ]
            }
        },
        "_deftype_to_py_ast": {
            "name": "_deftype_to_py_ast",
            "location": 1335,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "DefType"
                ]
            }
        },
        "_wrap_override_var_indirection": {
            "name": "_wrap_override_var_indirection",
            "location": 1416,
            "return": [
                "PyASTGenerator"
            ],
            "arguments": {
                "f": [
                    "PyASTGenerator"
                ]
            }
        },
        "_do_to_py_ast": {
            "name": "_do_to_py_ast",
            "location": 1449,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Do"
                ]
            }
        },
        "_synthetic_do_to_py_ast": {
            "name": "_synthetic_do_to_py_ast",
            "location": 1473,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Do"
                ]
            }
        },
        "__fn_name": {
            "name": "__fn_name",
            "location": 1489,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "s": [
                    "Optional[str]"
                ]
            }
        },
        "__fn_args_to_py_ast": {
            "name": "__fn_args_to_py_ast",
            "location": 1503,
            "return": [
                "Tuple[(List[ast.arg], Optional[ast.arg], List[ast.AST])]"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "params": [
                    "Iterable[Binding]"
                ],
                "body": [
                    "Do"
                ]
            }
        },
        "__fn_decorator": {
            "name": "__fn_decorator",
            "location": 1543,
            "return": [
                "ast.Call"
            ],
            "arguments": {
                "arities": [
                    "Iterable[int]"
                ],
                "has_rest_arg": [
                    "bool"
                ]
            }
        },
        "__fn_meta": {
            "name": "__fn_meta",
            "location": 1578,
            "return": [
                "Tuple[(Iterable[ast.AST], Iterable[ast.AST])]"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "__kwargs_support_decorator": {
            "name": "__kwargs_support_decorator",
            "location": 1597,
            "return": [
                "Iterable[ast.AST]"
            ],
            "arguments": {
                "node": [
                    "Union[(Fn, DefTypeMethodArity, DefTypeClassMethod, DefTypeStaticMethod)]"
                ]
            }
        },
        "__single_arity_fn_to_py_ast": {
            "name": "__single_arity_fn_to_py_ast",
            "location": 1610,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Fn"
                ],
                "method": [
                    "FnArity"
                ],
                "def_name": [
                    "Optional[str]"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "__handle_async_return": {
            "name": "__handle_async_return",
            "location": 1679,
            "return": [
                "ast.Return"
            ],
            "arguments": {
                "node": [
                    "ast.AST"
                ]
            }
        },
        "__handle_return": {
            "name": "__handle_return",
            "location": 1683,
            "return": [
                "ast.Return"
            ],
            "arguments": {
                "node": [
                    "ast.AST"
                ]
            }
        },
        "__multi_arity_dispatch_fn": {
            "name": "__multi_arity_dispatch_fn",
            "location": 1687,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "name": [
                    "str"
                ],
                "arity_map": [
                    "Mapping[(int, str)]"
                ],
                "default_name": [
                    "Optional[str]"
                ],
                "max_fixed_arity": [
                    "Optional[int]"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ],
                "is_async": [
                    "bool"
                ]
            }
        },
        "__multi_arity_fn_to_py_ast": {
            "name": "__multi_arity_fn_to_py_ast",
            "location": 1849,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Fn"
                ],
                "arities": [
                    "Collection[FnArity]"
                ],
                "def_name": [
                    "Optional[str]"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "_fn_to_py_ast": {
            "name": "_fn_to_py_ast",
            "location": 1929,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Fn"
                ],
                "def_name": [
                    "Optional[str]"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "__if_body_to_py_ast": {
            "name": "__if_body_to_py_ast",
            "location": 1948,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Node"
                ],
                "result_name": [
                    "Optional[str]"
                ]
            }
        },
        "_if_to_py_ast": {
            "name": "_if_to_py_ast",
            "location": 1988,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "If"
                ]
            }
        },
        "_import_to_py_ast": {
            "name": "_import_to_py_ast",
            "location": 2047,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Import"
                ]
            }
        },
        "_invoke_to_py_ast": {
            "name": "_invoke_to_py_ast",
            "location": 2118,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Invoke"
                ]
            }
        },
        "_let_to_py_ast": {
            "name": "_let_to_py_ast",
            "location": 2137,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Let"
                ]
            }
        },
        "_letfn_to_py_ast": {
            "name": "_letfn_to_py_ast",
            "location": 2180,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "LetFn"
                ]
            }
        },
        "_loop_to_py_ast": {
            "name": "_loop_to_py_ast",
            "location": 2227,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Loop"
                ]
            }
        },
        "_quote_to_py_ast": {
            "name": "_quote_to_py_ast",
            "location": 2290,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Quote"
                ]
            }
        },
        "__fn_recur_to_py_ast": {
            "name": "__fn_recur_to_py_ast",
            "location": 2297,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Recur"
                ]
            }
        },
        "__deftype_method_recur_to_py_ast": {
            "name": "__deftype_method_recur_to_py_ast",
            "location": 2319,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Recur"
                ]
            }
        },
        "__loop_recur_to_py_ast": {
            "name": "__loop_recur_to_py_ast",
            "location": 2353,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Recur"
                ]
            }
        },
        "_recur_to_py_ast": {
            "name": "_recur_to_py_ast",
            "location": 2388,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Recur"
                ]
            }
        },
        "_reify_to_py_ast": {
            "name": "_reify_to_py_ast",
            "location": 2409,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Reify"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "_require_to_py_ast": {
            "name": "_require_to_py_ast",
            "location": 2519,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "_": [
                    "GeneratorContext"
                ],
                "node": [
                    "Require"
                ]
            }
        },
        "_set_bang_to_py_ast": {
            "name": "_set_bang_to_py_ast",
            "location": 2608,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "SetBang"
                ]
            }
        },
        "_throw_to_py_ast": {
            "name": "_throw_to_py_ast",
            "location": 2708,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Throw"
                ]
            }
        },
        "__catch_to_py_ast": {
            "name": "__catch_to_py_ast",
            "location": 2721,
            "return": [
                "ast.ExceptHandler"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "catch": [
                    "Catch"
                ]
            }
        },
        "_try_to_py_ast": {
            "name": "_try_to_py_ast",
            "location": 2760,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Try"
                ]
            }
        },
        "_yield_to_py_ast": {
            "name": "_yield_to_py_ast",
            "location": 2801,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Yield"
                ]
            }
        },
        "_local_sym_to_py_ast": {
            "name": "_local_sym_to_py_ast",
            "location": 2817,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Local"
                ],
                "is_assigning": [
                    "bool"
                ]
            }
        },
        "__name_in_module": {
            "name": "__name_in_module",
            "location": 2844,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "module": [
                    "BasilispModule"
                ]
            }
        },
        "__var_direct_link_to_py_ast": {
            "name": "__var_direct_link_to_py_ast",
            "location": 2854,
            "return": [
                "Optional[GeneratedPyAST]"
            ],
            "arguments": {
                "current_ns": [
                    "runtime.Namespace"
                ],
                "var": [
                    "runtime.Var"
                ],
                "py_var_ctx": [
                    "PyASTCtx"
                ]
            }
        },
        "__var_find_to_py_ast": {
            "name": "__var_find_to_py_ast",
            "location": 2884,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "var_name": [
                    "str"
                ],
                "ns_name": [
                    "str"
                ],
                "py_var_ctx": [
                    "ast.AST"
                ]
            }
        },
        "_var_sym_to_py_ast": {
            "name": "_var_sym_to_py_ast",
            "location": 2908,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "VarRef"
                ],
                "is_assigning": [
                    "bool"
                ]
            }
        },
        "_interop_call_to_py_ast": {
            "name": "_interop_call_to_py_ast",
            "location": 2974,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "HostCall"
                ]
            }
        },
        "_interop_prop_to_py_ast": {
            "name": "_interop_prop_to_py_ast",
            "location": 2997,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "HostField"
                ],
                "is_assigning": [
                    "bool"
                ]
            }
        },
        "_maybe_class_to_py_ast": {
            "name": "_maybe_class_to_py_ast",
            "location": 3016,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "_": [
                    "GeneratorContext"
                ],
                "node": [
                    "MaybeClass"
                ]
            }
        },
        "_maybe_host_form_to_py_ast": {
            "name": "_maybe_host_form_to_py_ast",
            "location": 3026,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "_": [
                    "GeneratorContext"
                ],
                "node": [
                    "MaybeHostForm"
                ]
            }
        },
        "_map_to_py_ast": {
            "name": "_map_to_py_ast",
            "location": 3043,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "MapNode"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "_queue_to_py_ast": {
            "name": "_queue_to_py_ast",
            "location": 3075,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "QueueNode"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "_set_to_py_ast": {
            "name": "_set_to_py_ast",
            "location": 3104,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "SetNode"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "_vec_to_py_ast": {
            "name": "_vec_to_py_ast",
            "location": 3133,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "VectorNode"
                ],
                "meta_node": [
                    "Optional[MetaNode]"
                ]
            }
        },
        "_py_dict_to_py_ast": {
            "name": "_py_dict_to_py_ast",
            "location": 3168,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "PyDict"
                ]
            }
        },
        "_py_list_to_py_ast": {
            "name": "_py_list_to_py_ast",
            "location": 3180,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "PyList"
                ]
            }
        },
        "_py_set_to_py_ast": {
            "name": "_py_set_to_py_ast",
            "location": 3190,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "PySet"
                ]
            }
        },
        "_py_tuple_to_py_ast": {
            "name": "_py_tuple_to_py_ast",
            "location": 3198,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "PyTuple"
                ]
            }
        },
        "_with_meta_to_py_ast": {
            "name": "_with_meta_to_py_ast",
            "location": 3222,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "WithMeta"
                ]
            }
        },
        "_const_val_to_py_ast": {
            "name": "_const_val_to_py_ast",
            "location": 3241,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "object"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_collection_literal_to_py_ast": {
            "name": "_collection_literal_to_py_ast",
            "location": 3251,
            "return": [
                "Iterable[GeneratedPyAST]"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "form": [
                    "Iterable[LispForm]"
                ]
            }
        },
        "_const_meta_kwargs_ast": {
            "name": "_const_meta_kwargs_ast",
            "location": 3262,
            "return": [
                "Optional[GeneratedPyAST]"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "form": [
                    "LispForm"
                ]
            }
        },
        "_py_const_to_py_ast": {
            "name": "_py_const_to_py_ast",
            "location": 3282,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "form": [
                    "Union[(bool, None)]"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_sym_to_py_ast": {
            "name": "_const_sym_to_py_ast",
            "location": 3287,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "sym.Symbol"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_kw_to_py_ast": {
            "name": "_kw_to_py_ast",
            "location": 3310,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "form": [
                    "kw.Keyword"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_decimal_to_py_ast": {
            "name": "_decimal_to_py_ast",
            "location": 3325,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "form": [
                    "Decimal"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_fraction_to_py_ast": {
            "name": "_fraction_to_py_ast",
            "location": 3333,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "form": [
                    "Fraction"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_inst_to_py_ast": {
            "name": "_inst_to_py_ast",
            "location": 3343,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "form": [
                    "datetime"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_regex_to_py_ast": {
            "name": "_regex_to_py_ast",
            "location": 3351,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "form": [
                    "Pattern"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_uuid_to_py_ast": {
            "name": "_uuid_to_py_ast",
            "location": 3359,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "form": [
                    "uuid.UUID"
                ],
                "_": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_py_dict_to_py_ast": {
            "name": "_const_py_dict_to_py_ast",
            "location": 3364,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "node": [
                    "dict"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_py_list_to_py_ast": {
            "name": "_const_py_list_to_py_ast",
            "location": 3374,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "node": [
                    "list"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_py_set_to_py_ast": {
            "name": "_const_py_set_to_py_ast",
            "location": 3382,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "node": [
                    "set"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_py_tuple_to_py_ast": {
            "name": "_const_py_tuple_to_py_ast",
            "location": 3388,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "node": [
                    "tuple"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_map_to_py_ast": {
            "name": "_const_map_to_py_ast",
            "location": 3396,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "lmap.PersistentMap"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_queue_to_py_ast": {
            "name": "_const_queue_to_py_ast",
            "location": 3419,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "lqueue.PersistentQueue"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_set_to_py_ast": {
            "name": "_const_set_to_py_ast",
            "location": 3437,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "lset.PersistentSet"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_record_to_py_ast": {
            "name": "_const_record_to_py_ast",
            "location": 3455,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "IRecord"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_seq_to_py_ast": {
            "name": "_const_seq_to_py_ast",
            "location": 3500,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "Union[(llist.PersistentList, ISeq)]"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_type_to_py_ast": {
            "name": "_const_type_to_py_ast",
            "location": 3523,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "IType"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_vec_to_py_ast": {
            "name": "_const_vec_to_py_ast",
            "location": 3540,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "form": [
                    "vec.PersistentVector"
                ],
                "ctx": [
                    "GeneratorContext"
                ]
            }
        },
        "_const_node_to_py_ast": {
            "name": "_const_node_to_py_ast",
            "location": 3561,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "lisp_ast": [
                    "Const"
                ]
            }
        },
        "gen_py_ast": {
            "name": "gen_py_ast",
            "location": 3615,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "lisp_ast": [
                    "Node"
                ]
            }
        },
        "_module_imports": {
            "name": "_module_imports",
            "location": 3635,
            "return": [
                "Iterable[ast.Import]"
            ],
            "arguments": {
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "_from_module_import": {
            "name": "_from_module_import",
            "location": 3647,
            "return": [
                "ast.ImportFrom"
            ],
            "arguments": {}
        },
        "_ns_var": {
            "name": "_ns_var",
            "location": 3659,
            "return": [
                "ast.Assign"
            ],
            "arguments": {
                "py_ns_var": [
                    "str"
                ],
                "lisp_ns_var": [
                    "str"
                ],
                "lisp_ns_ns": [
                    "str"
                ]
            }
        },
        "py_module_preamble": {
            "name": "py_module_preamble",
            "location": 3680,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "SymbolTable.new_symbol": {
            "name": "new_symbol",
            "location": 151,
            "return": [
                "'SymbolTable'"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "sym.Symbol"
                ],
                "munged": [
                    "str"
                ],
                "ctx": [
                    "LocalType"
                ]
            }
        },
        "SymbolTable.find_symbol": {
            "name": "find_symbol",
            "location": 160,
            "return": [
                "Optional[SymbolTableEntry]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "sym.Symbol"
                ]
            }
        },
        "SymbolTable.new_frame": {
            "name": "new_frame",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "is_context_boundary": [
                    "bool"
                ]
            }
        },
        "SymbolTable.is_top": {
            "name": "is_top",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.context_boundary": {
            "name": "context_boundary",
            "location": 179,
            "return": [
                "'SymbolTable'"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]"
                ],
                "opts": [
                    "Optional[CompilerOpts]"
                ]
            }
        },
        "GeneratorContext.current_ns": {
            "name": "current_ns",
            "location": 239,
            "return": [
                "runtime.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.filename": {
            "name": "filename",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.use_var_indirection": {
            "name": "use_var_indirection",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.warn_on_var_indirection": {
            "name": "warn_on_var_indirection",
            "location": 252,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.with_var_indirection_override": {
            "name": "with_var_indirection_override",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "has_override": [
                    "bool"
                ]
            }
        },
        "GeneratorContext.has_var_indirection_override": {
            "name": "has_var_indirection_override",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.recur_point": {
            "name": "recur_point",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.new_recur_point": {
            "name": "new_recur_point",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "loop_id": [
                    "str"
                ],
                "type_": [
                    "RecurType"
                ],
                "binding_names": [
                    "Optional[Collection[str]]"
                ],
                "is_variadic": [
                    "Optional[bool]"
                ]
            }
        },
        "GeneratorContext.symbol_table": {
            "name": "symbol_table",
            "location": 293,
            "return": [
                "SymbolTable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.new_symbol_table": {
            "name": "new_symbol_table",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "is_context_boundary": [
                    "bool"
                ]
            }
        },
        "GeneratorContext.current_this": {
            "name": "current_this",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneratorContext.new_this": {
            "name": "new_this",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "this": [
                    "sym.Symbol"
                ]
            }
        },
        "GeneratedPyAST.reduce": {
            "name": "reduce",
            "location": 321,
            "return": [
                "'GeneratedPyAST'"
            ],
            "arguments": {}
        },
        "_load_attr.attr_node": {
            "name": "attr_node",
            "location": 357,
            "return": [],
            "arguments": {
                "node": [],
                "idx": []
            }
        },
        "_simple_ast_generator.wrapped_ast_generator": {
            "name": "wrapped_ast_generator",
            "location": 372,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "form": [
                    "LispForm"
                ]
            }
        },
        "_with_ast_loc.with_lineno_and_col": {
            "name": "with_lineno_and_col",
            "location": 510,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "_with_ast_loc_deps.with_lineno_and_col": {
            "name": "with_lineno_and_col",
            "location": 529,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "_wrap_override_var_indirection._wrapped_do": {
            "name": "_wrapped_do",
            "location": 1434,
            "return": [
                "GeneratedPyAST"
            ],
            "arguments": {
                "ctx": [
                    "GeneratorContext"
                ],
                "node": [
                    "Node"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/compiler/nodes.py": {
        "deftype_or_reify_python_member_names": {
            "name": "deftype_or_reify_python_member_names",
            "location": 231,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "members": [
                    "Iterable['DefTypeMember']"
                ]
            }
        },
        "Node.op": {
            "name": "op",
            "location": 116,
            "return": [
                "NodeOp"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.form": {
            "name": "form",
            "location": 127,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.children": {
            "name": "children",
            "location": 132,
            "return": [
                "Iterable[kw.Keyword]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.raw_forms": {
            "name": "raw_forms",
            "location": 147,
            "return": [
                "IPersistentVector[LispForm]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.top_level": {
            "name": "top_level",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.env": {
            "name": "env",
            "location": 167,
            "return": [
                "'NodeEnv'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.to_map": {
            "name": "to_map",
            "location": 171,
            "return": [
                "lmap.PersistentMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.assoc": {
            "name": "assoc",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.visit": {
            "name": "visit",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[(..., None)]"
                ]
            }
        },
        "Node.fix_missing_locations": {
            "name": "fix_missing_locations",
            "location": 193,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": [],
                "start_loc": [
                    "Optional[Tuple[(int, int)]]"
                ]
            }
        },
        "Assignable.is_assignable": {
            "name": "is_assignable",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefType.python_member_names": {
            "name": "python_member_names",
            "location": 421,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefTypeMember.python_name": {
            "name": "python_name",
            "location": 432,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefTypeMethodArity.python_name": {
            "name": "python_name",
            "location": 479,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reify.python_member_names": {
            "name": "python_member_names",
            "location": 830,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Yield.expressionless": {
            "name": "expressionless",
            "location": 951,
            "return": [],
            "arguments": {
                "cls": [],
                "form": [
                    "SpecialForm"
                ],
                "env": [
                    "NodeEnv"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/compiler/optimizer.py": {
        "_filter_dead_code": {
            "name": "_filter_dead_code",
            "location": 8,
            "return": [
                "List[ast.AST]"
            ],
            "arguments": {
                "nodes": [
                    "Iterable[ast.AST]"
                ]
            }
        },
        "PythonASTOptimizer.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonASTOptimizer._new_global_context": {
            "name": "_new_global_context",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonASTOptimizer._global_context": {
            "name": "_global_context",
            "location": 37,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonASTOptimizer.visit_ExceptHandler": {
            "name": "visit_ExceptHandler",
            "location": 41,
            "return": [
                "Optional[ast.AST]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.ExceptHandler"
                ]
            }
        },
        "PythonASTOptimizer.visit_Expr": {
            "name": "visit_Expr",
            "location": 54,
            "return": [
                "Optional[ast.Expr]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.Expr"
                ]
            }
        },
        "PythonASTOptimizer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 61,
            "return": [
                "Optional[ast.AST]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.FunctionDef"
                ]
            }
        },
        "PythonASTOptimizer.visit_Global": {
            "name": "visit_Global",
            "location": 77,
            "return": [
                "Optional[ast.Global]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.Global"
                ]
            }
        },
        "PythonASTOptimizer.visit_If": {
            "name": "visit_If",
            "location": 92,
            "return": [
                "Optional[ast.AST]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.If"
                ]
            }
        },
        "PythonASTOptimizer.visit_While": {
            "name": "visit_While",
            "location": 123,
            "return": [
                "Optional[ast.AST]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.While"
                ]
            }
        },
        "PythonASTOptimizer.visit_Try": {
            "name": "visit_Try",
            "location": 136,
            "return": [
                "Optional[ast.AST]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast.Try"
                ]
            }
        }
    },
    "basilisp-main/src/basilisp/lang/compiler/__init__.py": {
        "to_py_str": {
            "name": "to_py_str",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "ast.AST"
                ]
            }
        },
        "compiler_opts": {
            "name": "compiler_opts",
            "location": 75,
            "return": [
                "CompilerOpts"
            ],
            "arguments": {
                "generate_auto_inlines": [
                    "Optional[bool]"
                ],
                "inline_functions": [
                    "Optional[bool]"
                ],
                "warn_on_shadowed_name": [
                    "Optional[bool]"
                ],
                "warn_on_shadowed_var": [
                    "Optional[bool]"
                ],
                "warn_on_unused_names": [
                    "Optional[bool]"
                ],
                "warn_on_non_dynamic_set": [
                    "Optional[bool]"
                ],
                "use_var_indirection": [
                    "Optional[bool]"
                ],
                "warn_on_var_indirection": [
                    "Optional[bool]"
                ]
            }
        },
        "_emit_ast_string": {
            "name": "_emit_ast_string",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "ns": [
                    "runtime.Namespace"
                ],
                "module": [
                    "ast.AST"
                ]
            }
        },
        "compile_and_exec_form": {
            "name": "compile_and_exec_form",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "form": [
                    "ReaderForm"
                ],
                "ctx": [
                    "CompilerContext"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "wrapped_fn_name": [
                    "str"
                ],
                "collect_bytecode": [
                    "Optional[BytecodeCollector]"
                ]
            }
        },
        "_incremental_compile_module": {
            "name": "_incremental_compile_module",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer": [
                    "PythonASTOptimizer"
                ],
                "py_ast": [
                    "GeneratedPyAST"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "source_filename": [
                    "str"
                ],
                "collect_bytecode": [
                    "Optional[BytecodeCollector]"
                ]
            }
        },
        "_bootstrap_module": {
            "name": "_bootstrap_module",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "gctx": [
                    "GeneratorContext"
                ],
                "optimizer": [
                    "PythonASTOptimizer"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "collect_bytecode": [
                    "Optional[BytecodeCollector]"
                ]
            }
        },
        "compile_module": {
            "name": "compile_module",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "forms": [
                    "Iterable[ReaderForm]"
                ],
                "ctx": [
                    "CompilerContext"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "collect_bytecode": [
                    "Optional[BytecodeCollector]"
                ]
            }
        },
        "compile_bytecode": {
            "name": "compile_bytecode",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "List[types.CodeType]"
                ],
                "gctx": [
                    "GeneratorContext"
                ],
                "optimizer": [
                    "PythonASTOptimizer"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "CompilerContext.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "opts": [
                    "Optional[CompilerOpts]"
                ]
            }
        },
        "CompilerContext.filename": {
            "name": "filename",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilerContext.analyzer_context": {
            "name": "analyzer_context",
            "location": 63,
            "return": [
                "AnalyzerContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilerContext.generator_context": {
            "name": "generator_context",
            "location": 67,
            "return": [
                "GeneratorContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilerContext.py_ast_optimizer": {
            "name": "py_ast_optimizer",
            "location": 71,
            "return": [
                "PythonASTOptimizer"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/tests/conftest.py": {},
    "basilisp-main/tests/__init__.py": {},
    "basilisp-main/tests/basilisp/atom_test.py": {
        "test_atom_deref_interface": {
            "name": "test_atom_deref_interface",
            "location": 21,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "test_atom": {
            "name": "test_atom",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_alter_atom_meta": {
            "name": "test_alter_atom_meta",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_reset_atom_meta": {
            "name": "test_reset_atom_meta",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_atom_validators": {
            "name": "test_atom_validators",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_atom_watchers": {
            "name": "test_atom_watchers",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_atom_watchers.watcher1": {
            "name": "watcher1",
            "location": 97,
            "return": [],
            "arguments": {
                "k": [],
                "ref": [],
                "old": [],
                "new": []
            }
        },
        "test_atom_watchers.watcher2": {
            "name": "watcher2",
            "location": 109,
            "return": [],
            "arguments": {
                "k": [],
                "ref": [],
                "old": [],
                "new": []
            }
        }
    },
    "basilisp-main/tests/basilisp/cli_test.py": {
        "env_vars": {
            "name": "env_vars",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "isolated_filesystem": {
            "name": "isolated_filesystem",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "run_cli": {
            "name": "run_cli",
            "location": 37,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "capsys": []
            }
        },
        "test_debug_flag": {
            "name": "test_debug_flag",
            "location": 49,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 127,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "run_cli._run_cli": {
            "name": "_run_cli",
            "location": 38,
            "return": [],
            "arguments": {
                "args": [
                    "Sequence[str]"
                ],
                "input": [
                    "Optional[str]"
                ]
            }
        },
        "TestCompilerFlags.test_no_flag": {
            "name": "test_no_flag",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestCompilerFlags.test_valid_flag": {
            "name": "test_valid_flag",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "val": []
            }
        },
        "TestCompilerFlags.test_invalid_flag": {
            "name": "test_invalid_flag",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "val": []
            }
        },
        "TestREPL.prompter": {
            "name": "prompter",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestREPL.test_no_input": {
            "name": "test_no_input",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestREPL.test_newline": {
            "name": "test_newline",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestREPL.test_simple_expression": {
            "name": "test_simple_expression",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestREPL.test_syntax_error": {
            "name": "test_syntax_error",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestREPL.test_compiler_error": {
            "name": "test_compiler_error",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestREPL.test_other_exception": {
            "name": "test_other_exception",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestRun.test_run_code": {
            "name": "test_run_code",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        },
        "TestRun.test_run_file": {
            "name": "test_run_file",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "isolated_filesystem": [],
                "run_cli": []
            }
        },
        "TestRun.test_run_stdin": {
            "name": "test_run_stdin",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": []
            }
        }
    },
    "basilisp-main/tests/basilisp/compiler_test.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_ns": {
            "name": "test_ns",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "compiler_file_path": {
            "name": "compiler_file_path",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "resolver": {
            "name": "resolver",
            "location": 55,
            "return": [
                "reader.Resolver"
            ],
            "arguments": {}
        },
        "assert_no_logs": {
            "name": "assert_no_logs",
            "location": 59,
            "return": [],
            "arguments": {
                "caplog": []
            }
        },
        "async_to_sync": {
            "name": "async_to_sync",
            "location": 66,
            "return": [],
            "arguments": {
                "asyncf": []
            }
        },
        "test_do": {
            "name": "test_do",
            "location": 2016,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "test_fn_call": {
            "name": "test_fn_call",
            "location": 2574,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "test_macro_expansion": {
            "name": "test_macro_expansion",
            "location": 2698,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "test_syntax_quoting": {
            "name": "test_syntax_quoting",
            "location": 4935,
            "return": [],
            "arguments": {
                "test_ns": [
                    "str"
                ],
                "lcompile": [
                    "CompileFn"
                ],
                "resolver": [
                    "reader.Resolver"
                ]
            }
        },
        "test_throw": {
            "name": "test_throw",
            "location": 4973,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "test_unquote": {
            "name": "test_unquote",
            "location": 5139,
            "return": [],
            "arguments": {
                "lcompile": [
                    "runtime.Namespace"
                ]
            }
        },
        "test_unquote_splicing": {
            "name": "test_unquote_splicing",
            "location": 5149,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "resolver": [
                    "reader.Resolver"
                ]
            }
        },
        "TestLiterals.test_nil": {
            "name": "test_nil",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_string": {
            "name": "test_string",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_int": {
            "name": "test_int",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_decimal": {
            "name": "test_decimal",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_float": {
            "name": "test_float",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_kw": {
            "name": "test_kw",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_literals": {
            "name": "test_literals",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_quoted_symbol": {
            "name": "test_quoted_symbol",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_map": {
            "name": "test_map",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_set": {
            "name": "test_set",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_vec": {
            "name": "test_vec",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_fraction": {
            "name": "test_fraction",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_inst": {
            "name": "test_inst",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_queue": {
            "name": "test_queue",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_regex": {
            "name": "test_regex",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_uuid": {
            "name": "test_uuid",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_py_dict": {
            "name": "test_py_dict",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_py_list": {
            "name": "test_py_list",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_py_set": {
            "name": "test_py_set",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLiterals.test_py_tuple": {
            "name": "test_py_tuple",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestAwait.test_await_must_appear_in_async_def": {
            "name": "test_await_must_appear_in_async_def",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestAwait.test_await_number_of_elems": {
            "name": "test_await_number_of_elems",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestAwait.test_await": {
            "name": "test_await",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDef.test_def": {
            "name": "test_def",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDef.test_def_with_docstring": {
            "name": "test_def_with_docstring",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDef.test_def_unbound": {
            "name": "test_def_unbound",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDef.test_recursive_def": {
            "name": "test_recursive_def",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDef.test_def_number_of_elems": {
            "name": "test_def_number_of_elems",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDef.test_def_name_is_symbol": {
            "name": "test_def_name_is_symbol",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDef.test_def_docstring_is_string": {
            "name": "test_def_docstring_is_string",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDef.test_compiler_metadata": {
            "name": "test_compiler_metadata",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "compiler_file_path": [
                    "str"
                ]
            }
        },
        "TestDef.test_no_warn_on_redef_meta": {
            "name": "test_no_warn_on_redef_meta",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestDef.test_warn_on_redef_if_warn_on_redef_meta_missing": {
            "name": "test_warn_on_redef_if_warn_on_redef_meta_missing",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestDef.test_redef_vars": {
            "name": "test_redef_vars",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestDef.test_def_dynamic": {
            "name": "test_def_dynamic",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDef.test_def_fn_with_meta": {
            "name": "test_def_fn_with_meta",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDef.test_redef_unbound_var": {
            "name": "test_redef_unbound_var",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDef.test_def_unbound_does_not_clear_var_root": {
            "name": "test_def_unbound_does_not_clear_var_root",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.test_deftype_number_of_elems": {
            "name": "test_deftype_number_of_elems",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_name_is_sym": {
            "name": "test_deftype_name_is_sym",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_fields_is_vec": {
            "name": "test_deftype_fields_is_vec",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.test_deftype_fields_are_syms": {
            "name": "test_deftype_fields_are_syms",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_has_implements_kw": {
            "name": "test_deftype_has_implements_kw",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.test_deftype_implements_is_vector": {
            "name": "test_deftype_implements_is_vector",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_must_declare_implements": {
            "name": "test_deftype_must_declare_implements",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.test_deftype_impls_must_match_defined_interfaces": {
            "name": "test_deftype_impls_must_match_defined_interfaces",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_prohibit_duplicate_interface": {
            "name": "test_deftype_prohibit_duplicate_interface",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_impls_must_be_sym_or_list": {
            "name": "test_deftype_impls_must_be_sym_or_list",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_interface_must_be_host_form": {
            "name": "test_deftype_interface_must_be_host_form",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.test_deftype_interface_must_be_abstract": {
            "name": "test_deftype_interface_must_be_abstract",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestDefType.test_deftype_allows_empty_abstract_interface": {
            "name": "test_deftype_allows_empty_abstract_interface",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.test_deftype_allows_empty_dynamic_abstract_interface": {
            "name": "test_deftype_allows_empty_dynamic_abstract_interface",
            "location": 586,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.test_deftype_interface_must_implement_all_abstract_methods": {
            "name": "test_deftype_interface_must_implement_all_abstract_methods",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestDefType.test_deftype_may_not_add_extra_methods_to_interface": {
            "name": "test_deftype_may_not_add_extra_methods_to_interface",
            "location": 674,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestDefType.test_deftype_interface_may_have_no_fields_or_methods": {
            "name": "test_deftype_interface_may_have_no_fields_or_methods",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_interface_may_implement_only_some_object_methods": {
            "name": "test_deftype_interface_may_implement_only_some_object_methods",
            "location": 718,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.test_deftype_property_and_method_names_cannot_overlap": {
            "name": "test_deftype_property_and_method_names_cannot_overlap",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestFunctionShadowName.test_single_arity_fn_no_log_if_warning_disabled": {
            "name": "test_single_arity_fn_no_log_if_warning_disabled",
            "location": 2031,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowName.test_multi_arity_fn_no_log_if_warning_disabled": {
            "name": "test_multi_arity_fn_no_log_if_warning_disabled",
            "location": 2037,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowName.test_single_arity_fn_log_if_warning_enabled": {
            "name": "test_single_arity_fn_log_if_warning_enabled",
            "location": 2049,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowName.test_multi_arity_fn_log_if_warning_enabled": {
            "name": "test_multi_arity_fn_log_if_warning_enabled",
            "location": 2057,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowName.test_single_arity_fn_log_shadows_var_if_warning_enabled": {
            "name": "test_single_arity_fn_log_shadows_var_if_warning_enabled",
            "location": 2070,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowName.test_multi_arity_fn_log_shadows_var_if_warning_enabled": {
            "name": "test_multi_arity_fn_log_shadows_var_if_warning_enabled",
            "location": 2084,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowVar.test_single_arity_fn_no_log_if_warning_disabled": {
            "name": "test_single_arity_fn_no_log_if_warning_disabled",
            "location": 2102,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowVar.test_multi_arity_fn_no_log_if_warning_disabled": {
            "name": "test_multi_arity_fn_no_log_if_warning_disabled",
            "location": 2112,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowVar.test_single_arity_fn_log_if_warning_enabled": {
            "name": "test_single_arity_fn_log_if_warning_enabled",
            "location": 2124,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionShadowVar.test_multi_arity_fn_log_if_warning_enabled": {
            "name": "test_multi_arity_fn_log_if_warning_enabled",
            "location": 2136,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionWarnUnusedName.test_single_arity_fn_no_log_if_warning_disabled": {
            "name": "test_single_arity_fn_no_log_if_warning_disabled",
            "location": 2152,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionWarnUnusedName.test_multi_arity_fn_no_log_if_warning_disabled": {
            "name": "test_multi_arity_fn_no_log_if_warning_disabled",
            "location": 2158,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestFunctionWarnUnusedName.test_single_arity_fn_log_if_warning_enabled": {
            "name": "test_single_arity_fn_log_if_warning_enabled",
            "location": 2171,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestFunctionWarnUnusedName.test_multi_arity_fn_log_if_warning_enabled": {
            "name": "test_multi_arity_fn_log_if_warning_enabled",
            "location": 2181,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestFunctionDef.test_fn_with_no_name_or_args": {
            "name": "test_fn_with_no_name_or_args",
            "location": 2200,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_with_no_args_throws": {
            "name": "test_fn_with_no_args_throws",
            "location": 2204,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_with_invalid_name_throws": {
            "name": "test_fn_with_invalid_name_throws",
            "location": 2208,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_variadic_arity_fn_has_variadic_argument": {
            "name": "test_variadic_arity_fn_has_variadic_argument",
            "location": 2218,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_variadic_arity_fn_method_has_variadic_argument": {
            "name": "test_variadic_arity_fn_method_has_variadic_argument",
            "location": 2222,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_argument_vector_is_vector": {
            "name": "test_fn_argument_vector_is_vector",
            "location": 2229,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_method_argument_vector_is_vector": {
            "name": "test_fn_method_argument_vector_is_vector",
            "location": 2236,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_arg_is_symbol": {
            "name": "test_fn_arg_is_symbol",
            "location": 2240,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_method_arg_is_symbol": {
            "name": "test_fn_method_arg_is_symbol",
            "location": 2250,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_has_arity_or_arg": {
            "name": "test_fn_has_arity_or_arg",
            "location": 2257,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_allows_empty_body": {
            "name": "test_fn_allows_empty_body",
            "location": 2261,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestFunctionDef.test_fn_method_allows_empty_body": {
            "name": "test_fn_method_allows_empty_body",
            "location": 2268,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestFunctionDef.test_single_arity_fn": {
            "name": "test_single_arity_fn",
            "location": 2277,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestFunctionDef.test_no_fn_method_has_same_fixed_arity": {
            "name": "test_no_fn_method_has_same_fixed_arity",
            "location": 2363,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestFunctionDef.test_multi_arity_fn_cannot_have_two_variadic_methods": {
            "name": "test_multi_arity_fn_cannot_have_two_variadic_methods",
            "location": 2384,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestFunctionDef.test_variadic_method_cannot_have_lower_fixed_arity_than_other_methods": {
            "name": "test_variadic_method_cannot_have_lower_fixed_arity_than_other_methods",
            "location": 2405,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestFunctionDef.test_multi_arity_fn_dispatches_properly": {
            "name": "test_multi_arity_fn_dispatches_properly",
            "location": 2411,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestFunctionDef.test_multi_arity_fn_call_fails_if_no_valid_arity": {
            "name": "test_multi_arity_fn_call_fails_if_no_valid_arity",
            "location": 2444,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_async_single_arity": {
            "name": "test_async_single_arity",
            "location": 2457,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_async_multi_arity": {
            "name": "test_async_multi_arity",
            "location": 2475,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_fn_with_meta_must_be_map": {
            "name": "test_fn_with_meta_must_be_map",
            "location": 2497,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_single_arity_meta": {
            "name": "test_single_arity_meta",
            "location": 2502,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_single_arity_with_meta": {
            "name": "test_single_arity_with_meta",
            "location": 2509,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_multi_arity_meta": {
            "name": "test_multi_arity_meta",
            "location": 2525,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_multi_arity_with_meta": {
            "name": "test_multi_arity_with_meta",
            "location": 2539,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.test_async_with_meta": {
            "name": "test_async_with_meta",
            "location": 2558,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_cannot_inline_variadic_fn": {
            "name": "test_cannot_inline_variadic_fn",
            "location": 2593,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_cannot_inline_multi_arity_fn": {
            "name": "test_cannot_inline_multi_arity_fn",
            "location": 2597,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_cannot_inline_multi_expression_fn": {
            "name": "test_cannot_inline_multi_expression_fn",
            "location": 2607,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_cannot_inline_unimported_module": {
            "name": "test_cannot_inline_unimported_module",
            "location": 2618,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_non_boolean_inline_metadata_ignored": {
            "name": "test_non_boolean_inline_metadata_ignored",
            "location": 2630,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_no_inlining_occurs_if_no_inline_meta_specified": {
            "name": "test_no_inlining_occurs_if_no_inline_meta_specified",
            "location": 2635,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_no_inlining_occurs_if_inline_not_callable": {
            "name": "test_no_inlining_occurs_if_inline_not_callable",
            "location": 2647,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionInlining.test_function_result_is_same_with_or_without_inline": {
            "name": "test_function_result_is_same_with_or_without_inline",
            "location": 2658,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "inline_functions": [
                    "bool"
                ]
            }
        },
        "TestFunctionInlining.test_function_result_is_same_with_or_without_auto_inline": {
            "name": "test_function_result_is_same_with_or_without_auto_inline",
            "location": 2679,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "should_generate_inlines": [
                    "bool"
                ],
                "inline_functions": [
                    "bool"
                ]
            }
        },
        "TestMacroexpandFunctions.example_macro": {
            "name": "example_macro",
            "location": 2704,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestMacroexpandFunctions.test_macroexpand_1": {
            "name": "test_macroexpand_1",
            "location": 2710,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "example_macro": []
            }
        },
        "TestMacroexpandFunctions.test_macroexpand": {
            "name": "test_macroexpand",
            "location": 2733,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "example_macro": []
            }
        },
        "TestIf.test_if_number_of_elems": {
            "name": "test_if_number_of_elems",
            "location": 2771,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestIf.test_if": {
            "name": "test_if",
            "location": 2781,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestIf.test_truthiness": {
            "name": "test_truthiness",
            "location": 2794,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestImport.test_import_module_must_be_symbol": {
            "name": "test_import_module_must_be_symbol",
            "location": 2849,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestImport.test_import_aliased_module_format": {
            "name": "test_import_aliased_module_format",
            "location": 2864,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestImport.test_import_module_must_exist": {
            "name": "test_import_module_must_exist",
            "location": 2868,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestImport.test_import_resolves_within_do_block": {
            "name": "test_import_resolves_within_do_block",
            "location": 2872,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestImport.test_single_import": {
            "name": "test_single_import",
            "location": 2883,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestImport.test_multi_import": {
            "name": "test_multi_import",
            "location": 2891,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestImport.test_nested_imports_visible_with_parent": {
            "name": "test_nested_imports_visible_with_parent",
            "location": 2906,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestImport.test_aliased_nested_import_refers_to_child": {
            "name": "test_aliased_nested_import_refers_to_child",
            "location": 2916,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestInvoke.test_call_with_kwargs": {
            "name": "test_call_with_kwargs",
            "location": 2939,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "v": []
            }
        },
        "TestInvoke.test_kwargs_are_always_strings": {
            "name": "test_kwargs_are_always_strings",
            "location": 2953,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "v": []
            }
        },
        "TestInvoke.test_call_with_multiple_kwarg_markers_fails": {
            "name": "test_call_with_multiple_kwarg_markers_fails",
            "location": 2965,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestInvoke.test_call_with_duplicate_keys_fails": {
            "name": "test_call_with_duplicate_keys_fails",
            "location": 2980,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestInvoke.test_call_with_kwargs_and_only_key_fails": {
            "name": "test_call_with_kwargs_and_only_key_fails",
            "location": 2993,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestInvoke.test_call_with_invalid_key_type_fails": {
            "name": "test_call_with_invalid_key_type_fails",
            "location": 3005,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestPythonInterop.test_interop_is_valid_type": {
            "name": "test_interop_is_valid_type",
            "location": 3011,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_new": {
            "name": "test_interop_new",
            "location": 3021,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_new_with_import": {
            "name": "test_interop_new_with_import",
            "location": 3029,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestPythonInterop.test_interop_call_num_elems": {
            "name": "test_interop_call_num_elems",
            "location": 3039,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_prop_method_is_symbol": {
            "name": "test_interop_prop_method_is_symbol",
            "location": 3043,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_call": {
            "name": "test_interop_call",
            "location": 3050,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_prop_field_is_symbol": {
            "name": "test_interop_prop_field_is_symbol",
            "location": 3060,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_prop_num_elems": {
            "name": "test_interop_prop_num_elems",
            "location": 3067,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_prop": {
            "name": "test_interop_prop",
            "location": 3080,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestPythonInterop.test_interop_quoted": {
            "name": "test_interop_quoted",
            "location": 3091,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_num_elems": {
            "name": "test_let_num_elems",
            "location": 3101,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_may_have_empty_bindings": {
            "name": "test_let_may_have_empty_bindings",
            "location": 3105,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_bindings_must_be_vector": {
            "name": "test_let_bindings_must_be_vector",
            "location": 3109,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_bindings_must_have_name_and_value": {
            "name": "test_let_bindings_must_have_name_and_value",
            "location": 3116,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_binding_name_must_be_symbol": {
            "name": "test_let_binding_name_must_be_symbol",
            "location": 3123,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_name_does_not_resolve": {
            "name": "test_let_name_does_not_resolve",
            "location": 3130,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_may_have_empty_body": {
            "name": "test_let_may_have_empty_body",
            "location": 3134,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let": {
            "name": "test_let",
            "location": 3138,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLet.test_let_lazy_evaluation": {
            "name": "test_let_lazy_evaluation",
            "location": 3148,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetShadowName.test_no_warning_if_no_shadowing_and_warning_disabled": {
            "name": "test_no_warning_if_no_shadowing_and_warning_disabled",
            "location": 3160,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetShadowName.test_no_warning_if_warning_disabled": {
            "name": "test_no_warning_if_warning_disabled",
            "location": 3166,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetShadowName.test_no_warning_if_no_shadowing_and_warning_enabled": {
            "name": "test_no_warning_if_no_shadowing_and_warning_enabled",
            "location": 3172,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetShadowName.test_warning_if_warning_enabled": {
            "name": "test_warning_if_warning_enabled",
            "location": 3178,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetShadowName.test_warning_if_shadowing_var_and_warning_enabled": {
            "name": "test_warning_if_shadowing_var_and_warning_enabled",
            "location": 3188,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetShadowVar.test_no_warning_if_warning_disabled": {
            "name": "test_no_warning_if_warning_disabled",
            "location": 3205,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetShadowVar.test_warning_if_warning_enabled": {
            "name": "test_warning_if_warning_enabled",
            "location": 3214,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetUnusedNames.test_warning_if_warning_enabled": {
            "name": "test_warning_if_warning_enabled",
            "location": 3228,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLetUnusedNames.test_no_warning_if_warning_disabled": {
            "name": "test_no_warning_if_warning_disabled",
            "location": 3238,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLetUnusedNames.test_warning_for_nested_let_if_warning_enabled": {
            "name": "test_warning_for_nested_let_if_warning_enabled",
            "location": 3244,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLetUnusedNames.test_no_warning_for_nested_let_if_warning_disabled": {
            "name": "test_no_warning_for_nested_let_if_warning_disabled",
            "location": 3261,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLetFn.test_letfn_num_elems": {
            "name": "test_letfn_num_elems",
            "location": 3276,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_may_have_empty_bindings": {
            "name": "test_letfn_may_have_empty_bindings",
            "location": 3280,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_bindings_must_be_vector": {
            "name": "test_letfn_bindings_must_be_vector",
            "location": 3284,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_let_bindings_must_have_name_and_value": {
            "name": "test_let_bindings_must_have_name_and_value",
            "location": 3291,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_binding_fns_must_be_list": {
            "name": "test_letfn_binding_fns_must_be_list",
            "location": 3298,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_binding_name_must_be_symbol": {
            "name": "test_letfn_binding_name_must_be_symbol",
            "location": 3302,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_binding_value_must_be_function": {
            "name": "test_letfn_binding_value_must_be_function",
            "location": 3309,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_name_does_not_resolve": {
            "name": "test_letfn_name_does_not_resolve",
            "location": 3319,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_may_have_empty_body": {
            "name": "test_letfn_may_have_empty_body",
            "location": 3323,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn": {
            "name": "test_letfn",
            "location": 3327,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLetFn.test_letfn_mutual_recursion": {
            "name": "test_letfn_mutual_recursion",
            "location": 3341,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "v": [
                    "int"
                ],
                "exp": [
                    "bool"
                ]
            }
        },
        "TestLetFnShadowName.test_no_warning_if_no_shadowing_and_warning_disabled": {
            "name": "test_no_warning_if_no_shadowing_and_warning_disabled",
            "location": 3352,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetFnShadowName.test_no_warning_if_warning_disabled": {
            "name": "test_no_warning_if_warning_disabled",
            "location": 3358,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetFnShadowName.test_no_warning_if_no_shadowing_and_warning_enabled": {
            "name": "test_no_warning_if_no_shadowing_and_warning_enabled",
            "location": 3365,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetFnShadowName.test_warning_if_warning_enabled": {
            "name": "test_warning_if_warning_enabled",
            "location": 3373,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetFnShadowName.test_warning_if_shadowing_var_and_warning_enabled": {
            "name": "test_warning_if_shadowing_var_and_warning_enabled",
            "location": 3384,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetFnShadowVar.test_no_warning_if_warning_disabled": {
            "name": "test_no_warning_if_warning_disabled",
            "location": 3401,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetFnShadowVar.test_warning_if_warning_enabled": {
            "name": "test_warning_if_warning_enabled",
            "location": 3410,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "caplog": []
            }
        },
        "TestLetFnUnusedNames.test_warning_if_warning_enabled": {
            "name": "test_warning_if_warning_enabled",
            "location": 3424,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLetFnUnusedNames.test_no_warning_if_warning_disabled": {
            "name": "test_no_warning_if_warning_disabled",
            "location": 3436,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLetFnUnusedNames.test_warning_for_nested_let_if_warning_enabled": {
            "name": "test_warning_for_nested_let_if_warning_enabled",
            "location": 3444,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLetFnUnusedNames.test_no_warning_for_nested_let_if_warning_disabled": {
            "name": "test_no_warning_for_nested_let_if_warning_disabled",
            "location": 3461,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestLoop.test_loop_num_elems": {
            "name": "test_loop_num_elems",
            "location": 3476,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_loop_may_have_empty_bindings": {
            "name": "test_loop_may_have_empty_bindings",
            "location": 3480,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_loop_bindings_must_be_vector": {
            "name": "test_loop_bindings_must_be_vector",
            "location": 3484,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_loop_bindings_must_have_name_and_value": {
            "name": "test_loop_bindings_must_have_name_and_value",
            "location": 3491,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_loop_binding_name_must_be_symbol": {
            "name": "test_loop_binding_name_must_be_symbol",
            "location": 3498,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_let_name_does_not_resolve": {
            "name": "test_let_name_does_not_resolve",
            "location": 3505,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_loop_may_have_empty_body": {
            "name": "test_loop_may_have_empty_body",
            "location": 3509,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_loop_without_recur": {
            "name": "test_loop_without_recur",
            "location": 3513,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestLoop.test_loop_with_recur": {
            "name": "test_loop_with_recur",
            "location": 3524,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_quote_num_elems": {
            "name": "test_quote_num_elems",
            "location": 3560,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestQuote.test_quoted_list": {
            "name": "test_quoted_list",
            "location": 3564,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_quoted_map": {
            "name": "test_quoted_map",
            "location": 3572,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_quoted_queue": {
            "name": "test_quoted_queue",
            "location": 3579,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_quoted_set": {
            "name": "test_quoted_set",
            "location": 3586,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_quoted_inst": {
            "name": "test_quoted_inst",
            "location": 3591,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_regex": {
            "name": "test_regex",
            "location": 3596,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_uuid": {
            "name": "test_uuid",
            "location": 3599,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_py_dict": {
            "name": "test_py_dict",
            "location": 3604,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_py_list": {
            "name": "test_py_list",
            "location": 3611,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_py_set": {
            "name": "test_py_set",
            "location": 3616,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestQuote.test_py_tuple": {
            "name": "test_py_tuple",
            "location": 3621,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRecur.test_recur": {
            "name": "test_recur",
            "location": 3628,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRecur.test_recur_arity_must_match_recur_point": {
            "name": "test_recur_arity_must_match_recur_point",
            "location": 3676,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRecur.test_single_arity_recur": {
            "name": "test_single_arity_recur",
            "location": 3683,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRecur.test_multi_arity_recur": {
            "name": "test_multi_arity_recur",
            "location": 3699,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRecur.test_disallow_recur_in_special_forms": {
            "name": "test_disallow_recur_in_special_forms",
            "location": 3731,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestRecur.test_disallow_recur_outside_tail": {
            "name": "test_disallow_recur_outside_tail",
            "location": 3760,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestRecur.test_single_arity_named_anonymous_fn_recursion": {
            "name": "test_single_arity_named_anonymous_fn_recursion",
            "location": 3764,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRecur.test_multi_arity_named_anonymous_fn_recursion": {
            "name": "test_multi_arity_named_anonymous_fn_recursion",
            "location": 3774,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.test_reify_number_of_elems": {
            "name": "test_reify_number_of_elems",
            "location": 3789,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_has_implements_kw": {
            "name": "test_reify_has_implements_kw",
            "location": 3793,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.test_reify_implements_is_vector": {
            "name": "test_reify_implements_is_vector",
            "location": 3812,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_must_declare_implements": {
            "name": "test_reify_must_declare_implements",
            "location": 3816,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.test_reify_impls_must_match_defined_interfaces": {
            "name": "test_reify_impls_must_match_defined_interfaces",
            "location": 3839,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_prohibit_duplicate_interface": {
            "name": "test_reify_prohibit_duplicate_interface",
            "location": 3869,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_impls_must_be_sym_or_list": {
            "name": "test_reify_impls_must_be_sym_or_list",
            "location": 3892,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_interface_must_be_host_form": {
            "name": "test_reify_interface_must_be_host_form",
            "location": 3896,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.test_reify_interface_must_be_abstract": {
            "name": "test_reify_interface_must_be_abstract",
            "location": 3924,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestReify.test_reify_allows_empty_abstract_interface": {
            "name": "test_reify_allows_empty_abstract_interface",
            "location": 3930,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.test_reify_allows_empty_dynamic_abstract_interface": {
            "name": "test_reify_allows_empty_dynamic_abstract_interface",
            "location": 3934,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.test_reify_interface_must_implement_all_abstract_methods": {
            "name": "test_reify_interface_must_implement_all_abstract_methods",
            "location": 3971,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestReify.test_reify_may_not_add_extra_methods_to_interface": {
            "name": "test_reify_may_not_add_extra_methods_to_interface",
            "location": 4008,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestReify.test_reify_interface_may_have_no_fields_or_methods": {
            "name": "test_reify_interface_may_have_no_fields_or_methods",
            "location": 4020,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_interface_may_implement_only_some_object_methods": {
            "name": "test_reify_interface_may_implement_only_some_object_methods",
            "location": 4044,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_property_and_method_names_cannot_overlap": {
            "name": "test_reify_property_and_method_names_cannot_overlap",
            "location": 4066,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_disallows_class_and_static_members": {
            "name": "test_reify_disallows_class_and_static_members",
            "location": 4116,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.test_reify_transfers_form_meta_to_obj": {
            "name": "test_reify_transfers_form_meta_to_obj",
            "location": 4122,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRequire.test_require_namespace_must_be_symbol": {
            "name": "test_require_namespace_must_be_symbol",
            "location": 4782,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestRequire.test_require_aliased_namespace_format": {
            "name": "test_require_aliased_namespace_format",
            "location": 4797,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestRequire.test_require_namespace_must_exist": {
            "name": "test_require_namespace_must_exist",
            "location": 4801,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRequire._import_ns": {
            "name": "_import_ns",
            "location": 4806,
            "return": [],
            "arguments": {
                "self": [],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestRequire.set_ns": {
            "name": "set_ns",
            "location": 4815,
            "return": [],
            "arguments": {
                "self": [],
                "_import_ns": []
            }
        },
        "TestRequire.string_ns": {
            "name": "string_ns",
            "location": 4819,
            "return": [],
            "arguments": {
                "self": [],
                "_import_ns": []
            }
        },
        "TestRequire.test_require_resolves_within_do_block": {
            "name": "test_require_resolves_within_do_block",
            "location": 4822,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "string_ns": []
            }
        },
        "TestRequire.test_single_require": {
            "name": "test_single_require",
            "location": 4840,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "string_ns": [],
                "code": [
                    "str"
                ]
            }
        },
        "TestRequire.test_multi_require": {
            "name": "test_multi_require",
            "location": 4850,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "string_ns": [],
                "set_ns": [],
                "code": [
                    "str"
                ]
            }
        },
        "TestSetBang.test_num_elems": {
            "name": "test_num_elems",
            "location": 4855,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSetBang.test_set_target_must_be_assignable_type": {
            "name": "test_set_target_must_be_assignable_type",
            "location": 4865,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSetBang.test_set_cannot_assign_let_local": {
            "name": "test_set_cannot_assign_let_local",
            "location": 4875,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSetBang.test_set_cannot_assign_loop_local": {
            "name": "test_set_cannot_assign_loop_local",
            "location": 4879,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSetBang.test_set_cannot_assign_fn_arg_local": {
            "name": "test_set_cannot_assign_fn_arg_local",
            "location": 4883,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSetBang.test_set_cannot_assign_non_dynamic_var": {
            "name": "test_set_cannot_assign_non_dynamic_var",
            "location": 4887,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSetBang.test_set_cannot_assign_dynamic_var_without_thread_bindings": {
            "name": "test_set_cannot_assign_dynamic_var_without_thread_bindings",
            "location": 4896,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSetBang.test_set_can_assign_thread_bound_dynamic_var": {
            "name": "test_set_can_assign_thread_bound_dynamic_var",
            "location": 4907,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSetBang.test_set_can_object_attrs": {
            "name": "test_set_can_object_attrs",
            "location": 4920,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestTryCatch.test_single_catch_ignoring_binding": {
            "name": "test_single_catch_ignoring_binding",
            "location": 4985,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "capsys": []
            }
        },
        "TestTryCatch.test_multiple_expressions_in_try_body": {
            "name": "test_multiple_expressions_in_try_body",
            "location": 4997,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "capsys": []
            }
        },
        "TestTryCatch.test_single_catch_with_binding": {
            "name": "test_single_catch_with_binding",
            "location": 5013,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "capsys": []
            }
        },
        "TestTryCatch.test_multiple_catch": {
            "name": "test_multiple_catch",
            "location": 5021,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestTryCatch.test_multiple_catch_with_finally": {
            "name": "test_multiple_catch_with_finally",
            "location": 5030,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "capsys": []
            }
        },
        "TestTryCatch.test_catch_num_elems": {
            "name": "test_catch_num_elems",
            "location": 5045,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestTryCatch.test_catch_must_name_exception": {
            "name": "test_catch_must_name_exception",
            "location": 5073,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestTryCatch.test_catch_name_must_be_symbol": {
            "name": "test_catch_name_must_be_symbol",
            "location": 5083,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestTryCatch.test_body_may_not_appear_after_catch": {
            "name": "test_body_may_not_appear_after_catch",
            "location": 5093,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestTryCatch.test_body_may_not_appear_after_finally": {
            "name": "test_body_may_not_appear_after_finally",
            "location": 5104,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestTryCatch.test_catch_may_not_appear_after_finally": {
            "name": "test_catch_may_not_appear_after_finally",
            "location": 5115,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestTryCatch.test_try_may_not_have_multiple_finallys": {
            "name": "test_try_may_not_have_multiple_finallys",
            "location": 5126,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_bare_sym_resolves_builtins": {
            "name": "test_bare_sym_resolves_builtins",
            "location": 5163,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_builtin_resolves_builtins": {
            "name": "test_builtin_resolves_builtins",
            "location": 5166,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_builtins_fails_to_resolve_correctly": {
            "name": "test_builtins_fails_to_resolve_correctly",
            "location": 5169,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_namespaced_sym_may_not_contain_period": {
            "name": "test_namespaced_sym_may_not_contain_period",
            "location": 5173,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_namespaced_sym_cannot_resolve": {
            "name": "test_namespaced_sym_cannot_resolve",
            "location": 5177,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_nested_namespaced_sym_will_resolve": {
            "name": "test_nested_namespaced_sym_will_resolve",
            "location": 5181,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_nested_bare_sym_will_not_resolve": {
            "name": "test_nested_bare_sym_will_not_resolve",
            "location": 5184,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_imported_module_sym_resolves": {
            "name": "test_imported_module_sym_resolves",
            "location": 5210,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestSymbolResolution.test_sym_from_import_resolves": {
            "name": "test_sym_from_import_resolves",
            "location": 5238,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestSymbolResolution.test_unresolvable_imported_symbols": {
            "name": "test_unresolvable_imported_symbols",
            "location": 5273,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestSymbolResolution.test_symbol_deffed_in_fn_or_method_will_resolve_in_fn_or_method": {
            "name": "test_symbol_deffed_in_fn_or_method_will_resolve_in_fn_or_method",
            "location": 5302,
            "return": [],
            "arguments": {
                "self": [],
                "ns": [
                    "runtime.Namespace"
                ],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestSymbolResolution.test_symbol_deffed_in_fn_or_method_will_resolve_outside_fn_or_method": {
            "name": "test_symbol_deffed_in_fn_or_method_will_resolve_outside_fn_or_method",
            "location": 5339,
            "return": [],
            "arguments": {
                "self": [],
                "ns": [
                    "runtime.Namespace"
                ],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestSymbolResolution.test_local_deftype_classmethod_resolves": {
            "name": "test_local_deftype_classmethod_resolves",
            "location": 5350,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_local_deftype_staticmethod_resolves": {
            "name": "test_local_deftype_staticmethod_resolves",
            "location": 5373,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_aliased_namespace_not_hidden_by_python_module": {
            "name": "test_aliased_namespace_not_hidden_by_python_module",
            "location": 5397,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "monkeypatch": [
                    "MonkeyPatch"
                ]
            }
        },
        "TestSymbolResolution.test_aliased_var_does_not_resolve": {
            "name": "test_aliased_var_does_not_resolve",
            "location": 5430,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSymbolResolution.test_private_aliased_var_does_not_resolve": {
            "name": "test_private_aliased_var_does_not_resolve",
            "location": 5445,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSymbolResolution.test_private_var_does_not_resolve_during_macroexpansion": {
            "name": "test_private_var_does_not_resolve_during_macroexpansion",
            "location": 5466,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSymbolResolution.test_aliased_macro_symbol_resolution": {
            "name": "test_aliased_macro_symbol_resolution",
            "location": 5477,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSymbolResolution.test_fully_namespaced_sym_resolves": {
            "name": "test_fully_namespaced_sym_resolves",
            "location": 5496,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestSymbolResolution.test_cross_ns_macro_symbol_resolution": {
            "name": "test_cross_ns_macro_symbol_resolution",
            "location": 5540,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSymbolResolution.test_cross_ns_macro_symbol_resolution_with_aliases": {
            "name": "test_cross_ns_macro_symbol_resolution_with_aliases",
            "location": 5577,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSymbolResolution.test_cross_ns_macro_symbol_resolution_with_refers": {
            "name": "test_cross_ns_macro_symbol_resolution_with_refers",
            "location": 5614,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestWarnOnVarIndirection.other_ns": {
            "name": "other_ns",
            "location": 5655,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestWarnOnVarIndirection.test_warning_for_cross_ns_reference": {
            "name": "test_warning_for_cross_ns_reference",
            "location": 5669,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "other_ns": [],
                "caplog": []
            }
        },
        "TestWarnOnVarIndirection.test_no_warning_for_cross_ns_reference_if_warning_disabled": {
            "name": "test_no_warning_for_cross_ns_reference_if_warning_disabled",
            "location": 5681,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "other_ns": [],
                "caplog": []
            }
        },
        "TestWarnOnVarIndirection.test_warning_for_cross_ns_alias_reference": {
            "name": "test_warning_for_cross_ns_alias_reference",
            "location": 5691,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "other_ns": [],
                "caplog": []
            }
        },
        "TestWarnOnVarIndirection.test_no_warning_for_cross_ns_alias_reference_if_warning_disabled": {
            "name": "test_no_warning_for_cross_ns_alias_reference_if_warning_disabled",
            "location": 5701,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "other_ns": [],
                "caplog": []
            }
        },
        "TestWarnOnVarIndirection.test_warning_on_imported_name": {
            "name": "test_warning_on_imported_name",
            "location": 5709,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestWarnOnVarIndirection.test_exception_raised_for_nonexistent_imported_name": {
            "name": "test_exception_raised_for_nonexistent_imported_name",
            "location": 5725,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ],
                "caplog": []
            }
        },
        "TestWarnOnVarIndirection.test_exception_raised_for_nonexistent_var_name": {
            "name": "test_exception_raised_for_nonexistent_var_name",
            "location": 5736,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestVar.test_var_num_elems": {
            "name": "test_var_num_elems",
            "location": 5742,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestVar.test_var_does_not_resolve": {
            "name": "test_var_does_not_resolve",
            "location": 5749,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestVar.test_var": {
            "name": "test_var",
            "location": 5753,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestVar.test_var_reader_literal": {
            "name": "test_var_reader_literal",
            "location": 5764,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestYield.test_yield_must_be_in_fn_context": {
            "name": "test_yield_must_be_in_fn_context",
            "location": 5785,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestYield.test_yield_num_elems": {
            "name": "test_yield_num_elems",
            "location": 5796,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestYield.test_yield_control_only": {
            "name": "test_yield_control_only",
            "location": 5800,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestYield.test_yield_value": {
            "name": "test_yield_value",
            "location": 5818,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestYield.test_yield_as_coroutine": {
            "name": "test_yield_as_coroutine",
            "location": 5836,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestYield.test_yield_as_coroutine_with_multiple_yields": {
            "name": "test_yield_as_coroutine_with_multiple_yields",
            "location": 5855,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDefType.TestDefTypeBases.test_deftype_allows_artificially_abstract_super_type": {
            "name": "test_deftype_allows_artificially_abstract_super_type",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeBases.test_deftype_disallows_extra_methods_if_not_in_aa_super_type": {
            "name": "test_deftype_disallows_extra_methods_if_not_in_aa_super_type",
            "location": 847,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestDefType.TestDefTypeFields.test_deftype_fields": {
            "name": "test_deftype_fields",
            "location": 854,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeFields.test_deftype_mutable_field": {
            "name": "test_deftype_mutable_field",
            "location": 859,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeFields.test_deftype_cannot_set_immutable_field": {
            "name": "test_deftype_cannot_set_immutable_field",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeFields.test_deftype_allow_default_fields": {
            "name": "test_deftype_allow_default_fields",
            "location": 886,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeFields.test_deftype_disallow_non_default_fields_after_default": {
            "name": "test_deftype_disallow_non_default_fields_after_default",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMember.test_deftype_member_is_named_by_sym": {
            "name": "test_deftype_member_is_named_by_sym",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMember.test_deftype_member_args_are_vec": {
            "name": "test_deftype_member_args_are_vec",
            "location": 930,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMember.test_deftype_member_may_not_be_multiple_types": {
            "name": "test_deftype_member_may_not_be_multiple_types",
            "location": 970,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.class_interface": {
            "name": "class_interface",
            "location": 978,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_must_implement_interface_classmethod": {
            "name": "test_deftype_must_implement_interface_classmethod",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_args_are_syms": {
            "name": "test_deftype_classmethod_args_are_syms",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_may_not_reference_fields": {
            "name": "test_deftype_classmethod_may_not_reference_fields",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_args_includes_cls": {
            "name": "test_deftype_classmethod_args_includes_cls",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_disallows_recur": {
            "name": "test_deftype_classmethod_disallows_recur",
            "location": 1079,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_can_have_classmethod": {
            "name": "test_deftype_can_have_classmethod",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_symboltable_is_restored_after_classmethod": {
            "name": "test_deftype_symboltable_is_restored_after_classmethod",
            "location": 1110,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_empty_classmethod_body": {
            "name": "test_deftype_empty_classmethod_body",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_returns_value": {
            "name": "test_deftype_classmethod_returns_value",
            "location": 1138,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_only_support_valid_kwarg_strategies": {
            "name": "test_deftype_classmethod_only_support_valid_kwarg_strategies",
            "location": 1155,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_apply_kwargs": {
            "name": "test_deftype_classmethod_apply_kwargs",
            "location": 1167,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeClassMethod.test_deftype_classmethod_collect_kwargs": {
            "name": "test_deftype_classmethod_collect_kwargs",
            "location": 1184,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_fields_and_methods": {
            "name": "test_deftype_fields_and_methods",
            "location": 1201,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_with_args": {
            "name": "test_deftype_method_with_args",
            "location": 1216,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_with_varargs_malformed": {
            "name": "test_deftype_method_with_varargs_malformed",
            "location": 1246,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_with_varargs": {
            "name": "test_deftype_method_with_varargs",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_can_refer_to_type_within_methods": {
            "name": "test_deftype_can_refer_to_type_within_methods",
            "location": 1266,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_empty_method_body": {
            "name": "test_deftype_empty_method_body",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_allows_recur": {
            "name": "test_deftype_method_allows_recur",
            "location": 1294,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_args_vec_includes_this": {
            "name": "test_deftype_method_args_vec_includes_this",
            "location": 1309,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_args_are_syms": {
            "name": "test_deftype_method_args_are_syms",
            "location": 1337,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_returns_value": {
            "name": "test_deftype_method_returns_value",
            "location": 1341,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_only_support_valid_kwarg_strategies": {
            "name": "test_deftype_method_only_support_valid_kwarg_strategies",
            "location": 1358,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_kwargs": {
            "name": "test_deftype_method_kwargs",
            "location": 1389,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_no_deftype_method_arity_has_same_fixed_arity": {
            "name": "test_no_deftype_method_arity_has_same_fixed_arity",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_cannot_have_two_variadic_arities": {
            "name": "test_deftype_method_cannot_have_two_variadic_arities",
            "location": 1467,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_variadic_method_cannot_have_lower_fixed_arity_than_other_methods": {
            "name": "test_deftype_method_variadic_method_cannot_have_lower_fixed_arity_than_other_methods",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_deftype_method_does_not_support_kwargs": {
            "name": "test_deftype_method_does_not_support_kwargs",
            "location": 1511,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_multi_arity_deftype_method_dispatches_properly": {
            "name": "test_multi_arity_deftype_method_dispatches_properly",
            "location": 1517,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDefType.TestDefTypeMethod.test_multi_arity_deftype_method_call_fails_if_no_valid_arity": {
            "name": "test_multi_arity_deftype_method_call_fails_if_no_valid_arity",
            "location": 1566,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.property_interface": {
            "name": "property_interface",
            "location": 1593,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_must_implement_interface_property": {
            "name": "test_deftype_must_implement_interface_property",
            "location": 1639,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_property_includes_this": {
            "name": "test_deftype_property_includes_this",
            "location": 1645,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_property_args_are_syms": {
            "name": "test_deftype_property_args_are_syms",
            "location": 1658,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_property_may_not_have_args": {
            "name": "test_deftype_property_may_not_have_args",
            "location": 1671,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_property_disallows_recur": {
            "name": "test_deftype_property_disallows_recur",
            "location": 1684,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_field_can_be_property": {
            "name": "test_deftype_field_can_be_property",
            "location": 1695,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_can_have_property": {
            "name": "test_deftype_can_have_property",
            "location": 1702,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_empty_property_body": {
            "name": "test_deftype_empty_property_body",
            "location": 1714,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_property_returns_value": {
            "name": "test_deftype_property_returns_value",
            "location": 1726,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_property_does_not_support_kwargs": {
            "name": "test_deftype_property_does_not_support_kwargs",
            "location": 1747,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "kwarg_support": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeProperty.test_deftype_property_may_not_be_multi_arity": {
            "name": "test_deftype_property_may_not_be_multi_arity",
            "location": 1758,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.static_interface": {
            "name": "static_interface",
            "location": 1771,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_must_implement_interface_staticmethod": {
            "name": "test_deftype_must_implement_interface_staticmethod",
            "location": 1817,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_staticmethod_args_are_syms": {
            "name": "test_deftype_staticmethod_args_are_syms",
            "location": 1843,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_staticmethod_may_not_reference_fields": {
            "name": "test_deftype_staticmethod_may_not_reference_fields",
            "location": 1849,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_staticmethod_may_have_no_args": {
            "name": "test_deftype_staticmethod_may_have_no_args",
            "location": 1862,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_staticmethod_disallows_recur": {
            "name": "test_deftype_staticmethod_disallows_recur",
            "location": 1875,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_can_have_staticmethod": {
            "name": "test_deftype_can_have_staticmethod",
            "location": 1889,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_symboltable_is_restored_after_staticmethod": {
            "name": "test_deftype_symboltable_is_restored_after_staticmethod",
            "location": 1902,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_empty_staticmethod_body": {
            "name": "test_deftype_empty_staticmethod_body",
            "location": 1918,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_staticmethod_returns_value": {
            "name": "test_deftype_staticmethod_returns_value",
            "location": 1930,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_staticmethod_only_support_valid_kwarg_strategies": {
            "name": "test_deftype_staticmethod_only_support_valid_kwarg_strategies",
            "location": 1947,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestDefType.TestDefTypeStaticMethod.test_deftype_staticmethod_kwargs": {
            "name": "test_deftype_staticmethod_kwargs",
            "location": 1976,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeReaderForm.test_ns_does_not_exist": {
            "name": "test_ns_does_not_exist",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "test_ns": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeReaderForm.test_type_does_not_exist": {
            "name": "test_type_does_not_exist",
            "location": 1991,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "test_ns": [
                    "str"
                ]
            }
        },
        "TestDefType.TestDefTypeReaderForm.test_type_is_not_itype": {
            "name": "test_type_is_not_itype",
            "location": 1995,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "test_ns": [
                    "str"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestDefType.TestDefTypeReaderForm.test_type_is_not_irecord": {
            "name": "test_type_is_not_irecord",
            "location": 2005,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "test_ns": [
                    "str"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestFunctionDef.TestFunctionKeywordArgSupport.test_only_valid_kwarg_support_strategy": {
            "name": "test_only_valid_kwarg_support_strategy",
            "location": 2306,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.TestFunctionKeywordArgSupport.test_single_arity_apply_kwargs": {
            "name": "test_single_arity_apply_kwargs",
            "location": 2310,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.TestFunctionKeywordArgSupport.test_single_arity_collect_kwargs": {
            "name": "test_single_arity_collect_kwargs",
            "location": 2318,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestFunctionDef.TestFunctionKeywordArgSupport.test_multi_arity_fns_do_not_support_kwargs": {
            "name": "test_multi_arity_fns_do_not_support_kwargs",
            "location": 2330,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "kwarg_support": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyBases.test_reify_allows_artificially_abstract_super_type": {
            "name": "test_reify_allows_artificially_abstract_super_type",
            "location": 4169,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyBases.test_reify_disallows_extra_methods_if_not_in_aa_super_type": {
            "name": "test_reify_disallows_extra_methods_if_not_in_aa_super_type",
            "location": 4215,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestReify.TestReifyMember.test_reify_member_is_named_by_sym": {
            "name": "test_reify_member_is_named_by_sym",
            "location": 4237,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMember.test_reify_member_args_are_vec": {
            "name": "test_reify_member_args_are_vec",
            "location": 4241,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMember.test_reify_member_may_not_be_multiple_types": {
            "name": "test_reify_member_may_not_be_multiple_types",
            "location": 4277,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_fields_and_methods": {
            "name": "test_reify_fields_and_methods",
            "location": 4284,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_with_args": {
            "name": "test_reify_method_with_args",
            "location": 4297,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_with_varargs_malformed": {
            "name": "test_reify_method_with_varargs_malformed",
            "location": 4323,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_with_varargs": {
            "name": "test_reify_method_with_varargs",
            "location": 4329,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_empty_method_body": {
            "name": "test_reify_empty_method_body",
            "location": 4342,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_allows_recur": {
            "name": "test_reify_method_allows_recur",
            "location": 4353,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_args_vec_includes_this": {
            "name": "test_reify_method_args_vec_includes_this",
            "location": 4367,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_args_are_syms": {
            "name": "test_reify_method_args_are_syms",
            "location": 4392,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_returns_value": {
            "name": "test_reify_method_returns_value",
            "location": 4396,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_only_support_valid_kwarg_strategies": {
            "name": "test_reify_method_only_support_valid_kwarg_strategies",
            "location": 4411,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_kwargs": {
            "name": "test_reify_method_kwargs",
            "location": 4441,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_no_reify_method_arity_has_same_fixed_arity": {
            "name": "test_no_reify_method_arity_has_same_fixed_arity",
            "location": 4487,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_cannot_have_two_variadic_arities": {
            "name": "test_reify_method_cannot_have_two_variadic_arities",
            "location": 4514,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_variadic_method_cannot_have_lower_fixed_arity_than_other_methods": {
            "name": "test_reify_method_variadic_method_cannot_have_lower_fixed_arity_than_other_methods",
            "location": 4520,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_reify_method_does_not_support_kwargs": {
            "name": "test_reify_method_does_not_support_kwargs",
            "location": 4555,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_multi_arity_reify_method_dispatches_properly": {
            "name": "test_multi_arity_reify_method_dispatches_properly",
            "location": 4561,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestReify.TestReifyMethod.test_multi_arity_reify_method_call_fails_if_no_valid_arity": {
            "name": "test_multi_arity_reify_method_call_fails_if_no_valid_arity",
            "location": 4608,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.property_interface": {
            "name": "property_interface",
            "location": 4634,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_must_implement_interface_property": {
            "name": "test_reify_must_implement_interface_property",
            "location": 4672,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "code": [
                    "str"
                ],
                "ExceptionType": []
            }
        },
        "TestReify.TestReifyProperty.test_reify_property_includes_this": {
            "name": "test_reify_property_includes_this",
            "location": 4678,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_property_args_are_syms": {
            "name": "test_reify_property_args_are_syms",
            "location": 4690,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_property_may_not_have_args": {
            "name": "test_reify_property_may_not_have_args",
            "location": 4702,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_property_disallows_recur": {
            "name": "test_reify_property_disallows_recur",
            "location": 4714,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_can_have_property": {
            "name": "test_reify_can_have_property",
            "location": 4724,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_empty_property_body": {
            "name": "test_reify_empty_property_body",
            "location": 4736,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_property_does_not_support_kwargs": {
            "name": "test_reify_property_does_not_support_kwargs",
            "location": 4749,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ],
                "kwarg_support": [
                    "str"
                ]
            }
        },
        "TestReify.TestReifyProperty.test_reify_property_may_not_be_multi_arity": {
            "name": "test_reify_property_may_not_be_multi_arity",
            "location": 4760,
            "return": [],
            "arguments": {
                "self": [],
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "TestRequire._import_ns._import_ns_module": {
            "name": "_import_ns_module",
            "location": 4807,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/conftest.py": {
        "pickle_protocol": {
            "name": "pickle_protocol",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "core_ns_sym": {
            "name": "core_ns_sym",
            "location": 19,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {}
        },
        "core_ns": {
            "name": "core_ns",
            "location": 24,
            "return": [
                "runtime.Namespace"
            ],
            "arguments": {
                "core_ns_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "test_ns_sym": {
            "name": "test_ns_sym",
            "location": 29,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {
                "test_ns": [
                    "str"
                ]
            }
        },
        "ns": {
            "name": "ns",
            "location": 34,
            "return": [
                "runtime.Namespace"
            ],
            "arguments": {
                "test_ns": [
                    "str"
                ],
                "test_ns_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "lcompile": {
            "name": "lcompile",
            "location": 44,
            "return": [
                "CompileFn"
            ],
            "arguments": {
                "ns": [
                    "runtime.Namespace"
                ],
                "compiler_file_path": [
                    "str"
                ]
            }
        },
        "lcompile._lcompile": {
            "name": "_lcompile",
            "location": 45,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "resolver": [
                    "Optional[reader.Resolver]"
                ],
                "opts": [
                    "Optional[Dict[(str, bool)]]"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/core_test.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "truthy_value": {
            "name": "truthy_value",
            "location": 109,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "falsey_value": {
            "name": "falsey_value",
            "location": 114,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "non_nil_value": {
            "name": "non_nil_value",
            "location": 119,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "nil_value": {
            "name": "nil_value",
            "location": 124,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "lisp_value": {
            "name": "lisp_value",
            "location": 129,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "even_int": {
            "name": "even_int",
            "location": 134,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "even_float": {
            "name": "even_float",
            "location": 139,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "even_number": {
            "name": "even_number",
            "location": 144,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "odd_int": {
            "name": "odd_int",
            "location": 149,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "odd_float": {
            "name": "odd_float",
            "location": 154,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "odd_number": {
            "name": "odd_number",
            "location": 159,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "int_number": {
            "name": "int_number",
            "location": 164,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "float_number": {
            "name": "float_number",
            "location": 169,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "real_number": {
            "name": "real_number",
            "location": 174,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "complex_number": {
            "name": "complex_number",
            "location": 179,
            "return": [],
            "arguments": {
                "real_number": []
            }
        },
        "decimal": {
            "name": "decimal",
            "location": 184,
            "return": [],
            "arguments": {
                "even_int": [],
                "odd_int": []
            }
        },
        "fraction": {
            "name": "fraction",
            "location": 189,
            "return": [],
            "arguments": {
                "even_int": [],
                "odd_int": []
            }
        },
        "test_ex_info": {
            "name": "test_ex_info",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_last": {
            "name": "test_last",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "test_name": {
            "name": "test_name",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "test_namespace": {
            "name": "test_namespace",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "test_min": {
            "name": "test_min",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "test_max": {
            "name": "test_max",
            "location": 452,
            "return": [],
            "arguments": {}
        },
        "test_numerator": {
            "name": "test_numerator",
            "location": 460,
            "return": [],
            "arguments": {
                "fraction": []
            }
        },
        "test_denominator": {
            "name": "test_denominator",
            "location": 464,
            "return": [],
            "arguments": {
                "fraction": []
            }
        },
        "test_sort": {
            "name": "test_sort",
            "location": 468,
            "return": [],
            "arguments": {}
        },
        "test_is_map_entry": {
            "name": "test_is_map_entry",
            "location": 642,
            "return": [],
            "arguments": {}
        },
        "test_is_var": {
            "name": "test_is_var",
            "location": 934,
            "return": [],
            "arguments": {}
        },
        "test_range": {
            "name": "test_range",
            "location": 1281,
            "return": [],
            "arguments": {}
        },
        "test_constantly": {
            "name": "test_constantly",
            "location": 1289,
            "return": [],
            "arguments": {}
        },
        "test_comp": {
            "name": "test_comp",
            "location": 1308,
            "return": [],
            "arguments": {}
        },
        "test_juxt": {
            "name": "test_juxt",
            "location": 1318,
            "return": [],
            "arguments": {}
        },
        "test_partial": {
            "name": "test_partial",
            "location": 1325,
            "return": [],
            "arguments": {}
        },
        "test_partial_kw": {
            "name": "test_partial_kw",
            "location": 1331,
            "return": [],
            "arguments": {}
        },
        "test_string_format": {
            "name": "test_string_format",
            "location": 1471,
            "return": [],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 1481,
            "return": [],
            "arguments": {}
        },
        "test_split_at": {
            "name": "test_split_at",
            "location": 1491,
            "return": [],
            "arguments": {}
        },
        "test_split_with": {
            "name": "test_split_with",
            "location": 1509,
            "return": [],
            "arguments": {}
        },
        "test_group_by": {
            "name": "test_group_by",
            "location": 1524,
            "return": [],
            "arguments": {}
        },
        "test_cycle": {
            "name": "test_cycle",
            "location": 1533,
            "return": [],
            "arguments": {}
        },
        "test_repeat": {
            "name": "test_repeat",
            "location": 1540,
            "return": [],
            "arguments": {}
        },
        "test_repeatedly": {
            "name": "test_repeatedly",
            "location": 1546,
            "return": [],
            "arguments": {}
        },
        "test_partition": {
            "name": "test_partition",
            "location": 1551,
            "return": [],
            "arguments": {}
        },
        "TestNot.test_falsey": {
            "name": "test_falsey",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "falsey_value": []
            }
        },
        "TestNot.test_truth": {
            "name": "test_truth",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "truthy_value": []
            }
        },
        "TestEquals.test_equals_to_itself": {
            "name": "test_equals_to_itself",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestEquals.test_consecutive_equals": {
            "name": "test_consecutive_equals",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotEquals.test_equals_to_itself": {
            "name": "test_equals_to_itself",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestNotEquals.test_consecutive_not_equals": {
            "name": "test_consecutive_not_equals",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComparison.test_one_arg_gt": {
            "name": "test_one_arg_gt",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestComparison.test_gt": {
            "name": "test_gt",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComparison.test_one_arg_ge": {
            "name": "test_one_arg_ge",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestComparison.test_ge": {
            "name": "test_ge",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComparison.test_one_arg_lt": {
            "name": "test_one_arg_lt",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestComparison.test_lt": {
            "name": "test_lt",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComparison.test_one_arg_le": {
            "name": "test_one_arg_le",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestComparison.test_le": {
            "name": "test_le",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComparison.test_is_identical": {
            "name": "test_is_identical",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestComparison.test_is_not_identical": {
            "name": "test_is_not_identical",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComparison.test_hash": {
            "name": "test_hash",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestArithmetic.test_addition": {
            "name": "test_addition",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArithmetic.test_subtraction": {
            "name": "test_subtraction",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArithmetic.test_multiplication": {
            "name": "test_multiplication",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArithmetic.test_division": {
            "name": "test_division",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArithmetic.test_mod": {
            "name": "test_mod",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "x": [],
                "y": []
            }
        },
        "TestArithmetic.test_quot": {
            "name": "test_quot",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "x": [],
                "y": []
            }
        },
        "TestArithmetic.test_rem": {
            "name": "test_rem",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "x": [],
                "y": []
            }
        },
        "TestArithmetic.test_inc": {
            "name": "test_inc",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "x": []
            }
        },
        "TestArithmetic.test_dec": {
            "name": "test_dec",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "x": []
            }
        },
        "TestIsAny.test_any_always_true": {
            "name": "test_any_always_true",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestIsAssociative.test_is_associative": {
            "name": "test_is_associative",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsAssociative.test_is_not_associative": {
            "name": "test_is_not_associative",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsClass.test_is_class": {
            "name": "test_is_class",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "tp": []
            }
        },
        "TestIsClass.test_is_not_class": {
            "name": "test_is_not_class",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "tp": []
            }
        },
        "TestIsColl.test_is_coll": {
            "name": "test_is_coll",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsColl.test_is_not_coll": {
            "name": "test_is_not_coll",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsFalse.test_false_is_false": {
            "name": "test_false_is_false",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsFalse.test_none_is_not_false": {
            "name": "test_none_is_not_false",
            "location": 534,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsFalse.test_truth_values_are_not_false": {
            "name": "test_truth_values_are_not_false",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "truthy_value": []
            }
        },
        "TestIsFn.basilisp_fn": {
            "name": "basilisp_fn",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsFn.py_fn": {
            "name": "py_fn",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsFn.test_is_fn": {
            "name": "test_is_fn",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "basilisp_fn": [],
                "py_fn": []
            }
        },
        "TestIsFn.test_is_not_fn": {
            "name": "test_is_not_fn",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsFn.test_function_is_ifn": {
            "name": "test_function_is_ifn",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "basilisp_fn": [],
                "py_fn": []
            }
        },
        "TestIsFn.test_other_is_ifn": {
            "name": "test_other_is_ifn",
            "location": 582,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsFn.test_is_not_ifn": {
            "name": "test_is_not_ifn",
            "location": 586,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsIdent.test_is_ident": {
            "name": "test_is_ident",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsIdent.test_is_qualified_ident": {
            "name": "test_is_qualified_ident",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsIdent.test_is_not_qualified_ident": {
            "name": "test_is_not_qualified_ident",
            "location": 618,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsIdent.test_is_keyword": {
            "name": "test_is_keyword",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsIdent.test_is_qualified_keyword": {
            "name": "test_is_qualified_keyword",
            "location": 628,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsIdent.test_is_symbol": {
            "name": "test_is_symbol",
            "location": 632,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsIdent.test_is_qualified_symbol": {
            "name": "test_is_qualified_symbol",
            "location": 638,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_complex": {
            "name": "test_is_complex",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestNumericPredicates.test_real_is_not_complex": {
            "name": "test_real_is_not_complex",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "real_number": []
            }
        },
        "TestNumericPredicates.test_fraction_is_not_complex": {
            "name": "test_fraction_is_not_complex",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "fraction": []
            }
        },
        "TestNumericPredicates.test_decimal_is_not_complex": {
            "name": "test_decimal_is_not_complex",
            "location": 659,
            "return": [],
            "arguments": {
                "self": [],
                "decimal": []
            }
        },
        "TestNumericPredicates.test_is_decimal": {
            "name": "test_is_decimal",
            "location": 662,
            "return": [],
            "arguments": {
                "self": [],
                "decimal": []
            }
        },
        "TestNumericPredicates.test_real_is_not_decimal": {
            "name": "test_real_is_not_decimal",
            "location": 665,
            "return": [],
            "arguments": {
                "self": [],
                "real_number": []
            }
        },
        "TestNumericPredicates.test_fraction_is_not_decimal": {
            "name": "test_fraction_is_not_decimal",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "fraction": []
            }
        },
        "TestNumericPredicates.test_complex_is_not_decimal": {
            "name": "test_complex_is_not_decimal",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestNumericPredicates.test_is_double": {
            "name": "test_is_double",
            "location": 674,
            "return": [],
            "arguments": {
                "self": [],
                "float_number": []
            }
        },
        "TestNumericPredicates.test_decimal_is_not_double": {
            "name": "test_decimal_is_not_double",
            "location": 678,
            "return": [],
            "arguments": {
                "self": [],
                "decimal": []
            }
        },
        "TestNumericPredicates.test_fraction_is_not_double": {
            "name": "test_fraction_is_not_double",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "fraction": []
            }
        },
        "TestNumericPredicates.test_integer_is_not_double": {
            "name": "test_integer_is_not_double",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "int_number": []
            }
        },
        "TestNumericPredicates.test_complex_is_not_double": {
            "name": "test_complex_is_not_double",
            "location": 690,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestNumericPredicates.test_even_nums_are_even": {
            "name": "test_even_nums_are_even",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "even_number": []
            }
        },
        "TestNumericPredicates.test_odd_nums_are_not_even": {
            "name": "test_odd_nums_are_not_even",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "odd_number": []
            }
        },
        "TestNumericPredicates.test_is_int": {
            "name": "test_is_int",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "int_number": []
            }
        },
        "TestNumericPredicates.test_decimal_is_not_int": {
            "name": "test_decimal_is_not_int",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "decimal": []
            }
        },
        "TestNumericPredicates.test_double_is_not_int": {
            "name": "test_double_is_not_int",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "float_number": []
            }
        },
        "TestNumericPredicates.test_fraction_is_not_int": {
            "name": "test_fraction_is_not_int",
            "location": 712,
            "return": [],
            "arguments": {
                "self": [],
                "fraction": []
            }
        },
        "TestNumericPredicates.test_complex_is_not_int": {
            "name": "test_complex_is_not_int",
            "location": 716,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestNumericPredicates.test_is_positive": {
            "name": "test_is_positive",
            "location": 721,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_not_positive": {
            "name": "test_is_not_positive",
            "location": 725,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_non_neg": {
            "name": "test_is_non_neg",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_not_non_neg": {
            "name": "test_is_not_non_neg",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_zero": {
            "name": "test_is_zero",
            "location": 736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumericPredicates.test_is_not_zero": {
            "name": "test_is_not_zero",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_neg": {
            "name": "test_is_neg",
            "location": 746,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_not_neg": {
            "name": "test_is_not_neg",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_neg_int": {
            "name": "test_is_neg_int",
            "location": 754,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_not_neg_int": {
            "name": "test_is_not_neg_int",
            "location": 760,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_nat_int": {
            "name": "test_is_nat_int",
            "location": 764,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_not_nat_int": {
            "name": "test_is_not_nat_int",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestNumericPredicates.test_is_number_includes_reals": {
            "name": "test_is_number_includes_reals",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "real_number": []
            }
        },
        "TestNumericPredicates.test_is_number_includes_complex": {
            "name": "test_is_number_includes_complex",
            "location": 776,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestNumericPredicates.test_is_real_number": {
            "name": "test_is_real_number",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "real_number": []
            }
        },
        "TestNumericPredicates.test_is_not_real_number": {
            "name": "test_is_not_real_number",
            "location": 782,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestNumericPredicates.test_is_fraction": {
            "name": "test_is_fraction",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "fraction": []
            }
        },
        "TestNumericPredicates.test_decimal_is_not_fraction": {
            "name": "test_decimal_is_not_fraction",
            "location": 788,
            "return": [],
            "arguments": {
                "self": [],
                "decimal": []
            }
        },
        "TestNumericPredicates.test_double_is_not_fraction": {
            "name": "test_double_is_not_fraction",
            "location": 791,
            "return": [],
            "arguments": {
                "self": [],
                "float_number": []
            }
        },
        "TestNumericPredicates.test_int_is_not_fraction": {
            "name": "test_int_is_not_fraction",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "int_number": []
            }
        },
        "TestNumericPredicates.test_complex_is_not_fraction": {
            "name": "test_complex_is_not_fraction",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestNumericPredicates.test_odd_nums_are_odd": {
            "name": "test_odd_nums_are_odd",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "odd_number": []
            }
        },
        "TestNumericPredicates.test_even_nums_are_not_odd": {
            "name": "test_even_nums_are_not_odd",
            "location": 803,
            "return": [],
            "arguments": {
                "self": [],
                "even_number": []
            }
        },
        "TestNumericPredicates.test_fraction_is_rational": {
            "name": "test_fraction_is_rational",
            "location": 806,
            "return": [],
            "arguments": {
                "self": [],
                "fraction": []
            }
        },
        "TestNumericPredicates.test_decimal_is_rational": {
            "name": "test_decimal_is_rational",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "decimal": []
            }
        },
        "TestNumericPredicates.test_int_is_rational": {
            "name": "test_int_is_rational",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "int_number": []
            }
        },
        "TestNumericPredicates.test_double_is_not_rational": {
            "name": "test_double_is_not_rational",
            "location": 815,
            "return": [],
            "arguments": {
                "self": [],
                "float_number": []
            }
        },
        "TestNumericPredicates.test_complex_is_not_rational": {
            "name": "test_complex_is_not_rational",
            "location": 818,
            "return": [],
            "arguments": {
                "self": [],
                "complex_number": []
            }
        },
        "TestIsNil.test_nil_values_are_nil": {
            "name": "test_nil_values_are_nil",
            "location": 823,
            "return": [],
            "arguments": {
                "self": [],
                "nil_value": []
            }
        },
        "TestIsNil.test_non_nil_values_are_not_nil": {
            "name": "test_non_nil_values_are_not_nil",
            "location": 826,
            "return": [],
            "arguments": {
                "self": [],
                "non_nil_value": []
            }
        },
        "TestIsPy.test_is_py_dict": {
            "name": "test_is_py_dict",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_not_py_dict": {
            "name": "test_is_not_py_dict",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_py_frozenset": {
            "name": "test_is_py_frozenset",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_not_py_frozenset": {
            "name": "test_is_not_py_frozenset",
            "location": 844,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_py_list": {
            "name": "test_is_py_list",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_not_py_list": {
            "name": "test_is_not_py_list",
            "location": 852,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_py_set": {
            "name": "test_is_py_set",
            "location": 856,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_not_py_set": {
            "name": "test_is_not_py_set",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_py_tuple": {
            "name": "test_is_py_tuple",
            "location": 864,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsPy.test_is_not_py_tuple": {
            "name": "test_is_not_py_tuple",
            "location": 868,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsSome.test_nil_values_are_not_some": {
            "name": "test_nil_values_are_not_some",
            "location": 873,
            "return": [],
            "arguments": {
                "self": [],
                "nil_value": []
            }
        },
        "TestIsSome.test_non_nil_values_are_some": {
            "name": "test_non_nil_values_are_some",
            "location": 876,
            "return": [],
            "arguments": {
                "self": [],
                "non_nil_value": []
            }
        },
        "TestIsTrue.test_true_is_true": {
            "name": "test_true_is_true",
            "location": 881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsTrue.test_other_values_are_not_true": {
            "name": "test_other_values_are_not_true",
            "location": 884,
            "return": [],
            "arguments": {
                "self": [],
                "lisp_value": []
            }
        },
        "TestIsUUID.test_is_uuid": {
            "name": "test_is_uuid",
            "location": 890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsUUID.test_is_not_uuid": {
            "name": "test_is_not_uuid",
            "location": 903,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsUUID.test_is_uuid_like": {
            "name": "test_is_uuid_like",
            "location": 917,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestIsUUID.test_is_not_uuid_like": {
            "name": "test_is_not_uuid_like",
            "location": 930,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TestExceptionData.test_ex_cause_for_non_exception": {
            "name": "test_ex_cause_for_non_exception",
            "location": 942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_has_no_cause": {
            "name": "test_ex_has_no_cause",
            "location": 945,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_has_cause": {
            "name": "test_ex_has_cause",
            "location": 948,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_has_contextual_cause": {
            "name": "test_ex_has_contextual_cause",
            "location": 961,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_data_for_non_exception": {
            "name": "test_ex_data_for_non_exception",
            "location": 974,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_data_iexceptioninfo": {
            "name": "test_ex_data_iexceptioninfo",
            "location": 977,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_data_standard_exception": {
            "name": "test_ex_data_standard_exception",
            "location": 983,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_message_for_non_exception": {
            "name": "test_ex_message_for_non_exception",
            "location": 989,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_message_iexceptioninfo": {
            "name": "test_ex_message_iexceptioninfo",
            "location": 992,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionData.test_ex_message_standard_exception": {
            "name": "test_ex_message_standard_exception",
            "location": 998,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_and": {
            "name": "test_bit_and",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_or": {
            "name": "test_bit_or",
            "location": 1010,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_not": {
            "name": "test_bit_not",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_shift_left": {
            "name": "test_bit_shift_left",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_shift_right": {
            "name": "test_bit_shift_right",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_xor": {
            "name": "test_bit_xor",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_clear": {
            "name": "test_bit_clear",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_flip": {
            "name": "test_bit_flip",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_set": {
            "name": "test_bit_set",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBitManipulation.test_bit_test": {
            "name": "test_bit_test",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_contains": {
            "name": "test_contains",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_disj": {
            "name": "test_disj",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_dissoc": {
            "name": "test_dissoc",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_get": {
            "name": "test_get",
            "location": 1074,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_find": {
            "name": "test_find",
            "location": 1089,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_assoc_in": {
            "name": "test_assoc_in",
            "location": 1098,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_get_in": {
            "name": "test_get_in",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_update_in": {
            "name": "test_update_in",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_keys": {
            "name": "test_keys",
            "location": 1254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_vals": {
            "name": "test_vals",
            "location": 1259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssociativeFunctions.test_select_keys": {
            "name": "test_select_keys",
            "location": 1264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComplement.is_even": {
            "name": "is_even",
            "location": 1298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComplement.test_evens_are_even": {
            "name": "test_evens_are_even",
            "location": 1301,
            "return": [],
            "arguments": {
                "self": [],
                "is_even": [],
                "even_number": []
            }
        },
        "TestComplement.test_odds_are_not_even": {
            "name": "test_odds_are_not_even",
            "location": 1304,
            "return": [],
            "arguments": {
                "self": [],
                "is_even": [],
                "odd_number": []
            }
        },
        "TestIsEvery.test_is_every": {
            "name": "test_is_every",
            "location": 1354,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestIsEvery.test_is_not_every": {
            "name": "test_is_not_every",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestIsNotEvery.test_is_not_every": {
            "name": "test_is_not_every",
            "location": 1369,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestIsNotEvery.test_not_is_not_every": {
            "name": "test_not_is_not_every",
            "location": 1376,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestSome.test_is_some": {
            "name": "test_is_some",
            "location": 1391,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestSome.test_is_not_some": {
            "name": "test_is_not_some",
            "location": 1397,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestNotAny.test_is_not_any": {
            "name": "test_is_not_any",
            "location": 1412,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestNotAny.test_not_is_not_any": {
            "name": "test_not_is_not_any",
            "location": 1418,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestRandom.coll": {
            "name": "coll",
            "location": 1431,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TestRandom.test_rand_no_arg": {
            "name": "test_rand_no_arg",
            "location": 1434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandom.test_rand_only_upper": {
            "name": "test_rand_only_upper",
            "location": 1439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandom.test_rand_upper_and_lower": {
            "name": "test_rand_upper_and_lower",
            "location": 1444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandom.test_rand_int_only_upper": {
            "name": "test_rand_int_only_upper",
            "location": 1449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandom.test_rand_int_upper_and_lower": {
            "name": "test_rand_int_upper_and_lower",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandom.test_rand_nth": {
            "name": "test_rand_nth",
            "location": 1459,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestRandom.test_random_sample": {
            "name": "test_random_sample",
            "location": 1463,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestRandom.test_shuffle": {
            "name": "test_shuffle",
            "location": 1467,
            "return": [],
            "arguments": {
                "self": [],
                "coll": []
            }
        },
        "TestPrintFunctions.test_pr_str": {
            "name": "test_pr_str",
            "location": 1577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrintFunctions.test_prn_str": {
            "name": "test_prn_str",
            "location": 1583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrintFunctions.test_print_str": {
            "name": "test_print_str",
            "location": 1589,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrintFunctions.test_println_str": {
            "name": "test_println_str",
            "location": 1595,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexFunctions.test_re_find": {
            "name": "test_re_find",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexFunctions.test_re_matches": {
            "name": "test_re_matches",
            "location": 1616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegexFunctions.test_re_seq": {
            "name": "test_re_seq",
            "location": 1623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsFn.basilisp_fn.repeat": {
            "name": "repeat",
            "location": 545,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "basilisp-main/tests/basilisp/delay_test.py": {
        "test_delay": {
            "name": "test_delay",
            "location": 5,
            "return": [],
            "arguments": {
                "capsys": []
            }
        }
    },
    "basilisp-main/tests/basilisp/helpers.py": {
        "get_or_create_ns": {
            "name": "get_or_create_ns",
            "location": 9,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "name": [
                    "sym.Symbol"
                ],
                "refer": [
                    "Tuple[sym.Symbol]"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/importer_test.py": {
        "importer_counter": {
            "name": "importer_counter",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_hook_imports": {
            "name": "test_hook_imports",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_demunged_import": {
            "name": "test_demunged_import",
            "location": 38,
            "return": [],
            "arguments": {
                "testdir": [
                    "Testdir"
                ]
            }
        },
        "_ns_and_module": {
            "name": "_ns_and_module",
            "location": 73,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "TestImporter.do_cache_namespaces": {
            "name": "do_cache_namespaces",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestImporter.do_not_cache_namespaces": {
            "name": "do_not_cache_namespaces",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestImporter.module_cache": {
            "name": "module_cache",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImporter.module_dir": {
            "name": "module_dir",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "MonkeyPatch"
                ],
                "module_cache": []
            }
        },
        "TestImporter.make_new_module": {
            "name": "make_new_module",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "module_dir": []
            }
        },
        "TestImporter.load_namespace": {
            "name": "load_namespace",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImporter.test_import_module": {
            "name": "test_import_module",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.test_import_module_without_cache": {
            "name": "test_import_module_without_cache",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "do_not_cache_namespaces": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.cached_module_ns": {
            "name": "cached_module_ns",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporter.cached_module_file": {
            "name": "cached_module_file",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "do_cache_namespaces": [],
                "cached_module_ns": [],
                "make_new_module": []
            }
        },
        "TestImporter.test_import_module_with_cache": {
            "name": "test_import_module_with_cache",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "module_dir": [],
                "cached_module_ns": [],
                "cached_module_file": [],
                "load_namespace": []
            }
        },
        "TestImporter.test_import_module_with_invalid_cache_magic_number": {
            "name": "test_import_module_with_invalid_cache_magic_number",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "module_dir": [],
                "cached_module_ns": [],
                "cached_module_file": [],
                "load_namespace": []
            }
        },
        "TestImporter.test_import_module_with_truncated_timestamp": {
            "name": "test_import_module_with_truncated_timestamp",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "module_dir": [],
                "cached_module_ns": [],
                "cached_module_file": [],
                "load_namespace": []
            }
        },
        "TestImporter.test_import_module_with_invalid_timestamp": {
            "name": "test_import_module_with_invalid_timestamp",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "module_dir": [],
                "cached_module_ns": [],
                "cached_module_file": [],
                "load_namespace": []
            }
        },
        "TestImporter.test_import_module_with_truncated_rawsize": {
            "name": "test_import_module_with_truncated_rawsize",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "module_dir": [],
                "cached_module_ns": [],
                "cached_module_file": [],
                "load_namespace": []
            }
        },
        "TestImporter.test_import_module_with_invalid_rawsize": {
            "name": "test_import_module_with_invalid_rawsize",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "module_dir": [],
                "cached_module_ns": [],
                "cached_module_file": [],
                "load_namespace": []
            }
        },
        "TestImporter.make_new_module._make_new_module": {
            "name": "_make_new_module",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestImporter.load_namespace._load_namespace": {
            "name": "_load_namespace",
            "location": 156,
            "return": [],
            "arguments": {
                "ns_name": [
                    "str"
                ]
            }
        },
        "TestImporter.TestPackageStructure.test_import_module_no_child": {
            "name": "test_import_module_no_child",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.TestPackageStructure.test_import_module_with_non_code_child": {
            "name": "test_import_module_with_non_code_child",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.TestPackageStructure.test_import_module_without_init_with_python_child": {
            "name": "test_import_module_without_init_with_python_child",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.TestPackageStructure.test_import_basilisp_child_with_python_init": {
            "name": "test_import_basilisp_child_with_python_init",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.TestPackageStructure.test_import_basilisp_and_python_module_siblings": {
            "name": "test_import_basilisp_and_python_module_siblings",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.TestPackageStructure.test_import_basilisp_child_with_basilisp_init": {
            "name": "test_import_basilisp_child_with_basilisp_init",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.TestPackageStructure.test_import_module_without_init": {
            "name": "test_import_module_without_init",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        },
        "TestImporter.TestPackageStructure.test_import_module_with_namespace_only_pkg": {
            "name": "test_import_module_with_namespace_only_pkg",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "make_new_module": [],
                "load_namespace": []
            }
        }
    },
    "basilisp-main/tests/basilisp/keyword_test.py": {
        "test_keyword_identity_equals": {
            "name": "test_keyword_identity_equals",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_keyword_name_and_ns": {
            "name": "test_keyword_name_and_ns",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_keyword_str_and_repr": {
            "name": "test_keyword_str_and_repr",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_keyword_as_function": {
            "name": "test_keyword_as_function",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_keyword_pickleability": {
            "name": "test_keyword_pickleability",
            "location": 59,
            "return": [],
            "arguments": {
                "pickle_protocol": [
                    "int"
                ],
                "o": [
                    "Keyword"
                ]
            }
        },
        "TestKeywordCompletion.empty_cache": {
            "name": "empty_cache",
            "location": 65,
            "return": [
                "lmap.PersistentMap[(int, Keyword)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordCompletion.test_empty_cache_no_completion": {
            "name": "test_empty_cache_no_completion",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "empty_cache": [
                    "lmap.PersistentMap[(int, Keyword)]"
                ]
            }
        },
        "TestKeywordCompletion.cache": {
            "name": "cache",
            "location": 74,
            "return": [
                "lmap.PersistentMap[(int, Keyword)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordCompletion.test_no_ns_completion": {
            "name": "test_no_ns_completion",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "cache": [
                    "lmap.PersistentMap[(int, Keyword)]"
                ]
            }
        },
        "TestKeywordCompletion.test_ns_completion": {
            "name": "test_ns_completion",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "cache": [
                    "lmap.PersistentMap[(int, Keyword)]"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/langutil_test.py": {
        "test_demunge": {
            "name": "test_demunge",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_munge_disallows_syms": {
            "name": "test_munge_disallows_syms",
            "location": 36,
            "return": [],
            "arguments": {
                "expected": [],
                "input": []
            }
        },
        "test_munge_disallows_python_builtins": {
            "name": "test_munge_disallows_python_builtins",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_munge_disallows_python_kws": {
            "name": "test_munge_disallows_python_kws",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "basilisp-main/tests/basilisp/list_test.py": {
        "test_list_interface_membership": {
            "name": "test_list_interface_membership",
            "location": 34,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "test_list_slice": {
            "name": "test_list_slice",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_list_bool": {
            "name": "test_list_bool",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_list_cons": {
            "name": "test_list_cons",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_peek": {
            "name": "test_peek",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_pop": {
            "name": "test_pop",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_list_meta": {
            "name": "test_list_meta",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_list_with_meta": {
            "name": "test_list_with_meta",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_list_seq": {
            "name": "test_list_seq",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_list_first": {
            "name": "test_list_first",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_list_rest": {
            "name": "test_list_rest",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_list_pickleability": {
            "name": "test_list_pickleability",
            "location": 135,
            "return": [],
            "arguments": {
                "pickle_protocol": [
                    "int"
                ],
                "o": [
                    "llist.PersistentList"
                ]
            }
        },
        "test_list_repr": {
            "name": "test_list_repr",
            "location": 147,
            "return": [],
            "arguments": {
                "l": [
                    "llist.PersistentList"
                ],
                "str_repr": [
                    "str"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/lrepr_test.py": {
        "test_ns": {
            "name": "test_ns",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "compiler_file_path": {
            "name": "compiler_file_path",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_print_dup": {
            "name": "test_print_dup",
            "location": 29,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "s": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_print_length": {
            "name": "test_print_length",
            "location": 49,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "s": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_print_length_maps": {
            "name": "test_print_length_maps",
            "location": 53,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "test_print_level": {
            "name": "test_print_level",
            "location": 104,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "s": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_print_meta": {
            "name": "test_print_meta",
            "location": 145,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "s": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_print_readably": {
            "name": "test_print_readably",
            "location": 149,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "test_lrepr": {
            "name": "test_lrepr",
            "location": 191,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "repr": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "test_lrepr_round_trip": {
            "name": "test_lrepr_round_trip",
            "location": 227,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "o": [],
                "code": [
                    "str"
                ]
            }
        },
        "test_lrepr_round_trip_special_cases": {
            "name": "test_lrepr_round_trip_special_cases",
            "location": 231,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ]
            }
        },
        "test_lstr": {
            "name": "test_lstr",
            "location": 271,
            "return": [],
            "arguments": {
                "lcompile": [
                    "CompileFn"
                ],
                "s": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/map_test.py": {
        "test_map_entry_interface_membership": {
            "name": "test_map_entry_interface_membership",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_map_interface_membership": {
            "name": "test_map_interface_membership",
            "location": 40,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "test_assoc": {
            "name": "test_assoc",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_map_bool": {
            "name": "test_map_bool",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_map_as_function": {
            "name": "test_map_as_function",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_contains": {
            "name": "test_contains",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_dissoc": {
            "name": "test_dissoc",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_entry": {
            "name": "test_entry",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_val_at": {
            "name": "test_val_at",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_map_cons": {
            "name": "test_map_cons",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_map_meta": {
            "name": "test_map_meta",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_map_with_meta": {
            "name": "test_map_with_meta",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_map_seq": {
            "name": "test_map_seq",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_map_repr": {
            "name": "test_map_repr",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "test_hash_map_creator": {
            "name": "test_hash_map_creator",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_map_pickleability": {
            "name": "test_map_pickleability",
            "location": 227,
            "return": [],
            "arguments": {
                "pickle_protocol": [
                    "int"
                ],
                "o": [
                    "lmap.PersistentMap"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/multifn_test.py": {
        "test_multi_function": {
            "name": "test_multi_function",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_multi_function.dispatch": {
            "name": "dispatch",
            "location": 10,
            "return": [
                "kw.Keyword"
            ],
            "arguments": {
                "v": []
            }
        },
        "test_multi_function.fn_a": {
            "name": "fn_a",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "v": []
            }
        },
        "test_multi_function.fn_b": {
            "name": "fn_b",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "v": []
            }
        },
        "test_multi_function.fn_default": {
            "name": "fn_default",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "v": []
            }
        }
    },
    "basilisp-main/tests/basilisp/namespace_test.py": {
        "ns_cache": {
            "name": "ns_cache",
            "location": 15,
            "return": [
                "atom.Atom[NamespaceMap]"
            ],
            "arguments": {
                "core_ns_sym": [
                    "sym.Symbol"
                ],
                "core_ns": [
                    "Namespace"
                ]
            }
        },
        "ns_sym": {
            "name": "ns_sym",
            "location": 25,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {}
        },
        "test_create_ns": {
            "name": "test_create_ns",
            "location": 29,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "ns_cache_with_existing_ns": {
            "name": "ns_cache_with_existing_ns",
            "location": 38,
            "return": [
                "atom.Atom[NamespaceMap]"
            ],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "core_ns_sym": [
                    "sym.Symbol"
                ],
                "core_ns": [
                    "Namespace"
                ]
            }
        },
        "test_get_existing_ns": {
            "name": "test_get_existing_ns",
            "location": 49,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "ns_cache_with_existing_ns": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_remove_ns": {
            "name": "test_remove_ns",
            "location": 59,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "ns_cache_with_existing_ns": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "other_ns_sym": {
            "name": "other_ns_sym",
            "location": 70,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {}
        },
        "test_remove_non_existent_ns": {
            "name": "test_remove_non_existent_ns",
            "location": 74,
            "return": [],
            "arguments": {
                "other_ns_sym": [
                    "sym.Symbol"
                ],
                "ns_cache_with_existing_ns": [
                    "patch"
                ]
            }
        },
        "test_alter_ns_meta": {
            "name": "test_alter_ns_meta",
            "location": 83,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ],
                "ns_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "test_reset_ns_meta": {
            "name": "test_reset_ns_meta",
            "location": 97,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ],
                "ns_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "test_cannot_remove_core": {
            "name": "test_cannot_remove_core",
            "location": 111,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_imports": {
            "name": "test_imports",
            "location": 116,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_intern_does_not_overwrite": {
            "name": "test_intern_does_not_overwrite",
            "location": 126,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_unmap": {
            "name": "test_unmap",
            "location": 149,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_refer": {
            "name": "test_refer",
            "location": 166,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_cannot_refer_private": {
            "name": "test_cannot_refer_private",
            "location": 180,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_refer_all": {
            "name": "test_refer_all",
            "location": 194,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_refer_does_not_shadow_intern": {
            "name": "test_refer_does_not_shadow_intern",
            "location": 231,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "test_alias": {
            "name": "test_alias",
            "location": 252,
            "return": [],
            "arguments": {
                "ns_cache": [
                    "atom.Atom[NamespaceMap]"
                ]
            }
        },
        "TestCompletion.ns": {
            "name": "ns",
            "location": 268,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompletion.test_ns_completion": {
            "name": "test_ns_completion",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "ns": [
                    "Namespace"
                ]
            }
        },
        "TestCompletion.test_import_and_alias": {
            "name": "test_import_and_alias",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "ns": [
                    "Namespace"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/promise_test.py": {
        "test_promise": {
            "name": "test_promise",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_promise.set_promise": {
            "name": "set_promise",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "basilisp-main/tests/basilisp/prompt_test.py": {
        "TestCompleter.completer": {
            "name": "completer",
            "location": 21,
            "return": [
                "Completer"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleter.test_ns": {
            "name": "test_ns",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleter.completions": {
            "name": "completions",
            "location": 29,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleter.patch_completions": {
            "name": "patch_completions",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "completions": [
                    "Iterable[str]"
                ]
            }
        },
        "TestCompleter.test_completer": {
            "name": "test_completer",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "completer": [
                    "Completer"
                ],
                "ns": [
                    "Namespace"
                ],
                "val": [
                    "str"
                ],
                "expected": [
                    "Tuple[str]"
                ]
            }
        },
        "TestPrompter.session": {
            "name": "session",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrompter.session_cls": {
            "name": "session_cls",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestPrompter.test_constructor": {
            "name": "test_constructor",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "session_cls": []
            }
        },
        "TestPrompter.test_prompt_toolkit_prompt": {
            "name": "test_prompt_toolkit_prompt",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestPrompter.test_pygments_styled_print": {
            "name": "test_pygments_styled_print",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyBindings.make_key_press_event": {
            "name": "make_key_press_event",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TestKeyBindings.handler": {
            "name": "handler",
            "location": 177,
            "return": [
                "Binding"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyBindings.assert_syntax_error": {
            "name": "assert_syntax_error",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyBindings.test_valid_single_line_syntax": {
            "name": "test_valid_single_line_syntax",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [
                    "Binding"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "TestKeyBindings.test_multiline_input": {
            "name": "test_multiline_input",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [
                    "Binding"
                ],
                "lines": [
                    "Tuple[str]"
                ]
            }
        },
        "TestKeyBindings.test_syntax_error": {
            "name": "test_syntax_error",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [
                    "Binding"
                ],
                "line": [
                    "str"
                ],
                "assert_syntax_error": [
                    "Callable[([], None)]"
                ]
            }
        },
        "TestKeyBindings.assert_syntax_error._assert_syntax_error": {
            "name": "_assert_syntax_error",
            "location": 190,
            "return": [],
            "arguments": {}
        }
    },
    "basilisp-main/tests/basilisp/queue_test.py": {
        "test_queue_interface_membership": {
            "name": "test_queue_interface_membership",
            "location": 32,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "test_queue_bool": {
            "name": "test_queue_bool",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_queue_cons": {
            "name": "test_queue_cons",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_queue_equals": {
            "name": "test_queue_equals",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_queue_peek": {
            "name": "test_queue_peek",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_queue_pop": {
            "name": "test_queue_pop",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_queue_meta": {
            "name": "test_queue_meta",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_queue_with_meta": {
            "name": "test_queue_with_meta",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_queue_seq": {
            "name": "test_queue_seq",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_queue_pickleability": {
            "name": "test_queue_pickleability",
            "location": 122,
            "return": [],
            "arguments": {
                "pickle_protocol": [
                    "int"
                ],
                "o": [
                    "lqueue.PersistentQueue"
                ]
            }
        },
        "test_queue_repr": {
            "name": "test_queue_repr",
            "location": 134,
            "return": [],
            "arguments": {
                "l": [
                    "lqueue.PersistentQueue"
                ],
                "str_repr": [
                    "str"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/reader_test.py": {
        "test_ns": {
            "name": "test_ns",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_str_first": {
            "name": "read_str_first",
            "location": 25,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "resolver": [
                    "reader.Resolver"
                ],
                "data_readers": [],
                "is_eof_error": [
                    "bool"
                ],
                "features": [
                    "Optional[IPersistentSet[kw.Keyword]]"
                ],
                "process_reader_cond": [
                    "bool"
                ]
            }
        },
        "test_stream_reader": {
            "name": "test_stream_reader",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_stream_reader_loc": {
            "name": "test_stream_reader_loc",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_literals": {
            "name": "test_literals",
            "location": 287,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "val": []
            }
        },
        "test_whitespace": {
            "name": "test_whitespace",
            "location": 391,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "test_vector": {
            "name": "test_vector",
            "location": 395,
            "return": [],
            "arguments": {}
        },
        "test_list": {
            "name": "test_list",
            "location": 440,
            "return": [],
            "arguments": {}
        },
        "test_set": {
            "name": "test_set",
            "location": 478,
            "return": [],
            "arguments": {}
        },
        "test_map": {
            "name": "test_map",
            "location": 517,
            "return": [],
            "arguments": {}
        },
        "test_namespaced_map": {
            "name": "test_namespaced_map",
            "location": 560,
            "return": [],
            "arguments": {
                "test_ns": [
                    "str"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "test_quoted": {
            "name": "test_quoted",
            "location": 628,
            "return": [],
            "arguments": {}
        },
        "test_syntax_quoted": {
            "name": "test_syntax_quoted",
            "location": 638,
            "return": [],
            "arguments": {
                "test_ns": [
                    "str"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "test_syntax_quote_gensym": {
            "name": "test_syntax_quote_gensym",
            "location": 722,
            "return": [],
            "arguments": {}
        },
        "test_unquote": {
            "name": "test_unquote",
            "location": 764,
            "return": [],
            "arguments": {}
        },
        "test_unquote_splicing": {
            "name": "test_unquote_splicing",
            "location": 793,
            "return": [],
            "arguments": {}
        },
        "test_var": {
            "name": "test_var",
            "location": 864,
            "return": [],
            "arguments": {}
        },
        "test_meta": {
            "name": "test_meta",
            "location": 871,
            "return": [],
            "arguments": {}
        },
        "test_invalid_meta_structure": {
            "name": "test_invalid_meta_structure",
            "location": 921,
            "return": [],
            "arguments": {}
        },
        "test_invalid_meta_attachment": {
            "name": "test_invalid_meta_attachment",
            "location": 941,
            "return": [],
            "arguments": {}
        },
        "test_comment_reader_macro": {
            "name": "test_comment_reader_macro",
            "location": 964,
            "return": [],
            "arguments": {}
        },
        "test_comment_line": {
            "name": "test_comment_line",
            "location": 1025,
            "return": [],
            "arguments": {}
        },
        "test_shebang_line": {
            "name": "test_shebang_line",
            "location": 1035,
            "return": [],
            "arguments": {}
        },
        "test_function_reader_macro": {
            "name": "test_function_reader_macro",
            "location": 1161,
            "return": [],
            "arguments": {}
        },
        "test_deref": {
            "name": "test_deref",
            "location": 1211,
            "return": [],
            "arguments": {}
        },
        "test_character_literal": {
            "name": "test_character_literal",
            "location": 1219,
            "return": [],
            "arguments": {}
        },
        "test_decimal_literal": {
            "name": "test_decimal_literal",
            "location": 1254,
            "return": [],
            "arguments": {}
        },
        "test_fraction_literal": {
            "name": "test_fraction_literal",
            "location": 1268,
            "return": [],
            "arguments": {}
        },
        "test_inst_reader_literal": {
            "name": "test_inst_reader_literal",
            "location": 1288,
            "return": [],
            "arguments": {}
        },
        "test_queue_reader_literal": {
            "name": "test_queue_reader_literal",
            "location": 1297,
            "return": [],
            "arguments": {}
        },
        "test_regex_reader_literal": {
            "name": "test_regex_reader_literal",
            "location": 1308,
            "return": [],
            "arguments": {}
        },
        "test_numeric_constant_literal": {
            "name": "test_numeric_constant_literal",
            "location": 1316,
            "return": [],
            "arguments": {}
        },
        "test_uuid_reader_literal": {
            "name": "test_uuid_reader_literal",
            "location": 1328,
            "return": [],
            "arguments": {}
        },
        "test_python_literals": {
            "name": "test_python_literals",
            "location": 1337,
            "return": [],
            "arguments": {}
        },
        "test_namespace_tags_allowed": {
            "name": "test_namespace_tags_allowed",
            "location": 1362,
            "return": [],
            "arguments": {}
        },
        "test_non_namespaced_tags_reserved": {
            "name": "test_non_namespaced_tags_reserved",
            "location": 1369,
            "return": [],
            "arguments": {}
        },
        "test_not_found_tag_error": {
            "name": "test_not_found_tag_error",
            "location": 1381,
            "return": [],
            "arguments": {}
        },
        "TestComplex.test_legal_complex": {
            "name": "test_legal_complex",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "complex"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestComplex.test_malformed_complex": {
            "name": "test_malformed_complex",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [
                    "str"
                ]
            }
        },
        "TestComplex.test_legal_float_complex": {
            "name": "test_legal_float_complex",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "complex"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestComplex.test_malformed_float_complex": {
            "name": "test_malformed_float_complex",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [
                    "str"
                ]
            }
        },
        "TestInt.test_legal_int": {
            "name": "test_legal_int",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestInt.test_legal_bigint": {
            "name": "test_legal_bigint",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestInt.test_malformed_bigint": {
            "name": "test_malformed_bigint",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFloat.test_legal_float": {
            "name": "test_legal_float",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "float"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestFloat.test_malformed_float": {
            "name": "test_malformed_float",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [
                    "str"
                ]
            }
        },
        "TestKeyword.test_legal_bare_symbol": {
            "name": "test_legal_bare_symbol",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestKeyword.test_legal_ns_symbol": {
            "name": "test_legal_ns_symbol",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ],
                "ns": [
                    "str"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestKeyword.test_illegal_symbol": {
            "name": "test_illegal_symbol",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "TestKeyword.test_autoresolved_kw": {
            "name": "test_autoresolved_kw",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "test_ns": [
                    "str"
                ],
                "ns": [
                    "runtime.Namespace"
                ]
            }
        },
        "TestSymbol.test_legal_bare_symbol": {
            "name": "test_legal_bare_symbol",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "TestSymbol.test_legal_ns_symbol": {
            "name": "test_legal_ns_symbol",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "ns": [
                    "str"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestSymbol.test_illegal_symbol": {
            "name": "test_illegal_symbol",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "TestString.test_legal_string": {
            "name": "test_legal_string",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "TestString.test_invalid_escape": {
            "name": "test_invalid_escape",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestString.test_missing_terminating_quote": {
            "name": "test_missing_terminating_quote",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_syntax_quoted.complex_resolver": {
            "name": "complex_resolver",
            "location": 666,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {
                "s": [
                    "sym.Symbol"
                ]
            }
        },
        "test_meta.issubmap": {
            "name": "issubmap",
            "location": 872,
            "return": [],
            "arguments": {
                "m": [],
                "sub": []
            }
        },
        "TestReaderConditional.test_basic_form_syntax": {
            "name": "test_basic_form_syntax",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "TestReaderConditional.test_basic_form": {
            "name": "test_basic_form",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReaderConditional.test_basic_form_preserving": {
            "name": "test_basic_form_preserving",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReaderConditional.test_splicing_form_syntax": {
            "name": "test_splicing_form_syntax",
            "location": 1115,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "TestReaderConditional.test_splicing_form_preserving": {
            "name": "test_splicing_form_preserving",
            "location": 1119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReaderConditional.test_splicing_form": {
            "name": "test_splicing_form",
            "location": 1136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReaderConditional.test_splicing_form_in_maps": {
            "name": "test_splicing_form_in_maps",
            "location": 1148,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/tests/basilisp/runtime_test.py": {
        "test_is_supported_python_version": {
            "name": "test_is_supported_python_version",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_reader_default_featureset": {
            "name": "test_reader_default_featureset",
            "location": 112,
            "return": [],
            "arguments": {
                "feature": []
            }
        },
        "test_first": {
            "name": "test_first",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_rest": {
            "name": "test_rest",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_nthrest": {
            "name": "test_nthrest",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_next": {
            "name": "test_next",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_nthnext": {
            "name": "test_nthnext",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_cons": {
            "name": "test_cons",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_to_seq": {
            "name": "test_to_seq",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_concat": {
            "name": "test_concat",
            "location": 231,
            "return": [],
            "arguments": {}
        },
        "test_apply": {
            "name": "test_apply",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "test_nth": {
            "name": "test_nth",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 298,
            "return": [],
            "arguments": {}
        },
        "test_assoc": {
            "name": "test_assoc",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 362,
            "return": [],
            "arguments": {}
        },
        "test_conj": {
            "name": "test_conj",
            "location": 390,
            "return": [],
            "arguments": {}
        },
        "test_deref": {
            "name": "test_deref",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "test_equals": {
            "name": "test_equals",
            "location": 485,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": []
            }
        },
        "test_not_equals": {
            "name": "test_not_equals",
            "location": 525,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": []
            }
        },
        "test_pop_thread_bindings": {
            "name": "test_pop_thread_bindings",
            "location": 530,
            "return": [],
            "arguments": {}
        },
        "test_trampoline_args": {
            "name": "test_trampoline_args",
            "location": 663,
            "return": [],
            "arguments": {}
        },
        "test_is_special_form": {
            "name": "test_is_special_form",
            "location": 684,
            "return": [],
            "arguments": {
                "form": [
                    "sym.Symbol"
                ]
            }
        },
        "TestToPython.test_literal_to_py": {
            "name": "test_literal_to_py",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToPython.test_to_dict": {
            "name": "test_to_dict",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToPython.test_to_list": {
            "name": "test_to_list",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToPython.test_to_set": {
            "name": "test_to_set",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToLisp.test_literal_to_lisp": {
            "name": "test_literal_to_lisp",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToLisp.test_to_map": {
            "name": "test_to_map",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToLisp.test_to_map_no_keywordize": {
            "name": "test_to_map_no_keywordize",
            "location": 613,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToLisp.test_to_set": {
            "name": "test_to_set",
            "location": 644,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToLisp.test_to_vec": {
            "name": "test_to_vec",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResolveAlias.compiler_special_forms": {
            "name": "compiler_special_forms",
            "location": 690,
            "return": [
                "lset.PersistentSet"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveAlias.test_runtime_and_compiler_special_forms_in_sync": {
            "name": "test_runtime_and_compiler_special_forms_in_sync",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "compiler_special_forms": [
                    "lset.PersistentSet"
                ]
            }
        },
        "TestResolveAlias.test_resolve_alias_does_not_resolve_special_forms": {
            "name": "test_resolve_alias_does_not_resolve_special_forms",
            "location": 700,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResolveAlias.test_resolve_alias": {
            "name": "test_resolve_alias",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "core_ns": []
            }
        }
    },
    "basilisp-main/tests/basilisp/seq_test.py": {
        "test_to_sequence": {
            "name": "test_to_sequence",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_lazy_sequence": {
            "name": "test_lazy_sequence",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_empty_sequence": {
            "name": "test_empty_sequence",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_sequence": {
            "name": "test_sequence",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_seq_iterator": {
            "name": "test_seq_iterator",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_seq_equals": {
            "name": "test_seq_equals",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_lazy_sequence.lazy_seq": {
            "name": "lazy_seq",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_lazy_sequence.lazy_seq.inner_seq": {
            "name": "inner_seq",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_lazy_sequence.lazy_seq.inner_seq.inner_inner_seq": {
            "name": "inner_inner_seq",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "basilisp-main/tests/basilisp/set_test.py": {
        "test_set_interface_membership": {
            "name": "test_set_interface_membership",
            "location": 32,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "test_set_as_function": {
            "name": "test_set_as_function",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_set_bool": {
            "name": "test_set_bool",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_set_conj": {
            "name": "test_set_conj",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_set_meta": {
            "name": "test_set_meta",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_set_with_meta": {
            "name": "test_set_with_meta",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_set_seq": {
            "name": "test_set_seq",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_set_pickleability": {
            "name": "test_set_pickleability",
            "location": 104,
            "return": [],
            "arguments": {
                "pickle_protocol": [
                    "int"
                ],
                "o": [
                    "lset.PersistentSet"
                ]
            }
        },
        "test_set_repr": {
            "name": "test_set_repr",
            "location": 116,
            "return": [],
            "arguments": {
                "l": [
                    "lset.PersistentSet"
                ],
                "str_repr": [
                    "typing.Set[str]"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/symbol_test.py": {
        "test_symbol_name_and_ns": {
            "name": "test_symbol_name_and_ns",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_symbol_meta": {
            "name": "test_symbol_meta",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_symbol_with_meta": {
            "name": "test_symbol_with_meta",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_symbol_pickleability": {
            "name": "test_symbol_pickleability",
            "location": 56,
            "return": [],
            "arguments": {
                "pickle_protocol": [
                    "int"
                ],
                "o": [
                    "Symbol"
                ]
            }
        },
        "test_symbol_str_and_repr": {
            "name": "test_symbol_str_and_repr",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "basilisp-main/tests/basilisp/testrunner_test.py": {
        "test_fixtures": {
            "name": "test_fixtures",
            "location": 115,
            "return": [],
            "arguments": {
                "pytester": [
                    "Pytester"
                ]
            }
        },
        "test_fixtures_with_errors": {
            "name": "test_fixtures_with_errors",
            "location": 176,
            "return": [],
            "arguments": {
                "pytester": [
                    "Pytester"
                ],
                "fixture": [
                    "str"
                ],
                "style": [
                    "str"
                ],
                "errors": [
                    "int"
                ],
                "passes": [
                    "int"
                ],
                "failures": [
                    "int"
                ]
            }
        },
        "TestTestrunner.run_result": {
            "name": "run_result",
            "location": 12,
            "return": [
                "RunResult"
            ],
            "arguments": {
                "self": [],
                "pytester": [
                    "Pytester"
                ]
            }
        },
        "TestTestrunner.test_outcomes": {
            "name": "test_outcomes",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "run_result": [
                    "RunResult"
                ]
            }
        },
        "TestTestrunner.test_failure_repr": {
            "name": "test_failure_repr",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "run_result": [
                    "RunResult"
                ]
            }
        },
        "TestTestrunner.test_error_repr": {
            "name": "test_error_repr",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "run_result": [
                    "RunResult"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/util_test.py": {
        "test_partition": {
            "name": "test_partition",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "TestMaybe.test_maybe_is_present": {
            "name": "test_maybe_is_present",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_maybe_value": {
            "name": "test_maybe_value",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_maybe_equals": {
            "name": "test_maybe_equals",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_maybe_or_else": {
            "name": "test_maybe_or_else",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_maybe_or_else_get": {
            "name": "test_maybe_or_else_get",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_maybe_or_else_raise": {
            "name": "test_maybe_or_else_raise",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_maybe_map": {
            "name": "test_maybe_map",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "basilisp-main/tests/basilisp/var_test.py": {
        "ns_sym": {
            "name": "ns_sym",
            "location": 23,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {}
        },
        "var_name": {
            "name": "var_name",
            "location": 28,
            "return": [
                "sym.Symbol"
            ],
            "arguments": {}
        },
        "intern_val": {
            "name": "intern_val",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "ns_cache": {
            "name": "ns_cache",
            "location": 38,
            "return": [
                "atom.Atom[NamespaceMap]"
            ],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ]
            }
        },
        "test_public_var": {
            "name": "test_public_var",
            "location": 46,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_private_var": {
            "name": "test_private_var",
            "location": 55,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_alter_var_meta": {
            "name": "test_alter_var_meta",
            "location": 66,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_reset_var_meta": {
            "name": "test_reset_var_meta",
            "location": 81,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_var_validators": {
            "name": "test_var_validators",
            "location": 96,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ]
            }
        },
        "test_var_validators_do_fire_for_thread_local": {
            "name": "test_var_validators_do_fire_for_thread_local",
            "location": 129,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ]
            }
        },
        "test_var_watchers": {
            "name": "test_var_watchers",
            "location": 143,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ]
            }
        },
        "test_var_watchers_do_not_fire_for_thread_local": {
            "name": "test_var_watchers_do_not_fire_for_thread_local",
            "location": 178,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ]
            }
        },
        "test_dynamic_var": {
            "name": "test_dynamic_var",
            "location": 201,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_var_bindings_are_noop_for_non_dynamic_var": {
            "name": "test_var_bindings_are_noop_for_non_dynamic_var",
            "location": 243,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_intern": {
            "name": "test_intern",
            "location": 288,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_intern_unbound": {
            "name": "test_intern_unbound",
            "location": 326,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ]
            }
        },
        "test_dynamic_unbound": {
            "name": "test_dynamic_unbound",
            "location": 346,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ]
            }
        },
        "test_alter_var_root": {
            "name": "test_alter_var_root",
            "location": 380,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_alter_dynamic_var_root": {
            "name": "test_alter_dynamic_var_root",
            "location": 402,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_find_in_ns": {
            "name": "test_find_in_ns",
            "location": 444,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 454,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_find_safe": {
            "name": "test_find_safe",
            "location": 465,
            "return": [],
            "arguments": {
                "ns_sym": [
                    "sym.Symbol"
                ],
                "var_name": [
                    "sym.Symbol"
                ],
                "intern_val": []
            }
        },
        "test_var_watchers.watcher1": {
            "name": "watcher1",
            "location": 150,
            "return": [],
            "arguments": {
                "k": [],
                "ref": [],
                "old": [],
                "new": []
            }
        },
        "test_var_watchers.watcher2": {
            "name": "watcher2",
            "location": 162,
            "return": [],
            "arguments": {
                "k": [],
                "ref": [],
                "old": [],
                "new": []
            }
        },
        "test_var_watchers_do_not_fire_for_thread_local.watcher": {
            "name": "watcher",
            "location": 185,
            "return": [],
            "arguments": {
                "k": [],
                "ref": [],
                "old": [],
                "new": []
            }
        },
        "test_alter_var_root.alter_root": {
            "name": "alter_root",
            "location": 390,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_alter_dynamic_var_root.alter_root": {
            "name": "alter_root",
            "location": 419,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "basilisp-main/tests/basilisp/vector_test.py": {
        "test_vector_interface_membership": {
            "name": "test_vector_interface_membership",
            "location": 40,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "test_vector_slice": {
            "name": "test_vector_slice",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_assoc": {
            "name": "test_assoc",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_vector_bool": {
            "name": "test_vector_bool",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_contains": {
            "name": "test_contains",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_py_contains": {
            "name": "test_py_contains",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_vector_cons": {
            "name": "test_vector_cons",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_entry": {
            "name": "test_entry",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_val_at": {
            "name": "test_val_at",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_peek": {
            "name": "test_peek",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_pop": {
            "name": "test_pop",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_vector_seq": {
            "name": "test_vector_seq",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_vector_meta": {
            "name": "test_vector_meta",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_vector_with_meta": {
            "name": "test_vector_with_meta",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_vector_pickleability": {
            "name": "test_vector_pickleability",
            "location": 175,
            "return": [],
            "arguments": {
                "pickle_protocol": [
                    "int"
                ],
                "o": [
                    "vec.PersistentVector"
                ]
            }
        },
        "test_vector_repr": {
            "name": "test_vector_repr",
            "location": 187,
            "return": [],
            "arguments": {
                "l": [
                    "vec.PersistentVector"
                ],
                "str_repr": [
                    "str"
                ]
            }
        }
    },
    "basilisp-main/tests/basilisp/__init__.py": {}
}
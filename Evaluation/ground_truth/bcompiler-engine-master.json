{
    "bcompiler-engine-master/noxfile.py": {
        "tests": {
            "name": "tests",
            "location": 7,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "bcompiler-engine-master/setup.py": {},
    "bcompiler-engine-master/engine/config.py": {
        "_platform_docs_dir": {
            "name": "_platform_docs_dir",
            "location": 20,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "check_for_blank": {
            "name": "check_for_blank",
            "location": 105,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "config": [
                    "Config"
                ]
            }
        },
        "check_for_datamap": {
            "name": "check_for_datamap",
            "location": 121,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "config": [
                    "Config"
                ]
            }
        },
        "delete_config_file": {
            "name": "delete_config_file",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Config"
                ]
            }
        },
        "show_config_file": {
            "name": "show_config_file",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Config"
                ]
            }
        },
        "Config.initialise": {
            "name": "initialise",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "bcompiler-engine-master/engine/exceptions.py": {},
    "bcompiler-engine-master/engine/__init__.py": {},
    "bcompiler-engine-master/engine/adapters/cli.py": {
        "check_aux_files": {
            "name": "check_aux_files",
            "location": 39,
            "return": [],
            "arguments": {
                "config": [
                    "Config"
                ]
            }
        },
        "report_data_validations_in_file": {
            "name": "report_data_validations_in_file",
            "location": 69,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "file": [
                    "Path"
                ]
            }
        },
        "write_master_to_templates": {
            "name": "write_master_to_templates",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "blank_template": [
                    "Path"
                ],
                "datamap": [
                    "Path"
                ],
                "master": [
                    "Path"
                ]
            }
        },
        "import_and_create_master": {
            "name": "import_and_create_master",
            "location": 97,
            "return": [],
            "arguments": {
                "echo_funcs": [],
                "datamap": []
            }
        },
        "delete_config": {
            "name": "delete_config",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "show_config": {
            "name": "show_config",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "bcompiler-engine-master/engine/adapters/__init__.py": {},
    "bcompiler-engine-master/engine/domain/datamap.py": {
        "DatamapLine.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "sheet": [
                    "str"
                ],
                "cellref": [
                    "str"
                ],
                "data_type": [
                    "Optional[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "DatamapLine.to_dict": {
            "name": "to_dict",
            "location": 43,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatamapFile.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "DatamapFile.__enter__": {
            "name": "__enter__",
            "location": 65,
            "return": [
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatamapFile.__exit__": {
            "name": "__exit__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "mytype": [],
                "value": [],
                "traceback": []
            }
        }
    },
    "bcompiler-engine-master/engine/domain/template.py": {
        "TemplateCell.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "sheet_name": [
                    "str"
                ],
                "cellref": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "data_type": [
                    "DatamapLineValueType"
                ]
            }
        },
        "TemplateCell.to_dict": {
            "name": "to_dict",
            "location": 24,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-engine-master/engine/domain/__init__.py": {},
    "bcompiler-engine-master/engine/reports/validation.py": {
        "ValidationReportCSV.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "validation_data": [
                    "List[ValidationCheck]"
                ]
            }
        },
        "ValidationReportCSV.write": {
            "name": "write",
            "location": 24,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-engine-master/engine/reports/__init__.py": {},
    "bcompiler-engine-master/engine/repository/datamap.py": {
        "InMemorySingleDatamapRepository.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datamap_path": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "InMemorySingleDatamapRepository.list_as_json": {
            "name": "list_as_json",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemorySingleDatamapRepository.list_as_objs": {
            "name": "list_as_objs",
            "location": 29,
            "return": [
                "List[DatamapLine]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-engine-master/engine/repository/master.py": {
        "ValidationOnlyRepository.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "output_file_name": []
            }
        },
        "ValidationOnlyRepository.save": {
            "name": "save",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MasterOutputRepository.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "output_file_name": []
            }
        },
        "MasterOutputRepository.save": {
            "name": "save",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-engine-master/engine/repository/templates.py": {
        "MultipleTemplatesWriteRepo.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "blank_template": [
                    "Path"
                ]
            }
        },
        "MultipleTemplatesWriteRepo._populate_workbook": {
            "name": "_populate_workbook",
            "location": 44,
            "return": [
                "Workbook"
            ],
            "arguments": {
                "self": [],
                "workbook": [
                    "Workbook"
                ],
                "file_data": [
                    "MASTER_COL_DATA"
                ]
            }
        },
        "MultipleTemplatesWriteRepo.write": {
            "name": "write",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "MASTER_DATA_FOR_FILE"
                ],
                "from_json": [
                    "bool"
                ]
            }
        },
        "MultipleTemplatesWriteRepo._save_workbook": {
            "name": "_save_workbook",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wb_t": [
                    "Tuple[(str, Workbook)]"
                ]
            }
        },
        "MultipleTemplatesWriteRepo._write_each_workbook": {
            "name": "_write_each_workbook",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSPopulatedTemplatesRepo.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str"
                ]
            }
        },
        "FSPopulatedTemplatesRepo.list_as_json": {
            "name": "list_as_json",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryPopulatedTemplatesRepository.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str"
                ]
            }
        },
        "InMemoryPopulatedTemplatesRepository.list_as_json": {
            "name": "list_as_json",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryPopulatedTemplatesZip.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zip_path": [
                    "str"
                ]
            }
        },
        "InMemoryPopulatedTemplatesZip.list_as_json": {
            "name": "list_as_json",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-engine-master/engine/repository/__init__.py": {},
    "bcompiler-engine-master/engine/serializers/datamap.py": {
        "DatamapEncoder.default": {
            "name": "default",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ]
            }
        }
    },
    "bcompiler-engine-master/engine/serializers/template.py": {
        "TemplateCellSerializer.default": {
            "name": "default",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        }
    },
    "bcompiler-engine-master/engine/serializers/__init__.py": {},
    "bcompiler-engine-master/engine/use_cases/output.py": {
        "WriteMasterToTemplates.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "output_repo": [],
                "datamap": [
                    "Path"
                ],
                "master": [
                    "Path"
                ],
                "blank_template": [
                    "Path"
                ]
            }
        },
        "WriteMasterToTemplates._check_datamap_matches_cola": {
            "name": "_check_datamap_matches_cola",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteMasterToTemplates._get_keys_in_datamap_not_in_master": {
            "name": "_get_keys_in_datamap_not_in_master",
            "location": 56,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteMasterToTemplates.execute": {
            "name": "execute",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-engine-master/engine/use_cases/parsing.py": {
        "extract_from_multiple_xlsx_files": {
            "name": "extract_from_multiple_xlsx_files",
            "location": 426,
            "return": [
                "ALL_IMPORT_DATA"
            ],
            "arguments": {
                "xlsx_files": []
            }
        },
        "ParsePopulatedTemplatesUseCase.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "repo": []
            }
        },
        "ParsePopulatedTemplatesUseCase.execute": {
            "name": "execute",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplyDatamapToExtractionUseCaseWithValidation.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datamap_repo": [],
                "template_repo": []
            }
        },
        "ApplyDatamapToExtractionUseCaseWithValidation._get_value_of_cell_referred_by_key": {
            "name": "_get_value_of_cell_referred_by_key",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "sheet": [
                    "str"
                ]
            }
        },
        "ApplyDatamapToExtractionUseCaseWithValidation._set_datamap_and_template_data": {
            "name": "_set_datamap_and_template_data",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplyDatamapToExtractionUseCaseWithValidation.get_values": {
            "name": "get_values",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApplyDatamapToExtractionUseCaseWithValidation.execute": {
            "name": "execute",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "as_obj": [],
                "for_master": []
            }
        },
        "ApplyDatamapToExtractionUseCaseWithValidation.query_key": {
            "name": "query_key",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "key": [],
                "sheet": []
            }
        },
        "ApplyDatamapToExtractionUseCaseWithValidation._format_data_for_master": {
            "name": "_format_data_for_master",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApplyDatamapToExtractionUseCase.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datamap_repo": [],
                "template_repo": []
            }
        },
        "ApplyDatamapToExtractionUseCase._get_value_of_cell_referred_by_key": {
            "name": "_get_value_of_cell_referred_by_key",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "sheet": [
                    "str"
                ]
            }
        },
        "ApplyDatamapToExtractionUseCase._set_datamap_and_template_data": {
            "name": "_set_datamap_and_template_data",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplyDatamapToExtractionUseCase.get_values": {
            "name": "get_values",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApplyDatamapToExtractionUseCase.execute": {
            "name": "execute",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "as_obj": [],
                "for_master": []
            }
        },
        "ApplyDatamapToExtractionUseCase.query_key": {
            "name": "query_key",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "key": [],
                "sheet": []
            }
        },
        "ApplyDatamapToExtractionUseCase._format_data_for_master": {
            "name": "_format_data_for_master",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateMasterUseCaseWithValidation.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "datamap_repo": [],
                "template_repo": [],
                "output_repo": []
            }
        },
        "CreateMasterUseCaseWithValidation.execute": {
            "name": "execute",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "output_file_name": []
            }
        },
        "CreateMasterUseCase.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "datamap_repo": [],
                "template_repo": [],
                "output_repository": []
            }
        },
        "CreateMasterUseCase.execute": {
            "name": "execute",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "output_file_name": []
            }
        },
        "ParseDatamapUseCase.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "repo": []
            }
        },
        "ParseDatamapUseCase.execute": {
            "name": "execute",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "bcompiler-engine-master/engine/use_cases/typing.py": {},
    "bcompiler-engine-master/engine/use_cases/__init__.py": {},
    "bcompiler-engine-master/engine/utils/extraction.py": {
        "_dml_line_check": {
            "name": "_dml_line_check",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "OrderedDict"
                ],
                "headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "tail_rows_check": {
            "name": "tail_rows_check",
            "location": 82,
            "return": [],
            "arguments": {
                "dm_file": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "datamap_reader": {
            "name": "datamap_reader",
            "location": 106,
            "return": [
                "List[DatamapLine]"
            ],
            "arguments": {
                "dm_file": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "remove_failing_files": {
            "name": "remove_failing_files",
            "location": 173,
            "return": [
                "ALL_IMPORT_DATA"
            ],
            "arguments": {
                "lst_of_checks": [
                    "List[Check]"
                ],
                "template_data": [
                    "ALL_IMPORT_DATA"
                ]
            }
        },
        "check_datamap_sheets": {
            "name": "check_datamap_sheets",
            "location": 203,
            "return": [
                "List[Check]"
            ],
            "arguments": {
                "datamap_data": [
                    "List[Dict[(str, str)]]"
                ],
                "template_data": [
                    "ALL_IMPORT_DATA"
                ]
            }
        },
        "data_validation_report": {
            "name": "data_validation_report",
            "location": 248,
            "return": [
                "List[ValidationReportItem]"
            ],
            "arguments": {
                "sheet": [
                    "Worksheet"
                ]
            }
        },
        "_check_file_in_datafile": {
            "name": "_check_file_in_datafile",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "spreadsheet_file": [
                    "Path"
                ],
                "data_file": [
                    "Path"
                ]
            }
        },
        "get_xlsx_files": {
            "name": "get_xlsx_files",
            "location": 294,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "directory": [
                    "Path"
                ]
            }
        },
        "_get_cell_data": {
            "name": "_get_cell_data",
            "location": 308,
            "return": [],
            "arguments": {
                "filepath": [
                    "Path"
                ],
                "data": [],
                "sheet_name": [
                    "str"
                ],
                "cellref": [
                    "str"
                ]
            }
        },
        "_clean": {
            "name": "_clean",
            "location": 318,
            "return": [
                "str"
            ],
            "arguments": {
                "target_str": [
                    "str"
                ],
                "is_cellref": [
                    "bool"
                ]
            }
        },
        "_extract_sheets": {
            "name": "_extract_sheets",
            "location": 329,
            "return": [
                "Dict[(str, List[TemplateCell])]"
            ],
            "arguments": {
                "lst_of_tcs": [
                    "List[TemplateCell]"
                ]
            }
        },
        "_extract_cellrefs": {
            "name": "_extract_cellrefs",
            "location": 338,
            "return": [],
            "arguments": {
                "lst_of_tcs": [
                    "SHEET_DATA_IN_LST"
                ]
            }
        },
        "_hash_single_file": {
            "name": "_hash_single_file",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "Path"
                ]
            }
        },
        "_hash_target_files": {
            "name": "_hash_target_files",
            "location": 390,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "list_of_files": [
                    "List[Path]"
                ]
            }
        },
        "datamap_check": {
            "name": "datamap_check",
            "location": 404,
            "return": [],
            "arguments": {
                "dm_file": []
            }
        },
        "template_reader": {
            "name": "template_reader",
            "location": 473,
            "return": [
                "Dict[(str, Dict[(str, Dict[(Any, Any)])])]"
            ],
            "arguments": {
                "template_file": []
            }
        },
        "extract_zip_file_to_tmpdir": {
            "name": "extract_zip_file_to_tmpdir",
            "location": 541,
            "return": [
                "Tuple[(str, List[pathlib.Path])]"
            ],
            "arguments": {
                "zfile": []
            }
        }
    },
    "bcompiler-engine-master/engine/utils/validation.py": {
        "validate_line": {
            "name": "validate_line",
            "location": 138,
            "return": [
                "_ValidationState"
            ],
            "arguments": {
                "dml_data": [
                    "Dict[(str, str)]"
                ],
                "sheet_data": [
                    "Dict[(str, Dict[(str, str)])]"
                ]
            }
        },
        "validation_checker": {
            "name": "validation_checker",
            "location": 155,
            "return": [
                "List['ValidationCheck']"
            ],
            "arguments": {
                "dm_data": [],
                "tmp_data": []
            }
        },
        "_ValidationState.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dm_line": [
                    "Dict[(str, str)]"
                ],
                "sheet_data": []
            }
        },
        "_ValidationState.new_state": {
            "name": "new_state",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "newstate": []
            }
        },
        "_ValidationState.check": {
            "name": "check",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ValidationState.update_validation_check": {
            "name": "update_validation_check",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Unvalidated.check": {
            "name": "check",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ValueWanted.check": {
            "name": "check",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Typed.check": {
            "name": "check",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_UnTyped.check": {
            "name": "check",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TypeMatched.check": {
            "name": "check",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TypeNotMatched.check": {
            "name": "check",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EmptyValue.check": {
            "name": "check",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ValueGiven.check": {
            "name": "check",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ValueUnwanted.check": {
            "name": "check",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ValidationComplete.check": {
            "name": "check",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-engine-master/engine/utils/__init__.py": {},
    "bcompiler-engine-master/tests/conftest.py": {
        "sheet_data": {
            "name": "sheet_data",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "dm_data": {
            "name": "dm_data",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "template_cell_obj": {
            "name": "template_cell_obj",
            "location": 68,
            "return": [
                "TemplateCell"
            ],
            "arguments": {}
        },
        "datamapline_list_objects": {
            "name": "datamapline_list_objects",
            "location": 79,
            "return": [
                "List[DatamapLine]"
            ],
            "arguments": {}
        },
        "templates_zipped_containing_dir": {
            "name": "templates_zipped_containing_dir",
            "location": 112,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "templates_zipped": {
            "name": "templates_zipped",
            "location": 118,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "templates_zipped_deep_structure": {
            "name": "templates_zipped_deep_structure",
            "location": 124,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "dat_file": {
            "name": "dat_file",
            "location": 130,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "spreadsheet_same_data_as_dat_file": {
            "name": "spreadsheet_same_data_as_dat_file",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "spreadsheet_one_cell_different_data_than_dat_file": {
            "name": "spreadsheet_one_cell_different_data_than_dat_file",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "resources": {
            "name": "resources",
            "location": 155,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "doc_directory": {
            "name": "doc_directory",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "template_with_empty_cells_expected_by_datamap": {
            "name": "template_with_empty_cells_expected_by_datamap",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "datamap_match_test_template_with_missing_val_match_template_equiv": {
            "name": "datamap_match_test_template_with_missing_val_match_template_equiv",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "template_with_introduction_sheet": {
            "name": "template_with_introduction_sheet",
            "location": 190,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "template": {
            "name": "template",
            "location": 198,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "template_incorrect_type": {
            "name": "template_incorrect_type",
            "location": 204,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "bad_sheet_template": {
            "name": "bad_sheet_template",
            "location": 210,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "pop_template": {
            "name": "pop_template",
            "location": 216,
            "return": [
                "Generator"
            ],
            "arguments": {}
        },
        "master": {
            "name": "master",
            "location": 223,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "master_no_col_a": {
            "name": "master_no_col_a",
            "location": 228,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "master_with_rogue_cell_vals_beyond_col_and_row_range": {
            "name": "master_with_rogue_cell_vals_beyond_col_and_row_range",
            "location": 233,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "blank_template": {
            "name": "blank_template",
            "location": 243,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap": {
            "name": "datamap",
            "location": 248,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap_no_type_col_matches_test_template": {
            "name": "datamap_no_type_col_matches_test_template",
            "location": 254,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap_match_test_template_incorrect_type_descriptor": {
            "name": "datamap_match_test_template_incorrect_type_descriptor",
            "location": 264,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap_missing_one_type": {
            "name": "datamap_missing_one_type",
            "location": 275,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap_reduced": {
            "name": "datamap_reduced",
            "location": 281,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap_csv_unsupported_encodings": {
            "name": "datamap_csv_unsupported_encodings",
            "location": 287,
            "return": [
                "Path"
            ],
            "arguments": {
                "request": []
            }
        },
        "datamap_csv_supported_encodings": {
            "name": "datamap_csv_supported_encodings",
            "location": 293,
            "return": [
                "Path"
            ],
            "arguments": {
                "request": []
            }
        },
        "datamap_missing_fields": {
            "name": "datamap_missing_fields",
            "location": 299,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap_missing_key_fields": {
            "name": "datamap_missing_key_fields",
            "location": 305,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "datamap_moderately_bad_headers": {
            "name": "datamap_moderately_bad_headers",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "datamap_very_bad_headers": {
            "name": "datamap_very_bad_headers",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "datamap_single_header": {
            "name": "datamap_single_header",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "datamap_empty_tail_rows": {
            "name": "datamap_empty_tail_rows",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "datamap_no_type_col": {
            "name": "datamap_no_type_col",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "datamap_two_headers": {
            "name": "datamap_two_headers",
            "location": 341,
            "return": [],
            "arguments": {}
        },
        "datamap_three_headers": {
            "name": "datamap_three_headers",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "datamap_empty_cols": {
            "name": "datamap_empty_cols",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "datamap_match_test_template": {
            "name": "datamap_match_test_template",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "blank_org_template": {
            "name": "blank_org_template",
            "location": 365,
            "return": [],
            "arguments": {}
        },
        "mock_config": {
            "name": "mock_config",
            "location": 370,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "org_test_files_dir": {
            "name": "org_test_files_dir",
            "location": 394,
            "return": [],
            "arguments": {}
        },
        "template_dict": {
            "name": "template_dict",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "datamap_lst_with_single_sheet": {
            "name": "datamap_lst_with_single_sheet",
            "location": 477,
            "return": [],
            "arguments": {}
        },
        "datamap_lst_with_sheets_same_as_template_dict": {
            "name": "datamap_lst_with_sheets_same_as_template_dict",
            "location": 567,
            "return": [],
            "arguments": {}
        }
    },
    "bcompiler-engine-master/tests/test_configuration.py": {
        "test_remove_config": {
            "name": "test_remove_config",
            "location": 15,
            "return": [],
            "arguments": {
                "mock_config": []
            }
        },
        "test_basic_config_variables": {
            "name": "test_basic_config_variables",
            "location": 22,
            "return": [],
            "arguments": {
                "mock_config": []
            }
        },
        "test_required_config_dirs_exist": {
            "name": "test_required_config_dirs_exist",
            "location": 40,
            "return": [],
            "arguments": {
                "mock_config": []
            }
        },
        "test_config_values": {
            "name": "test_config_values",
            "location": 51,
            "return": [],
            "arguments": {
                "mock_config": []
            }
        },
        "test_presence_of_aux_files": {
            "name": "test_presence_of_aux_files",
            "location": 80,
            "return": [],
            "arguments": {
                "mock_config": [],
                "blank_template": [],
                "datamap": []
            }
        },
        "test_lack_of_aux_files": {
            "name": "test_lack_of_aux_files",
            "location": 96,
            "return": [],
            "arguments": {
                "mock_config": []
            }
        }
    },
    "bcompiler-engine-master/tests/test_datamap_parser.py": {
        "test_datamap_file_as_pathlib_object": {
            "name": "test_datamap_file_as_pathlib_object",
            "location": 20,
            "return": [],
            "arguments": {
                "datamap": []
            }
        },
        "test_datamap_reader_unsupported_encodings": {
            "name": "test_datamap_reader_unsupported_encodings",
            "location": 36,
            "return": [],
            "arguments": {
                "datamap_csv_unsupported_encodings": []
            }
        },
        "test_datamap_reader_supported_encodings": {
            "name": "test_datamap_reader_supported_encodings",
            "location": 52,
            "return": [],
            "arguments": {
                "datamap_csv_supported_encodings": []
            }
        },
        "test_bad_spacing_in_datamap": {
            "name": "test_bad_spacing_in_datamap",
            "location": 60,
            "return": [],
            "arguments": {
                "datamap": []
            }
        },
        "test_template_reader": {
            "name": "test_template_reader",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "template": []
            }
        },
        "test_incorrect_headers_are_coerced_or_flagged": {
            "name": "test_incorrect_headers_are_coerced_or_flagged",
            "location": 90,
            "return": [],
            "arguments": {
                "datamap_moderately_bad_headers": []
            }
        },
        "test_very_bad_headers_are_rejected": {
            "name": "test_very_bad_headers_are_rejected",
            "location": 100,
            "return": [],
            "arguments": {
                "datamap_very_bad_headers": []
            }
        },
        "test_datamap_type_is_optional": {
            "name": "test_datamap_type_is_optional",
            "location": 106,
            "return": [],
            "arguments": {
                "datamap_no_type_col": []
            }
        },
        "test_datamap_with_seemingly_empty_rows_at_end_exception": {
            "name": "test_datamap_with_seemingly_empty_rows_at_end_exception",
            "location": 117,
            "return": [],
            "arguments": {
                "datamap_empty_tail_rows": []
            }
        },
        "test_datamap_with_only_single_header_raises_exception": {
            "name": "test_datamap_with_only_single_header_raises_exception",
            "location": 123,
            "return": [],
            "arguments": {
                "datamap_single_header": []
            }
        },
        "test_datamap_with_two_headers": {
            "name": "test_datamap_with_two_headers",
            "location": 134,
            "return": [],
            "arguments": {
                "datamap_two_headers": []
            }
        },
        "test_datamap_with_three_headers": {
            "name": "test_datamap_with_three_headers",
            "location": 144,
            "return": [],
            "arguments": {
                "datamap_three_headers": []
            }
        },
        "test_datamap_missing_sheet_fields": {
            "name": "test_datamap_missing_sheet_fields",
            "location": 155,
            "return": [],
            "arguments": {
                "datamap_missing_fields": []
            }
        },
        "test_datamap_missing_key_fields": {
            "name": "test_datamap_missing_key_fields",
            "location": 161,
            "return": [],
            "arguments": {
                "datamap_missing_key_fields": []
            }
        },
        "test_get_file_suffix_from_path": {
            "name": "test_get_file_suffix_from_path",
            "location": 167,
            "return": [],
            "arguments": {
                "datamap": []
            }
        }
    },
    "bcompiler-engine-master/tests/test_hashing.py": {
        "test_hash_of_single_file": {
            "name": "test_hash_of_single_file",
            "location": 11,
            "return": [],
            "arguments": {
                "resources": []
            }
        },
        "test_hash_of_target_files": {
            "name": "test_hash_of_target_files",
            "location": 18,
            "return": [],
            "arguments": {
                "resources": []
            }
        },
        "test_group_data_by_source_file": {
            "name": "test_group_data_by_source_file",
            "location": 28,
            "return": [],
            "arguments": {
                "resources": []
            }
        }
    },
    "bcompiler-engine-master/tests/test_template_parser.py": {
        "test_parse_multiple_templates": {
            "name": "test_parse_multiple_templates",
            "location": 17,
            "return": [],
            "arguments": {
                "resources": []
            }
        },
        "test_raise_exception_when_none_abs_path_passed": {
            "name": "test_raise_exception_when_none_abs_path_passed",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_func_to_get_sheetnames_as_keys_from_list_of_tcs": {
            "name": "test_func_to_get_sheetnames_as_keys_from_list_of_tcs",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_func_to_get_cellrefs_as_keys_from_list_of_tcs": {
            "name": "test_func_to_get_cellrefs_as_keys_from_list_of_tcs",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_template_reader": {
            "name": "test_template_reader",
            "location": 66,
            "return": [],
            "arguments": {
                "template": []
            }
        },
        "test_extract_data_from_multiple_files_into_correct_structure": {
            "name": "test_extract_data_from_multiple_files_into_correct_structure",
            "location": 74,
            "return": [],
            "arguments": {
                "resources": []
            }
        }
    },
    "bcompiler-engine-master/tests/__init__.py": {},
    "bcompiler-engine-master/tests/adapters/test_cli.py": {
        "test_create_master_in_memory": {
            "name": "test_create_master_in_memory",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_populate_blanks_from_master": {
            "name": "test_populate_blanks_from_master",
            "location": 14,
            "return": [],
            "arguments": {
                "mock_config": [],
                "blank_template": [],
                "datamap": [],
                "master": []
            }
        }
    },
    "bcompiler-engine-master/tests/reports/test_csv_validation_report.py": {
        "test_compare_datamap_data_with_template_data": {
            "name": "test_compare_datamap_data_with_template_data",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_create_master_spreadsheet_with_validation": {
            "name": "test_create_master_spreadsheet_with_validation",
            "location": 81,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template": [],
                "template": []
            }
        },
        "test_csv_validation_report_writer": {
            "name": "test_csv_validation_report_writer",
            "location": 97,
            "return": [],
            "arguments": {
                "mock_config": []
            }
        },
        "test_validation_results_go_to_csv_file": {
            "name": "test_validation_results_go_to_csv_file",
            "location": 149,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template": [],
                "template": []
            }
        },
        "test_validation_csv_report_contains_fail_state": {
            "name": "test_validation_csv_report_contains_fail_state",
            "location": 179,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template": [],
                "template_incorrect_type": []
            }
        },
        "test_validation_csv_report_with_mixture_of_included_types": {
            "name": "test_validation_csv_report_with_mixture_of_included_types",
            "location": 212,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_missing_one_type": [],
                "template": []
            }
        },
        "test_skips_type_validation_report_if_no_type_col_in_dm": {
            "name": "test_skips_type_validation_report_if_no_type_col_in_dm",
            "location": 244,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_no_type_col_matches_test_template": [],
                "template": []
            }
        },
        "test_incorrect_validation_type_is_na": {
            "name": "test_incorrect_validation_type_is_na",
            "location": 264,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template_incorrect_type_descriptor": [],
                "template": []
            }
        },
        "test_empty_cells_in_template_expected_by_dm_go_into_val_report": {
            "name": "test_empty_cells_in_template_expected_by_dm_go_into_val_report",
            "location": 296,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template_with_missing_val_match_template_equiv": [],
                "template_with_empty_cells_expected_by_datamap": []
            }
        },
        "test_validation_as_a_state_machine": {
            "name": "test_validation_as_a_state_machine",
            "location": 344,
            "return": [],
            "arguments": {
                "dm_data": [],
                "sheet_data": []
            }
        },
        "test_validation_line_driver": {
            "name": "test_validation_line_driver",
            "location": 387,
            "return": [],
            "arguments": {
                "dm_data": [],
                "sheet_data": [],
                "dm_index": [],
                "dm_data_type": [],
                "passes": [],
                "value": [],
                "wanted": [],
                "got": []
            }
        }
    },
    "bcompiler-engine-master/tests/repository/test_in_memory_repos.py": {
        "test_datamapline_repository_single_file_repo": {
            "name": "test_datamapline_repository_single_file_repo",
            "location": 12,
            "return": [],
            "arguments": {
                "datamap": [],
                "datamapline_list_objects": []
            }
        },
        "test_datamapline_repository_non_existant_file": {
            "name": "test_datamapline_repository_non_existant_file",
            "location": 19,
            "return": [],
            "arguments": {
                "datamapline_list_objects": []
            }
        },
        "test_template_zip_repo": {
            "name": "test_template_zip_repo",
            "location": 25,
            "return": [],
            "arguments": {
                "templates_zipped": []
            }
        }
    },
    "bcompiler-engine-master/tests/serializers/test_datamap_serializers.py": {
        "test_datamapline_obj_to_dict": {
            "name": "test_datamapline_obj_to_dict",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_datamap_json_serializer": {
            "name": "test_datamap_json_serializer",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "bcompiler-engine-master/tests/serializers/test_template_data_serializers.py": {
        "test_template_cell_to_dict": {
            "name": "test_template_cell_to_dict",
            "location": 6,
            "return": [],
            "arguments": {
                "template_cell_obj": []
            }
        },
        "test_template_cell_serializer": {
            "name": "test_template_cell_serializer",
            "location": 10,
            "return": [],
            "arguments": {
                "template_cell_obj": []
            }
        }
    },
    "bcompiler-engine-master/tests/use_cases/test_datamap_use_cases.py": {
        "test_parse_datamap_to_in_memory_use_case": {
            "name": "test_parse_datamap_to_in_memory_use_case",
            "location": 7,
            "return": [],
            "arguments": {
                "datamap": [],
                "datamapline_list_objects": [],
                "mock_config": []
            }
        }
    },
    "bcompiler-engine-master/tests/use_cases/test_master_from_org_templates.py": {
        "test_datamap_reader": {
            "name": "test_datamap_reader",
            "location": 17,
            "return": [],
            "arguments": {
                "mock_config": [],
                "org_test_files_dir": []
            }
        },
        "test_template_reader": {
            "name": "test_template_reader",
            "location": 33,
            "return": [],
            "arguments": {
                "mock_config": [],
                "org_test_files_dir": []
            }
        },
        "test_create_master_spreadsheet": {
            "name": "test_create_master_spreadsheet",
            "location": 49,
            "return": [],
            "arguments": {
                "mock_config": [],
                "org_test_files_dir": []
            }
        }
    },
    "bcompiler-engine-master/tests/use_cases/test_populate_templates_from_master.py": {
        "test_write_into_dropdown": {
            "name": "test_write_into_dropdown",
            "location": 22,
            "return": [],
            "arguments": {
                "blank_org_template": []
            }
        },
        "test_validation_report": {
            "name": "test_validation_report",
            "location": 58,
            "return": [],
            "arguments": {
                "blank_org_template": []
            }
        },
        "test_config_has_correct_files": {
            "name": "test_config_has_correct_files",
            "location": 66,
            "return": [],
            "arguments": {
                "mock_config": []
            }
        },
        "test_exception_when_given_master_with_empty_col_a": {
            "name": "test_exception_when_given_master_with_empty_col_a",
            "location": 87,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "master_no_col_a": [],
                "blank_template": []
            }
        },
        "test_can_export_more_than_twenty_six_columns": {
            "name": "test_can_export_more_than_twenty_six_columns",
            "location": 98,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "master_with_rogue_cell_vals_beyond_col_and_row_range": [],
                "blank_template": []
            }
        },
        "test_output_gateway": {
            "name": "test_output_gateway",
            "location": 125,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "master": [],
                "blank_template": []
            }
        },
        "test_output_gateway_reduced_datamap": {
            "name": "test_output_gateway_reduced_datamap",
            "location": 146,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_reduced": [],
                "master": [],
                "blank_template": []
            }
        },
        "test_export_continues_with_missing_sheet_in_datamap": {
            "name": "test_export_continues_with_missing_sheet_in_datamap",
            "location": 168,
            "return": [],
            "arguments": {
                "mock_config": [],
                "master": [],
                "datamap_missing_fields": [],
                "blank_template": []
            }
        }
    },
    "bcompiler-engine-master/tests/use_cases/test_template_parser_use_cases.py": {
        "test_template_parser_use_case": {
            "name": "test_template_parser_use_case",
            "location": 23,
            "return": [],
            "arguments": {
                "resources": []
            }
        },
        "test_query_data_from_data_file": {
            "name": "test_query_data_from_data_file",
            "location": 33,
            "return": [],
            "arguments": {
                "mock_config": [],
                "dat_file": [],
                "spreadsheet_same_data_as_dat_file": []
            }
        },
        "test_zip_with_directory_raises_exception": {
            "name": "test_zip_with_directory_raises_exception",
            "location": 52,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "templates_zipped_containing_dir": []
            }
        },
        "test_extract_data_from_templates_in_zip_file": {
            "name": "test_extract_data_from_templates_in_zip_file",
            "location": 66,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template": [],
                "templates_zipped": []
            }
        },
        "test_in_memory_datamap_application_to_extracted_data": {
            "name": "test_in_memory_datamap_application_to_extracted_data",
            "location": 98,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "template_with_introduction_sheet": []
            }
        },
        "test_in_memory_datamap_application_to_extracted_data_raises_exception": {
            "name": "test_in_memory_datamap_application_to_extracted_data_raises_exception",
            "location": 129,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "template": []
            }
        },
        "test_in_memory_datamap_generator": {
            "name": "test_in_memory_datamap_generator",
            "location": 148,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template": [],
                "template": []
            }
        },
        "test_create_master_spreadsheet": {
            "name": "test_create_master_spreadsheet",
            "location": 173,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap_match_test_template": [],
                "template": []
            }
        },
        "ensure_data_and_populate_file": {
            "name": "ensure_data_and_populate_file",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "dat_file": [],
                "spreadsheet_file": []
            }
        },
        "test_file_data_is_in_dat_file": {
            "name": "test_file_data_is_in_dat_file",
            "location": 197,
            "return": [],
            "arguments": {
                "mock_config": [],
                "dat_file": [],
                "spreadsheet_same_data_as_dat_file": []
            }
        },
        "test_file_data_is_in_dat_file_works_with_str_params": {
            "name": "test_file_data_is_in_dat_file_works_with_str_params",
            "location": 208,
            "return": [],
            "arguments": {
                "mock_config": [],
                "dat_file": [],
                "spreadsheet_same_data_as_dat_file": []
            }
        },
        "test_if_data_file_and_spreadsheet_file_dont_exist": {
            "name": "test_if_data_file_and_spreadsheet_file_dont_exist",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "test_file_data_is_in_data_file__but_spreadsheet_file_doesnt_exist": {
            "name": "test_file_data_is_in_data_file__but_spreadsheet_file_doesnt_exist",
            "location": 228,
            "return": [],
            "arguments": {
                "mock_config": [],
                "dat_file": []
            }
        },
        "test_file_data_not_in_data_returns_exception": {
            "name": "test_file_data_not_in_data_returns_exception",
            "location": 236,
            "return": [],
            "arguments": {
                "mock_config": [],
                "dat_file": [],
                "spreadsheet_one_cell_different_data_than_dat_file": []
            }
        },
        "test_in_extract_files_from_zipfile": {
            "name": "test_in_extract_files_from_zipfile",
            "location": 258,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "templates_zipped": []
            }
        },
        "test_in_extract_files_from_zipfile_with_deep_structure_raises_exception": {
            "name": "test_in_extract_files_from_zipfile_with_deep_structure_raises_exception",
            "location": 293,
            "return": [],
            "arguments": {
                "mock_config": [],
                "datamap": [],
                "templates_zipped_deep_structure": []
            }
        }
    },
    "bcompiler-engine-master/tests/utils/test_error_reporting.py": {
        "test_template_checked_for_correct_sheets_which_fails": {
            "name": "test_template_checked_for_correct_sheets_which_fails",
            "location": 12,
            "return": [],
            "arguments": {
                "datamap_lst_with_single_sheet": [],
                "template_dict": []
            }
        },
        "test_template_checked_for_correct_sheets_which_passes": {
            "name": "test_template_checked_for_correct_sheets_which_passes",
            "location": 28,
            "return": [],
            "arguments": {
                "datamap_lst_with_sheets_same_as_template_dict": [],
                "template_dict": []
            }
        }
    },
    "bcompiler-engine-master/tests/utils/test_utils.py": {
        "test_send_none_to_clean": {
            "name": "test_send_none_to_clean",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_send_int_to_clean": {
            "name": "test_send_int_to_clean",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "bcompiler-engine-master/tests/utils/test_validation.py": {
        "TestValidation.test_validation_simple_pass": {
            "name": "test_validation_simple_pass",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": []
            }
        },
        "TestValidation.test_validation_simple_fail_using_disallowed_types": {
            "name": "test_validation_simple_fail_using_disallowed_types",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": []
            }
        },
        "TestValidation.test_validation_simple_fails": {
            "name": "test_validation_simple_fails",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "wanted": [],
                "got": [],
                "val": []
            }
        },
        "TestValidation.test_validation_simple_untyped": {
            "name": "test_validation_simple_untyped",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidation.test_validation_empty_cells_in_template_expected_by_dm": {
            "name": "test_validation_empty_cells_in_template_expected_by_dm",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidation.test_validation_untyped_and_empty_in_template": {
            "name": "test_validation_untyped_and_empty_in_template",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
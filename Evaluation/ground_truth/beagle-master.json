{
    "beagle-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 111,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/config.py": {
        "expand_env_var": {
            "name": "expand_env_var",
            "location": 36,
            "return": [],
            "arguments": {
                "env_var": [
                    "str"
                ]
            }
        },
        "BeagleConfig._env_var_name": {
            "name": "_env_var_name",
            "location": 10,
            "return": [],
            "arguments": {
                "section": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BeagleConfig._get_env_var_option": {
            "name": "_get_env_var_option",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "key": []
            }
        },
        "BeagleConfig.get": {
            "name": "get",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "beagle-master/beagle/constants.py": {},
    "beagle-master/beagle/__init__.py": {},
    "beagle-master/beagle/analyzers/base_analyzer.py": {},
    "beagle-master/beagle/backends/base_backend.py": {
        "Backend.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[Node]"
                ]
            }
        },
        "Backend.graph": {
            "name": "graph",
            "location": 35,
            "return": [
                "Union[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.add_nodes": {
            "name": "add_nodes",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[Node]"
                ]
            }
        },
        "Backend.to_json": {
            "name": "to_json",
            "location": 54,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.is_empty": {
            "name": "is_empty",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.from_datasources": {
            "name": "from_datasources",
            "location": 64,
            "return": [
                "'Backend'"
            ],
            "arguments": {
                "cls": [],
                "datasources": [
                    "Union[('DataSource', List['DataSource'])]"
                ]
            }
        }
    },
    "beagle-master/beagle/backends/dgraph.py": {
        "DGraph.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "wipe_db": [
                    "bool"
                ]
            }
        },
        "DGraph.setup_schema": {
            "name": "setup_schema",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DGraph.graph": {
            "name": "graph",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DGraph.graph._node_to_dgraph_dict": {
            "name": "_node_to_dgraph_dict",
            "location": 126,
            "return": [
                "dict"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        }
    },
    "beagle-master/beagle/backends/graphistry.py": {
        "Graphistry.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anonymize": [
                    "bool"
                ],
                "render": [
                    "bool"
                ]
            }
        },
        "Graphistry._get_key": {
            "name": "_get_key",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graphistry.anonymize_graph": {
            "name": "anonymize_graph",
            "location": 59,
            "return": [
                "'nx.MultiDiGraph'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graphistry.graph": {
            "name": "graph",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/backends/neo4j.py": {
        "Neo4J.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "clear_database": [
                    "bool"
                ]
            }
        },
        "Neo4J.graph": {
            "name": "graph",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4J._make_nodes": {
            "name": "_make_nodes",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_graph": [
                    "nx.Graph"
                ]
            }
        },
        "Neo4J._make_edges": {
            "name": "_make_edges",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_graph": [
                    "nx.Graph"
                ]
            }
        },
        "Neo4J._create_constraint": {
            "name": "_create_constraint",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_type": [
                    "str"
                ]
            }
        },
        "Neo4J._node_as_cypher": {
            "name": "_node_as_cypher",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "Neo4J._edge_as_cypher": {
            "name": "_edge_as_cypher",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "tuple"
                ]
            }
        },
        "Neo4J._node_as_cypher.fix_value": {
            "name": "fix_value",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        }
    },
    "beagle-master/beagle/backends/networkx.py": {
        "NetworkX.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "dict"
                ],
                "consolidate_edges": [
                    "bool"
                ]
            }
        },
        "NetworkX.is_empty": {
            "name": "is_empty",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkX.graph": {
            "name": "graph",
            "location": 62,
            "return": [
                "nx.MultiDiGraph"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkX.add_nodes": {
            "name": "add_nodes",
            "location": 88,
            "return": [
                "nx.MultiDiGraph"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[Node]"
                ]
            }
        },
        "NetworkX.insert_node": {
            "name": "insert_node",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ],
                "node_id": [
                    "int"
                ]
            }
        },
        "NetworkX.insert_edges": {
            "name": "insert_edges",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Node"
                ],
                "v": [
                    "Node"
                ],
                "edge_name": [
                    "str"
                ],
                "instances": [
                    "List[dict]"
                ]
            }
        },
        "NetworkX.update_node": {
            "name": "update_node",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ],
                "node_id": [
                    "int"
                ]
            }
        },
        "NetworkX.graph_to_json": {
            "name": "graph_to_json",
            "location": 239,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "graph": [
                    "nx.MultiDiGraph"
                ]
            }
        },
        "NetworkX.to_json": {
            "name": "to_json",
            "location": 244,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkX.from_json": {
            "name": "from_json",
            "location": 301,
            "return": [
                "nx.MultiDiGraph"
            ],
            "arguments": {
                "path_or_obj": [
                    "Union[(str, dict)]"
                ]
            }
        },
        "NetworkX.to_json.node_to_json": {
            "name": "node_to_json",
            "location": 259,
            "return": [
                "dict"
            ],
            "arguments": {
                "node_id": [
                    "int"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "NetworkX.to_json.edge_to_json": {
            "name": "edge_to_json",
            "location": 269,
            "return": [
                "dict"
            ],
            "arguments": {
                "edge_id": [
                    "int"
                ],
                "u": [
                    "int"
                ],
                "v": [
                    "int"
                ],
                "edge_key": [
                    "str"
                ],
                "edge_props": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/backends/__init__.py": {},
    "beagle-master/beagle/common/logging.py": {},
    "beagle-master/beagle/common/__init__.py": {
        "split_path": {
            "name": "split_path",
            "location": 9,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "split_reg_path": {
            "name": "split_reg_path",
            "location": 41,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {
                "reg_path": [
                    "str"
                ]
            }
        },
        "dedup_nodes": {
            "name": "dedup_nodes",
            "location": 69,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "nodes": [
                    "List[Node]"
                ]
            }
        },
        "dedup_nodes._merge_batch": {
            "name": "_merge_batch",
            "location": 83,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "nodes": [
                    "List[Node]"
                ]
            }
        }
    },
    "beagle-master/beagle/datasources/base_datasource.py": {
        "DataSource.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DataSource.events": {
            "name": "events",
            "location": 56,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.metadata": {
            "name": "metadata",
            "location": 69,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.to_transformer": {
            "name": "to_transformer",
            "location": 79,
            "return": [
                "'Transformer'"
            ],
            "arguments": {
                "self": [],
                "transformer": [
                    "'Transformer'"
                ]
            }
        },
        "DataSource.to_graph": {
            "name": "to_graph",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource._convert_to_parent_fields": {
            "name": "_convert_to_parent_fields",
            "location": 115,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "process": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/datasources/cuckoo_report.py": {
        "CuckooReport.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cuckoo_report": [
                    "str"
                ]
            }
        },
        "CuckooReport.metadata": {
            "name": "metadata",
            "location": 74,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuckooReport.events": {
            "name": "events",
            "location": 85,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuckooReport.identify_processes": {
            "name": "identify_processes",
            "location": 109,
            "return": [
                "Dict[(int, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuckooReport.process_tree": {
            "name": "process_tree",
            "location": 134,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuckooReport._basic_file_events": {
            "name": "_basic_file_events",
            "location": 177,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": [],
                "process_summary": [
                    "dict"
                ],
                "process": [
                    "dict"
                ]
            }
        },
        "CuckooReport._summary_network_connections": {
            "name": "_summary_network_connections",
            "location": 209,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": [],
                "process_summary": [
                    "dict"
                ],
                "process": [
                    "dict"
                ]
            }
        },
        "CuckooReport._regkey_events": {
            "name": "_regkey_events",
            "location": 248,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": [],
                "process_summary": [
                    "dict"
                ],
                "process": [
                    "dict"
                ]
            }
        },
        "CuckooReport.global_network_events": {
            "name": "global_network_events",
            "location": 271,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuckooReport.process_tree.process_single_entry": {
            "name": "process_single_entry",
            "location": 135,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "entry": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/datasources/darpa_tc_json.py": {
        "DARPATCJson.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "DARPATCJson.events": {
            "name": "events",
            "location": 18,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/datasources/elasticsearch_qs.py": {
        "ElasticSearchQSSerach.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ],
                "query": [
                    "str"
                ],
                "earliest": [
                    "str"
                ],
                "latest": [
                    "str"
                ]
            }
        },
        "ElasticSearchQSSerach._setup_session": {
            "name": "_setup_session",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchQSSerach.events": {
            "name": "events",
            "location": 73,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchQSSerach.metadata": {
            "name": "metadata",
            "location": 110,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/datasources/fireeye_ax_report.py": {
        "FireEyeAXReport.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "ax_report": [
                    "str"
                ]
            }
        },
        "FireEyeAXReport.metadata": {
            "name": "metadata",
            "location": 82,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FireEyeAXReport.events": {
            "name": "events",
            "location": 107,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/datasources/hx_triage.py": {
        "HXTriage.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "triage": [
                    "str"
                ]
            }
        },
        "HXTriage._hx_time_to_epoch": {
            "name": "_hx_time_to_epoch",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "timestr": [
                    "str"
                ]
            }
        },
        "HXTriage._fix_missing_fields": {
            "name": "_fix_missing_fields",
            "location": 113,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "HXTriage.parse_agent_events": {
            "name": "parse_agent_events",
            "location": 168,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": [],
                "agent_events_file": [
                    "str"
                ]
            }
        },
        "HXTriage.parse_alert_files": {
            "name": "parse_alert_files",
            "location": 244,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": [],
                "temp_dir": [
                    "str"
                ]
            }
        },
        "HXTriage.events": {
            "name": "events",
            "location": 314,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HXTriage.metadata": {
            "name": "metadata",
            "location": 329,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/datasources/json_data.py": {
        "JSONFile.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "JSONFile.metadata": {
            "name": "metadata",
            "location": 18,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONFile.events": {
            "name": "events",
            "location": 21,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONData.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "List[Dict]"
                ]
            }
        },
        "JSONData.events": {
            "name": "events",
            "location": 49,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONData.metadata": {
            "name": "metadata",
            "location": 53,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/datasources/pcap.py": {
        "PCAP.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pcap_file": [
                    "str"
                ]
            }
        },
        "PCAP.metadata": {
            "name": "metadata",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCAP._get_rdpcap": {
            "name": "_get_rdpcap",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PCAP.events": {
            "name": "events",
            "location": 42,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCAP._parse_dns_request": {
            "name": "_parse_dns_request",
            "location": 125,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dns_layer": []
            }
        }
    },
    "beagle-master/beagle/datasources/procmon_csv.py": {
        "ProcmonCSV.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "procmon_csv": [
                    "str"
                ]
            }
        },
        "ProcmonCSV.metadata": {
            "name": "metadata",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcmonCSV.events": {
            "name": "events",
            "location": 30,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/datasources/splunk_spl.py": {
        "request": {
            "name": "request",
            "location": 12,
            "return": [],
            "arguments": {
                "url": [],
                "message": []
            }
        },
        "handler": {
            "name": "handler",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "SplunkSPLSearch.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "spl": [
                    "str"
                ],
                "earliest": [
                    "str"
                ],
                "latest": [
                    "str"
                ]
            }
        },
        "SplunkSPLSearch.patch_spl": {
            "name": "patch_spl",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spl": [
                    "str"
                ]
            }
        },
        "SplunkSPLSearch.setup_session": {
            "name": "setup_session",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SplunkSPLSearch.events": {
            "name": "events",
            "location": 105,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplunkSPLSearch.metadata": {
            "name": "metadata",
            "location": 132,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplunkSPLSearch.create_search": {
            "name": "create_search",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "query_kwargs": [
                    "dict"
                ]
            }
        },
        "SplunkSPLSearch.get_results": {
            "name": "get_results",
            "location": 146,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "job": [],
                "count": [
                    "int"
                ]
            }
        }
    },
    "beagle-master/beagle/datasources/sysmon_evtx.py": {
        "SysmonEVTX.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sysmon_evtx_log_file": [
                    "str"
                ]
            }
        },
        "SysmonEVTX.metadata": {
            "name": "metadata",
            "location": 26,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SysmonEVTX.parse_record": {
            "name": "parse_record",
            "location": 44,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "etree.ElementTree"
                ],
                "name": []
            }
        }
    },
    "beagle-master/beagle/datasources/win_evtx.py": {
        "WinEVTX.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evtx_log_file": [
                    "str"
                ]
            }
        },
        "WinEVTX.events": {
            "name": "events",
            "location": 35,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WinEVTX.metadata": {
            "name": "metadata",
            "location": 41,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WinEVTX.parse_record": {
            "name": "parse_record",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "etree.ElementTree"
                ],
                "name": []
            }
        }
    },
    "beagle-master/beagle/datasources/__init__.py": {},
    "beagle-master/beagle/datasources/memory/windows_rekall.py": {
        "WindowsMemory.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory_image": [
                    "str"
                ]
            }
        },
        "WindowsMemory.metadata": {
            "name": "metadata",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsMemory._setup_session": {
            "name": "_setup_session",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WindowsMemory.events": {
            "name": "events",
            "location": 54,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsMemory.pslist": {
            "name": "pslist",
            "location": 58,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsMemory.handles": {
            "name": "handles",
            "location": 154,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsMemory.connscan": {
            "name": "connscan",
            "location": 209,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsMemory.pslist._convert_to_parent_fields": {
            "name": "_convert_to_parent_fields",
            "location": 69,
            "return": [
                "dict"
            ],
            "arguments": {
                "process": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/datasources/memory/__init__.py": {},
    "beagle-master/beagle/datasources/virustotal/generic_vt_sandbox.py": {
        "GenericVTSandbox.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behaviour_report_file": [
                    "str"
                ],
                "hash_metadata_file": [
                    "str"
                ]
            }
        },
        "GenericVTSandbox._convert_to_parent_fields": {
            "name": "_convert_to_parent_fields",
            "location": 83,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "process": [
                    "dict"
                ]
            }
        },
        "GenericVTSandbox._parse_process_name": {
            "name": "_parse_process_name",
            "location": 95,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "proc_string": [
                    "str"
                ]
            }
        },
        "GenericVTSandbox._get_root_proc": {
            "name": "_get_root_proc",
            "location": 138,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox.metadata": {
            "name": "metadata",
            "location": 164,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox.events": {
            "name": "events",
            "location": 198,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox._proc_tree": {
            "name": "_proc_tree",
            "location": 212,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox._basic_file_events": {
            "name": "_basic_file_events",
            "location": 283,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox._complex_file_events": {
            "name": "_complex_file_events",
            "location": 306,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox._network_events": {
            "name": "_network_events",
            "location": 339,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox._basic_registry_events": {
            "name": "_basic_registry_events",
            "location": 375,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox._complex_registry_events": {
            "name": "_complex_registry_events",
            "location": 398,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericVTSandbox._proc_tree.process_entry": {
            "name": "process_entry",
            "location": 251,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "entry": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/datasources/virustotal/generic_vt_sandbox_api.py": {
        "GenericVTSandboxAPI.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "file_hash": [
                    "str"
                ],
                "sandbox_name": [
                    "str"
                ]
            }
        }
    },
    "beagle-master/beagle/datasources/virustotal/__init__.py": {},
    "beagle-master/beagle/edges/alert.py": {
        "AlertedOn.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/edges/edge.py": {
        "Edge.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge.__add__": {
            "name": "__add__",
            "location": 56,
            "return": [
                "'Edge'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "Edge.get_name": {
            "name": "get_name",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [
                    "dict"
                ]
            }
        },
        "Edge._display": {
            "name": "_display",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Edge.append": {
            "name": "append",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge.__contains__": {
            "name": "__contains__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Any, Any)]"
                ]
            }
        },
        "Edge.__len__": {
            "name": "__len__",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/edges/file.py": {
        "CopiedTo.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wrote.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Accessed.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deleted.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Copied.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loaded.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/edges/network.py": {
        "ConnectedTo.get_name": {
            "name": "get_name",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "ConnectedTo.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequestTo.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequestTo._display": {
            "name": "_display",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DNSQueryFor.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URIOf.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolvesTo.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/edges/process.py": {
        "Launched.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/edges/registry.py": {
        "ChangedValue.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatedKey.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadKey.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletedValue.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletedKey.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/edges/__init__.py": {},
    "beagle-master/beagle/nodes/alert.py": {
        "Alert.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "alert_name": [
                    "str"
                ],
                "alert_data": [
                    "str"
                ]
            }
        },
        "Alert._display": {
            "name": "_display",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.edges": {
            "name": "edges",
            "location": 32,
            "return": [
                "List[DefaultDict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/nodes/domain.py": {
        "Domain.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "Domain._display": {
            "name": "_display",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.edges": {
            "name": "edges",
            "location": 30,
            "return": [
                "List[DefaultDict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ]
            }
        },
        "URI._display": {
            "name": "_display",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.edges": {
            "name": "edges",
            "location": 53,
            "return": [
                "List[DefaultDict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/nodes/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "file_name": [
                    "str"
                ],
                "full_path": [
                    "str"
                ],
                "extension": [
                    "str"
                ],
                "hashes": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "File.set_extension": {
            "name": "set_extension",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.edges": {
            "name": "edges",
            "location": 64,
            "return": [
                "List[DefaultDict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "File._display": {
            "name": "_display",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/nodes/ip_address.py": {
        "IPAddress.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "ip_address": [
                    "str"
                ],
                "mac": [
                    "str"
                ]
            }
        },
        "IPAddress._display": {
            "name": "_display",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/nodes/node.py": {
        "Node.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Node.__key": {
            "name": "__key",
            "location": 19,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.merge_with": {
            "name": "merge_with",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.edges": {
            "name": "edges",
            "location": 126,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._display": {
            "name": "_display",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.to_dict": {
            "name": "to_dict",
            "location": 156,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/nodes/process.py": {
        "Process.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "process_id": [
                    "int"
                ],
                "user": [
                    "str"
                ],
                "process_image": [
                    "str"
                ],
                "process_image_path": [
                    "str"
                ],
                "process_path": [
                    "str"
                ],
                "command_line": [
                    "str"
                ],
                "hashes": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Process.get_file_node": {
            "name": "get_file_node",
            "location": 110,
            "return": [
                "File"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.edges": {
            "name": "edges",
            "location": 119,
            "return": [
                "List[DefaultDict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process._display": {
            "name": "_display",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SysMonProc.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process_guid": [
                    "str"
                ]
            }
        }
    },
    "beagle-master/beagle/nodes/registry.py": {
        "RegistryKey.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "hive": [
                    "str"
                ],
                "key_path": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "value_type": [
                    "str"
                ]
            }
        },
        "RegistryKey._display": {
            "name": "_display",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/nodes/__init__.py": {},
    "beagle-master/beagle/transformers/base_transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "DataSource"
                ]
            }
        },
        "Transformer.to_graph": {
            "name": "to_graph",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "'Backend'"
                ]
            }
        },
        "Transformer.run": {
            "name": "run",
            "location": 63,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer._producer_thread": {
            "name": "_producer_thread",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer._consumer_thread": {
            "name": "_consumer_thread",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer.transform": {
            "name": "transform",
            "location": 154,
            "return": [
                "Optional[Iterable[Node]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/darpa_tc_transformer.py": {
        "TCProcess.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "TCFile.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "TCRegistryKey.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "TCIPAddress.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "DRAPATCTransformer.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DRAPATCTransformer.transform": {
            "name": "transform",
            "location": 55,
            "return": [
                "Optional[Tuple]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "DRAPATCTransformer.make_process": {
            "name": "make_process",
            "location": 86,
            "return": [
                "Union[(Tuple[TCProcess], Tuple[(TCProcess, TCProcess)])]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "DRAPATCTransformer.make_file": {
            "name": "make_file",
            "location": 121,
            "return": [
                "Tuple[TCFile]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "DRAPATCTransformer.make_registrykey": {
            "name": "make_registrykey",
            "location": 140,
            "return": [
                "Tuple[TCRegistryKey]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "DRAPATCTransformer.make_addr": {
            "name": "make_addr",
            "location": 162,
            "return": [
                "Tuple[TCIPAddress]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "DRAPATCTransformer.file_events": {
            "name": "file_events",
            "location": 167,
            "return": [
                "Tuple[(TCProcess, TCFile)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "DRAPATCTransformer.execute_events": {
            "name": "execute_events",
            "location": 181,
            "return": [
                "Tuple[(TCProcess, TCProcess)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "DRAPATCTransformer.conn_events": {
            "name": "conn_events",
            "location": 193,
            "return": [
                "Tuple[(TCProcess, TCIPAddress)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/evtx_transformer.py": {
        "WinEVTXTransformer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WinEVTXTransformer.transform": {
            "name": "transform",
            "location": 19,
            "return": [
                "Optional[Tuple]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "WinEVTXTransformer.process_creation": {
            "name": "process_creation",
            "location": 31,
            "return": [
                "Tuple[(Process, File, Process)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/fireeye_ax_transformer.py": {
        "FireEyeAXTransformer.transform": {
            "name": "transform",
            "location": 14,
            "return": [
                "Optional[Tuple]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeAXTransformer.process_events": {
            "name": "process_events",
            "location": 81,
            "return": [
                "Optional[Tuple[(Process, File, Process, File)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeAXTransformer.dns_events": {
            "name": "dns_events",
            "location": 149,
            "return": [
                "Union[(Tuple[(Process, File, Domain)], Tuple[(Process, File, Domain, IPAddress)])]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeAXTransformer.conn_events": {
            "name": "conn_events",
            "location": 205,
            "return": [
                "Tuple[(Process, File, IPAddress)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeAXTransformer.http_requests": {
            "name": "http_requests",
            "location": 256,
            "return": [
                "Union[(Tuple[(Process, File, IPAddress, URI, Domain)], Tuple[(Process, File, IPAddress, URI)], Tuple[(Process, File, IPAddress)])]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeAXTransformer.file_events": {
            "name": "file_events",
            "location": 336,
            "return": [
                "Union[(Tuple[(Process, File, File)], Tuple[(Process, File, File, File)])]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeAXTransformer.regkey_events": {
            "name": "regkey_events",
            "location": 416,
            "return": [
                "Tuple[(Process, File, RegistryKey)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/fireeye_hx_transformer.py": {
        "FireEyeHXTransformer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FireEyeHXTransformer.transform": {
            "name": "transform",
            "location": 19,
            "return": [
                "Optional[Tuple[(Node, ...)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_process": {
            "name": "make_process",
            "location": 62,
            "return": [
                "Optional[Union[(Tuple[(Process, File)], Tuple[(Process, File, Process, File)])]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_file": {
            "name": "make_file",
            "location": 142,
            "return": [
                "Optional[Tuple[(File, Process, File)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_url": {
            "name": "make_url",
            "location": 199,
            "return": [
                "Optional[Tuple[(URI, Domain, Process, File, IPAddress)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_network": {
            "name": "make_network",
            "location": 281,
            "return": [
                "Optional[Tuple[(IPAddress, Process, File)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_dnslookup": {
            "name": "make_dnslookup",
            "location": 334,
            "return": [
                "Optional[Tuple[(Domain, Process, File)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_imageload": {
            "name": "make_imageload",
            "location": 381,
            "return": [
                "Optional[Tuple[(File, Process, File)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_registry": {
            "name": "make_registry",
            "location": 410,
            "return": [
                "Optional[Tuple[(RegistryKey, Process, File)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FireEyeHXTransformer.make_alert": {
            "name": "make_alert",
            "location": 458,
            "return": [
                "Optional[Tuple[(Alert, ...)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/generic_transformer.py": {
        "GenericTransformer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericTransformer.transform": {
            "name": "transform",
            "location": 22,
            "return": [
                "Optional[Tuple]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_alert": {
            "name": "make_alert",
            "location": 53,
            "return": [
                "Tuple[(Alert, ...)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_process": {
            "name": "make_process",
            "location": 73,
            "return": [
                "Tuple[(Process, File, Process, File)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_basic_file": {
            "name": "make_basic_file",
            "location": 130,
            "return": [
                "Tuple[(Process, File, File)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_file_copy": {
            "name": "make_file_copy",
            "location": 187,
            "return": [
                "Tuple[(Process, File, File, File)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_connection": {
            "name": "make_connection",
            "location": 222,
            "return": [
                "Tuple[(Process, File, IPAddress)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_http_req": {
            "name": "make_http_req",
            "location": 248,
            "return": [
                "Union[(Tuple[(Process, File, URI, Domain)], Tuple[(Process, File, URI, Domain, IPAddress)])]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_dnslookup": {
            "name": "make_dnslookup",
            "location": 276,
            "return": [
                "Union[(Tuple[(Process, File, Domain, IPAddress)], Tuple[(Process, File, Domain)])]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_basic_regkey": {
            "name": "make_basic_regkey",
            "location": 303,
            "return": [
                "Tuple[(Process, File, RegistryKey)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "GenericTransformer.make_regkey_set_value": {
            "name": "make_regkey_set_value",
            "location": 329,
            "return": [
                "Tuple[(Process, File, RegistryKey)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/pcap_transformer.py": {
        "PCAPTransformer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCAPTransformer.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                "Optional[Tuple[(Node, ...)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/procmon_transformer.py": {
        "ProcmonTransformer.transform": {
            "name": "transform",
            "location": 13,
            "return": [
                "Optional[Tuple]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "ProcmonTransformer.process_create": {
            "name": "process_create",
            "location": 28,
            "return": [
                "Tuple[(Process, File, Process)]"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "ProcmonTransformer.write_file": {
            "name": "write_file",
            "location": 53,
            "return": [
                "Tuple[(Process, File)]"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "ProcmonTransformer.access_file": {
            "name": "access_file",
            "location": 64,
            "return": [
                "Tuple[(Process, File)]"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "ProcmonTransformer.access_reg_key": {
            "name": "access_reg_key",
            "location": 74,
            "return": [
                "Tuple[(Process, RegistryKey)]"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "ProcmonTransformer.connection": {
            "name": "connection",
            "location": 89,
            "return": [
                "Tuple[(Process, IPAddress)]"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "beagle-master/beagle/transformers/sysmon_transformer.py": {
        "SysmonTransformer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SysmonTransformer.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                "Optional[Tuple]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "SysmonTransformer.process_creation": {
            "name": "process_creation",
            "location": 33,
            "return": [
                "Tuple[(Process, File, Process, File)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "SysmonTransformer.network_connection": {
            "name": "network_connection",
            "location": 72,
            "return": [
                "Union[(Tuple[(Process, File, IPAddress)], Tuple[(Process, File, IPAddress, Domain)])]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "SysmonTransformer.file_created": {
            "name": "file_created",
            "location": 103,
            "return": [
                "Tuple[(Process, File, File)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "SysmonTransformer.registry_creation": {
            "name": "registry_creation",
            "location": 126,
            "return": [
                "Optional[Tuple[(Process, File, RegistryKey)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "SysmonTransformer.dns_lookup": {
            "name": "dns_lookup",
            "location": 172,
            "return": [
                "Tuple[(Process, File, Domain)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "beagle-master/beagle/transformers/__init__.py": {},
    "beagle-master/beagle/web/server.py": {
        "root_view": {
            "name": "root_view",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "root_view.index": {
            "name": "index",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "root_view.catch_all": {
            "name": "catch_all",
            "location": 21,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "beagle-master/beagle/web/wsgi.py": {},
    "beagle-master/beagle/web/__init__.py": {},
    "beagle-master/beagle/web/api/models.py": {
        "JSONEncodedDict.process_bind_param": {
            "name": "process_bind_param",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "JSONEncodedDict.process_result_value": {
            "name": "process_result_value",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "Graph.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.to_json": {
            "name": "to_json",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/beagle/web/api/views.py": {
        "pipelines": {
            "name": "pipelines",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "get_backends": {
            "name": "get_backends",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "get_transformers": {
            "name": "get_transformers",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "new": {
            "name": "new",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 273,
            "return": [],
            "arguments": {
                "graph_id": [
                    "int"
                ]
            }
        },
        "_validate_params": {
            "name": "_validate_params",
            "location": 355,
            "return": [
                "Tuple[(dict, bool)]"
            ],
            "arguments": {
                "form": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "_setup_params": {
            "name": "_setup_params",
            "location": 440,
            "return": [
                "dict"
            ],
            "arguments": {
                "form": [
                    "dict"
                ],
                "schema": [
                    "dict"
                ],
                "is_external": [
                    "bool"
                ]
            }
        },
        "_create_graph": {
            "name": "_create_graph",
            "location": 469,
            "return": [
                "Tuple[(dict, bool)]"
            ],
            "arguments": {
                "datasource_cls": [
                    "Type[DataSource]"
                ],
                "transformer_cls": [
                    "Type[Transformer]"
                ],
                "backend_cls": [
                    "Type[Backend]"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "is_external": [
                    "bool"
                ]
            }
        },
        "_add_to_exiting_graph": {
            "name": "_add_to_exiting_graph",
            "location": 533,
            "return": [
                "Tuple[(dict, bool)]"
            ],
            "arguments": {
                "existing_backend": [
                    "Backend"
                ],
                "datasource_cls": [
                    "Type[DataSource]"
                ],
                "transformer_cls": [
                    "Type[Transformer]"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "is_external": [
                    "bool"
                ]
            }
        },
        "_save_graph_to_db": {
            "name": "_save_graph_to_db",
            "location": 591,
            "return": [
                "dict"
            ],
            "arguments": {
                "backend": [
                    "NetworkX"
                ],
                "category": [
                    "str"
                ],
                "graph_id": [
                    "int"
                ]
            }
        },
        "adhoc": {
            "name": "adhoc",
            "location": 656,
            "return": [],
            "arguments": {}
        },
        "get_categories": {
            "name": "get_categories",
            "location": 687,
            "return": [],
            "arguments": {}
        },
        "get_category_items": {
            "name": "get_category_items",
            "location": 718,
            "return": [],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "get_graph": {
            "name": "get_graph",
            "location": 756,
            "return": [],
            "arguments": {
                "graph_id": [
                    "int"
                ]
            }
        },
        "get_graph_metadata": {
            "name": "get_graph_metadata",
            "location": 798,
            "return": [],
            "arguments": {
                "graph_id": [
                    "int"
                ]
            }
        }
    },
    "beagle-master/beagle/web/api/__init__.py": {},
    "beagle-master/docs/conf.py": {},
    "beagle-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 14,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "app": {
            "name": "app",
            "location": 20,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "db": {
            "name": "db",
            "location": 39,
            "return": [],
            "arguments": {
                "app": [],
                "request": []
            }
        },
        "session": {
            "name": "session",
            "location": 56,
            "return": [],
            "arguments": {
                "db": [],
                "request": []
            }
        },
        "app.teardown": {
            "name": "teardown",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "db.teardown": {
            "name": "teardown",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "session.teardown": {
            "name": "teardown",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/test_config.py": {
        "setup_function": {
            "name": "setup_function",
            "location": 5,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "teardown_function": {
            "name": "teardown_function",
            "location": 12,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "test_get_env_var": {
            "name": "test_get_env_var",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_env_superseeds_file": {
            "name": "test_env_superseeds_file",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/__init__.py": {},
    "beagle-master/tests/backend/test_graphistry.py": {
        "test_anonymize_graph": {
            "name": "test_anonymize_graph",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "MockGraphistry.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/tests/backend/test_neo4j.py": {
        "test_node_as_cypher": {
            "name": "test_node_as_cypher",
            "location": 42,
            "return": [],
            "arguments": {
                "node": [],
                "keys": []
            }
        },
        "test_edge_as_cypher": {
            "name": "test_edge_as_cypher",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "MockNeo4j.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/tests/backend/test_networkx.py": {
        "packets_to_datasource_events": {
            "name": "packets_to_datasource_events",
            "location": 20,
            "return": [
                "PCAP"
            ],
            "arguments": {
                "packets": [
                    "List[Packet]"
                ]
            }
        },
        "nx": {
            "name": "nx",
            "location": 28,
            "return": [
                "Callable[(..., NetworkX)]"
            ],
            "arguments": {}
        },
        "test_one_node": {
            "name": "test_one_node",
            "location": 35,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_one_edge": {
            "name": "test_one_edge",
            "location": 42,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_node_updated": {
            "name": "test_node_updated",
            "location": 61,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_edge_has_no_name": {
            "name": "test_edge_has_no_name",
            "location": 78,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_empty_graph": {
            "name": "test_empty_graph",
            "location": 92,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_from_json_object": {
            "name": "test_from_json_object",
            "location": 98,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_from_json_path": {
            "name": "test_from_json_path",
            "location": 116,
            "return": [],
            "arguments": {
                "nx": [],
                "tmpdir": []
            }
        },
        "test_from_json_fails_on_invalid": {
            "name": "test_from_json_fails_on_invalid",
            "location": 136,
            "return": [],
            "arguments": {
                "nx": [],
                "tmpdir": []
            }
        },
        "test_add_nodes_no_overlap": {
            "name": "test_add_nodes_no_overlap",
            "location": 148,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_add_node_overlaps_existing": {
            "name": "test_add_node_overlaps_existing",
            "location": 172,
            "return": [],
            "arguments": {
                "nx": []
            }
        },
        "test_from_datasources": {
            "name": "test_from_datasources",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "nx._backend": {
            "name": "_backend",
            "location": 29,
            "return": [
                "networkx.Graph"
            ],
            "arguments": {}
        }
    },
    "beagle-master/tests/backend/__init__.py": {},
    "beagle-master/tests/datasources/test_base_datasource.py": {
        "test_subclass_no_name": {
            "name": "test_subclass_no_name",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_subclass_no_transformers": {
            "name": "test_subclass_no_transformers",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_transformer": {
            "name": "test_transformer",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_subclass_no_name.OtherDataSource.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_subclass_no_name.OtherDataSource.metadata": {
            "name": "metadata",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_name.OtherDataSource.events": {
            "name": "events",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_transformers.OtherDataSource.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_subclass_no_transformers.OtherDataSource.metadata": {
            "name": "metadata",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_transformers.OtherDataSource.events": {
            "name": "events",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_transformer.SomeTransformer.transform": {
            "name": "transform",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_transformer.OtherDataSource.metadata": {
            "name": "metadata",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_transformer.OtherDataSource.events": {
            "name": "events",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_name.MyDataSource.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_subclass_no_name.MyDataSource.metadata": {
            "name": "metadata",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_name.MyDataSource.events": {
            "name": "events",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_transformers.MyDataSource.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_subclass_no_transformers.MyDataSource.metadata": {
            "name": "metadata",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_transformers.MyDataSource.events": {
            "name": "events",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_transformers.MyOtherDataSource.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_subclass_no_transformers.MyOtherDataSource.metadata": {
            "name": "metadata",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_no_transformers.MyOtherDataSource.events": {
            "name": "events",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/tests/datasources/test_cuckoo_report.py": {
        "make_tmp_file": {
            "name": "make_tmp_file",
            "location": 9,
            "return": [],
            "arguments": {
                "data": [
                    "dict"
                ],
                "tmpdir": []
            }
        },
        "test_metadata": {
            "name": "test_metadata",
            "location": 15,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_identify_processes": {
            "name": "test_identify_processes",
            "location": 78,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_process_tree": {
            "name": "test_process_tree",
            "location": 148,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_basic_file_events": {
            "name": "test_basic_file_events",
            "location": 298,
            "return": [],
            "arguments": {
                "dictkey": [],
                "eventtype": [],
                "tmpdir": []
            }
        },
        "test_basicfile_skips_folders": {
            "name": "test_basicfile_skips_folders",
            "location": 366,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_connections": {
            "name": "test_connections",
            "location": 422,
            "return": [],
            "arguments": {
                "connects_type": [],
                "tmpdir": []
            }
        },
        "test_dnslookup": {
            "name": "test_dnslookup",
            "location": 490,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_url_events": {
            "name": "test_url_events",
            "location": 559,
            "return": [],
            "arguments": {
                "url_type": [],
                "tmpdir": []
            }
        },
        "test_regevents": {
            "name": "test_regevents",
            "location": 638,
            "return": [],
            "arguments": {
                "event_type": [],
                "edge_type": [],
                "tmpdir": []
            }
        },
        "test_global_connection": {
            "name": "test_global_connection",
            "location": 713,
            "return": [],
            "arguments": {
                "key": [],
                "conn_type": [],
                "tmpdir": []
            }
        },
        "test_icmp_connection": {
            "name": "test_icmp_connection",
            "location": 796,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_dnslookup_no_answer_connection": {
            "name": "test_dnslookup_no_answer_connection",
            "location": 867,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_dnslookup_answers_connection": {
            "name": "test_dnslookup_answers_connection",
            "location": 937,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_http_ex_requests": {
            "name": "test_http_ex_requests",
            "location": 1036,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "beagle-master/tests/datasources/test_darpa_tc_json.py": {
        "make_tmp_file": {
            "name": "make_tmp_file",
            "location": 6,
            "return": [],
            "arguments": {
                "data": [
                    "List[dict]"
                ],
                "tmpdir": []
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_metadata": {
            "name": "test_metadata",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_event_adjusted": {
            "name": "test_event_adjusted",
            "location": 23,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "beagle-master/tests/datasources/test_elasticsearch_qs.py": {
        "test_init": {
            "name": "test_init",
            "location": 6,
            "return": [],
            "arguments": {
                "mock_method": []
            }
        },
        "test_event_loop": {
            "name": "test_event_loop",
            "location": 12,
            "return": [],
            "arguments": {
                "mock_setup": []
            }
        },
        "test_scroll": {
            "name": "test_scroll",
            "location": 33,
            "return": [],
            "arguments": {
                "mock_setup": []
            }
        }
    },
    "beagle-master/tests/datasources/test_fireeye_ax_report.py": {
        "datasource": {
            "name": "datasource",
            "location": 9,
            "return": [
                "FireEyeAXReport"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "make_tmp_file": {
            "name": "make_tmp_file",
            "location": 13,
            "return": [],
            "arguments": {
                "data": [
                    "dict"
                ],
                "tmpdir": []
            }
        },
        "make_default_file": {
            "name": "make_default_file",
            "location": 19,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_no_data": {
            "name": "test_no_data",
            "location": 25,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_no_events": {
            "name": "test_no_events",
            "location": 49,
            "return": [],
            "arguments": {
                "data": [],
                "tmpdir": []
            }
        },
        "test_get_metadata": {
            "name": "test_get_metadata",
            "location": 54,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_multiple_time_formats": {
            "name": "test_multiple_time_formats",
            "location": 94,
            "return": [],
            "arguments": {
                "data": [],
                "tmpdir": []
            }
        },
        "test_invalid_time_format": {
            "name": "test_invalid_time_format",
            "location": 99,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "beagle-master/tests/datasources/test_hxtriage.py": {},
    "beagle-master/tests/datasources/test_hx_triage.py": {
        "test_fix_missing_fields": {
            "name": "test_fix_missing_fields",
            "location": 48,
            "return": [],
            "arguments": {
                "event": [],
                "expected": []
            }
        },
        "test_agent_events_file": {
            "name": "test_agent_events_file",
            "location": 54,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "MockHXTriage.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/tests/datasources/test_json_data.py": {
        "test_init": {
            "name": "test_init",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_metadata": {
            "name": "test_metadata",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_events_in_newline": {
            "name": "test_events_in_newline",
            "location": 15,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_event_in_array": {
            "name": "test_event_in_array",
            "location": 23,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "beagle-master/tests/datasources/test_pcap.py": {
        "packets_to_datasource_events": {
            "name": "packets_to_datasource_events",
            "location": 8,
            "return": [
                "PCAP"
            ],
            "arguments": {
                "packets": [
                    "List[Packet]"
                ]
            }
        },
        "test_single_ether_packet": {
            "name": "test_single_ether_packet",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_single_ip_packet": {
            "name": "test_single_ip_packet",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_single_udp_packet": {
            "name": "test_single_udp_packet",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_single_tcp_packet": {
            "name": "test_single_tcp_packet",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_single_dns_resp_packet": {
            "name": "test_single_dns_resp_packet",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_single_dns_query_packet": {
            "name": "test_single_dns_query_packet",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_single_http_packet": {
            "name": "test_single_http_packet",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_multiple_packets": {
            "name": "test_multiple_packets",
            "location": 158,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/datasources/test_splunk_spl.py": {
        "test_init": {
            "name": "test_init",
            "location": 7,
            "return": [],
            "arguments": {
                "mock_method": []
            }
        },
        "test_forces_search_appended": {
            "name": "test_forces_search_appended",
            "location": 21,
            "return": [],
            "arguments": {
                "mock_method": [],
                "spl": [],
                "expected": []
            }
        },
        "test_get_events": {
            "name": "test_get_events",
            "location": 29,
            "return": [],
            "arguments": {
                "get_results_mock": [],
                "create_search_mock": [],
                "mock_session": []
            }
        }
    },
    "beagle-master/tests/datasources/__init__.py": {},
    "beagle-master/tests/datasources/virustotal/test_generic_sandbox.py": {
        "tencent1": {
            "name": "tencent1",
            "location": 7,
            "return": [
                "GenericVTSandbox"
            ],
            "arguments": {}
        },
        "tencent_nested": {
            "name": "tencent_nested",
            "location": 13,
            "return": [
                "GenericVTSandbox"
            ],
            "arguments": {}
        },
        "drweb_nested": {
            "name": "drweb_nested",
            "location": 21,
            "return": [
                "GenericVTSandbox"
            ],
            "arguments": {}
        },
        "drweb_net": {
            "name": "drweb_net",
            "location": 29,
            "return": [
                "GenericVTSandbox"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_parse_process_name": {
            "name": "test_parse_process_name",
            "location": 96,
            "return": [],
            "arguments": {
                "proc_name": [],
                "output": []
            }
        },
        "test_proc_tree": {
            "name": "test_proc_tree",
            "location": 102,
            "return": [],
            "arguments": {
                "source": [],
                "count": []
            }
        },
        "test_get_root_proc": {
            "name": "test_get_root_proc",
            "location": 152,
            "return": [],
            "arguments": {
                "source": [],
                "first_proc": [
                    "dict"
                ]
            }
        },
        "test_very_nested": {
            "name": "test_very_nested",
            "location": 204,
            "return": [],
            "arguments": {
                "source": [],
                "nested_proc": [
                    "dict"
                ]
            }
        },
        "test_basic_file_operations": {
            "name": "test_basic_file_operations",
            "location": 263,
            "return": [],
            "arguments": {
                "source": [],
                "file_entry": [
                    "dict"
                ]
            }
        },
        "test_complex_file_events": {
            "name": "test_complex_file_events",
            "location": 307,
            "return": [],
            "arguments": {
                "source": [],
                "file_entry": [
                    "dict"
                ]
            }
        },
        "test_network_events": {
            "name": "test_network_events",
            "location": 380,
            "return": [],
            "arguments": {
                "source": [],
                "network_event": [
                    "dict"
                ]
            }
        },
        "test_basic_registry": {
            "name": "test_basic_registry",
            "location": 417,
            "return": [],
            "arguments": {
                "source": [],
                "reg_event": [
                    "dict"
                ]
            }
        },
        "test_complex_registry_events": {
            "name": "test_complex_registry_events",
            "location": 442,
            "return": [],
            "arguments": {
                "source": [],
                "reg_event": [
                    "dict"
                ]
            }
        },
        "test_metadata": {
            "name": "test_metadata",
            "location": 448,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/datasources/virustotal/__init__.py": {},
    "beagle-master/tests/edges/test_edge.py": {
        "make_edge_obj": {
            "name": "make_edge_obj",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_edge_class": {
            "name": "test_edge_class",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_multiple_appends": {
            "name": "test_multiple_appends",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_invalid_keys_error": {
            "name": "test_invalid_keys_error",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_invalid_keys_error_add": {
            "name": "test_invalid_keys_error_add",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_display": {
            "name": "test_display",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "make_edge_obj.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/tests/nodes/test_alert.py": {
        "test_create_alert": {
            "name": "test_create_alert",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_alerted_on": {
            "name": "test_alerted_on",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/nodes/test_domain.py": {
        "test_create_dom": {
            "name": "test_create_dom",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_create_uri": {
            "name": "test_create_uri",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_uri_of": {
            "name": "test_uri_of",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/nodes/test_file.py": {
        "test_create": {
            "name": "test_create",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_equals": {
            "name": "test_equals",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_set_extension": {
            "name": "test_set_extension",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_set_full_path": {
            "name": "test_set_full_path",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_explicit_full_path_overrides": {
            "name": "test_explicit_full_path_overrides",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_file_of": {
            "name": "test_file_of",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_not_file_of": {
            "name": "test_not_file_of",
            "location": 47,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/nodes/test_node.py": {
        "testNoKeyFields": {
            "name": "testNoKeyFields",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "testEquals": {
            "name": "testEquals",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_tojson": {
            "name": "test_tojson",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "testNotEquals": {
            "name": "testNotEquals",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "testNotEqualsTwoClasses": {
            "name": "testNotEqualsTwoClasses",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "testHash": {
            "name": "testHash",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "testMergeRejectsUnequalNodes": {
            "name": "testMergeRejectsUnequalNodes",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "testMergeNoEdges": {
            "name": "testMergeNoEdges",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "testMergesEdgesAdded": {
            "name": "testMergesEdgesAdded",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "testMergesMultipleEdges": {
            "name": "testMergesMultipleEdges",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "DummyEdge.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyNode.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ],
                "z": [
                    "int"
                ]
            }
        },
        "DummyNode._display": {
            "name": "_display",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "testEquals.AnnotatedNode.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "testEquals.AnnotatedNode._display": {
            "name": "_display",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_tojson.AnnotatedNode.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_tojson.AnnotatedNode._display": {
            "name": "_display",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "testNotEquals.AnnotatedNode.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "testNotEquals.AnnotatedNode._display": {
            "name": "_display",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "testNotEqualsTwoClasses.AnnotatedNode.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "testNotEqualsTwoClasses.AnnotatedNode._display": {
            "name": "_display",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "testNotEqualsTwoClasses.OtherAnnotatedNode.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "testNotEqualsTwoClasses.OtherAnnotatedNode._display": {
            "name": "_display",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "testHash.AnnotatedNode.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "testHash.AnnotatedNode._display": {
            "name": "_display",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "testNoKeyFields.AnnotatedNode.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "testNoKeyFields.AnnotatedNode._display": {
            "name": "_display",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beagle-master/tests/nodes/test_process.py": {
        "testCreate": {
            "name": "testCreate",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "testEquals": {
            "name": "testEquals",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "testEqualsMoreFields": {
            "name": "testEqualsMoreFields",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "testNotEquals": {
            "name": "testNotEquals",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "testLaunchedAdd": {
            "name": "testLaunchedAdd",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "testLaunchedKeyValues": {
            "name": "testLaunchedKeyValues",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "testLaunchedMultipleProces": {
            "name": "testLaunchedMultipleProces",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/nodes/__init__.py": {},
    "beagle-master/tests/transformers/test_darpa_tc_transformer.py": {
        "transformer": {
            "name": "transformer",
            "location": 8,
            "return": [
                "DRAPATCTransformer"
            ],
            "arguments": {}
        },
        "test_unknown_event": {
            "name": "test_unknown_event",
            "location": 12,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_process": {
            "name": "test_make_process",
            "location": 16,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_process_no_cmdline": {
            "name": "test_make_process_no_cmdline",
            "location": 50,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_process_no_properties": {
            "name": "test_make_process_no_properties",
            "location": 84,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_process_no_parent": {
            "name": "test_make_process_no_parent",
            "location": 116,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_file": {
            "name": "test_make_file",
            "location": 140,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_file_no_properties": {
            "name": "test_make_file_no_properties",
            "location": 181,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_registry": {
            "name": "test_make_registry",
            "location": 211,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_addr": {
            "name": "test_make_addr",
            "location": 247,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_file_events": {
            "name": "test_file_events",
            "location": 285,
            "return": [],
            "arguments": {
                "transformer": [],
                "eventtype": [],
                "edgeattr": []
            }
        },
        "test_launch": {
            "name": "test_launch",
            "location": 318,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_connect": {
            "name": "test_connect",
            "location": 350,
            "return": [],
            "arguments": {
                "transformer": []
            }
        }
    },
    "beagle-master/tests/transformers/test_fireeye_ax_transformer.py": {
        "transformer": {
            "name": "transformer",
            "location": 10,
            "return": [
                "FireEyeAXTransformer"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_not_started": {
            "name": "test_not_started",
            "location": 18,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_process": {
            "name": "test_process",
            "location": 22,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_dns_event_noanswer": {
            "name": "test_dns_event_noanswer",
            "location": 67,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_dns_event_answer": {
            "name": "test_dns_event_answer",
            "location": 100,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_conn_event": {
            "name": "test_conn_event",
            "location": 137,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_http_request": {
            "name": "test_http_request",
            "location": 171,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_http_request_no_headers": {
            "name": "test_http_request_no_headers",
            "location": 212,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_http_request_no_hostin_headers": {
            "name": "test_http_request_no_hostin_headers",
            "location": 246,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_file_events": {
            "name": "test_file_events",
            "location": 288,
            "return": [],
            "arguments": {
                "transformer": [],
                "mode": [],
                "edge": []
            }
        },
        "test_file_copy_events": {
            "name": "test_file_copy_events",
            "location": 325,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_reg_key_no_value": {
            "name": "test_reg_key_no_value",
            "location": 366,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_reg_key_value": {
            "name": "test_reg_key_value",
            "location": 401,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_reg_key_edge_types": {
            "name": "test_reg_key_edge_types",
            "location": 439,
            "return": [],
            "arguments": {
                "transformer": [],
                "mode": [],
                "edge": []
            }
        }
    },
    "beagle-master/tests/transformers/test_fireeye_hx_transformer.py": {
        "test_process_event_start_with_parent": {
            "name": "test_process_event_start_with_parent",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_process_event_start_without": {
            "name": "test_process_event_start_without",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_process_event_not_start": {
            "name": "test_process_event_not_start",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_file_event": {
            "name": "test_file_event",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_file_event_invalid_types": {
            "name": "test_file_event_invalid_types",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_file_event_no_drive": {
            "name": "test_file_event_no_drive",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_url_event_with_ip": {
            "name": "test_url_event_with_ip",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "test_network_event": {
            "name": "test_network_event",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "test_dns_lookup": {
            "name": "test_dns_lookup",
            "location": 290,
            "return": [],
            "arguments": {}
        },
        "test_module_load": {
            "name": "test_module_load",
            "location": 322,
            "return": [],
            "arguments": {}
        },
        "test_no_process_path": {
            "name": "test_no_process_path",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_process_equal_processpath": {
            "name": "test_process_equal_processpath",
            "location": 378,
            "return": [],
            "arguments": {}
        },
        "test_registry_event": {
            "name": "test_registry_event",
            "location": 401,
            "return": [],
            "arguments": {
                "eventtype": [],
                "attribute": []
            }
        },
        "test_alert_creation": {
            "name": "test_alert_creation",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "test_alert_creation_uri_only": {
            "name": "test_alert_creation_uri_only",
            "location": 551,
            "return": [],
            "arguments": {}
        }
    },
    "beagle-master/tests/transformers/test_generic_transformer.py": {
        "transformer": {
            "name": "transformer",
            "location": 9,
            "return": [
                "GenericTransformer"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_make_process": {
            "name": "test_make_process",
            "location": 17,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_process_no_timestamp": {
            "name": "test_make_process_no_timestamp",
            "location": 59,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_file": {
            "name": "test_make_file",
            "location": 93,
            "return": [],
            "arguments": {
                "transformer": [],
                "event_type": [
                    "str"
                ],
                "attribute": [
                    "str"
                ]
            }
        },
        "test_file_copy": {
            "name": "test_file_copy",
            "location": 130,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_connection": {
            "name": "test_connection",
            "location": 165,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_http": {
            "name": "test_make_http",
            "location": 201,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_http_with_ip_address": {
            "name": "test_make_http_with_ip_address",
            "location": 237,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_dnslookup": {
            "name": "test_dnslookup",
            "location": 265,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_dns_lookup_no_addr": {
            "name": "test_dns_lookup_no_addr",
            "location": 304,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_reg_basic": {
            "name": "test_make_reg_basic",
            "location": 325,
            "return": [],
            "arguments": {
                "transformer": [],
                "event_type": [
                    "str"
                ],
                "attribute": [
                    "str"
                ]
            }
        },
        "test_make_reg_set": {
            "name": "test_make_reg_set",
            "location": 364,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_reg_set_no_value": {
            "name": "test_make_reg_set_no_value",
            "location": 406,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_make_alert": {
            "name": "test_make_alert",
            "location": 445,
            "return": [],
            "arguments": {
                "transformer": []
            }
        }
    },
    "beagle-master/tests/transformers/test_pcap_transformer.py": {
        "transformer": {
            "name": "transformer",
            "location": 8,
            "return": [
                "PCAPTransformer"
            ],
            "arguments": {}
        },
        "test_expected_none": {
            "name": "test_expected_none",
            "location": 24,
            "return": [],
            "arguments": {
                "transformer": [],
                "event": []
            }
        },
        "test_basic_connection": {
            "name": "test_basic_connection",
            "location": 32,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_http_request": {
            "name": "test_http_request",
            "location": 58,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_dns_request_one_resp": {
            "name": "test_dns_request_one_resp",
            "location": 95,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_dns_request_no_resp": {
            "name": "test_dns_request_no_resp",
            "location": 132,
            "return": [],
            "arguments": {
                "transformer": []
            }
        }
    },
    "beagle-master/tests/transformers/test_procmon_transformer.py": {
        "transformer": {
            "name": "transformer",
            "location": 23,
            "return": [
                "ProcmonTransformer"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 27,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_process_created": {
            "name": "test_process_created",
            "location": 31,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_write_file": {
            "name": "test_write_file",
            "location": 59,
            "return": [],
            "arguments": {
                "transformer": [],
                "event_type": []
            }
        },
        "test_access_file": {
            "name": "test_access_file",
            "location": 78,
            "return": [],
            "arguments": {
                "transformer": [],
                "event_type": []
            }
        },
        "test_regopenkey": {
            "name": "test_regopenkey",
            "location": 99,
            "return": [],
            "arguments": {
                "event_type": [],
                "transformer": []
            }
        },
        "test_connectin": {
            "name": "test_connectin",
            "location": 123,
            "return": [],
            "arguments": {
                "event_type": [],
                "transformer": []
            }
        }
    },
    "beagle-master/tests/transformers/test_sysmon_transformer.py": {
        "transformer": {
            "name": "transformer",
            "location": 8,
            "return": [
                "SysmonTransformer"
            ],
            "arguments": {}
        },
        "test_dns_event": {
            "name": "test_dns_event",
            "location": 12,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_process_creation": {
            "name": "test_process_creation",
            "location": 58,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_network_connection_no_hostname": {
            "name": "test_network_connection_no_hostname",
            "location": 115,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_network_connection_with_hostname": {
            "name": "test_network_connection_with_hostname",
            "location": 168,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_filecreate_event": {
            "name": "test_filecreate_event",
            "location": 225,
            "return": [],
            "arguments": {
                "transformer": []
            }
        },
        "test_registry": {
            "name": "test_registry",
            "location": 276,
            "return": [],
            "arguments": {
                "transformer": [],
                "event_type": [],
                "edge_type": []
            }
        }
    },
    "beagle-master/tests/transformers/test_winevtx_transformer.py": {
        "transformer": {
            "name": "transformer",
            "location": 8,
            "return": [
                "WinEVTXTransformer"
            ],
            "arguments": {}
        },
        "test_process_creation": {
            "name": "test_process_creation",
            "location": 12,
            "return": [],
            "arguments": {
                "transformer": []
            }
        }
    },
    "beagle-master/tests/transformers/__init__.py": {},
    "beagle-master/tests/web/__init__.py": {},
    "beagle-master/tests/web/api/test_models.py": {
        "test_make_graph": {
            "name": "test_make_graph",
            "location": 4,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "beagle-master/tests/web/api/test_views.py": {
        "test_no_params": {
            "name": "test_no_params",
            "location": 12,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_non_real_datasource": {
            "name": "test_non_real_datasource",
            "location": 17,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_missing_params": {
            "name": "test_missing_params",
            "location": 26,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_new_networkx": {
            "name": "test_new_networkx",
            "location": 39,
            "return": [],
            "arguments": {
                "validate_mock": [],
                "setup_mock": [],
                "create_mock": [],
                "save_mock": [],
                "client": []
            }
        },
        "test_new_non_networkx": {
            "name": "test_new_non_networkx",
            "location": 66,
            "return": [],
            "arguments": {
                "validate_mock": [],
                "setup_mock": [],
                "create_mock": [],
                "save_mock": [],
                "client": []
            }
        },
        "test_new_networkx_create_fails": {
            "name": "test_new_networkx_create_fails",
            "location": 95,
            "return": [],
            "arguments": {
                "validate_mock": [],
                "setup_mock": [],
                "create_mock": [],
                "save_mock": [],
                "client": []
            }
        },
        "test_add_to_non_existent_graph": {
            "name": "test_add_to_non_existent_graph",
            "location": 121,
            "return": [],
            "arguments": {
                "validate_mock": [],
                "setup_mock": [],
                "create_mock": [],
                "save_mock": [],
                "client": [],
                "session": []
            }
        },
        "test_add_non_networkx_fails": {
            "name": "test_add_non_networkx_fails",
            "location": 136,
            "return": [],
            "arguments": {
                "validate_mock": [],
                "setup_mock": [],
                "create_mock": [],
                "save_mock": [],
                "client": [],
                "session": []
            }
        },
        "test_add_non_invalid_params": {
            "name": "test_add_non_invalid_params",
            "location": 164,
            "return": [],
            "arguments": {
                "validate_mock": [],
                "setup_mock": [],
                "create_mock": [],
                "save_mock": [],
                "client": [],
                "session": []
            }
        },
        "test_adhoc_single_event": {
            "name": "test_adhoc_single_event",
            "location": 180,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_adhoc_invalid_cim_format": {
            "name": "test_adhoc_invalid_cim_format",
            "location": 200,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_events_forced_to_be_list": {
            "name": "test_events_forced_to_be_list",
            "location": 218,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_adhoc_array": {
            "name": "test_adhoc_array",
            "location": 238,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_get_graph_metadata": {
            "name": "test_get_graph_metadata",
            "location": 272,
            "return": [],
            "arguments": {
                "session": [],
                "client": []
            }
        },
        "test_get_graph_metadata_graph_not_found": {
            "name": "test_get_graph_metadata_graph_not_found",
            "location": 287,
            "return": [],
            "arguments": {
                "session": [],
                "client": []
            }
        },
        "test_get_categories_only_uploaded": {
            "name": "test_get_categories_only_uploaded",
            "location": 303,
            "return": [],
            "arguments": {
                "session": [],
                "client": []
            }
        },
        "test_validate_params": {
            "name": "test_validate_params",
            "location": 379,
            "return": [],
            "arguments": {
                "form_input": [],
                "file_input": [],
                "success": []
            }
        }
    },
    "beagle-master/tests/web/api/__init__.py": {}
}
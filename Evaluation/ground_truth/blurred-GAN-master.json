{
    "blurred-GAN-master/blurred_gan.py": {
        "BlurredVariant": {
            "name": "BlurredVariant",
            "location": 17,
            "return": [],
            "arguments": {
                "some_gan_base_class": []
            }
        },
        "BlurredVariant.BlurredGAN.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [
                    "tf.keras.Model"
                ],
                "discriminator": [
                    "tf.keras.Model"
                ],
                "hyperparams": [
                    "HyperParameters"
                ],
                "config": [
                    "TrainingConfig"
                ]
            }
        },
        "BlurredVariant.BlurredGAN.std": {
            "name": "std",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlurredVariant.BlurredGAN.discriminator_step": {
            "name": "discriminator_step",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "reals": []
            }
        }
    },
    "blurred-GAN-master/callbacks.py": {
        "ExecuteEveryNExamplesCallback.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "starting_from": [
                    "int"
                ]
            }
        },
        "ExecuteEveryNExamplesCallback.on_batch_end": {
            "name": "on_batch_end",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "logs": [
                    "Dict"
                ]
            }
        },
        "ExecuteEveryNExamplesCallback.function": {
            "name": "function",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "logs": []
            }
        },
        "BlurDecayController.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "total_n_training_examples": [
                    "int"
                ],
                "max_value": [
                    "float"
                ],
                "min_value": []
            }
        },
        "BlurDecayController.on_batch_begin": {
            "name": "on_batch_begin",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "logs": []
            }
        },
        "AdaptiveBlurController.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "smoothing": [],
                "warmup_n_batches": [],
                "threshold": [],
                "min_value": [],
                "max_value": []
            }
        },
        "AdaptiveBlurController.on_train_begin": {
            "name": "on_train_begin",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "AdaptiveBlurController.gan_problem_is_stable": {
            "name": "gan_problem_is_stable",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdaptiveBlurController.decrease_blur_std": {
            "name": "decrease_blur_std",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int"
                ]
            }
        },
        "AdaptiveBlurController.on_batch_end": {
            "name": "on_batch_end",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "logs": []
            }
        },
        "FeedImagesToMetricCallback.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "metric": [],
                "image_preprocessing_fn": [],
                "num_samples": [],
                "every_n_examples": []
            }
        },
        "FeedImagesToMetricCallback.function": {
            "name": "function",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "logs": []
            }
        },
        "FeedImagesToMetricCallback.on_batch_end": {
            "name": "on_batch_end",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [
                    "int"
                ],
                "logs": [
                    "Dict"
                ]
            }
        },
        "FeedImagesToMetricCallback.write_result": {
            "name": "write_result",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SWDMetricCallback.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "image_preprocessing_fn": [],
                "num_samples": [],
                "every_n_examples": []
            }
        },
        "SWDMetricCallback.write_result": {
            "name": "write_result",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FIDMetricCallback.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "image_preprocessing_fn": [],
                "num_samples": [],
                "every_n_examples": []
            }
        },
        "GenerateSampleGridCallback.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "log_dir": [
                    "str"
                ],
                "show_blurred_samples": [],
                "every_n_examples": [],
                "also_save_files": []
            }
        },
        "GenerateSampleGridCallback.function": {
            "name": "function",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "logs": []
            }
        },
        "GenerateSampleGridCallback.on_train_begin": {
            "name": "on_train_begin",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "logs": [
                    "Dict"
                ]
            }
        },
        "GenerateSampleGridCallback.make_grid": {
            "name": "make_grid",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SaveModelCallback.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint_manager": [
                    "tf.train.CheckpointManager"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "SaveModelCallback.function": {
            "name": "function",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "logs": []
            }
        },
        "LogMetricsCallback.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "every_n_examples": [
                    "int"
                ]
            }
        },
        "LogMetricsCallback.on_train_begin": {
            "name": "on_train_begin",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "LogMetricsCallback.function": {
            "name": "function",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [
                    "int"
                ],
                "logs": [
                    "Dict"
                ]
            }
        },
        "LogMetricsCallback.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [
                    "int"
                ],
                "logs": [
                    "Dict"
                ]
            }
        },
        "LogMetricsCallback.write_metric_summaries": {
            "name": "write_metric_summaries",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "logs": [
                    "Dict"
                ],
                "prefix": [],
                "flush": []
            }
        }
    },
    "blurred-GAN-master/demo_celeba.py": {
        "make_dataset": {
            "name": "make_dataset",
            "location": 15,
            "return": [
                "tf.data.Dataset"
            ],
            "arguments": {
                "shuffle_buffer_size": []
            }
        },
        "make_dataset.take_image": {
            "name": "take_image",
            "location": 19,
            "return": [],
            "arguments": {
                "example": []
            }
        },
        "make_dataset.normalize": {
            "name": "normalize",
            "location": 23,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "make_dataset.resize_image": {
            "name": "resize_image",
            "location": 27,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "make_dataset.preprocess_images": {
            "name": "preprocess_images",
            "location": 32,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "DCGANGenerator.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "latent_size": []
            }
        },
        "DCGANDiscriminator.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blurred-GAN-master/demo_mnist.py": {
        "make_dataset": {
            "name": "make_dataset",
            "location": 17,
            "return": [
                "tf.data.Dataset"
            ],
            "arguments": {
                "shuffle_buffer_size": []
            }
        },
        "make_dataset.take_image": {
            "name": "take_image",
            "location": 21,
            "return": [],
            "arguments": {
                "example": []
            }
        },
        "make_dataset.convert_to_float": {
            "name": "convert_to_float",
            "location": 25,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "make_dataset.preprocess_images": {
            "name": "preprocess_images",
            "location": 29,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "DCGANGenerator.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "latent_size": []
            }
        },
        "DCGANDiscriminator.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blurred-GAN-master/gaussian_blur.py": {
        "maximum_reasonable_std": {
            "name": "maximum_reasonable_std",
            "location": 15,
            "return": [
                "float"
            ],
            "arguments": {
                "image_resolution": [
                    "int"
                ]
            }
        },
        "appropriate_kernel_size": {
            "name": "appropriate_kernel_size",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "std": [
                    "float"
                ]
            }
        },
        "appropriate_std": {
            "name": "appropriate_std",
            "location": 29,
            "return": [],
            "arguments": {
                "kernel_size": []
            }
        },
        "get_data_format": {
            "name": "get_data_format",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "image": []
            }
        },
        "get_image_dims": {
            "name": "get_image_dims",
            "location": 42,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "blur_images": {
            "name": "blur_images",
            "location": 50,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "images": [
                    "tf.Tensor"
                ],
                "scale": [
                    "float"
                ]
            }
        },
        "gaussian_kernel_1d": {
            "name": "gaussian_kernel_1d",
            "location": 83,
            "return": [],
            "arguments": {
                "std": [],
                "kernel_size": []
            }
        },
        "gaussian_blur": {
            "name": "gaussian_blur",
            "location": 92,
            "return": [],
            "arguments": {
                "image": [],
                "std": [
                    "float"
                ],
                "kernel_size": [
                    "int"
                ]
            }
        },
        "GaussianBlur2D.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "initial_std": []
            }
        },
        "GaussianBlur2D.call": {
            "name": "call",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "image": [
                    "tf.Tensor"
                ]
            }
        }
    },
    "blurred-GAN-master/metrics.py": {
        "calculate_fid": {
            "name": "calculate_fid",
            "location": 17,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "y": [
                    "np.ndarray"
                ]
            }
        },
        "covariance": {
            "name": "covariance",
            "location": 31,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "calculate_fid_safe": {
            "name": "calculate_fid_safe",
            "location": 42,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "act1": [
                    "np.ndarray"
                ],
                "act2": [
                    "np.ndarray"
                ],
                "epsilon": []
            }
        },
        "evaluate_fid": {
            "name": "evaluate_fid",
            "location": 78,
            "return": [],
            "arguments": {
                "reals": [
                    "np.ndarray"
                ],
                "fakes": [
                    "np.ndarray"
                ],
                "feature_extractor": [
                    "tf.keras.Model"
                ],
                "batch_size": []
            }
        },
        "SWDMetric.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dtype": []
            }
        },
        "SWDMetric.get_metric_names": {
            "name": "get_metric_names",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SWDMetric.get_metric_formatting": {
            "name": "get_metric_formatting",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SWDMetric.reset_states": {
            "name": "reset_states",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SWDMetric.update_state": {
            "name": "update_state",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "real_minibatch": [],
                "fake_minibatch": []
            }
        },
        "SWDMetric.results": {
            "name": "results",
            "location": 136,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SWDMetric.result": {
            "name": "result",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FIDMetric.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FIDMetric.update_state": {
            "name": "update_state",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "real_minibatch": [],
                "fake_minibatch": []
            }
        },
        "FIDMetric.reset_states": {
            "name": "reset_states",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FIDMetric.result": {
            "name": "result",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blurred-GAN-master/sliced_wasserstein.py": {
        "get_descriptors_for_minibatch": {
            "name": "get_descriptors_for_minibatch",
            "location": 13,
            "return": [],
            "arguments": {
                "minibatch": [],
                "nhood_size": [],
                "nhoods_per_image": []
            }
        },
        "finalize_descriptors": {
            "name": "finalize_descriptors",
            "location": 27,
            "return": [],
            "arguments": {
                "desc": []
            }
        },
        "sliced_wasserstein": {
            "name": "sliced_wasserstein",
            "location": 38,
            "return": [],
            "arguments": {
                "A": [],
                "B": [],
                "dir_repeats": [],
                "dirs_per_repeat": []
            }
        },
        "downscale_minibatch": {
            "name": "downscale_minibatch",
            "location": 55,
            "return": [],
            "arguments": {
                "minibatch": [],
                "lod": []
            }
        },
        "pyr_down": {
            "name": "pyr_down",
            "location": 72,
            "return": [],
            "arguments": {
                "minibatch": []
            }
        },
        "pyr_up": {
            "name": "pyr_up",
            "location": 76,
            "return": [],
            "arguments": {
                "minibatch": []
            }
        },
        "generate_laplacian_pyramid": {
            "name": "generate_laplacian_pyramid",
            "location": 83,
            "return": [],
            "arguments": {
                "minibatch": [],
                "num_levels": []
            }
        },
        "reconstruct_laplacian_pyramid": {
            "name": "reconstruct_laplacian_pyramid",
            "location": 90,
            "return": [],
            "arguments": {
                "pyramid": []
            }
        },
        "API.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "image_shape": []
            }
        },
        "API.get_metric_names": {
            "name": "get_metric_names",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "API.get_metric_formatting": {
            "name": "get_metric_formatting",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "API.begin": {
            "name": "begin",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "API.feed": {
            "name": "feed",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [],
                "minibatch": []
            }
        },
        "API.end": {
            "name": "end",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        }
    },
    "blurred-GAN-master/utils.py": {
        "create_result_subdir": {
            "name": "create_result_subdir",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "result_dir": [
                    "str"
                ],
                "run_name": [
                    "str"
                ]
            }
        },
        "run_id": {
            "name": "run_id",
            "location": 27,
            "return": [],
            "arguments": {
                "path_string": []
            }
        },
        "epoch": {
            "name": "epoch",
            "location": 31,
            "return": [],
            "arguments": {
                "path_string": []
            }
        },
        "locate_model_file": {
            "name": "locate_model_file",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "result_dir": [
                    "str"
                ],
                "run_name": [
                    "str"
                ],
                "suffix": []
            }
        },
        "normalize_images": {
            "name": "normalize_images",
            "location": 51,
            "return": [],
            "arguments": {
                "images": []
            }
        },
        "plot_to_image": {
            "name": "plot_to_image",
            "location": 55,
            "return": [],
            "arguments": {
                "figure": []
            }
        },
        "samples_grid": {
            "name": "samples_grid",
            "location": 73,
            "return": [],
            "arguments": {
                "samples": []
            }
        },
        "NHWC_to_NCHW": {
            "name": "NHWC_to_NCHW",
            "location": 91,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "image": [
                    "tf.Tensor"
                ]
            }
        },
        "NCHW_to_NHWC": {
            "name": "NCHW_to_NHWC",
            "location": 95,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "image": [
                    "tf.Tensor"
                ]
            }
        },
        "to_dataset": {
            "name": "to_dataset",
            "location": 99,
            "return": [
                "tf.data.Dataset"
            ],
            "arguments": {
                "t": [
                    "Union[(tf.Tensor, np.ndarray, tf.data.Dataset)]"
                ]
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 106,
            "return": [
                "Dict"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "JsonSerializable.asdict": {
            "name": "asdict",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonSerializable.save_json": {
            "name": "save_json",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "JsonSerializable.from_json": {
            "name": "from_json",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "HyperParams.__setattr__": {
            "name": "__setattr__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HyperParams.__repr__": {
            "name": "__repr__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperParams.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blurred-GAN-master/wgan.py": {
        "gradient_penalty": {
            "name": "gradient_penalty",
            "location": 235,
            "return": [],
            "arguments": {
                "discriminator": [],
                "reals": [],
                "fakes": []
            }
        },
        "WGAN.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [
                    "tf.keras.Model"
                ],
                "discriminator": [
                    "tf.keras.Model"
                ],
                "hyperparams": [
                    "HyperParameters"
                ],
                "config": [
                    "TrainingConfig"
                ]
            }
        },
        "WGAN.train_on_batch": {
            "name": "train_on_batch",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "reals": []
            }
        },
        "WGAN.latents_batch": {
            "name": "latents_batch",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WGAN.generate_samples": {
            "name": "generate_samples",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "latents": [],
                "training": []
            }
        },
        "WGAN.discriminator_loss": {
            "name": "discriminator_loss",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "reals": [],
                "fakes": [],
                "real_scores": [],
                "fake_scores": []
            }
        },
        "WGAN.discriminator_step": {
            "name": "discriminator_step",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "reals": []
            }
        },
        "WGAN.generator_loss": {
            "name": "generator_loss",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "fake_scores": []
            }
        },
        "WGAN.generator_step": {
            "name": "generator_step",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WGAN.log_image_summaries": {
            "name": "log_image_summaries",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WGAN._organize_metrics": {
            "name": "_organize_metrics",
            "location": 182,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WGAN.summary": {
            "name": "summary",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WGAN._saving_image_summaries": {
            "name": "_saving_image_summaries",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WGAN.record_image_summaries": {
            "name": "record_image_summaries",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WGAN.count_params": {
            "name": "count_params",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WGAN.save_weights": {
            "name": "save_weights",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [],
                "overwrite": [],
                "save_format": []
            }
        },
        "WGANGP.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [
                    "tf.keras.Model"
                ],
                "discriminator": [
                    "tf.keras.Model"
                ],
                "hyperparams": [
                    "HyperParameters"
                ],
                "config": [
                    "TrainingConfig"
                ]
            }
        },
        "WGANGP.discriminator_loss": {
            "name": "discriminator_loss",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "reals": [],
                "fakes": [],
                "real_scores": [],
                "fake_scores": []
            }
        },
        "WGAN._organize_metrics.get_metric_with_name": {
            "name": "get_metric_with_name",
            "location": 192,
            "return": [
                "tf.keras.metrics.Metric"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "blurred-GAN-master/pytorch/gaussianblur.py": {
        "gaussian_kernel_1d": {
            "name": "gaussian_kernel_1d",
            "location": 9,
            "return": [
                "torch.FloatTensor"
            ],
            "arguments": {
                "std": [
                    "float"
                ],
                "kernel_size": [
                    "int"
                ]
            }
        },
        "nearest_odd_integer": {
            "name": "nearest_odd_integer",
            "location": 17,
            "return": [],
            "arguments": {
                "number": [],
                "higher": []
            }
        },
        "appropriate_kernel_size": {
            "name": "appropriate_kernel_size",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "std": [
                    "float"
                ]
            }
        },
        "GaussianBlur.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "std": []
            }
        },
        "GaussianBlur.kernel": {
            "name": "kernel",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GaussianBlur.kernel_size": {
            "name": "kernel_size",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianBlur.forward": {
            "name": "forward",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "blurred-GAN-master/pytorch/main.py": {}
}
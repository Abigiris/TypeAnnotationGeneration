{
    "boehm-berarducci-master/python/setup.py": {},
    "boehm-berarducci-master/python/boehmberarducci/either.py": {
        "left": {
            "name": "left",
            "location": 36,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "right": {
            "name": "right",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Either.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "either": []
            }
        },
        "Either.__call__": {
            "name": "__call__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "Either.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Either.__rshift__": {
            "name": "__rshift__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Either.__mul__": {
            "name": "__mul__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "eithers": []
            }
        },
        "Either.__rand__": {
            "name": "__rand__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Either.map": {
            "name": "map",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Either.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Either.__repr__.make_repr": {
            "name": "make_repr",
            "location": 14,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "boehm-berarducci-master/python/boehmberarducci/free.py": {
        "pure": {
            "name": "pure",
            "location": 39,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "free": {
            "name": "free",
            "location": 43,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "liftF": {
            "name": "liftF",
            "location": 49,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "Free.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "unfree": []
            }
        },
        "Free.__eq__": {
            "name": "__eq__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Free.__repr__": {
            "name": "__repr__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Free.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "pureF": [],
                "freeF": []
            }
        },
        "Free.__rshift__": {
            "name": "__rshift__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Free.__rmul__": {
            "name": "__rmul__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "xs": []
            }
        },
        "Free.__rand__": {
            "name": "__rand__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Free.map": {
            "name": "map",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Free.join": {
            "name": "join",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Free.iter": {
            "name": "iter",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Free.interpret": {
            "name": "interpret",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "free.unfree": {
            "name": "unfree",
            "location": 44,
            "return": [],
            "arguments": {
                "pureF": [],
                "freeF": []
            }
        }
    },
    "boehm-berarducci-master/python/boehmberarducci/functional_base.py": {
        "compose": {
            "name": "compose",
            "location": 1,
            "return": [],
            "arguments": {
                "g": [],
                "f": []
            }
        },
        "const": {
            "name": "const",
            "location": 7,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compose.wrap": {
            "name": "wrap",
            "location": 2,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "const.wrap": {
            "name": "wrap",
            "location": 8,
            "return": [],
            "arguments": {
                "y": []
            }
        }
    },
    "boehm-berarducci-master/python/boehmberarducci/maybe.py": {
        "just": {
            "name": "just",
            "location": 41,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Maybe.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "nothing": [
                    "R@@"
                ],
                "just": [
                    "Callable[([A], R)]"
                ]
            }
        },
        "Maybe.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Maybe.__rshift__": {
            "name": "__rshift__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Maybe.__mul__": {
            "name": "__mul__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "justs": []
            }
        },
        "Maybe.__rand__": {
            "name": "__rand__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[([A], B)]"
                ]
            }
        },
        "Maybe.map": {
            "name": "map",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[([A], B)]"
                ]
            }
        },
        "Maybe.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Maybe[A]'"
                ]
            }
        },
        "Maybe.__eq__.is_equal_just": {
            "name": "is_equal_just",
            "location": 34,
            "return": [],
            "arguments": {
                "j1": []
            }
        }
    },
    "boehm-berarducci-master/python/boehmberarducci/tree.py": {
        "BinaryTree.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": [
                    "R@@"
                ],
                "branch": [
                    "Branch[R]"
                ]
            }
        },
        "BinaryTree.leaf": {
            "name": "leaf",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BinaryTree.branch": {
            "name": "branch",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "left": [],
                "right": []
            }
        },
        "BinaryTree.leaf.leafer": {
            "name": "leafer",
            "location": 16,
            "return": [
                "R@@"
            ],
            "arguments": {
                "leaf": [
                    "R@@"
                ],
                "branch": [
                    "Branch[R]"
                ]
            }
        },
        "BinaryTree.branch.brancher": {
            "name": "brancher",
            "location": 23,
            "return": [
                "R@@"
            ],
            "arguments": {
                "leaf": [
                    "R@@"
                ],
                "branch": [
                    "Branch[R]"
                ]
            }
        }
    },
    "boehm-berarducci-master/python/boehmberarducci/__init__.py": {},
    "boehm-berarducci-master/python/tests/test_either.py": {
        "TestLeft.test_left_map": {
            "name": "test_left_map",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLeft.test_left_bind": {
            "name": "test_left_bind",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLeft.test_left_over_left": {
            "name": "test_left_over_left",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLeft.test_left_over_right": {
            "name": "test_left_over_right",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLeft.test_left_show": {
            "name": "test_left_show",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLeft.test_left_equal": {
            "name": "test_left_equal",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRight.test_right_map": {
            "name": "test_right_map",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRight.test_right_bind": {
            "name": "test_right_bind",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRight.test_right_over_right": {
            "name": "test_right_over_right",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRight.test_right_over_left": {
            "name": "test_right_over_left",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRight.test_right_show": {
            "name": "test_right_show",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRight.test_right_equal": {
            "name": "test_right_equal",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "boehm-berarducci-master/python/tests/test_free.py": {
        "TestPure.test_pure_map": {
            "name": "test_pure_map",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "boehm-berarducci-master/python/tests/test_maybe.py": {
        "TestNothing.test_nothing_map": {
            "name": "test_nothing_map",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNothing.test_nothing_bind": {
            "name": "test_nothing_bind",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNothing.test_nothing_over_nothing": {
            "name": "test_nothing_over_nothing",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNothing.test_nothing_over_just": {
            "name": "test_nothing_over_just",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNothing.test_nothing_show": {
            "name": "test_nothing_show",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNothing.test_nothing_equal": {
            "name": "test_nothing_equal",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJust.test_just_map": {
            "name": "test_just_map",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJust.test_just_bind": {
            "name": "test_just_bind",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJust.test_just_over_just": {
            "name": "test_just_over_just",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJust.test_just_over_nothing": {
            "name": "test_just_over_nothing",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJust.test_just_show": {
            "name": "test_just_show",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJust.test_just_equal": {
            "name": "test_just_equal",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "boehm-berarducci-master/python/tests/__init__.py": {}
}
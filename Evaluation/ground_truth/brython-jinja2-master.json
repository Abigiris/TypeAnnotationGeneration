{
    "brython-jinja2-master/manage.py": {
        "ping": {
            "name": "ping",
            "location": 10,
            "return": [],
            "arguments": {
                "txt": []
            }
        }
    },
    "brython-jinja2-master/setup.py": {},
    "brython-jinja2-master/snippets.py": {
        "dp": {
            "name": "dp",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidSyntax.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "src": [],
                "pos": []
            }
        },
        "InvalidSyntax.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/doc/en/conf.py": {
        "setup": {
            "name": "setup",
            "location": 331,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "brython-jinja2-master/management/doc.py": {
        "build": {
            "name": "build",
            "location": 15,
            "return": [],
            "arguments": {
                "format": []
            }
        },
        "view": {
            "name": "view",
            "location": 25,
            "return": [],
            "arguments": {
                "port": []
            }
        }
    },
    "brython-jinja2-master/management/test.py": {
        "devserver": {
            "name": "devserver",
            "location": 14,
            "return": [],
            "arguments": {
                "port": []
            }
        },
        "run": {
            "name": "run",
            "location": 20,
            "return": [],
            "arguments": {
                "tests": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 34,
            "return": [],
            "arguments": {
                "report": []
            }
        },
        "check": {
            "name": "check",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "brython-jinja2-master/management/utils.py": {
        "M.print_commands": {
            "name": "print_commands",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": [],
                "root": [],
                "indent": []
            }
        },
        "M.command": {
            "name": "command",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "M.command.decorator": {
            "name": "decorator",
            "location": 19,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "M.command.decorator.main": {
            "name": "main",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/management/__init__.py": {},
    "brython-jinja2-master/src/brython_jinja2/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "dct": [],
                "base": []
            }
        },
        "Context.reset": {
            "name": "reset",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "dct": []
            }
        },
        "Context.immutable_attrs": {
            "name": "immutable_attrs",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__iter__": {
            "name": "__iter__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__contains__": {
            "name": "__contains__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Context.__getattr__": {
            "name": "__getattr__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Context.__setattr__": {
            "name": "__setattr__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "val": []
            }
        },
        "Context.__delattr__": {
            "name": "__delattr__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Context.__repr__": {
            "name": "__repr__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context._get": {
            "name": "_get",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Context._set": {
            "name": "_set",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "val": []
            }
        },
        "Context._clear": {
            "name": "_clear",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context._save": {
            "name": "_save",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Context._restore": {
            "name": "_restore",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Context.__setattr__.set_later": {
            "name": "set_later",
            "location": 112,
            "return": [],
            "arguments": {
                "future_val": [],
                "attr": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/defaults.py": {},
    "brython-jinja2-master/src/brython_jinja2/environment.py": {
        "Environment.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "block_start_string": [],
                "block_end_string": [],
                "variable_start_string": [],
                "variable_end_string": [],
                "comment_start_string": [],
                "comment_end_string": [],
                "line_statement_prefix": [],
                "line_comment_prefix": [],
                "trim_blocks": [],
                "lstrip_blocks": [],
                "newline_sequence": [],
                "keep_trailing_newline": [],
                "extensions": [],
                "undefined": [],
                "autoescape": [],
                "loader": []
            }
        },
        "Environment.preprocess": {
            "name": "preprocess",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "name": [],
                "filename": []
            }
        },
        "Environment._tokenize": {
            "name": "_tokenize",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "name": [],
                "filename": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/exceptions.py": {
        "LocatedError.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "src": [],
                "location": []
            }
        },
        "LocatedError.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoSolution.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [],
                "val": [],
                "var": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/expression.py": {
        "token_type": {
            "name": "token_type",
            "location": 77,
            "return": [
                "TokenT"
            ],
            "arguments": {
                "start_chars": [
                    "str"
                ]
            }
        },
        "parse_number": {
            "name": "parse_number",
            "location": 135,
            "return": [
                "Tuple[(float, int)]"
            ],
            "arguments": {
                "expr": [
                    "str"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "parse_string": {
            "name": "parse_string",
            "location": 164,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "expr": [
                    "str"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "parse_identifier": {
            "name": "parse_identifier",
            "location": 196,
            "return": [],
            "arguments": {
                "expr": [
                    "str"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 229,
            "return": [
                "_TokenStream"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "_tokenize": {
            "name": "_tokenize",
            "location": 232,
            "return": [
                "Iterator[Tuple[(TokenT, Any, int)]]"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "simplify": {
            "name": "simplify",
            "location": 1572,
            "return": [
                "ExpNode"
            ],
            "arguments": {
                "exp": [
                    "ExpNode"
                ]
            }
        },
        "partial_eval": {
            "name": "partial_eval",
            "location": 1579,
            "return": [
                "None"
            ],
            "arguments": {
                "arg_stack": [
                    "List[ExpNode]"
                ],
                "op_stack": [],
                "pri": [],
                "src": [],
                "location": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 1599,
            "return": [
                "Tuple[(List[ExpNode], Dict[(str, ExpNode)])]"
            ],
            "arguments": {
                "token_stream": [
                    "_TokenStream"
                ]
            }
        },
        "parse_lst": {
            "name": "parse_lst",
            "location": 1627,
            "return": [
                "Union[(ListComprNode, ListNode)]"
            ],
            "arguments": {
                "token_stream": [
                    "_TokenStream"
                ]
            }
        },
        "parse_slice": {
            "name": "parse_slice",
            "location": 1650,
            "return": [
                "Tuple[(bool, ExpNode, ExpNode, ExpNode)]"
            ],
            "arguments": {
                "token_stream": [
                    "_TokenStream"
                ]
            }
        },
        "my_find": {
            "name": "my_find",
            "location": 1669,
            "return": [],
            "arguments": {
                "haystack": [],
                "needle": [],
                "stop_strs": []
            }
        },
        "parse_interpolated_str": {
            "name": "parse_interpolated_str",
            "location": 1673,
            "return": [],
            "arguments": {
                "tpl_expr": [],
                "start": [],
                "end": [],
                "stop_strs": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 1733,
            "return": [
                "Tuple[(ExpNode, int)]"
            ],
            "arguments": {
                "expr": [
                    "str"
                ],
                "trailing_garbage_ok": [
                    "bool"
                ],
                "use_cache": [
                    "bool"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 1767,
            "return": [
                "Tuple[(ExpNode, Optional[TokenT], int)]"
            ],
            "arguments": {
                "token_stream": [
                    "_TokenStream"
                ],
                "end_tokens": [],
                "trailing_garbage_ok": [],
                "end_token_vals": []
            }
        },
        "_TokenStream.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "_TokenStream.__iter__": {
            "name": "__iter__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TokenStream.__next__": {
            "name": "__next__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TokenStream.send": {
            "name": "send",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ExpNode.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpNode._visit": {
            "name": "_visit",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [],
                "results": []
            }
        },
        "ExpNode.is_const": {
            "name": "is_const",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ExpNode.solve": {
            "name": "solve",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [],
                "x": [
                    "'ExpNode'"
                ]
            }
        },
        "ExpNode.mutable": {
            "name": "mutable",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpNode.simplify": {
            "name": "simplify",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ExpNode.eval": {
            "name": "eval",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "ExpNode.evalctx": {
            "name": "evalctx",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "ExpNode.cache_status": {
            "name": "cache_status",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpNode.value": {
            "name": "value",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "ExpNode._assign": {
            "name": "_assign",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "_val": []
            }
        },
        "ExpNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "Context"
                ]
            }
        },
        "ExpNode.clone": {
            "name": "clone",
            "location": 489,
            "return": [
                "T@@ExpNode@@"
            ],
            "arguments": {
                "self": [
                    "T@@ExpNode@@"
                ]
            }
        },
        "ExpNode.is_function_call": {
            "name": "is_function_call",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpNode.is_assignable": {
            "name": "is_assignable",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpNode._change_handler": {
            "name": "_change_handler",
            "location": 510,
            "return": [],
            "arguments": {
                "self": [],
                "_event": []
            }
        },
        "ExpNode.__repr__": {
            "name": "__repr__",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpNode.equiv": {
            "name": "equiv",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "'ExpNode'"
                ],
                "assume_equal": []
            }
        },
        "ExpNode.contains": {
            "name": "contains",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [
                    "'ExpNode'"
                ]
            }
        },
        "ExpNode.__eq__": {
            "name": "__eq__",
            "location": 533,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConstNode.__init__": {
            "name": "__init__",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[(float, str)]"
                ]
            }
        },
        "ConstNode.is_const": {
            "name": "is_const",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ConstNode.name": {
            "name": "name",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstNode.eval": {
            "name": "eval",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "ConstNode.evalctx": {
            "name": "evalctx",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "ConstNode.clone": {
            "name": "clone",
            "location": 557,
            "return": [
                "'ConstNode'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstNode.__repr__": {
            "name": "__repr__",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstNode.__eq__": {
            "name": "__eq__",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentNode.__init__": {
            "name": "__init__",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ]
            }
        },
        "IdentNode.mutable": {
            "name": "mutable",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentNode.is_const": {
            "name": "is_const",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "IdentNode.solve": {
            "name": "solve",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "x": []
            }
        },
        "IdentNode.simplify": {
            "name": "simplify",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "IdentNode.name": {
            "name": "name",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentNode.clone": {
            "name": "clone",
            "location": 629,
            "return": [
                "'IdentNode'"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "IdentNode.eval": {
            "name": "eval",
            "location": 644,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "IdentNode.evalctx": {
            "name": "evalctx",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "IdentNode._assign": {
            "name": "_assign",
            "location": 665,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IdentNode._context_change": {
            "name": "_context_change",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "IdentNode._value_change": {
            "name": "_value_change",
            "location": 690,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "IdentNode.__repr__": {
            "name": "__repr__",
            "location": 703,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentNode.__eq__": {
            "name": "__eq__",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MultiChildNode.__init__": {
            "name": "__init__",
            "location": 715,
            "return": [],
            "arguments": {
                "self": [],
                "children": []
            }
        },
        "MultiChildNode._visit": {
            "name": "_visit",
            "location": 725,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [],
                "results": []
            }
        },
        "MultiChildNode.is_const": {
            "name": "is_const",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "MultiChildNode.simplify": {
            "name": "simplify",
            "location": 739,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "MultiChildNode.clone": {
            "name": "clone",
            "location": 762,
            "return": [
                "List[ExpNode]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChildNode.eval": {
            "name": "eval",
            "location": 776,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "MultiChildNode.evalctx": {
            "name": "evalctx",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "MultiChildNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 804,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "MultiChildNode._child_changed": {
            "name": "_child_changed",
            "location": 810,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "child_index": []
            }
        },
        "MultiChildNode.contains": {
            "name": "contains",
            "location": 821,
            "return": [],
            "arguments": {
                "self": [],
                "exp": []
            }
        },
        "MultiChildNode.__eq__": {
            "name": "__eq__",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ListNode.__init__": {
            "name": "__init__",
            "location": 841,
            "return": [],
            "arguments": {
                "self": [],
                "lst": []
            }
        },
        "ListNode.clone": {
            "name": "clone",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListNode.simplify": {
            "name": "simplify",
            "location": 852,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ListNode.solve": {
            "name": "solve",
            "location": 859,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "x": []
            }
        },
        "ListNode.__repr__": {
            "name": "__repr__",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsNode.__init__": {
            "name": "__init__",
            "location": 883,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "FuncArgsNode._visit": {
            "name": "_visit",
            "location": 891,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [],
                "results": []
            }
        },
        "FuncArgsNode.clone": {
            "name": "clone",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsNode.is_const": {
            "name": "is_const",
            "location": 903,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "FuncArgsNode.simplify": {
            "name": "simplify",
            "location": 911,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "FuncArgsNode.eval": {
            "name": "eval",
            "location": 928,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "FuncArgsNode.evalctx": {
            "name": "evalctx",
            "location": 941,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "FuncArgsNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "FuncArgsNode._kwarg_change": {
            "name": "_kwarg_change",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "arg": []
            }
        },
        "FuncArgsNode.contains": {
            "name": "contains",
            "location": 964,
            "return": [],
            "arguments": {
                "self": [],
                "exp": []
            }
        },
        "FuncArgsNode.__repr__": {
            "name": "__repr__",
            "location": 972,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgsNode.__eq__": {
            "name": "__eq__",
            "location": 976,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConstFuncArgsNode.__init__": {
            "name": "__init__",
            "location": 989,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "ConstFuncArgsNode.clone": {
            "name": "clone",
            "location": 993,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstFuncArgsNode.is_const": {
            "name": "is_const",
            "location": 996,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ConstFuncArgsNode.eval": {
            "name": "eval",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "ConstFuncArgsNode.evalctx": {
            "name": "evalctx",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "ConstFuncArgsNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ConstFuncArgsNode.__repr__": {
            "name": "__repr__",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstFuncArgsNode.__eq__": {
            "name": "__eq__",
            "location": 1012,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ListSliceNode.__init__": {
            "name": "__init__",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": [],
                "is_slice": [],
                "start": [],
                "end": [],
                "step": []
            }
        },
        "ListSliceNode.simplify": {
            "name": "simplify",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ListSliceNode.clone": {
            "name": "clone",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListSliceNode.eval": {
            "name": "eval",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "ListSliceNode.evalctx": {
            "name": "evalctx",
            "location": 1062,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "ListSliceNode.__repr__": {
            "name": "__repr__",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttrAccessNode.__init__": {
            "name": "__init__",
            "location": 1090,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "attribute": []
            }
        },
        "AttrAccessNode._visit": {
            "name": "_visit",
            "location": 1097,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [],
                "results": []
            }
        },
        "AttrAccessNode.clone": {
            "name": "clone",
            "location": 1101,
            "return": [
                "'AttrAccessNode'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrAccessNode.mutable": {
            "name": "mutable",
            "location": 1105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttrAccessNode.is_const": {
            "name": "is_const",
            "location": 1112,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "AttrAccessNode.simplify": {
            "name": "simplify",
            "location": 1115,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "AttrAccessNode.eval": {
            "name": "eval",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "AttrAccessNode.evalctx": {
            "name": "evalctx",
            "location": 1138,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "AttrAccessNode.solve": {
            "name": "solve",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "x": [
                    "ExpNode"
                ]
            }
        },
        "AttrAccessNode._assign": {
            "name": "_assign",
            "location": 1155,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AttrAccessNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 1164,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "AttrAccessNode._change_attr_handler": {
            "name": "_change_attr_handler",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "AttrAccessNode.contains": {
            "name": "contains",
            "location": 1183,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [
                    "ExpNode"
                ]
            }
        },
        "AttrAccessNode.__repr__": {
            "name": "__repr__",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttrAccessNode.__eq__": {
            "name": "__eq__",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ListComprNode.__init__": {
            "name": "__init__",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "ExpNode"
                ],
                "var": [
                    "IdentNode"
                ],
                "lst": [
                    "ExpNode"
                ],
                "cond": [
                    "ExpNode"
                ]
            }
        },
        "ListComprNode._visit": {
            "name": "_visit",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [],
                "results": []
            }
        },
        "ListComprNode.is_const": {
            "name": "is_const",
            "location": 1215,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ListComprNode.simplify": {
            "name": "simplify",
            "location": 1218,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "ListComprNode.solve": {
            "name": "solve",
            "location": 1246,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "x": [
                    "ExpNode"
                ]
            }
        },
        "ListComprNode.clone": {
            "name": "clone",
            "location": 1261,
            "return": [
                "'ListComprNode'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListComprNode.eval": {
            "name": "eval",
            "location": 1271,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "ListComprNode.evalctx": {
            "name": "evalctx",
            "location": 1287,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "ListComprNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "ListComprNode.contains": {
            "name": "contains",
            "location": 1307,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [
                    "ExpNode"
                ]
            }
        },
        "ListComprNode.__repr__": {
            "name": "__repr__",
            "location": 1314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListComprNode.__eq__": {
            "name": "__eq__",
            "location": 1322,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OpNode.__init__": {
            "name": "__init__",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "str"
                ],
                "l_exp": [
                    "ExpNode"
                ],
                "r_exp": [
                    "ExpNode"
                ]
            }
        },
        "OpNode._visit": {
            "name": "_visit",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [],
                "results": []
            }
        },
        "OpNode.mutable": {
            "name": "mutable",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpNode.is_const": {
            "name": "is_const",
            "location": 1376,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "OpNode.simplify": {
            "name": "simplify",
            "location": 1382,
            "return": [],
            "arguments": {
                "self": [],
                "assume_const": []
            }
        },
        "OpNode.clone": {
            "name": "clone",
            "location": 1397,
            "return": [
                "'OpNode'"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpNode.eval": {
            "name": "eval",
            "location": 1405,
            "return": [],
            "arguments": {
                "self": [],
                "force_cache_refresh": []
            }
        },
        "OpNode.evalctx": {
            "name": "evalctx",
            "location": 1425,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "OpNode.call": {
            "name": "call",
            "location": 1433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpNode._solve_func": {
            "name": "_solve_func",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "x": []
            }
        },
        "OpNode._to_number": {
            "name": "_to_number",
            "location": 1477,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "val": []
            }
        },
        "OpNode.solve": {
            "name": "solve",
            "location": 1489,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "x": [
                    "ExpNode"
                ]
            }
        },
        "OpNode._assign": {
            "name": "_assign",
            "location": 1527,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "OpNode.bind_ctx": {
            "name": "bind_ctx",
            "location": 1533,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Context"
                ]
            }
        },
        "OpNode.contains": {
            "name": "contains",
            "location": 1539,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [
                    "ExpNode"
                ]
            }
        },
        "OpNode.__repr__": {
            "name": "__repr__",
            "location": 1544,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpNode.__eq__": {
            "name": "__eq__",
            "location": 1568,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/interpolatedstr.py": {
        "InterpolatedStr.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "start": [],
                "end": [],
                "stop_strs": []
            }
        },
        "InterpolatedStr.is_const": {
            "name": "is_const",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterpolatedStr.bind_ctx": {
            "name": "bind_ctx",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "InterpolatedStr.clone": {
            "name": "clone",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterpolatedStr.get_ast": {
            "name": "get_ast",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "strip_str": []
            }
        },
        "InterpolatedStr._change_chandler": {
            "name": "_change_chandler",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "ast_index": []
            }
        },
        "InterpolatedStr.value": {
            "name": "value",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterpolatedStr.evaluate": {
            "name": "evaluate",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterpolatedStr.rstrip": {
            "name": "rstrip",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterpolatedStr.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/lexer.py": {
        "token_repr": {
            "name": "token_repr",
            "location": 47,
            "return": [],
            "arguments": {
                "tok": []
            }
        },
        "tokens_to_strs": {
            "name": "tokens_to_strs",
            "location": 53,
            "return": [],
            "arguments": {
                "tmap": [],
                "tokens": []
            }
        },
        "TokenStream.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "name": [],
                "fname": [],
                "tmap": []
            }
        },
        "TokenStream.push_left": {
            "name": "push_left",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "val": [],
                "pos": []
            }
        },
        "TokenStream.pop_left": {
            "name": "pop_left",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.peek": {
            "name": "peek",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.skip": {
            "name": "skip",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "TokenStream.cat_until": {
            "name": "cat_until",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "TokenStream.cat_while": {
            "name": "cat_while",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "TokenStream._next_tok": {
            "name": "_next_tok",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "advance": []
            }
        },
        "TokenStream.find": {
            "name": "find",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "needle": []
            }
        },
        "TokenStream.__len__": {
            "name": "__len__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__getitem__": {
            "name": "__getitem__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TokenStream.remain_src": {
            "name": "remain_src",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__iter__": {
            "name": "__iter__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__next__": {
            "name": "__next__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "environment.Environment"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Parser._parse": {
            "name": "_parse",
            "location": 19,
            "return": [
                "Tuple[(List[nodes.Node], Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "tokenstream": [
                    "lexer.TokenStream"
                ],
                "end_node_names": [
                    "List[str]"
                ]
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/rendernodes.py": {
        "register_render_node": {
            "name": "register_render_node",
            "location": 32,
            "return": [],
            "arguments": {
                "Node": []
            }
        },
        "RenderFactory.register": {
            "name": "register",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "NodeType": [],
                "RenderType": []
            }
        },
        "RenderFactory.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "RenderFactory.from_node": {
            "name": "from_node",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "register_render_node.decorator": {
            "name": "decorator",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "RenderNode.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "tpl_node": [],
                "factory": []
            }
        },
        "RenderNode.clone": {
            "name": "clone",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "clone_into": []
            }
        },
        "RenderNode.render_into": {
            "name": "render_into",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "parent": []
            }
        },
        "RenderNode.destroy": {
            "name": "destroy",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "tpl_node": [],
                "factory": []
            }
        },
        "HTMLElement.clone": {
            "name": "clone",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "clone_into": []
            }
        },
        "HTMLElement._setup_value_binding": {
            "name": "_setup_value_binding",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "HTMLElement.render_into": {
            "name": "render_into",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "parent": []
            }
        },
        "HTMLElement.destroy": {
            "name": "destroy",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement._update_source": {
            "name": "_update_source",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "evt": []
            }
        },
        "HTMLElement._update": {
            "name": "_update",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "tpl_node": [],
                "factory": []
            }
        },
        "Text.clone": {
            "name": "clone",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "clone_into": []
            }
        },
        "Text.render_into": {
            "name": "render_into",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "parent": []
            }
        },
        "Text._update": {
            "name": "_update",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Text.destroy": {
            "name": "destroy",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/template.py": {
        "Template.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "env": [],
                "update_interval": []
            }
        },
        "Template.render": {
            "name": "render",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "into": []
            }
        },
        "Template._schedule_update": {
            "name": "_schedule_update",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "evt": []
            }
        },
        "Template._update": {
            "name": "_update",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.destroy": {
            "name": "destroy",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/templatenodes.py": {
        "register_node": {
            "name": "register_node",
            "location": 112,
            "return": [
                "Callable[([type], type)]"
            ],
            "arguments": {
                "NodeName": [
                    "str"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [
                    "lexer.TokenStream"
                ],
                "location": [
                    "Optional[lexer.Location]"
                ]
            }
        },
        "Node._html_ref": {
            "name": "_html_ref",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "id": [
                    "int"
                ]
            }
        },
        "Node._extract_id": {
            "name": "_extract_id",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "text": [
                    "str"
                ]
            }
        },
        "Node._get_html_content": {
            "name": "_get_html_content",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.render_dom": {
            "name": "render_dom",
            "location": 42,
            "return": [
                "List[bs4.Tag]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.render_text": {
            "name": "render_text",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.bind_ctx": {
            "name": "bind_ctx",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "Context"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.rstrip": {
            "name": "rstrip",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.parse_args": {
            "name": "parse_args",
            "location": 72,
            "return": [
                "expression.ExpNode"
            ],
            "arguments": {
                "cls": [],
                "token_stream": [
                    "lexer.TokenStream"
                ],
                "end_str": [
                    "str"
                ]
            }
        },
        "Node.children": {
            "name": "children",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeFactory.register": {
            "name": "register",
            "location": 100,
            "return": [],
            "arguments": {
                "cls": [],
                "NodeName": [
                    "str"
                ],
                "NodeType": [
                    "type"
                ]
            }
        },
        "NodeFactory.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "environment.Environment"
                ]
            }
        },
        "NodeFactory.from_name": {
            "name": "from_name",
            "location": 107,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "name": [
                    "str"
                ],
                "tokenstream": [
                    "lexer.TokenStream"
                ],
                "location": [
                    "lexer.Location"
                ]
            }
        },
        "register_node.decorator": {
            "name": "decorator",
            "location": 113,
            "return": [
                "type"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "_TemplatedTag.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elt": [
                    "bs4.Tag"
                ],
                "node_map": [
                    "Mapping[(int, Node)]"
                ]
            }
        },
        "DynamicAttr.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elt": [
                    "bs4.Tag"
                ]
            }
        },
        "_TemplatedValAttr.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elt": [
                    "bs4.Tag"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "nodes": [
                    "Mapping[(int, Node)]"
                ]
            }
        },
        "_TemplatedAttr.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elt": [
                    "bs4.Tag"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "_TemplatedText.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "Comment.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [
                    "lexer.TokenStream"
                ],
                "location": []
            }
        },
        "Comment._get_html_content": {
            "name": "_get_html_content",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [
                    "lexer.TokenStream"
                ],
                "location": []
            }
        },
        "Variable._get_html_content": {
            "name": "_get_html_content",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.safe": {
            "name": "safe",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.bind_ctx": {
            "name": "bind_ctx",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Variable.render_dom": {
            "name": "render_dom",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.render_text": {
            "name": "render_text",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [
                    "lexer.TokenStream"
                ],
                "location": []
            }
        },
        "Content._get_html_content": {
            "name": "_get_html_content",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.render_dom": {
            "name": "render_dom",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.render_text": {
            "name": "render_text",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfNode.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [],
                "location": []
            }
        },
        "ElseNode.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [],
                "location": []
            }
        },
        "ElifNode.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [],
                "location": []
            }
        },
        "EndifNode.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "token_stream": [],
                "location": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/__init__.py": {},
    "brython-jinja2-master/src/brython_jinja2/platform/bs4.py": {},
    "brython-jinja2-master/src/brython_jinja2/platform/typing.py": {},
    "brython-jinja2-master/src/brython_jinja2/platform/__init__.py": {},
    "brython-jinja2-master/src/brython_jinja2/platform/brython/bs4.py": {
        "dom_from_html": {
            "name": "dom_from_html",
            "location": 5,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "from_html": {
            "name": "from_html",
            "location": 12,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "from_native_element": {
            "name": "from_native_element",
            "location": 16,
            "return": [],
            "arguments": {
                "elt": []
            }
        },
        "_test_attrs": {
            "name": "_test_attrs",
            "location": 196,
            "return": [],
            "arguments": {
                "tag": [],
                "attrs": []
            }
        },
        "PageElement.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "elt": []
            }
        },
        "PageElement.parent": {
            "name": "parent",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.parents": {
            "name": "parents",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_sibling": {
            "name": "next_sibling",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_siblings": {
            "name": "next_siblings",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_sibling": {
            "name": "previous_sibling",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_siblings": {
            "name": "previous_siblings",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_element": {
            "name": "next_element",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_elements": {
            "name": "next_elements",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_element": {
            "name": "previous_element",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_elements": {
            "name": "previous_elements",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "NavigableString.replace_with": {
            "name": "replace_with",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Attrs.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "elt": []
            }
        },
        "Attrs.keys": {
            "name": "keys",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attrs.items": {
            "name": "items",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attrs.__setitem__": {
            "name": "__setitem__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Attrs.__getitem__": {
            "name": "__getitem__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "element_or_html": []
            }
        },
        "Tag.get": {
            "name": "get",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.attrs": {
            "name": "attrs",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.contents": {
            "name": "contents",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.children": {
            "name": "children",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.descendants": {
            "name": "descendants",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.extract": {
            "name": "extract",
            "location": 150,
            "return": [
                "PageElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.append": {
            "name": "append",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "tag_or_html": []
            }
        },
        "Tag.insert": {
            "name": "insert",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "tag_or_html": []
            }
        },
        "Tag.insert_before": {
            "name": "insert_before",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Tag.insert_after": {
            "name": "insert_after",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Tag.decompose": {
            "name": "decompose",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__getitem__": {
            "name": "__getitem__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__setitem__": {
            "name": "__setitem__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.find_all": {
            "name": "find_all",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "filter": [],
                "attrs": [],
                "limit": [],
                "recursive": [],
                "class_": []
            }
        },
        "Document.find": {
            "name": "find",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "Document.contents": {
            "name": "contents",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.children": {
            "name": "children",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.descendants": {
            "name": "descendants",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.select": {
            "name": "select",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Document.__getitem__": {
            "name": "__getitem__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Document.__getattr__": {
            "name": "__getattr__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/platform/brython/typing.py": {
        "NewType": {
            "name": "NewType",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "tp": []
            }
        },
        "cast": {
            "name": "cast",
            "location": 27,
            "return": [],
            "arguments": {
                "tp": [],
                "x": []
            }
        },
        "TypeVar": {
            "name": "TypeVar",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bound": []
            }
        },
        "DummyParametrizedType.__getitem__": {
            "name": "__getitem__",
            "location": 6,
            "return": [],
            "arguments": {
                "cls": [],
                "tp": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/platform/brython/__init__.py": {},
    "brython-jinja2-master/src/brython_jinja2/platform/linux/bs4.py": {
        "dom_from_html": {
            "name": "dom_from_html",
            "location": 3,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "from_html": {
            "name": "from_html",
            "location": 11,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "from_native_element": {
            "name": "from_native_element",
            "location": 15,
            "return": [],
            "arguments": {
                "elt": []
            }
        },
        "__le__": {
            "name": "__le__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "doc.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "doc.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "doc.__le__": {
            "name": "__le__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "doc.insert_after": {
            "name": "insert_after",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "elt": []
            }
        },
        "doc.insert_before": {
            "name": "insert_before",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "elt": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/platform/linux/__init__.py": {},
    "brython-jinja2-master/src/brython_jinja2/utils/delayedupdater.py": {
        "DelayedUpdater.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater.update_if_needed": {
            "name": "update_if_needed",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater.is_dirty": {
            "name": "is_dirty",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater.is_clean": {
            "name": "is_clean",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater._child_change_handler": {
            "name": "_child_change_handler",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "evt": []
            }
        },
        "DelayedUpdater._change_handler": {
            "name": "_change_handler",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "evt": []
            }
        },
        "DelayedUpdater._mark_dirty": {
            "name": "_mark_dirty",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater._mark_clean": {
            "name": "_mark_clean",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater._mark_children_dirty": {
            "name": "_mark_children_dirty",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater._mark_children_clean": {
            "name": "_mark_children_clean",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater._update": {
            "name": "_update",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DelayedUpdater._update_children": {
            "name": "_update_children",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/utils/events.py": {
        "generate_forward_handler": {
            "name": "generate_forward_handler",
            "location": 9,
            "return": [],
            "arguments": {
                "obj": [],
                "forward_event": []
            }
        },
        "add_event_mixin": {
            "name": "add_event_mixin",
            "location": 56,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "emits": {
            "name": "emits",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "generate_forward_handler.handler": {
            "name": "handler",
            "location": 10,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "target": [],
                "data": []
            }
        },
        "Event.retarget": {
            "name": "retarget",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "tgt": []
            }
        },
        "Event.rename": {
            "name": "rename",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Event.name": {
            "name": "name",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.target": {
            "name": "target",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventMixin.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventMixin.bind": {
            "name": "bind",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "handler": [],
                "forward_event": []
            }
        },
        "EventMixin.stop_forwarding": {
            "name": "stop_forwarding",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "only_event": [],
                "only_obj": []
            }
        },
        "EventMixin.unbind": {
            "name": "unbind",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "handler": []
            }
        },
        "EventMixin.emit": {
            "name": "emit",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "event_data": [],
                "_forwarded": []
            }
        },
        "emits.decorator": {
            "name": "decorator",
            "location": 157,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/utils/functools.py": {
        "decorator": {
            "name": "decorator",
            "location": 3,
            "return": [],
            "arguments": {
                "dec": []
            }
        },
        "pure": {
            "name": "pure",
            "location": 12,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "inverts": {
            "name": "inverts",
            "location": 19,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "invertible": {
            "name": "invertible",
            "location": 31,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "invert": {
            "name": "invert",
            "location": 38,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "self_generator": {
            "name": "self_generator",
            "location": 61,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "factory": {
            "name": "factory",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "throttle": {
            "name": "throttle",
            "location": 90,
            "return": [],
            "arguments": {
                "sec": [
                    "float"
                ]
            }
        },
        "decorator.new_dec": {
            "name": "new_dec",
            "location": 4,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "inverts.decorated": {
            "name": "decorated",
            "location": 24,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "ProxyGenerator.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [],
                "args": [],
                "kw": []
            }
        },
        "ProxyGenerator.__iter__": {
            "name": "__iter__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyGenerator.__next__": {
            "name": "__next__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyGenerator.send": {
            "name": "send",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "self_generator.wrap": {
            "name": "wrap",
            "location": 62,
            "return": [
                "ProxyGenerator"
            ],
            "arguments": {}
        },
        "factory.register": {
            "name": "register",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "factory._filter": {
            "name": "_filter",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "cond": []
            }
        },
        "factory.create": {
            "name": "create",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "throttle.throttle_decorator": {
            "name": "throttle_decorator",
            "location": 98,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "factory.register.dec": {
            "name": "dec",
            "location": 71,
            "return": [],
            "arguments": {
                "product": []
            }
        },
        "throttle.throttle_decorator.decorated": {
            "name": "decorated",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "brython-jinja2-master/src/brython_jinja2/utils/observer.py": {
        "extend_instance": {
            "name": "extend_instance",
            "location": 46,
            "return": [],
            "arguments": {
                "obj": [],
                "cls": []
            }
        },
        "observe": {
            "name": "observe",
            "location": 279,
            "return": [],
            "arguments": {
                "obj": [],
                "observer": [],
                "ignore_errors": []
            }
        },
        "Immutable.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Immutable.value": {
            "name": "value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Immutable.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Immutable.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjMixin._create_observer": {
            "name": "_create_observer",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjMixin.__setattr__": {
            "name": "__setattr__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "ObjMixin.__delattr__": {
            "name": "__delattr__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ArrayMixin._create_observer": {
            "name": "_create_observer",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.__setattr__": {
            "name": "__setattr__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "ArrayMixin.__setitem__": {
            "name": "__setitem__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ArrayMixin.__delitem__": {
            "name": "__delitem__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ArrayMixin.append": {
            "name": "append",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ArrayMixin.insert": {
            "name": "insert",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "item": []
            }
        },
        "ArrayMixin.remove": {
            "name": "remove",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ArrayMixin.clear": {
            "name": "clear",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.extend": {
            "name": "extend",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "lst": []
            }
        },
        "ArrayMixin.update": {
            "name": "update",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "dct": []
            }
        },
        "ArrayMixin.pop": {
            "name": "pop",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.sort": {
            "name": "sort",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.reverse": {
            "name": "reverse",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListProxy.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "lst": []
            }
        },
        "DictProxy.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "dct": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/utils/parser_utils.py": {
        "skip_chars": {
            "name": "skip_chars",
            "location": 2,
            "return": [],
            "arguments": {
                "string": [],
                "pos": [],
                "skip": []
            }
        },
        "cat_until": {
            "name": "cat_until",
            "location": 7,
            "return": [],
            "arguments": {
                "string": [],
                "pos": [],
                "until": []
            }
        },
        "cat_while": {
            "name": "cat_while",
            "location": 14,
            "return": [],
            "arguments": {
                "string": [],
                "pos": [],
                "cond": []
            }
        },
        "MultiMatcher.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "needles": []
            }
        },
        "MultiMatcher.find": {
            "name": "find",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "haystack": [],
                "start_pos": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/utils/pubsub.py": {
        "generate_forwarding_subscriber": {
            "name": "generate_forwarding_subscriber",
            "location": 154,
            "return": [],
            "arguments": {
                "publisher": [
                    "PublisherMixin"
                ],
                "forward_to_channel": [
                    "str"
                ]
            }
        },
        "add_publisher_mixin": {
            "name": "add_publisher_mixin",
            "location": 159,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "provides_channels": {
            "name": "provides_channels",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ],
                "publisher": [
                    "PublisherT@@PublisherMixin@@"
                ],
                "data": []
            }
        },
        "Message.republish": {
            "name": "republish",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tgt": [
                    "PublisherT@@PublisherMixin@@"
                ]
            }
        },
        "Message.add_channel": {
            "name": "add_channel",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "ChannelT"
                ]
            }
        },
        "Message.channel": {
            "name": "channel",
            "location": 44,
            "return": [
                "ChannelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.publisher": {
            "name": "publisher",
            "location": 48,
            "return": [
                "PublisherT@@PublisherMixin@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublisherMixin.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublisherMixin.sub": {
            "name": "sub",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ],
                "subscriber": [
                    "Union[(SubscriberT, PublisherT)]"
                ],
                "forward_to": [
                    "ChannelT"
                ]
            }
        },
        "PublisherMixin.stop_forwarding": {
            "name": "stop_forwarding",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restrict_to_channel": [
                    "ChannelT"
                ],
                "restrict_to_publisher": [
                    "'PublisherMixin'"
                ]
            }
        },
        "PublisherMixin.unsub": {
            "name": "unsub",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ],
                "subscriber": [
                    "SubscriberT"
                ]
            }
        },
        "PublisherMixin.pub": {
            "name": "pub",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "message_data": [],
                "_forwarded": []
            }
        },
        "generate_forwarding_subscriber.subscriber": {
            "name": "subscriber",
            "location": 155,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "provides_channels.decorator": {
            "name": "decorator",
            "location": 170,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "brython-jinja2-master/src/brython_jinja2/utils/__init__.py": {
        "Location.location_from_pos": {
            "name": "location_from_pos",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": [],
                "src": [],
                "pos": [],
                "name": [],
                "filename": []
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "name": [],
                "filename": [],
                "ln": [],
                "col": [],
                "pos": []
            }
        },
        "Location.line": {
            "name": "line",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.column": {
            "name": "column",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.pos": {
            "name": "pos",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location._inc_pos": {
            "name": "_inc_pos",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "delta": []
            }
        },
        "Location._newline": {
            "name": "_newline",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.clone": {
            "name": "clone",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.context": {
            "name": "context",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "num_ctx_lines": []
            }
        },
        "Location.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/tests/utils.py": {
        "TObserver.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "observer": []
            }
        },
        "TObserver.handler": {
            "name": "handler",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "brython-jinja2-master/tests/brython/__init__.py": {},
    "brython-jinja2-master/tests/brython/browser/ajax.py": {},
    "brython-jinja2-master/tests/brython/browser/console.py": {
        "log": {
            "name": "log",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "brython-jinja2-master/tests/brython/browser/document.py": {
        "body.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "body.__getitem__": {
            "name": "__getitem__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "body._reset": {
            "name": "_reset",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/tests/brython/browser/html.py": {
        "make_tag": {
            "name": "make_tag",
            "location": 202,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "MockAttr.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "val": []
            }
        },
        "MockAttr.clone": {
            "name": "clone",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockAttr.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "attrlist.__getattr__": {
            "name": "__getattr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockElement.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "tagName": []
            }
        },
        "MockElement.text": {
            "name": "text",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "MockElement.id": {
            "name": "id",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockElement.set_id": {
            "name": "set_id",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MockElement.click": {
            "name": "click",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockElement.clone": {
            "name": "clone",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockElement.clear": {
            "name": "clear",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockElement._indexAttr": {
            "name": "_indexAttr",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockElement.removeAttribute": {
            "name": "removeAttribute",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockElement.setAttribute": {
            "name": "setAttribute",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "MockElement.insertBefore": {
            "name": "insertBefore",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "domnode": [],
                "before": []
            }
        },
        "MockElement.replaceChild": {
            "name": "replaceChild",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "replace_with": [],
                "replace_what": []
            }
        },
        "MockElement._findChild": {
            "name": "_findChild",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "MockElement.__getattr__": {
            "name": "__getattr__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "MockElement.__setattr__": {
            "name": "__setattr__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "MockElement.__delattr__": {
            "name": "__delattr__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MockElement.__le__": {
            "name": "__le__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MockElement.__repr__": {
            "name": "__repr__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockDomElt.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "parent": []
            }
        },
        "MockDomElt.clear": {
            "name": "clear",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockDomElt.appendChild": {
            "name": "appendChild",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "ch": []
            }
        },
        "MockDomElt.replaceChild": {
            "name": "replaceChild",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "replace_with": [],
                "replace_what": []
            }
        },
        "MockDomElt.insertBefore": {
            "name": "insertBefore",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "ch": [],
                "reference": []
            }
        },
        "COMMENT.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "SPAN.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "make_tag.NewElt.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/tests/brython/browser/timer.py": {
        "set_interval": {
            "name": "set_interval",
            "location": 28,
            "return": [],
            "arguments": {
                "meth": [],
                "msec": []
            }
        },
        "clear_interval": {
            "name": "clear_interval",
            "location": 32,
            "return": [],
            "arguments": {
                "timer": []
            }
        },
        "Timer.run_deferred": {
            "name": "run_deferred",
            "location": 5,
            "return": [],
            "arguments": {
                "cls": [],
                "elapsed": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "meth": [],
                "interval": []
            }
        },
        "Timer.run": {
            "name": "run",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.clear": {
            "name": "clear",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "brython-jinja2-master/tests/brython/browser/websocket.py": {},
    "brython-jinja2-master/tests/brython/browser/__init__.py": {},
    "brython-jinja2-master/tests/brython_jinja2/test_context.py": {},
    "brython-jinja2-master/tests/brython_jinja2/test_expression.py": {
        "test_parse_number": {
            "name": "test_parse_number",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_parse_string": {
            "name": "test_parse_string",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_tokenize": {
            "name": "test_tokenize",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "parse_mock": {
            "name": "parse_mock",
            "location": 83,
            "return": [],
            "arguments": {
                "token_stream": [],
                "end_tokens": []
            }
        },
        "test_parse_args": {
            "name": "test_parse_args",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_parse_lst": {
            "name": "test_parse_lst",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_parse_slice": {
            "name": "test_parse_slice",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_parse_interpolated_string": {
            "name": "test_parse_interpolated_string",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_parse": {
            "name": "test_parse",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_is_func": {
            "name": "test_is_func",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "test_is_ident": {
            "name": "test_is_ident",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_eval_assignment": {
            "name": "test_eval_assignment",
            "location": 450,
            "return": [],
            "arguments": {}
        },
        "test_simplify": {
            "name": "test_simplify",
            "location": 508,
            "return": [],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "TestCall.setup_method": {
            "name": "setup_method",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestCall.test_call": {
            "name": "test_call",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockObject.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "depth": []
            }
        },
        "TestExpressionChanges.setup_method": {
            "name": "setup_method",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestExpressionChanges.prepare": {
            "name": "prepare",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "TestExpressionChanges.exec_test": {
            "name": "exec_test",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "new": []
            }
        },
        "TestExpressionChanges.test_clone": {
            "name": "test_clone",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionChanges.test_arithmetic_exp": {
            "name": "test_arithmetic_exp",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionChanges.test_comprehension": {
            "name": "test_comprehension",
            "location": 594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionChanges.test_attr_acces": {
            "name": "test_attr_acces",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionChanges.test_func": {
            "name": "test_func",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionChanges.test_array_index": {
            "name": "test_array_index",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCall.test_call.handler": {
            "name": "handler",
            "location": 429,
            "return": [],
            "arguments": {
                "x": [],
                "event": []
            }
        }
    },
    "brython-jinja2-master/tests/brython_jinja2/test_interpolatedstr.py": {
        "test_string_interp": {
            "name": "test_string_interp",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "brython-jinja2-master/tests/brython_jinja2/test_lexer.py": {
        "test_slices": {
            "name": "test_slices",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_skip": {
            "name": "test_skip",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_comment": {
            "name": "test_comment",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "brython-jinja2-master/tests/brython_jinja2/test_location.py": {
        "test_location_context_single_line": {
            "name": "test_location_context_single_line",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_location_from_pos": {
            "name": "test_location_from_pos",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_location_context": {
            "name": "test_location_context",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "brython-jinja2-master/tests/brython_jinja2/test_observer.py": {
        "test_obj_observer": {
            "name": "test_obj_observer",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_dict_observer": {
            "name": "test_dict_observer",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_list_observer": {
            "name": "test_list_observer",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "MockObj.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        }
    },
    "brython-jinja2-master/tests/brython_jinja2/test_parser.py": {
        "test_parser_basic": {
            "name": "test_parser_basic",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "brython-jinja2-master/tests/brython_jinja2/test_templatenodes.py": {
        "test_variable_node": {
            "name": "test_variable_node",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_comment_node": {
            "name": "test_comment_node",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_if_node": {
            "name": "test_if_node",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "MockParser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockParser._parse": {
            "name": "_parse",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    }
}
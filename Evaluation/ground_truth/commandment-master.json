{
    "commandment-master/setup.py": {},
    "commandment-master/commandment/app.py": {},
    "commandment-master/commandment/cli.py": {
        "server": {
            "name": "server",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/dbtypes.py": {
        "json_datetime_serializer": {
            "name": "json_datetime_serializer",
            "location": 44,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "GUID.load_dialect_impl": {
            "name": "load_dialect_impl",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "GUID.process_bind_param": {
            "name": "process_bind_param",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "GUID.process_result_value": {
            "name": "process_result_value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "JSONEncodedDict.process_bind_param": {
            "name": "process_bind_param",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "JSONEncodedDict.process_result_value": {
            "name": "process_result_value",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "SetOfEnumValues.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetOfEnumValues.process_bind_param": {
            "name": "process_bind_param",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "SetOfEnumValues.process_result_value": {
            "name": "process_result_value",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        }
    },
    "commandment-master/commandment/decorators.py": {
        "parse_plist_input_data": {
            "name": "parse_plist_input_data",
            "location": 11,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "pem_certificate_upload": {
            "name": "pem_certificate_upload",
            "location": 34,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "parse_plist_input_data.decorator": {
            "name": "decorator",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "pem_certificate_upload.decorator": {
            "name": "decorator",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/default_settings.py": {},
    "commandment-master/commandment/errors.py": {
        "JSONAPIError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "status": [
                    "int"
                ],
                "code": [
                    "Optional[str]"
                ],
                "detail": [
                    "Optional[str]"
                ],
                "source": [
                    "Optional[Dict[(str, str)]]"
                ],
                "meta": [],
                "id": []
            }
        },
        "JSONAPIError.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [
                "Dict[(str, any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/commandment/models.py": {
        "Device.token": {
            "name": "token",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Device.hex_token": {
            "name": "hex_token",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.unlock_token": {
            "name": "unlock_token",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Device.platform": {
            "name": "platform",
            "location": 297,
            "return": [
                "Platform"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.__repr__": {
            "name": "__repr__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.from_model": {
            "name": "from_model",
            "location": 364,
            "return": [],
            "arguments": {
                "cls": [],
                "cmd": [
                    "commands.Command"
                ]
            }
        },
        "Command.find_by_uuid": {
            "name": "find_by_uuid",
            "location": 382,
            "return": [],
            "arguments": {
                "cls": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "Command.next_command": {
            "name": "next_command",
            "location": 394,
            "return": [],
            "arguments": {
                "cls": [],
                "device": [
                    "Device"
                ]
            }
        },
        "Command.next": {
            "name": "next",
            "location": 415,
            "return": [],
            "arguments": {
                "cls": [],
                "device": [
                    "Device"
                ]
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/commandment/mutablelist.py": {
        "MutableList.__setitem__": {
            "name": "__setitem__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "MutableList.__setslice__": {
            "name": "__setslice__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "value": []
            }
        },
        "MutableList.__delitem__": {
            "name": "__delitem__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MutableList.__delslice__": {
            "name": "__delslice__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "MutableList.pop": {
            "name": "pop",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.append": {
            "name": "append",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MutableList.extend": {
            "name": "extend",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MutableList.insert": {
            "name": "insert",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "x": []
            }
        },
        "MutableList.remove": {
            "name": "remove",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "MutableList.clear": {
            "name": "clear",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.sort": {
            "name": "sort",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.reverse": {
            "name": "reverse",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.coerce": {
            "name": "coerce",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "index": [],
                "value": []
            }
        },
        "MutableList.__getstate__": {
            "name": "__getstate__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.__setstate__": {
            "name": "__setstate__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "commandment-master/commandment/signals.py": {},
    "commandment-master/commandment/utils.py": {
        "plistify": {
            "name": "plistify",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 32,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config_file": [
                    "Optional[Union[(str, PurePath)]]"
                ]
            }
        },
        "create_app.index": {
            "name": "index",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "create_app.send_index": {
            "name": "send_index",
            "location": 93,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/commandment/ac2/ac2_app.py": {
        "mdm_service_config": {
            "name": "mdm_service_config",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/ac2/__init__.py": {},
    "commandment-master/commandment/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/__init__.py": {},
    "commandment-master/commandment/alembic/disabled_versions/072fba4a2256_create_ad_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/18412434fb57_create_energy_saver_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/323a90039a6a_create_email_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/4eddbcb30464_create_mdm_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/8186b8ecf0fc_create_ad_cert_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/9dd4e48235e3_create_vpn_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/d65049bf4b91_create_wifi_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/da52b64b865f_create_apps_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/e47e29a9537c_create_certificate_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/disabled_versions/fc0c134cbb2e_create_password_policy_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/0201b96ab856_add_ios_available_os_updates_fields.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/0ab46b2f6d8c_create_users_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/0c4c448f4daf_create_device_users_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/0e5babc5b9ee_create_vpp_licenses.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/1005dc7dea01_os_update_settings.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 70,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/13358fb3846b_create_subject_alternative_names_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/1532dff16984_drop_device_groups.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/2808deb9fc62_create_dep_configurations.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 69,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/2f1507bf6dc1_create_application_manifests_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 111,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/3061e56045eb_create_certificate_authority.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/3dbf6db7f9eb_application_tags.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/3fb4a904979c_general_cleanup.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 68,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/50188ffaf0cd_create_devices_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 100,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/5b98cc4af6c9_create_profiles_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/6675e981817e_create_available_os_updates_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/70ff84113e8f_create_tags.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/71818e983100_create_application_sources_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/71ecf957301a_create_commands_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/7ab500f58a76_create_installed_payloads.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/7cf5787a089e_add_dep_profile_relationships.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/7d578eb75092_create_device_groups_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/80fa1767c7e2_create_oauth_server_models.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 91,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/875dcce0bf8b_create_vpp_users.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/8c866896f76e_create_dep_join_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/a1d5ffaa2092_create_installed_applications_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/a2e0af380181_create_dep_profiles.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/a35eeb5a216e_create_installed_profiles_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/a3ddaad5c358_add_dep_device_columns.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/af4ba256efde_create_certificates_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/b231394ab475_add_scep_config_source_types.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/b74ca08cfd9a_create_applications_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 80,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/ba4849d8c8ad_create_device_group_devices_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/d5b32b5cc74e_add_dep_profile_id_to_device.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/dd74229d17b9_create_payload_dependencies_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/e16577adc4fd_create_installed_certificates_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/e5840df9a88a_create_scep_payload_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/e58afdc17baa_create_rsa_private_keys_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/e78274be170e_create_organizations_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 68,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/e947cdf82307_add_ios_installed_application_fields.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/e9b0a4f7b595_create_payloads_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/ea34ae3f1e7e_create_profile_payloads_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/f029ac1af3f0_create_vpp_accounts.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/f5237c7e2374_create_scep_config_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/f8eb70b3aa2b_create_application_manifests.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "data_upgrades": {
            "name": "data_upgrades",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "data_downgrades": {
            "name": "data_downgrades",
            "location": 82,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/fa4d91c6aacf_create_managed_applications_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "schema_upgrades": {
            "name": "schema_upgrades",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "schema_downgrades": {
            "name": "schema_downgrades",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/alembic/versions/__init__.py": {},
    "commandment-master/commandment/api/app_json.py": {
        "organization_get": {
            "name": "organization_get",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "download_certificate": {
            "name": "download_certificate",
            "location": 51,
            "return": [],
            "arguments": {
                "certificate_id": [
                    "int"
                ]
            }
        },
        "download_key": {
            "name": "download_key",
            "location": 71,
            "return": [],
            "arguments": {
                "rsa_private_key_id": [
                    "int"
                ]
            }
        },
        "device_test": {
            "name": "device_test",
            "location": 92,
            "return": [],
            "arguments": {
                "device_id": [
                    "int"
                ]
            }
        },
        "device_inventory": {
            "name": "device_inventory",
            "location": 109,
            "return": [],
            "arguments": {
                "device_id": [
                    "int"
                ]
            }
        },
        "clear_passcode": {
            "name": "clear_passcode",
            "location": 163,
            "return": [],
            "arguments": {
                "device_id": [
                    "int"
                ]
            }
        },
        "lock": {
            "name": "lock",
            "location": 192,
            "return": [],
            "arguments": {
                "device_id": [
                    "int"
                ]
            }
        },
        "restart": {
            "name": "restart",
            "location": 221,
            "return": [],
            "arguments": {
                "device_id": [
                    "int"
                ]
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 248,
            "return": [],
            "arguments": {
                "device_id": [
                    "int"
                ]
            }
        },
        "upload_profile": {
            "name": "upload_profile",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "download_profile": {
            "name": "download_profile",
            "location": 334,
            "return": [],
            "arguments": {
                "profile_id": [
                    "int"
                ]
            }
        }
    },
    "commandment-master/commandment/api/app_jsonapi.py": {},
    "commandment-master/commandment/api/configuration.py": {
        "organization_get": {
            "name": "organization_get",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "organization_post": {
            "name": "organization_post",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "scep_get": {
            "name": "scep_get",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "scep_post": {
            "name": "scep_post",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/api/resources.py": {
        "DeviceDetail.before_patch": {
            "name": "before_patch",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": [],
                "data": []
            }
        },
        "DeviceRelationship.before_post": {
            "name": "before_post",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": [],
                "json_data": []
            }
        },
        "DeviceRelationship.before_patch": {
            "name": "before_patch",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": [],
                "json_data": []
            }
        },
        "DeviceRelationship.after_patch": {
            "name": "after_patch",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        }
    },
    "commandment-master/commandment/api/schema.py": {
        "OrganizationFlatSchema.make_organization": {
            "name": "make_organization",
            "location": 221,
            "return": [
                "Organization"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "SCEPConfigFlatSchema.make_scepconfig": {
            "name": "make_scepconfig",
            "location": 250,
            "return": [
                "SCEPConfig"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        }
    },
    "commandment-master/commandment/api/__init__.py": {},
    "commandment-master/commandment/apns/app.py": {
        "push": {
            "name": "push",
            "location": 29,
            "return": [],
            "arguments": {
                "device_id": [
                    "int"
                ]
            }
        },
        "mdmcert_request": {
            "name": "mdmcert_request",
            "location": 61,
            "return": [],
            "arguments": {
                "email": [
                    "str"
                ]
            }
        },
        "mdmcert_decrypt": {
            "name": "mdmcert_decrypt",
            "location": 106,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/apns/mdmcert.py": {
        "submit_mdmcert_request": {
            "name": "submit_mdmcert_request",
            "location": 30,
            "return": [
                "Dict"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "csr_pem": [
                    "str"
                ],
                "encrypt_with_pem": [
                    "str"
                ],
                "api_key": [
                    "str"
                ]
            }
        },
        "decrypt_mdmcert": {
            "name": "decrypt_mdmcert",
            "location": 86,
            "return": [
                "bytes"
            ],
            "arguments": {
                "response": [
                    "bytes"
                ],
                "decrypt_with": [
                    "RSAPrivateKeyWithSerialization"
                ]
            }
        }
    },
    "commandment-master/commandment/apns/push.py": {
        "get_apns": {
            "name": "get_apns",
            "location": 20,
            "return": [
                "apns2.APNSClient"
            ],
            "arguments": {}
        },
        "push_to_device": {
            "name": "push_to_device",
            "location": 82,
            "return": [
                "apns2.Response"
            ],
            "arguments": {
                "device": [
                    "Device"
                ]
            }
        },
        "MDMPayload.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "push_magic": [
                    "str"
                ]
            }
        },
        "MDMPayload.to_json": {
            "name": "to_json",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/commandment/apns/schema.py": {},
    "commandment-master/commandment/apns/threads.py": {
        "start": {
            "name": "start",
            "location": 23,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "stop": {
            "name": "stop",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "push_thread_callback": {
            "name": "push_thread_callback",
            "location": 42,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        }
    },
    "commandment-master/commandment/apns/__init__.py": {},
    "commandment-master/commandment/apps/app_jsonapi.py": {},
    "commandment-master/commandment/apps/models.py": {},
    "commandment-master/commandment/apps/resources.py": {
        "ManagedApplicationList.query": {
            "name": "query",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "view_kwargs": []
            }
        }
    },
    "commandment-master/commandment/apps/schema.py": {},
    "commandment-master/commandment/apps/__init__.py": {},
    "commandment-master/commandment/auth/app.py": {
        "issue_token": {
            "name": "issue_token",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "revoke_token": {
            "name": "revoke_token",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/auth/models.py": {
        "User.get_user_id": {
            "name": "get_user_id",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/commandment/auth/oauth2.py": {
        "init_app": {
            "name": "init_app",
            "location": 200,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "ImplicitGrant.create_access_token": {
            "name": "create_access_token",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "client": [],
                "grant_user": []
            }
        },
        "PasswordGrant.authenticate_user": {
            "name": "authenticate_user",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "password": []
            }
        },
        "PasswordGrant.create_access_token": {
            "name": "create_access_token",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "client": [],
                "user": []
            }
        },
        "ClientCredentialsGrant.create_access_token": {
            "name": "create_access_token",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "client": []
            }
        },
        "RefreshTokenGrant.authenticate_refresh_token": {
            "name": "authenticate_refresh_token",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "refresh_token": []
            }
        },
        "RefreshTokenGrant.create_access_token": {
            "name": "create_access_token",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "authenticated_token": []
            }
        },
        "RevocationEndpoint.query_token": {
            "name": "query_token",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "token_type_hint": [],
                "client": []
            }
        },
        "RevocationEndpoint.invalidate_token": {
            "name": "invalidate_token",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "CommandmentBearerTokenValidator.authenticate_token": {
            "name": "authenticate_token",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "token_string": []
            }
        },
        "CommandmentBearerTokenValidator.request_invalid": {
            "name": "request_invalid",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CommandmentBearerTokenValidator.token_revoked": {
            "name": "token_revoked",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "FlaskJSONAPIResourceProtector.verify_request": {
            "name": "verify_request",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "scopes": []
            }
        }
    },
    "commandment-master/commandment/auth/__init__.py": {},
    "commandment-master/commandment/cms/decorators.py": {
        "_verify_cms_signers": {
            "name": "_verify_cms_signers",
            "location": 15,
            "return": [
                "Tuple[(List[x509.Certificate], bytes)]"
            ],
            "arguments": {
                "signed_data": [
                    "bytes"
                ],
                "detached": [
                    "bool"
                ]
            }
        },
        "verify_cms_signers": {
            "name": "verify_cms_signers",
            "location": 77,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "verify_mdm_signature": {
            "name": "verify_mdm_signature",
            "location": 107,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "verify_cms_signers.decorator": {
            "name": "decorator",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "verify_mdm_signature.decorator": {
            "name": "decorator",
            "location": 119,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/cms/__init__.py": {
        "_certificate_by_signer_identifier": {
            "name": "_certificate_by_signer_identifier",
            "location": 7,
            "return": [
                "Optional[Certificate]"
            ],
            "arguments": {
                "certificates": [
                    "CertificateSet"
                ],
                "sid": [
                    "SignerIdentifier"
                ]
            }
        },
        "_cryptography_hash_function": {
            "name": "_cryptography_hash_function",
            "location": 37,
            "return": [
                "Union[(None, Type[hashes.SHA1], Type[hashes.SHA256], Type[hashes.SHA512])]"
            ],
            "arguments": {
                "algorithm": [
                    "DigestAlgorithm"
                ]
            }
        },
        "_cryptography_pad_function": {
            "name": "_cryptography_pad_function",
            "location": 61,
            "return": [
                "Union[(None, Type[padding.PKCS1v15])]"
            ],
            "arguments": {
                "algorithm": [
                    "SignedDigestAlgorithm"
                ]
            }
        }
    },
    "commandment-master/commandment/dep/app.py": {
        "certificate_download": {
            "name": "certificate_download",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "stoken_upload": {
            "name": "stoken_upload",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "profile": {
            "name": "profile",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "anchor_certs": {
            "name": "anchor_certs",
            "location": 182,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/dep/apple_schema.py": {},
    "commandment-master/commandment/dep/cli.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/dep/dep.py": {
        "DEPAuth.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "DEPAuth.__call__": {
            "name": "__call__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "DEP.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer_key": [
                    "str"
                ],
                "consumer_secret": [
                    "str"
                ],
                "access_token": [
                    "str"
                ],
                "access_secret": [
                    "str"
                ],
                "access_token_expiry": [
                    "Optional[str]"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "DEP.session_token": {
            "name": "session_token",
            "location": 88,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEP.from_token": {
            "name": "from_token",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [],
                "token": [
                    "str"
                ]
            }
        },
        "DEP._response_hook": {
            "name": "_response_hook",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "r": [
                    "requests.Response"
                ]
            }
        },
        "DEP.send": {
            "name": "send",
            "location": 123,
            "return": [
                "Optional[requests.Response]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "requests.Request"
                ]
            }
        },
        "DEP.fetch_token": {
            "name": "fetch_token",
            "location": 156,
            "return": [
                "Union[(str, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEP.account": {
            "name": "account",
            "location": 171,
            "return": [
                "Union[(None, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEP.fetch_devices": {
            "name": "fetch_devices",
            "location": 194,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Union[(str, None)]"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "DEP.sync_devices": {
            "name": "sync_devices",
            "location": 207,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "DEP.devices": {
            "name": "devices",
            "location": 220,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Union[(str, None)]"
                ]
            }
        },
        "DEP.device_detail": {
            "name": "device_detail",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEP.define_profile": {
            "name": "define_profile",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "profile": [
                    "dict"
                ]
            }
        },
        "DEP.assign_profile": {
            "name": "assign_profile",
            "location": 259,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "profile_uuid": [
                    "str"
                ]
            }
        },
        "DEP.remove_profile": {
            "name": "remove_profile",
            "location": 274,
            "return": [
                "DEPProfileRemovals"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEP.profile": {
            "name": "profile",
            "location": 288,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "DEP.activation_lock": {
            "name": "activation_lock",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "serial_number": [
                    "str"
                ],
                "escrow_key": [
                    "Optional[str]"
                ],
                "lost_message": [
                    "Optional[str]"
                ]
            }
        },
        "DEP.activation_lock_bypass": {
            "name": "activation_lock_bypass",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "serial_number": [
                    "str"
                ],
                "product_type": [
                    "str"
                ],
                "org_name": [
                    "str"
                ],
                "guid": [
                    "str"
                ],
                "escrow_key": [
                    "str"
                ],
                "imei": [
                    "Optional[str]"
                ],
                "meid": [
                    "Optional[str]"
                ]
            }
        },
        "DEP.disown": {
            "name": "disown",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEPBaseCursor.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "DEP"
                ],
                "results": [
                    "Optional[dict]"
                ]
            }
        },
        "DEPBaseCursor.cursor": {
            "name": "cursor",
            "location": 341,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEPBaseCursor.more_to_follow": {
            "name": "more_to_follow",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEPBaseCursor.__iter__": {
            "name": "__iter__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEPFetchCursor.__next__": {
            "name": "__next__",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEPSyncCursor.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "DEP"
                ],
                "cursor": [
                    "str"
                ],
                "results": [
                    "Optional[dict]"
                ]
            }
        },
        "DEPSyncCursor.__next__": {
            "name": "__next__",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/commandment/dep/errors.py": {
        "DEPServiceError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEPServiceError.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/commandment/dep/models.py": {
        "DEPServerTokenCertificate.from_crypto": {
            "name": "from_crypto",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [],
                "certificate": [
                    "x509.Certificate"
                ]
            }
        }
    },
    "commandment-master/commandment/dep/resources.py": {
        "DEPProfileList.before_post": {
            "name": "before_post",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": [],
                "data": []
            }
        }
    },
    "commandment-master/commandment/dep/schema.py": {},
    "commandment-master/commandment/dep/smime.py": {
        "decrypt": {
            "name": "decrypt",
            "location": 13,
            "return": [],
            "arguments": {
                "smime": [
                    "bytes"
                ],
                "key": [
                    "rsa.RSAPrivateKey"
                ],
                "serial": [
                    "Optional[int]"
                ]
            }
        },
        "decrypt_smime_content": {
            "name": "decrypt_smime_content",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "payload": [
                    "bytes"
                ],
                "key": [
                    "rsa.RSAPrivateKey"
                ]
            }
        }
    },
    "commandment-master/commandment/dep/threads.py": {
        "start": {
            "name": "start",
            "location": 42,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "stop": {
            "name": "stop",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "dep_sync_organization": {
            "name": "dep_sync_organization",
            "location": 58,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ],
                "dep": [
                    "DEP"
                ]
            }
        },
        "dep_fetch_devices": {
            "name": "dep_fetch_devices",
            "location": 99,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ],
                "dep": [
                    "DEP"
                ],
                "dep_account_id": [
                    "int"
                ]
            }
        },
        "dep_define_profiles": {
            "name": "dep_define_profiles",
            "location": 180,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ],
                "dep": [
                    "DEP"
                ]
            }
        },
        "dep_thread_callback": {
            "name": "dep_thread_callback",
            "location": 203,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        }
    },
    "commandment-master/commandment/dep/__init__.py": {},
    "commandment-master/commandment/deprecated/models.py": {},
    "commandment-master/commandment/deprecated/schema.py": {},
    "commandment-master/commandment/enroll/app.py": {
        "base64_to_pem": {
            "name": "base64_to_pem",
            "location": 30,
            "return": [],
            "arguments": {
                "crypto_type": [],
                "b64_text": [],
                "width": []
            }
        },
        "trust_mobileconfig": {
            "name": "trust_mobileconfig",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "enroll": {
            "name": "enroll",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "ota_enroll": {
            "name": "ota_enroll",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "ota_authenticate": {
            "name": "ota_authenticate",
            "location": 146,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/enroll/profiles.py": {
        "scep_payload_from_configuration": {
            "name": "scep_payload_from_configuration",
            "location": 15,
            "return": [
                "SCEPPayload"
            ],
            "arguments": {}
        },
        "ca_trust_payload_from_configuration": {
            "name": "ca_trust_payload_from_configuration",
            "location": 70,
            "return": [
                "PEMCertificatePayload"
            ],
            "arguments": {}
        },
        "ssl_trust_payload_from_configuration": {
            "name": "ssl_trust_payload_from_configuration",
            "location": 97,
            "return": [
                "PEMCertificatePayload"
            ],
            "arguments": {}
        },
        "identity_payload": {
            "name": "identity_payload",
            "location": 124,
            "return": [
                "PKCS12CertificatePayload"
            ],
            "arguments": {
                "private_key": [
                    "rsa.RSAPrivateKeyWithSerialization"
                ],
                "certificate": [
                    "x509.Certificate"
                ],
                "passphrase": [
                    "Optional[str]"
                ]
            }
        }
    },
    "commandment-master/commandment/enroll/util.py": {
        "generate_enroll_profile": {
            "name": "generate_enroll_profile",
            "location": 17,
            "return": [
                "Profile"
            ],
            "arguments": {
                "pkcs12_payload": [
                    "Optional[PKCS12CertificatePayload]"
                ]
            }
        }
    },
    "commandment-master/commandment/enroll/__init__.py": {},
    "commandment-master/commandment/inventory/api.py": {
        "download_installed_certificate": {
            "name": "download_installed_certificate",
            "location": 40,
            "return": [],
            "arguments": {
                "installed_certificate_id": [
                    "int"
                ]
            }
        }
    },
    "commandment-master/commandment/inventory/models.py": {},
    "commandment-master/commandment/inventory/resources.py": {
        "InstalledApplicationsList.query": {
            "name": "query",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "view_kwargs": []
            }
        },
        "InstalledCertificatesList.query": {
            "name": "query",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "view_kwargs": []
            }
        },
        "InstalledProfilesList.query": {
            "name": "query",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "view_kwargs": []
            }
        },
        "AvailableOSUpdateList.query": {
            "name": "query",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "view_kwargs": []
            }
        }
    },
    "commandment-master/commandment/inventory/schema.py": {},
    "commandment-master/commandment/inventory/__init__.py": {},
    "commandment-master/commandment/mdm/api.py": {},
    "commandment-master/commandment/mdm/app.py": {
        "authenticate": {
            "name": "authenticate",
            "location": 31,
            "return": [],
            "arguments": {
                "plist_data": []
            }
        },
        "token_update": {
            "name": "token_update",
            "location": 79,
            "return": [],
            "arguments": {
                "plist_data": []
            }
        },
        "user_authenticate": {
            "name": "user_authenticate",
            "location": 135,
            "return": [],
            "arguments": {
                "plist_data": []
            }
        },
        "check_out": {
            "name": "check_out",
            "location": 140,
            "return": [],
            "arguments": {
                "plist_data": []
            }
        },
        "mdm": {
            "name": "mdm",
            "location": 174,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/mdm/commands.py": {
        "CommandRegistry.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "Command.uuid": {
            "name": "uuid",
            "location": 59,
            "return": [
                "UUID"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.parameters": {
            "name": "parameters",
            "location": 63,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.new_request_type": {
            "name": "new_request_type",
            "location": 67,
            "return": [
                "'Command'"
            ],
            "arguments": {
                "cls": [],
                "request_type": [
                    "str"
                ],
                "parameters": [
                    "dict"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "Command.to_dict": {
            "name": "to_dict",
            "location": 88,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceInformation.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "DeviceInformation.for_platform": {
            "name": "for_platform",
            "location": 271,
            "return": [
                "'DeviceInformation'"
            ],
            "arguments": {
                "cls": [],
                "platform": [
                    "Platform"
                ],
                "min_os_version": [
                    "str"
                ],
                "queries": [
                    "Set[Queries]"
                ]
            }
        },
        "DeviceInformation.queries": {
            "name": "queries",
            "location": 306,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceInformation.to_dict": {
            "name": "to_dict",
            "location": 309,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityInfo.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "DeviceLock.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "DeviceLock.to_dict": {
            "name": "to_dict",
            "location": 337,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClearPasscode.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "ClearPasscode.to_dict": {
            "name": "to_dict",
            "location": 364,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileList.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "InstallProfile.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "InstallProfile.to_dict": {
            "name": "to_dict",
            "location": 396,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveProfile.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "RemoveProfile.to_dict": {
            "name": "to_dict",
            "location": 416,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateList.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "ProvisioningProfileList.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "InstalledApplicationList.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "InstalledApplicationList.managed_apps_only": {
            "name": "managed_apps_only",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "InstalledApplicationList.identifiers": {
            "name": "identifiers",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bundle_ids": [
                    "List[str]"
                ]
            }
        },
        "InstalledApplicationList.to_dict": {
            "name": "to_dict",
            "location": 471,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstallApplication.__init__": {
            "name": "__init__",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ]
            }
        },
        "InstallApplication.itunes_store_id": {
            "name": "itunes_store_id",
            "location": 502,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ]
            }
        },
        "InstallApplication.to_dict": {
            "name": "to_dict",
            "location": 509,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[UUID]"
                ],
                "device_name": [
                    "Optional[str]"
                ],
                "hostname": [
                    "Optional[str]"
                ],
                "voice_roaming": [
                    "Optional[bool]"
                ],
                "personal_hotspot": [
                    "Optional[bool]"
                ],
                "wallpaper": [],
                "data_roaming": [
                    "Optional[bool]"
                ],
                "bluetooth": [
                    "Optional[bool]"
                ]
            }
        },
        "Settings.to_dict": {
            "name": "to_dict",
            "location": 656,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceInformation.for_platform.supported": {
            "name": "supported",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "query": []
            }
        }
    },
    "commandment-master/commandment/mdm/decorators.py": {
        "handle_error_status": {
            "name": "handle_error_status",
            "location": 4,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "handle_error_status.handler": {
            "name": "handler",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/mdm/handlers.py": {
        "ack_device_information": {
            "name": "ack_device_information",
            "location": 24,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_security_info": {
            "name": "ack_security_info",
            "location": 46,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_profile_list": {
            "name": "ack_profile_list",
            "location": 55,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_certificate_list": {
            "name": "ack_certificate_list",
            "location": 136,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_installed_app_list": {
            "name": "ack_installed_app_list",
            "location": 173,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_install_profile": {
            "name": "ack_install_profile",
            "location": 227,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_available_os_updates": {
            "name": "ack_available_os_updates",
            "location": 234,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_install_application": {
            "name": "ack_install_application",
            "location": 253,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_managed_application_list": {
            "name": "ack_managed_application_list",
            "location": 289,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ack_restart_device": {
            "name": "ack_restart_device",
            "location": 343,
            "return": [],
            "arguments": {
                "request": [
                    "DBCommand"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        }
    },
    "commandment-master/commandment/mdm/models.py": {},
    "commandment-master/commandment/mdm/resources.py": {
        "CommandsList.query": {
            "name": "query",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "view_kwargs": []
            }
        }
    },
    "commandment-master/commandment/mdm/response_schema.py": {
        "DeviceInformation.normalize_osu": {
            "name": "normalize_osu",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "InstalledApplicationItem.make_installed_application": {
            "name": "make_installed_application",
            "location": 197,
            "return": [
                "Optional[inventory_models.InstalledApplication]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]"
                ]
            }
        },
        "CertificateListItem.make_installed_certificate": {
            "name": "make_installed_certificate",
            "location": 211,
            "return": [
                "inventory_models.InstalledCertificate"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "AvailableOSUpdate.make_available_os_update": {
            "name": "make_available_os_update",
            "location": 237,
            "return": [
                "commandment.inventory.models.AvailableOSUpdate"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ProfileListPayloadItem.make_installed_payload": {
            "name": "make_installed_payload",
            "location": 255,
            "return": [
                "inventory_models.InstalledPayload"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ProfileListItem.make_installed_profile": {
            "name": "make_installed_profile",
            "location": 274,
            "return": [
                "inventory_models.InstalledProfile"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        }
    },
    "commandment-master/commandment/mdm/routers.py": {
        "CommandRouter.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Union[(Flask, Blueprint)]"
                ]
            }
        },
        "CommandRouter.handle": {
            "name": "handle",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "command": [
                    "Command"
                ],
                "device": [
                    "Device"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "CommandRouter.route": {
            "name": "route",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "request_type": [
                    "str"
                ]
            }
        },
        "PlistRouter.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "app"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "PlistRouter.view": {
            "name": "view",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlistRouter.route": {
            "name": "route",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "CommandRouter.route.decorator": {
            "name": "decorator",
            "location": 53,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "PlistRouter.route.decorator": {
            "name": "decorator",
            "location": 98,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "CommandRouter.route.decorator.wrapped": {
            "name": "wrapped",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "PlistRouter.route.decorator.wrapped": {
            "name": "wrapped",
            "location": 106,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/mdm/schema.py": {},
    "commandment-master/commandment/mdm/util.py": {
        "queryresponses_to_query_set": {
            "name": "queryresponses_to_query_set",
            "location": 5,
            "return": [],
            "arguments": {
                "responses": [
                    "dict"
                ]
            }
        },
        "queue_full_inventory": {
            "name": "queue_full_inventory",
            "location": 9,
            "return": [],
            "arguments": {
                "device": [
                    "Device"
                ]
            }
        }
    },
    "commandment-master/commandment/mdm/__init__.py": {
        "AccessRights._generate_next_value_": {
            "name": "_generate_next_value_",
            "location": 86,
            "return": [],
            "arguments": {
                "name": [],
                "start": [],
                "count": [],
                "last_values": []
            }
        }
    },
    "commandment-master/commandment/omdm/models.py": {},
    "commandment-master/commandment/omdm/__init__.py": {
        "omdm": {
            "name": "omdm",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/pkg/appmanifest.py": {
        "blow_chunks": {
            "name": "blow_chunks",
            "location": 14,
            "return": [
                "Tuple[(str, List[str])]"
            ],
            "arguments": {
                "fileobj": []
            }
        },
        "url_from_metadata": {
            "name": "url_from_metadata",
            "location": 28,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/pkg/manifest.py": {
        "chunked_hash": {
            "name": "chunked_hash",
            "location": 9,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "stream": [
                    "Union[(io.RawIOBase, io.BufferedIOBase)]"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        }
    },
    "commandment-master/commandment/pkg/old_app_manifest.py": {
        "pkg_signed": {
            "name": "pkg_signed",
            "location": 19,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "get_pkg_bundle_ids": {
            "name": "get_pkg_bundle_ids",
            "location": 38,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "get_chunked_md5": {
            "name": "get_chunked_md5",
            "location": 98,
            "return": [],
            "arguments": {
                "filename": [],
                "chunksize": []
            }
        }
    },
    "commandment-master/commandment/pkg/schema.py": {},
    "commandment-master/commandment/pkg/__init__.py": {},
    "commandment-master/commandment/pki/ca.py": {
        "get_ca": {
            "name": "get_ca",
            "location": 9,
            "return": [
                "CertificateAuthority"
            ],
            "arguments": {}
        }
    },
    "commandment-master/commandment/pki/models.py": {
        "CertificateAuthority.create": {
            "name": "create",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "common_name": [
                    "str"
                ],
                "key_size": []
            }
        },
        "CertificateAuthority.create_device_csr": {
            "name": "create_device_csr",
            "location": 75,
            "return": [
                "(rsa.RSAPrivateKeyWithSerialization, x509.CertificateSigningRequest)"
            ],
            "arguments": {
                "self": [],
                "common_name": [
                    "str"
                ]
            }
        },
        "CertificateAuthority.sign": {
            "name": "sign",
            "location": 120,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "x509.CertificateSigningRequest"
                ]
            }
        },
        "Certificate.from_crypto_type": {
            "name": "from_crypto_type",
            "location": 238,
            "return": [],
            "arguments": {
                "cls": [],
                "certificate": [
                    "x509.Certificate"
                ],
                "certtype": [
                    "CertificateType"
                ]
            }
        },
        "RSAPrivateKey.from_crypto": {
            "name": "from_crypto",
            "location": 266,
            "return": [],
            "arguments": {
                "cls": [],
                "private_key": [
                    "rsa.RSAPrivateKeyWithSerialization"
                ]
            }
        },
        "RSAPrivateKey.to_crypto": {
            "name": "to_crypto",
            "location": 278,
            "return": [
                "rsa.RSAPrivateKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateSigningRequest.from_crypto": {
            "name": "from_crypto",
            "location": 295,
            "return": [],
            "arguments": {
                "cls": [],
                "csr": [
                    "x509.CertificateSigningRequest"
                ]
            }
        },
        "PushCertificate.from_crypto": {
            "name": "from_crypto",
            "location": 329,
            "return": [],
            "arguments": {
                "cls": [],
                "certificate": [
                    "x509.Certificate"
                ]
            }
        },
        "CACertificate.from_crypto": {
            "name": "from_crypto",
            "location": 341,
            "return": [],
            "arguments": {
                "cls": [],
                "certificate": [
                    "x509.Certificate"
                ]
            }
        },
        "DeviceIdentityCertificate.from_crypto": {
            "name": "from_crypto",
            "location": 353,
            "return": [],
            "arguments": {
                "cls": [],
                "certificate": [
                    "x509.Certificate"
                ]
            }
        },
        "EncryptionCertificate.from_crypto": {
            "name": "from_crypto",
            "location": 382,
            "return": [],
            "arguments": {
                "cls": [],
                "certificate": [
                    "x509.Certificate"
                ]
            }
        }
    },
    "commandment-master/commandment/pki/openssl.py": {
        "create_pkcs12": {
            "name": "create_pkcs12",
            "location": 9,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "private_key": [
                    "rsa.RSAPrivateKeyWithSerialization"
                ],
                "certificate": [
                    "x509.Certificate"
                ],
                "passphrase": [
                    "Optional[str]"
                ]
            }
        }
    },
    "commandment-master/commandment/pki/ormutils.py": {
        "find_recipient": {
            "name": "find_recipient",
            "location": 8,
            "return": [
                "Optional[Certificate]"
            ],
            "arguments": {
                "cms_data": [
                    "bytes"
                ]
            }
        }
    },
    "commandment-master/commandment/pki/serialization.py": {
        "from_pem": {
            "name": "from_pem",
            "location": 11,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "pem_data": [
                    "str"
                ]
            }
        },
        "from_der": {
            "name": "from_der",
            "location": 15,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "der_data": [
                    "bytes"
                ]
            }
        },
        "rsa_from_der": {
            "name": "rsa_from_der",
            "location": 19,
            "return": [
                "rsa.RSAPrivateKeyWithSerialization"
            ],
            "arguments": {
                "rsa_der_data": [
                    "bytes"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "rsa_from_pem": {
            "name": "rsa_from_pem",
            "location": 27,
            "return": [
                "rsa.RSAPrivateKeyWithSerialization"
            ],
            "arguments": {
                "rsa_pem_data": [
                    "bytes"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "rsa_to_pem": {
            "name": "rsa_to_pem",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "rsa.RSAPrivateKeyWithSerialization"
                ]
            }
        },
        "to_pem": {
            "name": "to_pem",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "certificate": [
                    "x509.Certificate"
                ]
            }
        },
        "to_der": {
            "name": "to_der",
            "location": 58,
            "return": [
                "bytes"
            ],
            "arguments": {
                "certificate": [
                    "x509.Certificate"
                ]
            }
        }
    },
    "commandment-master/commandment/pki/ssl.py": {
        "generate_signing_request": {
            "name": "generate_signing_request",
            "location": 10,
            "return": [
                "(rsa.RSAPrivateKey, x509.CertificateSigningRequest)"
            ],
            "arguments": {
                "cn": [
                    "str"
                ],
                "dnsname": [
                    "Optional[str]"
                ]
            }
        },
        "generate_self_signed_certificate": {
            "name": "generate_self_signed_certificate",
            "location": 50,
            "return": [
                "(rsa.RSAPrivateKey, x509.Certificate)"
            ],
            "arguments": {
                "cn": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/commandment/plistutil/nonewriter.py": {
        "dump": {
            "name": "dump",
            "location": 36,
            "return": [],
            "arguments": {
                "value": [],
                "fp": []
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 47,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "PlistNoneWriter.write_dict": {
            "name": "write_dict",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        }
    },
    "commandment-master/commandment/plistutil/__init__.py": {},
    "commandment-master/commandment/profiles/ad.py": {},
    "commandment-master/commandment/profiles/api.py": {},
    "commandment-master/commandment/profiles/certificates.py": {},
    "commandment-master/commandment/profiles/eap.py": {},
    "commandment-master/commandment/profiles/email.py": {},
    "commandment-master/commandment/profiles/energy.py": {
        "ScheduledPowerEventWeekdays._generate_next_value_": {
            "name": "_generate_next_value_",
            "location": 13,
            "return": [],
            "arguments": {
                "name": [],
                "start": [],
                "count": [],
                "last_values": []
            }
        }
    },
    "commandment-master/commandment/profiles/models.py": {},
    "commandment-master/commandment/profiles/plist_schema.py": {
        "schema_for": {
            "name": "schema_for",
            "location": 17,
            "return": [
                "Union[(None, Type[Schema])]"
            ],
            "arguments": {
                "payload_type": [
                    "str"
                ]
            }
        },
        "register_payload_schema": {
            "name": "register_payload_schema",
            "location": 28,
            "return": [
                "Callable[([Type[Schema]], Type[Schema])]"
            ],
            "arguments": {}
        },
        "register_payload_schema.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [
                "Type[Schema]"
            ],
            "arguments": {
                "cls": [
                    "Type[Schema]"
                ]
            }
        },
        "SCEPPayload.wrap_payload_content": {
            "name": "wrap_payload_content",
            "location": 83,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "SCEPPayload.make_payload": {
            "name": "make_payload",
            "location": 101,
            "return": [
                "models.SCEPPayload"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "MDMPayload.make_payload": {
            "name": "make_payload",
            "location": 118,
            "return": [
                "models.MDMPayload"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ProfileSchema.get_payloads": {
            "name": "get_payloads",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ProfileSchema.load_payloads": {
            "name": "load_payloads",
            "location": 152,
            "return": [
                "List[Schema]"
            ],
            "arguments": {
                "self": [],
                "payload_content": [
                    "list"
                ]
            }
        },
        "ProfileSchema.make_profile": {
            "name": "make_profile",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "commandment-master/commandment/profiles/resources.py": {},
    "commandment-master/commandment/profiles/schema.py": {},
    "commandment-master/commandment/profiles/vpn.py": {},
    "commandment-master/commandment/profiles/wifi.py": {},
    "commandment-master/commandment/profiles/__init__.py": {},
    "commandment-master/commandment/threads/startup_thread.py": {
        "generate_ca": {
            "name": "generate_ca",
            "location": 29,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "split_pkcs12": {
            "name": "split_pkcs12",
            "location": 36,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "run_migrations": {
            "name": "run_migrations",
            "location": 80,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "startup_callback": {
            "name": "startup_callback",
            "location": 89,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 97,
            "return": [],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        }
    },
    "commandment-master/commandment/threads/vpp_thread.py": {},
    "commandment-master/commandment/threads/__init__.py": {},
    "commandment-master/commandment/vpp/app.py": {
        "token": {
            "name": "token",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "upload_token": {
            "name": "upload_token",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/vpp/cli.py": {},
    "commandment-master/commandment/vpp/decorators.py": {
        "raise_error_replies": {
            "name": "raise_error_replies",
            "location": 6,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "raise_error_replies.wrapper": {
            "name": "wrapper",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "commandment-master/commandment/vpp/enum.py": {},
    "commandment-master/commandment/vpp/errors.py": {
        "VPPAPIError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "errno": [],
                "message": []
            }
        }
    },
    "commandment-master/commandment/vpp/models.py": {
        "VPPAccount.stoken": {
            "name": "stoken",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/commandment/vpp/schema.py": {},
    "commandment-master/commandment/vpp/vpp.py": {
        "encode_stoken": {
            "name": "encode_stoken",
            "location": 24,
            "return": [
                "bytes"
            ],
            "arguments": {
                "token": [
                    "dict"
                ]
            }
        },
        "VPPCursor.batch_count": {
            "name": "batch_count",
            "location": 45,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPCursor.total": {
            "name": "total",
            "location": 50,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPCursor.batch_token": {
            "name": "batch_token",
            "location": 55,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPCursor.since_modified_token": {
            "name": "since_modified_token",
            "location": 60,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPCursor.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "since_modified_token": [
                    "str"
                ],
                "vpp": []
            }
        },
        "VPPUserCursor.users": {
            "name": "users",
            "location": 81,
            "return": [
                "Optional[List[dict]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPUserCursor.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "includes_retired": [
                    "bool"
                ],
                "vpp": []
            }
        },
        "VPPUserCursor.next": {
            "name": "next",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseCursor.licenses": {
            "name": "licenses",
            "location": 110,
            "return": [
                "Optional[List[dict]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseCursor.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseCursor.next": {
            "name": "next",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseOperation.adam_id": {
            "name": "adam_id",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseOperation.pricing_param": {
            "name": "pricing_param",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseOperation.associations": {
            "name": "associations",
            "location": 152,
            "return": [
                "Tuple[(LicenseAssociationType, List[LicenseAssociation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseOperation.disassociations": {
            "name": "disassociations",
            "location": 156,
            "return": [
                "Tuple[(LicenseDisassociationType, List[LicenseDisassociation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPLicenseOperation.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adam_id": [
                    "int"
                ],
                "pricing_param": [
                    "str"
                ],
                "license_association_type": [
                    "Optional[LicenseAssociationType]"
                ],
                "license_disassociation_type": [
                    "Optional[LicenseDisassociationType]"
                ]
            }
        },
        "VPPLicenseOperation.add": {
            "name": "add",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "association_type": [
                    "LicenseAssociationType"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "VPPLicenseOperation.additions_for_type": {
            "name": "additions_for_type",
            "location": 177,
            "return": [
                "Iterator[LicenseAssociation]"
            ],
            "arguments": {
                "self": [],
                "association_type": [
                    "LicenseAssociationType"
                ]
            }
        },
        "VPPLicenseOperation.remove": {
            "name": "remove",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "disassociation_type": [
                    "LicenseDisassociationType"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "VPPLicenseOperation.removals_for_type": {
            "name": "removals_for_type",
            "location": 188,
            "return": [
                "Iterator[LicenseDisassociation]"
            ],
            "arguments": {
                "self": [],
                "disassociation_type": [
                    "LicenseDisassociationType"
                ]
            }
        },
        "VPPUserLicenseOperation.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPPDeviceLicenseOperation.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VPP.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stoken": [
                    "str"
                ],
                "vpp_service_config_url": [
                    "str"
                ],
                "service_config": [
                    "dict"
                ]
            }
        },
        "VPP._fetch_config": {
            "name": "_fetch_config",
            "location": 264,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "service_config_url": [
                    "str"
                ]
            }
        },
        "VPP.register_user": {
            "name": "register_user",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "client_user_id": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "facilitator_member_id": [
                    "str"
                ],
                "managed_apple_id": [
                    "str"
                ]
            }
        },
        "VPP.get_user": {
            "name": "get_user",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "client_user_id": [
                    "str"
                ],
                "its_id_hash": [
                    "str"
                ],
                "facilitator_member_id": [
                    "str"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "VPP.users": {
            "name": "users",
            "location": 333,
            "return": [
                "VPPUserCursor"
            ],
            "arguments": {
                "self": [],
                "include_retired": [
                    "int"
                ],
                "facilitator_member_id": [
                    "str"
                ],
                "batch_token": [
                    "str"
                ],
                "since_modified_token": [
                    "str"
                ]
            }
        },
        "VPP.retire_user": {
            "name": "retire_user",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "client_user_id": [
                    "str"
                ],
                "facilitator_member_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "VPP.edit_user": {
            "name": "edit_user",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "client_user_id": [
                    "str"
                ],
                "facilitator_member_id": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "managed_apple_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "VPP.assets": {
            "name": "assets",
            "location": 421,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "include_license_counts": [
                    "bool"
                ],
                "facilitator_member_id": [
                    "str"
                ]
            }
        },
        "VPP.manage": {
            "name": "manage",
            "location": 440,
            "return": [
                "VPPLicenseOperation"
            ],
            "arguments": {
                "self": [],
                "adam_id": [
                    "int"
                ],
                "pricing_param": [
                    "str"
                ]
            }
        },
        "VPP.manage_user_licenses": {
            "name": "manage_user_licenses",
            "location": 456,
            "return": [
                "VPPUserLicenseOperation"
            ],
            "arguments": {
                "self": [],
                "adam_id": [
                    "int"
                ],
                "pricing_param": [
                    "str"
                ]
            }
        },
        "VPP.manage_device_licenses": {
            "name": "manage_device_licenses",
            "location": 472,
            "return": [
                "VPPDeviceLicenseOperation"
            ],
            "arguments": {
                "self": [],
                "adam_id": [
                    "int"
                ],
                "pricing_param": [
                    "str"
                ]
            }
        },
        "VPP.licenses": {
            "name": "licenses",
            "location": 488,
            "return": [
                "VPPLicenseCursor"
            ],
            "arguments": {
                "self": [],
                "adam_id": [
                    "int"
                ],
                "pricing_param": [
                    "Optional[VPPPricingParam]"
                ],
                "assigned_only": [
                    "bool"
                ],
                "facilitator_member_id": [
                    "str"
                ],
                "batch_token": [
                    "str"
                ],
                "since_modified_token": [
                    "str"
                ]
            }
        },
        "VPP.save": {
            "name": "save",
            "location": 532,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "VPPLicenseOperation"
                ],
                "notify": [
                    "bool"
                ]
            }
        },
        "VPP.bulk_update_licenses": {
            "name": "bulk_update_licenses",
            "location": 560,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "adam_id": [
                    "int"
                ],
                "association_type": [
                    "Optional[LicenseAssociationType]"
                ],
                "associate": [
                    "Optional[List[str]]"
                ],
                "disassociation_type": [
                    "Optional[LicenseDisassociationType]"
                ],
                "disassociate": [
                    "Optional[List[str]]"
                ],
                "pricing_param": [
                    "str"
                ],
                "notify": [
                    "bool"
                ]
            }
        }
    },
    "commandment-master/commandment/vpp/__init__.py": {
        "get_vpp": {
            "name": "get_vpp",
            "location": 7,
            "return": [
                "VPP"
            ],
            "arguments": {}
        }
    },
    "commandment-master/doc/conf.py": {},
    "commandment-master/doc/sadisplay/models.py": {},
    "commandment-master/tests/client.py": {
        "MDMClient.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/tests/conftest.py": {
        "app": {
            "name": "app",
            "location": 24,
            "return": [
                "Generator[(Flask, None, None)]"
            ],
            "arguments": {}
        },
        "db": {
            "name": "db",
            "location": 39,
            "return": [
                "Generator[(SQLAlchemy, None, None)]"
            ],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 48,
            "return": [
                "Generator[(scoped_session, None, None)]"
            ],
            "arguments": {
                "db": [
                    "SQLAlchemy"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 78,
            "return": [
                "MDMClient"
            ],
            "arguments": {
                "app": [
                    "Flask"
                ]
            }
        }
    },
    "commandment-master/tests/test_api_flat.py": {},
    "commandment-master/tests/test_mdmcert.py": {
        "private_key": {
            "name": "private_key",
            "location": 16,
            "return": [
                "rsa.RSAPrivateKey"
            ],
            "arguments": {}
        },
        "csr": {
            "name": "csr",
            "location": 26,
            "return": [
                "x509.CertificateSigningRequest"
            ],
            "arguments": {
                "private_key": [
                    "rsa.RSAPrivateKey"
                ]
            }
        },
        "encryption_cert": {
            "name": "encryption_cert",
            "location": 40,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {}
        }
    },
    "commandment-master/tests/__init__.py": {},
    "commandment-master/tests/api/conftest.py": {
        "device": {
            "name": "device",
            "location": 12,
            "return": [],
            "arguments": {
                "session": [
                    "Session"
                ]
            }
        }
    },
    "commandment-master/tests/api/test_devices.py": {
        "TestDevicesAPI.test_patch_device_name": {
            "name": "test_patch_device_name",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "session": []
            }
        },
        "TestDevicesAPI.test_patch_hostname": {
            "name": "test_patch_hostname",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "session": []
            }
        },
        "TestDevicesAPI.test_patch_hostname_ios": {
            "name": "test_patch_hostname_ios",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDevicesAPI.test_patch_device_name_reverted": {
            "name": "test_patch_device_name_reverted",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "session": []
            }
        },
        "TestDevicesAPI.test_patch_device_name_coalesced": {
            "name": "test_patch_device_name_coalesced",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "session": []
            }
        }
    },
    "commandment-master/tests/api/__init__.py": {},
    "commandment-master/tests/dep/conftest.py": {
        "simulator_token": {
            "name": "simulator_token",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "live_token": {
            "name": "live_token",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "live_device": {
            "name": "live_device",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "live_dep_profile": {
            "name": "live_dep_profile",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "dep": {
            "name": "dep",
            "location": 40,
            "return": [
                "DEP"
            ],
            "arguments": {
                "simulator_token": [
                    "dict"
                ]
            }
        },
        "dep_live": {
            "name": "dep_live",
            "location": 53,
            "return": [],
            "arguments": {
                "live_token": [
                    "str"
                ]
            }
        },
        "dep_profile": {
            "name": "dep_profile",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "dep_profile_committed": {
            "name": "dep_profile_committed",
            "location": 82,
            "return": [],
            "arguments": {
                "dep_profile": [
                    "dict"
                ],
                "session": [
                    "Session"
                ]
            }
        },
        "device": {
            "name": "device",
            "location": 89,
            "return": [],
            "arguments": {
                "session": [
                    "Session"
                ]
            }
        }
    },
    "commandment-master/tests/dep/test_dep.py": {
        "TestDEP.test_account": {
            "name": "test_account",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "dep": [
                    "DEP"
                ]
            }
        },
        "TestDEP.test_fetch_devices": {
            "name": "test_fetch_devices",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "dep": [
                    "DEP"
                ]
            }
        },
        "TestDEP.test_fetch_cursor": {
            "name": "test_fetch_cursor",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "dep": [
                    "DEP"
                ]
            }
        }
    },
    "commandment-master/tests/dep/test_dep_app.py": {
        "TestDEPAPI.test_post_dep_profile_relationship": {
            "name": "test_post_dep_profile_relationship",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "session": []
            }
        }
    },
    "commandment-master/tests/dep/test_dep_failures.py": {
        "TestDEPFailures.test_token_failure": {
            "name": "test_token_failure",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "dep": [
                    "DEP"
                ],
                "expected_status": [
                    "int"
                ],
                "expected_text": [
                    "str"
                ]
            }
        },
        "TestDEPFailures.test_account_failure": {
            "name": "test_account_failure",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "dep": [
                    "DEP"
                ],
                "expected_status": [
                    "int"
                ],
                "expected_text": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/tests/dep/test_dep_live.py": {
        "TestDEPLive.test_account": {
            "name": "test_account",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "dep_live": [
                    "DEP"
                ]
            }
        },
        "TestDEPLive.test_fetch_devices": {
            "name": "test_fetch_devices",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dep_live": [
                    "DEP"
                ]
            }
        },
        "TestDEPLive.test_device_details": {
            "name": "test_device_details",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "dep_live": [
                    "DEP"
                ],
                "live_device": [
                    "str"
                ]
            }
        },
        "TestDEPLive.test_get_profile": {
            "name": "test_get_profile",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "dep_live": [
                    "DEP"
                ],
                "live_dep_profile": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/tests/dep/test_smime.py": {
        "TestDepSmime.test_decrypt": {
            "name": "test_decrypt",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "commandment-master/tests/dep/__init__.py": {},
    "commandment-master/tests/mdm/conftest.py": {
        "device": {
            "name": "device",
            "location": 12,
            "return": [],
            "arguments": {
                "session": [
                    "Session"
                ]
            }
        },
        "authenticate_request": {
            "name": "authenticate_request",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "tokenupdate_request": {
            "name": "tokenupdate_request",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "tokenupdate_user_request": {
            "name": "tokenupdate_user_request",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "checkout_request": {
            "name": "checkout_request",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "available_os_updates_request": {
            "name": "available_os_updates_request",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "commandment-master/tests/mdm/test_available_os_updates.py": {
        "available_os_updates_command": {
            "name": "available_os_updates_command",
            "location": 13,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "TestAvailableOSUpdates.test_available_os_updates_response": {
            "name": "test_available_os_updates_response",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "available_os_updates_request": [
                    "str"
                ],
                "session": []
            }
        }
    },
    "commandment-master/tests/mdm/test_certificate_list.py": {
        "certificate_list_response": {
            "name": "certificate_list_response",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "certificate_list_command": {
            "name": "certificate_list_command",
            "location": 20,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "TestCertificateList.test_certificate_list_response": {
            "name": "test_certificate_list_response",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "certificate_list_response": [
                    "str"
                ],
                "session": []
            }
        }
    },
    "commandment-master/tests/mdm/test_checkin.py": {
        "TestCheckin.test_authenticate": {
            "name": "test_authenticate",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "authenticate_request": [
                    "str"
                ]
            }
        },
        "TestCheckin.test_tokenupdate": {
            "name": "test_tokenupdate",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "tokenupdate_request": [
                    "str"
                ]
            }
        },
        "TestCheckin.test_checkout": {
            "name": "test_checkout",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "checkout_request": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/tests/mdm/test_device_information.py": {
        "device_information_response": {
            "name": "device_information_response",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "TestDeviceInformation.test_device_information_response": {
            "name": "test_device_information_response",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "device_information_response": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/tests/mdm/test_installed_application_list.py": {
        "installed_application_list_response": {
            "name": "installed_application_list_response",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "installed_application_list_command": {
            "name": "installed_application_list_command",
            "location": 20,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "TestInstalledApplicationList.test_installed_application_list_response": {
            "name": "test_installed_application_list_response",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "installed_application_list_response": [
                    "str"
                ],
                "session": []
            }
        }
    },
    "commandment-master/tests/mdm/test_profile_list.py": {
        "profile_list_response": {
            "name": "profile_list_response",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestProfileList.test_profile_list_response": {
            "name": "test_profile_list_response",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "profile_list_response": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/tests/mdm/test_security_info.py": {
        "security_info_response": {
            "name": "security_info_response",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "security_info_command": {
            "name": "security_info_command",
            "location": 21,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "TestSecurityInfo.test_security_info_response": {
            "name": "test_security_info_response",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "MDMClient"
                ],
                "security_info_response": [
                    "str"
                ],
                "session": []
            }
        }
    },
    "commandment-master/tests/mdm/__init__.py": {},
    "commandment-master/tests/pkg/__init__.py": {},
    "commandment-master/tests/pki/conftest.py": {
        "private_key": {
            "name": "private_key",
            "location": 11,
            "return": [
                "rsa.RSAPrivateKey"
            ],
            "arguments": {}
        },
        "csr": {
            "name": "csr",
            "location": 21,
            "return": [
                "x509.CertificateSigningRequest"
            ],
            "arguments": {
                "private_key": [
                    "rsa.RSAPrivateKey"
                ]
            }
        },
        "certificate": {
            "name": "certificate",
            "location": 35,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "private_key": [
                    "rsa.RSAPrivateKey"
                ]
            }
        },
        "ca_certificate": {
            "name": "ca_certificate",
            "location": 59,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "private_key": [
                    "rsa.RSAPrivateKey"
                ]
            }
        }
    },
    "commandment-master/tests/pki/test_ca.py": {},
    "commandment-master/tests/pki/test_models.py": {
        "TestModels.test_rsa_privatekey_from_crypto": {
            "name": "test_rsa_privatekey_from_crypto",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "private_key": [
                    "rsa.RSAPrivateKeyWithSerialization"
                ],
                "session": []
            }
        },
        "TestModels.test_ca_certificate_from_crypto": {
            "name": "test_ca_certificate_from_crypto",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "ca_certificate": [
                    "x509.Certificate"
                ],
                "session": []
            }
        }
    },
    "commandment-master/tests/pki/test_openssl.py": {
        "TestOpenssl.test_pkcs12_from_crypto": {
            "name": "test_pkcs12_from_crypto",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "private_key": [
                    "rsa.RSAPrivateKeyWithSerialization"
                ],
                "certificate": [
                    "x509.Certificate"
                ]
            }
        }
    },
    "commandment-master/tests/pki/test_ormutils.py": {
        "TestORMUtils.test_find_recipient": {
            "name": "test_find_recipient",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "certificate": []
            }
        }
    },
    "commandment-master/tests/pki/__init__.py": {},
    "commandment-master/tests/threads/test_startup_thread.py": {
        "TestStartupThread.test_startup_thread_ca": {
            "name": "test_startup_thread_ca",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "commandment-master/tests/threads/__init__.py": {},
    "commandment-master/tests/vpp/conftest.py": {
        "simulator_token": {
            "name": "simulator_token",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "vpp": {
            "name": "vpp",
            "location": 36,
            "return": [
                "VPP"
            ],
            "arguments": {
                "simulator_token": [
                    "str"
                ]
            }
        }
    },
    "commandment-master/tests/vpp/vpp_test.py": {
        "TestVPP.test_vpp_register_user": {
            "name": "test_vpp_register_user",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_getuser_by_client_id": {
            "name": "test_getuser_by_client_id",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_getuser_by_user_id": {
            "name": "test_getuser_by_user_id",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_retireuser_by_client_id": {
            "name": "test_retireuser_by_client_id",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_edit_user_by_client_id": {
            "name": "test_edit_user_by_client_id",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_get_assets": {
            "name": "test_get_assets",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_users": {
            "name": "test_users",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_licenses": {
            "name": "test_licenses",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        },
        "TestVPP.test_manage_one_license": {
            "name": "test_manage_one_license",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "vpp": [
                    "VPP"
                ]
            }
        }
    },
    "commandment-master/tests/vpp/__init__.py": {}
}
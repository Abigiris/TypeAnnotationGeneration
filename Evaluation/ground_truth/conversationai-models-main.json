{
    "conversationai-models-main/annotator_models/trainer/dawid_skene.py": {
        "run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "items": [],
                "raters": [],
                "classes": [],
                "counts": [],
                "label": [],
                "psuedo_count": [],
                "tol": [],
                "max_iter": [],
                "init": []
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 99,
            "return": [],
            "arguments": {
                "path": [],
                "unit_id": [],
                "worker_id": [],
                "label": []
            }
        },
        "initialize": {
            "name": "initialize",
            "location": 110,
            "return": [],
            "arguments": {
                "counts": []
            }
        },
        "m_step": {
            "name": "m_step",
            "location": 140,
            "return": [],
            "arguments": {
                "counts": [],
                "item_classes": [],
                "psuedo_count": []
            }
        },
        "m_step_verbose": {
            "name": "m_step_verbose",
            "location": 186,
            "return": [],
            "arguments": {
                "counts": [],
                "item_classes": [],
                "psuedo_count": []
            }
        },
        "e_step": {
            "name": "e_step",
            "location": 233,
            "return": [],
            "arguments": {
                "counts_tiled": [],
                "class_marginals": [],
                "error_rates": []
            }
        },
        "e_step_verbose": {
            "name": "e_step_verbose",
            "location": 268,
            "return": [],
            "arguments": {
                "counts": [],
                "class_marginals": [],
                "error_rates": []
            }
        },
        "calc_likelihood": {
            "name": "calc_likelihood",
            "location": 306,
            "return": [],
            "arguments": {
                "counts": [],
                "class_marginals": [],
                "error_rates": []
            }
        },
        "random_initialization": {
            "name": "random_initialization",
            "location": 347,
            "return": [],
            "arguments": {
                "counts": []
            }
        },
        "majority_voting": {
            "name": "majority_voting",
            "location": 376,
            "return": [],
            "arguments": {
                "counts": []
            }
        },
        "parse_item_classes": {
            "name": "parse_item_classes",
            "location": 404,
            "return": [],
            "arguments": {
                "df": [],
                "label": [],
                "item_classes": [],
                "index_to_unit_id_map": [],
                "index_to_y_map": [],
                "unit_id": [],
                "worker_id": [],
                "comment_text_path": []
            }
        },
        "parse_error_rates": {
            "name": "parse_error_rates",
            "location": 468,
            "return": [],
            "arguments": {
                "df": [],
                "error_rates": [],
                "index_to_worker_id_map": [],
                "index_to_y_map": [],
                "unit_id": [],
                "worker_id": []
            }
        },
        "main": {
            "name": "main",
            "location": 510,
            "return": [],
            "arguments": {
                "FLAGS": []
            }
        }
    },
    "conversationai-models-main/annotator_models/trainer/dawid_skene_test.py": {
        "DawidSkeneTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DawidSkeneTest.test_paper_example": {
            "name": "test_paper_example",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/annotator_models/trainer/__init__.py": {},
    "conversationai-models-main/attention-tutorial/process_figshare.py": {
        "download_figshare": {
            "name": "download_figshare",
            "location": 40,
            "return": [],
            "arguments": {
                "download_data_dir": []
            }
        },
        "process_figshare": {
            "name": "process_figshare",
            "location": 65,
            "return": [],
            "arguments": {
                "input_data_dir": [],
                "output_data_dir": []
            }
        }
    },
    "conversationai-models-main/attention-tutorial/visualize_attention.py": {
        "wordVal.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "val": []
            }
        },
        "wordVal.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "attentionDisplay.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_processor": [],
                "classifier": [],
                "words_feature": []
            }
        },
        "attentionDisplay._rgb_to_hex": {
            "name": "_rgb_to_hex",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "rgb": []
            }
        },
        "attentionDisplay._color_wordvals": {
            "name": "_color_wordvals",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "attentionDisplay._predict_sentence": {
            "name": "_predict_sentence",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "input_string": []
            }
        },
        "attentionDisplay._resize_and_tokenize": {
            "name": "_resize_and_tokenize",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "input_string": []
            }
        },
        "attentionDisplay.display_prediction_attention": {
            "name": "display_prediction_attention",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "input_string": []
            }
        }
    },
    "conversationai-models-main/data_preparation/run_preprocessing_artificial_bias.py": {
        "_parse_arguments": {
            "name": "_parse_arguments",
            "location": 13,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "_set_logging": {
            "name": "_set_logging",
            "location": 39,
            "return": [],
            "arguments": {
                "log_level": []
            }
        },
        "_parse_config": {
            "name": "_parse_config",
            "location": 43,
            "return": [],
            "arguments": {
                "env": [],
                "config_file_path": []
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "conversationai-models-main/data_preparation/run_preprocessing_data_split.py": {
        "_parse_arguments": {
            "name": "_parse_arguments",
            "location": 13,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "_set_logging": {
            "name": "_set_logging",
            "location": 45,
            "return": [],
            "arguments": {
                "log_level": []
            }
        },
        "_parse_config": {
            "name": "_parse_config",
            "location": 49,
            "return": [],
            "arguments": {
                "env": [],
                "config_file_path": []
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "conversationai-models-main/data_preparation/setup.py": {},
    "conversationai-models-main/data_preparation/preprocessing/constants.py": {},
    "conversationai-models-main/data_preparation/preprocessing/preprocessing.py": {},
    "conversationai-models-main/data_preparation/preprocessing/tfrecord_utils.py": {
        "Schema.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "Schema.as_feature_spec": {
            "name": "as_feature_spec",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecodeTFRecord.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "feature_spec": [],
                "optional_field_names": [],
                "rule_optional_fn": []
            }
        },
        "DecodeTFRecord.process": {
            "name": "process",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "EncodeTFRecord.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "feature_spec": [],
                "optional_field_names": []
            }
        },
        "EncodeTFRecord.process": {
            "name": "process",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        }
    },
    "conversationai-models-main/data_preparation/preprocessing/__init__.py": {},
    "conversationai-models-main/experiments/setup.py": {},
    "conversationai-models-main/experiments/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/common/base_model.py": {
        "BaseModel.map": {
            "name": "map",
            "location": 48,
            "return": [
                "'BaseModel'"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([tf.estimator.Estimator], tf.estimator.Estimator)]"
                ]
            }
        },
        "BaseModel.estimator": {
            "name": "estimator",
            "location": 68,
            "return": [
                "tf.estimator.Estimator"
            ],
            "arguments": {
                "self": [],
                "model_dir": [
                    "str"
                ]
            }
        },
        "BaseModel.hparams": {
            "name": "hparams",
            "location": 71,
            "return": [
                "tf.contrib.training.HParams"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.map.Model.estimator": {
            "name": "estimator",
            "location": 57,
            "return": [],
            "arguments": {
                "unused": [],
                "model_dir": []
            }
        },
        "BaseModel.map.Model.hparams": {
            "name": "hparams",
            "location": 61,
            "return": [],
            "arguments": {
                "unused": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/cnn_spec_parser.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str"
                ]
            }
        },
        "Filter.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrentFilters.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str"
                ]
            }
        },
        "ConcurrentFilters.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequentialLayers.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str"
                ]
            }
        },
        "SequentialLayers.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/cnn_spec_parser_test.py": {
        "CnnSpecParserTest.test_SequentialLayers": {
            "name": "test_SequentialLayers",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/dataset_input.py": {
        "DatasetInput.train_input_fn": {
            "name": "train_input_fn",
            "location": 33,
            "return": [
                "types.EstimatorInput"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetInput.validate_input_fn": {
            "name": "validate_input_fn",
            "location": 37,
            "return": [
                "types.EstimatorInput"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/episodic_tfrecord_input.py": {
        "EpisodicTFRecordInput.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_dir": [],
                "validate_dir": []
            }
        },
        "EpisodicTFRecordInput.train_input_fn": {
            "name": "train_input_fn",
            "location": 51,
            "return": [
                "types.FeatureAndLabelTensors"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodicTFRecordInput.validate_input_fn": {
            "name": "validate_input_fn",
            "location": 61,
            "return": [
                "types.FeatureAndLabelTensors"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodicTFRecordInput._get_randomized_episodes": {
            "name": "_get_randomized_episodes",
            "location": 64,
            "return": [
                "List[EpisodeData]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ]
            }
        },
        "EpisodicTFRecordInput._dataset_from_tfrecord_file": {
            "name": "_dataset_from_tfrecord_file",
            "location": 83,
            "return": [
                "EpisodeData"
            ],
            "arguments": {
                "self": [],
                "tfrecord_file": [
                    "str"
                ]
            }
        },
        "EpisodicTFRecordInput._dataset_from_tfrecord_file._read_tf_example": {
            "name": "_read_tf_example",
            "location": 87,
            "return": [
                "TextDomainLabel"
            ],
            "arguments": {
                "record": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/episodic_tfrecord_input_test.py": {
        "EpisodicTFRecordInputTest.test": {
            "name": "test",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/model_trainer.py": {
        "forward_features": {
            "name": "forward_features",
            "location": 114,
            "return": [],
            "arguments": {
                "estimator": [],
                "keys": [],
                "sparse_default_values": []
            }
        },
        "InitHook.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint_dir": []
            }
        },
        "InitHook.begin": {
            "name": "begin",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "forward_features.verify_key_types": {
            "name": "verify_key_types",
            "location": 152,
            "return": [],
            "arguments": {
                "keys": []
            }
        },
        "forward_features.get_keys": {
            "name": "get_keys",
            "location": 166,
            "return": [],
            "arguments": {
                "features": []
            }
        },
        "forward_features.verify_keys_and_predictions": {
            "name": "verify_keys_and_predictions",
            "location": 171,
            "return": [],
            "arguments": {
                "features": [],
                "predictions": []
            }
        },
        "forward_features.new_model_fn": {
            "name": "new_model_fn",
            "location": 190,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": [],
                "config": []
            }
        },
        "ModelTrainer.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "ds.DatasetInput"
                ],
                "model": [
                    "base_model.BaseModel"
                ],
                "warm_start_from": [
                    "str"
                ]
            }
        },
        "ModelTrainer.train_with_eval": {
            "name": "train_with_eval",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelTrainer.predict_on_dev": {
            "name": "predict_on_dev",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "predict_keys": []
            }
        },
        "ModelTrainer.eval_dir": {
            "name": "eval_dir",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelTrainer._model_dir": {
            "name": "_model_dir",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelTrainer._add_estimator_key": {
            "name": "_add_estimator_key",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "estimator": [],
                "example_key_name": []
            }
        },
        "ModelTrainer._get_best_step_from_event_file": {
            "name": "_get_best_step_from_event_file",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "event_file": [],
                "metrics_key": [],
                "is_first_metric_better_fn": []
            }
        },
        "ModelTrainer._get_best_checkpoint": {
            "name": "_get_best_checkpoint",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoints": [],
                "metrics_key": [],
                "is_first_metric_better_fn": []
            }
        },
        "ModelTrainer._get_list_checkpoint": {
            "name": "_get_list_checkpoint",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "n_export": [],
                "model_dir": [],
                "metrics_key": [],
                "is_first_metric_better_fn": []
            }
        },
        "ModelTrainer.export": {
            "name": "export",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "serving_input_fn": [],
                "example_key_name": [],
                "metrics_key": [],
                "is_first_metric_better_fn": [],
                "delete_unexported_checkpoints": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/serving_input.py": {
        "create_text_serving_input_fn": {
            "name": "create_text_serving_input_fn",
            "location": 12,
            "return": [],
            "arguments": {
                "text_feature_name": [],
                "example_key_name": []
            }
        },
        "create_serving_input_fn": {
            "name": "create_serving_input_fn",
            "location": 32,
            "return": [],
            "arguments": {
                "word_to_idx": [],
                "unknown_token": [],
                "text_feature_name": [],
                "example_key_name": []
            }
        },
        "create_text_serving_input_fn.serving_input_fn_tfrecords": {
            "name": "serving_input_fn_tfrecords",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "create_serving_input_fn.serving_input_fn_tfrecords": {
            "name": "serving_input_fn_tfrecords",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/text_preprocessor.py": {
        "TextPreprocessor.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddings_path": [
                    "str"
                ]
            }
        },
        "TextPreprocessor.train_preprocess_fn": {
            "name": "train_preprocess_fn",
            "location": 53,
            "return": [
                "Callable[([types.Tensor], types.Tensor)]"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "Callable[([str], List[str])]"
                ],
                "lowercase": [
                    "Optional[bool]"
                ]
            }
        },
        "TextPreprocessor.add_embedding_to_model": {
            "name": "add_embedding_to_model",
            "location": 92,
            "return": [
                "base_model.BaseModel"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "base_model.BaseModel"
                ],
                "text_feature_name": [
                    "str"
                ]
            }
        },
        "TextPreprocessor.create_estimator_with_embedding": {
            "name": "create_estimator_with_embedding",
            "location": 104,
            "return": [
                "tf.estimator.Estimator"
            ],
            "arguments": {
                "self": [],
                "text_feature_name": [
                    "str"
                ],
                "estimator": [
                    "tf.estimator.Estimator"
                ]
            }
        },
        "TextPreprocessor.word_to_idx": {
            "name": "word_to_idx",
            "location": 173,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextPreprocessor.unknown_token": {
            "name": "unknown_token",
            "location": 176,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextPreprocessor.word_embeddings": {
            "name": "word_embeddings",
            "location": 179,
            "return": [
                "tf.Variable"
            ],
            "arguments": {
                "self": [],
                "trainable": []
            }
        },
        "TextPreprocessor.train_preprocess_fn._tokenize": {
            "name": "_tokenize",
            "location": 58,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "text": [
                    "bytes"
                ]
            }
        },
        "TextPreprocessor.train_preprocess_fn._preprocess_fn": {
            "name": "_preprocess_fn",
            "location": 77,
            "return": [
                "types.Tensor"
            ],
            "arguments": {
                "text": [
                    "types.Tensor"
                ]
            }
        },
        "TextPreprocessor.create_estimator_with_embedding.add_init_fn_to_estimatorSpec": {
            "name": "add_init_fn_to_estimatorSpec",
            "location": 124,
            "return": [],
            "arguments": {
                "estimator_spec": [],
                "init_fn": []
            }
        },
        "TextPreprocessor.create_estimator_with_embedding.new_model_fn": {
            "name": "new_model_fn",
            "location": 148,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": [],
                "params": [],
                "config": []
            }
        },
        "TextPreprocessor.word_embeddings.init_fn": {
            "name": "init_fn",
            "location": 185,
            "return": [],
            "arguments": {
                "scaffold": [],
                "sess": []
            }
        },
        "TextPreprocessor.create_estimator_with_embedding.add_init_fn_to_estimatorSpec.new_init_fn": {
            "name": "new_init_fn",
            "location": 127,
            "return": [],
            "arguments": {
                "scaffold": [],
                "sess": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/text_preprocessor_test.py": {
        "TextPreprocessorTest.test_Tokenize": {
            "name": "test_Tokenize",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextPreprocessorTest.test_Lowercase": {
            "name": "test_Lowercase",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/tfrecord_input.py": {
        "TFRecordInput.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInput.labels": {
            "name": "labels",
            "location": 64,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInput.text_feature": {
            "name": "text_feature",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInput.train_input_fn": {
            "name": "train_input_fn",
            "location": 72,
            "return": [
                "tf.data.TFRecordDataset"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInput.validate_input_fn": {
            "name": "validate_input_fn",
            "location": 81,
            "return": [
                "tf.data.TFRecordDataset"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInput._keys_to_features": {
            "name": "_keys_to_features",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInput._input_fn_from_file": {
            "name": "_input_fn_from_file",
            "location": 94,
            "return": [
                "tf.data.TFRecordDataset"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "TFRecordInput._process_labels": {
            "name": "_process_labels",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "parsed": []
            }
        },
        "TFRecordInput._read_tf_example": {
            "name": "_read_tf_example",
            "location": 132,
            "return": [
                "types.FeatureAndLabelTensors"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "tf.Tensor"
                ]
            }
        },
        "TFRecordInputWithTokenizer.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_preprocess_fn": [
                    "Callable[([str], List[str])]"
                ],
                "max_seq_len": [
                    "int"
                ]
            }
        },
        "TFRecordInputWithTokenizer._input_fn_from_file": {
            "name": "_input_fn_from_file",
            "location": 167,
            "return": [
                "types.FeatureAndLabelTensors"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "TFRecordInputWithTokenizer._read_tf_example": {
            "name": "_read_tf_example",
            "location": 197,
            "return": [
                "types.FeatureAndLabelTensors"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "tf.Tensor"
                ]
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/tfrecord_input_test.py": {
        "TFRecordInputTest.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInputTest.test_TFRecordInput_unrounded": {
            "name": "test_TFRecordInput_unrounded",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInputTest.test_TFRecordInput_default_values": {
            "name": "test_TFRecordInput_default_values",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInputTest.test_TFRecordInput_rounded": {
            "name": "test_TFRecordInput_rounded",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInputWithTokenizerTest.setUp": {
            "name": "setUp",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInputWithTokenizerTest.preprocessor": {
            "name": "preprocessor",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TFRecordInputWithTokenizerTest.test_TFRecordInputWithTokenizer_unrounded": {
            "name": "test_TFRecordInputWithTokenizer_unrounded",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInputWithTokenizerTest.test_TFRecordInputWithTokenizer_default_values": {
            "name": "test_TFRecordInputWithTokenizer_default_values",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordInputWithTokenizerTest.test_TFRecordInputWithTokenizer_rounded": {
            "name": "test_TFRecordInputWithTokenizer_rounded",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/token_embedding_index.py": {
        "LoadTokenIdxEmbeddings": {
            "name": "LoadTokenIdxEmbeddings",
            "location": 22,
            "return": [
                "Tuple[(Dict[(str, int)], np.ndarray, int, int)]"
            ],
            "arguments": {
                "embeddings_path": [
                    "str"
                ]
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/token_embedding_index_test.py": {
        "LoadTokenIdxEmbeddingsTest.test_LoadTokenIdxEmbeddings": {
            "name": "test_LoadTokenIdxEmbeddings",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/common/types.py": {},
    "conversationai-models-main/experiments/tf_trainer/common/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/tf_char_cnn/model.py": {
        "TFCharCNNModel.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_labels": [
                    "Set[str]"
                ]
            }
        },
        "TFCharCNNModel.hparams": {
            "name": "hparams",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "TFCharCNNModel.estimator": {
            "name": "estimator",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "model_dir": []
            }
        },
        "TFCharCNNModel._model_fn": {
            "name": "_model_fn",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "labels": [],
                "mode": [],
                "params": [],
                "config": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_char_cnn/run.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_char_cnn/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/tf_cnn/finetune.py": {
        "main": {
            "name": "main",
            "location": 34,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_cnn/model.py": {
        "TFCNNModel.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_labels": [
                    "Set[str]"
                ]
            }
        },
        "TFCNNModel.hparams": {
            "name": "hparams",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "TFCNNModel.estimator": {
            "name": "estimator",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "model_dir": []
            }
        },
        "TFCNNModel._model_fn": {
            "name": "_model_fn",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "labels": [],
                "mode": [],
                "params": [],
                "config": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_cnn/run.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_cnn/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/tf_gru_attention/finetune.py": {
        "main": {
            "name": "main",
            "location": 34,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_gru_attention/model.py": {
        "attend": {
            "name": "attend",
            "location": 33,
            "return": [],
            "arguments": {
                "inputs": [],
                "attention_size": [],
                "attention_depth": []
            }
        },
        "TFRNNModel.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_labels": [
                    "Set[str]"
                ]
            }
        },
        "TFRNNModel.hparams": {
            "name": "hparams",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "TFRNNModel.estimator": {
            "name": "estimator",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "model_dir": []
            }
        },
        "TFRNNModel._model_fn": {
            "name": "_model_fn",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "labels": [],
                "mode": [],
                "params": [],
                "config": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_gru_attention/run.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_gru_attention/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/tf_hub_classifier/finetune.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_hub_classifier/model.py": {
        "TFHubClassifierModel.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_labels": [
                    "List[str]"
                ]
            }
        },
        "TFHubClassifierModel.hparams": {
            "name": "hparams",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "TFHubClassifierModel.estimator": {
            "name": "estimator",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "model_dir": []
            }
        },
        "TFHubClassifierModel._model_fn": {
            "name": "_model_fn",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "labels": [],
                "mode": [],
                "params": [],
                "config": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_hub_classifier/run.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_hub_classifier/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/tf_hub_tfjs/model.py": {
        "TFHubClassifierModel.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_labels": [
                    "List[str]"
                ]
            }
        },
        "TFHubClassifierModel.hparams": {
            "name": "hparams",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "TFHubClassifierModel.estimator": {
            "name": "estimator",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "model_dir": []
            }
        },
        "TFHubClassifierModel._model_fn": {
            "name": "_model_fn",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "labels": [],
                "mode": [],
                "params": [],
                "config": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_hub_tfjs/run.py": {
        "main": {
            "name": "main",
            "location": 54,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "TFRecordWithSentencePiece.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "spm_path": []
            }
        },
        "TFRecordWithSentencePiece.dense_ids": {
            "name": "dense_ids",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "texts": []
            }
        },
        "TFRecordWithSentencePiece.pieces": {
            "name": "pieces",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "feature_dict": [],
                "label_dict": []
            }
        },
        "TFRecordWithSentencePiece._input_fn_from_file": {
            "name": "_input_fn_from_file",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_hub_tfjs/__init__.py": {},
    "conversationai-models-main/experiments/tf_trainer/tf_kona_prototypical_network/proto.py": {
        "distance": {
            "name": "distance",
            "location": 37,
            "return": [],
            "arguments": {
                "embeddings": [],
                "prototype": []
            }
        },
        "neg_distance": {
            "name": "neg_distance",
            "location": 41,
            "return": [],
            "arguments": {
                "embs": [],
                "proto": []
            }
        },
        "calculate_logits": {
            "name": "calculate_logits",
            "location": 45,
            "return": [],
            "arguments": {
                "embeddings": [],
                "positive_prototype": [],
                "negative_prototype": []
            }
        },
        "prepare_dataset": {
            "name": "prepare_dataset",
            "location": 51,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "encoder": {
            "name": "encoder",
            "location": 82,
            "return": [],
            "arguments": {
                "dense_config": [],
                "output_types": [],
                "output_shapes": []
            }
        },
        "train_operation": {
            "name": "train_operation",
            "location": 140,
            "return": [],
            "arguments": {
                "negative_logits": [],
                "positive_logits": []
            }
        },
        "predictions_and_metrics": {
            "name": "predictions_and_metrics",
            "location": 154,
            "return": [],
            "arguments": {
                "negative_logits": [],
                "positive_logits": []
            }
        },
        "main": {
            "name": "main",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "encoder.get_embeddings": {
            "name": "get_embeddings",
            "location": 110,
            "return": [],
            "arguments": {
                "texts": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_word_label_embedding/model.py": {
        "TFWordLabelEmbeddingModel.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_label": [
                    "str"
                ]
            }
        },
        "TFWordLabelEmbeddingModel.hparams": {
            "name": "hparams",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "TFWordLabelEmbeddingModel.estimator": {
            "name": "estimator",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "model_dir": []
            }
        },
        "TFWordLabelEmbeddingModel._model_fn": {
            "name": "_model_fn",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "labels": [],
                "mode": [],
                "params": [],
                "config": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_word_label_embedding/run.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tf_trainer/tf_word_label_embedding/__init__.py": {},
    "conversationai-models-main/experiments/tools/bert_tfrecord_converter.py": {
        "create_int_feature": {
            "name": "create_int_feature",
            "location": 46,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "create_tokenizer_from_hub_module": {
            "name": "create_tokenizer_from_hub_module",
            "location": 50,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "convert_tfrecord_for_bert": {
            "name": "convert_tfrecord_for_bert",
            "location": 63,
            "return": [],
            "arguments": {
                "filenames": [],
                "input_data_path": [],
                "output_data_path": [],
                "bert_tfhub_url": [],
                "text_key": [],
                "label_key": [],
                "max_seq_length": []
            }
        }
    },
    "conversationai-models-main/experiments/tools/convert_csv_to_tfrecord.py": {
        "convert_csv_to_tfrecord": {
            "name": "convert_csv_to_tfrecord",
            "location": 37,
            "return": [],
            "arguments": {
                "input_csv_path": [],
                "output_tfrecord_path": [],
                "column_names": [],
                "column_dtypes": []
            }
        },
        "main": {
            "name": "main",
            "location": 63,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "conversationai-models-main/experiments/tools/convert_jsonl_to_tfrecord.py": {
        "make_selected_output_row": {
            "name": "make_selected_output_row",
            "location": 83,
            "return": [],
            "arguments": {
                "row": [],
                "line": [],
                "counters": []
            }
        },
        "itr_as_dict": {
            "name": "itr_as_dict",
            "location": 109,
            "return": [],
            "arguments": {
                "input_jsonlines_path": []
            }
        },
        "itr_as_tfrecord": {
            "name": "itr_as_tfrecord",
            "location": 120,
            "return": [],
            "arguments": {
                "input_jsonlines_path": []
            }
        },
        "convert_to_tfrecord": {
            "name": "convert_to_tfrecord",
            "location": 132,
            "return": [],
            "arguments": {
                "input_jsonlines_path": [],
                "output_tfrecord_path": []
            }
        },
        "main": {
            "name": "main",
            "location": 138,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "FieldsCounter.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldsCounter.inc_field": {
            "name": "inc_field",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ]
            }
        }
    },
    "conversationai-models-main/hierarchical_attention_research/han_model/bn_lstm.py": {
        "orthogonal": {
            "name": "orthogonal",
            "location": 101,
            "return": [],
            "arguments": {
                "shape": []
            }
        },
        "bn_lstm_identity_initializer": {
            "name": "bn_lstm_identity_initializer",
            "location": 109,
            "return": [],
            "arguments": {
                "scale": []
            }
        },
        "orthogonal_initializer": {
            "name": "orthogonal_initializer",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "batch_norm": {
            "name": "batch_norm",
            "location": 133,
            "return": [],
            "arguments": {
                "x": [],
                "name_scope": [],
                "training": [],
                "epsilon": [],
                "decay": []
            }
        },
        "LSTMCell.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "num_units": []
            }
        },
        "LSTMCell.state_size": {
            "name": "state_size",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LSTMCell.output_size": {
            "name": "output_size",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LSTMCell.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "state": [],
                "scope": []
            }
        },
        "BNLSTMCell.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "num_units": [],
                "training": []
            }
        },
        "BNLSTMCell.state_size": {
            "name": "state_size",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BNLSTMCell.output_size": {
            "name": "output_size",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BNLSTMCell.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "state": [],
                "scope": []
            }
        },
        "bn_lstm_identity_initializer._initializer": {
            "name": "_initializer",
            "location": 111,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "partition_info": []
            }
        },
        "orthogonal_initializer._initializer": {
            "name": "_initializer",
            "location": 127,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "partition_info": []
            }
        },
        "batch_norm.batch_statistics": {
            "name": "batch_statistics",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "batch_norm.population_statistics": {
            "name": "population_statistics",
            "location": 158,
            "return": [],
            "arguments": {}
        }
    },
    "conversationai-models-main/hierarchical_attention_research/han_model/bn_lstm_test.py": {},
    "conversationai-models-main/hierarchical_attention_research/han_model/data_util.py": {
        "batch": {
            "name": "batch",
            "location": 4,
            "return": [],
            "arguments": {
                "inputs": []
            }
        }
    },
    "conversationai-models-main/hierarchical_attention_research/han_model/HAN_model.py": {
        "HANClassifierModel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size": [],
                "embedding_size": [],
                "classes": [],
                "fw_word_cell": [],
                "bw_word_cell": [],
                "fw_sentence_cell": [],
                "bw_sentence_cell": [],
                "word_output_size": [],
                "sentence_output_size": [],
                "max_grad_norm": [],
                "dropout_keep_proba": [],
                "is_training": [],
                "learning_rate": [],
                "device": [],
                "scope": []
            }
        },
        "HANClassifierModel._init_embedding": {
            "name": "_init_embedding",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "HANClassifierModel._init_body": {
            "name": "_init_body",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "HANClassifierModel.get_feed_data": {
            "name": "get_feed_data",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "class_weights": [],
                "is_training": []
            }
        }
    },
    "conversationai-models-main/hierarchical_attention_research/han_model/model_components.py": {
        "bidirectional_rnn": {
            "name": "bidirectional_rnn",
            "location": 10,
            "return": [],
            "arguments": {
                "cell_fw": [],
                "cell_bw": [],
                "inputs_embedded": [],
                "input_lengths": [],
                "scope": []
            }
        },
        "task_specific_attention": {
            "name": "task_specific_attention",
            "location": 55,
            "return": [],
            "arguments": {
                "inputs": [],
                "output_size": [],
                "initializer": [],
                "activation_fn": [],
                "scope": []
            }
        },
        "bidirectional_rnn.concatenate_state": {
            "name": "concatenate_state",
            "location": 28,
            "return": [],
            "arguments": {
                "fw_state": [],
                "bw_state": []
            }
        }
    },
    "conversationai-models-main/hierarchical_attention_research/han_model/worker.py": {
        "HAN_model_1": {
            "name": "HAN_model_1",
            "location": 59,
            "return": [],
            "arguments": {
                "session": [],
                "restore_only": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 115,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "batch_iterator": {
            "name": "batch_iterator",
            "location": 126,
            "return": [],
            "arguments": {
                "dataset": [],
                "batch_size": [],
                "max_epochs": []
            }
        },
        "ev": {
            "name": "ev",
            "location": 139,
            "return": [],
            "arguments": {
                "session": [],
                "model": [],
                "dataset": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 158,
            "return": [],
            "arguments": {
                "dataset": []
            }
        },
        "train": {
            "name": "train",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "HAN_model_1.bn_cell": {
            "name": "bn_cell",
            "location": 72,
            "return": [],
            "arguments": {}
        }
    },
    "conversationai-models-main/hierarchical_attention_research/han_model/yelp.py": {
        "_read_dataset": {
            "name": "_read_dataset",
            "location": 22,
            "return": [],
            "arguments": {
                "fn": [],
                "review_max_sentences": [],
                "sentence_max_length": [],
                "epochs": []
            }
        },
        "read_trainset": {
            "name": "read_trainset",
            "location": 46,
            "return": [],
            "arguments": {
                "epochs": []
            }
        },
        "read_devset": {
            "name": "read_devset",
            "location": 50,
            "return": [],
            "arguments": {
                "epochs": []
            }
        },
        "read_vocab": {
            "name": "read_vocab",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "read_labels": {
            "name": "read_labels",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "conversationai-models-main/hierarchical_attention_research/han_model/yelp_prepare.py": {
        "read_reviews": {
            "name": "read_reviews",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "build_word_frequency_distribution": {
            "name": "build_word_frequency_distribution",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "build_vocabulary": {
            "name": "build_vocabulary",
            "location": 49,
            "return": [],
            "arguments": {
                "lower": [],
                "n": []
            }
        },
        "make_data": {
            "name": "make_data",
            "location": 72,
            "return": [],
            "arguments": {
                "split_points": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/setup.py": {},
    "conversationai-models-main/kaggle-classification/__init__.py": {},
    "conversationai-models-main/kaggle-classification/keras_trainer/base_model.py": {
        "BaseModel.get_model": {
            "name": "get_model",
            "location": 16,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/keras_trainer/cnn_with_attention.py": {
        "CNNWithAttention.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "embeddings_matrix": [],
                "hparams": [],
                "labels": []
            }
        },
        "CNNWithAttention.get_model": {
            "name": "get_model",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/keras_trainer/custom_metrics.py": {
        "auc_roc": {
            "name": "auc_roc",
            "location": 10,
            "return": [],
            "arguments": {
                "y_true": [],
                "y_pred": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/keras_trainer/model.py": {
        "ModelRunner.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "job_dir": [],
                "embeddings_path": [],
                "log_path": [],
                "hparams": [],
                "labels": []
            }
        },
        "ModelRunner.train": {
            "name": "train",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "train": []
            }
        },
        "ModelRunner.predict": {
            "name": "predict",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "texts": []
            }
        },
        "ModelRunner.score_metric": {
            "name": "score_metric",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "metric_name": [],
                "metric_fn": []
            }
        },
        "ModelRunner.score_auc": {
            "name": "score_auc",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ModelRunner.score_precision": {
            "name": "score_precision",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ModelRunner.score_recall": {
            "name": "score_recall",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ModelRunner._prep_texts": {
            "name": "_prep_texts",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "texts": []
            }
        },
        "ModelRunner._load_model": {
            "name": "_load_model",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRunner._setup_tokenizer": {
            "name": "_setup_tokenizer",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRunner._setup_embeddings_matrix": {
            "name": "_setup_embeddings_matrix",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/keras_trainer/rnn.py": {
        "RNNModel.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "embeddings_matrix": [],
                "hparams": [],
                "labels": []
            }
        },
        "RNNModel.get_model": {
            "name": "get_model",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/keras_trainer/single_layer_cnn.py": {
        "SingleLayerCnn.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "embeddings_matrix": [],
                "hparams": [],
                "labels": []
            }
        },
        "SingleLayerCnn.get_model": {
            "name": "get_model",
            "location": 39,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/keras_trainer/__init__.py": {},
    "conversationai-models-main/kaggle-classification/trainer/model.py": {
        "estimator_spec_for_softmax_classification": {
            "name": "estimator_spec_for_softmax_classification",
            "location": 60,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": [],
                "mode": [],
                "learning_rate": []
            }
        },
        "get_cnn_model": {
            "name": "get_cnn_model",
            "location": 139,
            "return": [],
            "arguments": {
                "embedding_size": [],
                "num_filters": [],
                "dropout_keep_prob": []
            }
        },
        "bag_of_words_model": {
            "name": "bag_of_words_model",
            "location": 209,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        },
        "main": {
            "name": "main",
            "location": 237,
            "return": [],
            "arguments": {
                "FLAGS": []
            }
        },
        "get_cnn_model.cnn_model": {
            "name": "cnn_model",
            "location": 141,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/trainer/wikidata.py": {
        "ngrams": {
            "name": "ngrams",
            "location": 14,
            "return": [],
            "arguments": {
                "sentence": [],
                "ngram_size": []
            }
        },
        "WikiData.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "data_path": [],
                "y_class": [],
                "max_document_length": [],
                "vocab_processor_path": [],
                "test_mode": [],
                "seed": [],
                "train_percent": [],
                "char_ngrams": [],
                "min_frequency": []
            }
        },
        "WikiData._load_vocab_processor": {
            "name": "_load_vocab_processor",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "WikiData._load_csv": {
            "name": "_load_csv",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "WikiData._split": {
            "name": "_split",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "train_percent": [],
                "x_field": [],
                "y_class": [],
                "seed": []
            }
        }
    },
    "conversationai-models-main/kaggle-classification/trainer/__init__.py": {},
    "conversationai-models-main/model_evaluation/input_fn_example.py": {
        "create_input_fn_toxicity_performance": {
            "name": "create_input_fn_toxicity_performance",
            "location": 45,
            "return": [],
            "arguments": {
                "tokenizer": [],
                "model_input_comment_field": []
            }
        },
        "create_input_fn_civil_performance": {
            "name": "create_input_fn_civil_performance",
            "location": 166,
            "return": [],
            "arguments": {
                "tokenizer": [],
                "model_input_comment_field": []
            }
        },
        "create_input_fn_civil_bias": {
            "name": "create_input_fn_civil_bias",
            "location": 191,
            "return": [],
            "arguments": {
                "tokenizer": [],
                "model_input_comment_field": []
            }
        },
        "create_input_fn_artificial_bias": {
            "name": "create_input_fn_artificial_bias",
            "location": 340,
            "return": [],
            "arguments": {
                "tokenizer": [],
                "model_input_comment_field": []
            }
        },
        "create_input_fn_biasbios": {
            "name": "create_input_fn_biasbios",
            "location": 303,
            "return": [],
            "arguments": {
                "tokenizer": [],
                "model_input_comment_field": [],
                "scrubbed": []
            }
        },
        "create_input_fn_toxicity_performance.input_fn_performance_toxicity": {
            "name": "input_fn_performance_toxicity",
            "location": 58,
            "return": [],
            "arguments": {
                "max_n_examples": [],
                "random_filter_keep_rate": []
            }
        },
        "create_input_fn_civil_performance.input_fn_performance_civil": {
            "name": "input_fn_performance_civil",
            "location": 169,
            "return": [],
            "arguments": {
                "max_n_examples": [],
                "random_filter_keep_rate": []
            }
        },
        "create_input_fn_civil_bias.filter_fn_civil": {
            "name": "filter_fn_civil",
            "location": 204,
            "return": [],
            "arguments": {
                "example": [],
                "background_filter_keep_rate": []
            }
        },
        "create_input_fn_civil_bias.input_fn_bias_civil": {
            "name": "input_fn_bias_civil",
            "location": 216,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        },
        "create_input_fn_artificial_bias.input_fn_bias": {
            "name": "input_fn_bias",
            "location": 343,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        },
        "create_input_fn_biasbios.filter_fn_biasbios": {
            "name": "filter_fn_biasbios",
            "location": 307,
            "return": [],
            "arguments": {
                "example": [],
                "background_filter_keep_rate": []
            }
        },
        "create_input_fn_biasbios.input_fn_biasbios": {
            "name": "input_fn_biasbios",
            "location": 310,
            "return": [],
            "arguments": {
                "max_n_examples": [],
                "random_filter_keep_rate": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/score_test_data.py": {
        "get_input_fn": {
            "name": "get_input_fn",
            "location": 51,
            "return": [],
            "arguments": {
                "test_data": [],
                "tokenizer": [],
                "model_input_comment_field": []
            }
        },
        "tokenizer": {
            "name": "tokenizer",
            "location": 63,
            "return": [],
            "arguments": {
                "text": [],
                "lowercase": []
            }
        },
        "score_data": {
            "name": "score_data",
            "location": 80,
            "return": [],
            "arguments": {
                "model_names": [],
                "class_names": [],
                "test_data": [],
                "output_path": [],
                "project_name": [],
                "text_feature_name": [],
                "sentence_key": [],
                "prediction_name": [],
                "dataset_size": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/dataset.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "feature_keys_spec": [],
                "prediction_keys": [],
                "model_names": [],
                "project_name": [],
                "example_key": []
            }
        },
        "Model.feature_keys_spec": {
            "name": "feature_keys_spec",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.example_key": {
            "name": "example_key",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.model_names": {
            "name": "model_names",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.prediction_keys": {
            "name": "prediction_keys",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.project_name": {
            "name": "project_name",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.set_job_ids_prediction": {
            "name": "set_job_ids_prediction",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "job_ids": []
            }
        },
        "Model.job_ids_prediction": {
            "name": "job_ids_prediction",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "input_fn": [],
                "dataset_dir": []
            }
        },
        "Dataset.show_data": {
            "name": "show_data",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.check_input_fn": {
            "name": "check_input_fn",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "input_fn": []
            }
        },
        "Dataset.check_compatibility": {
            "name": "check_compatibility",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Dataset.load_data": {
            "name": "load_data",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "max_n_examples": []
            }
        },
        "Dataset.get_path_input_tf": {
            "name": "get_path_input_tf",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_path_prediction": {
            "name": "get_path_prediction",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": []
            }
        },
        "Dataset.convert_data_to_tf": {
            "name": "convert_data_to_tf",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "feature_keys_spec": [],
                "example_key": [],
                "overwrite": []
            }
        },
        "Dataset.call_prediction": {
            "name": "call_prediction",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Dataset.collect_prediction": {
            "name": "collect_prediction",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "class_names": []
            }
        },
        "Dataset.wait_predictions": {
            "name": "wait_predictions",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Dataset.add_model_prediction_to_data": {
            "name": "add_model_prediction_to_data",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "recompute_predictions": [],
                "class_names": []
            }
        },
        "Dataset.add_model_prediction_to_data._compute_predictions_less_than_quota": {
            "name": "_compute_predictions_less_than_quota",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "need_to_convert_data": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/dataset_test.py": {
        "TestCompatibleInputFn.testCorrect": {
            "name": "testCorrect",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompatibleInputFn.testWrongArgInputFn": {
            "name": "testWrongArgInputFn",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompatibleInputFn.testInputFnWrongType": {
            "name": "testInputFnWrongType",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompatibleInputFn.testWrongNumberOfLines": {
            "name": "testWrongNumberOfLines",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelCompatibleWithInputFn.testBadTypeFeatureKeys": {
            "name": "testBadTypeFeatureKeys",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelCompatibleWithInputFn.testInputFnMissingFeatureKeys": {
            "name": "testInputFnMissingFeatureKeys",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelCompatibleWithInputFn.testModelIsCompatibleWithDataset": {
            "name": "testModelIsCompatibleWithDataset",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndPipeline.setUp": {
            "name": "setUp",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndPipeline.testComputePredictions": {
            "name": "testComputePredictions",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndPipeline.testLoadPredictions": {
            "name": "testLoadPredictions",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompatibleInputFn.testCorrect.input_fn": {
            "name": "input_fn",
            "location": 37,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        },
        "TestCompatibleInputFn.testWrongArgInputFn.input_fn": {
            "name": "input_fn",
            "location": 50,
            "return": [],
            "arguments": {
                "other_args": []
            }
        },
        "TestCompatibleInputFn.testInputFnWrongType.input_fn": {
            "name": "input_fn",
            "location": 61,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        },
        "TestCompatibleInputFn.testWrongNumberOfLines.input_fn": {
            "name": "input_fn",
            "location": 74,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        },
        "TestModelCompatibleWithInputFn.testInputFnMissingFeatureKeys.input_fn": {
            "name": "input_fn",
            "location": 109,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        },
        "TestModelCompatibleWithInputFn.testModelIsCompatibleWithDataset.input_fn": {
            "name": "input_fn",
            "location": 128,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        },
        "TestEndPipeline.setUp.input_fn_test": {
            "name": "input_fn_test",
            "location": 148,
            "return": [],
            "arguments": {
                "max_n_examples": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/deploy_list_models.py": {
        "get_list_models_to_export": {
            "name": "get_list_models_to_export",
            "location": 37,
            "return": [],
            "arguments": {
                "parent_model_dir": []
            }
        },
        "check_model_exists": {
            "name": "check_model_exists",
            "location": 46,
            "return": [],
            "arguments": {
                "project_name": [],
                "model_name": []
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 59,
            "return": [],
            "arguments": {
                "project_name": [],
                "model_name": []
            }
        },
        "create_version": {
            "name": "create_version",
            "location": 73,
            "return": [],
            "arguments": {
                "project_name": [],
                "model_name": [],
                "version_name": [],
                "model_dir": []
            }
        },
        "check_version_deployed": {
            "name": "check_version_deployed",
            "location": 96,
            "return": [],
            "arguments": {
                "operation_id": []
            }
        },
        "deploy_model_version": {
            "name": "deploy_model_version",
            "location": 115,
            "return": [],
            "arguments": {
                "project_name": [],
                "model_name": [],
                "version_name": [],
                "model_dir": []
            }
        },
        "_get_version_name": {
            "name": "_get_version_name",
            "location": 133,
            "return": [],
            "arguments": {
                "model_dir": [],
                "go_up_3": []
            }
        },
        "deploy_all_models": {
            "name": "deploy_all_models",
            "location": 147,
            "return": [],
            "arguments": {
                "list_model_dir": [],
                "project_name": [],
                "model_name": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/utils_cloudml.py": {
        "call_model_predictions_from_df": {
            "name": "call_model_predictions_from_df",
            "location": 34,
            "return": [],
            "arguments": {
                "project_name": [],
                "input_tf_records": [],
                "output_prediction_path": [],
                "model_name": [],
                "version_name": []
            }
        },
        "_call_batch_job": {
            "name": "_call_batch_job",
            "location": 74,
            "return": [],
            "arguments": {
                "project_name": [],
                "input_paths": [],
                "output_path": [],
                "model_name": [],
                "version_name": []
            }
        },
        "_make_batch_job_body": {
            "name": "_make_batch_job_body",
            "location": 106,
            "return": [],
            "arguments": {
                "project_name": [],
                "input_paths": [],
                "output_path": [],
                "model_name": [],
                "region": [],
                "data_format": [],
                "version_name": [],
                "max_worker_count": [],
                "runtime_version": []
            }
        },
        "check_job_over": {
            "name": "check_job_over",
            "location": 159,
            "return": [],
            "arguments": {
                "project_name": [],
                "job_name": []
            }
        },
        "add_model_predictions_to_df": {
            "name": "add_model_predictions_to_df",
            "location": 184,
            "return": [],
            "arguments": {
                "df": [],
                "prediction_file": [],
                "model_col_name": [],
                "prediction_name": [],
                "example_key": [],
                "class_names": []
            }
        },
        "add_model_predictions_to_df._load_predictions": {
            "name": "_load_predictions",
            "location": 220,
            "return": [],
            "arguments": {
                "pred_file": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/utils_cloudml_test.py": {
        "CallModelPredictionsFromDf.test_correct": {
            "name": "test_correct",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckJobOver.test_correct": {
            "name": "test_correct",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddModelPredictionsToDf.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddModelPredictionsToDf.test_missing_prediction_file": {
            "name": "test_missing_prediction_file",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddModelPredictionsToDf.test_empty_prediction_file": {
            "name": "test_empty_prediction_file",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddModelPredictionsToDf.test_missing_example_key": {
            "name": "test_missing_example_key",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddModelPredictionsToDf.test_missing_prediction_key": {
            "name": "test_missing_prediction_key",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddModelPredictionsToDf.test_correct": {
            "name": "test_correct",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/utils_tfrecords.py": {
        "_bytes_feature": {
            "name": "_bytes_feature",
            "location": 31,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_int64_feature": {
            "name": "_int64_feature",
            "location": 35,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_bytes_list_feature": {
            "name": "_bytes_list_feature",
            "location": 39,
            "return": [],
            "arguments": {
                "value_list": []
            }
        },
        "is_valid_spec": {
            "name": "is_valid_spec",
            "location": 58,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "encode_pandas_to_tfrecords": {
            "name": "encode_pandas_to_tfrecords",
            "location": 72,
            "return": [],
            "arguments": {
                "df": [],
                "feature_keys_spec": [],
                "tf_records_path": [],
                "example_key": []
            }
        },
        "decode_tf_records_to_pandas": {
            "name": "decode_tf_records_to_pandas",
            "location": 119,
            "return": [],
            "arguments": {
                "decoding_features_spec": [],
                "tf_records_path": [],
                "max_n_examples": [],
                "random_filter_keep_rate": [],
                "filter_fn": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/utils_tfrecords_test.py": {
        "TestEncodingAndDecoding.testCorrect": {
            "name": "testCorrect",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureKeySpec.test_not_a_dictionary": {
            "name": "test_not_a_dictionary",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureKeySpec.test_not_in_possible": {
            "name": "test_not_in_possible",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureKeySpec.test_valid": {
            "name": "test_valid",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "conversationai-models-main/model_evaluation/utils_export/__init__.py": {}
}
{
    "corpy-master/docs/conf.py": {},
    "corpy-master/src/corpy/udpipe.py": {
        "load": {
            "name": "load",
            "location": 163,
            "return": [],
            "arguments": {
                "corpus": [],
                "in_format": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 186,
            "return": [],
            "arguments": {
                "sent_or_sents": [],
                "out_format": []
            }
        },
        "_pprint_token": {
            "name": "_pprint_token",
            "location": 212,
            "return": [],
            "arguments": {
                "token": [],
                "printer": [],
                "cycle": []
            }
        },
        "_pprint_sent": {
            "name": "_pprint_sent",
            "location": 231,
            "return": [],
            "arguments": {
                "sent": [],
                "printer": [],
                "cycle": []
            }
        },
        "_pprint_seq": {
            "name": "_pprint_seq",
            "location": 251,
            "return": [],
            "arguments": {
                "seq": [],
                "printer": [],
                "cycle": []
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 268,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "pprint_config": {
            "name": "pprint_config",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "_register_pprinters": {
            "name": "_register_pprinters",
            "location": 295,
            "return": [],
            "arguments": {
                "formatter": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "model_path": []
            }
        },
        "Model.process": {
            "name": "process",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Model.tag": {
            "name": "tag",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "sent": []
            }
        },
        "Model.parse": {
            "name": "parse",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "sent": []
            }
        }
    },
    "corpy-master/src/corpy/util.py": {
        "_get_user_frame_and_generator": {
            "name": "_get_user_frame_and_generator",
            "location": 19,
            "return": [
                "Tuple[(FrameType, GeneratorType)]"
            ],
            "arguments": {
                "start_frame": [
                    "FrameType"
                ]
            }
        },
        "clean_env": {
            "name": "clean_env",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "longest_common_substring": {
            "name": "longest_common_substring",
            "location": 209,
            "return": [
                "Optional[LongestCommonSubstring]"
            ],
            "arguments": {
                "str1": [
                    "str"
                ],
                "str2": [
                    "str"
                ]
            }
        },
        "clean_env.do_clean_env": {
            "name": "do_clean_env",
            "location": 114,
            "return": [
                "dict"
            ],
            "arguments": {
                "globals_to_prune": [
                    "dict"
                ]
            }
        },
        "clean_env.global_trace": {
            "name": "global_trace",
            "location": 167,
            "return": [],
            "arguments": {
                "frame": [],
                "event": [],
                "arg": []
            }
        },
        "clean_env.global_trace.local_trace": {
            "name": "local_trace",
            "location": 178,
            "return": [],
            "arguments": {
                "frame": [],
                "event": [],
                "arg": []
            }
        }
    },
    "corpy-master/src/corpy/vertical.py": {
        "ipm": {
            "name": "ipm",
            "location": 225,
            "return": [],
            "arguments": {
                "occurrences": [],
                "N": []
            }
        },
        "arf": {
            "name": "arf",
            "location": 230,
            "return": [],
            "arguments": {
                "occurrences": [],
                "N": []
            }
        },
        "Vertical.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Vertical.open": {
            "name": "open",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertical.parse_position": {
            "name": "parse_position",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "Vertical.positions": {
            "name": "positions",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "parse_sattrs": [],
                "ignore_fn": [],
                "hook_fn": []
            }
        },
        "Vertical.search": {
            "name": "search",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "match_fn": [],
                "count_fn": []
            }
        },
        "Syn2015Vertical.open": {
            "name": "open",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Syn2015Vertical.parse_position": {
            "name": "parse_position",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        }
    },
    "corpy-master/src/corpy/vis.py": {
        "size_in_pixels": {
            "name": "size_in_pixels",
            "location": 13,
            "return": [],
            "arguments": {
                "width": [],
                "height": [],
                "unit": [],
                "ppi": []
            }
        },
        "_optimize_dimensions": {
            "name": "_optimize_dimensions",
            "location": 41,
            "return": [],
            "arguments": {
                "size": [],
                "fast": [],
                "fast_limit": []
            }
        },
        "_elliptical_mask": {
            "name": "_elliptical_mask",
            "location": 56,
            "return": [],
            "arguments": {
                "width": [],
                "height": []
            }
        },
        "wordcloud": {
            "name": "wordcloud",
            "location": 65,
            "return": [],
            "arguments": {
                "data": [],
                "size": []
            }
        },
        "_wordcloud_png": {
            "name": "_wordcloud_png",
            "location": 133,
            "return": [],
            "arguments": {
                "wcloud": []
            }
        }
    },
    "corpy-master/src/corpy/_magics.py": {
        "_clean_env_opts2kwargs": {
            "name": "_clean_env_opts2kwargs",
            "location": 11,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "opts": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "CorpyMagics.clean_env": {
            "name": "clean_env",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "cell": [
                    "Optional[str]"
                ]
            }
        }
    },
    "corpy-master/src/corpy/__init__.py": {
        "load_ipython_extension": {
            "name": "load_ipython_extension",
            "location": 8,
            "return": [],
            "arguments": {
                "ipython": []
            }
        }
    },
    "corpy-master/src/corpy/morphodita/tagger.py": {
        "Tagger.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "tagger_path": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "Tagger._pdt_to_conll2009_converter": {
            "name": "_pdt_to_conll2009_converter",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagger._strip_lemma_comment_converter": {
            "name": "_strip_lemma_comment_converter",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagger._strip_lemma_id_converter": {
            "name": "_strip_lemma_id_converter",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagger._get_converter": {
            "name": "_get_converter",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "convert": []
            }
        },
        "Tagger.tag": {
            "name": "tag",
            "location": 82,
            "return": [
                "Union[(Iterator[Token], Iterator[List[Token]])]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Tagger.tag_untokenized": {
            "name": "tag_untokenized",
            "location": 149,
            "return": [
                "Union[(Iterator[Token], Iterator[List[Token]])]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "sents": [],
                "guesser": [],
                "convert": []
            }
        },
        "Tagger.tag_tokenized": {
            "name": "tag_tokenized",
            "location": 168,
            "return": [
                "Union[(Iterator[Token], Iterator[List[Token]])]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "sents": [],
                "guesser": [],
                "convert": []
            }
        },
        "Tagger._tag": {
            "name": "_tag",
            "location": 198,
            "return": [
                "Union[(Iterator[Token], Iterator[List[Token]])]"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [],
                "sents": [],
                "guesser": [],
                "converter": [],
                "forms": [],
                "tagged_lemmas": [],
                "token_ranges": []
            }
        }
    },
    "corpy-master/src/corpy/morphodita/tokenizer.py": {
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "tokenizer_type": []
            }
        },
        "Tokenizer.from_tagger": {
            "name": "from_tagger",
            "location": 34,
            "return": [],
            "arguments": {
                "tagger_path": []
            }
        },
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "sents": []
            }
        }
    },
    "corpy-master/src/corpy/morphodita/__init__.py": {},
    "corpy-master/src/corpy/phonetics/cs.py": {
        "_filter_comments": {
            "name": "_filter_comments",
            "location": 39,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "_load_phones": {
            "name": "_load_phones",
            "location": 45,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "tsv": [
                    "str"
                ]
            }
        },
        "_load_substr2phones": {
            "name": "_load_substr2phones",
            "location": 60,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "tsv": [
                    "str"
                ],
                "allowed": [
                    "Dict"
                ]
            }
        },
        "_load_voicing_pairs": {
            "name": "_load_voicing_pairs",
            "location": 73,
            "return": [
                "Tuple[(Dict[(str, str)], Dict[(str, str)], Set[str], Set[str])]"
            ],
            "arguments": {
                "tsv": [
                    "str"
                ],
                "allowed": [
                    "Dict"
                ]
            }
        },
        "_create_substr_re": {
            "name": "_create_substr_re",
            "location": 93,
            "return": [
                "re.Pattern"
            ],
            "arguments": {
                "substr_list": [
                    "Iterable[str]"
                ]
            }
        },
        "_separate_tokens": {
            "name": "_separate_tokens",
            "location": 382,
            "return": [
                "Tuple[(List[Optional[str]], List[str])]"
            ],
            "arguments": {
                "tokens": [
                    "List[str]"
                ],
                "prosodic_boundary_symbols": [
                    "Set[str]"
                ]
            }
        },
        "transcribe": {
            "name": "transcribe",
            "location": 415,
            "return": [
                "List[Union[(str, Tuple[(str, ...)])]]"
            ],
            "arguments": {
                "phrase": [
                    "Union[(str, Iterable[str])]"
                ]
            }
        },
        "_ExceptionRewriter.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "tsv": [
                    "str"
                ]
            }
        },
        "_ExceptionRewriter._sub": {
            "name": "_sub",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "_ExceptionRewriter._rewrite": {
            "name": "_rewrite",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Phone.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Phone.__repr__": {
            "name": "__repr__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProsodicUnit.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "orthographic": [
                    "List[str]"
                ]
            }
        },
        "ProsodicUnit.phonetic": {
            "name": "phonetic",
            "location": 209,
            "return": [
                "List[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProsodicUnit._smart_vowel_seqs": {
            "name": "_smart_vowel_seqs",
            "location": 233,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ],
                "tagger": [
                    "Optional[Tagger]"
                ]
            }
        },
        "ProsodicUnit._str2phones": {
            "name": "_str2phones",
            "location": 278,
            "return": [
                "List[Phone]"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "ProsodicUnit._voicing_assim": {
            "name": "_voicing_assim",
            "location": 310,
            "return": [
                "List[Phone]"
            ],
            "arguments": {
                "input_": [
                    "List[Phone]"
                ]
            }
        },
        "ProsodicUnit._other_csps": {
            "name": "_other_csps",
            "location": 332,
            "return": [
                "List[Phone]"
            ],
            "arguments": {
                "input_": [
                    "List[Phone]"
                ]
            }
        },
        "ProsodicUnit._split_words_and_translate": {
            "name": "_split_words_and_translate",
            "location": 368,
            "return": [
                "List[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "input_": [
                    "List[Phone]"
                ],
                "alphabet": []
            }
        }
    },
    "corpy-master/src/corpy/phonetics/__init__.py": {},
    "corpy-master/src/corpy/scripts/xc.py": {
        "count_extended_grapheme_clusters": {
            "name": "count_extended_grapheme_clusters",
            "location": 22,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "check_normalization": {
            "name": "check_normalization",
            "location": 26,
            "return": [],
            "arguments": {
                "fdist": [],
                "expected_form": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 37,
            "return": [],
            "arguments": {
                "file": [],
                "xml": []
            }
        },
        "print_fdist": {
            "name": "print_fdist",
            "location": 49,
            "return": [],
            "arguments": {
                "fdist": []
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [],
            "arguments": {
                "expected_normalization": [],
                "lower": [],
                "xml": [],
                "lvl": [],
                "verbose": [],
                "quiet": [],
                "files": []
            }
        }
    },
    "corpy-master/src/corpy/scripts/zip_verticals.py": {
        "print_position": {
            "name": "print_position",
            "location": 15,
            "return": [],
            "arguments": {
                "lines": [],
                "line_no": []
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [],
            "arguments": {
                "lvl": [],
                "verbose": [],
                "quiet": [],
                "files": []
            }
        }
    },
    "corpy-master/tests/test_clean_env.py": {
        "module_ip": {
            "name": "module_ip",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "ip": {
            "name": "ip",
            "location": 14,
            "return": [],
            "arguments": {
                "module_ip": []
            }
        },
        "test_blacklist_works": {
            "name": "test_blacklist_works",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_whitelist_works": {
            "name": "test_whitelist_works",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_blacklist_cannot_overlap_with_whitelist": {
            "name": "test_blacklist_cannot_overlap_with_whitelist",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_reassigned_builtins_are_restored": {
            "name": "test_reassigned_builtins_are_restored",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_strict": {
            "name": "test_strict",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_modules": {
            "name": "test_modules",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_callables": {
            "name": "test_callables",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_upper": {
            "name": "test_upper",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_dunder": {
            "name": "test_dunder",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_sunder": {
            "name": "test_sunder",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_can_be_used_as_decorator": {
            "name": "test_can_be_used_as_decorator",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_cell_magic_strict": {
            "name": "test_cell_magic_strict",
            "location": 161,
            "return": [],
            "arguments": {
                "ip": []
            }
        },
        "test_cell_magic_non_strict": {
            "name": "test_cell_magic_non_strict",
            "location": 173,
            "return": [],
            "arguments": {
                "ip": []
            }
        },
        "test_line_magic_strict": {
            "name": "test_line_magic_strict",
            "location": 185,
            "return": [],
            "arguments": {
                "ip": []
            }
        },
        "test_line_magic_non_strict": {
            "name": "test_line_magic_non_strict",
            "location": 197,
            "return": [],
            "arguments": {
                "ip": []
            }
        },
        "test_strict.return_foo": {
            "name": "return_foo",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_can_be_used_as_decorator.return_foo": {
            "name": "return_foo",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_can_be_used_as_decorator.return_FOO": {
            "name": "return_FOO",
            "location": 122,
            "return": [],
            "arguments": {}
        }
    },
    "corpy-master/tests/test_morphodita.py": {
        "test_tokenize_simple": {
            "name": "test_tokenize_simple",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_tokenize_with_sents": {
            "name": "test_tokenize_with_sents",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_tokenizer_from_tagger": {
            "name": "test_tokenizer_from_tagger",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_tokenize_two_strings_in_parallel_with_same_tokenizer": {
            "name": "test_tokenize_two_strings_in_parallel_with_same_tokenizer",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_tokenize_two_strings_intermittently_with_same_tokenizer": {
            "name": "test_tokenize_two_strings_intermittently_with_same_tokenizer",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_tagger_simple": {
            "name": "test_tagger_simple",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_tagger_with_sents": {
            "name": "test_tagger_with_sents",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_tag_two_strings_in_parallel_with_same_tagger": {
            "name": "test_tag_two_strings_in_parallel_with_same_tagger",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_tag_two_strings_intermittently_with_same_tagger": {
            "name": "test_tag_two_strings_intermittently_with_same_tagger",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "corpy-master/tests/test_phonetics.py": {
        "test_voicing_assimilation_over_word_boundaries": {
            "name": "test_voicing_assimilation_over_word_boundaries",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_voicing_assimilation_of_\u0159": {
            "name": "test_voicing_assimilation_of_\u0159",
            "location": 23,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_different_output_alphabets": {
            "name": "test_different_output_alphabets",
            "location": 56,
            "return": [],
            "arguments": {
                "orth": [],
                "alphabet": [],
                "phon": []
            }
        },
        "test_other_csps": {
            "name": "test_other_csps",
            "location": 78,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_remove_duplicate_graphemes": {
            "name": "test_remove_duplicate_graphemes",
            "location": 94,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_no_gemination": {
            "name": "test_no_gemination",
            "location": 106,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 183,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_separate_tokens": {
            "name": "test_separate_tokens",
            "location": 213,
            "return": [],
            "arguments": {
                "tokens": [],
                "pros_boundaries": [],
                "matrix": [],
                "to_transcribe": []
            }
        },
        "TestHiatus.test_no_hiatus_by_default_in_most_cases": {
            "name": "test_no_hiatus_by_default_in_most_cases",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHiatus.test_hiatus_by_default_between_high_front_vowels": {
            "name": "test_hiatus_by_default_between_high_front_vowels",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHiatus.test_hiatus_can_be_optionally_forced": {
            "name": "test_hiatus_can_be_optionally_forced",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProsodicBoundaries.test_no_prosodic_boundaries": {
            "name": "test_no_prosodic_boundaries",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProsodicBoundaries.test_double_dot_as_prosodic_boundary": {
            "name": "test_double_dot_as_prosodic_boundary",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_hyphen_at_start_of_word": {
            "name": "test_hyphen_at_start_of_word",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_hyphen_mid_word": {
            "name": "test_hyphen_mid_word",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_hyphen_at_end_of_word_is_not_allowed": {
            "name": "test_hyphen_at_end_of_word_is_not_allowed",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_some_ways_to_have_a_literal_hyphen": {
            "name": "test_some_ways_to_have_a_literal_hyphen",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSmartHandlingOfVowelAcrossMorphemeBoundary.test_no_tagger": {
            "name": "test_no_tagger",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "orth": [],
                "phon": []
            }
        },
        "TestSmartHandlingOfVowelAcrossMorphemeBoundary.test_with_tagger": {
            "name": "test_with_tagger",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "orth": [],
                "phon": []
            }
        }
    },
    "corpy-master/tests/test_phonetics_regressions.py": {
        "test_regressions": {
            "name": "test_regressions",
            "location": 18,
            "return": [],
            "arguments": {
                "orth": [],
                "phon_expected": []
            }
        }
    },
    "corpy-master/tests/test_wordcloud.py": {
        "test_size_in_pixels": {
            "name": "test_size_in_pixels",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_optimize_dimensions": {
            "name": "test_optimize_dimensions",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_elliptical_mask": {
            "name": "test_elliptical_mask",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_wordcloud": {
            "name": "test_wordcloud",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    }
}
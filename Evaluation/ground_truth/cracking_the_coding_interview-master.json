{
    "cracking_the_coding_interview-master/solutions/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/arrays_and_strings/is_unique.py": {
        "brute_force": {
            "name": "brute_force",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "characters": [
                    "str"
                ]
            }
        },
        "bit_array": {
            "name": "bit_array",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "characters": [
                    "str"
                ]
            }
        },
        "hash_table": {
            "name": "hash_table",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "characters": [
                    "str"
                ]
            }
        },
        "_get_index": {
            "name": "_get_index",
            "location": 137,
            "return": [
                "Union[(int, None)]"
            ],
            "arguments": {
                "character": [
                    "str"
                ]
            }
        }
    },
    "cracking_the_coding_interview-master/solutions/arrays_and_strings/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/arrays_and_strings/tests/test_is_unique.py": {
        "test_is_unique_brute_force": {
            "name": "test_is_unique_brute_force",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_is_unique_bit_array": {
            "name": "test_is_unique_bit_array",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_is_unique_hash_table": {
            "name": "test_is_unique_hash_table",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "cracking_the_coding_interview-master/solutions/arrays_and_strings/tests/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/linked_lists/sum_lists.py": {
        "sum_two_numbers": {
            "name": "sum_two_numbers",
            "location": 78,
            "return": [
                "SinglyLinkedList"
            ],
            "arguments": {
                "head_of_number_1": [
                    "Node"
                ],
                "head_of_number_2": [
                    "Node"
                ],
                "carry": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SinglyLinkedList.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "elements": []
            }
        },
        "SinglyLinkedList.add": {
            "name": "add",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SinglyLinkedList.__eq__": {
            "name": "__eq__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "another_list": []
            }
        },
        "SinglyLinkedList.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking_the_coding_interview-master/solutions/linked_lists/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/linked_lists/tests/test_sum_lists.py": {
        "test_node": {
            "name": "test_node",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_singly_linked_list_is_able_to_initialize": {
            "name": "test_singly_linked_list_is_able_to_initialize",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_singly_linked_list_add": {
            "name": "test_singly_linked_list_add",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_singly_linked_list_length": {
            "name": "test_singly_linked_list_length",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_singly_linked_list_equal": {
            "name": "test_singly_linked_list_equal",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_sum_list_backward": {
            "name": "test_sum_list_backward",
            "location": 89,
            "return": [],
            "arguments": {}
        }
    },
    "cracking_the_coding_interview-master/solutions/linked_lists/tests/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/recursion_and_dynamic_programming/magic_index.py": {
        "get_magic_index_if_input_is_distinct": {
            "name": "get_magic_index_if_input_is_distinct",
            "location": 16,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "numbers": [
                    "List[int]"
                ]
            }
        },
        "get_magic_index_if_input_is_not_distinct": {
            "name": "get_magic_index_if_input_is_not_distinct",
            "location": 40,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "numbers": [
                    "List[int]"
                ]
            }
        }
    },
    "cracking_the_coding_interview-master/solutions/recursion_and_dynamic_programming/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/recursion_and_dynamic_programming/tests/test_magic_index.py": {
        "test_get_magic_index_if_input_is_distinct": {
            "name": "test_get_magic_index_if_input_is_distinct",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_get_magic_index_if_input_is_not_distinct": {
            "name": "test_get_magic_index_if_input_is_not_distinct",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "cracking_the_coding_interview-master/solutions/recursion_and_dynamic_programming/tests/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/stacks_and_queues/stack_min.py": {
        "StackWithMin.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackWithMin.push": {
            "name": "push",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        },
        "StackWithMin.pop": {
            "name": "pop",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackWithMin.min": {
            "name": "min",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking_the_coding_interview-master/solutions/stacks_and_queues/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/stacks_and_queues/tests/test_stack_min.py": {
        "test_stack_push": {
            "name": "test_stack_push",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_stack_pop": {
            "name": "test_stack_pop",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "cracking_the_coding_interview-master/solutions/stacks_and_queues/tests/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/trees_and_graphs/route_between_nodes.py": {
        "is_route_exists": {
            "name": "is_route_exists",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "Dict"
                ],
                "source": [
                    "Node"
                ],
                "destination": [
                    "Node"
                ],
                "visited": []
            }
        }
    },
    "cracking_the_coding_interview-master/solutions/trees_and_graphs/__init__.py": {},
    "cracking_the_coding_interview-master/solutions/trees_and_graphs/tests/test_route_between_nodes.py": {
        "test_is_route_exists": {
            "name": "test_is_route_exists",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "cracking_the_coding_interview-master/solutions/trees_and_graphs/tests/__init__.py": {}
}
{
    "crypto-trader-master/data.py": {
        "save_price": {
            "name": "save_price",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "price": [
                    "Currency"
                ]
            }
        },
        "save_order": {
            "name": "save_order",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "order": [
                    "Order"
                ]
            }
        },
        "load_active_orders": {
            "name": "load_active_orders",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "save_active_orders": {
            "name": "save_active_orders",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "orders": [
                    "dict"
                ]
            }
        },
        "load_closed_orders": {
            "name": "load_closed_orders",
            "location": 38,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "save_closed_orders": {
            "name": "save_closed_orders",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "orders": [
                    "dict"
                ]
            }
        }
    },
    "crypto-trader-master/example.py": {
        "runloop": {
            "name": "runloop",
            "location": 53,
            "return": [],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        }
    },
    "crypto-trader-master/gemini_api.py": {
        "retry_if_exception": {
            "name": "retry_if_exception",
            "location": 42,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "get_nonce": {
            "name": "get_nonce",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "min_nonce": [
                    "int"
                ]
            }
        },
        "base_headers": {
            "name": "base_headers",
            "location": 76,
            "return": [
                "dict"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "request_json": [
                    "dict"
                ]
            }
        },
        "request": {
            "name": "request",
            "location": 92,
            "return": [
                "dict"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "request_json": [
                    "dict"
                ],
                "method": [],
                "public": [
                    "bool"
                ]
            }
        },
        "websocket_request": {
            "name": "websocket_request",
            "location": 120,
            "return": [],
            "arguments": {
                "url": [],
                "request_json": [
                    "dict"
                ]
            }
        },
        "heartbeat": {
            "name": "heartbeat",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ticker": {
            "name": "ticker",
            "location": 147,
            "return": [
                "dict"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "new_order": {
            "name": "new_order",
            "location": 151,
            "return": [
                "dict"
            ],
            "arguments": {
                "side": [
                    "str"
                ],
                "symbol": [
                    "str"
                ],
                "amt": [
                    "Currency"
                ],
                "price": [
                    "Currency"
                ]
            }
        },
        "order_status": {
            "name": "order_status",
            "location": 163,
            "return": [
                "dict"
            ],
            "arguments": {
                "order_id": [
                    "str"
                ]
            }
        },
        "order_events": {
            "name": "order_events",
            "location": 171,
            "return": [],
            "arguments": {
                "order_id": [
                    "str"
                ]
            }
        },
        "retry_if_exception.wrapped": {
            "name": "wrapped",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "crypto-trader-master/secrets_default.py": {},
    "crypto-trader-master/settings.py": {},
    "crypto-trader-master/symbols.py": {
        "Currency.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": [
                    "Decimal"
                ]
            }
        },
        "Currency.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Currency.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Currency.__add__": {
            "name": "__add__",
            "location": 27,
            "return": [
                "'Currency'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__radd__": {
            "name": "__radd__",
            "location": 32,
            "return": [
                "'Currency'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__sub__": {
            "name": "__sub__",
            "location": 39,
            "return": [
                "'Currency'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__rsub__": {
            "name": "__rsub__",
            "location": 44,
            "return": [
                "'Currency'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__mul__": {
            "name": "__mul__",
            "location": 49,
            "return": [
                "'Currency'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__gt__": {
            "name": "__gt__",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__ge__": {
            "name": "__ge__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__lt__": {
            "name": "__lt__",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Currency.__le__": {
            "name": "__le__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Order.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Order.__getattr__": {
            "name": "__getattr__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Order.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Order.is_filled": {
            "name": "is_filled",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Order.buy_amt": {
            "name": "buy_amt",
            "location": 165,
            "return": [
                "Currency"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.price_amt": {
            "name": "price_amt",
            "location": 169,
            "return": [
                "Currency"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.filled_amt": {
            "name": "filled_amt",
            "location": 173,
            "return": [
                "Currency"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crypto-trader-master/__init__.py": {},
    "crypto-trader-master/stubs/websocket/_abnf.py": {
        "ABNF.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fin": [
                    "int"
                ],
                "rsv1": [
                    "int"
                ],
                "rsv2": [
                    "int"
                ],
                "rsv3": [
                    "int"
                ],
                "opcode": [
                    "Any"
                ],
                "mask": [
                    "int"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "ABNF.validate": {
            "name": "validate",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "skip_utf8_validation": [
                    "bool"
                ]
            }
        },
        "ABNF.create_frame": {
            "name": "create_frame",
            "location": 45,
            "return": [],
            "arguments": {
                "data": [],
                "opcode": [],
                "fin": [
                    "int"
                ]
            }
        },
        "ABNF.format": {
            "name": "format",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABNF.mask": {
            "name": "mask",
            "location": 48,
            "return": [],
            "arguments": {
                "mask_key": [],
                "data": []
            }
        },
        "frame_buffer.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recv_fn": [],
                "skip_utf8_validation": []
            }
        },
        "frame_buffer.clear": {
            "name": "clear",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.has_received_header": {
            "name": "has_received_header",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.recv_header": {
            "name": "recv_header",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.has_mask": {
            "name": "has_mask",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.has_received_length": {
            "name": "has_received_length",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.recv_length": {
            "name": "recv_length",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.has_received_mask": {
            "name": "has_received_mask",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.recv_mask": {
            "name": "recv_mask",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.recv_frame": {
            "name": "recv_frame",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "frame_buffer.recv_strict": {
            "name": "recv_strict",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "bufsize": []
            }
        },
        "continuous_frame.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fire_cont_frame": [],
                "skip_utf8_validation": []
            }
        },
        "continuous_frame.validate": {
            "name": "validate",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "continuous_frame.add": {
            "name": "add",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "continuous_frame.is_fire": {
            "name": "is_fire",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "continuous_frame.extract": {
            "name": "extract",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "frame": []
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_app.py": {
        "WebSocketApp.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "header": [
                    "Optional[Any]"
                ],
                "on_open": [
                    "Optional[Any]"
                ],
                "on_message": [
                    "Optional[Any]"
                ],
                "on_error": [
                    "Optional[Any]"
                ],
                "on_close": [
                    "Optional[Any]"
                ],
                "on_ping": [
                    "Optional[Any]"
                ],
                "on_pong": [
                    "Optional[Any]"
                ],
                "on_cont_message": [
                    "Optional[Any]"
                ],
                "keep_running": [
                    "bool"
                ],
                "get_mask_key": [
                    "Optional[Any]"
                ],
                "cookie": [
                    "Optional[Any]"
                ],
                "subprotocols": [
                    "Optional[Any]"
                ],
                "on_data": [
                    "Optional[Any]"
                ]
            }
        },
        "WebSocketApp.send": {
            "name": "send",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "opcode": [
                    "Any"
                ]
            }
        },
        "WebSocketApp.close": {
            "name": "close",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocketApp.run_forever": {
            "name": "run_forever",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "sockopt": [
                    "Optional[Any]"
                ],
                "sslopt": [
                    "Optional[Any]"
                ],
                "ping_interval": [
                    "int"
                ],
                "ping_timeout": [
                    "Optional[Any]"
                ],
                "http_proxy_host": [
                    "Optional[Any]"
                ],
                "http_proxy_port": [
                    "Optional[Any]"
                ],
                "http_no_proxy": [
                    "Optional[Any]"
                ],
                "http_proxy_auth": [
                    "Optional[Any]"
                ],
                "skip_utf8_validation": [
                    "bool"
                ],
                "host": [
                    "Optional[Any]"
                ],
                "origin": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_core.py": {
        "create_connection": {
            "name": "create_connection",
            "location": 54,
            "return": [],
            "arguments": {
                "url": [],
                "timeout": [
                    "Optional[Any]"
                ],
                "class_": [
                    "Any"
                ]
            }
        },
        "WebSocket.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_mask_key": [
                    "Optional[Any]"
                ],
                "sockopt": [
                    "Optional[Any]"
                ],
                "sslopt": [
                    "Optional[Any]"
                ],
                "fire_cont_frame": [
                    "bool"
                ],
                "enable_multithread": [
                    "bool"
                ],
                "skip_utf8_validation": [
                    "bool"
                ]
            }
        },
        "WebSocket.__iter__": {
            "name": "__iter__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.__next__": {
            "name": "__next__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.next": {
            "name": "next",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.fileno": {
            "name": "fileno",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.set_mask_key": {
            "name": "set_mask_key",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "WebSocket.gettimeout": {
            "name": "gettimeout",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.settimeout": {
            "name": "settimeout",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "WebSocket.getsubprotocol": {
            "name": "getsubprotocol",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.getstatus": {
            "name": "getstatus",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.getheaders": {
            "name": "getheaders",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.connect": {
            "name": "connect",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "WebSocket.send": {
            "name": "send",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [],
                "opcode": [
                    "Any"
                ]
            }
        },
        "WebSocket.send_frame": {
            "name": "send_frame",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "WebSocket.send_binary": {
            "name": "send_binary",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "WebSocket.ping": {
            "name": "ping",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [
                    "str"
                ]
            }
        },
        "WebSocket.pong": {
            "name": "pong",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "WebSocket.recv": {
            "name": "recv",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.recv_data": {
            "name": "recv_data",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "control_frame": [
                    "bool"
                ]
            }
        },
        "WebSocket.recv_data_frame": {
            "name": "recv_data_frame",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "control_frame": [
                    "bool"
                ]
            }
        },
        "WebSocket.recv_frame": {
            "name": "recv_frame",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.send_close": {
            "name": "send_close",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "status": [
                    "Any"
                ],
                "reason": [
                    "Any"
                ]
            }
        },
        "WebSocket.close": {
            "name": "close",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "status": [
                    "Any"
                ],
                "reason": [
                    "Any"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "WebSocket.abort": {
            "name": "abort",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.shutdown": {
            "name": "shutdown",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_exceptions.py": {
        "WebSocketBadStatusException.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": []
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_handshake.py": {
        "handshake": {
            "name": "handshake",
            "location": 17,
            "return": [],
            "arguments": {
                "sock": [],
                "hostname": [],
                "port": [],
                "resource": []
            }
        },
        "handshake_response.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "headers": [],
                "subprotocol": []
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_http.py": {
        "connect": {
            "name": "connect",
            "location": 19,
            "return": [],
            "arguments": {
                "url": [],
                "options": [],
                "proxy": [],
                "socket": []
            }
        },
        "read_headers": {
            "name": "read_headers",
            "location": 20,
            "return": [],
            "arguments": {
                "sock": []
            }
        },
        "proxy_info.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_logging.py": {
        "enableTrace": {
            "name": "enableTrace",
            "location": 5,
            "return": [],
            "arguments": {
                "traceable": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 6,
            "return": [],
            "arguments": {
                "title": [],
                "message": []
            }
        },
        "error": {
            "name": "error",
            "location": 7,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "warning": {
            "name": "warning",
            "location": 8,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "debug": {
            "name": "debug",
            "location": 9,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "trace": {
            "name": "trace",
            "location": 10,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "isEnabledForError": {
            "name": "isEnabledForError",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "isEnabledForDebug": {
            "name": "isEnabledForDebug",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "crypto-trader-master/stubs/websocket/_socket.py": {
        "setdefaulttimeout": {
            "name": "setdefaulttimeout",
            "location": 18,
            "return": [],
            "arguments": {
                "timeout": []
            }
        },
        "getdefaulttimeout": {
            "name": "getdefaulttimeout",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "recv": {
            "name": "recv",
            "location": 20,
            "return": [],
            "arguments": {
                "sock": [],
                "bufsize": []
            }
        },
        "recv_line": {
            "name": "recv_line",
            "location": 21,
            "return": [],
            "arguments": {
                "sock": []
            }
        },
        "send": {
            "name": "send",
            "location": 22,
            "return": [],
            "arguments": {
                "sock": [],
                "data": []
            }
        },
        "sock_opt.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sockopt": [],
                "sslopt": []
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_ssl_compat.py": {},
    "crypto-trader-master/stubs/websocket/_url.py": {
        "parse_url": {
            "name": "parse_url",
            "location": 7,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "get_proxy_info": {
            "name": "get_proxy_info",
            "location": 8,
            "return": [],
            "arguments": {
                "hostname": [],
                "is_secure": [],
                "proxy_host": [
                    "Optional[Any]"
                ],
                "proxy_port": [
                    "int"
                ],
                "proxy_auth": [
                    "Optional[Any]"
                ],
                "no_proxy": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "crypto-trader-master/stubs/websocket/_utils.py": {
        "validate_utf8": {
            "name": "validate_utf8",
            "location": 9,
            "return": [],
            "arguments": {
                "utfbytes": []
            }
        },
        "extract_err_message": {
            "name": "extract_err_message",
            "location": 10,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "NoLock.__enter__": {
            "name": "__enter__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoLock.__exit__": {
            "name": "__exit__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        }
    },
    "crypto-trader-master/stubs/websocket/__init__.py": {}
}
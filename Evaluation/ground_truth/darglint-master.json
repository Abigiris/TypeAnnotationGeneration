{
    "darglint-master/setup.py": {
        "read_full_documentation": {
            "name": "read_full_documentation",
            "location": 8,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "CleanCommand.initialize_options": {
            "name": "initialize_options",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CleanCommand.finalize_options": {
            "name": "finalize_options",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CleanCommand.run": {
            "name": "run",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/setup.py": {},
    "darglint-master/bin/bnf_to_cnf/bnf_to_cnf/driver.py": {
        "load_script": {
            "name": "load_script",
            "location": 99,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "cache": [
                    "Dict[(str, Driver)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Driver.read": {
            "name": "read",
            "location": 55,
            "return": [
                "'Driver'"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Driver.parse": {
            "name": "parse",
            "location": 60,
            "return": [
                "'Driver'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Driver.translate": {
            "name": "translate",
            "location": 64,
            "return": [
                "'Driver'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Driver.validate": {
            "name": "validate",
            "location": 68,
            "return": [
                "'Driver'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Driver.write": {
            "name": "write",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_format": [
                    "str"
                ]
            }
        },
        "Driver.get_imports": {
            "name": "get_imports",
            "location": 81,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Driver.merge": {
            "name": "merge",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [
                    "'Driver'"
                ]
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/bnf_to_cnf/functools.py": {
        "exists": {
            "name": "exists",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "it": [
                    "Iterator"
                ]
            }
        },
        "and_": {
            "name": "and_",
            "location": 19,
            "return": [
                "Callable[([T], bool)]"
            ],
            "arguments": {}
        },
        "or_": {
            "name": "or_",
            "location": 28,
            "return": [
                "Callable[([T], bool)]"
            ],
            "arguments": {}
        },
        "not_": {
            "name": "not_",
            "location": 37,
            "return": [
                "Callable[([T], bool)]"
            ],
            "arguments": {
                "fn": [
                    "Callable[([T], bool)]"
                ]
            }
        },
        "and_._inner": {
            "name": "_inner",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "or_._inner": {
            "name": "_inner",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "not_._inner": {
            "name": "_inner",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/bnf_to_cnf/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": [
                    "NodeType"
                ],
                "value": [
                    "Optional[str]"
                ],
                "children": [
                    "List['Node']"
                ],
                "probability": [
                    "Optional[int]"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "Node._bfs": {
            "name": "_bfs",
            "location": 144,
            "return": [
                "Iterator['Node']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.walk": {
            "name": "walk",
            "location": 152,
            "return": [
                "Iterator['Node']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.defines": {
            "name": "defines",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Node.equals": {
            "name": "equals",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Node.filter": {
            "name": "filter",
            "location": 217,
            "return": [
                "Iterator['Node']"
            ],
            "arguments": {
                "self": [],
                "filt": [
                    "Callable[(['Node'], bool)]"
                ]
            }
        },
        "Node.remove": {
            "name": "remove",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filt": [
                    "Callable[(['Node'], bool)]"
                ]
            }
        },
        "Node.from_lark_tree": {
            "name": "from_lark_tree",
            "location": 243,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Union[(Tree, Token)]"
                ]
            }
        },
        "Node._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.append": {
            "name": "append",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.prepend": {
            "name": "prepend",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.clone": {
            "name": "clone",
            "location": 375,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.to_python": {
            "name": "to_python",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "start_symbol": [
                    "Optional[str]"
                ]
            }
        },
        "Node.is_symbol": {
            "name": "is_symbol",
            "location": 544,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_terminal": {
            "name": "is_terminal",
            "location": 548,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_production": {
            "name": "is_production",
            "location": 552,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_sequence": {
            "name": "is_sequence",
            "location": 556,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_expression": {
            "name": "is_expression",
            "location": 560,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_annotation": {
            "name": "is_annotation",
            "location": 564,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_annotations": {
            "name": "is_annotations",
            "location": 568,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_imports": {
            "name": "is_imports",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_import": {
            "name": "is_import",
            "location": 576,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_name": {
            "name": "is_name",
            "location": 580,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.is_external_imports": {
            "name": "is_external_imports",
            "location": 584,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "'Node'"
                ]
            }
        },
        "Node.has_symbol": {
            "name": "has_symbol",
            "location": 588,
            "return": [
                "Callable[(['Node'], bool)]"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "Node.has_value": {
            "name": "has_value",
            "location": 596,
            "return": [
                "Callable[(['Node'], bool)]"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "Node._production_with_lhs": {
            "name": "_production_with_lhs",
            "location": 602,
            "return": [
                "Callable[(['Node'], bool)]"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "Node.has_annotation": {
            "name": "has_annotation",
            "location": 612,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.get_symbol": {
            "name": "get_symbol",
            "location": 617,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.has_sequence": {
            "name": "has_sequence",
            "location": 624,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "'Node'"
                ],
                "sequence": [
                    "'Node'"
                ]
            }
        },
        "Node.is_start": {
            "name": "is_start",
            "location": 631,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.to_dot": {
            "name": "to_dot",
            "location": 634,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.merge_annotations": {
            "name": "merge_annotations",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "'Node'"
                ]
            }
        },
        "Node.merge": {
            "name": "merge",
            "location": 740,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "'Node'"
                ]
            }
        },
        "Node.has_symbol._inner": {
            "name": "_inner",
            "location": 589,
            "return": [
                "bool"
            ],
            "arguments": {
                "y": [
                    "Node"
                ]
            }
        },
        "Node.has_value._inner": {
            "name": "_inner",
            "location": 597,
            "return": [
                "bool"
            ],
            "arguments": {
                "y": [
                    "Node"
                ]
            }
        },
        "Node._production_with_lhs._inner": {
            "name": "_inner",
            "location": 603,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Node"
                ]
            }
        },
        "Node.to_dot._node_name": {
            "name": "_node_name",
            "location": 646,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.to_dot._node_label": {
            "name": "_node_label",
            "location": 679,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "'Node'"
                ]
            }
        },
        "Node.to_dot._node_shape": {
            "name": "_node_shape",
            "location": 688,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "'Node'"
                ]
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/bnf_to_cnf/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 77,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Parser.parse_production": {
            "name": "parse_production",
            "location": 81,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/bnf_to_cnf/translator.py": {
        "to_symbol": {
            "name": "to_symbol",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Translator._reassign_start": {
            "name": "_reassign_start",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ],
                "start_symbol": [
                    "Optional[Node]"
                ]
            }
        },
        "Translator._reassign_nonsolitary_terminals": {
            "name": "_reassign_nonsolitary_terminals",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._get_name_end_digit": {
            "name": "_get_name_end_digit",
            "location": 190,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Translator._break_sequences_up": {
            "name": "_break_sequences_up",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [
                    "Node"
                ],
                "production": [
                    "Node"
                ]
            }
        },
        "Translator._eliminate_rhs_with_3plus_symbols": {
            "name": "_eliminate_rhs_with_3plus_symbols",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._prune": {
            "name": "_prune",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._get_symbol_production_lookup": {
            "name": "_get_symbol_production_lookup",
            "location": 285,
            "return": [
                "Dict[(str, List[Node])]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._permute_sequence": {
            "name": "_permute_sequence",
            "location": 298,
            "return": [
                "Iterator[Node]"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "Node"
                ],
                "symbol": [
                    "str"
                ]
            }
        },
        "Translator._eliminate_epsilon_productions": {
            "name": "_eliminate_epsilon_productions",
            "location": 344,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._expand_reachability": {
            "name": "_expand_reachability",
            "location": 404,
            "return": [
                "Dict[(str, Set[str])]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Dict[(str, Set[str])]"
                ]
            }
        },
        "Translator._get_definition_lookup": {
            "name": "_get_definition_lookup",
            "location": 433,
            "return": [
                "Dict[(str, Node)]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._eliminate_unit_productions": {
            "name": "_eliminate_unit_productions",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._build_adjacency_matrix": {
            "name": "_build_adjacency_matrix",
            "location": 542,
            "return": [
                "Dict[(str, Set[str])]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._remove_unused_productions": {
            "name": "_remove_unused_productions",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ],
                "start_symbol": [
                    "Optional[Node]"
                ]
            }
        },
        "Translator._remove_remaining_imports": {
            "name": "_remove_remaining_imports",
            "location": 604,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._remove_start_symbol": {
            "name": "_remove_start_symbol",
            "location": 608,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._add_in_start_symbol": {
            "name": "_add_in_start_symbol",
            "location": 618,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ],
                "start_symbol": [
                    "Optional[Node]"
                ]
            }
        },
        "Translator._remove_non_fruitful_branches": {
            "name": "_remove_non_fruitful_branches",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ],
                "start_symbol": [
                    "Optional[Node]"
                ]
            }
        },
        "Translator.translate": {
            "name": "translate",
            "location": 669,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Node"
                ]
            }
        },
        "Translator._reassign_start.is_start_node": {
            "name": "is_start_node",
            "location": 81,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Translator._reassign_start.is_start_production": {
            "name": "is_start_production",
            "location": 87,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Translator._reassign_nonsolitary_terminals.contains_nonsolitary_terminal": {
            "name": "contains_nonsolitary_terminal",
            "location": 136,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Translator._reassign_nonsolitary_terminals.defines_terminal": {
            "name": "defines_terminal",
            "location": 143,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Translator._prune._sequence_is_empty": {
            "name": "_sequence_is_empty",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Node"
                ]
            }
        },
        "Translator._prune._expression_is_empty": {
            "name": "_expression_is_empty",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Node"
                ]
            }
        },
        "Translator._prune._production_is_empty": {
            "name": "_production_is_empty",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Node"
                ]
            }
        },
        "Translator._permute_sequence.from_bitmask": {
            "name": "from_bitmask",
            "location": 310,
            "return": [
                "Node"
            ],
            "arguments": {
                "mask": [
                    "int"
                ]
            }
        },
        "Translator._eliminate_epsilon_productions.is_epsilon_rule": {
            "name": "is_epsilon_rule",
            "location": 354,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Node"
                ]
            }
        },
        "Translator._expand_reachability._bfs": {
            "name": "_bfs",
            "location": 416,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        },
        "Translator._eliminate_unit_productions.is_unit_sequence": {
            "name": "is_unit_sequence",
            "location": 485,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Node"
                ]
            }
        },
        "Translator._eliminate_unit_productions.is_unit_production": {
            "name": "is_unit_production",
            "location": 499,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Node"
                ]
            }
        },
        "Translator._eliminate_unit_productions.simplify": {
            "name": "simplify",
            "location": 513,
            "return": [],
            "arguments": {
                "production": []
            }
        },
        "Translator._remove_non_fruitful_branches._dfs": {
            "name": "_dfs",
            "location": 631,
            "return": [],
            "arguments": {
                "node": [],
                "encountered": []
            }
        },
        "Translator._remove_non_fruitful_branches.is_fruitful": {
            "name": "is_fruitful",
            "location": 640,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/bnf_to_cnf/validate.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "raise_exception": [
                    "bool"
                ]
            }
        },
        "Validator._wrap": {
            "name": "_wrap",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "Validator._validate_sequence": {
            "name": "_validate_sequence",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "Node"
                ]
            }
        },
        "Validator._validate_production": {
            "name": "_validate_production",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "production": [
                    "Node"
                ]
            }
        },
        "Validator._validate_import": {
            "name": "_validate_import",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_import": [
                    "Node"
                ]
            }
        },
        "Validator._validate_name": {
            "name": "_validate_name",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Node"
                ]
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Node"
                ]
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/bnf_to_cnf/__init__.py": {},
    "darglint-master/bin/bnf_to_cnf/tests/test_node.py": {
        "NodeTest.test_str": {
            "name": "test_str",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTest.test_terminals_equal": {
            "name": "test_terminals_equal",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTest.test_grammars_equal": {
            "name": "test_grammars_equal",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTest.test_empty_nodes_equal": {
            "name": "test_empty_nodes_equal",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTest.test_external_filename_preserved_in_both_python_and_bnf": {
            "name": "test_external_filename_preserved_in_both_python_and_bnf",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeTest.test_probability_passed_to_python_production": {
            "name": "test_probability_passed_to_python_production",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/tests/test_parse.py": {
        "ParserTestCase.test_parse_simple_rule": {
            "name": "test_parse_simple_rule",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_rule_with_spaces": {
            "name": "test_parse_rule_with_spaces",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_multiple_sequences": {
            "name": "test_multiple_sequences",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_multiple_rules": {
            "name": "test_multiple_rules",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_mix_terminals_and_nonterminals": {
            "name": "test_mix_terminals_and_nonterminals",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_failing_terminal_parse": {
            "name": "test_failing_terminal_parse",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_comments_are_ignored": {
            "name": "test_comments_are_ignored",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_with_imports": {
            "name": "test_with_imports",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_with_name": {
            "name": "test_with_name",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_single_annotation": {
            "name": "test_parse_single_annotation",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_multiple_annotations": {
            "name": "test_parse_multiple_annotations",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_annotation_on_rhs": {
            "name": "test_parse_annotation_on_rhs",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_from_import": {
            "name": "test_parse_from_import",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_multiple_external_imports": {
            "name": "test_parse_multiple_external_imports",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_probability": {
            "name": "test_parse_probability",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/tests/test_translate.py": {
        "TranslatorTestCase.test_already_cnf_doesnt_change": {
            "name": "test_already_cnf_doesnt_change",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_start_symbol_not_reassigned": {
            "name": "test_start_symbol_not_reassigned",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_nonsolitary_terminals": {
            "name": "test_nonsolitary_terminals",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_nonsolitary_terminals_symbol_taken": {
            "name": "test_nonsolitary_terminals_symbol_taken",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_factor_3plus_RHSs": {
            "name": "test_factor_3plus_RHSs",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_factor_five_length_RHS": {
            "name": "test_factor_five_length_RHS",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_eliminate_simplest_epsilon_form": {
            "name": "test_eliminate_simplest_epsilon_form",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_removes_empty_productions_after_epsilon_elimination": {
            "name": "test_removes_empty_productions_after_epsilon_elimination",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_eliminate_epsilon_forms": {
            "name": "test_eliminate_epsilon_forms",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_elimination_with_multiple_passes": {
            "name": "test_elimination_with_multiple_passes",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_remove_complex_unit_production": {
            "name": "test_remove_complex_unit_production",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_remove_single_unit_production": {
            "name": "test_remove_single_unit_production",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_complete_conversion": {
            "name": "test_complete_conversion",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_removes_unreachable_symbols": {
            "name": "test_removes_unreachable_symbols",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_retains_annotations": {
            "name": "test_translate_retains_annotations",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_retains_annotations_up": {
            "name": "test_translate_retains_annotations_up",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_retains_probability": {
            "name": "test_translate_retains_probability",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_retains_start_annotation": {
            "name": "test_translate_retains_start_annotation",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_works_with_annotation_on_nonterminal": {
            "name": "test_translate_works_with_annotation_on_nonterminal",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_with_recursion": {
            "name": "test_translate_with_recursion",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_unending_lists": {
            "name": "test_translate_unending_lists",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_external_imports_transferred_verbatim": {
            "name": "test_external_imports_transferred_verbatim",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_sequence_annotation": {
            "name": "test_sequence_annotation",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_nodes_not_leading_to_terminals_removed": {
            "name": "test_nodes_not_leading_to_terminals_removed",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_translate_annotation_follows_pattern": {
            "name": "test_translate_annotation_follows_pattern",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorTestCase.test_no_unnamed_nodes": {
            "name": "test_no_unnamed_nodes",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/tests/test_validation.py": {
        "ValidateCnfTests.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateCnfTests._p": {
            "name": "_p",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": []
            }
        },
        "ValidateCnfTests.test_terminal_production": {
            "name": "test_terminal_production",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateCnfTests.test_escaped_characters_okay": {
            "name": "test_escaped_characters_okay",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/bin/bnf_to_cnf/tests/utils.py": {
        "random_string": {
            "name": "random_string",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "min_length": [
                    "int"
                ],
                "max_length": [
                    "int"
                ]
            }
        }
    },
    "darglint-master/bin/doc_extract/setup.py": {},
    "darglint-master/bin/doc_extract/doc_extract/driver.py": {
        "main": {
            "name": "main",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "output": [
                    "str"
                ],
                "shuffle": [
                    "bool"
                ]
            }
        },
        "Driver.run": {
            "name": "run",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/bin/doc_extract/doc_extract/extract.py": {
        "extract": {
            "name": "extract",
            "location": 10,
            "return": [],
            "arguments": {
                "contents": [
                    "str"
                ]
            }
        }
    },
    "darglint-master/bin/doc_extract/doc_extract/repository.py": {
        "Repository.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Repository._get_files": {
            "name": "_get_files",
            "location": 29,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "tempdir": [
                    "str"
                ]
            }
        },
        "Repository.python_files": {
            "name": "python_files",
            "location": 36,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/bin/doc_extract/doc_extract/__init__.py": {},
    "darglint-master/darglint/config.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "load_config_file": {
            "name": "load_config_file",
            "location": 198,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "walk_path": {
            "name": "walk_path",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "find_config_file_in_path": {
            "name": "find_config_file_in_path",
            "location": 297,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "find_config_file": {
            "name": "find_config_file",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "get_config_from_file": {
            "name": "get_config_from_file",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 361,
            "return": [],
            "arguments": {}
        },
        "LogLevel.from_string": {
            "name": "from_string",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": [],
                "level": []
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "ignore": [],
                "message_template": [],
                "style": [],
                "strictness": [],
                "ignore_regex": [],
                "ignore_raise": [],
                "ignore_properties": [],
                "enable": [],
                "indentation": [],
                "assert_style": [],
                "log_level": []
            }
        },
        "Configuration.log_level": {
            "name": "log_level",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "log_level": []
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.get_default_instance": {
            "name": "get_default_instance",
            "location": 152,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Configuration.enable": {
            "name": "enable",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "Configuration.ignore": {
            "name": "ignore",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "Configuration._get_errors_to_ignore": {
            "name": "_get_errors_to_ignore",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/darglint/custom_assert.py": {
        "Assert": {
            "name": "Assert",
            "location": 15,
            "return": [],
            "arguments": {
                "expr": [],
                "message": []
            }
        }
    },
    "darglint-master/darglint/driver.py": {
        "get_error_report": {
            "name": "get_error_report",
            "location": 190,
            "return": [],
            "arguments": {
                "filename": [],
                "verbosity": [],
                "raise_errors_for_syntax": [],
                "message_template": []
            }
        },
        "print_error_list": {
            "name": "print_error_list",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "print_version": {
            "name": "print_version",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 246,
            "return": [],
            "arguments": {}
        }
    },
    "darglint-master/darglint/errors.py": {
        "DarglintError.message": {
            "name": "message",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "verbosity": []
            }
        },
        "DarglintError.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "line_numbers": []
            }
        },
        "PythonSyntaxError.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "GenericSyntaxError.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "message": [],
                "line_numbers": []
            }
        },
        "EmptyDescriptionError.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "message": [],
                "line_numbers": []
            }
        },
        "IndentError.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "line_numbers": []
            }
        },
        "ExcessNewlineError.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "line_numbers": []
            }
        },
        "EmptyTypeError.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "message": [],
                "line_numbers": []
            }
        },
        "MissingParameterError.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "line_numbers": []
            }
        },
        "ExcessParameterError.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "line_numbers": []
            }
        },
        "ParameterTypeMismatchError.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "expected": [],
                "actual": [],
                "line_numbers": []
            }
        },
        "ParameterTypeMissingError.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "line_numbers": []
            }
        },
        "ParameterMalformedError.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "line_numbers": []
            }
        },
        "MissingReturnError.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "line_numbers": []
            }
        },
        "ExcessReturnError.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "line_numbers": []
            }
        },
        "ReturnTypeMismatchError.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "expected": [],
                "actual": [],
                "line_numbers": []
            }
        },
        "MissingYieldError.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "line_numbers": []
            }
        },
        "ExcessYieldError.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "line_numbers": []
            }
        },
        "MissingRaiseError.__init__": {
            "name": "__init__",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "line_numbers": []
            }
        },
        "ExcessRaiseError.__init__": {
            "name": "__init__",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "line_numbers": []
            }
        },
        "ExcessVariableError.__init__": {
            "name": "__init__",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [],
                "line_numbers": []
            }
        }
    },
    "darglint-master/darglint/error_report.py": {
        "ErrorReport.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "errors": [],
                "filename": [],
                "verbosity": [],
                "message_template": []
            }
        },
        "ErrorReport._sort": {
            "name": "_sort",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReport._group_errors_by_function": {
            "name": "_group_errors_by_function",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReport._get_error_description": {
            "name": "_get_error_description",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ErrorReport.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReport.flake8_report": {
            "name": "flake8_report",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/darglint/flake8_entry.py": {
        "DarglintChecker.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "filename": []
            }
        },
        "DarglintChecker.run": {
            "name": "run",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DarglintChecker.add_options": {
            "name": "add_options",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [],
                "option_manager": []
            }
        },
        "DarglintChecker.parse_options": {
            "name": "parse_options",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        }
    },
    "darglint-master/darglint/function_description.py": {
        "read_program": {
            "name": "read_program",
            "location": 38,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_get_docstring": {
            "name": "_get_docstring",
            "location": 58,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "_get_all_functions": {
            "name": "_get_all_functions",
            "location": 62,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "_get_all_classes": {
            "name": "_get_all_classes",
            "location": 71,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "_get_all_methods": {
            "name": "_get_all_methods",
            "location": 77,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "_get_return_type": {
            "name": "_get_return_type",
            "location": 83,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "get_line_number_from_function": {
            "name": "get_line_number_from_function",
            "location": 90,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "get_function_descriptions": {
            "name": "get_function_descriptions",
            "location": 172,
            "return": [],
            "arguments": {
                "program": []
            }
        },
        "FunctionDescription.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "function_type": [],
                "function": []
            }
        }
    },
    "darglint-master/darglint/integrity_checker.py": {
        "IntegrityChecker.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "raise_errors": []
            }
        },
        "IntegrityChecker.schedule": {
            "name": "schedule",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "IntegrityChecker.run_checks": {
            "name": "run_checks",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "IntegrityChecker._skip_checks": {
            "name": "_skip_checks",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "IntegrityChecker._check_parameter_types": {
            "name": "_check_parameter_types",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._check_parameter_types_missing": {
            "name": "_check_parameter_types_missing",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._check_return_type": {
            "name": "_check_return_type",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._check_yield": {
            "name": "_check_yield",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._check_return": {
            "name": "_check_return",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._check_parameters": {
            "name": "_check_parameters",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._check_variables": {
            "name": "_check_variables",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._ignore_error": {
            "name": "_ignore_error",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "error": []
            }
        },
        "IntegrityChecker._remove_ignored": {
            "name": "_remove_ignored",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "missing": [],
                "error": []
            }
        },
        "IntegrityChecker._check_style": {
            "name": "_check_style",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._check_raises": {
            "name": "_check_raises",
            "location": 450,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "function": []
            }
        },
        "IntegrityChecker._sort": {
            "name": "_sort",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityChecker.get_error_report": {
            "name": "get_error_report",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "verbosity": [],
                "filename": [],
                "message_template": []
            }
        },
        "IntegrityChecker.get_error_report_string": {
            "name": "get_error_report_string",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "verbosity": [],
                "filename": [],
                "message_template": []
            }
        }
    },
    "darglint-master/darglint/lex.py": {
        "_is_space": {
            "name": "_is_space",
            "location": 20,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_newline": {
            "name": "_is_newline",
            "location": 25,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_colon": {
            "name": "_is_colon",
            "location": 30,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_hash": {
            "name": "_is_hash",
            "location": 35,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_separator": {
            "name": "_is_separator",
            "location": 40,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_lparen": {
            "name": "_is_lparen",
            "location": 56,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_rparen": {
            "name": "_is_rparen",
            "location": 61,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_hyphen": {
            "name": "_is_hyphen",
            "location": 66,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_word": {
            "name": "_is_word",
            "location": 71,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "lex": {
            "name": "lex",
            "location": 84,
            "return": [],
            "arguments": {
                "program": []
            }
        },
        "condense": {
            "name": "condense",
            "location": 183,
            "return": [],
            "arguments": {
                "tokens": []
            }
        }
    },
    "darglint-master/darglint/node.py": {
        "CykNode.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": [],
                "lchild": [],
                "rchild": [],
                "value": [],
                "annotations": [],
                "weight": []
            }
        },
        "CykNode.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CykNode.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "indent": []
            }
        },
        "CykNode.in_order_traverse": {
            "name": "in_order_traverse",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CykNode.breadth_first_walk": {
            "name": "breadth_first_walk",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CykNode.first_instance": {
            "name": "first_instance",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "CykNode.walk": {
            "name": "walk",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CykNode.equals": {
            "name": "equals",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CykNode.reconstruct_string": {
            "name": "reconstruct_string",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "strictness": []
            }
        },
        "CykNode._get_line_numbers_cached": {
            "name": "_get_line_numbers_cached",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "recurse": []
            }
        },
        "CykNode.line_numbers": {
            "name": "line_numbers",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/darglint/peaker.py": {
        "Peaker.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "lookahead": []
            }
        },
        "Peaker._buffer_to": {
            "name": "_buffer_to",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Peaker.next": {
            "name": "next",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Peaker.peak": {
            "name": "peak",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "lookahead": []
            }
        },
        "Peaker.rpeak": {
            "name": "rpeak",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "lookahead": []
            }
        },
        "Peaker.has_next": {
            "name": "has_next",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Peaker.take_while": {
            "name": "take_while",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "test": []
            }
        }
    },
    "darglint-master/darglint/strictness.py": {
        "Strictness.from_string": {
            "name": "from_string",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "strictness": []
            }
        }
    },
    "darglint-master/darglint/token.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "token_type": [
                    "TokenType"
                ],
                "line_number": [
                    "int"
                ]
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/darglint/utils.py": {
        "AstNodeUtils.iter_fields": {
            "name": "iter_fields",
            "location": 29,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "AstNodeUtils._get_node_label": {
            "name": "_get_node_label",
            "location": 37,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "AstNodeUtils.to_dot": {
            "name": "to_dot",
            "location": 52,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "CykNodeUtils.contains": {
            "name": "contains",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": [],
                "value": []
            }
        },
        "CykNodeUtils.get_annotated": {
            "name": "get_annotated",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "annotation": []
            }
        },
        "CykNodeUtils.to_dot": {
            "name": "to_dot",
            "location": 123,
            "return": [],
            "arguments": {
                "cyk_node": [],
                "is_root": [],
                "encountered": []
            }
        },
        "ConfigurationContext.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationContext.__enter__": {
            "name": "__enter__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationContext.__exit__": {
            "name": "__exit__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "exc_traceack": []
            }
        },
        "CykNodeUtils.contains._match": {
            "name": "_match",
            "location": 104,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "CykNodeUtils.to_dot._get_name": {
            "name": "_get_name",
            "location": 125,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "CykNodeUtils.to_dot._get_value": {
            "name": "_get_value",
            "location": 142,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "darglint-master/darglint/__init__.py": {},
    "darglint-master/darglint/analysis/abstract_callable_visitor.py": {
        "AbstractCallableVisitor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractCallableVisitor._is_docstring": {
            "name": "_is_docstring",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AbstractCallableVisitor._is_ellipsis": {
            "name": "_is_ellipsis",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AbstractCallableVisitor._is_raise_NotImplementedException": {
            "name": "_is_raise_NotImplementedException",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AbstractCallableVisitor._is_return_NotImplemented": {
            "name": "_is_return_NotImplemented",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AbstractCallableVisitor.analyze_pure_abstract": {
            "name": "analyze_pure_abstract",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AbstractCallableVisitor.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AbstractCallableVisitor.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/analysis_helpers.py": {
        "_has_decorator": {
            "name": "_has_decorator",
            "location": 7,
            "return": [],
            "arguments": {
                "function": [],
                "decorators": []
            }
        }
    },
    "darglint-master/darglint/analysis/analysis_visitor.py": {},
    "darglint-master/darglint/analysis/argument_visitor.py": {
        "ArgumentVisitor.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitor.add_arg_by_name": {
            "name": "add_arg_by_name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "ArgumentVisitor.visit_arguments": {
            "name": "visit_arguments",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/assert_visitor.py": {
        "AssertVisitor.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertVisitor.visit_Assert": {
            "name": "visit_Assert",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/function_and_method_visitor.py": {
        "FunctionAndMethodVisitor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitor.functions": {
            "name": "functions",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitor.methods": {
            "name": "methods",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitor.properties": {
            "name": "properties",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitor.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FunctionAndMethodVisitor.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FunctionAndMethodVisitor.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/function_scoped_visitor.py": {
        "FunctionScopedVisitorMixin.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScopedVisitorMixin.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FunctionScopedVisitorMixin.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FunctionScopedVisitorMixin.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/raise_visitor.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_in_bare_handler": {
            "name": "set_in_bare_handler",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context._get_attr_name": {
            "name": "_get_attr_name",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Context._get_name_name": {
            "name": "_get_name_name",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Context._get_exception_name": {
            "name": "_get_exception_name",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "raises": []
            }
        },
        "Context.add_exception": {
            "name": "add_exception",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Context.remove_exception": {
            "name": "remove_exception",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Context.remove_all_exceptions": {
            "name": "remove_all_exceptions",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.add_variable": {
            "name": "add_variable",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "exception": []
            }
        },
        "Context.set_handling": {
            "name": "set_handling",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Context.remove_variable": {
            "name": "remove_variable",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "Context.extend": {
            "name": "extend",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Context.finish_handling": {
            "name": "finish_handling",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitor.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitor.exceptions": {
            "name": "exceptions",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitor.context": {
            "name": "context",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitor.visit_Raise": {
            "name": "visit_Raise",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "RaiseVisitor.visit_Try": {
            "name": "visit_Try",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/return_visitor.py": {
        "ReturnVisitor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnVisitor.visit_Return": {
            "name": "visit_Return",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/variable_visitor.py": {
        "VariableVisitor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableVisitor.visit_Name": {
            "name": "visit_Name",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/yield_visitor.py": {
        "YieldVisitor.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldVisitor.visit_Yield": {
            "name": "visit_Yield",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "YieldVisitor.visit_YieldFrom": {
            "name": "visit_YieldFrom",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "darglint-master/darglint/analysis/__init__.py": {},
    "darglint-master/darglint/docstring/base.py": {
        "BaseDocstring.get_section": {
            "name": "get_section",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "BaseDocstring.get_types": {
            "name": "get_types",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "BaseDocstring.get_items": {
            "name": "get_items",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "BaseDocstring.get_style_errors": {
            "name": "get_style_errors",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDocstring.get_noqas": {
            "name": "get_noqas",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDocstring.get_line_numbers": {
            "name": "get_line_numbers",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": []
            }
        },
        "BaseDocstring.get_line_numbers_for_value": {
            "name": "get_line_numbers_for_value",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": [],
                "value": []
            }
        },
        "BaseDocstring.ignore_all": {
            "name": "ignore_all",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDocstring.satisfies_strictness": {
            "name": "satisfies_strictness",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "strictness": []
            }
        }
    },
    "darglint-master/darglint/docstring/docstring.py": {
        "Docstring.from_google": {
            "name": "from_google",
            "location": 14,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Docstring.from_sphinx": {
            "name": "from_sphinx",
            "location": 19,
            "return": [],
            "arguments": {
                "root": [],
                "config": []
            }
        },
        "Docstring.from_numpy": {
            "name": "from_numpy",
            "location": 24,
            "return": [],
            "arguments": {
                "root": [],
                "config": []
            }
        }
    },
    "darglint-master/darglint/docstring/google.py": {
        "_CykVisitor.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "_CykVisitor.__iter__": {
            "name": "__iter__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CykVisitor.__next__": {
            "name": "__next__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CykVisitor.mark": {
            "name": "mark",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "mark": []
            }
        },
        "Docstring.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "style": []
            }
        },
        "Docstring._discover": {
            "name": "_discover",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_section": {
            "name": "get_section",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring._get_argument_types": {
            "name": "_get_argument_types",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring._get_return_type": {
            "name": "_get_return_type",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_types": {
            "name": "get_types",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring._get_compound_item_type_lookup": {
            "name": "_get_compound_item_type_lookup",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": []
            }
        },
        "Docstring._get_compound_items": {
            "name": "_get_compound_items",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "Docstring._get_raises_section_items": {
            "name": "_get_raises_section_items",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_items": {
            "name": "get_items",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring._get_yield_type": {
            "name": "_get_yield_type",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_noqas": {
            "name": "get_noqas",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_style_errors": {
            "name": "get_style_errors",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_line_numbers": {
            "name": "get_line_numbers",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "Docstring.get_line_numbers_for_value": {
            "name": "get_line_numbers_for_value",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": [],
                "value": []
            }
        },
        "Docstring.ignore_all": {
            "name": "ignore_all",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_noqas._get_branch_name": {
            "name": "_get_branch_name",
            "location": 293,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "darglint-master/darglint/docstring/numpy.py": {
        "Docstring.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "style": []
            }
        },
        "Docstring._discover": {
            "name": "_discover",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Docstring.get_section": {
            "name": "get_section",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring._get_types_unsorted": {
            "name": "_get_types_unsorted",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring.get_types": {
            "name": "get_types",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring._get_items_unsorted": {
            "name": "_get_items_unsorted",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring.get_items": {
            "name": "get_items",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring.get_noqas": {
            "name": "get_noqas",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_line_numbers": {
            "name": "get_line_numbers",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": []
            }
        },
        "Docstring.get_line_numbers_for_value": {
            "name": "get_line_numbers_for_value",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": [],
                "value": []
            }
        },
        "Docstring.ignore_all": {
            "name": "ignore_all",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_style_errors": {
            "name": "get_style_errors",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/darglint/docstring/sections.py": {},
    "darglint-master/darglint/docstring/sphinx.py": {
        "Docstring.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "style": []
            }
        },
        "Docstring._discover": {
            "name": "_discover",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_section": {
            "name": "get_section",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring._get_argument_type_lookup": {
            "name": "_get_argument_type_lookup",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring._get_raises_type": {
            "name": "_get_raises_type",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring._get_variable_type_lookup": {
            "name": "_get_variable_type_lookup",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring._get_return_type": {
            "name": "_get_return_type",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring._get_yield_type": {
            "name": "_get_yield_type",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring._sorted_values": {
            "name": "_sorted_values",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "lookup": []
            }
        },
        "Docstring._sorted_keys": {
            "name": "_sorted_keys",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "lookup": []
            }
        },
        "Docstring.get_types": {
            "name": "get_types",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring.get_items": {
            "name": "get_items",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Docstring.get_noqas": {
            "name": "get_noqas",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_line_numbers": {
            "name": "get_line_numbers",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": []
            }
        },
        "Docstring.get_line_numbers_for_value": {
            "name": "get_line_numbers_for_value",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "node_type": [],
                "value": []
            }
        },
        "Docstring.ignore_all": {
            "name": "ignore_all",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Docstring.get_style_errors": {
            "name": "get_style_errors",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/darglint/docstring/style.py": {
        "DocstringStyle.from_string": {
            "name": "from_string",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "style": []
            }
        }
    },
    "darglint-master/darglint/docstring/__init__.py": {},
    "darglint-master/darglint/parse/combinator.py": {
        "parser_combinator": {
            "name": "parser_combinator",
            "location": 30,
            "return": [],
            "arguments": {
                "top": [],
                "lookup": [],
                "combinator": [],
                "tokens": []
            }
        }
    },
    "darglint-master/darglint/parse/cyk.py": {
        "parse": {
            "name": "parse",
            "location": 35,
            "return": [],
            "arguments": {
                "grammar": [],
                "tokens": []
            }
        }
    },
    "darglint-master/darglint/parse/google.py": {
        "_get_split_end_with_indents": {
            "name": "_get_split_end_with_indents",
            "location": 42,
            "return": [],
            "arguments": {
                "tokens": [],
                "i": []
            }
        },
        "top_parse": {
            "name": "top_parse",
            "location": 102,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "_match": {
            "name": "_match",
            "location": 128,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "lookup": {
            "name": "lookup",
            "location": 162,
            "return": [],
            "arguments": {
                "section": [],
                "section_index": []
            }
        },
        "combinator": {
            "name": "combinator",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "parse": {
            "name": "parse",
            "location": 191,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "combinator.inner": {
            "name": "inner",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "parse.mapped_lookup": {
            "name": "mapped_lookup",
            "location": 192,
            "return": [],
            "arguments": {
                "section": [],
                "section_index": []
            }
        }
    },
    "darglint-master/darglint/parse/grammar.py": {
        "Production.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "lhs": []
            }
        },
        "Production.with_annotations": {
            "name": "with_annotations",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "lhs": [],
                "annotations": []
            }
        },
        "BaseGrammar.productions": {
            "name": "productions",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseGrammar.start": {
            "name": "start",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseGrammar.get_symbol_lookup": {
            "name": "get_symbol_lookup",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseGrammar.to_dot": {
            "name": "to_dot",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseGrammar.to_dot.normalize": {
            "name": "normalize",
            "location": 88,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "BaseGrammar.to_dot.interpolate": {
            "name": "interpolate",
            "location": 91,
            "return": [],
            "arguments": {
                "curr": [],
                "max_weight": []
            }
        },
        "BaseGrammar.to_dot.to_hex": {
            "name": "to_hex",
            "location": 99,
            "return": [],
            "arguments": {
                "color": []
            }
        }
    },
    "darglint-master/darglint/parse/identifiers.py": {
        "Continuation.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "condition": [],
                "child": []
            }
        },
        "Continuation.of": {
            "name": "of",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Continuation.branch": {
            "name": "branch",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Continuation.extract": {
            "name": "extract",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Path.of": {
            "name": "of",
            "location": 140,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "Path.branch": {
            "name": "branch",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "Path.if_left": {
            "name": "if_left",
            "location": 175,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "Path.if_right": {
            "name": "if_right",
            "location": 180,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "Identifier.key": {
            "name": "key",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "Identifier.path": {
            "name": "path",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "Identifier.extract": {
            "name": "extract",
            "location": 210,
            "return": [],
            "arguments": {
                "cls": [],
                "node": []
            }
        },
        "Identifier.__str__": {
            "name": "__str__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identifier.__repr__": {
            "name": "__repr__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentTypeIdentifier.extract": {
            "name": "extract",
            "location": 249,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "NoqaIdentifier.extract": {
            "name": "extract",
            "location": 293,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "NoqaIdentifier.extract_targets": {
            "name": "extract_targets",
            "location": 309,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "darglint-master/darglint/parse/long_description.py": {
        "_is": {
            "name": "_is",
            "location": 23,
            "return": [],
            "arguments": {
                "peaker": [],
                "token_type": [],
                "index": []
            }
        },
        "_are": {
            "name": "_are",
            "location": 34,
            "return": [],
            "arguments": {
                "peaker": []
            }
        },
        "_parse_noqa_head": {
            "name": "_parse_noqa_head",
            "location": 42,
            "return": [],
            "arguments": {
                "peaker": []
            }
        },
        "_last_node": {
            "name": "_last_node",
            "location": 63,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "foldr": {
            "name": "foldr",
            "location": 73,
            "return": [],
            "arguments": {
                "fun": [],
                "xs": [],
                "acc": []
            }
        },
        "_parse_words_until_newline_or_end": {
            "name": "_parse_words_until_newline_or_end",
            "location": 77,
            "return": [],
            "arguments": {
                "peaker": []
            }
        },
        "_parse_noqa": {
            "name": "_parse_noqa",
            "location": 102,
            "return": [],
            "arguments": {
                "peaker": []
            }
        },
        "_parse_long_description": {
            "name": "_parse_long_description",
            "location": 132,
            "return": [],
            "arguments": {
                "peaker": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 167,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "_parse_words_until_newline_or_end.join": {
            "name": "join",
            "location": 89,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "darglint-master/darglint/parse/numpy.py": {
        "top_parse": {
            "name": "top_parse",
            "location": 61,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "_match": {
            "name": "_match",
            "location": 148,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "lookup": {
            "name": "lookup",
            "location": 204,
            "return": [],
            "arguments": {
                "section": [],
                "section_index": []
            }
        },
        "combinator": {
            "name": "combinator",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "parse": {
            "name": "parse",
            "location": 233,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "top_parse.at_section_boundary": {
            "name": "at_section_boundary",
            "location": 75,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "combinator.inner": {
            "name": "inner",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "parse.mapped_lookup": {
            "name": "mapped_lookup",
            "location": 235,
            "return": [],
            "arguments": {
                "section": [],
                "section_index": []
            }
        }
    },
    "darglint-master/darglint/parse/sphinx.py": {
        "two_newline_separated_or_keyword": {
            "name": "two_newline_separated_or_keyword",
            "location": 40,
            "return": [],
            "arguments": {
                "tokens": [],
                "i": []
            }
        },
        "top_parse": {
            "name": "top_parse",
            "location": 62,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "_match": {
            "name": "_match",
            "location": 88,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "lookup": {
            "name": "lookup",
            "location": 140,
            "return": [],
            "arguments": {
                "section": [],
                "section_index": []
            }
        },
        "combinator": {
            "name": "combinator",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "parse": {
            "name": "parse",
            "location": 186,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "combinator.inner": {
            "name": "inner",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "parse.mapped_lookup": {
            "name": "mapped_lookup",
            "location": 187,
            "return": [],
            "arguments": {
                "section": [],
                "section_index": []
            }
        }
    },
    "darglint-master/darglint/parse/__init__.py": {},
    "darglint-master/darglint/parse/grammars/google_arguments_section.py": {},
    "darglint-master/darglint/parse/grammars/google_long_description.py": {},
    "darglint-master/darglint/parse/grammars/google_raises_section.py": {},
    "darglint-master/darglint/parse/grammars/google_returns_section.py": {},
    "darglint-master/darglint/parse/grammars/google_returns_section_without_type.py": {},
    "darglint-master/darglint/parse/grammars/google_short_description.py": {},
    "darglint-master/darglint/parse/grammars/google_yields_section.py": {},
    "darglint-master/darglint/parse/grammars/google_yields_section_without_type.py": {},
    "darglint-master/darglint/parse/grammars/numpy_arguments_section.py": {},
    "darglint-master/darglint/parse/grammars/numpy_long_description.py": {},
    "darglint-master/darglint/parse/grammars/numpy_other_arguments_section.py": {},
    "darglint-master/darglint/parse/grammars/numpy_raises_section.py": {},
    "darglint-master/darglint/parse/grammars/numpy_receives_section.py": {},
    "darglint-master/darglint/parse/grammars/numpy_returns_section.py": {},
    "darglint-master/darglint/parse/grammars/numpy_short_description.py": {},
    "darglint-master/darglint/parse/grammars/numpy_warns_section.py": {},
    "darglint-master/darglint/parse/grammars/numpy_yields_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_arguments_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_argument_type_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_base.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_long_description.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_raises_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_returns_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_return_type_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_short_description.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_variables_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_variable_type_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_yields_section.py": {},
    "darglint-master/darglint/parse/grammars/sphinx_yield_type_section.py": {},
    "darglint-master/darglint/parse/grammars/__init__.py": {},
    "darglint-master/integration_tests/analysis_tests.py": {
        "yield_modules": {
            "name": "yield_modules",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "RaiseAnalysisTest.test_no_errors_logged_ever": {
            "name": "test_no_errors_logged_ever",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "mock_logger": []
            }
        }
    },
    "darglint-master/integration_tests/compatibility.py": {
        "CompatibilityTest.create_darglint_setup": {
            "name": "create_darglint_setup",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "strictness": []
            }
        },
        "CompatibilityTest.create_flake8_setup": {
            "name": "create_flake8_setup",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "strictness": []
            }
        },
        "CompatibilityTest.create_no_darglint_setup": {
            "name": "create_no_darglint_setup",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.remove_configs": {
            "name": "remove_configs",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompatibilityTest.setUpClass": {
            "name": "setUpClass",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompatibilityTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompatibilityTest.yield_modules": {
            "name": "yield_modules",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.record_errors": {
            "name": "record_errors",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "collection": [],
                "filename": [],
                "config": []
            }
        },
        "CompatibilityTest.record_darglint_errors": {
            "name": "record_darglint_errors",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "collection": [],
                "filename": []
            }
        },
        "CompatibilityTest.test_with_darglint_is_superset": {
            "name": "test_with_darglint_is_superset",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_defaults_taken_from_darglint_config": {
            "name": "test_defaults_taken_from_darglint_config",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_defaults_overriden_from_darglint_config": {
            "name": "test_defaults_overriden_from_darglint_config",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/integration_tests/end_to_end.py": {
        "EndToEndTest.get_errors": {
            "name": "get_errors",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "EndToEndTest.test_enable_disabled_by_default": {
            "name": "test_enable_disabled_by_default",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndToEndTest.test_two_space_indent": {
            "name": "test_two_space_indent",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndToEndTest.test_docstring_style_selection": {
            "name": "test_docstring_style_selection",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/integration_tests/goldens.py": {
        "Goldens.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Goldens.parse_golden": {
            "name": "parse_golden",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "golden": []
            }
        },
        "Goldens.normalize_section": {
            "name": "normalize_section",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Goldens.assertSectionsMatch": {
            "name": "assertSectionsMatch",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "metadata": [],
                "message": []
            }
        },
        "Goldens.assertArgumentsMatch": {
            "name": "assertArgumentsMatch",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "metadata": [],
                "message": []
            }
        },
        "Goldens.assertNoqasMatch": {
            "name": "assertNoqasMatch",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "metadata": [],
                "message": []
            }
        },
        "Goldens.assertVariablesMatch": {
            "name": "assertVariablesMatch",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "metadata": [],
                "message": []
            }
        },
        "Goldens.test_golden": {
            "name": "test_golden",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/integration_tests/grammar_size.py": {
        "convert_filename_to_module": {
            "name": "convert_filename_to_module",
            "location": 12,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "get_python_modules_in_grammars": {
            "name": "get_python_modules_in_grammars",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "get_grammars": {
            "name": "get_grammars",
            "location": 32,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "get_productions_in_grammar": {
            "name": "get_productions_in_grammar",
            "location": 40,
            "return": [],
            "arguments": {
                "grammar": []
            }
        }
    },
    "darglint-master/integration_tests/max_golden_profile.py": {},
    "darglint-master/integration_tests/performance.py": {
        "_read_from_cache": {
            "name": "_read_from_cache",
            "location": 339,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_write_to_cache": {
            "name": "_write_to_cache",
            "location": 349,
            "return": [],
            "arguments": {
                "data": [],
                "filename": []
            }
        },
        "_record_historical": {
            "name": "_record_historical",
            "location": 416,
            "return": [],
            "arguments": {
                "stats": [],
                "module_stats": [],
                "filename": []
            }
        },
        "_main": {
            "name": "_main",
            "location": 429,
            "return": [],
            "arguments": {}
        },
        "Stats.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "times": [],
                "by_length": [],
                "google": [],
                "sphinx": [],
                "timestamp": [],
                "scope": [],
                "numpy": []
            }
        },
        "Stats.is_stale": {
            "name": "is_stale",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stats.decode": {
            "name": "decode",
            "location": 81,
            "return": [],
            "arguments": {
                "datum": []
            }
        },
        "Stats.encode": {
            "name": "encode",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chart.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "stats": [],
                "width": [],
                "height": []
            }
        },
        "Chart.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Performance.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "stats": [],
                "module_stats": []
            }
        },
        "Performance.report_worst_five_percent": {
            "name": "report_worst_five_percent",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "Performance.report_stats": {
            "name": "report_stats",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Performance._parse_golden": {
            "name": "_parse_golden",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "golden": []
            }
        },
        "Performance._parse_and_measure": {
            "name": "_parse_and_measure",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "golden": []
            }
        },
        "Performance._read_goldens": {
            "name": "_read_goldens",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Performance.test_golden_performance": {
            "name": "test_golden_performance",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Performance._read_and_measure": {
            "name": "_read_and_measure",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Performance._get_module_size": {
            "name": "_get_module_size",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Performance.yield_modules": {
            "name": "yield_modules",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Performance.test_repo_performance": {
            "name": "test_repo_performance",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PerformanceRegressionTest.setUpClass": {
            "name": "setUpClass",
            "location": 358,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PerformanceRegressionTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 375,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PerformanceRegressionTest.test_performance_not_worse_than_before": {
            "name": "test_performance_not_worse_than_before",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PerformanceRegressionTest.test_performance_against_repositories": {
            "name": "test_performance_against_repositories",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/integration_tests/sources.py": {
        "SourceFileTestCase.assertWorks": {
            "name": "assertWorks",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "SourceFileTestCase.test_encoding_works": {
            "name": "test_encoding_works",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/integration_tests/test_flake8.py": {
        "Flake8TestCase.test_config_parsed": {
            "name": "test_config_parsed",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/integration_tests/__init__.py": {},
    "darglint-master/integration_tests/files/example-ascii.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "darglint-master/integration_tests/files/example-latin1.py": {},
    "darglint-master/integration_tests/files/example-utf8.py": {},
    "darglint-master/integration_tests/files/google_example.py": {
        "frobscottle": {
            "name": "frobscottle",
            "location": 2,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "darglint-master/integration_tests/files/missing_arg_type.py": {
        "double": {
            "name": "double",
            "location": 1,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "darglint-master/integration_tests/files/numpy_example.py": {
        "frobscottle": {
            "name": "frobscottle",
            "location": 3,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "darglint-master/integration_tests/files/problematic.py": {
        "problematic_function": {
            "name": "problematic_function",
            "location": 2,
            "return": [],
            "arguments": {
                "arg1": []
            }
        },
        "problematic_rst": {
            "name": "problematic_rst",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "darglint-master/integration_tests/files/sphinx_example.py": {
        "frobscottle": {
            "name": "frobscottle",
            "location": 3,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "darglint-master/integration_tests/files/strictness_example.py": {
        "f": {
            "name": "f",
            "location": 1,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "darglint-master/integration_tests/files/two_spaces.py": {
        "Eschatology.destruction": {
            "name": "destruction",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "items": [],
                "saved": []
            }
        }
    },
    "darglint-master/tests/sphinx_docstrings.py": {
        "publish_msgstr": {
            "name": "publish_msgstr",
            "location": 10,
            "return": [],
            "arguments": {
                "app": [],
                "source": [],
                "source_path": [],
                "source_line": [],
                "config": [],
                "settings": []
            }
        },
        "_strip_basic_auth": {
            "name": "_strip_basic_auth",
            "location": 28,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_original_messages": {
            "name": "extract_original_messages",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "read_requirements": {
            "name": "read_requirements",
            "location": 57,
            "return": [],
            "arguments": {
                "fh": [],
                "resolve": []
            }
        },
        "copytree": {
            "name": "copytree",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "destination": [],
                "symlinks": []
            }
        },
        "rmtree": {
            "name": "rmtree",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "ignore_errors": [],
                "onerror": []
            }
        },
        "test_params": {
            "name": "test_params",
            "location": 103,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "add_uids": {
            "name": "add_uids",
            "location": 117,
            "return": [],
            "arguments": {
                "doctree": [],
                "condition": []
            }
        },
        "merge_doctrees": {
            "name": "merge_doctrees",
            "location": 131,
            "return": [],
            "arguments": {
                "old": [],
                "new": [],
                "condition": []
            }
        },
        "_read_from_url": {
            "name": "_read_from_url",
            "location": 145,
            "return": [],
            "arguments": {
                "url": [],
                "config": []
            }
        },
        "_get_safe_url": {
            "name": "_get_safe_url",
            "location": 165,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "find_catalog_source_files": {
            "name": "find_catalog_source_files",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "get_full_module_name": {
            "name": "get_full_module_name",
            "location": 202,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "set_application": {
            "name": "set_application",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "write_bytes": {
            "name": "write_bytes",
            "location": 222,
            "return": [],
            "arguments": {
                "sef": [],
                "bytes": [],
                "append": []
            }
        },
        "repr_domxml": {
            "name": "repr_domxml",
            "location": 233,
            "return": [],
            "arguments": {
                "node": [],
                "length": []
            }
        },
        "docstrings": {
            "name": "docstrings",
            "location": 248,
            "return": [],
            "arguments": {}
        }
    },
    "darglint-master/tests/test_abstract_callable_visitor.py": {
        "PureAbstractVisitorTests.analyzeAbstract": {
            "name": "analyzeAbstract",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "PureAbstractVisitorTests.check_abstract_decoration": {
            "name": "check_abstract_decoration",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "result": []
            }
        },
        "PureAbstractVisitorTests.check_abstract_toggle_doc": {
            "name": "check_abstract_toggle_doc",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "result": [],
                "doc": []
            }
        },
        "PureAbstractVisitorTests.test_pass": {
            "name": "test_pass",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PureAbstractVisitorTests.test_return": {
            "name": "test_return",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PureAbstractVisitorTests.test_ellipsis": {
            "name": "test_ellipsis",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PureAbstractVisitorTests.test_constant": {
            "name": "test_constant",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PureAbstractVisitorTests.test_not_implemented_exception": {
            "name": "test_not_implemented_exception",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PureAbstractVisitorTests.test_not_implemented_exception_reason": {
            "name": "test_not_implemented_exception_reason",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PureAbstractVisitorTests.test_not_implemented": {
            "name": "test_not_implemented",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PureAbstractVisitorTests.test_only_docstring": {
            "name": "test_only_docstring",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_analysis_visitor.py": {
        "AnalysisVisitorTests.assertFound": {
            "name": "assertFound",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "attribute": [],
                "args": [],
                "transform": []
            }
        },
        "AnalysisVisitorTests.test_analyze_single_function_with_everything": {
            "name": "test_analyze_single_function_with_everything",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalysisVisitorTests.test_only_current_function_checked": {
            "name": "test_only_current_function_checked",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalysisVisitorTests.test_finds_abstract": {
            "name": "test_finds_abstract",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalysisVisitorTests.test_finds_not_abstract": {
            "name": "test_finds_not_abstract",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_argument_visitor.py": {
        "ArgumentVisitorTests.assertFound": {
            "name": "assertFound",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "ArgumentVisitorTests.assertTypesFound": {
            "name": "assertTypesFound",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "ArgumentVisitorTests.test_no_arguments": {
            "name": "test_no_arguments",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_one_argument": {
            "name": "test_one_argument",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_many_arguments": {
            "name": "test_many_arguments",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_keyword_arguments": {
            "name": "test_keyword_arguments",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_keyword_only_arguments": {
            "name": "test_keyword_only_arguments",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_order_only_arguments": {
            "name": "test_order_only_arguments",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_order_and_keyword_arguments": {
            "name": "test_order_and_keyword_arguments",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_method": {
            "name": "test_method",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_argument_type_inline": {
            "name": "test_argument_type_inline",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_no_argument_type": {
            "name": "test_no_argument_type",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentVisitorTests.test_multiple_types_ordered": {
            "name": "test_multiple_types_ordered",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_assert_visitor.py": {
        "AssertVisitorTests.assertFound": {
            "name": "assertFound",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "program": [],
                "n": []
            }
        },
        "AssertVisitorTests.test_no_asserts": {
            "name": "test_no_asserts",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertVisitorTests.test_one_assertion": {
            "name": "test_one_assertion",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertVisitorTests.test_two_assertions": {
            "name": "test_two_assertions",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertVisitorTests.test_assertion_in_async_func": {
            "name": "test_assertion_in_async_func",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_config.py": {
        "WalkPathTestCase.test_at_root_yields_only_once": {
            "name": "test_at_root_yields_only_once",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "mock_getcwd": []
            }
        },
        "WalkPathTestCase.test_really_long_path": {
            "name": "test_really_long_path",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "mock_getcwd": []
            }
        },
        "FindConfigFileInPathTestCase.test_filename_checked": {
            "name": "test_filename_checked",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "mock_listdir": [],
                "mock_ConfigParser": []
            }
        },
        "LoggingTestCase.test_log_level_set_by_config": {
            "name": "test_log_level_set_by_config",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindConfigFileInPathTestCase.test_filename_checked.read_file": {
            "name": "read_file",
            "location": 80,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "darglint-master/tests/test_custom_assert.py": {
        "AssertTestCase.test_can_configure_to_raise": {
            "name": "test_can_configure_to_raise",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertTestCase.test_logs_by_default": {
            "name": "test_logs_by_default",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_logger": []
            }
        }
    },
    "darglint-master/tests/test_cyk.py": {
        "ekg_lex": {
            "name": "ekg_lex",
            "location": 167,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "pn_lex": {
            "name": "pn_lex",
            "location": 353,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "verify_implementation": {
            "name": "verify_implementation",
            "location": 457,
            "return": [],
            "arguments": {}
        },
        "KlingonGrammarTest.test_parse_simple_member": {
            "name": "test_parse_simple_member",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KlingonGrammarTest.test_parse_simple_nonmember": {
            "name": "test_parse_simple_nonmember",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KlingonGrammarTest.test_parse_empty_is_never_part_of_grammar": {
            "name": "test_parse_empty_is_never_part_of_grammar",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KlingonGrammarTest.test_parse_returns_parse_tree": {
            "name": "test_parse_returns_parse_tree",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AmbiguousKlingonGrammarTest.test_parses_ambiguous_grammars": {
            "name": "test_parses_ambiguous_grammars",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorKlingonGrammarTest.has_annotation": {
            "name": "has_annotation",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "guard": []
            }
        },
        "ErrorKlingonGrammarTest._debug": {
            "name": "_debug",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "indent": []
            }
        },
        "ErrorKlingonGrammarTest.test_valid_case": {
            "name": "test_valid_case",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorKlingonGrammarTest.test_invalid_case": {
            "name": "test_invalid_case",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorKlingonGrammarTest.test_error_case": {
            "name": "test_error_case",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleGrammarTest.test_parse_long_sentence_small_grammar": {
            "name": "test_parse_long_sentence_small_grammar",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTests.contains_annotation": {
            "name": "contains_annotation",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "target": []
            }
        },
        "PhoneNumberTests.test_correct_number_prefered": {
            "name": "test_correct_number_prefered",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhoneNumberTests.test_backup_determined_by_weight": {
            "name": "test_backup_determined_by_weight",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_docstring.py": {
        "DocstringBaseMethodTests.setUpClass": {
            "name": "setUpClass",
            "location": 191,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DocstringBaseMethodTests.test_get_section_equivalency": {
            "name": "test_get_section_equivalency",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringBaseMethodTests.test_get_types_equivalency": {
            "name": "test_get_types_equivalency",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringBaseMethodTests.test_get_items_equivalency": {
            "name": "test_get_items_equivalency",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringBaseMethodTests.test_type_and_name_always_associated": {
            "name": "test_type_and_name_always_associated",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_global_noqa_no_body": {
            "name": "test_global_noqa_no_body",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_global_noqa_star_body": {
            "name": "test_global_noqa_star_body",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_short_description": {
            "name": "test_get_short_description",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_long_description": {
            "name": "test_get_long_description",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_arguments_description": {
            "name": "test_get_arguments_description",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_argument_types": {
            "name": "test_get_argument_types",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_return_section": {
            "name": "test_get_return_section",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_return_type": {
            "name": "test_get_return_type",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_yields_description": {
            "name": "test_get_yields_description",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_yields_type": {
            "name": "test_get_yields_type",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_raises_description": {
            "name": "test_get_raises_description",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_exception_types": {
            "name": "test_get_exception_types",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_noqas": {
            "name": "test_get_noqas",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_get_noqas_with_exception": {
            "name": "test_get_noqas_with_exception",
            "location": 558,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringMethodTest.test_has_section": {
            "name": "test_has_section",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForSphinxTests.test_has_everything_for_sphinx": {
            "name": "test_has_everything_for_sphinx",
            "location": 625,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForSphinxTests.test_has_everything_for_sphinx_multiline": {
            "name": "test_has_everything_for_sphinx_multiline",
            "location": 667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForSphinxTests.test_arguments_section_with_newline": {
            "name": "test_arguments_section_with_newline",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForSphinxTests.test_get_argument_types": {
            "name": "test_get_argument_types",
            "location": 711,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest._get_args": {
            "name": "_get_args",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest._get_types": {
            "name": "_get_types",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DocstringForNumpyTest._get_argtype_pairs": {
            "name": "_get_argtype_pairs",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "types": []
            }
        },
        "DocstringForNumpyTest._combine": {
            "name": "_combine",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "argtype_pairs": []
            }
        },
        "DocstringForNumpyTest.generate_docstring": {
            "name": "generate_docstring",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "argtypes": []
            }
        },
        "DocstringForNumpyTest.test_multiple_arguments_on_one_line": {
            "name": "test_multiple_arguments_on_one_line",
            "location": 827,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest.test_extract_simplest_raises_section": {
            "name": "test_extract_simplest_raises_section",
            "location": 856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest.test_arguments_section_with_breaks_in_lines_and_indents": {
            "name": "test_arguments_section_with_breaks_in_lines_and_indents",
            "location": 871,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest.test_arguments_without_description": {
            "name": "test_arguments_without_description",
            "location": 903,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest.test_arguments_section_with_break_after_description": {
            "name": "test_arguments_section_with_break_after_description",
            "location": 918,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest.test_satisfies_strictness_short_description": {
            "name": "test_satisfies_strictness_short_description",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest.test_satisfies_strictness_long_description": {
            "name": "test_satisfies_strictness_long_description",
            "location": 984,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringForNumpyTest.test_satisfies_strictness_full_description": {
            "name": "test_satisfies_strictness_full_description",
            "location": 1025,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_error.py": {
        "ErrorTest.get_n_errors": {
            "name": "get_n_errors",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "src": [],
                "config": []
            }
        },
        "ErrorTest.get_single_error": {
            "name": "get_single_error",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "config": []
            }
        },
        "ErrorTest.test_missing_section_has_no_line_number": {
            "name": "test_missing_section_has_no_line_number",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_missing_single_parameter_has_line_number": {
            "name": "test_missing_single_parameter_has_line_number",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_incorrect_parameter_has_line_number": {
            "name": "test_incorrect_parameter_has_line_number",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_generic_syntax_error_has_line_number_of_last_correct": {
            "name": "test_generic_syntax_error_has_line_number_of_last_correct",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_parameter_type_mismatch_points_to_docstring_parameter": {
            "name": "test_parameter_type_mismatch_points_to_docstring_parameter",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_missing_return_error_has_no_line_number": {
            "name": "test_missing_return_error_has_no_line_number",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_excess_return_error_points_to_returns_section": {
            "name": "test_excess_return_error_points_to_returns_section",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_return_type_mismatch_error_points_to_returns_section": {
            "name": "test_return_type_mismatch_error_points_to_returns_section",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_missing_yield_error_has_no_line_number": {
            "name": "test_missing_yield_error_has_no_line_number",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_excess_yield_error_points_to_yields_section": {
            "name": "test_excess_yield_error_points_to_yields_section",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_missing_raise_error_has_no_line_number": {
            "name": "test_missing_raise_error_has_no_line_number",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_excess_raise_error_points_to_item": {
            "name": "test_excess_raise_error_points_to_item",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_missing_definition_after_item_points_to_item_line": {
            "name": "test_missing_definition_after_item_points_to_item_line",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_missing_definition_points_to_items_in_middle": {
            "name": "test_missing_definition_points_to_items_in_middle",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_default_disabled_error": {
            "name": "test_default_disabled_error",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTest.test_ignore_raise": {
            "name": "test_ignore_raise",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_error_report.py": {
        "_get_function_description": {
            "name": "_get_function_description",
            "location": 11,
            "return": [],
            "arguments": {
                "program": []
            }
        },
        "ErrorReportMessageTemplateTest.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReportMessageTemplateTest.test_message_template_can_be_empty": {
            "name": "test_message_template_can_be_empty",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReportMessageTemplateTest.test_format_string_only_msg_id": {
            "name": "test_format_string_only_msg_id",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReportMessageTemplateTest.test_format_can_include_string_constants": {
            "name": "test_format_can_include_string_constants",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReportMessageTemplateTest.test_all_attributes": {
            "name": "test_all_attributes",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorReportMessageTemplateTest.test_message_template_is_none_uses_default": {
            "name": "test_message_template_is_none_uses_default",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_function_and_method_visitor.py": {
        "FunctionAndMethodVisitorTests.parse_and_visit": {
            "name": "parse_and_visit",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "FunctionAndMethodVisitorTests.assertFoundMethods": {
            "name": "assertFoundMethods",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "FunctionAndMethodVisitorTests.assertFoundFunctions": {
            "name": "assertFoundFunctions",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "FunctionAndMethodVisitorTests.assertFoundProperties": {
            "name": "assertFoundProperties",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "FunctionAndMethodVisitorTests.test_no_methods_or_functions": {
            "name": "test_no_methods_or_functions",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_functions_found": {
            "name": "test_functions_found",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_methods_found": {
            "name": "test_methods_found",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_properties_found": {
            "name": "test_properties_found",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_nested_functions_found": {
            "name": "test_nested_functions_found",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_functions_nested_in_method": {
            "name": "test_functions_nested_in_method",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_methods_nested_in_function": {
            "name": "test_methods_nested_in_function",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_properties_nested_in_function": {
            "name": "test_properties_nested_in_function",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionAndMethodVisitorTests.test_lambdas_not_functions": {
            "name": "test_lambdas_not_functions",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_function_description.py": {
        "GetFunctionsAndDocstrings.test_gets_functions": {
            "name": "test_gets_functions",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_gets_methods": {
            "name": "test_gets_methods",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_removes_cls_from_class_arguments": {
            "name": "test_removes_cls_from_class_arguments",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_setters_and_getters_treated_like_normal_methods": {
            "name": "test_setters_and_getters_treated_like_normal_methods",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_tells_if_not_fruitful": {
            "name": "test_tells_if_not_fruitful",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_doesnt_mistake_inner_function_return_for_fruitful": {
            "name": "test_doesnt_mistake_inner_function_return_for_fruitful",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_no_docstring_is_okay": {
            "name": "test_no_docstring_is_okay",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_tells_if_raises_errors": {
            "name": "test_tells_if_raises_errors",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_raise_with_fully_qualified_name": {
            "name": "test_raise_with_fully_qualified_name",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_qualified_error_from_library": {
            "name": "test_qualified_error_from_library",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_implicit_error_caught_and_raised": {
            "name": "test_implicit_error_caught_and_raised",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_extracts_type_hints_for_arguments": {
            "name": "test_extracts_type_hints_for_arguments",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_argument_types_are_non_if_not_specified": {
            "name": "test_argument_types_are_non_if_not_specified",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_extracts_return_type": {
            "name": "test_extracts_return_type",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_return_type_non_if_not_specified": {
            "name": "test_return_type_non_if_not_specified",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_star_arguments_retain_stars": {
            "name": "test_star_arguments_retain_stars",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_multiple_returns_has_returns": {
            "name": "test_multiple_returns_has_returns",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_return_in_try_else": {
            "name": "test_return_in_try_else",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_keyword_only_arguments": {
            "name": "test_keyword_only_arguments",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_keyword_only_arguments_with_type_hints": {
            "name": "test_keyword_only_arguments_with_type_hints",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_has_assert": {
            "name": "test_has_assert",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_positional_arguments_token_ignored": {
            "name": "test_positional_arguments_token_ignored",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_keyword_only_arguments_token_ignored": {
            "name": "test_keyword_only_arguments_token_ignored",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_positional_and_keyword_only_token_ignored": {
            "name": "test_positional_and_keyword_only_token_ignored",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_nested_functions_partition_signatures": {
            "name": "test_nested_functions_partition_signatures",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_lambda_doesnt_alter_signature": {
            "name": "test_lambda_doesnt_alter_signature",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetFunctionsAndDocstrings.test_property": {
            "name": "test_property",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_function_scoped_visitor.py": {
        "FunctionScopedVisitorMixinTests.assertArgsFound": {
            "name": "assertArgsFound",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "FunctionScopedVisitorMixinTests.assertReturnFound": {
            "name": "assertReturnFound",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "FunctionScopedVisitorMixinTests.assertNoReturnFound": {
            "name": "assertNoReturnFound",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "FunctionScopedVisitorMixinTests.test_nested_return": {
            "name": "test_nested_return",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScopedVisitorMixinTests.test_deeply_nested_return": {
            "name": "test_deeply_nested_return",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScopedVisitorMixinTests.test_only_outermost_captured": {
            "name": "test_only_outermost_captured",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScopedVisitorMixinTests.test_outer_async_function_captured": {
            "name": "test_outer_async_function_captured",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScopedVisitorMixinTests.test_inner_async_skipped": {
            "name": "test_inner_async_skipped",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionScopedVisitorMixinTests.test_lambda_forms_scope": {
            "name": "test_lambda_forms_scope",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_generated_grammar.py": {
        "_lex": {
            "name": "_lex",
            "location": 112,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "lex": {
            "name": "lex",
            "location": 133,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "GeneratedGrammarTest.test_valid_sentences": {
            "name": "test_valid_sentences",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneratedGrammarTest.test_invalid_sentences": {
            "name": "test_invalid_sentences",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_grammar.py": {
        "GrammarTest.test_grammar_must_have_productions_and_start": {
            "name": "test_grammar_must_have_productions_and_start",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GrammarTest.test_only_productions_and_start_necessary": {
            "name": "test_only_productions_and_start_necessary",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProductionTest.test_can_create_production": {
            "name": "test_can_create_production",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProductionTest.test_can_create_production_with_annotations": {
            "name": "test_can_create_production_with_annotations",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_identifiers.py": {
        "_l": {
            "name": "_l",
            "location": 18,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "_r": {
            "name": "_r",
            "location": 25,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "_v": {
            "name": "_v",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "PathTestCase.test_straight_path_passing": {
            "name": "test_straight_path_passing",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_straight_path_failing": {
            "name": "test_straight_path_failing",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_branch_passing": {
            "name": "test_branch_passing",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_branch_failing": {
            "name": "test_branch_failing",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_straight_then_branch_passing": {
            "name": "test_straight_then_branch_passing",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_straight_then_branch_failing": {
            "name": "test_straight_then_branch_failing",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_chain_is_distributive": {
            "name": "test_chain_is_distributive",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_can_extract_non_leaf": {
            "name": "test_can_extract_non_leaf",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase._random_node": {
            "name": "_random_node",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "minlength": [],
                "maxlength": []
            }
        },
        "PathTestCase._random_branch": {
            "name": "_random_branch",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "curr": [],
                "depth": []
            }
        },
        "PathTestCase._random_of": {
            "name": "_random_of",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "curr": [],
                "depth": []
            }
        },
        "PathTestCase._random_branch_or_of": {
            "name": "_random_branch_or_of",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "curr": [],
                "depth": []
            }
        },
        "PathTestCase._random_path": {
            "name": "_random_path",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "depth": []
            }
        },
        "PathTestCase.test_does_not_throw_exception_passing": {
            "name": "test_does_not_throw_exception_passing",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_probably_failing_paths_dont_raise_exception": {
            "name": "test_probably_failing_paths_dont_raise_exception",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_integrity_checker.py": {
        "IntegrityCheckerNumpyTestCase.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerNumpyTestCase.tearDown": {
            "name": "tearDown",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerNumpyTestCase.test_missing_parameter": {
            "name": "test_missing_parameter",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerNumpyTestCase.test_doesnt_require_private_arguments": {
            "name": "test_doesnt_require_private_arguments",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerNumpyTestCase.test_runs_other_checks_on_private_arguments": {
            "name": "test_runs_other_checks_on_private_arguments",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerNumpyTestCase.test_empty_type_in_raises_section": {
            "name": "test_empty_type_in_raises_section",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerNumpyTestCase.test_empty_description_error": {
            "name": "test_empty_description_error",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerNumpyTestCase.test_parameter_types_captured": {
            "name": "test_parameter_types_captured",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.setUp": {
            "name": "setUp",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.tearDown": {
            "name": "tearDown",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_missing_parameter": {
            "name": "test_missing_parameter",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_return_incorrectly_has_parameter": {
            "name": "test_return_incorrectly_has_parameter",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_underspecified_parameter_types": {
            "name": "test_underspecified_parameter_types",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_empty_description_error": {
            "name": "test_empty_description_error",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_missing_parameter_types": {
            "name": "test_missing_parameter_types",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_variable_doesnt_exist": {
            "name": "test_variable_doesnt_exist",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_catch_and_raise": {
            "name": "test_catch_and_raise",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_doesnt_require_private_arguments": {
            "name": "test_doesnt_require_private_arguments",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerSphinxTestCase.test_runs_other_checks_on_private_arguments": {
            "name": "test_runs_other_checks_on_private_arguments",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_ignore_private_methods": {
            "name": "test_ignore_private_methods",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_ignore_properties": {
            "name": "test_ignore_properties",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_ignore_style_errors": {
            "name": "test_ignore_style_errors",
            "location": 595,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_missing_parameter_added": {
            "name": "test_missing_parameter_added",
            "location": 621,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_underspecified_parameter_types": {
            "name": "test_underspecified_parameter_types",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_try_block_no_excess_error": {
            "name": "test_try_block_no_excess_error",
            "location": 667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_excess_parameter_added": {
            "name": "test_excess_parameter_added",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_malformed_errors_raise_appropriate_warning": {
            "name": "test_malformed_errors_raise_appropriate_warning",
            "location": 717,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_missing_return_parameter_added": {
            "name": "test_missing_return_parameter_added",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_skips_functions_without_docstrings": {
            "name": "test_skips_functions_without_docstrings",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_missing_yield_added_to_errors": {
            "name": "test_missing_yield_added_to_errors",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_excess_yield_added_to_errors": {
            "name": "test_excess_yield_added_to_errors",
            "location": 780,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_yields_from_added_to_error": {
            "name": "test_yields_from_added_to_error",
            "location": 798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_missing_raises_added_to_error": {
            "name": "test_missing_raises_added_to_error",
            "location": 811,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_extra_raises_added_to_error": {
            "name": "test_extra_raises_added_to_error",
            "location": 827,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_arg_types_checked_if_in_both_docstring_and_function": {
            "name": "test_arg_types_checked_if_in_both_docstring_and_function",
            "location": 857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_return_type_unchecked_if_not_defined_in_docstring": {
            "name": "test_return_type_unchecked_if_not_defined_in_docstring",
            "location": 881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_return_type_unchecked_if_not_defined_in_function": {
            "name": "test_return_type_unchecked_if_not_defined_in_function",
            "location": 898,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_return_type_checked_if_defined_in_docstring_and_function": {
            "name": "test_return_type_checked_if_defined_in_docstring_and_function",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.has_no_errors": {
            "name": "has_no_errors",
            "location": 940,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_after_excess_raises": {
            "name": "test_noqa_after_excess_raises",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_missing_raises": {
            "name": "test_noqa_for_missing_raises",
            "location": 967,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_excess_parameters": {
            "name": "test_noqa_for_excess_parameters",
            "location": 979,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_missing_parameters": {
            "name": "test_noqa_for_missing_parameters",
            "location": 992,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_missing_return_parameter_added": {
            "name": "test_noqa_missing_return_parameter_added",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_excess_return": {
            "name": "test_noqa_excess_return",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_missing_yield": {
            "name": "test_noqa_for_missing_yield",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_excess_yield": {
            "name": "test_noqa_for_excess_yield",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_parameter_type_mismatch": {
            "name": "test_noqa_for_parameter_type_mismatch",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_parameter_type_mismatch_by_name": {
            "name": "test_noqa_for_parameter_type_mismatch_by_name",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_noqa_for_return_type_mismatch": {
            "name": "test_noqa_for_return_type_mismatch",
            "location": 1096,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_incorrect_syntax_raises_exception_optionally": {
            "name": "test_incorrect_syntax_raises_exception_optionally",
            "location": 1116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_error_if_no_colon_in_parameter_line_cyk": {
            "name": "test_error_if_no_colon_in_parameter_line_cyk",
            "location": 1143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_catch_and_raise": {
            "name": "test_catch_and_raise",
            "location": 1167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_raises_style_error_if_no_content_after_colon": {
            "name": "test_raises_style_error_if_no_content_after_colon",
            "location": 1191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_bare_return_doesnt_count_but_doesnt_count_against": {
            "name": "test_bare_return_doesnt_count_but_doesnt_count_against",
            "location": 1224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_bare_noqa": {
            "name": "test_bare_noqa",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_global_noqa": {
            "name": "test_global_noqa",
            "location": 1264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_global_noqa_works_for_syntax_errors": {
            "name": "test_global_noqa_works_for_syntax_errors",
            "location": 1276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_star_args_are_optional": {
            "name": "test_star_args_are_optional",
            "location": 1293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_empty_type_section": {
            "name": "test_empty_type_section",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_doesnt_require_private_arguments": {
            "name": "test_doesnt_require_private_arguments",
            "location": 1335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_runs_other_checks_on_private_arguments": {
            "name": "test_runs_other_checks_on_private_arguments",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrityCheckerTestCase.test_assertion_error_allowed": {
            "name": "test_assertion_error_allowed",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.setUp": {
            "name": "setUp",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.get_function_with": {
            "name": "get_function_with",
            "location": 1504,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": []
            }
        },
        "StrictnessTests.assertHasNoErrors": {
            "name": "assertHasNoErrors",
            "location": 1513,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "docstring": []
            }
        },
        "StrictnessTests.assertHasErrors": {
            "name": "assertHasErrors",
            "location": 1524,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "docstring": []
            }
        },
        "StrictnessTests.test_short_google_strictness": {
            "name": "test_short_google_strictness",
            "location": 1533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_long_google_strictness": {
            "name": "test_long_google_strictness",
            "location": 1536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_not_google_short_description": {
            "name": "test_not_google_short_description",
            "location": 1543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_not_google_long_description": {
            "name": "test_not_google_long_description",
            "location": 1550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_google_full_description": {
            "name": "test_google_full_description",
            "location": 1553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_short_sphinx": {
            "name": "test_short_sphinx",
            "location": 1561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_long_sphinx": {
            "name": "test_long_sphinx",
            "location": 1569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_full_sphinx": {
            "name": "test_full_sphinx",
            "location": 1580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrictnessTests.test_two_spaces": {
            "name": "test_two_spaces",
            "location": 1588,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_lex.py": {
        "LexTestCase.test_lex_empty_string_returns_no_tokens": {
            "name": "test_lex_empty_string_returns_no_tokens",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_lex_yields_indent_for_four_spaces": {
            "name": "test_lex_yields_indent_for_four_spaces",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_lex_yields_newlines_for_newlines": {
            "name": "test_lex_yields_newlines_for_newlines",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_lex_yields_colons": {
            "name": "test_lex_yields_colons",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_lex_skips_separators": {
            "name": "test_lex_skips_separators",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_all_other_characters_are_word_characters": {
            "name": "test_all_other_characters_are_word_characters",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_tokens_contain_strings_as_values": {
            "name": "test_tokens_contain_strings_as_values",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_oneline_docstring": {
            "name": "test_oneline_docstring",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_hash": {
            "name": "test_hash",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_extended_docstring": {
            "name": "test_extended_docstring",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_args": {
            "name": "test_args",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_parenthesis_in_types": {
            "name": "test_parenthesis_in_types",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexTestCase.test_parse_parenthesis_in_word": {
            "name": "test_parse_parenthesis_in_word",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CondenseTests.test_dissimilar_types_passes_directly": {
            "name": "test_dissimilar_types_passes_directly",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CondenseTests.test_words_get_concatenated": {
            "name": "test_words_get_concatenated",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CondenseTests.test_condensed_words_single_spaced": {
            "name": "test_condensed_words_single_spaced",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CondenseTests.test_returns_are_assigned": {
            "name": "test_returns_are_assigned",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_long_description_parse.py": {
        "LongDescriptionParserTestCase.parse_string": {
            "name": "parse_string",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LongDescriptionParserTestCase.get_identifiers": {
            "name": "get_identifiers",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "identifier": []
            }
        },
        "LongDescriptionParserTestCase.get_identifier": {
            "name": "get_identifier",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "identifier": []
            }
        },
        "LongDescriptionParserTestCase.assertContains": {
            "name": "assertContains",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "identifier": [],
                "msg": []
            }
        },
        "LongDescriptionParserTestCase.assertTokensEqual": {
            "name": "assertTokensEqual",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "token1": [],
                "token2": [],
                "msg": []
            }
        },
        "LongDescriptionParserTestCase.assertNodesEqual": {
            "name": "assertNodesEqual",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "node1": [],
                "node2": [],
                "msg": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_single_word": {
            "name": "test_parse_single_word",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_multiple_words": {
            "name": "test_parse_multiple_words",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_with_other_symbols": {
            "name": "test_parse_with_other_symbols",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_endline_bare_noqa": {
            "name": "test_parse_endline_bare_noqa",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_newline_bare_noqa": {
            "name": "test_parse_newline_bare_noqa",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_just_noqa": {
            "name": "test_parse_just_noqa",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_initial_bare_noqa": {
            "name": "test_parse_initial_bare_noqa",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_noqa_with_targets": {
            "name": "test_parse_noqa_with_targets",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_parse_noqa_with_multiple_targets": {
            "name": "test_parse_noqa_with_multiple_targets",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_cyk_noqa_matches": {
            "name": "test_cyk_noqa_matches",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_noqa_always_on_left": {
            "name": "test_noqa_always_on_left",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongDescriptionParserTestCase.test_noqa_identifiers_correct": {
            "name": "test_noqa_identifiers_correct",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_new_google_parser.py": {
        "NewGoogleParserTests.test_top_parse_sections_le_nonnewline_tokens": {
            "name": "test_top_parse_sections_le_nonnewline_tokens",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_expected_amount_of_sections": {
            "name": "test_expected_amount_of_sections",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_leading_newlines_stripped": {
            "name": "test_leading_newlines_stripped",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_top_parse_separates_by_indent_if_section_starts": {
            "name": "test_top_parse_separates_by_indent_if_section_starts",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_top_parse_only_separates_by_indent_if_followed_by_newline": {
            "name": "test_top_parse_only_separates_by_indent_if_followed_by_newline",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_top_parse_sections_do_not_start_with_newlines_and_nonempty": {
            "name": "test_top_parse_sections_do_not_start_with_newlines_and_nonempty",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.has_double_newline": {
            "name": "has_double_newline",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "NewGoogleParserTests.test_no_double_newlines_after_top_parse": {
            "name": "test_no_double_newlines_after_top_parse",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_specific": {
            "name": "test_specific",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_lookup_always_returns_something": {
            "name": "test_lookup_always_returns_something",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_lookup_tries_return_section_before_long_description": {
            "name": "test_lookup_tries_return_section_before_long_description",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_args_section": {
            "name": "test_parse_args_section",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_args_section_with_quotation": {
            "name": "test_parse_args_section_with_quotation",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_args_section_with_type": {
            "name": "test_parse_args_section_with_type",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_yields_section": {
            "name": "test_parse_yields_section",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_yields_short_description_for_first_line_if_possible": {
            "name": "test_parse_yields_short_description_for_first_line_if_possible",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_long_description_with_noqa": {
            "name": "test_long_description_with_noqa",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_args_section_with_newline_after_arg_name": {
            "name": "test_parse_args_section_with_newline_after_arg_name",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_args_section_with_newline_after_type": {
            "name": "test_parse_args_section_with_newline_after_type",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_args_section_with_newline_after_type_in_context": {
            "name": "test_parse_args_section_with_newline_after_type_in_context",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_raises_section_with_newline_after_item_name": {
            "name": "test_parse_raises_section_with_newline_after_item_name",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_parse_library_exception": {
            "name": "test_parse_library_exception",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewGoogleParserTests.test_nonstandard_types_captures_argument": {
            "name": "test_nonstandard_types_captures_argument",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_node.py": {
        "CykNodeTest.build_binary_search_tree": {
            "name": "build_binary_search_tree",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "value": []
            }
        },
        "CykNodeTest.assertIsSorted": {
            "name": "assertIsSorted",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "arr": [],
                "reverse": []
            }
        },
        "CykNodeTest.test_in_order_traversal": {
            "name": "test_in_order_traversal",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_numpy_parser.py": {
        "NumpydocTests.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.assertContains": {
            "name": "assertContains",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "node_name": [],
                "msg": []
            }
        },
        "NumpydocTests.assertIdentified": {
            "name": "assertIdentified",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "identifier": [],
                "expected": [],
                "msg": []
            }
        },
        "NumpydocTests.assertHasIdentifier": {
            "name": "assertHasIdentifier",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "docstring": [],
                "identifier": []
            }
        },
        "NumpydocTests.test_can_parse_short_description": {
            "name": "test_can_parse_short_description",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_can_parse_deprecation_warning": {
            "name": "test_can_parse_deprecation_warning",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_can_parse_long_description": {
            "name": "test_can_parse_long_description",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_can_parse_empty_parameters_section": {
            "name": "test_can_parse_empty_parameters_section",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_header_can_have_variable_length": {
            "name": "test_header_can_have_variable_length",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_single_parameter": {
            "name": "test_single_parameter",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_multiple_parameters": {
            "name": "test_multiple_parameters",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_error_associated_with_no_whitespace_before_type": {
            "name": "test_error_associated_with_no_whitespace_before_type",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_arguments_section_with_types": {
            "name": "test_arguments_section_with_types",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_class_method_with_types": {
            "name": "test_class_method_with_types",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_two_combined_parameters": {
            "name": "test_two_combined_parameters",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_returns_section": {
            "name": "test_returns_section",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_return_type_missing_exception": {
            "name": "test_return_type_missing_exception",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_return_type_with_single_name": {
            "name": "test_return_type_with_single_name",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_return_type_with_multiple_names": {
            "name": "test_return_type_with_multiple_names",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_yields_section": {
            "name": "test_yields_section",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_yield_type_missing_exception": {
            "name": "test_yield_type_missing_exception",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_yield_type_with_single_name": {
            "name": "test_yield_type_with_single_name",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_yield_type_with_multiple_names": {
            "name": "test_yield_type_with_multiple_names",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_receives_without_yield_error": {
            "name": "test_receives_without_yield_error",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_receives_section": {
            "name": "test_receives_section",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_other_parameters_section": {
            "name": "test_other_parameters_section",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_raises_section": {
            "name": "test_raises_section",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_multiple_entries_in_raises": {
            "name": "test_multiple_entries_in_raises",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_warns_section": {
            "name": "test_warns_section",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_noqas_in_long_description": {
            "name": "test_noqas_in_long_description",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_noqas_in_parameters_section": {
            "name": "test_noqas_in_parameters_section",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_noqas_in_short_description": {
            "name": "test_noqas_in_short_description",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_colon_after_error_parses_with_error": {
            "name": "test_colon_after_error_parses_with_error",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_colon_after_error_with_noqa": {
            "name": "test_colon_after_error_with_noqa",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_noqa_may_appear_after_raises_item": {
            "name": "test_noqa_may_appear_after_raises_item",
            "location": 605,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumpydocTests.test_raises_item_without_body": {
            "name": "test_raises_item_without_body",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_parser.py": {
        "DocstringTestCase.assertContains": {
            "name": "assertContains",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "symbol": []
            }
        },
        "DocstringTestCase.values_of": {
            "name": "values_of",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "symbol": []
            }
        },
        "DocstringTestCase.get_identifier": {
            "name": "get_identifier",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "identifier": []
            }
        },
        "DocstringTestCase.test_parse_noqa_for_argument": {
            "name": "test_parse_noqa_for_argument",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_noqa_for_global": {
            "name": "test_parse_noqa_for_global",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_global_noqa_with_target": {
            "name": "test_parse_global_noqa_with_target",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parses_long_description": {
            "name": "test_parses_long_description",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_long_description_multiple_sections": {
            "name": "test_parse_long_description_multiple_sections",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_arguments_can_be_extracted": {
            "name": "test_arguments_can_be_extracted",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_type_is_type": {
            "name": "test_type_is_type",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_crazy_argument_type_signatures": {
            "name": "test_crazy_argument_type_signatures",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_arguments_with_multiple_lines": {
            "name": "test_arguments_with_multiple_lines",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_arguments_are_last": {
            "name": "test_arguments_are_last",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_yields": {
            "name": "test_parse_yields",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_yields_with_type": {
            "name": "test_parse_yields_with_type",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_yields_with_type_and_newline": {
            "name": "test_parse_yields_with_type_and_newline",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_raises": {
            "name": "test_parse_raises",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_raises_multiple_lines": {
            "name": "test_parse_raises_multiple_lines",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_underindented_raises_section": {
            "name": "test_parse_underindented_raises_section",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_argument_types_can_be_parsed": {
            "name": "test_argument_types_can_be_parsed",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_can_parse_return_type": {
            "name": "test_can_parse_return_type",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_multiple_sections": {
            "name": "test_parse_multiple_sections",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_star_arguments": {
            "name": "test_parse_star_arguments",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_bare_noqa_can_be_parsed": {
            "name": "test_bare_noqa_can_be_parsed",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_nonhash_noqa_is_word": {
            "name": "test_nonhash_noqa_is_word",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_primitive_type": {
            "name": "test_parse_primitive_type",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_compound_type": {
            "name": "test_parse_compound_type",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_type_with_colon_in_yields": {
            "name": "test_parse_type_with_colon_in_yields",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_type_with_colon_in_returns": {
            "name": "test_parse_type_with_colon_in_returns",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_type_with_line_continuation": {
            "name": "test_parse_type_with_line_continuation",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_empty_line": {
            "name": "test_parse_empty_line",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_line_with_parentheses": {
            "name": "test_parse_line_with_parentheses",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_line_with_multiple_indents": {
            "name": "test_parse_line_with_multiple_indents",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_line_with_colons": {
            "name": "test_parse_line_with_colons",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_line_which_looks_like_definition": {
            "name": "test_parse_line_which_looks_like_definition",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_line_with_type": {
            "name": "test_parse_line_with_type",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_line_without_type_but_with_parentheses": {
            "name": "test_parse_line_without_type_but_with_parentheses",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_returns_section_with_type": {
            "name": "test_parse_returns_section_with_type",
            "location": 574,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_yields_section": {
            "name": "test_parse_yields_section",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_arguments": {
            "name": "test_parse_arguments",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_can_parse_returns": {
            "name": "test_can_parse_returns",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_can_have_word_returns_in_description": {
            "name": "test_can_have_word_returns_in_description",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_returns_section_can_be_multiple_indented_lines": {
            "name": "test_returns_section_can_be_multiple_indented_lines",
            "location": 629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_short_description": {
            "name": "test_parse_short_description",
            "location": 644,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_short_description_can_be_without_newline": {
            "name": "test_short_description_can_be_without_newline",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_whole_description": {
            "name": "test_parse_whole_description",
            "location": 664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_description_ends_with_sections": {
            "name": "test_description_ends_with_sections",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_long_description_can_come_between_sections": {
            "name": "test_long_description_can_come_between_sections",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_all_section_types": {
            "name": "test_parse_all_section_types",
            "location": 707,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_bare_noqa_statement": {
            "name": "test_parse_bare_noqa_statement",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_noqa_with_target": {
            "name": "test_parse_noqa_with_target",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_noqa_with_target_and_argument": {
            "name": "test_parse_noqa_with_target_and_argument",
            "location": 747,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_inline_noqa_statements": {
            "name": "test_parse_inline_noqa_statements",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_only_indents_treated_as_newlines_in_compound": {
            "name": "test_only_indents_treated_as_newlines_in_compound",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_only_indents_treated_newlines_within_simple_section": {
            "name": "test_only_indents_treated_newlines_within_simple_section",
            "location": 777,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_long_description_with_noqa": {
            "name": "test_parse_long_description_with_noqa",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_no_blank_line_swallows_sections": {
            "name": "test_no_blank_line_swallows_sections",
            "location": 803,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_docstring_can_end_with_newlines": {
            "name": "test_docstring_can_end_with_newlines",
            "location": 818,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_all_nodes_have_line_numbers": {
            "name": "test_all_nodes_have_line_numbers",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_single_word_sections_parse_correctly": {
            "name": "test_single_word_sections_parse_correctly",
            "location": 875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_type_with_multiple_words_multiple_lines": {
            "name": "test_type_with_multiple_words_multiple_lines",
            "location": 898,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_type_can_have_indents": {
            "name": "test_type_can_have_indents",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.get_annotation_lookup": {
            "name": "get_annotation_lookup",
            "location": 923,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "DocstringTestCase.test_parse_sole_argument_with_two_lines": {
            "name": "test_parse_sole_argument_with_two_lines",
            "location": 930,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_sole_argument_with_two_lines_indent_error": {
            "name": "test_parse_sole_argument_with_two_lines_indent_error",
            "location": 955,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_two_space_indent": {
            "name": "test_parse_two_space_indent",
            "location": 971,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocstringTestCase.test_parse_argument_with_two_lines": {
            "name": "test_parse_argument_with_two_lines",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StyleWarningsTestCase.assert_has_annotation": {
            "name": "assert_has_annotation",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "annotation": []
            }
        },
        "StyleWarningsTestCase.test_excess_blank_lines_raise_style_error": {
            "name": "test_excess_blank_lines_raise_style_error",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StyleWarningsTestCase.test_missing_line_between_sections_doesnt_kill_parser": {
            "name": "test_missing_line_between_sections_doesnt_kill_parser",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StyleWarningsTestCase.test_missing_colon_after_section_raises_warning": {
            "name": "test_missing_colon_after_section_raises_warning",
            "location": 1064,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StyleWarningsTestCase.test_missing_colon_after_nonsection_doesnt_raise_warning": {
            "name": "test_missing_colon_after_nonsection_doesnt_raise_warning",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_parser_combinator.py": {
        "combine": {
            "name": "combine",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "lex": {
            "name": "lex",
            "location": 79,
            "return": [],
            "arguments": {
                "poem": []
            }
        },
        "lookup": {
            "name": "lookup",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "top_parse": {
            "name": "top_parse",
            "location": 121,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "ParserCombinatorTests.test_total_grammar": {
            "name": "test_total_grammar",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserCombinatorTests.test_equivalent_to_combined": {
            "name": "test_equivalent_to_combined",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_peaker.py": {
        "PeakerTestCase.test_peak_doesnt_move_stream_forward": {
            "name": "test_peak_doesnt_move_stream_forward",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_next_does_move_stream_forward": {
            "name": "test_next_does_move_stream_forward",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_stop_iteration_raised": {
            "name": "test_stop_iteration_raised",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_has_next_returns_false_at_end_of_iteration": {
            "name": "test_has_next_returns_false_at_end_of_iteration",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_empty_stream_says_it_has_none": {
            "name": "test_empty_stream_says_it_has_none",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_take_while": {
            "name": "test_take_while",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_passing_none_to_peaker_marks_empty": {
            "name": "test_passing_none_to_peaker_marks_empty",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_peaker_can_have_n_lookahead": {
            "name": "test_peaker_can_have_n_lookahead",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeakerTestCase.test_cannot_peak_beyond_specified_lookahead": {
            "name": "test_cannot_peak_beyond_specified_lookahead",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_raise_visitor.py": {
        "RaiseVisitorTestCase.assertFound": {
            "name": "assertFound",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "RaiseVisitorTestCase.assertNoneFound": {
            "name": "assertNoneFound",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "RaiseVisitorTestCase.test_identifies_one_exception": {
            "name": "test_identifies_one_exception",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_ignores_caught_exception": {
            "name": "test_ignores_caught_exception",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_ignores_caught_exception_unnamed": {
            "name": "test_ignores_caught_exception_unnamed",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_identifies_exception_in_catch": {
            "name": "test_identifies_exception_in_catch",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_identifies_uncaught_in_try": {
            "name": "test_identifies_uncaught_in_try",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_caught_in_outer_try": {
            "name": "test_caught_in_outer_try",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_uncaught_in_nested_try": {
            "name": "test_uncaught_in_nested_try",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_caught_in_inner_catch": {
            "name": "test_caught_in_inner_catch",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_caught_multiple_exceptions": {
            "name": "test_caught_multiple_exceptions",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_reraise_one_of_multiple_exceptions": {
            "name": "test_reraise_one_of_multiple_exceptions",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_bare_reraise_with_as": {
            "name": "test_bare_reraise_with_as",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_bare_reraise_single_exception": {
            "name": "test_bare_reraise_single_exception",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_bare_reraise_one_of_multiple_exceptions": {
            "name": "test_bare_reraise_one_of_multiple_exceptions",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_capture_tuple": {
            "name": "test_capture_tuple",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_bare_reraise_in_multiple_handlers": {
            "name": "test_bare_reraise_in_multiple_handlers",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_reraise_any_exception_in_bare_handler": {
            "name": "test_reraise_any_exception_in_bare_handler",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_visits_finally_block": {
            "name": "test_visits_finally_block",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_visits_or_else_block": {
            "name": "test_visits_or_else_block",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseVisitorTestCase.test_visits_dynamic_exceptions_with_no_error_logs": {
            "name": "test_visits_dynamic_exceptions_with_no_error_logs",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "mock_logger": []
            }
        }
    },
    "darglint-master/tests/test_returns_visitor.py": {
        "ReturnsVisitorTests.assertFound": {
            "name": "assertFound",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "ReturnsVisitorTests.assertNoneFound": {
            "name": "assertNoneFound",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "ReturnsVisitorTests.test_no_return": {
            "name": "test_no_return",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnsVisitorTests.test_nested_no_return": {
            "name": "test_nested_no_return",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnsVisitorTests.test_simplest_function": {
            "name": "test_simplest_function",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnsVisitorTests.test_early_return": {
            "name": "test_early_return",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnsVisitorTests.test_conditional_return": {
            "name": "test_conditional_return",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnsVisitorTests.test_return_in_context": {
            "name": "test_return_in_context",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnsVisitorTests.test_returns_none": {
            "name": "test_returns_none",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnsVisitorTests.test_returns_non_none": {
            "name": "test_returns_non_none",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_sphinx_parser.py": {
        "SphinxParserTest.assert_has_annotation": {
            "name": "assert_has_annotation",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "annotation": []
            }
        },
        "SphinxParserTest.assert_has_no_annotation": {
            "name": "assert_has_no_annotation",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "annotation": []
            }
        },
        "SphinxParserTest.test_parse_short_description_is_line_cyk": {
            "name": "test_parse_short_description_is_line_cyk",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_short_description_one_word_cyk": {
            "name": "test_parse_short_description_one_word_cyk",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_short_description_multiple_words_cyk": {
            "name": "test_parse_short_description_multiple_words_cyk",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_short_description_can_have_colons_cyk": {
            "name": "test_short_description_can_have_colons_cyk",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_all_keywords_cyk": {
            "name": "test_parse_all_keywords_cyk",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_return_keywords_cyk": {
            "name": "test_parse_return_keywords_cyk",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_item_without_argument_cyk": {
            "name": "test_item_without_argument_cyk",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_argument_item_cyk": {
            "name": "test_parse_argument_item_cyk",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_type_item_cyk": {
            "name": "test_parse_type_item_cyk",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_inline_item_type_cyk": {
            "name": "test_inline_item_type_cyk",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_definition_with_colon_not_mistaken_for_inline_type_cyk": {
            "name": "test_definition_with_colon_not_mistaken_for_inline_type_cyk",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_vartype_item_cyk": {
            "name": "test_parse_vartype_item_cyk",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_multiline_return": {
            "name": "test_parse_multiline_return",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_multiline_raises": {
            "name": "test_parse_multiline_raises",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_long_description_cyk": {
            "name": "test_parse_long_description_cyk",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_whole_docstring_cyk": {
            "name": "test_parse_whole_docstring_cyk",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_multiple_line_item_definition_cyk": {
            "name": "test_multiple_line_item_definition_cyk",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parse_from_ast_cyk": {
            "name": "test_parse_from_ast_cyk",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_parser_sections_correctly": {
            "name": "test_parser_sections_correctly",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_no_short_description_checks_for_others": {
            "name": "test_no_short_description_checks_for_others",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_multiline_param_without_indent_raises_error": {
            "name": "test_multiline_param_without_indent_raises_error",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SphinxParserTest.test_multiline_param_with_indent_doesnt_raise_error": {
            "name": "test_multiline_param_with_indent_doesnt_raise_error",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_parser_can_parse_all_docstrings_cyk": {
            "name": "test_parser_can_parse_all_docstrings_cyk",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_variable_visitor.py": {
        "VariableVisitorTests.assertFound": {
            "name": "assertFound",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "VariableVisitorTests.test_no_variables": {
            "name": "test_no_variables",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableVisitorTests.test_one_variables": {
            "name": "test_one_variables",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableVisitorTests.test_many_variables": {
            "name": "test_many_variables",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableVisitorTests.test_no_variables_in_method": {
            "name": "test_no_variables_in_method",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableVisitorTests.test_one_variable_in_method": {
            "name": "test_one_variable_in_method",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableVisitorTests.test_many_variables_in_method": {
            "name": "test_many_variables_in_method",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/test_yield_visitor.py": {
        "YieldsVisitorTests.assertFound": {
            "name": "assertFound",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "YieldsVisitorTests.assertNoneFound": {
            "name": "assertNoneFound",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "YieldsVisitorTests.test_no_yield": {
            "name": "test_no_yield",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_nested_no_yield": {
            "name": "test_nested_no_yield",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_simplest_function": {
            "name": "test_simplest_function",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_early_yield": {
            "name": "test_early_yield",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_conditional_yield": {
            "name": "test_conditional_yield",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_yield_in_context": {
            "name": "test_yield_in_context",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_yields_none": {
            "name": "test_yields_none",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_yields_non_none": {
            "name": "test_yields_non_none",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YieldsVisitorTests.test_yield_from": {
            "name": "test_yield_from",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "darglint-master/tests/utils.py": {
        "require_python": {
            "name": "require_python",
            "location": 25,
            "return": [],
            "arguments": {
                "major": [],
                "minor": []
            }
        },
        "replace": {
            "name": "replace",
            "location": 45,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 73,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "random_string": {
            "name": "random_string",
            "location": 94,
            "return": [],
            "arguments": {
                "min_length": [],
                "max_length": []
            }
        },
        "random_tokens": {
            "name": "random_tokens",
            "location": 102,
            "return": [],
            "arguments": {
                "min_length": [],
                "max_length": [],
                "exclude": []
            }
        },
        "reindent": {
            "name": "reindent",
            "location": 177,
            "return": [],
            "arguments": {
                "program": []
            }
        },
        "require_python._wrapper": {
            "name": "_wrapper",
            "location": 36,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "replace.wrapper": {
            "name": "wrapper",
            "location": 60,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "remove._inner": {
            "name": "_inner",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "reindent._non_space": {
            "name": "_non_space",
            "location": 191,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "replace.wrapper._inner": {
            "name": "_inner",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "darglint-master/tests/__init__.py": {}
}
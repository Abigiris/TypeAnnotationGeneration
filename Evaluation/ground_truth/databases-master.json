{
    "databases-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 10,
            "return": [],
            "arguments": {
                "package": []
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "get_packages": {
            "name": "get_packages",
            "location": 26,
            "return": [],
            "arguments": {
                "package": []
            }
        }
    },
    "databases-master/databases/core.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "typing.Union[(str, 'DatabaseURL')]"
                ]
            }
        },
        "Database.connection": {
            "name": "connection",
            "location": 178,
            "return": [
                "'Connection'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.transaction": {
            "name": "transaction",
            "location": 189,
            "return": [
                "'Transaction'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.force_rollback": {
            "name": "force_rollback",
            "location": 195,
            "return": [
                "typing.Iterator[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database._get_backend": {
            "name": "_get_backend",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "DatabaseBackend"
                ]
            }
        },
        "Connection.transaction": {
            "name": "transaction",
            "location": 292,
            "return": [
                "'Transaction'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.raw_connection": {
            "name": "raw_connection",
            "location": 301,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._build_query": {
            "name": "_build_query",
            "location": 305,
            "return": [
                "ClauseElement"
            ],
            "arguments": {
                "query": [
                    "typing.Union[(ClauseElement, str)]"
                ],
                "values": [
                    "dict"
                ]
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_callable": [
                    "typing.Callable[([], Connection)]"
                ],
                "force_rollback": [
                    "bool"
                ]
            }
        },
        "Transaction.__await__": {
            "name": "__await__",
            "location": 353,
            "return": [
                "typing.Generator[(None, None, 'Transaction')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__call__": {
            "name": "__call__",
            "location": 359,
            "return": [
                "_CallableType"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_CallableType"
                ]
            }
        },
        "_EmptyNetloc.__bool__": {
            "name": "__bool__",
            "location": 400,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "typing.Union[(str, 'DatabaseURL')]"
                ]
            }
        },
        "DatabaseURL.components": {
            "name": "components",
            "location": 416,
            "return": [
                "SplitResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.scheme": {
            "name": "scheme",
            "location": 422,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.dialect": {
            "name": "dialect",
            "location": 426,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.driver": {
            "name": "driver",
            "location": 430,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.userinfo": {
            "name": "userinfo",
            "location": 436,
            "return": [
                "typing.Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.username": {
            "name": "username",
            "location": 445,
            "return": [
                "typing.Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.password": {
            "name": "password",
            "location": 451,
            "return": [
                "typing.Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.hostname": {
            "name": "hostname",
            "location": 457,
            "return": [
                "typing.Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.port": {
            "name": "port",
            "location": 465,
            "return": [
                "typing.Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.netloc": {
            "name": "netloc",
            "location": 469,
            "return": [
                "typing.Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.database": {
            "name": "database",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.options": {
            "name": "options",
            "location": 480,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.replace": {
            "name": "replace",
            "location": 485,
            "return": [
                "'DatabaseURL'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.obscure_password": {
            "name": "obscure_password",
            "location": 525,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.__str__": {
            "name": "__str__",
            "location": 530,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.__repr__": {
            "name": "__repr__",
            "location": 533,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseURL.__eq__": {
            "name": "__eq__",
            "location": 536,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "Connection.transaction.connection_callable": {
            "name": "connection_callable",
            "location": 295,
            "return": [
                "Connection"
            ],
            "arguments": {}
        }
    },
    "databases-master/databases/importer.py": {
        "import_from_string": {
            "name": "import_from_string",
            "location": 9,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "import_str": [
                    "str"
                ]
            }
        }
    },
    "databases-master/databases/interfaces.py": {
        "DatabaseBackend.connection": {
            "name": "connection",
            "location": 14,
            "return": [
                "'ConnectionBackend'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionBackend.transaction": {
            "name": "transaction",
            "location": 51,
            "return": [
                "'TransactionBackend'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionBackend.raw_connection": {
            "name": "raw_connection",
            "location": 55,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record._mapping": {
            "name": "_mapping",
            "location": 74,
            "return": [
                "typing.Mapping"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "databases-master/databases/__init__.py": {},
    "databases-master/databases/backends/aiopg.py": {
        "AiopgBackend.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "typing.Union[(DatabaseURL, str)]"
                ]
            }
        },
        "AiopgBackend._get_dialect": {
            "name": "_get_dialect",
            "location": 36,
            "return": [
                "Dialect"
            ],
            "arguments": {
                "self": []
            }
        },
        "AiopgBackend._get_connection_kwargs": {
            "name": "_get_connection_kwargs",
            "location": 51,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AiopgBackend.connection": {
            "name": "connection",
            "location": 94,
            "return": [
                "'AiopgConnection'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationContext.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "ExecutionContext"
                ]
            }
        },
        "AiopgConnection.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "database": [
                    "AiopgBackend"
                ],
                "dialect": [
                    "Dialect"
                ]
            }
        },
        "AiopgConnection.transaction": {
            "name": "transaction",
            "location": 201,
            "return": [
                "TransactionBackend"
            ],
            "arguments": {
                "self": []
            }
        },
        "AiopgConnection._compile": {
            "name": "_compile",
            "location": 204,
            "return": [
                "typing.Tuple[(str, dict, CompilationContext)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ClauseElement"
                ]
            }
        },
        "AiopgConnection.raw_connection": {
            "name": "raw_connection",
            "location": 233,
            "return": [
                "aiopg.connection.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "AiopgTransaction.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "AiopgConnection"
                ]
            }
        }
    },
    "databases-master/databases/backends/asyncmy.py": {
        "AsyncMyBackend.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "typing.Union[(DatabaseURL, str)]"
                ]
            }
        },
        "AsyncMyBackend._get_connection_kwargs": {
            "name": "_get_connection_kwargs",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncMyBackend.connection": {
            "name": "connection",
            "location": 82,
            "return": [
                "'AsyncMyConnection'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationContext.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "ExecutionContext"
                ]
            }
        },
        "AsyncMyConnection.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "database": [
                    "AsyncMyBackend"
                ],
                "dialect": [
                    "Dialect"
                ]
            }
        },
        "AsyncMyConnection.transaction": {
            "name": "transaction",
            "location": 191,
            "return": [
                "TransactionBackend"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncMyConnection._compile": {
            "name": "_compile",
            "location": 194,
            "return": [
                "typing.Tuple[(str, dict, CompilationContext)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ClauseElement"
                ]
            }
        },
        "AsyncMyConnection.raw_connection": {
            "name": "raw_connection",
            "location": 224,
            "return": [
                "asyncmy.connection.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncMyTransaction.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "AsyncMyConnection"
                ]
            }
        }
    },
    "databases-master/databases/backends/mysql.py": {
        "MySQLBackend.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "typing.Union[(DatabaseURL, str)]"
                ]
            }
        },
        "MySQLBackend._get_connection_kwargs": {
            "name": "_get_connection_kwargs",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySQLBackend.connection": {
            "name": "connection",
            "location": 82,
            "return": [
                "'MySQLConnection'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationContext.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "ExecutionContext"
                ]
            }
        },
        "MySQLConnection.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "database": [
                    "MySQLBackend"
                ],
                "dialect": [
                    "Dialect"
                ]
            }
        },
        "MySQLConnection.transaction": {
            "name": "transaction",
            "location": 191,
            "return": [
                "TransactionBackend"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySQLConnection._compile": {
            "name": "_compile",
            "location": 194,
            "return": [
                "typing.Tuple[(str, dict, CompilationContext)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ClauseElement"
                ]
            }
        },
        "MySQLConnection.raw_connection": {
            "name": "raw_connection",
            "location": 224,
            "return": [
                "aiomysql.connection.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySQLTransaction.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "MySQLConnection"
                ]
            }
        }
    },
    "databases-master/databases/backends/postgres.py": {
        "PostgresBackend.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "typing.Union[(DatabaseURL, str)]"
                ]
            }
        },
        "PostgresBackend._get_dialect": {
            "name": "_get_dialect",
            "location": 32,
            "return": [
                "Dialect"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresBackend._get_connection_kwargs": {
            "name": "_get_connection_kwargs",
            "location": 45,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresBackend.connection": {
            "name": "connection",
            "location": 81,
            "return": [
                "'PostgresConnection'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "asyncpg.Record"
                ],
                "result_columns": [
                    "tuple"
                ],
                "dialect": [
                    "Dialect"
                ],
                "column_maps": [
                    "typing.Tuple[(typing.Mapping[(typing.Any, typing.Tuple[(int, TypeEngine)])], typing.Mapping[(int, typing.Tuple[(int, TypeEngine)])], typing.Mapping[(str, typing.Tuple[(int, TypeEngine)])])]"
                ]
            }
        },
        "Record._mapping": {
            "name": "_mapping",
            "location": 112,
            "return": [
                "typing.Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.keys": {
            "name": "keys",
            "location": 115,
            "return": [
                "typing.KeysView"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.values": {
            "name": "values",
            "location": 125,
            "return": [
                "typing.ValuesView"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__getitem__": {
            "name": "__getitem__",
            "location": 135,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Any"
                ]
            }
        },
        "Record.__iter__": {
            "name": "__iter__",
            "location": 151,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__len__": {
            "name": "__len__",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__getattr__": {
            "name": "__getattr__",
            "location": 157,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PostgresConnection.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "database": [
                    "PostgresBackend"
                ],
                "dialect": [
                    "Dialect"
                ]
            }
        },
        "PostgresConnection.transaction": {
            "name": "transaction",
            "location": 237,
            "return": [
                "TransactionBackend"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresConnection._compile": {
            "name": "_compile",
            "location": 240,
            "return": [
                "typing.Tuple[(str, list, tuple)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ClauseElement"
                ]
            }
        },
        "PostgresConnection._create_column_maps": {
            "name": "_create_column_maps",
            "location": 272,
            "return": [
                "typing.Tuple[(typing.Mapping[(typing.Any, typing.Tuple[(int, TypeEngine)])], typing.Mapping[(int, typing.Tuple[(int, TypeEngine)])], typing.Mapping[(str, typing.Tuple[(int, TypeEngine)])])]"
            ],
            "arguments": {
                "result_columns": [
                    "tuple"
                ]
            }
        },
        "PostgresConnection.raw_connection": {
            "name": "raw_connection",
            "location": 300,
            "return": [
                "asyncpg.connection.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresTransaction.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "PostgresConnection"
                ]
            }
        }
    },
    "databases-master/databases/backends/sqlite.py": {
        "SQLiteBackend.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "typing.Union[(DatabaseURL, str)]"
                ]
            }
        },
        "SQLiteBackend.connection": {
            "name": "connection",
            "location": 54,
            "return": [
                "'SQLiteConnection'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLitePool.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "DatabaseURL"
                ]
            }
        },
        "CompilationContext.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "ExecutionContext"
                ]
            }
        },
        "SQLiteConnection.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "pool": [
                    "SQLitePool"
                ],
                "dialect": [
                    "Dialect"
                ]
            }
        },
        "SQLiteConnection.transaction": {
            "name": "transaction",
            "location": 159,
            "return": [
                "TransactionBackend"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteConnection._compile": {
            "name": "_compile",
            "location": 162,
            "return": [
                "typing.Tuple[(str, list, CompilationContext)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ClauseElement"
                ]
            }
        },
        "SQLiteConnection.raw_connection": {
            "name": "raw_connection",
            "location": 198,
            "return": [
                "aiosqlite.core.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteTransaction.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "SQLiteConnection"
                ]
            }
        }
    },
    "databases-master/databases/backends/__init__.py": {},
    "databases-master/tests/test_connection_options.py": {
        "test_postgres_pool_size": {
            "name": "test_postgres_pool_size",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_postgres_explicit_pool_size": {
            "name": "test_postgres_explicit_pool_size",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_postgres_ssl": {
            "name": "test_postgres_ssl",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_postgres_explicit_ssl": {
            "name": "test_postgres_explicit_ssl",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_postgres_no_extra_options": {
            "name": "test_postgres_no_extra_options",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_postgres_password_as_callable": {
            "name": "test_postgres_password_as_callable",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_mysql_pool_size": {
            "name": "test_mysql_pool_size",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_mysql_explicit_pool_size": {
            "name": "test_mysql_explicit_pool_size",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_mysql_ssl": {
            "name": "test_mysql_ssl",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_mysql_explicit_ssl": {
            "name": "test_mysql_explicit_ssl",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_mysql_pool_recycle": {
            "name": "test_mysql_pool_recycle",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_asyncmy_pool_size": {
            "name": "test_asyncmy_pool_size",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_asyncmy_explicit_pool_size": {
            "name": "test_asyncmy_explicit_pool_size",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_asyncmy_ssl": {
            "name": "test_asyncmy_ssl",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_asyncmy_explicit_ssl": {
            "name": "test_asyncmy_explicit_ssl",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_asyncmy_pool_recycle": {
            "name": "test_asyncmy_pool_recycle",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_aiopg_pool_size": {
            "name": "test_aiopg_pool_size",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_aiopg_explicit_pool_size": {
            "name": "test_aiopg_explicit_pool_size",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_aiopg_ssl": {
            "name": "test_aiopg_ssl",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_aiopg_explicit_ssl": {
            "name": "test_aiopg_explicit_ssl",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_postgres_password_as_callable.gen_password": {
            "name": "gen_password",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "databases-master/tests/test_databases.py": {
        "mysql_versions": {
            "name": "mysql_versions",
            "location": 20,
            "return": [],
            "arguments": {
                "wrapped_func": []
            }
        },
        "create_test_database": {
            "name": "create_test_database",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "async_adapter": {
            "name": "async_adapter",
            "location": 133,
            "return": [],
            "arguments": {
                "wrapped_func": []
            }
        },
        "test_global_connection_is_initialized_lazily": {
            "name": "test_global_connection_is_initialized_lazily",
            "location": 1023,
            "return": [],
            "arguments": {
                "database_url": []
            }
        },
        "mysql_versions.check": {
            "name": "check",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "MyEpochType.process_bind_param": {
            "name": "process_bind_param",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "MyEpochType.process_result_value": {
            "name": "process_result_value",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "async_adapter.run_sync": {
            "name": "run_sync",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_transaction_commit_serializable.insert_independently": {
            "name": "insert_independently",
            "location": 526,
            "return": [],
            "arguments": {}
        },
        "test_transaction_commit_serializable.delete_independently": {
            "name": "delete_independently",
            "location": 533,
            "return": [],
            "arguments": {}
        }
    },
    "databases-master/tests/test_database_url.py": {
        "test_database_url_repr": {
            "name": "test_database_url_repr",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_database_url_properties": {
            "name": "test_database_url_properties",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_database_url_escape": {
            "name": "test_database_url_escape",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_database_url_constructor": {
            "name": "test_database_url_constructor",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_database_url_options": {
            "name": "test_database_url_options",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_replace_database_url_components": {
            "name": "test_replace_database_url_components",
            "location": 73,
            "return": [],
            "arguments": {}
        }
    },
    "databases-master/tests/test_importer.py": {
        "test_invalid_format": {
            "name": "test_invalid_format",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_invalid_module": {
            "name": "test_invalid_module",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_invalid_attr": {
            "name": "test_invalid_attr",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_internal_import_error": {
            "name": "test_internal_import_error",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_valid_import": {
            "name": "test_valid_import",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "databases-master/tests/test_integration.py": {
        "create_test_database": {
            "name": "create_test_database",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_app": {
            "name": "get_app",
            "location": 54,
            "return": [],
            "arguments": {
                "database_url": []
            }
        },
        "test_integration": {
            "name": "test_integration",
            "location": 88,
            "return": [],
            "arguments": {
                "database_url": []
            }
        }
    },
    "databases-master/tests/importer/raise_import_error.py": {},
    "databases-master/tests/importer/__init__.py": {}
}
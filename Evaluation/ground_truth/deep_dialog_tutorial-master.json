{
    "deep_dialog_tutorial-master/deepdialog/__init__.py": {},
    "deep_dialog_tutorial-master/deepdialog/datasource/__init__.py": {},
    "deep_dialog_tutorial-master/deepdialog/rnnlm/__init__.py": {},
    "deep_dialog_tutorial-master/deepdialog/transformer/attention.py": {
        "MultiheadAttention.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_dim": [
                    "int"
                ],
                "head_num": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ]
            }
        },
        "MultiheadAttention.call": {
            "name": "call",
            "location": 40,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ],
                "memory": [
                    "tf.Tensor"
                ],
                "attention_mask": [
                    "tf.Tensor"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "MultiheadAttention._split_head": {
            "name": "_split_head",
            "location": 80,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "tf.Tensor"
                ]
            }
        },
        "MultiheadAttention._combine_head": {
            "name": "_combine_head",
            "location": 93,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "tf.Tensor"
                ]
            }
        },
        "SelfAttention.call": {
            "name": "call",
            "location": 111,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ],
                "attention_mask": [
                    "tf.Tensor"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "SimpleAttention.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ]
            }
        },
        "SimpleAttention.call": {
            "name": "call",
            "location": 143,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ],
                "memory": [
                    "tf.Tensor"
                ]
            }
        }
    },
    "deep_dialog_tutorial-master/deepdialog/transformer/common_layer.py": {
        "FeedForwardNetwork.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_dim": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ]
            }
        },
        "FeedForwardNetwork.call": {
            "name": "call",
            "location": 18,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "ResidualNormalizationWrapper.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "tf.keras.layers.Layer"
                ],
                "dropout_rate": [
                    "float"
                ]
            }
        },
        "ResidualNormalizationWrapper.call": {
            "name": "call",
            "location": 42,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "LayerNormalization.build": {
            "name": "build",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "tf.TensorShape"
                ]
            }
        },
        "LayerNormalization.call": {
            "name": "call",
            "location": 62,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "tf.Tensor"
                ],
                "epsilon": [
                    "float"
                ]
            }
        }
    },
    "deep_dialog_tutorial-master/deepdialog/transformer/embedding.py": {
        "TokenEmbedding.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "embedding_dim": [
                    "int"
                ],
                "dtype": []
            }
        },
        "TokenEmbedding.build": {
            "name": "build",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "tf.TensorShape"
                ]
            }
        },
        "TokenEmbedding.call": {
            "name": "call",
            "location": 26,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ]
            }
        },
        "AddPositionalEncoding.call": {
            "name": "call",
            "location": 41,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "tf.Tensor"
                ]
            }
        }
    },
    "deep_dialog_tutorial-master/deepdialog/transformer/metrics.py": {
        "padded_cross_entropy_loss": {
            "name": "padded_cross_entropy_loss",
            "location": 6,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": [],
                "smoothing": [],
                "vocab_size": []
            }
        },
        "padded_accuracy": {
            "name": "padded_accuracy",
            "location": 43,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "_pad_tensors_to_same_length": {
            "name": "_pad_tensors_to_same_length",
            "location": 53,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "deep_dialog_tutorial-master/deepdialog/transformer/transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "hopping_num": [
                    "int"
                ],
                "head_num": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "Transformer.build_graph": {
            "name": "build_graph",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Transformer.call": {
            "name": "call",
            "location": 79,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "encoder_input": [
                    "tf.Tensor"
                ],
                "decoder_input": [
                    "tf.Tensor"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "Transformer._create_enc_attention_mask": {
            "name": "_create_enc_attention_mask",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "encoder_input": [
                    "tf.Tensor"
                ]
            }
        },
        "Transformer._create_dec_self_attention_mask": {
            "name": "_create_dec_self_attention_mask",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "decoder_input": [
                    "tf.Tensor"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "hopping_num": [
                    "int"
                ],
                "head_num": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "Encoder.call": {
            "name": "call",
            "location": 152,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ],
                "self_attention_mask": [
                    "tf.Tensor"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "hopping_num": [
                    "int"
                ],
                "head_num": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "Decoder.call": {
            "name": "call",
            "location": 218,
            "return": [
                "tf.Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "tf.Tensor"
                ],
                "encoder_output": [
                    "tf.Tensor"
                ],
                "self_attention_mask": [
                    "tf.Tensor"
                ],
                "enc_dec_attention_mask": [
                    "tf.Tensor"
                ],
                "training": [
                    "bool"
                ]
            }
        }
    },
    "deep_dialog_tutorial-master/deepdialog/transformer/__init__.py": {},
    "deep_dialog_tutorial-master/deepdialog/transformer/preprocess/batch_generator.py": {
        "BatchGenerator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [],
                "spm_model_path": [
                    "str"
                ]
            }
        },
        "BatchGenerator.vocab_size": {
            "name": "vocab_size",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchGenerator.load": {
            "name": "load",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "BatchGenerator.get_batch": {
            "name": "get_batch",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "shuffle": []
            }
        },
        "BatchGenerator._create_data": {
            "name": "_create_data",
            "location": 46,
            "return": [
                "List[Tuple[(List[int], List[int])]]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Sequence[str]"
                ]
            }
        },
        "BatchGenerator._create_question": {
            "name": "_create_question",
            "location": 51,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "BatchGenerator._create_answer": {
            "name": "_create_answer",
            "location": 55,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        },
        "BatchGenerator._split": {
            "name": "_split",
            "location": 59,
            "return": [
                "List[List]"
            ],
            "arguments": {
                "self": [],
                "nd_list": [
                    "Sequence"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "BatchGenerator._convert_to_array": {
            "name": "_convert_to_array",
            "location": 62,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "id_list_list": [
                    "Sequence[Sequence[int]]"
                ]
            }
        }
    },
    "deep_dialog_tutorial-master/deepdialog/transformer/preprocess/__init__.py": {},
    "deep_dialog_tutorial-master/test/run.py": {
        "run": {
            "name": "run",
            "location": 7,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_get_tests_from_file_path": {
            "name": "_get_tests_from_file_path",
            "location": 29,
            "return": [],
            "arguments": {
                "path": [],
                "project_dir": []
            }
        }
    },
    "deep_dialog_tutorial-master/test/__init__.py": {},
    "deep_dialog_tutorial-master/test/deepdialog/__init__.py": {},
    "deep_dialog_tutorial-master/test/deepdialog/transformer/attention.py": {
        "TestMultiheadAttention.test_call": {
            "name": "test_call",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiheadAttention.test_split_head": {
            "name": "test_split_head",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiheadAttention.test_split_head_graph": {
            "name": "test_split_head_graph",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiheadAttention.test_combine_head": {
            "name": "test_combine_head",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSelfAttention.test_call": {
            "name": "test_call",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleAttention.test_call": {
            "name": "test_call",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "deep_dialog_tutorial-master/test/deepdialog/transformer/common_layer.py": {
        "TestFeedForwardNetwork.test_call": {
            "name": "test_call",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResidualNormalization.test_call": {
            "name": "test_call",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLayerNormalization.test_call": {
            "name": "test_call",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLayerNormalization.test_call_graph": {
            "name": "test_call_graph",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "deep_dialog_tutorial-master/test/deepdialog/transformer/embedding.py": {
        "TestTokenEmbedding.test_call": {
            "name": "test_call",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddPositionalEncoding.test_call": {
            "name": "test_call",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddPositionalEncoding.test_call_graph": {
            "name": "test_call_graph",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "deep_dialog_tutorial-master/test/deepdialog/transformer/metrics.py": {
        "TestMetrics.test_padded_cross_entropy_loss": {
            "name": "test_padded_cross_entropy_loss",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMetrics.test_padded_accuracy": {
            "name": "test_padded_accuracy",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "deep_dialog_tutorial-master/test/deepdialog/transformer/transformer.py": {
        "TestTransformer.test_build_graph": {
            "name": "test_build_graph",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransformer.test_call": {
            "name": "test_call",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransformer.test_create_enc_attention_mask": {
            "name": "test_create_enc_attention_mask",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransformer.test_create_dec_self_attention_mask": {
            "name": "test_create_dec_self_attention_mask",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_call": {
            "name": "test_call",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_call": {
            "name": "test_call",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "deep_dialog_tutorial-master/test/deepdialog/transformer/__init__.py": {},
    "deep_dialog_tutorial-master/test/deepdialog/transformer/preprocess/batch_generator.py": {
        "TestBatchGenerator.test_vocab_size": {
            "name": "test_vocab_size",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchGenerator.test_get_batch": {
            "name": "test_get_batch",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchGenerator.test_create_data": {
            "name": "test_create_data",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchGenerator.test_create_question": {
            "name": "test_create_question",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchGenerator.test_create_answer": {
            "name": "test_create_answer",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchGenerator.test_split": {
            "name": "test_split",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchGenerator.test_convert_to_array": {
            "name": "test_convert_to_array",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "deep_dialog_tutorial-master/test/deepdialog/transformer/preprocess/__init__.py": {}
}
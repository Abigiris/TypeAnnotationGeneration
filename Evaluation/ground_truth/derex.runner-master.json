{
    "derex.runner-master/setup.py": {},
    "derex.runner-master/bundle/executable.py": {},
    "derex.runner-master/bundle/hook-derex.runner.ddc.py": {},
    "derex.runner-master/derex/runner/build.py": {
        "docker_commands_to_install_requirements": {
            "name": "docker_commands_to_install_requirements",
            "location": 20,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "generate_legacy_requirements_dockerfile": {
            "name": "generate_legacy_requirements_dockerfile",
            "location": 33,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "build_requirements_image": {
            "name": "build_requirements_image",
            "location": 58,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "generate_legacy_themes_dockerfile": {
            "name": "generate_legacy_themes_dockerfile",
            "location": 78,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "build_themes_image": {
            "name": "build_themes_image",
            "location": 111,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "build_project_image": {
            "name": "build_project_image",
            "location": 143,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ],
                "target": [
                    "ProjectBuildTargets"
                ],
                "output": [
                    "str"
                ],
                "registry": [
                    "Optional[str]"
                ],
                "tag": [
                    "str"
                ],
                "tag_latest": [
                    "bool"
                ],
                "pull": [
                    "bool"
                ],
                "no_cache": [
                    "bool"
                ],
                "cache_from": [
                    "bool"
                ],
                "cache_to": [
                    "bool"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/compose_generation.py": {
        "generate_ddc_project_compose": {
            "name": "generate_ddc_project_compose",
            "location": 117,
            "return": [
                "Path"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "generate_ddc_test_compose": {
            "name": "generate_ddc_test_compose",
            "location": 134,
            "return": [
                "Path"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "generate_ddc_services_compose": {
            "name": "generate_ddc_services_compose",
            "location": 148,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "BaseServices.ddc_services_options": {
            "name": "ddc_services_options",
            "location": 43,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {}
        },
        "BaseProject.ddc_project_options": {
            "name": "ddc_project_options",
            "location": 64,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "LocalServices.ddc_services_options": {
            "name": "ddc_services_options",
            "location": 74,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {}
        },
        "LocalProject.ddc_project_options": {
            "name": "ddc_project_options",
            "location": 93,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "LocalProjectRunmode.ddc_project_options": {
            "name": "ddc_project_options",
            "location": 108,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/compose_utils.py": {
        "run_docker_compose": {
            "name": "run_docker_compose",
            "location": 14,
            "return": [],
            "arguments": {
                "compose_argv": [
                    "List[str]"
                ],
                "dry_run": [
                    "bool"
                ],
                "exit_afterwards": [
                    "bool"
                ]
            }
        },
        "exit_cm": {
            "name": "exit_cm",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "exit_cm.myexit": {
            "name": "myexit",
            "location": 40,
            "return": [],
            "arguments": {
                "result_code": []
            }
        }
    },
    "derex.runner-master/derex/runner/constants.py": {},
    "derex.runner-master/derex/runner/ddc.py": {
        "ddc_parse_args": {
            "name": "ddc_parse_args",
            "location": 31,
            "return": [
                "Tuple[(List[str], bool)]"
            ],
            "arguments": {
                "compose_args": [
                    "List[str]"
                ]
            }
        },
        "ddc_services": {
            "name": "ddc_services",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "ddc_project": {
            "name": "ddc_project",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "check_docker": {
            "name": "check_docker",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "run_ddc_services": {
            "name": "run_ddc_services",
            "location": 97,
            "return": [],
            "arguments": {
                "argv": [
                    "List[str]"
                ],
                "dry_run": [
                    "bool"
                ],
                "exit_afterwards": [
                    "bool"
                ]
            }
        },
        "run_ddc_project": {
            "name": "run_ddc_project",
            "location": 116,
            "return": [],
            "arguments": {
                "argv": [
                    "List[str]"
                ],
                "project": [
                    "Project"
                ],
                "dry_run": [
                    "bool"
                ],
                "exit_afterwards": [
                    "bool"
                ]
            }
        },
        "run_django_script": {
            "name": "run_django_script",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "project": [
                    "Optional[Project]"
                ],
                "script_text": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/docker_utils.py": {
        "is_docker_working": {
            "name": "is_docker_working",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "docker_has_experimental": {
            "name": "docker_has_experimental",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ensure_volumes_present": {
            "name": "ensure_volumes_present",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "wait_for_service": {
            "name": "wait_for_service",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "service": [
                    "str"
                ],
                "max_seconds": [
                    "int"
                ]
            }
        },
        "check_services": {
            "name": "check_services",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "services": [
                    "Iterable[str]"
                ],
                "max_seconds": [
                    "int"
                ]
            }
        },
        "load_dump": {
            "name": "load_dump",
            "location": 123,
            "return": [],
            "arguments": {
                "relpath": []
            }
        },
        "build_image": {
            "name": "build_image",
            "location": 145,
            "return": [],
            "arguments": {
                "dockerfile_text": [
                    "str"
                ],
                "paths": [
                    "List[str]"
                ],
                "tag": [
                    "str"
                ],
                "tag_final": [
                    "bool"
                ],
                "extra_options": [
                    "Dict"
                ]
            }
        },
        "buildx_image": {
            "name": "buildx_image",
            "location": 196,
            "return": [],
            "arguments": {
                "dockerfile_text": [
                    "str"
                ],
                "paths": [
                    "List[Path]"
                ],
                "target": [
                    "str"
                ],
                "output": [
                    "str"
                ],
                "tags": [
                    "List[str]"
                ],
                "pull": [
                    "bool"
                ],
                "cache": [
                    "bool"
                ],
                "cache_from": [
                    "bool"
                ],
                "cache_to": [
                    "bool"
                ],
                "cache_tag": [
                    "bool"
                ],
                "build_args": [
                    "Dict"
                ]
            }
        },
        "pull_images": {
            "name": "pull_images",
            "location": 247,
            "return": [],
            "arguments": {
                "image_names": [
                    "List[str]"
                ]
            }
        },
        "image_exists": {
            "name": "image_exists",
            "location": 259,
            "return": [
                "bool"
            ],
            "arguments": {
                "needle": [
                    "str"
                ]
            }
        },
        "get_running_containers": {
            "name": "get_running_containers",
            "location": 275,
            "return": [
                "Dict"
            ],
            "arguments": {}
        },
        "get_exposed_container_names": {
            "name": "get_exposed_container_names",
            "location": 284,
            "return": [
                "List"
            ],
            "arguments": {}
        },
        "run_minio_shell": {
            "name": "run_minio_shell",
            "location": 303,
            "return": [],
            "arguments": {
                "command": [
                    "str"
                ],
                "tty": [
                    "bool"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/local_appdir.py": {
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 9,
            "return": [],
            "arguments": {
                "directory": [
                    "Path"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/logging_utils.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "setup_logging_decorator": {
            "name": "setup_logging_decorator",
            "location": 27,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "setup_logging_decorator.inner": {
            "name": "inner",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/derex/runner/microfrontends.py": {
        "get_microfrontend_environment": {
            "name": "get_microfrontend_environment",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/derex/runner/mongodb.py": {
        "ensure_mongodb": {
            "name": "ensure_mongodb",
            "location": 34,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "execute_root_shell": {
            "name": "execute_root_shell",
            "location": 51,
            "return": [],
            "arguments": {
                "command": [
                    "Optional[str]"
                ]
            }
        },
        "list_databases": {
            "name": "list_databases",
            "location": 71,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "list_users": {
            "name": "list_users",
            "location": 81,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "create_user": {
            "name": "create_user",
            "location": 88,
            "return": [],
            "arguments": {
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "roles": [
                    "List[str]"
                ]
            }
        },
        "drop_database": {
            "name": "drop_database",
            "location": 97,
            "return": [],
            "arguments": {
                "database_name": [
                    "str"
                ]
            }
        },
        "copy_database": {
            "name": "copy_database",
            "location": 104,
            "return": [],
            "arguments": {
                "source_db_name": [
                    "str"
                ],
                "destination_db_name": [
                    "str"
                ]
            }
        },
        "create_root_user": {
            "name": "create_root_user",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "reset_mongodb_password": {
            "name": "reset_mongodb_password",
            "location": 119,
            "return": [],
            "arguments": {
                "current_password": [
                    "str"
                ]
            }
        },
        "ensure_mongodb.inner": {
            "name": "inner",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/derex/runner/mysql.py": {
        "ensure_mysql": {
            "name": "ensure_mysql",
            "location": 24,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "get_system_mysql_client": {
            "name": "get_system_mysql_client",
            "location": 38,
            "return": [
                "pymysql.cursors.Cursor"
            ],
            "arguments": {}
        },
        "get_project_mysql_client": {
            "name": "get_project_mysql_client",
            "location": 47,
            "return": [
                "pymysql.cursors.Cursor"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        },
        "get_mysql_client": {
            "name": "get_mysql_client",
            "location": 57,
            "return": [
                "pymysql.cursors.Cursor"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "database": [
                    "Optional[str]"
                ]
            }
        },
        "show_databases": {
            "name": "show_databases",
            "location": 79,
            "return": [
                "List[Tuple[(str, int, int)]]"
            ],
            "arguments": {}
        },
        "list_users": {
            "name": "list_users",
            "location": 108,
            "return": [
                "Optional[Tuple[Tuple[(str, str, str)]]]"
            ],
            "arguments": {}
        },
        "create_database": {
            "name": "create_database",
            "location": 116,
            "return": [],
            "arguments": {
                "database_name": [
                    "str"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 124,
            "return": [],
            "arguments": {
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "host": [
                    "str"
                ]
            }
        },
        "drop_database": {
            "name": "drop_database",
            "location": 132,
            "return": [],
            "arguments": {
                "database_name": [
                    "str"
                ]
            }
        },
        "drop_user": {
            "name": "drop_user",
            "location": 140,
            "return": [],
            "arguments": {
                "user": [
                    "str"
                ],
                "host": [
                    "str"
                ]
            }
        },
        "execute_root_shell": {
            "name": "execute_root_shell",
            "location": 149,
            "return": [],
            "arguments": {
                "command": [
                    "Optional[str]"
                ]
            }
        },
        "copy_database": {
            "name": "copy_database",
            "location": 167,
            "return": [],
            "arguments": {
                "source_db_name": [
                    "str"
                ],
                "destination_db_name": [
                    "str"
                ]
            }
        },
        "reset_mysql_openedx": {
            "name": "reset_mysql_openedx",
            "location": 191,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "reset_mysql_password": {
            "name": "reset_mysql_password",
            "location": 215,
            "return": [],
            "arguments": {
                "current_password": [
                    "str"
                ]
            }
        },
        "ensure_mysql.inner": {
            "name": "inner",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/derex/runner/plugins.py": {
        "setup_plugin_manager": {
            "name": "setup_plugin_manager",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "sort_items": {
            "name": "sort_items",
            "location": 226,
            "return": [
                "List[Dict]"
            ],
            "arguments": {
                "dictionaries": [
                    "List[Dict]"
                ],
                "item_key": [
                    "str"
                ]
            }
        },
        "sort_and_validate_plugins": {
            "name": "sort_and_validate_plugins",
            "location": 254,
            "return": [],
            "arguments": {
                "plugins": []
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.__contains__": {
            "name": "__contains__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Registry.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.__getitem__": {
            "name": "__getitem__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Registry.__len__": {
            "name": "__len__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.get_index_for_name": {
            "name": "get_index_for_name",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "name": [],
                "priority": []
            }
        },
        "Registry.deregister": {
            "name": "deregister",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "strict": []
            }
        },
        "Registry._sort": {
            "name": "_sort",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.add": {
            "name": "add",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "location": []
            }
        },
        "Registry.add_list": {
            "name": "add_list",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "to_add": []
            }
        }
    },
    "derex.runner-master/derex/runner/plugin_spec.py": {
        "ddc_services_options": {
            "name": "ddc_services_options",
            "location": 13,
            "return": [
                "Dict[(str, Union[(str, float, int, List[str])])]"
            ],
            "arguments": {}
        },
        "ddc_project_options": {
            "name": "ddc_project_options",
            "location": 34,
            "return": [
                "Dict[(str, Union[(str, float, int, List[str])])]"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/project.py": {
        "find_project_root": {
            "name": "find_project_root",
            "location": 573,
            "return": [
                "Path"
            ],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "Project.docker_image_name": {
            "name": "docker_image_name",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.mysql_db_name": {
            "name": "mysql_db_name",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.mysql_user": {
            "name": "mysql_user",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.mongodb_db_name": {
            "name": "mongodb_db_name",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.mongodb_user": {
            "name": "mongodb_user",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.runmode": {
            "name": "runmode",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "ProjectRunMode"
                ]
            }
        },
        "Project.settings": {
            "name": "settings",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Enum"
                ]
            }
        },
        "Project.settings_directory_path": {
            "name": "settings_directory_path",
            "location": 283,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project._get_status": {
            "name": "_get_status",
            "location": 295,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "Project._set_status": {
            "name": "_set_status",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Project.private_filepath": {
            "name": "private_filepath",
            "location": 310,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(Path, str)]"
                ],
                "read_only": [
                    "bool"
                ]
            }
        },
        "Project.get_project_hash": {
            "name": "get_project_hash",
            "location": 330,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project._load_build_targets_directories": {
            "name": "_load_build_targets_directories",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.get_build_target_image_tag": {
            "name": "get_build_target_image_tag",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "ProjectBuildTargets"
                ]
            }
        },
        "Project.get_build_target_cache_image_tag": {
            "name": "get_build_target_cache_image_tag",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "ProjectBuildTargets"
                ]
            }
        },
        "Project._load": {
            "name": "_load",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "Project.update_default_settings": {
            "name": "update_default_settings",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "default_settings_dir": [],
                "destination_settings_dir": []
            }
        },
        "Project._materialize_settings": {
            "name": "_materialize_settings",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.get_plugin_directories": {
            "name": "get_plugin_directories",
            "location": 491,
            "return": [
                "Dict[(str, Path)]"
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "str"
                ]
            }
        },
        "Project.get_available_settings": {
            "name": "get_available_settings",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.get_container_env": {
            "name": "get_container_env",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.secret": {
            "name": "secret",
            "location": 540,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Project.get_openedx_requirements_files": {
            "name": "get_openedx_requirements_files",
            "location": 543,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.get_openedx_customizations": {
            "name": "get_openedx_customizations",
            "location": 551,
            "return": [
                "List[Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.get_themes": {
            "name": "get_themes",
            "location": 564,
            "return": [
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugBaseImageProject.requirements_image_name": {
            "name": "requirements_image_name",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "derex.runner-master/derex/runner/secrets.py": {
        "scrypt_hash_stdlib": {
            "name": "scrypt_hash_stdlib",
            "location": 24,
            "return": [
                "bytes"
            ],
            "arguments": {
                "main_secret": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "scrypt_hash_addon": {
            "name": "scrypt_hash_addon",
            "location": 36,
            "return": [
                "bytes"
            ],
            "arguments": {
                "main_secret": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_var": {
            "name": "get_var",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "vartype": [
                    "type"
                ]
            }
        },
        "_get_master_secret": {
            "name": "_get_master_secret",
            "location": 64,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_secret": {
            "name": "get_secret",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "secret": [
                    "DerexSecrets"
                ]
            }
        },
        "compute_entropy": {
            "name": "compute_entropy",
            "location": 111,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/themes.py": {
        "Theme.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Theme.is_lms_theme": {
            "name": "is_lms_theme",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Theme.has_lms_static": {
            "name": "has_lms_static",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Theme.is_cms_theme": {
            "name": "is_cms_theme",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Theme.has_cms_static": {
            "name": "has_cms_static",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "derex.runner-master/derex/runner/utils.py": {
        "copydir": {
            "name": "copydir",
            "location": 18,
            "return": [],
            "arguments": {
                "source": [
                    "str"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "get_dir_hash": {
            "name": "get_dir_hash",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "asbool": {
            "name": "asbool",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "abspath_from_egg": {
            "name": "abspath_from_egg",
            "location": 64,
            "return": [
                "Optional[Path]"
            ],
            "arguments": {
                "egg": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "get_rich_console": {
            "name": "get_rich_console",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "get_rich_table": {
            "name": "get_rich_table",
            "location": 81,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/derex/runner/__init__.py": {},
    "derex.runner-master/derex/runner/cli/build.py": {
        "build": {
            "name": "build",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "project": {
            "name": "project",
            "location": 57,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ],
                "target": [
                    "str"
                ],
                "output": [
                    "str"
                ],
                "registry": [
                    "Optional[str]"
                ],
                "tag": [
                    "Optional[str]"
                ],
                "tag_latest": [
                    "bool"
                ],
                "only_print_image_name": [
                    "bool"
                ],
                "pull": [
                    "bool"
                ],
                "no_cache": [
                    "bool"
                ],
                "cache_from": [
                    "bool"
                ],
                "cache_to": [
                    "bool"
                ]
            }
        },
        "requirements": {
            "name": "requirements",
            "location": 135,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "themes": {
            "name": "themes",
            "location": 149,
            "return": [],
            "arguments": {
                "ctx": [],
                "project": [
                    "Project"
                ]
            }
        },
        "final": {
            "name": "final",
            "location": 167,
            "return": [],
            "arguments": {
                "ctx": [],
                "project": [
                    "Project"
                ]
            }
        },
        "final_refresh": {
            "name": "final_refresh",
            "location": 177,
            "return": [],
            "arguments": {
                "ctx": [],
                "project": [
                    "Project"
                ]
            }
        },
        "openedx": {
            "name": "openedx",
            "location": 230,
            "return": [],
            "arguments": {
                "version": [],
                "target": [],
                "push": [],
                "only_print_image_name": [],
                "docker_opts": []
            }
        }
    },
    "derex.runner-master/derex/runner/cli/mongodb.py": {
        "mongodb": {
            "name": "mongodb",
            "location": 12,
            "return": [],
            "arguments": {
                "context": [
                    "click.core.Context"
                ]
            }
        },
        "shell": {
            "name": "shell",
            "location": 45,
            "return": [],
            "arguments": {
                "command": [
                    "Optional[str]"
                ]
            }
        },
        "listing": {
            "name": "listing",
            "location": 54,
            "return": [],
            "arguments": {
                "context": [
                    "click.core.Context"
                ]
            }
        },
        "drop_mongodb": {
            "name": "drop_mongodb",
            "location": 61,
            "return": [],
            "arguments": {
                "project": [
                    "Optional[Project]"
                ],
                "db_name": [
                    "str"
                ]
            }
        },
        "list_databases_cmd": {
            "name": "list_databases_cmd",
            "location": 84,
            "return": [],
            "arguments": {
                "project": [
                    "Optional[Project]"
                ],
                "db_name": [
                    "str"
                ]
            }
        },
        "list_users": {
            "name": "list_users",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "create_user_cmd": {
            "name": "create_user_cmd",
            "location": 123,
            "return": [],
            "arguments": {
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "role": [
                    "Optional[Tuple]"
                ]
            }
        },
        "copy_mongodb": {
            "name": "copy_mongodb",
            "location": 136,
            "return": [],
            "arguments": {
                "project": [
                    "Optional[Project]"
                ],
                "source_db_name": [
                    "str"
                ],
                "destination_db_name": [
                    "Optional[str]"
                ],
                "drop": [
                    "bool"
                ]
            }
        },
        "reset_mongodb_password_cmd": {
            "name": "reset_mongodb_password_cmd",
            "location": 179,
            "return": [],
            "arguments": {
                "current_password": [
                    "Optional[str]"
                ],
                "force": [
                    "bool"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/cli/mysql.py": {
        "mysql": {
            "name": "mysql",
            "location": 13,
            "return": [],
            "arguments": {
                "context": [
                    "click.core.Context"
                ]
            }
        },
        "shell": {
            "name": "shell",
            "location": 41,
            "return": [],
            "arguments": {
                "command": [
                    "Optional[str]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 50,
            "return": [],
            "arguments": {
                "context": [
                    "click.core.Context"
                ]
            }
        },
        "drop": {
            "name": "drop",
            "location": 56,
            "return": [],
            "arguments": {
                "context": [
                    "click.core.Context"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 62,
            "return": [],
            "arguments": {
                "context": [
                    "click.core.Context"
                ]
            }
        },
        "create_database_cmd": {
            "name": "create_database_cmd",
            "location": 69,
            "return": [],
            "arguments": {
                "project": [
                    "Optional[Project]"
                ],
                "db_name": [
                    "str"
                ]
            }
        },
        "create_user_cmd": {
            "name": "create_user_cmd",
            "location": 90,
            "return": [],
            "arguments": {
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "host": [
                    "str"
                ]
            }
        },
        "drop_database_cmd": {
            "name": "drop_database_cmd",
            "location": 101,
            "return": [],
            "arguments": {
                "project": [
                    "Optional[Project]"
                ],
                "db_name": [
                    "str"
                ]
            }
        },
        "drop_user_cmd": {
            "name": "drop_user_cmd",
            "location": 122,
            "return": [],
            "arguments": {
                "user": [
                    "str"
                ],
                "host": [
                    "str"
                ]
            }
        },
        "show_databases_cmd": {
            "name": "show_databases_cmd",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "show_users_cmd": {
            "name": "show_users_cmd",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "copy_database_cmd": {
            "name": "copy_database_cmd",
            "location": 161,
            "return": [],
            "arguments": {
                "project": [
                    "Optional[Project]"
                ],
                "source_db_name": [
                    "str"
                ],
                "destination_db_name": [
                    "Optional[str]"
                ]
            }
        },
        "reset_mysql_cmd": {
            "name": "reset_mysql_cmd",
            "location": 196,
            "return": [],
            "arguments": {
                "context": [],
                "force": []
            }
        },
        "reset_mysql_password_cmd": {
            "name": "reset_mysql_password_cmd",
            "location": 232,
            "return": [],
            "arguments": {
                "current_password": [
                    "str"
                ],
                "force": [
                    "bool"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/cli/test.py": {
        "test": {
            "name": "test",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "e2e": {
            "name": "e2e",
            "location": 19,
            "return": [],
            "arguments": {
                "project": []
            }
        }
    },
    "derex.runner-master/derex/runner/cli/translations.py": {
        "translations": {
            "name": "translations",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 16,
            "return": [],
            "arguments": {
                "project": []
            }
        }
    },
    "derex.runner-master/derex/runner/cli/utils.py": {
        "ensure_project": {
            "name": "ensure_project",
            "location": 8,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "red": {
            "name": "red",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "ensure_project.wrapper": {
            "name": "wrapper",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/derex/runner/cli/__init__.py": {
        "derex": {
            "name": "derex",
            "location": 38,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "debug": {
            "name": "debug",
            "location": 76,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "reset_mailslurper": {
            "name": "reset_mailslurper",
            "location": 82,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "compile_theme": {
            "name": "compile_theme",
            "location": 96,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "reindex_courses": {
            "name": "reindex_courses",
            "location": 123,
            "return": [],
            "arguments": {
                "project": [],
                "course_ids": []
            }
        },
        "create_bucket": {
            "name": "create_bucket",
            "location": 155,
            "return": [],
            "arguments": {
                "project": [],
                "tty": []
            }
        },
        "reset_rabbitmq": {
            "name": "reset_rabbitmq",
            "location": 168,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "runmode": {
            "name": "runmode",
            "location": 203,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ],
                "runmode": [
                    "Optional[ProjectRunMode]"
                ],
                "force": []
            }
        },
        "get_available_settings": {
            "name": "get_available_settings",
            "location": 231,
            "return": [],
            "arguments": {}
        },
        "materialize_settings": {
            "name": "materialize_settings",
            "location": 240,
            "return": [],
            "arguments": {
                "ctx": [],
                "_": [],
                "value": []
            }
        },
        "settings": {
            "name": "settings",
            "location": 255,
            "return": [],
            "arguments": {
                "project": [
                    "Project"
                ],
                "settings": [
                    "Optional[Any]"
                ]
            }
        },
        "minio_shell": {
            "name": "minio_shell",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "print_secret": {
            "name": "print_secret",
            "location": 276,
            "return": [],
            "arguments": {
                "secret": []
            }
        },
        "minio_update_key": {
            "name": "minio_update_key",
            "location": 294,
            "return": [],
            "arguments": {
                "old_key": [
                    "str"
                ]
            }
        }
    },
    "derex.runner-master/derex/runner/compose_files/wsgi.py": {},
    "derex.runner-master/docker-definition/derex_django/setup.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/app.py": {
        "plugin_settings": {
            "name": "plugin_settings",
            "location": 28,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "monkey_patch_course_default_image": {
            "name": "monkey_patch_course_default_image",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "write_boto_config_file": {
            "name": "write_boto_config_file",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "DerexAppConfig.ready": {
            "name": "ready",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "derex.runner-master/docker-definition/derex_django/derex_django/constants.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/memcache.py": {
        "fasthash": {
            "name": "fasthash",
            "location": 24,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "cleaned_string": {
            "name": "cleaned_string",
            "location": 33,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "safe_key": {
            "name": "safe_key",
            "location": 41,
            "return": [],
            "arguments": {
                "key": [],
                "key_prefix": [],
                "version": []
            }
        }
    },
    "derex.runner-master/docker-definition/derex_django/derex_django/staticfiles_storages.py": {
        "WhitenoiseEdxStorage.stored_name": {
            "name": "stored_name",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "derex.runner-master/docker-definition/derex_django/derex_django/__init__.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/__init__.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/build/assets.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/build/migration.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/build/__init__.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/auth.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/caches.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/celery.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/container_env.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/cors.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/django_settings.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/email.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/features.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/logging.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/mongo.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/mysql.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/openedx_platform.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/placeholders.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/plugins.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/search.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/staticfiles.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/storages.py": {},
    "derex.runner-master/docker-definition/derex_django/derex_django/settings/default/__init__.py": {},
    "derex.runner-master/docker-definition/openedx_customizations/juniper/cms/djangoapps/contentstore/views/import_export.py": {
        "import_handler": {
            "name": "import_handler",
            "location": 61,
            "return": [],
            "arguments": {
                "request": [],
                "course_key_string": []
            }
        },
        "_save_request_status": {
            "name": "_save_request_status",
            "location": 103,
            "return": [],
            "arguments": {
                "request": [],
                "key": [],
                "status": []
            }
        },
        "_write_chunk": {
            "name": "_write_chunk",
            "location": 115,
            "return": [],
            "arguments": {
                "request": [],
                "courselike_key": []
            }
        },
        "import_status_handler": {
            "name": "import_status_handler",
            "location": 235,
            "return": [],
            "arguments": {
                "request": [],
                "course_key_string": [],
                "filename": []
            }
        },
        "send_tarball": {
            "name": "send_tarball",
            "location": 275,
            "return": [],
            "arguments": {
                "tarball": [],
                "size": []
            }
        },
        "export_handler": {
            "name": "export_handler",
            "location": 291,
            "return": [],
            "arguments": {
                "request": [],
                "course_key_string": []
            }
        },
        "export_status_handler": {
            "name": "export_status_handler",
            "location": 344,
            "return": [],
            "arguments": {
                "request": [],
                "course_key_string": []
            }
        },
        "export_output_handler": {
            "name": "export_output_handler",
            "location": 421,
            "return": [],
            "arguments": {
                "request": [],
                "course_key_string": []
            }
        },
        "_latest_task_status": {
            "name": "_latest_task_status",
            "location": 447,
            "return": [],
            "arguments": {
                "request": [],
                "course_key_string": [],
                "view_func": []
            }
        }
    },
    "derex.runner-master/docker-definition/openedx_customizations/juniper/cms/djangoapps/contentstore/views/transcripts_ajax.py": {
        "error_response": {
            "name": "error_response",
            "location": 61,
            "return": [],
            "arguments": {
                "response": [],
                "message": [],
                "status_code": []
            }
        },
        "link_video_to_component": {
            "name": "link_video_to_component",
            "location": 72,
            "return": [],
            "arguments": {
                "video_component": [],
                "user": []
            }
        },
        "save_video_transcript": {
            "name": "save_video_transcript",
            "location": 92,
            "return": [],
            "arguments": {
                "edx_video_id": [],
                "input_format": [],
                "transcript_content": [],
                "language_code": []
            }
        },
        "validate_video_module": {
            "name": "validate_video_module",
            "location": 130,
            "return": [],
            "arguments": {
                "request": [],
                "locator": []
            }
        },
        "validate_transcript_upload_data": {
            "name": "validate_transcript_upload_data",
            "location": 156,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "upload_transcripts": {
            "name": "upload_transcripts",
            "location": 193,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "download_transcripts": {
            "name": "download_transcripts",
            "location": 250,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "check_transcripts": {
            "name": "check_transcripts",
            "location": 272,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_transcripts_logic": {
            "name": "_transcripts_logic",
            "location": 388,
            "return": [],
            "arguments": {
                "transcripts_presence": [],
                "videos": []
            }
        },
        "_validate_transcripts_data": {
            "name": "_validate_transcripts_data",
            "location": 446,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "validate_transcripts_request": {
            "name": "validate_transcripts_request",
            "location": 486,
            "return": [],
            "arguments": {
                "request": [],
                "include_yt": [],
                "include_html5": []
            }
        },
        "choose_transcripts": {
            "name": "choose_transcripts",
            "location": 529,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "rename_transcripts": {
            "name": "rename_transcripts",
            "location": 568,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "replace_transcripts": {
            "name": "replace_transcripts",
            "location": 609,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_get_item": {
            "name": "_get_item",
            "location": 644,
            "return": [],
            "arguments": {
                "request": [],
                "data": []
            }
        }
    },
    "derex.runner-master/docker-definition/openedx_customizations/juniper/lms/djangoapps/courseware/migrations/0011_csm_id_bigint.py": {
        "CsmBigInt.database_forwards": {
            "name": "database_forwards",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [],
                "schema_editor": [],
                "from_state": [],
                "to_state": []
            }
        },
        "CsmBigInt.database_backwards": {
            "name": "database_backwards",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [],
                "schema_editor": [],
                "from_state": [],
                "to_state": []
            }
        }
    },
    "derex.runner-master/docker-definition/openedx_customizations/juniper/lms/djangoapps/dashboard/sysadmin.py": {
        "SysadminDashboardView.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SysadminDashboardView.dispatch": {
            "name": "dispatch",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SysadminDashboardView.get_courses": {
            "name": "get_courses",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SysadminDashboardView.return_csv": {
            "name": "return_csv",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "header": [],
                "data": []
            }
        },
        "Users.create_user": {
            "name": "create_user",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "uname": [],
                "name": [],
                "password": []
            }
        },
        "Users.delete_user": {
            "name": "delete_user",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "uname": []
            }
        },
        "Users.make_datatable": {
            "name": "make_datatable",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Users.get": {
            "name": "get",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Users.post": {
            "name": "post",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Courses.git_info_for_course": {
            "name": "git_info_for_course",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "cdir": []
            }
        },
        "Courses.get_course_from_git": {
            "name": "get_course_from_git",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "gitloc": [],
                "branch": []
            }
        },
        "Courses.import_mongo_course": {
            "name": "import_mongo_course",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "gitloc": [],
                "branch": []
            }
        },
        "Courses.make_datatable": {
            "name": "make_datatable",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "courses": []
            }
        },
        "Courses.get": {
            "name": "get",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Courses.post": {
            "name": "post",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Staffing.get": {
            "name": "get",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Staffing.post": {
            "name": "post",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GitLogs.get": {
            "name": "get",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "SysadminDashboardView.return_csv.read_and_flush": {
            "name": "read_and_flush",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "SysadminDashboardView.return_csv.csv_data": {
            "name": "csv_data",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/docker-definition/openedx_customizations/koa/lms/djangoapps/dashboard/sysadmin.py": {
        "SysadminDashboardView.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SysadminDashboardView.dispatch": {
            "name": "dispatch",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SysadminDashboardView.get_courses": {
            "name": "get_courses",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Users.create_user": {
            "name": "create_user",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "uname": [],
                "name": [],
                "password": []
            }
        },
        "Users.delete_user": {
            "name": "delete_user",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "uname": []
            }
        },
        "Users.make_datatable": {
            "name": "make_datatable",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Users.get": {
            "name": "get",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Users.post": {
            "name": "post",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Courses.git_info_for_course": {
            "name": "git_info_for_course",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "cdir": []
            }
        },
        "Courses.get_course_from_git": {
            "name": "get_course_from_git",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "gitloc": [],
                "branch": []
            }
        },
        "Courses.import_mongo_course": {
            "name": "import_mongo_course",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "gitloc": [],
                "branch": []
            }
        },
        "Courses.make_datatable": {
            "name": "make_datatable",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "courses": []
            }
        },
        "Courses.get": {
            "name": "get",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Courses.post": {
            "name": "post",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Staffing.get": {
            "name": "get",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GitLogs.get": {
            "name": "get",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "derex.runner-master/docs/conf.py": {},
    "derex.runner-master/examples/juniper/complete/openedx_customizations/test_openedx_customization.py": {},
    "derex.runner-master/examples/juniper/complete/openedx_customizations/subfolder/test_openedx_customization.py": {},
    "derex.runner-master/examples/juniper/complete/settings/base.py": {},
    "derex.runner-master/examples/juniper/complete/settings/production.py": {},
    "derex.runner-master/examples/juniper/complete/settings/__init__.py": {},
    "derex.runner-master/examples/juniper/external-packages/testplugin/setup.py": {},
    "derex.runner-master/examples/juniper/external-packages/testplugin/example_plugin/apps.py": {},
    "derex.runner-master/examples/juniper/external-packages/testplugin/example_plugin/urls.py": {},
    "derex.runner-master/examples/juniper/external-packages/testplugin/example_plugin/views.py": {
        "example": {
            "name": "example",
            "location": 4,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "derex.runner-master/examples/juniper/external-packages/testplugin/example_plugin/__init__.py": {},
    "derex.runner-master/examples/koa/complete/openedx_customizations/test_openedx_customization.py": {},
    "derex.runner-master/examples/koa/complete/openedx_customizations/subfolder/test_openedx_customization.py": {},
    "derex.runner-master/examples/koa/complete/settings/base.py": {},
    "derex.runner-master/examples/koa/complete/settings/production.py": {},
    "derex.runner-master/examples/koa/complete/settings/__init__.py": {},
    "derex.runner-master/examples/koa/external-packages/testplugin/setup.py": {},
    "derex.runner-master/examples/koa/external-packages/testplugin/example_plugin/apps.py": {},
    "derex.runner-master/examples/koa/external-packages/testplugin/example_plugin/urls.py": {},
    "derex.runner-master/examples/koa/external-packages/testplugin/example_plugin/views.py": {
        "example": {
            "name": "example",
            "location": 4,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "derex.runner-master/examples/koa/external-packages/testplugin/example_plugin/__init__.py": {},
    "derex.runner-master/examples/lilac/complete/openedx_customizations/test_openedx_customization.py": {},
    "derex.runner-master/examples/lilac/complete/openedx_customizations/subfolder/test_openedx_customization.py": {},
    "derex.runner-master/examples/lilac/complete/settings/base.py": {},
    "derex.runner-master/examples/lilac/complete/settings/production.py": {},
    "derex.runner-master/examples/lilac/complete/settings/__init__.py": {},
    "derex.runner-master/examples/lilac/external-packages/testplugin/setup.py": {},
    "derex.runner-master/examples/lilac/external-packages/testplugin/example_plugin/apps.py": {},
    "derex.runner-master/examples/lilac/external-packages/testplugin/example_plugin/urls.py": {},
    "derex.runner-master/examples/lilac/external-packages/testplugin/example_plugin/views.py": {
        "example": {
            "name": "example",
            "location": 4,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "derex.runner-master/examples/lilac/external-packages/testplugin/example_plugin/__init__.py": {},
    "derex.runner-master/examples/notes/notes_settings.py": {},
    "derex.runner-master/examples/notes/settings/base.py": {},
    "derex.runner-master/examples/notes/settings/__init__.py": {},
    "derex.runner-master/examples/tests/settings/base.py": {},
    "derex.runner-master/examples/tests/settings/__init__.py": {},
    "derex.runner-master/tests/conftest.py": {
        "workdir": {
            "name": "workdir",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "workdir_copy": {
            "name": "workdir_copy",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "minimal_project": {
            "name": "minimal_project",
            "location": 59,
            "return": [],
            "arguments": {
                "request": [],
                "workdir_copy": []
            }
        },
        "complete_project": {
            "name": "complete_project",
            "location": 69,
            "return": [],
            "arguments": {
                "request": [],
                "workdir_copy": []
            }
        },
        "sys_argv": {
            "name": "sys_argv",
            "location": 79,
            "return": [],
            "arguments": {
                "session_mocker": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 92,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "assert_result_ok": {
            "name": "assert_result_ok",
            "location": 98,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "workdir.workdir_decorator": {
            "name": "workdir_decorator",
            "location": 22,
            "return": [],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "workdir_copy.workdir_decorator": {
            "name": "workdir_decorator",
            "location": 38,
            "return": [],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "sys_argv.my_cm": {
            "name": "my_cm",
            "location": 81,
            "return": [],
            "arguments": {
                "eargs": []
            }
        }
    },
    "derex.runner-master/tests/test_build.py": {
        "requirements_dockerfile_tests": {
            "name": "requirements_dockerfile_tests",
            "location": 6,
            "return": [],
            "arguments": {
                "project": [],
                "buildx_mock": []
            }
        },
        "openedx_customizations_dockerfile_tests": {
            "name": "openedx_customizations_dockerfile_tests",
            "location": 12,
            "return": [],
            "arguments": {
                "project": [],
                "buildx_mock": []
            }
        },
        "test_build_project_image_requirements": {
            "name": "test_build_project_image_requirements",
            "location": 26,
            "return": [],
            "arguments": {
                "complete_project": [],
                "mocker": []
            }
        },
        "test_build_project_image_openedx_customizations": {
            "name": "test_build_project_image_openedx_customizations",
            "location": 93,
            "return": [],
            "arguments": {
                "complete_project": [],
                "mocker": []
            }
        }
    },
    "derex.runner-master/tests/test_compose_generation.py": {
        "test_generate_ddc_test_compose": {
            "name": "test_generate_ddc_test_compose",
            "location": 4,
            "return": [],
            "arguments": {
                "complete_project": []
            }
        }
    },
    "derex.runner-master/tests/test_compose_utils.py": {
        "test_run_django_script": {
            "name": "test_run_django_script",
            "location": 5,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        }
    },
    "derex.runner-master/tests/test_ddc.py": {
        "test_ddc_services": {
            "name": "test_ddc_services",
            "location": 11,
            "return": [],
            "arguments": {
                "sys_argv": [],
                "capsys": [],
                "monkeypatch": [],
                "complete_project": []
            }
        },
        "test_ddc_project_minimal": {
            "name": "test_ddc_project_minimal",
            "location": 38,
            "return": [],
            "arguments": {
                "sys_argv": [],
                "mocker": [],
                "minimal_project": [],
                "capsys": []
            }
        },
        "test_ddc_project_complete": {
            "name": "test_ddc_project_complete",
            "location": 68,
            "return": [],
            "arguments": {
                "sys_argv": [],
                "complete_project": [],
                "capsys": []
            }
        },
        "test_ddc_project_symlink_mounting": {
            "name": "test_ddc_project_symlink_mounting",
            "location": 82,
            "return": [],
            "arguments": {
                "sys_argv": [],
                "mocker": [],
                "complete_project": [],
                "capsys": []
            }
        },
        "reset_root_logger": {
            "name": "reset_root_logger",
            "location": 106,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/tests/test_derex.py": {
        "test_derex_compile_theme": {
            "name": "test_derex_compile_theme",
            "location": 17,
            "return": [],
            "arguments": {
                "complete_project": []
            }
        },
        "test_derex_runmode": {
            "name": "test_derex_runmode",
            "location": 24,
            "return": [],
            "arguments": {
                "minimal_project": [],
                "mocker": []
            }
        },
        "test_derex_runmode_wrong": {
            "name": "test_derex_runmode_wrong",
            "location": 58,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_derex_cli_group_no_containers_running": {
            "name": "test_derex_cli_group_no_containers_running",
            "location": 70,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_exposed_container_names": {
            "name": "test_get_exposed_container_names",
            "location": 82,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_derex_cli_group_one_container_running": {
            "name": "test_derex_cli_group_one_container_running",
            "location": 114,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "fix_terminal_width": {
            "name": "fix_terminal_width",
            "location": 137,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "fix_terminal_width.wrapper": {
            "name": "wrapper",
            "location": 140,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/tests/test_docker.py": {
        "test_ensure_volumes_present": {
            "name": "test_ensure_volumes_present",
            "location": 9,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_check_services": {
            "name": "test_check_services",
            "location": 27,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_wait_for_service": {
            "name": "test_wait_for_service",
            "location": 42,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_final_image": {
            "name": "test_get_final_image",
            "location": 84,
            "return": [],
            "arguments": {
                "mocker": [],
                "minimal_project": []
            }
        }
    },
    "derex.runner-master/tests/test_mongodb.py": {
        "start_mongodb": {
            "name": "start_mongodb",
            "location": 15,
            "return": [],
            "arguments": {
                "sys_argv": []
            }
        },
        "cleanup_mongodb": {
            "name": "cleanup_mongodb",
            "location": 22,
            "return": [],
            "arguments": {
                "start_mongodb": []
            }
        },
        "test_derex_mongodb": {
            "name": "test_derex_mongodb",
            "location": 40,
            "return": [],
            "arguments": {
                "start_mongodb": []
            }
        },
        "test_derex_mongodb_reset_password": {
            "name": "test_derex_mongodb_reset_password",
            "location": 68,
            "return": [],
            "arguments": {
                "mocker": [],
                "start_mongodb": []
            }
        }
    },
    "derex.runner-master/tests/test_mysql.py": {
        "start_mysql": {
            "name": "start_mysql",
            "location": 17,
            "return": [],
            "arguments": {
                "sys_argv": []
            }
        },
        "cleanup_mysql": {
            "name": "cleanup_mysql",
            "location": 26,
            "return": [],
            "arguments": {
                "start_mysql": []
            }
        },
        "test_derex_mysql": {
            "name": "test_derex_mysql",
            "location": 45,
            "return": [],
            "arguments": {
                "start_mysql": []
            }
        },
        "test_derex_mysql_reset": {
            "name": "test_derex_mysql_reset",
            "location": 77,
            "return": [],
            "arguments": {
                "start_mysql": [],
                "mocker": [],
                "minimal_project": []
            }
        },
        "test_derex_mysql_reset_password": {
            "name": "test_derex_mysql_reset_password",
            "location": 94,
            "return": [],
            "arguments": {
                "start_mysql": [],
                "mocker": []
            }
        }
    },
    "derex.runner-master/tests/test_plugins.py": {
        "test_registry_exception": {
            "name": "test_registry_exception",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_registry_basic": {
            "name": "test_registry_basic",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_registry_add_list": {
            "name": "test_registry_add_list",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_registry_add_list_impossible": {
            "name": "test_registry_add_list_impossible",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_plugin_sorting_and_validation": {
            "name": "test_plugin_sorting_and_validation",
            "location": 81,
            "return": [],
            "arguments": {
                "caplog": []
            }
        }
    },
    "derex.runner-master/tests/test_project.py": {
        "test_complete_project": {
            "name": "test_complete_project",
            "location": 24,
            "return": [],
            "arguments": {
                "workdir": [],
                "mocker": [],
                "complete_project": []
            }
        },
        "test_minimal_project": {
            "name": "test_minimal_project",
            "location": 69,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_runmode": {
            "name": "test_runmode",
            "location": 83,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_ddc_project_addition": {
            "name": "test_ddc_project_addition",
            "location": 100,
            "return": [],
            "arguments": {
                "minimal_project": [],
                "mocker": [],
                "capsys": []
            }
        },
        "test_docker_compose_addition_per_runmode": {
            "name": "test_docker_compose_addition_per_runmode",
            "location": 128,
            "return": [],
            "arguments": {
                "minimal_project": [],
                "mocker": [],
                "capsys": []
            }
        },
        "test_settings_enum": {
            "name": "test_settings_enum",
            "location": 151,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_image_prefix": {
            "name": "test_image_prefix",
            "location": 165,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_materialize_settings": {
            "name": "test_materialize_settings",
            "location": 183,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_container_variables": {
            "name": "test_container_variables",
            "location": 216,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_project_name_constraints": {
            "name": "test_project_name_constraints",
            "location": 240,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_container_variables_json_serialized": {
            "name": "test_container_variables_json_serialized",
            "location": 251,
            "return": [],
            "arguments": {
                "minimal_project": []
            }
        },
        "test_secret_variables": {
            "name": "test_secret_variables",
            "location": 284,
            "return": [],
            "arguments": {
                "complete_project": []
            }
        },
        "create_settings_file": {
            "name": "create_settings_file",
            "location": 311,
            "return": [],
            "arguments": {
                "project_root": [
                    "Path"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "test_get_openedx_requirements_paths": {
            "name": "test_get_openedx_requirements_paths",
            "location": 320,
            "return": [],
            "arguments": {
                "complete_project": []
            }
        },
        "test_ddc_project_addition.CustomAdditional.ddc_project_options": {
            "name": "ddc_project_options",
            "location": 106,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {
                "project": [
                    "Project"
                ]
            }
        }
    },
    "derex.runner-master/tests/test_secrets.py": {
        "test_master_secret": {
            "name": "test_master_secret",
            "location": 10,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_master_secret_default_filename": {
            "name": "test_master_secret_default_filename",
            "location": 17,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_master_secret_default_filename_not_readable": {
            "name": "test_master_secret_default_filename_not_readable",
            "location": 30,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_master_secret_custom_filename": {
            "name": "test_master_secret_custom_filename",
            "location": 42,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "monkeypatch": []
            }
        },
        "test_derived_secret": {
            "name": "test_derived_secret",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_derived_secret_no_scrypt_available": {
            "name": "test_derived_secret_no_scrypt_available",
            "location": 83,
            "return": [],
            "arguments": {
                "no_scrypt": []
            }
        },
        "test_derived_secret_no_scrypt_same_result_as_with_scrypt": {
            "name": "test_derived_secret_no_scrypt_same_result_as_with_scrypt",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "no_scrypt": {
            "name": "no_scrypt",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/tests/test_utils.py": {
        "test_asbool": {
            "name": "test_asbool",
            "location": 2,
            "return": [],
            "arguments": {}
        },
        "test_abspath_from_egg": {
            "name": "test_abspath_from_egg",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "derex.runner-master/tests/__init__.py": {}
}
{
    "disjoint-set-master/setup.py": {},
    "disjoint-set-master/disjoint_set/main.py": {
        "InvalidInitialMappingError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "DisjointSet.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisjointSet.__contains__": {
            "name": "__contains__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T@@"
                ]
            }
        },
        "DisjointSet.__bool__": {
            "name": "__bool__",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisjointSet.__getitem__": {
            "name": "__getitem__",
            "location": 43,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "T@@"
                ]
            }
        },
        "DisjointSet.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "DisjointSet.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisjointSet.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisjointSet.__iter__": {
            "name": "__iter__",
            "location": 75,
            "return": [
                "Iterator[Tuple[(T, T)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisjointSet.itersets": {
            "name": "itersets",
            "location": 83,
            "return": [
                "Iterator[Union[(Set[T], Tuple[(T, Set[T])])]]"
            ],
            "arguments": {
                "self": [],
                "with_canonical_elements": [
                    "bool"
                ]
            }
        },
        "DisjointSet.find": {
            "name": "find",
            "location": 104,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T@@"
                ]
            }
        },
        "DisjointSet.union": {
            "name": "union",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T@@"
                ],
                "y": [
                    "T@@"
                ]
            }
        },
        "DisjointSet.connected": {
            "name": "connected",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T@@"
                ],
                "y": [
                    "T@@"
                ]
            }
        }
    },
    "disjoint-set-master/disjoint_set/utils.py": {
        "IdentityDict.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityDict.__missing__": {
            "name": "__missing__",
            "location": 13,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T@@"
                ]
            }
        }
    },
    "disjoint-set-master/disjoint_set/__init__.py": {},
    "disjoint-set-master/tests/test_disjoint_set.py": {
        "dset": {
            "name": "dset",
            "location": 13,
            "return": [
                "DisjointSet"
            ],
            "arguments": {}
        },
        "sample_dset": {
            "name": "sample_dset",
            "location": 18,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_repr_evals_to_the_same_structure": {
            "name": "test_repr_evals_to_the_same_structure",
            "location": 22,
            "return": [],
            "arguments": {
                "sample_dset": [
                    "DisjointSet[int]"
                ]
            }
        },
        "test_repr_is_expected_string": {
            "name": "test_repr_is_expected_string",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "empty_dset": {
            "name": "empty_dset",
            "location": 33,
            "return": [
                "DisjointSet"
            ],
            "arguments": {}
        },
        "sample_element": {
            "name": "sample_element",
            "location": 46,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_initializes_value_for_absent_key": {
            "name": "test_initializes_value_for_absent_key",
            "location": 50,
            "return": [],
            "arguments": {
                "empty_dset": [
                    "DisjointSet"
                ],
                "sample_element": [
                    "Any"
                ]
            }
        },
        "test_all_elements_within_sets_are_connected": {
            "name": "test_all_elements_within_sets_are_connected",
            "location": 63,
            "return": [],
            "arguments": {
                "element_sets": [
                    "Tuple[(Set[int], ...)]"
                ],
                "empty_dset": [
                    "DisjointSet"
                ]
            }
        },
        "test_raises_on_invalid_init_params": {
            "name": "test_raises_on_invalid_init_params",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    }
}
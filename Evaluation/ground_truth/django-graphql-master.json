{
    "django-graphql-master/mypy_stubs/django/shortcuts.py": {
        "render_to_response": {
            "name": "render_to_response",
            "location": 7,
            "return": [],
            "arguments": {
                "template_name": [
                    "Any"
                ],
                "context": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "status": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 8,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "template_name": [
                    "Any"
                ],
                "context": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "status": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "redirect": {
            "name": "redirect",
            "location": 9,
            "return": [],
            "arguments": {
                "to": [
                    "Any"
                ]
            }
        },
        "get_object_or_404": {
            "name": "get_object_or_404",
            "location": 10,
            "return": [],
            "arguments": {
                "klass": [
                    "Any"
                ]
            }
        },
        "get_list_or_404": {
            "name": "get_list_or_404",
            "location": 11,
            "return": [],
            "arguments": {
                "klass": [
                    "Any"
                ]
            }
        },
        "resolve_url": {
            "name": "resolve_url",
            "location": 12,
            "return": [],
            "arguments": {
                "to": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/__init__.py": {
        "setup": {
            "name": "setup",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "set_prefix": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/__main__.py": {},
    "django-graphql-master/mypy_stubs/django/apps/config.py": {
        "AppConfig.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "Any"
                ],
                "app_module": [
                    "Any"
                ]
            }
        },
        "AppConfig.create": {
            "name": "create",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "entry": [
                    "Any"
                ]
            }
        },
        "AppConfig.get_model": {
            "name": "get_model",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "require_ready": [
                    "bool"
                ]
            }
        },
        "AppConfig.get_models": {
            "name": "get_models",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include_auto_created": [
                    "bool"
                ],
                "include_swapped": [
                    "bool"
                ]
            }
        },
        "AppConfig.import_models": {
            "name": "import_models",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppConfig.ready": {
            "name": "ready",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/apps/registry.py": {
        "Apps.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "installed_apps": [
                    "Any"
                ]
            }
        },
        "Apps.populate": {
            "name": "populate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "installed_apps": [
                    "Optional[Any]"
                ]
            }
        },
        "Apps.check_apps_ready": {
            "name": "check_apps_ready",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Apps.check_models_ready": {
            "name": "check_models_ready",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Apps.get_app_configs": {
            "name": "get_app_configs",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Apps.get_app_config": {
            "name": "get_app_config",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ]
            }
        },
        "Apps.get_models": {
            "name": "get_models",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "include_auto_created": [
                    "bool"
                ],
                "include_swapped": [
                    "bool"
                ]
            }
        },
        "Apps.get_model": {
            "name": "get_model",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "model_name": [
                    "Optional[Any]"
                ],
                "require_ready": [
                    "bool"
                ]
            }
        },
        "Apps.register_model": {
            "name": "register_model",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "model": [
                    "Any"
                ]
            }
        },
        "Apps.is_installed": {
            "name": "is_installed",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "app_name": [
                    "Any"
                ]
            }
        },
        "Apps.get_containing_app_config": {
            "name": "get_containing_app_config",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "object_name": [
                    "Any"
                ]
            }
        },
        "Apps.get_registered_model": {
            "name": "get_registered_model",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "model_name": [
                    "Any"
                ]
            }
        },
        "Apps.get_swappable_settings_name": {
            "name": "get_swappable_settings_name",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "to_string": [
                    "Any"
                ]
            }
        },
        "Apps.set_available_apps": {
            "name": "set_available_apps",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "available": [
                    "Any"
                ]
            }
        },
        "Apps.unset_available_apps": {
            "name": "unset_available_apps",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Apps.set_installed_apps": {
            "name": "set_installed_apps",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "installed": [
                    "Any"
                ]
            }
        },
        "Apps.unset_installed_apps": {
            "name": "unset_installed_apps",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Apps.clear_cache": {
            "name": "clear_cache",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Apps.lazy_model_operation": {
            "name": "lazy_model_operation",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Any"
                ]
            }
        },
        "Apps.do_pending_operations": {
            "name": "do_pending_operations",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/apps/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/global_settings.py": {
        "gettext_noop": {
            "name": "gettext_noop",
            "location": 7,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/conf/__init__.py": {
        "LazySettings.__getattr__": {
            "name": "__getattr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "LazySettings.__setattr__": {
            "name": "__setattr__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "LazySettings.__delattr__": {
            "name": "__delattr__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "LazySettings.configure": {
            "name": "configure",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_settings": [
                    "Any"
                ]
            }
        },
        "LazySettings.configured": {
            "name": "configured",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_module": [
                    "Any"
                ]
            }
        },
        "Settings.is_overridden": {
            "name": "is_overridden",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "setting": [
                    "Any"
                ]
            }
        },
        "UserSettingsHolder.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_settings": [
                    "Any"
                ]
            }
        },
        "UserSettingsHolder.__getattr__": {
            "name": "__getattr__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "UserSettingsHolder.__setattr__": {
            "name": "__setattr__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "UserSettingsHolder.__delattr__": {
            "name": "__delattr__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "UserSettingsHolder.__dir__": {
            "name": "__dir__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSettingsHolder.is_overridden": {
            "name": "is_overridden",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "setting": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/conf/locale/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ar/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ar/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/az/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/az/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/bg/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/bg/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/bn/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/bn/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/bs/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/bs/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ca/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ca/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/cs/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/cs/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/cy/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/cy/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/da/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/da/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/de/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/de/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/de_CH/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/de_CH/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/el/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/el/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/en/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/en/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/en_AU/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/en_AU/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/en_GB/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/en_GB/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/eo/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/eo/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_AR/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_AR/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_CO/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_CO/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_MX/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_MX/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_NI/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_NI/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_PR/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/es_PR/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/et/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/et/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/eu/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/eu/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fa/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fa/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fi/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fi/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fr/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fr/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fy/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/fy/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ga/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ga/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/gd/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/gd/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/gl/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/gl/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/he/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/he/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/hi/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/hi/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/hr/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/hr/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/hu/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/hu/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/id/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/id/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/is/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/is/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/it/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/it/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ja/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ja/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ka/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ka/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/km/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/km/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/kn/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/kn/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ko/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ko/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/lt/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/lt/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/lv/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/lv/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/mk/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/mk/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ml/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ml/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/mn/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/mn/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/nb/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/nb/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/nl/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/nl/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/nn/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/nn/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/pl/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/pl/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/pt/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/pt/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/pt_BR/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/pt_BR/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ro/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ro/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ru/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ru/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sk/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sk/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sl/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sl/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sq/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sq/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sr/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sr/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sr_Latn/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sr_Latn/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sv/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/sv/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ta/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/ta/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/te/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/te/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/th/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/th/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/tr/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/tr/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/uk/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/uk/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/vi/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/vi/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/zh_Hans/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/zh_Hans/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/zh_Hant/formats.py": {},
    "django-graphql-master/mypy_stubs/django/conf/locale/zh_Hant/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/conf/urls/i18n.py": {
        "i18n_patterns": {
            "name": "i18n_patterns",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "is_language_prefix_patterns_used": {
            "name": "is_language_prefix_patterns_used",
            "location": 8,
            "return": [],
            "arguments": {
                "urlconf": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/conf/urls/static.py": {
        "static": {
            "name": "static",
            "location": 7,
            "return": [],
            "arguments": {
                "prefix": [
                    "Any"
                ],
                "view": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/conf/urls/__init__.py": {
        "url": {
            "name": "url",
            "location": 14,
            "return": [],
            "arguments": {
                "regex": [
                    "Any"
                ],
                "view": [
                    "Any"
                ],
                "kwargs": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admin/actions.py": {
        "delete_selected": {
            "name": "delete_selected",
            "location": 7,
            "return": [],
            "arguments": {
                "modeladmin": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/apps.py": {
        "SimpleAdminConfig.ready": {
            "name": "ready",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminConfig.ready": {
            "name": "ready",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/checks.py": {
        "check_admin_app": {
            "name": "check_admin_app",
            "location": 7,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_dependencies": {
            "name": "check_dependencies",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "must_be": {
            "name": "must_be",
            "location": 19,
            "return": [],
            "arguments": {
                "type": [
                    "Any"
                ],
                "option": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ],
                "id": [
                    "Any"
                ]
            }
        },
        "must_inherit_from": {
            "name": "must_inherit_from",
            "location": 20,
            "return": [],
            "arguments": {
                "parent": [
                    "Any"
                ],
                "option": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ],
                "id": [
                    "Any"
                ]
            }
        },
        "refer_to_missing_field": {
            "name": "refer_to_missing_field",
            "location": 21,
            "return": [],
            "arguments": {
                "field": [
                    "Any"
                ],
                "option": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ],
                "id": [
                    "Any"
                ]
            }
        },
        "BaseModelAdminChecks.check": {
            "name": "check",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "admin_obj": [
                    "Any"
                ]
            }
        },
        "ModelAdminChecks.check": {
            "name": "check",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "admin_obj": [
                    "Any"
                ]
            }
        },
        "InlineModelAdminChecks.check": {
            "name": "check",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "inline_obj": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/decorators.py": {
        "register": {
            "name": "register",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/exceptions.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admin/filters.py": {
        "ListFilter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ]
            }
        },
        "ListFilter.has_output": {
            "name": "has_output",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFilter.choices": {
            "name": "choices",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Any"
                ]
            }
        },
        "ListFilter.queryset": {
            "name": "queryset",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ]
            }
        },
        "ListFilter.expected_parameters": {
            "name": "expected_parameters",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleListFilter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ]
            }
        },
        "SimpleListFilter.has_output": {
            "name": "has_output",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleListFilter.value": {
            "name": "value",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleListFilter.lookups": {
            "name": "lookups",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ]
            }
        },
        "SimpleListFilter.expected_parameters": {
            "name": "expected_parameters",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleListFilter.choices": {
            "name": "choices",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Any"
                ]
            }
        },
        "FieldListFilter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "field_path": [
                    "Any"
                ]
            }
        },
        "FieldListFilter.has_output": {
            "name": "has_output",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldListFilter.queryset": {
            "name": "queryset",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ]
            }
        },
        "FieldListFilter.register": {
            "name": "register",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "test": [
                    "Any"
                ],
                "list_filter_class": [
                    "Any"
                ],
                "take_priority": [
                    "bool"
                ]
            }
        },
        "FieldListFilter.create": {
            "name": "create",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "field_path": [
                    "Any"
                ]
            }
        },
        "RelatedFieldListFilter.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "field_path": [
                    "Any"
                ]
            }
        },
        "RelatedFieldListFilter.include_empty_choice": {
            "name": "include_empty_choice",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedFieldListFilter.has_output": {
            "name": "has_output",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedFieldListFilter.expected_parameters": {
            "name": "expected_parameters",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedFieldListFilter.field_choices": {
            "name": "field_choices",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ]
            }
        },
        "RelatedFieldListFilter.choices": {
            "name": "choices",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Any"
                ]
            }
        },
        "BooleanFieldListFilter.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "field_path": [
                    "Any"
                ]
            }
        },
        "BooleanFieldListFilter.expected_parameters": {
            "name": "expected_parameters",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BooleanFieldListFilter.choices": {
            "name": "choices",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Any"
                ]
            }
        },
        "ChoicesFieldListFilter.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "field_path": [
                    "Any"
                ]
            }
        },
        "ChoicesFieldListFilter.expected_parameters": {
            "name": "expected_parameters",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoicesFieldListFilter.choices": {
            "name": "choices",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Any"
                ]
            }
        },
        "DateFieldListFilter.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "field_path": [
                    "Any"
                ]
            }
        },
        "DateFieldListFilter.expected_parameters": {
            "name": "expected_parameters",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFieldListFilter.choices": {
            "name": "choices",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Any"
                ]
            }
        },
        "AllValuesFieldListFilter.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "field_path": [
                    "Any"
                ]
            }
        },
        "AllValuesFieldListFilter.expected_parameters": {
            "name": "expected_parameters",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllValuesFieldListFilter.choices": {
            "name": "choices",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Any"
                ]
            }
        },
        "RelatedOnlyFieldListFilter.field_choices": {
            "name": "field_choices",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/helpers.py": {
        "AdminForm.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "fieldsets": [
                    "Any"
                ],
                "prepopulated_fields": [
                    "Any"
                ],
                "readonly_fields": [
                    "Optional[Any]"
                ],
                "model_admin": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminForm.__iter__": {
            "name": "__iter__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminForm.errors": {
            "name": "errors",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminForm.non_field_errors": {
            "name": "non_field_errors",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminForm.media": {
            "name": "media",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fieldset.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "readonly_fields": [
                    "Any"
                ],
                "fields": [
                    "Any"
                ],
                "classes": [
                    "Any"
                ],
                "description": [
                    "Optional[Any]"
                ],
                "model_admin": [
                    "Optional[Any]"
                ]
            }
        },
        "Fieldset.media": {
            "name": "media",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fieldset.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fieldline.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "readonly_fields": [
                    "Optional[Any]"
                ],
                "model_admin": [
                    "Optional[Any]"
                ]
            }
        },
        "Fieldline.__iter__": {
            "name": "__iter__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fieldline.errors": {
            "name": "errors",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminField.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "is_first": [
                    "Any"
                ]
            }
        },
        "AdminField.label_tag": {
            "name": "label_tag",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminField.errors": {
            "name": "errors",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminReadonlyField.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "is_first": [
                    "Any"
                ],
                "model_admin": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminReadonlyField.label_tag": {
            "name": "label_tag",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminReadonlyField.contents": {
            "name": "contents",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminFormSet.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inline": [
                    "Any"
                ],
                "formset": [
                    "Any"
                ],
                "fieldsets": [
                    "Any"
                ],
                "prepopulated_fields": [
                    "Optional[Any]"
                ],
                "readonly_fields": [
                    "Optional[Any]"
                ],
                "model_admin": [
                    "Optional[Any]"
                ],
                "has_add_permission": [
                    "bool"
                ],
                "has_change_permission": [
                    "bool"
                ],
                "has_delete_permission": [
                    "bool"
                ],
                "has_view_permission": [
                    "bool"
                ]
            }
        },
        "InlineAdminFormSet.__iter__": {
            "name": "__iter__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminFormSet.fields": {
            "name": "fields",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminFormSet.inline_formset_data": {
            "name": "inline_formset_data",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminFormSet.forms": {
            "name": "forms",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminFormSet.non_form_errors": {
            "name": "non_form_errors",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminFormSet.media": {
            "name": "media",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminForm.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "formset": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "fieldsets": [
                    "Any"
                ],
                "prepopulated_fields": [
                    "Any"
                ],
                "original": [
                    "Any"
                ],
                "readonly_fields": [
                    "Optional[Any]"
                ],
                "model_admin": [
                    "Optional[Any]"
                ],
                "view_on_site_url": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineAdminForm.__iter__": {
            "name": "__iter__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminForm.needs_explicit_pk_field": {
            "name": "needs_explicit_pk_field",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminForm.pk_field": {
            "name": "pk_field",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminForm.fk_field": {
            "name": "fk_field",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminForm.deletion_field": {
            "name": "deletion_field",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAdminForm.ordering_field": {
            "name": "ordering_field",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineFieldset.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "formset": [
                    "Any"
                ]
            }
        },
        "InlineFieldset.__iter__": {
            "name": "__iter__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminErrorList.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "inline_formsets": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/options.py": {
        "get_content_type_for_model": {
            "name": "get_content_type_for_model",
            "location": 13,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "get_ul_class": {
            "name": "get_ul_class",
            "location": 14,
            "return": [],
            "arguments": {
                "radio_style": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.check": {
            "name": "check",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModelAdmin.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelAdmin.formfield_for_dbfield": {
            "name": "formfield_for_dbfield",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "db_field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.formfield_for_choice_field": {
            "name": "formfield_for_choice_field",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "db_field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.get_field_queryset": {
            "name": "get_field_queryset",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "db": [
                    "Any"
                ],
                "db_field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.formfield_for_foreignkey": {
            "name": "formfield_for_foreignkey",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "db_field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.formfield_for_manytomany": {
            "name": "formfield_for_manytomany",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "db_field": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.get_autocomplete_fields": {
            "name": "get_autocomplete_fields",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.get_view_on_site_url": {
            "name": "get_view_on_site_url",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.get_empty_value_display": {
            "name": "get_empty_value_display",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModelAdmin.get_exclude": {
            "name": "get_exclude",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.get_fields": {
            "name": "get_fields",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.get_fieldsets": {
            "name": "get_fieldsets",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.get_ordering": {
            "name": "get_ordering",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.get_prepopulated_fields": {
            "name": "get_prepopulated_fields",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.get_sortable_by": {
            "name": "get_sortable_by",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.lookup_allowed": {
            "name": "lookup_allowed",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "lookup": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.to_field_allowed": {
            "name": "to_field_allowed",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "to_field": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseModelAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.has_view_permission": {
            "name": "has_view_permission",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.has_view_or_change_permission": {
            "name": "has_view_or_change_permission",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelAdmin.has_module_permission": {
            "name": "has_module_permission",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "admin_site": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_inline_instances": {
            "name": "get_inline_instances",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.get_urls": {
            "name": "get_urls",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelAdmin.urls": {
            "name": "urls",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelAdmin.media": {
            "name": "media",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelAdmin.get_model_perms": {
            "name": "get_model_perms",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_form": {
            "name": "get_form",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ],
                "change": [
                    "bool"
                ]
            }
        },
        "ModelAdmin.get_changelist": {
            "name": "get_changelist",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_changelist_instance": {
            "name": "get_changelist_instance",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_object": {
            "name": "get_object",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object_id": [
                    "Any"
                ],
                "from_field": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.get_changelist_form": {
            "name": "get_changelist_form",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_changelist_formset": {
            "name": "get_changelist_formset",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_formsets_with_inlines": {
            "name": "get_formsets_with_inlines",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.get_paginator": {
            "name": "get_paginator",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ],
                "per_page": [
                    "Any"
                ],
                "orphans": [
                    "int"
                ],
                "allow_empty_first_page": [
                    "bool"
                ]
            }
        },
        "ModelAdmin.log_addition": {
            "name": "log_addition",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object": [
                    "Any"
                ],
                "message": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.log_change": {
            "name": "log_change",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object": [
                    "Any"
                ],
                "message": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.log_deletion": {
            "name": "log_deletion",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object": [
                    "Any"
                ],
                "object_repr": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.action_checkbox": {
            "name": "action_checkbox",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_actions": {
            "name": "get_actions",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_action_choices": {
            "name": "get_action_choices",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "default_choices": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_action": {
            "name": "get_action",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "action": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_list_display": {
            "name": "get_list_display",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_list_display_links": {
            "name": "get_list_display_links",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "list_display": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_list_filter": {
            "name": "get_list_filter",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_list_select_related": {
            "name": "get_list_select_related",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_search_fields": {
            "name": "get_search_fields",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_search_results": {
            "name": "get_search_results",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ],
                "search_term": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_preserved_filters": {
            "name": "get_preserved_filters",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.construct_change_message": {
            "name": "construct_change_message",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "formsets": [
                    "Any"
                ],
                "add": [
                    "bool"
                ]
            }
        },
        "ModelAdmin.message_user": {
            "name": "message_user",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "level": [
                    "Any"
                ],
                "extra_tags": [
                    "str"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "ModelAdmin.save_form": {
            "name": "save_form",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "change": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.save_model": {
            "name": "save_model",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "change": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.delete_model": {
            "name": "delete_model",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.delete_queryset": {
            "name": "delete_queryset",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.save_formset": {
            "name": "save_formset",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "formset": [
                    "Any"
                ],
                "change": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.save_related": {
            "name": "save_related",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "formsets": [
                    "Any"
                ],
                "change": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.render_change_form": {
            "name": "render_change_form",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "context": [
                    "Any"
                ],
                "add": [
                    "bool"
                ],
                "change": [
                    "bool"
                ],
                "form_url": [
                    "str"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.response_add": {
            "name": "response_add",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ],
                "post_url_continue": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.response_change": {
            "name": "response_change",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.response_post_save_add": {
            "name": "response_post_save_add",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.response_post_save_change": {
            "name": "response_post_save_change",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.response_action": {
            "name": "response_action",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.response_delete": {
            "name": "response_delete",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj_display": [
                    "Any"
                ],
                "obj_id": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.render_delete_form": {
            "name": "render_delete_form",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "context": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.get_inline_formsets": {
            "name": "get_inline_formsets",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "formsets": [
                    "Any"
                ],
                "inline_instances": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.get_changeform_initial_data": {
            "name": "get_changeform_initial_data",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.changeform_view": {
            "name": "changeform_view",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object_id": [
                    "Optional[Any]"
                ],
                "form_url": [
                    "str"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.autocomplete_view": {
            "name": "autocomplete_view",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.add_view": {
            "name": "add_view",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "form_url": [
                    "str"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.change_view": {
            "name": "change_view",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object_id": [
                    "Any"
                ],
                "form_url": [
                    "str"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.changelist_view": {
            "name": "changelist_view",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.get_deleted_objects": {
            "name": "get_deleted_objects",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "objs": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        },
        "ModelAdmin.delete_view": {
            "name": "delete_view",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object_id": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelAdmin.history_view": {
            "name": "history_view",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "object_id": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineModelAdmin.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_model": [
                    "Any"
                ],
                "admin_site": [
                    "Any"
                ]
            }
        },
        "InlineModelAdmin.media": {
            "name": "media",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineModelAdmin.get_extra": {
            "name": "get_extra",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineModelAdmin.get_min_num": {
            "name": "get_min_num",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineModelAdmin.get_max_num": {
            "name": "get_max_num",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineModelAdmin.get_formset": {
            "name": "get_formset",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineModelAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "InlineModelAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "InlineModelAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineModelAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        },
        "InlineModelAdmin.has_view_permission": {
            "name": "has_view_permission",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/sites.py": {
        "AdminSite.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AdminSite.check": {
            "name": "check",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "app_configs": [
                    "Any"
                ]
            }
        },
        "AdminSite.register": {
            "name": "register",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_or_iterable": [
                    "Any"
                ],
                "admin_class": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.unregister": {
            "name": "unregister",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_or_iterable": [
                    "Any"
                ]
            }
        },
        "AdminSite.is_registered": {
            "name": "is_registered",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "AdminSite.add_action": {
            "name": "add_action",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Any"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.disable_action": {
            "name": "disable_action",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "AdminSite.get_action": {
            "name": "get_action",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "AdminSite.actions": {
            "name": "actions",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.empty_value_display": {
            "name": "empty_value_display",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "empty_value_display": [
                    "Any"
                ]
            }
        },
        "AdminSite.has_permission": {
            "name": "has_permission",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "AdminSite.admin_view": {
            "name": "admin_view",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "view": [
                    "Any"
                ],
                "cacheable": [
                    "bool"
                ]
            }
        },
        "AdminSite.get_urls": {
            "name": "get_urls",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.urls": {
            "name": "urls",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.each_context": {
            "name": "each_context",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "AdminSite.password_change": {
            "name": "password_change",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.password_change_done": {
            "name": "password_change_done",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.i18n_javascript": {
            "name": "i18n_javascript",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.logout": {
            "name": "logout",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.login": {
            "name": "login",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.get_app_list": {
            "name": "get_app_list",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "AdminSite.index": {
            "name": "index",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSite.app_index": {
            "name": "app_index",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "app_label": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/tests.py": {
        "CSPMiddleware.process_response": {
            "name": "process_response",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_until": {
            "name": "wait_until",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Any"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_for_popup": {
            "name": "wait_for_popup",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "num_windows": [
                    "int"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_for": {
            "name": "wait_for",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "css_selector": [
                    "Any"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_for_text": {
            "name": "wait_for_text",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "css_selector": [
                    "Any"
                ],
                "text": [
                    "Any"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_for_value": {
            "name": "wait_for_value",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "css_selector": [
                    "Any"
                ],
                "text": [
                    "Any"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_until_visible": {
            "name": "wait_until_visible",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "css_selector": [
                    "Any"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_until_invisible": {
            "name": "wait_until_invisible",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "css_selector": [
                    "Any"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "AdminSeleniumTestCase.wait_page_loaded": {
            "name": "wait_page_loaded",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminSeleniumTestCase.admin_login": {
            "name": "admin_login",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Any"
                ],
                "password": [
                    "Any"
                ],
                "login_url": [
                    "str"
                ]
            }
        },
        "AdminSeleniumTestCase.get_css_value": {
            "name": "get_css_value",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [
                    "Any"
                ],
                "attribute": [
                    "Any"
                ]
            }
        },
        "AdminSeleniumTestCase.get_select_option": {
            "name": "get_select_option",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "AdminSeleniumTestCase.assertSelectOptions": {
            "name": "assertSelectOptions",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "Any"
                ],
                "values": [
                    "Any"
                ]
            }
        },
        "AdminSeleniumTestCase.assertSelectedOptions": {
            "name": "assertSelectedOptions",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "Any"
                ],
                "values": [
                    "Any"
                ]
            }
        },
        "AdminSeleniumTestCase.has_css_class": {
            "name": "has_css_class",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [
                    "Any"
                ],
                "klass": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/utils.py": {
        "lookup_needs_distinct": {
            "name": "lookup_needs_distinct",
            "location": 10,
            "return": [],
            "arguments": {
                "opts": [
                    "Any"
                ],
                "lookup_path": [
                    "Any"
                ]
            }
        },
        "prepare_lookup_value": {
            "name": "prepare_lookup_value",
            "location": 11,
            "return": [],
            "arguments": {
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "quote": {
            "name": "quote",
            "location": 12,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "unquote": {
            "name": "unquote",
            "location": 13,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 14,
            "return": [],
            "arguments": {
                "fields": [
                    "Any"
                ]
            }
        },
        "flatten_fieldsets": {
            "name": "flatten_fieldsets",
            "location": 15,
            "return": [],
            "arguments": {
                "fieldsets": [
                    "Any"
                ]
            }
        },
        "get_deleted_objects": {
            "name": "get_deleted_objects",
            "location": 16,
            "return": [],
            "arguments": {
                "objs": [
                    "Any"
                ],
                "request": [
                    "Any"
                ],
                "admin_site": [
                    "Any"
                ]
            }
        },
        "model_format_dict": {
            "name": "model_format_dict",
            "location": 29,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "model_ngettext": {
            "name": "model_ngettext",
            "location": 30,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "n": [
                    "Optional[Any]"
                ]
            }
        },
        "lookup_field": {
            "name": "lookup_field",
            "location": 31,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ],
                "model_admin": [
                    "Optional[Any]"
                ]
            }
        },
        "label_for_field": {
            "name": "label_for_field",
            "location": 32,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "model_admin": [
                    "Optional[Any]"
                ],
                "return_attr": [
                    "bool"
                ],
                "form": [
                    "Optional[Any]"
                ]
            }
        },
        "help_text_for_field": {
            "name": "help_text_for_field",
            "location": 33,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "model": [
                    "Any"
                ]
            }
        },
        "display_for_field": {
            "name": "display_for_field",
            "location": 34,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "empty_value_display": [
                    "Any"
                ]
            }
        },
        "display_for_value": {
            "name": "display_for_value",
            "location": 35,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "empty_value_display": [
                    "Any"
                ],
                "boolean": [
                    "bool"
                ]
            }
        },
        "get_model_from_relation": {
            "name": "get_model_from_relation",
            "location": 39,
            "return": [],
            "arguments": {
                "field": [
                    "Any"
                ]
            }
        },
        "reverse_field_path": {
            "name": "reverse_field_path",
            "location": 40,
            "return": [],
            "arguments": {
                "model": [
                    "Any"
                ],
                "path": [
                    "Any"
                ]
            }
        },
        "get_fields_from_path": {
            "name": "get_fields_from_path",
            "location": 41,
            "return": [],
            "arguments": {
                "model": [
                    "Any"
                ],
                "path": [
                    "Any"
                ]
            }
        },
        "construct_change_message": {
            "name": "construct_change_message",
            "location": 42,
            "return": [],
            "arguments": {
                "form": [
                    "Any"
                ],
                "formsets": [
                    "Any"
                ],
                "add": [
                    "Any"
                ]
            }
        },
        "NestedObjects.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedObjects.add_edge": {
            "name": "add_edge",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Any"
                ],
                "target": [
                    "Any"
                ]
            }
        },
        "NestedObjects.collect": {
            "name": "collect",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "objs": [
                    "Any"
                ],
                "source": [
                    "Optional[Any]"
                ],
                "source_attr": [
                    "Optional[Any]"
                ]
            }
        },
        "NestedObjects.related_objects": {
            "name": "related_objects",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "related": [
                    "Any"
                ],
                "objs": [
                    "Any"
                ]
            }
        },
        "NestedObjects.nested": {
            "name": "nested",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "format_callback": [
                    "Optional[Any]"
                ]
            }
        },
        "NestedObjects.can_fast_delete": {
            "name": "can_fast_delete",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/widgets.py": {
        "url_params_from_lookup_dict": {
            "name": "url_params_from_lookup_dict",
            "location": 37,
            "return": [],
            "arguments": {
                "lookups": [
                    "Any"
                ]
            }
        },
        "FilteredSelectMultiple.media": {
            "name": "media",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilteredSelectMultiple.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Any"
                ],
                "is_stacked": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ],
                "choices": [
                    "Any"
                ]
            }
        },
        "FilteredSelectMultiple.get_context": {
            "name": "get_context",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "AdminDateWidget.media": {
            "name": "media",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminDateWidget.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "format": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminTimeWidget.media": {
            "name": "media",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminTimeWidget.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "format": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSplitDateTime.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminSplitDateTime.get_context": {
            "name": "get_context",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "ForeignKeyRawIdWidget.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "Any"
                ],
                "admin_site": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeignKeyRawIdWidget.get_context": {
            "name": "get_context",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "ForeignKeyRawIdWidget.base_url_parameters": {
            "name": "base_url_parameters",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKeyRawIdWidget.url_parameters": {
            "name": "url_parameters",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKeyRawIdWidget.label_and_url_for_value": {
            "name": "label_and_url_for_value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ManyToManyRawIdWidget.get_context": {
            "name": "get_context",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "ManyToManyRawIdWidget.url_parameters": {
            "name": "url_parameters",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyRawIdWidget.label_and_url_for_value": {
            "name": "label_and_url_for_value",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ManyToManyRawIdWidget.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "ManyToManyRawIdWidget.format_value": {
            "name": "format_value",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "RelatedFieldWidgetWrapper.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ],
                "rel": [
                    "Any"
                ],
                "admin_site": [
                    "Any"
                ],
                "can_add_related": [
                    "Optional[Any]"
                ],
                "can_change_related": [
                    "bool"
                ],
                "can_delete_related": [
                    "bool"
                ],
                "can_view_related": [
                    "bool"
                ]
            }
        },
        "RelatedFieldWidgetWrapper.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "RelatedFieldWidgetWrapper.is_hidden": {
            "name": "is_hidden",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedFieldWidgetWrapper.media": {
            "name": "media",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedFieldWidgetWrapper.get_related_url": {
            "name": "get_related_url",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "Any"
                ],
                "action": [
                    "Any"
                ]
            }
        },
        "RelatedFieldWidgetWrapper.get_context": {
            "name": "get_context",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "RelatedFieldWidgetWrapper.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "RelatedFieldWidgetWrapper.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "RelatedFieldWidgetWrapper.id_for_label": {
            "name": "id_for_label",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "Any"
                ]
            }
        },
        "AdminTextareaWidget.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminTextInputWidget.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminEmailInputWidget.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminURLFieldWidget.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminURLFieldWidget.get_context": {
            "name": "get_context",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "AdminIntegerFieldWidget.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "AutocompleteMixin.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "Any"
                ],
                "admin_site": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ],
                "choices": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "AutocompleteMixin.get_url": {
            "name": "get_url",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutocompleteMixin.build_attrs": {
            "name": "build_attrs",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "base_attrs": [
                    "Any"
                ],
                "extra_attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "AutocompleteMixin.optgroups": {
            "name": "optgroups",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attr": [
                    "Optional[Any]"
                ]
            }
        },
        "AutocompleteMixin.media": {
            "name": "media",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/__init__.py": {
        "autodiscover": {
            "name": "autodiscover",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/migrations/0002_logentry_remove_auto_add.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admin/migrations/0003_logentry_add_action_flag_choices.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admin/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admin/templatetags/admin_list.py": {
        "paginator_number": {
            "name": "paginator_number",
            "location": 11,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ],
                "i": [
                    "Any"
                ]
            }
        },
        "pagination": {
            "name": "pagination",
            "location": 12,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ]
            }
        },
        "pagination_tag": {
            "name": "pagination_tag",
            "location": 13,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "result_headers": {
            "name": "result_headers",
            "location": 14,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ]
            }
        },
        "items_for_result": {
            "name": "items_for_result",
            "location": 15,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ],
                "result": [
                    "Any"
                ],
                "form": [
                    "Any"
                ]
            }
        },
        "results": {
            "name": "results",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "Any"
                ]
            }
        },
        "result_hidden_fields": {
            "name": "result_hidden_fields",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cl": [
                    "Any"
                ]
            }
        },
        "result_list": {
            "name": "result_list",
            "location": 23,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ]
            }
        },
        "result_list_tag": {
            "name": "result_list_tag",
            "location": 24,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "date_hierarchy": {
            "name": "date_hierarchy",
            "location": 25,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ]
            }
        },
        "date_hierarchy_tag": {
            "name": "date_hierarchy_tag",
            "location": 26,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "search_form": {
            "name": "search_form",
            "location": 27,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ]
            }
        },
        "search_form_tag": {
            "name": "search_form_tag",
            "location": 28,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "admin_list_filter": {
            "name": "admin_list_filter",
            "location": 29,
            "return": [],
            "arguments": {
                "cl": [
                    "Any"
                ],
                "spec": [
                    "Any"
                ]
            }
        },
        "admin_actions": {
            "name": "admin_actions",
            "location": 30,
            "return": [],
            "arguments": {
                "context": [
                    "Any"
                ]
            }
        },
        "admin_actions_tag": {
            "name": "admin_actions_tag",
            "location": 31,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "change_list_object_tools_tag": {
            "name": "change_list_object_tools_tag",
            "location": 32,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "ResultList.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/templatetags/admin_modify.py": {
        "prepopulated_fields_js": {
            "name": "prepopulated_fields_js",
            "location": 10,
            "return": [],
            "arguments": {
                "context": [
                    "Any"
                ]
            }
        },
        "prepopulated_fields_js_tag": {
            "name": "prepopulated_fields_js_tag",
            "location": 11,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "submit_row": {
            "name": "submit_row",
            "location": 12,
            "return": [],
            "arguments": {
                "context": [
                    "Any"
                ]
            }
        },
        "submit_row_tag": {
            "name": "submit_row_tag",
            "location": 13,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "change_form_object_tools_tag": {
            "name": "change_form_object_tools_tag",
            "location": 14,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "cell_count": {
            "name": "cell_count",
            "location": 15,
            "return": [],
            "arguments": {
                "inline_admin_form": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/templatetags/admin_static.py": {
        "static": {
            "name": "static",
            "location": 9,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/templatetags/admin_urls.py": {
        "admin_urlname": {
            "name": "admin_urlname",
            "location": 9,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "admin_urlquote": {
            "name": "admin_urlquote",
            "location": 10,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "add_preserved_filters": {
            "name": "add_preserved_filters",
            "location": 11,
            "return": [],
            "arguments": {
                "context": [
                    "Any"
                ],
                "url": [
                    "Any"
                ],
                "popup": [
                    "bool"
                ],
                "to_field": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/templatetags/base.py": {
        "InclusionAdminNode.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ],
                "func": [
                    "Any"
                ],
                "template_name": [
                    "Any"
                ],
                "takes_context": [
                    "bool"
                ]
            }
        },
        "InclusionAdminNode.render": {
            "name": "render",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/templatetags/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admin/views/autocomplete.py": {
        "AutocompleteJsonView.get": {
            "name": "get",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "AutocompleteJsonView.get_paginator": {
            "name": "get_paginator",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutocompleteJsonView.get_queryset": {
            "name": "get_queryset",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutocompleteJsonView.has_perm": {
            "name": "has_perm",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "obj": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/views/decorators.py": {
        "staff_member_required": {
            "name": "staff_member_required",
            "location": 7,
            "return": [],
            "arguments": {
                "view_func": [
                    "Optional[Any]"
                ],
                "redirect_field_name": [
                    "Any"
                ],
                "login_url": [
                    "str"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/views/main.py": {
        "ChangeList.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "list_display": [
                    "Any"
                ],
                "list_display_links": [
                    "Any"
                ],
                "list_filter": [
                    "Any"
                ],
                "date_hierarchy": [
                    "Any"
                ],
                "search_fields": [
                    "Any"
                ],
                "list_select_related": [
                    "Any"
                ],
                "list_per_page": [
                    "Any"
                ],
                "list_max_show_all": [
                    "Any"
                ],
                "list_editable": [
                    "Any"
                ],
                "model_admin": [
                    "Any"
                ],
                "sortable_by": [
                    "Any"
                ]
            }
        },
        "ChangeList.get_filters_params": {
            "name": "get_filters_params",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "params": [
                    "Optional[Any]"
                ]
            }
        },
        "ChangeList.get_filters": {
            "name": "get_filters",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ChangeList.get_query_string": {
            "name": "get_query_string",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "new_params": [
                    "Optional[Any]"
                ],
                "remove": [
                    "Optional[Any]"
                ]
            }
        },
        "ChangeList.get_results": {
            "name": "get_results",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ChangeList.get_ordering_field": {
            "name": "get_ordering_field",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ]
            }
        },
        "ChangeList.get_ordering": {
            "name": "get_ordering",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ]
            }
        },
        "ChangeList.get_ordering_field_columns": {
            "name": "get_ordering_field_columns",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChangeList.get_queryset": {
            "name": "get_queryset",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "ChangeList.apply_select_related": {
            "name": "apply_select_related",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "qs": [
                    "Any"
                ]
            }
        },
        "ChangeList.has_related_field_in_list_display": {
            "name": "has_related_field_in_list_display",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChangeList.url_for_result": {
            "name": "url_for_result",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "result": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admin/views/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admindocs/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admindocs/middleware.py": {
        "XViewMiddleware.process_view": {
            "name": "process_view",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "view_func": [
                    "Any"
                ],
                "view_args": [
                    "Any"
                ],
                "view_kwargs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admindocs/urls.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/admindocs/utils.py": {
        "get_view_name": {
            "name": "get_view_name",
            "location": 9,
            "return": [],
            "arguments": {
                "view_func": [
                    "Any"
                ]
            }
        },
        "trim_docstring": {
            "name": "trim_docstring",
            "location": 10,
            "return": [],
            "arguments": {
                "docstring": [
                    "Any"
                ]
            }
        },
        "parse_docstring": {
            "name": "parse_docstring",
            "location": 11,
            "return": [],
            "arguments": {
                "docstring": [
                    "Any"
                ]
            }
        },
        "parse_rst": {
            "name": "parse_rst",
            "location": 12,
            "return": [],
            "arguments": {
                "text": [
                    "Any"
                ],
                "default_reference_context": [
                    "Any"
                ],
                "thing_being_parsed": [
                    "Optional[Any]"
                ]
            }
        },
        "create_reference_role": {
            "name": "create_reference_role",
            "location": 16,
            "return": [],
            "arguments": {
                "rolename": [
                    "Any"
                ],
                "urlbase": [
                    "Any"
                ]
            }
        },
        "default_reference_role": {
            "name": "default_reference_role",
            "location": 17,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "rawtext": [
                    "Any"
                ],
                "text": [
                    "Any"
                ],
                "lineno": [
                    "Any"
                ],
                "inliner": [
                    "Any"
                ],
                "options": [
                    "Optional[Any]"
                ],
                "content": [
                    "Optional[Any]"
                ]
            }
        },
        "replace_named_groups": {
            "name": "replace_named_groups",
            "location": 22,
            "return": [],
            "arguments": {
                "pattern": [
                    "Any"
                ]
            }
        },
        "replace_unnamed_groups": {
            "name": "replace_unnamed_groups",
            "location": 23,
            "return": [],
            "arguments": {
                "pattern": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admindocs/views.py": {
        "get_return_data_type": {
            "name": "get_return_data_type",
            "location": 48,
            "return": [],
            "arguments": {
                "func_name": [
                    "Any"
                ]
            }
        },
        "get_readable_field_data_type": {
            "name": "get_readable_field_data_type",
            "location": 49,
            "return": [],
            "arguments": {
                "field": [
                    "Any"
                ]
            }
        },
        "extract_views_from_urlpatterns": {
            "name": "extract_views_from_urlpatterns",
            "location": 50,
            "return": [],
            "arguments": {
                "urlpatterns": [
                    "Any"
                ],
                "base": [
                    "str"
                ],
                "namespace": [
                    "Optional[Any]"
                ]
            }
        },
        "simplify_regex": {
            "name": "simplify_regex",
            "location": 51,
            "return": [],
            "arguments": {
                "pattern": [
                    "Any"
                ]
            }
        },
        "BaseAdminDocsView.dispatch": {
            "name": "dispatch",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseAdminDocsView.get_context_data": {
            "name": "get_context_data",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BookmarkletsView.get_context_data": {
            "name": "get_context_data",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplateTagIndexView.get_context_data": {
            "name": "get_context_data",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplateFilterIndexView.get_context_data": {
            "name": "get_context_data",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ViewIndexView.get_context_data": {
            "name": "get_context_data",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ViewDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelIndexView.get_context_data": {
            "name": "get_context_data",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplateDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/admindocs/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/apps.py": {
        "AuthConfig.ready": {
            "name": "ready",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/checks.py": {
        "check_user_model": {
            "name": "check_user_model",
            "location": 8,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Optional[Any]"
                ]
            }
        },
        "check_models_permissions": {
            "name": "check_models_permissions",
            "location": 9,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/context_processors.py": {
        "auth": {
            "name": "auth",
            "location": 20,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "PermLookupDict.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Any"
                ],
                "app_label": [
                    "Any"
                ]
            }
        },
        "PermLookupDict.__getitem__": {
            "name": "__getitem__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "perm_name": [
                    "Any"
                ]
            }
        },
        "PermLookupDict.__iter__": {
            "name": "__iter__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermLookupDict.__bool__": {
            "name": "__bool__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermWrapper.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Any"
                ]
            }
        },
        "PermWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ]
            }
        },
        "PermWrapper.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermWrapper.__contains__": {
            "name": "__contains__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "perm_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/decorators.py": {
        "user_passes_test": {
            "name": "user_passes_test",
            "location": 7,
            "return": [],
            "arguments": {
                "test_func": [
                    "Any"
                ],
                "login_url": [
                    "Optional[Any]"
                ],
                "redirect_field_name": [
                    "Any"
                ]
            }
        },
        "login_required": {
            "name": "login_required",
            "location": 8,
            "return": [],
            "arguments": {
                "function": [
                    "Optional[Any]"
                ],
                "redirect_field_name": [
                    "Any"
                ],
                "login_url": [
                    "Optional[Any]"
                ]
            }
        },
        "permission_required": {
            "name": "permission_required",
            "location": 9,
            "return": [],
            "arguments": {
                "perm": [
                    "Any"
                ],
                "login_url": [
                    "Optional[Any]"
                ],
                "raise_exception": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/hashers.py": {
        "is_password_usable": {
            "name": "is_password_usable",
            "location": 10,
            "return": [],
            "arguments": {
                "encoded": [
                    "Any"
                ]
            }
        },
        "check_password": {
            "name": "check_password",
            "location": 11,
            "return": [],
            "arguments": {
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ],
                "setter": [
                    "Optional[Any]"
                ],
                "preferred": [
                    "str"
                ]
            }
        },
        "make_password": {
            "name": "make_password",
            "location": 12,
            "return": [],
            "arguments": {
                "password": [
                    "Any"
                ],
                "salt": [
                    "Optional[Any]"
                ],
                "hasher": [
                    "str"
                ]
            }
        },
        "get_hashers": {
            "name": "get_hashers",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "get_hashers_by_algorithm": {
            "name": "get_hashers_by_algorithm",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "reset_hashers": {
            "name": "reset_hashers",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_hasher": {
            "name": "get_hasher",
            "location": 16,
            "return": [],
            "arguments": {
                "algorithm": [
                    "str"
                ]
            }
        },
        "identify_hasher": {
            "name": "identify_hasher",
            "location": 17,
            "return": [],
            "arguments": {
                "encoded": [
                    "Any"
                ]
            }
        },
        "mask_hash": {
            "name": "mask_hash",
            "location": 18,
            "return": [],
            "arguments": {
                "hash": [
                    "Any"
                ],
                "show": [
                    "int"
                ],
                "char": [
                    "str"
                ]
            }
        },
        "BasePasswordHasher.salt": {
            "name": "salt",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePasswordHasher.verify": {
            "name": "verify",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "BasePasswordHasher.encode": {
            "name": "encode",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "BasePasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "BasePasswordHasher.must_update": {
            "name": "must_update",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "BasePasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "PBKDF2PasswordHasher.encode": {
            "name": "encode",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ],
                "iterations": [
                    "Optional[Any]"
                ]
            }
        },
        "PBKDF2PasswordHasher.verify": {
            "name": "verify",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "PBKDF2PasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "PBKDF2PasswordHasher.must_update": {
            "name": "must_update",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "PBKDF2PasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "Argon2PasswordHasher.encode": {
            "name": "encode",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "Argon2PasswordHasher.verify": {
            "name": "verify",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "Argon2PasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "Argon2PasswordHasher.must_update": {
            "name": "must_update",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "Argon2PasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "BCryptSHA256PasswordHasher.salt": {
            "name": "salt",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BCryptSHA256PasswordHasher.encode": {
            "name": "encode",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "BCryptSHA256PasswordHasher.verify": {
            "name": "verify",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "BCryptSHA256PasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "BCryptSHA256PasswordHasher.must_update": {
            "name": "must_update",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "BCryptSHA256PasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "SHA1PasswordHasher.encode": {
            "name": "encode",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "SHA1PasswordHasher.verify": {
            "name": "verify",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "SHA1PasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "SHA1PasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "MD5PasswordHasher.encode": {
            "name": "encode",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "MD5PasswordHasher.verify": {
            "name": "verify",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "MD5PasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "MD5PasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "UnsaltedSHA1PasswordHasher.salt": {
            "name": "salt",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsaltedSHA1PasswordHasher.encode": {
            "name": "encode",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "UnsaltedSHA1PasswordHasher.verify": {
            "name": "verify",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "UnsaltedSHA1PasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "UnsaltedSHA1PasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "UnsaltedMD5PasswordHasher.salt": {
            "name": "salt",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsaltedMD5PasswordHasher.encode": {
            "name": "encode",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "UnsaltedMD5PasswordHasher.verify": {
            "name": "verify",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "UnsaltedMD5PasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "UnsaltedMD5PasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "CryptPasswordHasher.salt": {
            "name": "salt",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CryptPasswordHasher.encode": {
            "name": "encode",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ]
            }
        },
        "CryptPasswordHasher.verify": {
            "name": "verify",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        },
        "CryptPasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "Any"
                ]
            }
        },
        "CryptPasswordHasher.harden_runtime": {
            "name": "harden_runtime",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "encoded": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/password_validation.py": {
        "get_default_password_validators": {
            "name": "get_default_password_validators",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "get_password_validators": {
            "name": "get_password_validators",
            "location": 8,
            "return": [],
            "arguments": {
                "validator_config": [
                    "Any"
                ]
            }
        },
        "validate_password": {
            "name": "validate_password",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "password": [
                    "Any"
                ],
                "user": [
                    "Optional[Any]"
                ],
                "password_validators": [
                    "Optional[Any]"
                ]
            }
        },
        "password_changed": {
            "name": "password_changed",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "password": [
                    "Any"
                ],
                "user": [
                    "Optional[Any]"
                ],
                "password_validators": [
                    "Optional[Any]"
                ]
            }
        },
        "password_validators_help_texts": {
            "name": "password_validators_help_texts",
            "location": 11,
            "return": [],
            "arguments": {
                "password_validators": [
                    "Optional[Any]"
                ]
            }
        },
        "MinimumLengthValidator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_length": [
                    "int"
                ]
            }
        },
        "MinimumLengthValidator.validate": {
            "name": "validate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "user": [
                    "Optional[Any]"
                ]
            }
        },
        "MinimumLengthValidator.get_help_text": {
            "name": "get_help_text",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserAttributeSimilarityValidator.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_attributes": [
                    "Any"
                ],
                "max_similarity": [
                    "float"
                ]
            }
        },
        "UserAttributeSimilarityValidator.validate": {
            "name": "validate",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "user": [
                    "Optional[Any]"
                ]
            }
        },
        "UserAttributeSimilarityValidator.get_help_text": {
            "name": "get_help_text",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommonPasswordValidator.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password_list_path": [
                    "Any"
                ]
            }
        },
        "CommonPasswordValidator.validate": {
            "name": "validate",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "user": [
                    "Optional[Any]"
                ]
            }
        },
        "CommonPasswordValidator.get_help_text": {
            "name": "get_help_text",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumericPasswordValidator.validate": {
            "name": "validate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Any"
                ],
                "user": [
                    "Optional[Any]"
                ]
            }
        },
        "NumericPasswordValidator.get_help_text": {
            "name": "get_help_text",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/signals.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/validators.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/__init__.py": {
        "load_backend": {
            "name": "load_backend",
            "location": 13,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "get_backends": {
            "name": "get_backends",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "authenticate": {
            "name": "authenticate",
            "location": 15,
            "return": [],
            "arguments": {
                "request": [
                    "Optional[Any]"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "user": [
                    "Any"
                ],
                "backend": [
                    "Optional[Any]"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "get_user_model": {
            "name": "get_user_model",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 19,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "get_permission_codename": {
            "name": "get_permission_codename",
            "location": 20,
            "return": [],
            "arguments": {
                "action": [
                    "Any"
                ],
                "opts": [
                    "Any"
                ]
            }
        },
        "update_session_auth_hash": {
            "name": "update_session_auth_hash",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "user": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/handlers/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/management/__init__.py": {
        "create_permissions": {
            "name": "create_permissions",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [
                    "Any"
                ],
                "verbosity": [
                    "int"
                ],
                "interactive": [
                    "bool"
                ],
                "using": [
                    "Any"
                ],
                "apps": [
                    "Any"
                ]
            }
        },
        "get_system_username": {
            "name": "get_system_username",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "get_default_username": {
            "name": "get_default_username",
            "location": 9,
            "return": [],
            "arguments": {
                "check_db": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0002_alter_permission_name_max_length.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0003_alter_user_email_max_length.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0004_alter_user_username_opts.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0005_alter_user_last_login_null.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0006_require_contenttypes_0002.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0007_alter_validators_add_error_messages.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0008_alter_user_username_max_length.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/0009_alter_user_last_name_max_length.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/auth/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/contenttypes/apps.py": {
        "ContentTypesConfig.ready": {
            "name": "ready",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/contenttypes/checks.py": {
        "check_generic_foreign_keys": {
            "name": "check_generic_foreign_keys",
            "location": 7,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Optional[Any]"
                ]
            }
        },
        "check_model_name_lengths": {
            "name": "check_model_name_lengths",
            "location": 8,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/contenttypes/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/contenttypes/management/__init__.py": {
        "inject_rename_contenttypes_operations": {
            "name": "inject_rename_contenttypes_operations",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "plan": [
                    "Optional[Any]"
                ],
                "apps": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "get_contenttypes_and_models": {
            "name": "get_contenttypes_and_models",
            "location": 17,
            "return": [],
            "arguments": {
                "app_config": [
                    "Any"
                ],
                "using": [
                    "Any"
                ],
                "ContentType": [
                    "Any"
                ]
            }
        },
        "create_contenttypes": {
            "name": "create_contenttypes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [
                    "Any"
                ],
                "verbosity": [
                    "int"
                ],
                "interactive": [
                    "bool"
                ],
                "using": [
                    "Any"
                ],
                "apps": [
                    "Any"
                ]
            }
        },
        "RenameContentType.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "old_model": [
                    "Any"
                ],
                "new_model": [
                    "Any"
                ]
            }
        },
        "RenameContentType.rename_forward": {
            "name": "rename_forward",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apps": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ]
            }
        },
        "RenameContentType.rename_backward": {
            "name": "rename_backward",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apps": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/contenttypes/migrations/0002_remove_content_type_name.py": {
        "add_legacy_name": {
            "name": "add_legacy_name",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/contenttypes/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/flatpages/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/flatpages/sitemaps.py": {
        "FlatPageSitemap.items": {
            "name": "items",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/flatpages/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/flatpages/migrations/0001_initial.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/flatpages/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/flatpages/templatetags/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/apps.py": {
        "GISConfig.ready": {
            "name": "ready",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/feeds.py": {
        "GeoFeedMixin.georss_coords": {
            "name": "georss_coords",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "coords": [
                    "Any"
                ]
            }
        },
        "GeoFeedMixin.add_georss_point": {
            "name": "add_georss_point",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "coords": [
                    "Any"
                ],
                "w3c_geo": [
                    "bool"
                ]
            }
        },
        "GeoFeedMixin.add_georss_element": {
            "name": "add_georss_element",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ],
                "w3c_geo": [
                    "bool"
                ]
            }
        },
        "GeoRSSFeed.rss_attributes": {
            "name": "rss_attributes",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeoRSSFeed.add_item_elements": {
            "name": "add_item_elements",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ]
            }
        },
        "GeoRSSFeed.add_root_elements": {
            "name": "add_root_elements",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "GeoAtom1Feed.root_attributes": {
            "name": "root_attributes",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeoAtom1Feed.add_item_elements": {
            "name": "add_item_elements",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ]
            }
        },
        "GeoAtom1Feed.add_root_elements": {
            "name": "add_root_elements",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "W3CGeoFeed.rss_attributes": {
            "name": "rss_attributes",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "W3CGeoFeed.add_item_elements": {
            "name": "add_item_elements",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ]
            }
        },
        "W3CGeoFeed.add_root_elements": {
            "name": "add_root_elements",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "Feed.feed_extra_kwargs": {
            "name": "feed_extra_kwargs",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Feed.item_extra_kwargs": {
            "name": "item_extra_kwargs",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/geometry.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/measure.py": {
        "MeasureBase.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_unit": [
                    "Optional[Any]"
                ]
            }
        },
        "MeasureBase.__getattr__": {
            "name": "__getattr__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__lt__": {
            "name": "__lt__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__add__": {
            "name": "__add__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__iadd__": {
            "name": "__iadd__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__sub__": {
            "name": "__sub__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__isub__": {
            "name": "__isub__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__mul__": {
            "name": "__mul__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__imul__": {
            "name": "__imul__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__rmul__": {
            "name": "__rmul__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__truediv__": {
            "name": "__truediv__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__itruediv__": {
            "name": "__itruediv__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MeasureBase.__bool__": {
            "name": "__bool__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeasureBase.default_units": {
            "name": "default_units",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "kwargs": [
                    "Any"
                ]
            }
        },
        "MeasureBase.unit_attname": {
            "name": "unit_attname",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "unit_str": [
                    "Any"
                ]
            }
        },
        "Distance.__mul__": {
            "name": "__mul__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Area.__truediv__": {
            "name": "__truediv__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/ptr.py": {
        "CPointerBase.ptr": {
            "name": "ptr",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ptr": [
                    "Any"
                ]
            }
        },
        "CPointerBase.__del__": {
            "name": "__del__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/shortcuts.py": {
        "compress_kml": {
            "name": "compress_kml",
            "location": 7,
            "return": [],
            "arguments": {
                "kml": [
                    "Any"
                ]
            }
        },
        "render_to_kml": {
            "name": "render_to_kml",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "render_to_kmz": {
            "name": "render_to_kmz",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/views.py": {
        "feed": {
            "name": "feed",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "url": [
                    "Any"
                ],
                "feed_dict": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/utils.py": {
        "SpatialOperator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Optional[Any]"
                ],
                "func": [
                    "Optional[Any]"
                ]
            }
        },
        "SpatialOperator.default_template": {
            "name": "default_template",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpatialOperator.as_sql": {
            "name": "as_sql",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "lookup": [
                    "Any"
                ],
                "template_params": [
                    "Any"
                ],
                "sql_params": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/base/adapter.py": {
        "WKTAdapter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "geom": [
                    "Any"
                ]
            }
        },
        "WKTAdapter.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "WKTAdapter.__hash__": {
            "name": "__hash__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/base/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/mysql/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/oracle/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/postgis/const.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/postgis/pgraster.py": {
        "pack": {
            "name": "pack",
            "location": 8,
            "return": [],
            "arguments": {
                "structure": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 9,
            "return": [],
            "arguments": {
                "structure": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "chunk": {
            "name": "chunk",
            "location": 10,
            "return": [],
            "arguments": {
                "data": [
                    "Any"
                ],
                "index": [
                    "Any"
                ]
            }
        },
        "from_pgraster": {
            "name": "from_pgraster",
            "location": 11,
            "return": [],
            "arguments": {
                "data": [
                    "Any"
                ]
            }
        },
        "to_pgraster": {
            "name": "to_pgraster",
            "location": 12,
            "return": [],
            "arguments": {
                "rast": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/postgis/schema.py": {
        "PostGISSchemaEditor.geo_quote_name": {
            "name": "geo_quote_name",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/postgis/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/spatialite/adapter.py": {
        "SpatiaLiteAdapter.__conform__": {
            "name": "__conform__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "protocol": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/spatialite/client.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/spatialite/schema.py": {
        "SpatialiteSchemaEditor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpatialiteSchemaEditor.geo_quote_name": {
            "name": "geo_quote_name",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "SpatialiteSchemaEditor.column_sql": {
            "name": "column_sql",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "include_default": [
                    "bool"
                ]
            }
        },
        "SpatialiteSchemaEditor.remove_geometry_metadata": {
            "name": "remove_geometry_metadata",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "SpatialiteSchemaEditor.create_model": {
            "name": "create_model",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "SpatialiteSchemaEditor.delete_model": {
            "name": "delete_model",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "SpatialiteSchemaEditor.add_field": {
            "name": "add_field",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "SpatialiteSchemaEditor.remove_field": {
            "name": "remove_field",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "SpatialiteSchemaEditor.alter_db_table": {
            "name": "alter_db_table",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_db_table": [
                    "Any"
                ],
                "new_db_table": [
                    "Any"
                ],
                "disable_constraints": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/db/backends/spatialite/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/geoip2/resources.py": {
        "City": {
            "name": "City",
            "location": 7,
            "return": [],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "Country": {
            "name": "Country",
            "location": 8,
            "return": [],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/gis/geoip2/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/gis/serializers/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/humanize/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/humanize/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/humanize/templatetags/humanize.py": {
        "ordinal": {
            "name": "ordinal",
            "location": 9,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "intcomma": {
            "name": "intcomma",
            "location": 10,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "use_l10n": [
                    "bool"
                ]
            }
        },
        "intword": {
            "name": "intword",
            "location": 14,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "apnumber": {
            "name": "apnumber",
            "location": 15,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "naturalday": {
            "name": "naturalday",
            "location": 16,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Optional[Any]"
                ]
            }
        },
        "naturaltime": {
            "name": "naturaltime",
            "location": 17,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/humanize/templatetags/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/messages/api.py": {
        "add_message": {
            "name": "add_message",
            "location": 9,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "level": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "extra_tags": [
                    "str"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "get_messages": {
            "name": "get_messages",
            "location": 10,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "get_level": {
            "name": "get_level",
            "location": 11,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "set_level": {
            "name": "set_level",
            "location": 12,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "level": [
                    "Any"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "extra_tags": [
                    "str"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "extra_tags": [
                    "str"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "success": {
            "name": "success",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "extra_tags": [
                    "str"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "warning": {
            "name": "warning",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "extra_tags": [
                    "str"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "extra_tags": [
                    "str"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/messages/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/messages/constants.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/messages/context_processors.py": {
        "messages": {
            "name": "messages",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/messages/middleware.py": {
        "MessageMiddleware.process_request": {
            "name": "process_request",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "MessageMiddleware.process_response": {
            "name": "process_response",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/messages/utils.py": {
        "get_level_tags": {
            "name": "get_level_tags",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/messages/views.py": {
        "SuccessMessageMixin.form_valid": {
            "name": "form_valid",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ]
            }
        },
        "SuccessMessageMixin.get_success_message": {
            "name": "get_success_message",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/messages/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/messages/storage/__init__.py": {
        "default_storage": {
            "name": "default_storage",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/apps.py": {
        "PostgresConfig.ready": {
            "name": "ready",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/functions.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/postgres/indexes.py": {
        "PostgresIndex.max_name_length": {
            "name": "max_name_length",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostgresIndex.create_sql": {
            "name": "create_sql",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "using": [
                    "str"
                ]
            }
        },
        "PostgresIndex.get_with_params": {
            "name": "get_with_params",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrinIndex.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrinIndex.deconstruct": {
            "name": "deconstruct",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrinIndex.get_with_params": {
            "name": "get_with_params",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GinIndex.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GinIndex.deconstruct": {
            "name": "deconstruct",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GinIndex.get_with_params": {
            "name": "get_with_params",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GistIndex.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GistIndex.deconstruct": {
            "name": "deconstruct",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GistIndex.get_with_params": {
            "name": "get_with_params",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/lookups.py": {
        "PostgresSimpleLookup.as_sql": {
            "name": "as_sql",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "HasKeys.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchLookup.process_lhs": {
            "name": "process_lhs",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "JSONExact.process_rhs": {
            "name": "process_rhs",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/operations.py": {
        "CreateExtension.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "CreateExtension.state_forwards": {
            "name": "state_forwards",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "CreateExtension.database_forwards": {
            "name": "database_forwards",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "CreateExtension.database_backwards": {
            "name": "database_backwards",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "CreateExtension.describe": {
            "name": "describe",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BtreeGinExtension.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BtreeGistExtension.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CITextExtension.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoExtension.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HStoreExtension.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrigramExtension.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaccentExtension.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/search.py": {
        "SearchVectorExact.process_rhs": {
            "name": "process_rhs",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "SearchVectorExact.as_sql": {
            "name": "as_sql",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "SearchVectorField.db_type": {
            "name": "db_type",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "SearchQueryField.db_type": {
            "name": "db_type",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "SearchVector.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchVector.resolve_expression": {
            "name": "resolve_expression",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "SearchVector.as_sql": {
            "name": "as_sql",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "function": [
                    "Optional[Any]"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "CombinedSearchVector.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Any"
                ],
                "connector": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ],
                "config": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "SearchQueryCombinable.__or__": {
            "name": "__or__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SearchQueryCombinable.__ror__": {
            "name": "__ror__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SearchQueryCombinable.__and__": {
            "name": "__and__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SearchQueryCombinable.__rand__": {
            "name": "__rand__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "SearchQuery.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "SearchQuery.resolve_expression": {
            "name": "resolve_expression",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "SearchQuery.as_sql": {
            "name": "as_sql",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "SearchQuery.__invert__": {
            "name": "__invert__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CombinedSearchQuery.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Any"
                ],
                "connector": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ],
                "config": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "SearchRank.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "Any"
                ],
                "query": [
                    "Any"
                ]
            }
        },
        "SearchRank.as_sql": {
            "name": "as_sql",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "function": [
                    "Optional[Any]"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "TrigramBase.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "string": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/signals.py": {
        "get_hstore_oids": {
            "name": "get_hstore_oids",
            "location": 7,
            "return": [],
            "arguments": {
                "connection_alias": [
                    "Any"
                ]
            }
        },
        "get_citext_oids": {
            "name": "get_citext_oids",
            "location": 8,
            "return": [],
            "arguments": {
                "connection_alias": [
                    "Any"
                ]
            }
        },
        "register_type_handlers": {
            "name": "register_type_handlers",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/utils.py": {
        "prefix_validation_error": {
            "name": "prefix_validation_error",
            "location": 7,
            "return": [],
            "arguments": {
                "error": [
                    "Any"
                ],
                "prefix": [
                    "Any"
                ],
                "code": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/validators.py": {
        "KeysValidator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Any"
                ],
                "strict": [
                    "bool"
                ],
                "messages": [
                    "Optional[Any]"
                ]
            }
        },
        "KeysValidator.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "KeysValidator.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "RangeMaxValueValidator.compare": {
            "name": "compare",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ]
            }
        },
        "RangeMinValueValidator.compare": {
            "name": "compare",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/postgres/aggregates/general.py": {
        "ArrayAgg.output_field": {
            "name": "output_field",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayAgg.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "distinct": [
                    "bool"
                ]
            }
        },
        "ArrayAgg.convert_value": {
            "name": "convert_value",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "JSONBAgg.convert_value": {
            "name": "convert_value",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "StringAgg.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "delimiter": [
                    "Any"
                ],
                "distinct": [
                    "bool"
                ]
            }
        },
        "StringAgg.convert_value": {
            "name": "convert_value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/aggregates/statistics.py": {
        "StatAggregate.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Any"
                ],
                "x": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ],
                "filter": [
                    "Optional[Any]"
                ]
            }
        },
        "StatAggregate.resolve_expression": {
            "name": "resolve_expression",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "CovarPop.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Any"
                ],
                "x": [
                    "Any"
                ],
                "sample": [
                    "bool"
                ],
                "filter": [
                    "Optional[Any]"
                ]
            }
        },
        "RegrCount.convert_value": {
            "name": "convert_value",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/aggregates/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/array.py": {
        "ArrayField.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_field": [
                    "Any"
                ],
                "size": [
                    "Optional[Any]"
                ]
            }
        },
        "ArrayField.model": {
            "name": "model",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "ArrayField.check": {
            "name": "check",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayField.set_attributes_from_name": {
            "name": "set_attributes_from_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "ArrayField.description": {
            "name": "description",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayField.db_type": {
            "name": "db_type",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "ArrayField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "ArrayField.deconstruct": {
            "name": "deconstruct",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayField.to_python": {
            "name": "to_python",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ArrayField.value_to_string": {
            "name": "value_to_string",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "ArrayField.get_transform": {
            "name": "get_transform",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "ArrayField.validate": {
            "name": "validate",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "model_instance": [
                    "Any"
                ]
            }
        },
        "ArrayField.run_validators": {
            "name": "run_validators",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ArrayField.formfield": {
            "name": "formfield",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayContains.as_sql": {
            "name": "as_sql",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ArrayContainedBy.as_sql": {
            "name": "as_sql",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ArrayExact.as_sql": {
            "name": "as_sql",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ArrayOverlap.as_sql": {
            "name": "as_sql",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ArrayLenTransform.as_sql": {
            "name": "as_sql",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ArrayInLookup.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexTransform.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ],
                "base_field": [
                    "Any"
                ]
            }
        },
        "IndexTransform.as_sql": {
            "name": "as_sql",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "IndexTransform.output_field": {
            "name": "output_field",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexTransformFactory.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ],
                "base_field": [
                    "Any"
                ]
            }
        },
        "IndexTransformFactory.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SliceTransform.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "end": [
                    "Any"
                ]
            }
        },
        "SliceTransform.as_sql": {
            "name": "as_sql",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "SliceTransformFactory.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "end": [
                    "Any"
                ]
            }
        },
        "SliceTransformFactory.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/citext.py": {
        "CIText.get_internal_type": {
            "name": "get_internal_type",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CIText.db_type": {
            "name": "db_type",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/hstore.py": {
        "HStoreField.db_type": {
            "name": "db_type",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "HStoreField.get_transform": {
            "name": "get_transform",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "HStoreField.validate": {
            "name": "validate",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "model_instance": [
                    "Any"
                ]
            }
        },
        "HStoreField.to_python": {
            "name": "to_python",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "HStoreField.value_to_string": {
            "name": "value_to_string",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "HStoreField.formfield": {
            "name": "formfield",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HStoreField.get_prep_value": {
            "name": "get_prep_value",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "KeyTransform.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "Any"
                ]
            }
        },
        "KeyTransform.as_sql": {
            "name": "as_sql",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "KeyTransformFactory.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "Any"
                ]
            }
        },
        "KeyTransformFactory.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/jsonb.py": {
        "JsonAdapter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adapted": [
                    "Any"
                ],
                "dumps": [
                    "Optional[Any]"
                ],
                "encoder": [
                    "Optional[Any]"
                ]
            }
        },
        "JsonAdapter.dumps": {
            "name": "dumps",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "JSONField.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "encoder": [
                    "Optional[Any]"
                ]
            }
        },
        "JSONField.db_type": {
            "name": "db_type",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "JSONField.deconstruct": {
            "name": "deconstruct",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONField.get_transform": {
            "name": "get_transform",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "JSONField.get_prep_value": {
            "name": "get_prep_value",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "JSONField.validate": {
            "name": "validate",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "model_instance": [
                    "Any"
                ]
            }
        },
        "JSONField.value_to_string": {
            "name": "value_to_string",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "JSONField.formfield": {
            "name": "formfield",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyTransform.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "Any"
                ]
            }
        },
        "KeyTransform.as_sql": {
            "name": "as_sql",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "KeyTransformTextLookupMixin.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_transform": [
                    "Any"
                ]
            }
        },
        "KeyTransformFactory.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "Any"
                ]
            }
        },
        "KeyTransformFactory.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/mixins.py": {
        "CheckFieldDefaultMixin.check": {
            "name": "check",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/ranges.py": {
        "RangeField.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeField.model": {
            "name": "model",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "RangeField.get_prep_value": {
            "name": "get_prep_value",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "RangeField.to_python": {
            "name": "to_python",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "RangeField.set_attributes_from_name": {
            "name": "set_attributes_from_name",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "RangeField.value_to_string": {
            "name": "value_to_string",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "RangeField.formfield": {
            "name": "formfield",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerRangeField.db_type": {
            "name": "db_type",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BigIntegerRangeField.db_type": {
            "name": "db_type",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "FloatRangeField.db_type": {
            "name": "db_type",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "DateTimeRangeField.db_type": {
            "name": "db_type",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "DateRangeField.db_type": {
            "name": "db_type",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "DateTimeRangeContains.process_rhs": {
            "name": "process_rhs",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DateTimeRangeContains.as_sql": {
            "name": "as_sql",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "RangeContainedBy.as_sql": {
            "name": "as_sql",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "RangeContainedBy.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeStartsWith.output_field": {
            "name": "output_field",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeEndsWith.output_field": {
            "name": "output_field",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/utils.py": {
        "AttributeSetter.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/fields/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/postgres/forms/array.py": {
        "SimpleArrayField.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_field": [
                    "Any"
                ]
            }
        },
        "SimpleArrayField.clean": {
            "name": "clean",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SimpleArrayField.prepare_value": {
            "name": "prepare_value",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SimpleArrayField.to_python": {
            "name": "to_python",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SimpleArrayField.validate": {
            "name": "validate",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SimpleArrayField.run_validators": {
            "name": "run_validators",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SimpleArrayField.has_changed": {
            "name": "has_changed",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "SplitArrayWidget.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ],
                "size": [
                    "Any"
                ]
            }
        },
        "SplitArrayWidget.is_hidden": {
            "name": "is_hidden",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SplitArrayWidget.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "SplitArrayWidget.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "SplitArrayWidget.id_for_label": {
            "name": "id_for_label",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "Any"
                ]
            }
        },
        "SplitArrayWidget.get_context": {
            "name": "get_context",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "SplitArrayWidget.media": {
            "name": "media",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SplitArrayWidget.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "SplitArrayWidget.needs_multipart_form": {
            "name": "needs_multipart_form",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SplitArrayField.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_field": [
                    "Any"
                ],
                "size": [
                    "Any"
                ]
            }
        },
        "SplitArrayField.clean": {
            "name": "clean",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/forms/hstore.py": {
        "HStoreField.prepare_value": {
            "name": "prepare_value",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "HStoreField.to_python": {
            "name": "to_python",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "HStoreField.has_changed": {
            "name": "has_changed",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/forms/jsonb.py": {
        "JSONField.to_python": {
            "name": "to_python",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "JSONField.bound_data": {
            "name": "bound_data",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "initial": [
                    "Any"
                ]
            }
        },
        "JSONField.prepare_value": {
            "name": "prepare_value",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "JSONField.has_changed": {
            "name": "has_changed",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/forms/ranges.py": {
        "BaseRangeField.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRangeField.prepare_value": {
            "name": "prepare_value",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseRangeField.compress": {
            "name": "compress",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ]
            }
        },
        "RangeWidget.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_widget": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "RangeWidget.decompress": {
            "name": "decompress",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/postgres/forms/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/redirects/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/redirects/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/redirects/migrations/0001_initial.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/redirects/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sessions/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sessions/exceptions.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sessions/middleware.py": {
        "SessionMiddleware.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionMiddleware.process_request": {
            "name": "process_request",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "SessionMiddleware.process_response": {
            "name": "process_response",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/serializers.py": {
        "PickleSerializer.dumps": {
            "name": "dumps",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "PickleSerializer.loads": {
            "name": "loads",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sessions/backends/base.py": {
        "SessionBase.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionBase.__contains__": {
            "name": "__contains__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SessionBase.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SessionBase.__setitem__": {
            "name": "__setitem__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SessionBase.__delitem__": {
            "name": "__delitem__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SessionBase.get": {
            "name": "get",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionBase.pop": {
            "name": "pop",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "SessionBase.setdefault": {
            "name": "setdefault",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SessionBase.set_test_cookie": {
            "name": "set_test_cookie",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.test_cookie_worked": {
            "name": "test_cookie_worked",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.delete_test_cookie": {
            "name": "delete_test_cookie",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.encode": {
            "name": "encode",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "session_dict": [
                    "Any"
                ]
            }
        },
        "SessionBase.decode": {
            "name": "decode",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "session_data": [
                    "Any"
                ]
            }
        },
        "SessionBase.update": {
            "name": "update",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_": [
                    "Any"
                ]
            }
        },
        "SessionBase.has_key": {
            "name": "has_key",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "SessionBase.keys": {
            "name": "keys",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.values": {
            "name": "values",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.items": {
            "name": "items",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.clear": {
            "name": "clear",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.is_empty": {
            "name": "is_empty",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.get_expiry_age": {
            "name": "get_expiry_age",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.get_expiry_date": {
            "name": "get_expiry_date",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.set_expiry": {
            "name": "set_expiry",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SessionBase.get_expire_at_browser_close": {
            "name": "get_expire_at_browser_close",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.flush": {
            "name": "flush",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.cycle_key": {
            "name": "cycle_key",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.exists": {
            "name": "exists",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Any"
                ]
            }
        },
        "SessionBase.create": {
            "name": "create",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.save": {
            "name": "save",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "must_create": [
                    "bool"
                ]
            }
        },
        "SessionBase.delete": {
            "name": "delete",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionBase.load": {
            "name": "load",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBase.clear_expired": {
            "name": "clear_expired",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/backends/cache.py": {
        "SessionStore.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.cache_key": {
            "name": "cache_key",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.load": {
            "name": "load",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.create": {
            "name": "create",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.save": {
            "name": "save",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "must_create": [
                    "bool"
                ]
            }
        },
        "SessionStore.exists": {
            "name": "exists",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "session_key": [
                    "Any"
                ]
            }
        },
        "SessionStore.delete": {
            "name": "delete",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.clear_expired": {
            "name": "clear_expired",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/backends/cached_db.py": {
        "SessionStore.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.cache_key": {
            "name": "cache_key",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.load": {
            "name": "load",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.exists": {
            "name": "exists",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "session_key": [
                    "Any"
                ]
            }
        },
        "SessionStore.save": {
            "name": "save",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "must_create": [
                    "bool"
                ]
            }
        },
        "SessionStore.delete": {
            "name": "delete",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.flush": {
            "name": "flush",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/backends/db.py": {
        "SessionStore.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.get_model_class": {
            "name": "get_model_class",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SessionStore.model": {
            "name": "model",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.load": {
            "name": "load",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.exists": {
            "name": "exists",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "session_key": [
                    "Any"
                ]
            }
        },
        "SessionStore.create": {
            "name": "create",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.create_model_instance": {
            "name": "create_model_instance",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "SessionStore.save": {
            "name": "save",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "must_create": [
                    "bool"
                ]
            }
        },
        "SessionStore.delete": {
            "name": "delete",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.clear_expired": {
            "name": "clear_expired",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/backends/file.py": {
        "SessionStore.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.load": {
            "name": "load",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.create": {
            "name": "create",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.save": {
            "name": "save",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "must_create": [
                    "bool"
                ]
            }
        },
        "SessionStore.exists": {
            "name": "exists",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "session_key": [
                    "Any"
                ]
            }
        },
        "SessionStore.delete": {
            "name": "delete",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.clean": {
            "name": "clean",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.clear_expired": {
            "name": "clear_expired",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/backends/signed_cookies.py": {
        "SessionStore.load": {
            "name": "load",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.create": {
            "name": "create",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.save": {
            "name": "save",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "must_create": [
                    "bool"
                ]
            }
        },
        "SessionStore.exists": {
            "name": "exists",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.delete": {
            "name": "delete",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_key": [
                    "Optional[Any]"
                ]
            }
        },
        "SessionStore.cycle_key": {
            "name": "cycle_key",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionStore.clear_expired": {
            "name": "clear_expired",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sessions/backends/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sessions/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sitemaps/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sitemaps/views.py": {
        "x_robots_tag": {
            "name": "x_robots_tag",
            "location": 7,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 8,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "sitemaps": [
                    "Any"
                ],
                "template_name": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "sitemap_url_name": [
                    "str"
                ]
            }
        },
        "sitemap": {
            "name": "sitemap",
            "location": 9,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "sitemaps": [
                    "Any"
                ],
                "section": [
                    "Optional[Any]"
                ],
                "template_name": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sitemaps/__init__.py": {
        "ping_google": {
            "name": "ping_google",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "sitemap_url": [
                    "Optional[Any]"
                ],
                "ping_url": [
                    "Any"
                ]
            }
        },
        "Sitemap.items": {
            "name": "items",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sitemap.location": {
            "name": "location",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Sitemap.paginator": {
            "name": "paginator",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sitemap.get_urls": {
            "name": "get_urls",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "page": [
                    "int"
                ],
                "site": [
                    "Optional[Any]"
                ],
                "protocol": [
                    "Optional[Any]"
                ]
            }
        },
        "GenericSitemap.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info_dict": [
                    "Any"
                ],
                "priority": [
                    "Optional[Any]"
                ],
                "changefreq": [
                    "Optional[Any]"
                ],
                "protocol": [
                    "Optional[Any]"
                ]
            }
        },
        "GenericSitemap.items": {
            "name": "items",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericSitemap.lastmod": {
            "name": "lastmod",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sites/apps.py": {
        "SitesConfig.ready": {
            "name": "ready",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sites/management.py": {
        "create_default_site": {
            "name": "create_default_site",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [
                    "Any"
                ],
                "verbosity": [
                    "int"
                ],
                "interactive": [
                    "bool"
                ],
                "using": [
                    "Any"
                ],
                "apps": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sites/managers.py": {
        "CurrentSiteManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "Optional[Any]"
                ]
            }
        },
        "CurrentSiteManager.check": {
            "name": "check",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrentSiteManager.get_queryset": {
            "name": "get_queryset",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sites/middleware.py": {
        "CurrentSiteMiddleware.process_request": {
            "name": "process_request",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sites/requests.py": {
        "RequestSite.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "RequestSite.save": {
            "name": "save",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "bool"
                ],
                "force_update": [
                    "bool"
                ]
            }
        },
        "RequestSite.delete": {
            "name": "delete",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sites/shortcuts.py": {
        "get_current_site": {
            "name": "get_current_site",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/sites/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/sites/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/apps.py": {
        "StaticFilesConfig.ready": {
            "name": "ready",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/checks.py": {
        "check_finders": {
            "name": "check_finders",
            "location": 7,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/finders.py": {
        "find": {
            "name": "find",
            "location": 43,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ],
                "all": [
                    "bool"
                ]
            }
        },
        "get_finders": {
            "name": "get_finders",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_finder": {
            "name": "get_finder",
            "location": 45,
            "return": [],
            "arguments": {
                "import_path": [
                    "Any"
                ]
            }
        },
        "BaseFinder.check": {
            "name": "check",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFinder.find": {
            "name": "find",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "all": [
                    "bool"
                ]
            }
        },
        "BaseFinder.list": {
            "name": "list",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignore_patterns": [
                    "Any"
                ]
            }
        },
        "FileSystemFinder.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_names": [
                    "Optional[Any]"
                ]
            }
        },
        "FileSystemFinder.check": {
            "name": "check",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFinder.find": {
            "name": "find",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "all": [
                    "bool"
                ]
            }
        },
        "FileSystemFinder.find_location": {
            "name": "find_location",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "root": [
                    "Any"
                ],
                "path": [
                    "Any"
                ],
                "prefix": [
                    "Optional[Any]"
                ]
            }
        },
        "FileSystemFinder.list": {
            "name": "list",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignore_patterns": [
                    "Any"
                ]
            }
        },
        "AppDirectoriesFinder.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_names": [
                    "Optional[Any]"
                ]
            }
        },
        "AppDirectoriesFinder.list": {
            "name": "list",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignore_patterns": [
                    "Any"
                ]
            }
        },
        "AppDirectoriesFinder.find": {
            "name": "find",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "all": [
                    "bool"
                ]
            }
        },
        "AppDirectoriesFinder.find_in_app": {
            "name": "find_in_app",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Any"
                ],
                "path": [
                    "Any"
                ]
            }
        },
        "BaseStorageFinder.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseStorageFinder.find": {
            "name": "find",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "all": [
                    "bool"
                ]
            }
        },
        "BaseStorageFinder.list": {
            "name": "list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignore_patterns": [
                    "Any"
                ]
            }
        },
        "DefaultStorageFinder.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/handlers.py": {
        "StaticFilesHandler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "Any"
                ]
            }
        },
        "StaticFilesHandler.load_middleware": {
            "name": "load_middleware",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticFilesHandler.get_base_url": {
            "name": "get_base_url",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticFilesHandler.file_path": {
            "name": "file_path",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "Any"
                ]
            }
        },
        "StaticFilesHandler.serve": {
            "name": "serve",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "StaticFilesHandler.get_response": {
            "name": "get_response",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "StaticFilesHandler.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "Any"
                ],
                "start_response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/storage.py": {
        "StaticFilesStorage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "Optional[Any]"
                ],
                "base_url": [
                    "Optional[Any]"
                ]
            }
        },
        "StaticFilesStorage.path": {
            "name": "path",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "HashedFilesMixin.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashedFilesMixin.file_hash": {
            "name": "file_hash",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "content": [
                    "Optional[Any]"
                ]
            }
        },
        "HashedFilesMixin.hashed_name": {
            "name": "hashed_name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "content": [
                    "Optional[Any]"
                ],
                "filename": [
                    "Optional[Any]"
                ]
            }
        },
        "HashedFilesMixin.url": {
            "name": "url",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "HashedFilesMixin.url_converter": {
            "name": "url_converter",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "hashed_files": [
                    "Any"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "HashedFilesMixin.post_process": {
            "name": "post_process",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "Any"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "HashedFilesMixin.clean_name": {
            "name": "clean_name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "HashedFilesMixin.hash_key": {
            "name": "hash_key",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "HashedFilesMixin.stored_name": {
            "name": "stored_name",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "ManifestFilesMixin.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestFilesMixin.read_manifest": {
            "name": "read_manifest",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManifestFilesMixin.load_manifest": {
            "name": "load_manifest",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManifestFilesMixin.post_process": {
            "name": "post_process",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestFilesMixin.save_manifest": {
            "name": "save_manifest",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestFilesMixin.stored_name": {
            "name": "stored_name",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "_MappingCache.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "Any"
                ]
            }
        },
        "_MappingCache.__setitem__": {
            "name": "__setitem__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "_MappingCache.__getitem__": {
            "name": "__getitem__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "_MappingCache.clear": {
            "name": "clear",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MappingCache.update": {
            "name": "update",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "_MappingCache.get": {
            "name": "get",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "CachedFilesMixin.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedFilesMixin.hash_key": {
            "name": "hash_key",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/testing.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/utils.py": {
        "matches_patterns": {
            "name": "matches_patterns",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ],
                "patterns": [
                    "Optional[Any]"
                ]
            }
        },
        "get_files": {
            "name": "get_files",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "storage": [
                    "Any"
                ],
                "ignore_patterns": [
                    "Optional[Any]"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "check_settings": {
            "name": "check_settings",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/views.py": {
        "serve": {
            "name": "serve",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "path": [
                    "Any"
                ],
                "insecure": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/templatetags/staticfiles.py": {
        "static": {
            "name": "static",
            "location": 9,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "do_static": {
            "name": "do_static",
            "location": 10,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/staticfiles/templatetags/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/syndication/apps.py": {},
    "django-graphql-master/mypy_stubs/django/contrib/syndication/views.py": {
        "add_domain": {
            "name": "add_domain",
            "location": 8,
            "return": [],
            "arguments": {
                "domain": [
                    "Any"
                ],
                "url": [
                    "Any"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Feed.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "Feed.item_title": {
            "name": "item_title",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Feed.item_description": {
            "name": "item_description",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Feed.item_link": {
            "name": "item_link",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Feed.item_enclosures": {
            "name": "item_enclosures",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Feed.feed_extra_kwargs": {
            "name": "feed_extra_kwargs",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Feed.item_extra_kwargs": {
            "name": "item_extra_kwargs",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Feed.get_object": {
            "name": "get_object",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "Feed.get_context_data": {
            "name": "get_context_data",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Feed.get_feed": {
            "name": "get_feed",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/contrib/syndication/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/exceptions.py": {
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ],
                "code": [
                    "Optional[Any]"
                ],
                "params": [
                    "Optional[Any]"
                ]
            }
        },
        "ValidationError.message_dict": {
            "name": "message_dict",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.messages": {
            "name": "messages",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.update_error_dict": {
            "name": "update_error_dict",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "error_dict": [
                    "Any"
                ]
            }
        },
        "ValidationError.__iter__": {
            "name": "__iter__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/paginator.py": {
        "Paginator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_list": [
                    "Any"
                ],
                "per_page": [
                    "Any"
                ],
                "orphans": [
                    "int"
                ],
                "allow_empty_first_page": [
                    "bool"
                ]
            }
        },
        "Paginator.validate_number": {
            "name": "validate_number",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "number": [
                    "Any"
                ]
            }
        },
        "Paginator.get_page": {
            "name": "get_page",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "number": [
                    "Any"
                ]
            }
        },
        "Paginator.page": {
            "name": "page",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "number": [
                    "Any"
                ]
            }
        },
        "Paginator.count": {
            "name": "count",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paginator.num_pages": {
            "name": "num_pages",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paginator.page_range": {
            "name": "page_range",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_list": [
                    "Any"
                ],
                "number": [
                    "Any"
                ],
                "paginator": [
                    "Any"
                ]
            }
        },
        "Page.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.__getitem__": {
            "name": "__getitem__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ]
            }
        },
        "Page.has_next": {
            "name": "has_next",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.has_previous": {
            "name": "has_previous",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.has_other_pages": {
            "name": "has_other_pages",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.next_page_number": {
            "name": "next_page_number",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.previous_page_number": {
            "name": "previous_page_number",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.start_index": {
            "name": "start_index",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.end_index": {
            "name": "end_index",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/signals.py": {},
    "django-graphql-master/mypy_stubs/django/core/signing.py": {
        "b64_encode": {
            "name": "b64_encode",
            "location": 10,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "b64_decode": {
            "name": "b64_decode",
            "location": 11,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "base64_hmac": {
            "name": "base64_hmac",
            "location": 12,
            "return": [],
            "arguments": {
                "salt": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "get_cookie_signer": {
            "name": "get_cookie_signer",
            "location": 13,
            "return": [],
            "arguments": {
                "salt": [
                    "str"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 19,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "key": [
                    "Optional[Any]"
                ],
                "salt": [
                    "str"
                ],
                "serializer": [
                    "Any"
                ],
                "compress": [
                    "bool"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 20,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ],
                "key": [
                    "Optional[Any]"
                ],
                "salt": [
                    "str"
                ],
                "serializer": [
                    "Any"
                ],
                "max_age": [
                    "Optional[Any]"
                ]
            }
        },
        "JSONSerializer.dumps": {
            "name": "dumps",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "JSONSerializer.loads": {
            "name": "loads",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "Signer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[Any]"
                ],
                "sep": [
                    "str"
                ],
                "salt": [
                    "Optional[Any]"
                ]
            }
        },
        "Signer.signature": {
            "name": "signature",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Signer.sign": {
            "name": "sign",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Signer.unsign": {
            "name": "unsign",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "signed_value": [
                    "Any"
                ]
            }
        },
        "TimestampSigner.timestamp": {
            "name": "timestamp",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampSigner.sign": {
            "name": "sign",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TimestampSigner.unsign": {
            "name": "unsign",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "max_age": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/validators.py": {
        "validate_integer": {
            "name": "validate_integer",
            "location": 35,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "validate_ipv4_address": {
            "name": "validate_ipv4_address",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "validate_ipv6_address": {
            "name": "validate_ipv6_address",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "validate_ipv46_address": {
            "name": "validate_ipv46_address",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "ip_address_validators": {
            "name": "ip_address_validators",
            "location": 61,
            "return": [],
            "arguments": {
                "protocol": [
                    "Any"
                ],
                "unpack_ipv4": [
                    "Any"
                ]
            }
        },
        "int_list_validator": {
            "name": "int_list_validator",
            "location": 62,
            "return": [],
            "arguments": {
                "sep": [
                    "str"
                ],
                "message": [
                    "Optional[Any]"
                ],
                "code": [
                    "str"
                ],
                "allow_negative": [
                    "bool"
                ]
            }
        },
        "get_available_image_extensions": {
            "name": "get_available_image_extensions",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "validate_image_file_extension": {
            "name": "validate_image_file_extension",
            "location": 115,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "RegexValidator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "Optional[Any]"
                ],
                "message": [
                    "Optional[Any]"
                ],
                "code": [
                    "Optional[Any]"
                ],
                "inverse_match": [
                    "Optional[Any]"
                ],
                "flags": [
                    "Optional[Any]"
                ]
            }
        },
        "RegexValidator.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "RegexValidator.__eq__": {
            "name": "__eq__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "URLValidator.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schemes": [
                    "Optional[Any]"
                ]
            }
        },
        "URLValidator.__call__": {
            "name": "__call__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "EmailValidator.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[Any]"
                ],
                "code": [
                    "Optional[Any]"
                ],
                "whitelist": [
                    "Optional[Any]"
                ]
            }
        },
        "EmailValidator.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "EmailValidator.validate_domain_part": {
            "name": "validate_domain_part",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "domain_part": [
                    "Any"
                ]
            }
        },
        "EmailValidator.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "BaseValidator.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit_value": [
                    "Any"
                ],
                "message": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseValidator.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseValidator.__eq__": {
            "name": "__eq__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "BaseValidator.compare": {
            "name": "compare",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ]
            }
        },
        "BaseValidator.clean": {
            "name": "clean",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        },
        "MaxValueValidator.compare": {
            "name": "compare",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ]
            }
        },
        "MinValueValidator.compare": {
            "name": "compare",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ]
            }
        },
        "MinLengthValidator.compare": {
            "name": "compare",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ]
            }
        },
        "MinLengthValidator.clean": {
            "name": "clean",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        },
        "MaxLengthValidator.compare": {
            "name": "compare",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "Any"
                ],
                "b": [
                    "Any"
                ]
            }
        },
        "MaxLengthValidator.clean": {
            "name": "clean",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        },
        "DecimalValidator.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_digits": [
                    "Any"
                ],
                "decimal_places": [
                    "Any"
                ]
            }
        },
        "DecimalValidator.__call__": {
            "name": "__call__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalValidator.__eq__": {
            "name": "__eq__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "FileExtensionValidator.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_extensions": [
                    "Optional[Any]"
                ],
                "message": [
                    "Optional[Any]"
                ],
                "code": [
                    "Optional[Any]"
                ]
            }
        },
        "FileExtensionValidator.__call__": {
            "name": "__call__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FileExtensionValidator.__eq__": {
            "name": "__eq__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "ProhibitNullCharactersValidator.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[Any]"
                ],
                "code": [
                    "Optional[Any]"
                ]
            }
        },
        "ProhibitNullCharactersValidator.__call__": {
            "name": "__call__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ProhibitNullCharactersValidator.__eq__": {
            "name": "__eq__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/wsgi.py": {
        "get_wsgi_application": {
            "name": "get_wsgi_application",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/core/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/cache/utils.py": {
        "make_template_fragment_key": {
            "name": "make_template_fragment_key",
            "location": 9,
            "return": [],
            "arguments": {
                "fragment_name": [
                    "Any"
                ],
                "vary_on": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/__init__.py": {
        "CacheHandler.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheHandler.__getitem__": {
            "name": "__getitem__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "CacheHandler.all": {
            "name": "all",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultCacheProxy.__getattr__": {
            "name": "__getattr__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "DefaultCacheProxy.__setattr__": {
            "name": "__setattr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "DefaultCacheProxy.__delattr__": {
            "name": "__delattr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "DefaultCacheProxy.__contains__": {
            "name": "__contains__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "DefaultCacheProxy.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/backends/base.py": {
        "default_key_func": {
            "name": "default_key_func",
            "location": 14,
            "return": [],
            "arguments": {
                "key": [
                    "Any"
                ],
                "key_prefix": [
                    "Any"
                ],
                "version": [
                    "Any"
                ]
            }
        },
        "get_key_func": {
            "name": "get_key_func",
            "location": 15,
            "return": [],
            "arguments": {
                "key_func": [
                    "Any"
                ]
            }
        },
        "BaseCache.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Any"
                ]
            }
        },
        "BaseCache.get_backend_timeout": {
            "name": "get_backend_timeout",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Any"
                ]
            }
        },
        "BaseCache.make_key": {
            "name": "make_key",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.add": {
            "name": "add",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.get": {
            "name": "get",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.set": {
            "name": "set",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.touch": {
            "name": "touch",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.delete": {
            "name": "delete",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.get_many": {
            "name": "get_many",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.get_or_set": {
            "name": "get_or_set",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.has_key": {
            "name": "has_key",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.incr": {
            "name": "incr",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "delta": [
                    "int"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.decr": {
            "name": "decr",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "delta": [
                    "int"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.__contains__": {
            "name": "__contains__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "BaseCache.set_many": {
            "name": "set_many",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.delete_many": {
            "name": "delete_many",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.clear": {
            "name": "clear",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCache.validate_key": {
            "name": "validate_key",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "BaseCache.incr_version": {
            "name": "incr_version",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "delta": [
                    "int"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.decr_version": {
            "name": "decr_version",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "delta": [
                    "int"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCache.close": {
            "name": "close",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/backends/db.py": {
        "Options.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseCache.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "DatabaseCache.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseCache.set": {
            "name": "set",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseCache.add": {
            "name": "add",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseCache.touch": {
            "name": "touch",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseCache.delete": {
            "name": "delete",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseCache.has_key": {
            "name": "has_key",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseCache.clear": {
            "name": "clear",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/backends/dummy.py": {
        "DummyCache.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Any"
                ]
            }
        },
        "DummyCache.add": {
            "name": "add",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DummyCache.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DummyCache.set": {
            "name": "set",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DummyCache.touch": {
            "name": "touch",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DummyCache.delete": {
            "name": "delete",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DummyCache.has_key": {
            "name": "has_key",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "DummyCache.clear": {
            "name": "clear",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/backends/filebased.py": {
        "FileBasedCache.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "FileBasedCache.add": {
            "name": "add",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "FileBasedCache.get": {
            "name": "get",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "FileBasedCache.set": {
            "name": "set",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "FileBasedCache.touch": {
            "name": "touch",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "FileBasedCache.delete": {
            "name": "delete",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "FileBasedCache.has_key": {
            "name": "has_key",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "FileBasedCache.clear": {
            "name": "clear",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/backends/locmem.py": {
        "LocMemCache.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "LocMemCache.add": {
            "name": "add",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "LocMemCache.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "LocMemCache.set": {
            "name": "set",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "LocMemCache.touch": {
            "name": "touch",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "LocMemCache.incr": {
            "name": "incr",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "delta": [
                    "int"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "LocMemCache.has_key": {
            "name": "has_key",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "LocMemCache.delete": {
            "name": "delete",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "LocMemCache.clear": {
            "name": "clear",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/backends/memcached.py": {
        "BaseMemcachedCache.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "library": [
                    "Any"
                ],
                "value_not_found_exception": [
                    "Any"
                ]
            }
        },
        "BaseMemcachedCache.get_backend_timeout": {
            "name": "get_backend_timeout",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Any"
                ]
            }
        },
        "BaseMemcachedCache.add": {
            "name": "add",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.get": {
            "name": "get",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.set": {
            "name": "set",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.delete": {
            "name": "delete",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.get_many": {
            "name": "get_many",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.close": {
            "name": "close",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMemcachedCache.incr": {
            "name": "incr",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "delta": [
                    "int"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.decr": {
            "name": "decr",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "delta": [
                    "int"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.set_many": {
            "name": "set_many",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.delete_many": {
            "name": "delete_many",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseMemcachedCache.clear": {
            "name": "clear",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemcachedCache.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "MemcachedCache.touch": {
            "name": "touch",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "PyLibMCCache.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "PyLibMCCache.touch": {
            "name": "touch",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timeout": [
                    "Any"
                ],
                "version": [
                    "Optional[Any]"
                ]
            }
        },
        "PyLibMCCache.close": {
            "name": "close",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/cache/backends/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/checks/caches.py": {
        "check_default_cache_is_configured": {
            "name": "check_default_cache_is_configured",
            "location": 9,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/database.py": {
        "check_database_backends": {
            "name": "check_database_backends",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/messages.py": {
        "CheckMessage.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Any"
                ],
                "msg": [
                    "Any"
                ],
                "hint": [
                    "Optional[Any]"
                ],
                "obj": [
                    "Optional[Any]"
                ],
                "id": [
                    "Optional[Any]"
                ]
            }
        },
        "CheckMessage.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "CheckMessage.is_serious": {
            "name": "is_serious",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "Any"
                ]
            }
        },
        "CheckMessage.is_silenced": {
            "name": "is_silenced",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Debug.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Info.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Warning.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Critical.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/model_checks.py": {
        "check_all_models": {
            "name": "check_all_models",
            "location": 7,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Optional[Any]"
                ]
            }
        },
        "check_lazy_references": {
            "name": "check_lazy_references",
            "location": 8,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/registry.py": {
        "CheckRegistry.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckRegistry.register": {
            "name": "register",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "check": [
                    "Optional[Any]"
                ]
            }
        },
        "CheckRegistry.run_checks": {
            "name": "run_checks",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "app_configs": [
                    "Optional[Any]"
                ],
                "tags": [
                    "Optional[Any]"
                ],
                "include_deployment_checks": [
                    "bool"
                ]
            }
        },
        "CheckRegistry.tag_exists": {
            "name": "tag_exists",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [
                    "Any"
                ],
                "include_deployment_checks": [
                    "bool"
                ]
            }
        },
        "CheckRegistry.tags_available": {
            "name": "tags_available",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "deployment_checks": [
                    "bool"
                ]
            }
        },
        "CheckRegistry.get_checks": {
            "name": "get_checks",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "include_deployment_checks": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/templates.py": {
        "check_setting_app_dirs_loaders": {
            "name": "check_setting_app_dirs_loaders",
            "location": 10,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_string_if_invalid_is_string": {
            "name": "check_string_if_invalid_is_string",
            "location": 11,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/urls.py": {
        "check_url_config": {
            "name": "check_url_config",
            "location": 7,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_resolver": {
            "name": "check_resolver",
            "location": 8,
            "return": [],
            "arguments": {
                "resolver": [
                    "Any"
                ]
            }
        },
        "check_url_namespaces_unique": {
            "name": "check_url_namespaces_unique",
            "location": 9,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "get_warning_for_invalid_pattern": {
            "name": "get_warning_for_invalid_pattern",
            "location": 10,
            "return": [],
            "arguments": {
                "pattern": [
                    "Any"
                ]
            }
        },
        "check_url_settings": {
            "name": "check_url_settings",
            "location": 11,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "E006": {
            "name": "E006",
            "location": 12,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/checks/compatibility/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/checks/security/base.py": {
        "check_security_middleware": {
            "name": "check_security_middleware",
            "location": 22,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_xframe_options_middleware": {
            "name": "check_xframe_options_middleware",
            "location": 23,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_sts": {
            "name": "check_sts",
            "location": 24,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_sts_include_subdomains": {
            "name": "check_sts_include_subdomains",
            "location": 25,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_sts_preload": {
            "name": "check_sts_preload",
            "location": 26,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_content_type_nosniff": {
            "name": "check_content_type_nosniff",
            "location": 27,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_xss_filter": {
            "name": "check_xss_filter",
            "location": 28,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_ssl_redirect": {
            "name": "check_ssl_redirect",
            "location": 29,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_secret_key": {
            "name": "check_secret_key",
            "location": 30,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_debug": {
            "name": "check_debug",
            "location": 31,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_xframe_deny": {
            "name": "check_xframe_deny",
            "location": 32,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_allowed_hosts": {
            "name": "check_allowed_hosts",
            "location": 33,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/security/csrf.py": {
        "check_csrf_middleware": {
            "name": "check_csrf_middleware",
            "location": 10,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_csrf_cookie_secure": {
            "name": "check_csrf_cookie_secure",
            "location": 11,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/security/sessions.py": {
        "add_session_cookie_message": {
            "name": "add_session_cookie_message",
            "location": 7,
            "return": [],
            "arguments": {
                "message": [
                    "Any"
                ]
            }
        },
        "add_httponly_message": {
            "name": "add_httponly_message",
            "location": 13,
            "return": [],
            "arguments": {
                "message": [
                    "Any"
                ]
            }
        },
        "check_session_cookie_secure": {
            "name": "check_session_cookie_secure",
            "location": 19,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        },
        "check_session_cookie_httponly": {
            "name": "check_session_cookie_httponly",
            "location": 20,
            "return": [],
            "arguments": {
                "app_configs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/checks/security/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/files/base.py": {
        "endswith_cr": {
            "name": "endswith_cr",
            "location": 33,
            "return": [],
            "arguments": {
                "line": [
                    "Any"
                ]
            }
        },
        "endswith_lf": {
            "name": "endswith_lf",
            "location": 34,
            "return": [],
            "arguments": {
                "line": [
                    "Any"
                ]
            }
        },
        "equals_lf": {
            "name": "equals_lf",
            "location": 35,
            "return": [],
            "arguments": {
                "line": [
                    "Any"
                ]
            }
        },
        "File.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Any"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "File.__bool__": {
            "name": "__bool__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.__len__": {
            "name": "__len__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.size": {
            "name": "size",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.chunks": {
            "name": "chunks",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "Optional[Any]"
                ]
            }
        },
        "File.multiple_chunks": {
            "name": "multiple_chunks",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "Optional[Any]"
                ]
            }
        },
        "File.__iter__": {
            "name": "__iter__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__enter__": {
            "name": "__enter__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.__exit__": {
            "name": "__exit__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "tb": [
                    "Any"
                ]
            }
        },
        "File.open": {
            "name": "open",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "Optional[Any]"
                ]
            }
        },
        "File.close": {
            "name": "close",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentFile.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "ContentFile.__bool__": {
            "name": "__bool__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentFile.open": {
            "name": "open",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "Optional[Any]"
                ]
            }
        },
        "ContentFile.close": {
            "name": "close",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentFile.write": {
            "name": "write",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/images.py": {
        "get_image_dimensions": {
            "name": "get_image_dimensions",
            "location": 14,
            "return": [],
            "arguments": {
                "file_or_path": [
                    "Any"
                ],
                "close": [
                    "bool"
                ]
            }
        },
        "ImageFile.width": {
            "name": "width",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageFile.height": {
            "name": "height",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/locks.py": {
        "lock": {
            "name": "lock",
            "location": 19,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ],
                "flags": [
                    "Any"
                ]
            }
        },
        "unlock": {
            "name": "unlock",
            "location": 20,
            "return": [],
            "arguments": {
                "f": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/move.py": {
        "file_move_safe": {
            "name": "file_move_safe",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "old_file_name": [
                    "Any"
                ],
                "new_file_name": [
                    "Any"
                ],
                "chunk_size": [
                    "Any"
                ],
                "allow_overwrite": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/storage.py": {
        "Storage.open": {
            "name": "open",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "Storage.save": {
            "name": "save",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "content": [
                    "Any"
                ],
                "max_length": [
                    "Optional[Any]"
                ]
            }
        },
        "Storage.get_valid_name": {
            "name": "get_valid_name",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.get_available_name": {
            "name": "get_available_name",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "max_length": [
                    "Optional[Any]"
                ]
            }
        },
        "Storage.generate_filename": {
            "name": "generate_filename",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "Any"
                ]
            }
        },
        "Storage.path": {
            "name": "path",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.delete": {
            "name": "delete",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.exists": {
            "name": "exists",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.listdir": {
            "name": "listdir",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "Storage.size": {
            "name": "size",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.url": {
            "name": "url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.get_accessed_time": {
            "name": "get_accessed_time",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.get_created_time": {
            "name": "get_created_time",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Storage.get_modified_time": {
            "name": "get_modified_time",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "Optional[Any]"
                ],
                "base_url": [
                    "Optional[Any]"
                ],
                "file_permissions_mode": [
                    "Optional[Any]"
                ],
                "directory_permissions_mode": [
                    "Optional[Any]"
                ]
            }
        },
        "FileSystemStorage.base_location": {
            "name": "base_location",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileSystemStorage.location": {
            "name": "location",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileSystemStorage.base_url": {
            "name": "base_url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileSystemStorage.file_permissions_mode": {
            "name": "file_permissions_mode",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileSystemStorage.directory_permissions_mode": {
            "name": "directory_permissions_mode",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileSystemStorage.delete": {
            "name": "delete",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.exists": {
            "name": "exists",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.listdir": {
            "name": "listdir",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.path": {
            "name": "path",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.size": {
            "name": "size",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.url": {
            "name": "url",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.get_accessed_time": {
            "name": "get_accessed_time",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.get_created_time": {
            "name": "get_created_time",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "FileSystemStorage.get_modified_time": {
            "name": "get_modified_time",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/temp.py": {
        "TemporaryFile.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "bufsize": [
                    "int"
                ],
                "suffix": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "dir": [
                    "Optional[Any]"
                ]
            }
        },
        "TemporaryFile.close": {
            "name": "close",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFile.__del__": {
            "name": "__del__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFile.__enter__": {
            "name": "__enter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFile.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "tb": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/uploadedfile.py": {
        "UploadedFile.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "size": [
                    "Optional[Any]"
                ],
                "charset": [
                    "Optional[Any]"
                ],
                "content_type_extra": [
                    "Optional[Any]"
                ]
            }
        },
        "TemporaryUploadedFile.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "content_type": [
                    "Any"
                ],
                "size": [
                    "Any"
                ],
                "charset": [
                    "Any"
                ],
                "content_type_extra": [
                    "Optional[Any]"
                ]
            }
        },
        "TemporaryUploadedFile.temporary_file_path": {
            "name": "temporary_file_path",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryUploadedFile.close": {
            "name": "close",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InMemoryUploadedFile.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "content_type": [
                    "Any"
                ],
                "size": [
                    "Any"
                ],
                "charset": [
                    "Any"
                ],
                "content_type_extra": [
                    "Optional[Any]"
                ]
            }
        },
        "InMemoryUploadedFile.open": {
            "name": "open",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "Optional[Any]"
                ]
            }
        },
        "InMemoryUploadedFile.chunks": {
            "name": "chunks",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "Optional[Any]"
                ]
            }
        },
        "InMemoryUploadedFile.multiple_chunks": {
            "name": "multiple_chunks",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleUploadedFile.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "content": [
                    "Any"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "SimpleUploadedFile.from_dict": {
            "name": "from_dict",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "file_dict": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/uploadhandler.py": {
        "load_handler": {
            "name": "load_handler",
            "location": 46,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "StopUpload.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_reset": [
                    "bool"
                ]
            }
        },
        "FileUploadHandler.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[Any]"
                ]
            }
        },
        "FileUploadHandler.handle_raw_input": {
            "name": "handle_raw_input",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Any"
                ],
                "META": [
                    "Any"
                ],
                "content_length": [
                    "Any"
                ],
                "boundary": [
                    "Any"
                ],
                "encoding": [
                    "Optional[Any]"
                ]
            }
        },
        "FileUploadHandler.new_file": {
            "name": "new_file",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "file_name": [
                    "Any"
                ],
                "content_type": [
                    "Any"
                ],
                "content_length": [
                    "Any"
                ],
                "charset": [
                    "Optional[Any]"
                ],
                "content_type_extra": [
                    "Optional[Any]"
                ]
            }
        },
        "FileUploadHandler.receive_data_chunk": {
            "name": "receive_data_chunk",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "Any"
                ],
                "start": [
                    "Any"
                ]
            }
        },
        "FileUploadHandler.file_complete": {
            "name": "file_complete",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_size": [
                    "Any"
                ]
            }
        },
        "FileUploadHandler.upload_complete": {
            "name": "upload_complete",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileUploadHandler.new_file": {
            "name": "new_file",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileUploadHandler.receive_data_chunk": {
            "name": "receive_data_chunk",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "Any"
                ],
                "start": [
                    "Any"
                ]
            }
        },
        "TemporaryFileUploadHandler.file_complete": {
            "name": "file_complete",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "file_size": [
                    "Any"
                ]
            }
        },
        "MemoryFileUploadHandler.handle_raw_input": {
            "name": "handle_raw_input",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Any"
                ],
                "META": [
                    "Any"
                ],
                "content_length": [
                    "Any"
                ],
                "boundary": [
                    "Any"
                ],
                "encoding": [
                    "Optional[Any]"
                ]
            }
        },
        "MemoryFileUploadHandler.new_file": {
            "name": "new_file",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryFileUploadHandler.receive_data_chunk": {
            "name": "receive_data_chunk",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "raw_data": [
                    "Any"
                ],
                "start": [
                    "Any"
                ]
            }
        },
        "MemoryFileUploadHandler.file_complete": {
            "name": "file_complete",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "file_size": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/utils.py": {
        "FileProxyMixin.closed": {
            "name": "closed",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProxyMixin.readable": {
            "name": "readable",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProxyMixin.writable": {
            "name": "writable",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProxyMixin.seekable": {
            "name": "seekable",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileProxyMixin.__iter__": {
            "name": "__iter__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/files/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/handlers/base.py": {
        "BaseHandler.load_middleware": {
            "name": "load_middleware",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.make_view_atomic": {
            "name": "make_view_atomic",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "view": [
                    "Any"
                ]
            }
        },
        "BaseHandler.get_exception_response": {
            "name": "get_exception_response",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "resolver": [
                    "Any"
                ],
                "status_code": [
                    "Any"
                ],
                "exception": [
                    "Any"
                ]
            }
        },
        "BaseHandler.get_response": {
            "name": "get_response",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "BaseHandler.process_exception_by_middleware": {
            "name": "process_exception_by_middleware",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "exception": [
                    "Any"
                ],
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/handlers/exception.py": {
        "convert_exception_to_response": {
            "name": "convert_exception_to_response",
            "location": 7,
            "return": [],
            "arguments": {
                "get_response": [
                    "Any"
                ]
            }
        },
        "response_for_exception": {
            "name": "response_for_exception",
            "location": 8,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "exc": [
                    "Any"
                ]
            }
        },
        "get_exception_response": {
            "name": "get_exception_response",
            "location": 9,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "resolver": [
                    "Any"
                ],
                "status_code": [
                    "Any"
                ],
                "exception": [
                    "Any"
                ],
                "sender": [
                    "Optional[Any]"
                ]
            }
        },
        "handle_uncaught_exception": {
            "name": "handle_uncaught_exception",
            "location": 10,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "resolver": [
                    "Any"
                ],
                "exc_info": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/handlers/wsgi.py": {
        "get_path_info": {
            "name": "get_path_info",
            "location": 38,
            "return": [],
            "arguments": {
                "environ": [
                    "Any"
                ]
            }
        },
        "get_script_name": {
            "name": "get_script_name",
            "location": 39,
            "return": [],
            "arguments": {
                "environ": [
                    "Any"
                ]
            }
        },
        "get_bytes_from_wsgi": {
            "name": "get_bytes_from_wsgi",
            "location": 40,
            "return": [],
            "arguments": {
                "environ": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "get_str_from_wsgi": {
            "name": "get_str_from_wsgi",
            "location": 41,
            "return": [],
            "arguments": {
                "environ": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "LimitedStream.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ],
                "limit": [
                    "Any"
                ],
                "buf_size": [
                    "Any"
                ]
            }
        },
        "LimitedStream.read": {
            "name": "read",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "size": [
                    "Optional[Any]"
                ]
            }
        },
        "LimitedStream.readline": {
            "name": "readline",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "size": [
                    "Optional[Any]"
                ]
            }
        },
        "WSGIRequest.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Any"
                ]
            }
        },
        "WSGIRequest.GET": {
            "name": "GET",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WSGIRequest.COOKIES": {
            "name": "COOKIES",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WSGIRequest.FILES": {
            "name": "FILES",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WSGIHandler.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WSGIHandler.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "Any"
                ],
                "start_response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/handlers/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/mail/message.py": {
        "forbid_multi_line_headers": {
            "name": "forbid_multi_line_headers",
            "location": 19,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "val": [
                    "Any"
                ],
                "encoding": [
                    "Any"
                ]
            }
        },
        "split_addr": {
            "name": "split_addr",
            "location": 20,
            "return": [],
            "arguments": {
                "addr": [
                    "Any"
                ],
                "encoding": [
                    "Any"
                ]
            }
        },
        "sanitize_address": {
            "name": "sanitize_address",
            "location": 21,
            "return": [],
            "arguments": {
                "addr": [
                    "Any"
                ],
                "encoding": [
                    "Any"
                ]
            }
        },
        "MIMEMixin.as_string": {
            "name": "as_string",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "unixfrom": [
                    "bool"
                ],
                "linesep": [
                    "str"
                ]
            }
        },
        "MIMEMixin.as_bytes": {
            "name": "as_bytes",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "unixfrom": [
                    "bool"
                ],
                "linesep": [
                    "str"
                ]
            }
        },
        "SafeMIMEMessage.__setitem__": {
            "name": "__setitem__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "val": [
                    "Any"
                ]
            }
        },
        "SafeMIMEText.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_text": [
                    "Any"
                ],
                "_subtype": [
                    "str"
                ],
                "_charset": [
                    "Optional[Any]"
                ]
            }
        },
        "SafeMIMEText.__setitem__": {
            "name": "__setitem__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "val": [
                    "Any"
                ]
            }
        },
        "SafeMIMEText.set_payload": {
            "name": "set_payload",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Any"
                ],
                "charset": [
                    "Optional[Any]"
                ]
            }
        },
        "SafeMIMEMultipart.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_subtype": [
                    "str"
                ],
                "boundary": [
                    "Optional[Any]"
                ],
                "_subparts": [
                    "Optional[Any]"
                ],
                "encoding": [
                    "Optional[Any]"
                ]
            }
        },
        "SafeMIMEMultipart.__setitem__": {
            "name": "__setitem__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "val": [
                    "Any"
                ]
            }
        },
        "EmailMessage.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "body": [
                    "str"
                ],
                "from_email": [
                    "Optional[Any]"
                ],
                "to": [
                    "Optional[Any]"
                ],
                "bcc": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ],
                "attachments": [
                    "Optional[Any]"
                ],
                "headers": [
                    "Optional[Any]"
                ],
                "cc": [
                    "Optional[Any]"
                ],
                "reply_to": [
                    "Optional[Any]"
                ]
            }
        },
        "EmailMessage.get_connection": {
            "name": "get_connection",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "EmailMessage.message": {
            "name": "message",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailMessage.recipients": {
            "name": "recipients",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailMessage.send": {
            "name": "send",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "EmailMessage.attach": {
            "name": "attach",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[Any]"
                ],
                "content": [
                    "Optional[Any]"
                ],
                "mimetype": [
                    "Optional[Any]"
                ]
            }
        },
        "EmailMessage.attach_file": {
            "name": "attach_file",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "mimetype": [
                    "Optional[Any]"
                ]
            }
        },
        "EmailMultiAlternatives.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "body": [
                    "str"
                ],
                "from_email": [
                    "Optional[Any]"
                ],
                "to": [
                    "Optional[Any]"
                ],
                "bcc": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ],
                "attachments": [
                    "Optional[Any]"
                ],
                "headers": [
                    "Optional[Any]"
                ],
                "alternatives": [
                    "Optional[Any]"
                ],
                "cc": [
                    "Optional[Any]"
                ],
                "reply_to": [
                    "Optional[Any]"
                ]
            }
        },
        "EmailMultiAlternatives.attach_alternative": {
            "name": "attach_alternative",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ],
                "mimetype": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/utils.py": {
        "CachedDnsName.get_fqdn": {
            "name": "get_fqdn",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/__init__.py": {
        "get_connection": {
            "name": "get_connection",
            "location": 9,
            "return": [],
            "arguments": {
                "backend": [
                    "Optional[Any]"
                ],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "send_mail": {
            "name": "send_mail",
            "location": 10,
            "return": [],
            "arguments": {
                "subject": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "from_email": [
                    "Any"
                ],
                "recipient_list": [
                    "Any"
                ],
                "fail_silently": [
                    "bool"
                ],
                "auth_user": [
                    "Optional[Any]"
                ],
                "auth_password": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ],
                "html_message": [
                    "Optional[Any]"
                ]
            }
        },
        "send_mass_mail": {
            "name": "send_mass_mail",
            "location": 11,
            "return": [],
            "arguments": {
                "datatuple": [
                    "Any"
                ],
                "fail_silently": [
                    "bool"
                ],
                "auth_user": [
                    "Optional[Any]"
                ],
                "auth_password": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ]
            }
        },
        "mail_admins": {
            "name": "mail_admins",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "fail_silently": [
                    "bool"
                ],
                "connection": [
                    "Optional[Any]"
                ],
                "html_message": [
                    "Optional[Any]"
                ]
            }
        },
        "mail_managers": {
            "name": "mail_managers",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [
                    "Any"
                ],
                "message": [
                    "Any"
                ],
                "fail_silently": [
                    "bool"
                ],
                "connection": [
                    "Optional[Any]"
                ],
                "html_message": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/backends/base.py": {
        "BaseEmailBackend.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fail_silently": [
                    "bool"
                ]
            }
        },
        "BaseEmailBackend.open": {
            "name": "open",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEmailBackend.close": {
            "name": "close",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEmailBackend.__enter__": {
            "name": "__enter__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEmailBackend.__exit__": {
            "name": "__exit__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "BaseEmailBackend.send_messages": {
            "name": "send_messages",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_messages": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/backends/console.py": {
        "EmailBackend.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailBackend.write_message": {
            "name": "write_message",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ]
            }
        },
        "EmailBackend.send_messages": {
            "name": "send_messages",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "email_messages": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/backends/dummy.py": {
        "EmailBackend.send_messages": {
            "name": "send_messages",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "email_messages": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/backends/filebased.py": {
        "EmailBackend.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailBackend.write_message": {
            "name": "write_message",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ]
            }
        },
        "EmailBackend.open": {
            "name": "open",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailBackend.close": {
            "name": "close",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/backends/locmem.py": {
        "EmailBackend.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailBackend.send_messages": {
            "name": "send_messages",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "messages": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/backends/smtp.py": {
        "EmailBackend.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Optional[Any]"
                ],
                "port": [
                    "Optional[Any]"
                ],
                "username": [
                    "Optional[Any]"
                ],
                "password": [
                    "Optional[Any]"
                ],
                "use_tls": [
                    "Optional[Any]"
                ],
                "fail_silently": [
                    "bool"
                ],
                "use_ssl": [
                    "Optional[Any]"
                ],
                "timeout": [
                    "Optional[Any]"
                ],
                "ssl_keyfile": [
                    "Optional[Any]"
                ],
                "ssl_certfile": [
                    "Optional[Any]"
                ]
            }
        },
        "EmailBackend.connection_class": {
            "name": "connection_class",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailBackend.open": {
            "name": "open",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailBackend.close": {
            "name": "close",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailBackend.send_messages": {
            "name": "send_messages",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "email_messages": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/mail/backends/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/core/management/base.py": {
        "handle_default_options": {
            "name": "handle_default_options",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "Any"
                ]
            }
        },
        "no_translations": {
            "name": "no_translations",
            "location": 20,
            "return": [],
            "arguments": {
                "handle_func": [
                    "Any"
                ]
            }
        },
        "CommandParser.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandParser.parse_args": {
            "name": "parse_args",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "args": [
                    "Optional[Any]"
                ],
                "namespace": [
                    "Optional[Any]"
                ]
            }
        },
        "CommandParser.error": {
            "name": "error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ]
            }
        },
        "DjangoHelpFormatter.add_usage": {
            "name": "add_usage",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "usage": [
                    "Any"
                ],
                "actions": [
                    "Any"
                ]
            }
        },
        "DjangoHelpFormatter.add_arguments": {
            "name": "add_arguments",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "Any"
                ]
            }
        },
        "OutputWrapper.style_func": {
            "name": "style_func",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "style_func": [
                    "Any"
                ]
            }
        },
        "OutputWrapper.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "Any"
                ],
                "style_func": [
                    "Optional[Any]"
                ],
                "ending": [
                    "str"
                ]
            }
        },
        "OutputWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "OutputWrapper.isatty": {
            "name": "isatty",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputWrapper.write": {
            "name": "write",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Any"
                ],
                "style_func": [
                    "Optional[Any]"
                ],
                "ending": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseCommand.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "Optional[Any]"
                ],
                "stderr": [
                    "Optional[Any]"
                ],
                "no_color": [
                    "bool"
                ]
            }
        },
        "BaseCommand.get_version": {
            "name": "get_version",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCommand.create_parser": {
            "name": "create_parser",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "prog_name": [
                    "Any"
                ],
                "subcommand": [
                    "Any"
                ]
            }
        },
        "BaseCommand.add_arguments": {
            "name": "add_arguments",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "BaseCommand.print_help": {
            "name": "print_help",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prog_name": [
                    "Any"
                ],
                "subcommand": [
                    "Any"
                ]
            }
        },
        "BaseCommand.run_from_argv": {
            "name": "run_from_argv",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "argv": [
                    "Any"
                ]
            }
        },
        "BaseCommand.execute": {
            "name": "execute",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCommand.check": {
            "name": "check",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "app_configs": [
                    "Optional[Any]"
                ],
                "tags": [
                    "Optional[Any]"
                ],
                "display_num_errors": [
                    "bool"
                ],
                "include_deployment_checks": [
                    "bool"
                ],
                "fail_level": [
                    "Any"
                ]
            }
        },
        "BaseCommand.check_migrations": {
            "name": "check_migrations",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCommand.handle": {
            "name": "handle",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppCommand.add_arguments": {
            "name": "add_arguments",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "AppCommand.handle": {
            "name": "handle",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppCommand.handle_app_config": {
            "name": "handle_app_config",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_config": [
                    "Any"
                ]
            }
        },
        "LabelCommand.add_arguments": {
            "name": "add_arguments",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "LabelCommand.handle": {
            "name": "handle",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelCommand.handle_label": {
            "name": "handle_label",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/management/color.py": {
        "supports_color": {
            "name": "supports_color",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "make_style": {
            "name": "make_style",
            "location": 9,
            "return": [],
            "arguments": {
                "config_string": [
                    "str"
                ]
            }
        },
        "no_style": {
            "name": "no_style",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "color_style": {
            "name": "color_style",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/core/management/sql.py": {
        "sql_flush": {
            "name": "sql_flush",
            "location": 7,
            "return": [],
            "arguments": {
                "style": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "only_django": [
                    "bool"
                ],
                "reset_sequences": [
                    "bool"
                ],
                "allow_cascade": [
                    "bool"
                ]
            }
        },
        "emit_pre_migrate_signal": {
            "name": "emit_pre_migrate_signal",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "verbosity": [
                    "Any"
                ],
                "interactive": [
                    "Any"
                ],
                "db": [
                    "Any"
                ]
            }
        },
        "emit_post_migrate_signal": {
            "name": "emit_post_migrate_signal",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "verbosity": [
                    "Any"
                ],
                "interactive": [
                    "Any"
                ],
                "db": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/management/templates.py": {
        "TemplateCommand.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "TemplateCommand.handle": {
            "name": "handle",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "app_or_project": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "target": [
                    "Optional[Any]"
                ]
            }
        },
        "TemplateCommand.handle_template": {
            "name": "handle_template",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ],
                "subdir": [
                    "Any"
                ]
            }
        },
        "TemplateCommand.validate_name": {
            "name": "validate_name",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "app_or_project": [
                    "Any"
                ]
            }
        },
        "TemplateCommand.download": {
            "name": "download",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "Any"
                ]
            }
        },
        "TemplateCommand.splitext": {
            "name": "splitext",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "the_path": [
                    "Any"
                ]
            }
        },
        "TemplateCommand.extract": {
            "name": "extract",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "Any"
                ]
            }
        },
        "TemplateCommand.is_url": {
            "name": "is_url",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ]
            }
        },
        "TemplateCommand.make_writeable": {
            "name": "make_writeable",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/management/utils.py": {
        "popen_wrapper": {
            "name": "popen_wrapper",
            "location": 8,
            "return": [],
            "arguments": {
                "args": [
                    "Any"
                ],
                "stdout_encoding": [
                    "str"
                ]
            }
        },
        "handle_extensions": {
            "name": "handle_extensions",
            "location": 9,
            "return": [],
            "arguments": {
                "extensions": [
                    "Any"
                ]
            }
        },
        "find_command": {
            "name": "find_command",
            "location": 10,
            "return": [],
            "arguments": {
                "cmd": [
                    "Any"
                ],
                "path": [
                    "Optional[Any]"
                ],
                "pathext": [
                    "Optional[Any]"
                ]
            }
        },
        "get_random_secret_key": {
            "name": "get_random_secret_key",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "parse_apps_and_model_labels": {
            "name": "parse_apps_and_model_labels",
            "location": 12,
            "return": [],
            "arguments": {
                "labels": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/management/__init__.py": {
        "find_commands": {
            "name": "find_commands",
            "location": 7,
            "return": [],
            "arguments": {
                "management_dir": [
                    "Any"
                ]
            }
        },
        "load_command_class": {
            "name": "load_command_class",
            "location": 8,
            "return": [],
            "arguments": {
                "app_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "get_commands": {
            "name": "get_commands",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "call_command": {
            "name": "call_command",
            "location": 10,
            "return": [],
            "arguments": {
                "command_name": [
                    "Any"
                ]
            }
        },
        "execute_from_command_line": {
            "name": "execute_from_command_line",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "Optional[Any]"
                ]
            }
        },
        "ManagementUtility.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "Optional[Any]"
                ]
            }
        },
        "ManagementUtility.main_help_text": {
            "name": "main_help_text",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "commands_only": [
                    "bool"
                ]
            }
        },
        "ManagementUtility.fetch_command": {
            "name": "fetch_command",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "subcommand": [
                    "Any"
                ]
            }
        },
        "ManagementUtility.autocomplete": {
            "name": "autocomplete",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagementUtility.execute": {
            "name": "execute",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/serializers/base.py": {
        "build_instance": {
            "name": "build_instance",
            "location": 60,
            "return": [],
            "arguments": {
                "Model": [
                    "Any"
                ],
                "data": [
                    "Any"
                ],
                "db": [
                    "Any"
                ]
            }
        },
        "deserialize_m2m_values": {
            "name": "deserialize_m2m_values",
            "location": 61,
            "return": [],
            "arguments": {
                "field": [
                    "Any"
                ],
                "field_value": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "deserialize_fk_value": {
            "name": "deserialize_fk_value",
            "location": 62,
            "return": [],
            "arguments": {
                "field": [
                    "Any"
                ],
                "field_value": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "DeserializationError.WithData": {
            "name": "WithData",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "original_exc": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "fk": [
                    "Any"
                ],
                "field_value": [
                    "Any"
                ]
            }
        },
        "M2MDeserializationError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original_exc": [
                    "Any"
                ],
                "pk": [
                    "Any"
                ]
            }
        },
        "ProgressBar.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "Any"
                ],
                "total_count": [
                    "Any"
                ]
            }
        },
        "ProgressBar.update": {
            "name": "update",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "Any"
                ]
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "Any"
                ]
            }
        },
        "Serializer.start_serialization": {
            "name": "start_serialization",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.end_serialization": {
            "name": "end_serialization",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.start_object": {
            "name": "start_object",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.end_object": {
            "name": "end_object",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_field": {
            "name": "handle_field",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_fk_field": {
            "name": "handle_fk_field",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_m2m_field": {
            "name": "handle_m2m_field",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.getvalue": {
            "name": "getvalue",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deserializer.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_or_string": [
                    "Any"
                ]
            }
        },
        "Deserializer.__iter__": {
            "name": "__iter__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deserializer.__next__": {
            "name": "__next__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeserializedObject.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "m2m_data": [
                    "Optional[Any]"
                ]
            }
        },
        "DeserializedObject.save": {
            "name": "save",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save_m2m": [
                    "bool"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/serializers/json.py": {
        "Deserializer": {
            "name": "Deserializer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "stream_or_string": [
                    "Any"
                ]
            }
        },
        "Serializer.start_serialization": {
            "name": "start_serialization",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.end_serialization": {
            "name": "end_serialization",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.end_object": {
            "name": "end_object",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.getvalue": {
            "name": "getvalue",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DjangoJSONEncoder.default": {
            "name": "default",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/serializers/python.py": {
        "Deserializer": {
            "name": "Deserializer",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "object_list": [
                    "Any"
                ]
            }
        },
        "Serializer.start_serialization": {
            "name": "start_serialization",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.end_serialization": {
            "name": "end_serialization",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.start_object": {
            "name": "start_object",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.end_object": {
            "name": "end_object",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.get_dump_object": {
            "name": "get_dump_object",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_field": {
            "name": "handle_field",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_fk_field": {
            "name": "handle_fk_field",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_m2m_field": {
            "name": "handle_m2m_field",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.getvalue": {
            "name": "getvalue",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/serializers/xml_serializer.py": {
        "getInnerText": {
            "name": "getInnerText",
            "location": 27,
            "return": [],
            "arguments": {
                "node": [
                    "Any"
                ]
            }
        },
        "Serializer.indent": {
            "name": "indent",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Any"
                ]
            }
        },
        "Serializer.start_serialization": {
            "name": "start_serialization",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.end_serialization": {
            "name": "end_serialization",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.start_object": {
            "name": "start_object",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.end_object": {
            "name": "end_object",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_field": {
            "name": "handle_field",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_fk_field": {
            "name": "handle_fk_field",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Serializer.handle_m2m_field": {
            "name": "handle_m2m_field",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Deserializer.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_or_string": [
                    "Any"
                ]
            }
        },
        "Deserializer.__next__": {
            "name": "__next__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefusedExpatParser.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefusedExpatParser.start_doctype_decl": {
            "name": "start_doctype_decl",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "sysid": [
                    "Any"
                ],
                "pubid": [
                    "Any"
                ],
                "has_internal_subset": [
                    "Any"
                ]
            }
        },
        "DefusedExpatParser.entity_decl": {
            "name": "entity_decl",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "is_parameter_entity": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "base": [
                    "Any"
                ],
                "sysid": [
                    "Any"
                ],
                "pubid": [
                    "Any"
                ],
                "notation_name": [
                    "Any"
                ]
            }
        },
        "DefusedExpatParser.unparsed_entity_decl": {
            "name": "unparsed_entity_decl",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "base": [
                    "Any"
                ],
                "sysid": [
                    "Any"
                ],
                "pubid": [
                    "Any"
                ],
                "notation_name": [
                    "Any"
                ]
            }
        },
        "DefusedExpatParser.external_entity_ref_handler": {
            "name": "external_entity_ref_handler",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ],
                "base": [
                    "Any"
                ],
                "sysid": [
                    "Any"
                ],
                "pubid": [
                    "Any"
                ]
            }
        },
        "DefusedExpatParser.reset": {
            "name": "reset",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DTDForbidden.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "sysid": [
                    "Any"
                ],
                "pubid": [
                    "Any"
                ]
            }
        },
        "EntitiesForbidden.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "base": [
                    "Any"
                ],
                "sysid": [
                    "Any"
                ],
                "pubid": [
                    "Any"
                ],
                "notation_name": [
                    "Any"
                ]
            }
        },
        "ExternalReferenceForbidden.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ],
                "base": [
                    "Any"
                ],
                "sysid": [
                    "Any"
                ],
                "pubid": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/serializers/__init__.py": {
        "register_serializer": {
            "name": "register_serializer",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "format": [
                    "Any"
                ],
                "serializer_module": [
                    "Any"
                ],
                "serializers": [
                    "Optional[Any]"
                ]
            }
        },
        "unregister_serializer": {
            "name": "unregister_serializer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "format": [
                    "Any"
                ]
            }
        },
        "get_serializer": {
            "name": "get_serializer",
            "location": 17,
            "return": [],
            "arguments": {
                "format": [
                    "Any"
                ]
            }
        },
        "get_serializer_formats": {
            "name": "get_serializer_formats",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "get_public_serializer_formats": {
            "name": "get_public_serializer_formats",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "get_deserializer": {
            "name": "get_deserializer",
            "location": 20,
            "return": [],
            "arguments": {
                "format": [
                    "Any"
                ]
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 21,
            "return": [],
            "arguments": {
                "format": [
                    "Any"
                ],
                "queryset": [
                    "Any"
                ]
            }
        },
        "deserialize": {
            "name": "deserialize",
            "location": 22,
            "return": [],
            "arguments": {
                "format": [
                    "Any"
                ],
                "stream_or_string": [
                    "Any"
                ]
            }
        },
        "sort_dependencies": {
            "name": "sort_dependencies",
            "location": 23,
            "return": [],
            "arguments": {
                "app_list": [
                    "Any"
                ]
            }
        },
        "BadSerializer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "Any"
                ]
            }
        },
        "BadSerializer.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/servers/basehttp.py": {
        "WSGIServer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WSGIServer.handle_error": {
            "name": "handle_error",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "client_address": [
                    "Any"
                ]
            }
        },
        "ServerHandler.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdin": [
                    "Any"
                ],
                "stdout": [
                    "Any"
                ],
                "stderr": [
                    "Any"
                ],
                "environ": [
                    "Any"
                ]
            }
        },
        "ServerHandler.cleanup_headers": {
            "name": "cleanup_headers",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerHandler.close": {
            "name": "close",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerHandler.handle_error": {
            "name": "handle_error",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WSGIRequestHandler.address_string": {
            "name": "address_string",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WSGIRequestHandler.log_message": {
            "name": "log_message",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "Any"
                ]
            }
        },
        "WSGIRequestHandler.get_environ": {
            "name": "get_environ",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WSGIRequestHandler.handle": {
            "name": "handle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WSGIRequestHandler.handle_one_request": {
            "name": "handle_one_request",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/core/servers/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/transaction.py": {
        "get_connection": {
            "name": "get_connection",
            "location": 11,
            "return": [],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "get_autocommit": {
            "name": "get_autocommit",
            "location": 12,
            "return": [],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "set_autocommit": {
            "name": "set_autocommit",
            "location": 13,
            "return": [],
            "arguments": {
                "autocommit": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "commit": {
            "name": "commit",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "rollback": {
            "name": "rollback",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "savepoint": {
            "name": "savepoint",
            "location": 16,
            "return": [],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "savepoint_rollback": {
            "name": "savepoint_rollback",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "sid": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "savepoint_commit": {
            "name": "savepoint_commit",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "sid": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "clean_savepoints": {
            "name": "clean_savepoints",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "get_rollback": {
            "name": "get_rollback",
            "location": 20,
            "return": [],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "set_rollback": {
            "name": "set_rollback",
            "location": 21,
            "return": [],
            "arguments": {
                "rollback": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "on_commit": {
            "name": "on_commit",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "atomic": {
            "name": "atomic",
            "location": 31,
            "return": [],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ],
                "savepoint": [
                    "bool"
                ]
            }
        },
        "non_atomic_requests": {
            "name": "non_atomic_requests",
            "location": 32,
            "return": [],
            "arguments": {
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "Atomic.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ],
                "savepoint": [
                    "Any"
                ]
            }
        },
        "Atomic.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atomic.__exit__": {
            "name": "__exit__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/utils.py": {
        "load_backend": {
            "name": "load_backend",
            "location": 27,
            "return": [],
            "arguments": {
                "backend_name": [
                    "Any"
                ]
            }
        },
        "DatabaseErrorWrapper.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapper": [
                    "Any"
                ]
            }
        },
        "DatabaseErrorWrapper.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseErrorWrapper.__exit__": {
            "name": "__exit__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "DatabaseErrorWrapper.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ]
            }
        },
        "ConnectionHandler.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "databases": [
                    "Optional[Any]"
                ]
            }
        },
        "ConnectionHandler.databases": {
            "name": "databases",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionHandler.ensure_defaults": {
            "name": "ensure_defaults",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "ConnectionHandler.prepare_test_settings": {
            "name": "prepare_test_settings",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "ConnectionHandler.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "ConnectionHandler.__setitem__": {
            "name": "__setitem__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ConnectionHandler.__delitem__": {
            "name": "__delitem__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "ConnectionHandler.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionHandler.all": {
            "name": "all",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionHandler.close_all": {
            "name": "close_all",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionRouter.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routers": [
                    "Optional[Any]"
                ]
            }
        },
        "ConnectionRouter.routers": {
            "name": "routers",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionRouter.allow_relation": {
            "name": "allow_relation",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "obj1": [
                    "Any"
                ],
                "obj2": [
                    "Any"
                ]
            }
        },
        "ConnectionRouter.allow_migrate": {
            "name": "allow_migrate",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "db": [
                    "Any"
                ],
                "app_label": [
                    "Any"
                ]
            }
        },
        "ConnectionRouter.allow_migrate_model": {
            "name": "allow_migrate_model",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "db": [
                    "Any"
                ],
                "model": [
                    "Any"
                ]
            }
        },
        "ConnectionRouter.get_migratable_models": {
            "name": "get_migratable_models",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "app_config": [
                    "Any"
                ],
                "db": [
                    "Any"
                ],
                "include_auto_created": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/__init__.py": {
        "DefaultConnectionProxy.__getattr__": {
            "name": "__getattr__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "DefaultConnectionProxy.__setattr__": {
            "name": "__setattr__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "DefaultConnectionProxy.__delattr__": {
            "name": "__delattr__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "DefaultConnectionProxy.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/ddl_references.py": {
        "Reference.references_table": {
            "name": "references_table",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ]
            }
        },
        "Reference.references_column": {
            "name": "references_column",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "column": [
                    "Any"
                ]
            }
        },
        "Reference.rename_table_references": {
            "name": "rename_table_references",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_table": [
                    "Any"
                ],
                "new_table": [
                    "Any"
                ]
            }
        },
        "Reference.rename_column_references": {
            "name": "rename_column_references",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "old_column": [
                    "Any"
                ],
                "new_column": [
                    "Any"
                ]
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "quote_name": [
                    "Any"
                ]
            }
        },
        "Table.references_table": {
            "name": "references_table",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ]
            }
        },
        "Table.rename_table_references": {
            "name": "rename_table_references",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_table": [
                    "Any"
                ],
                "new_table": [
                    "Any"
                ]
            }
        },
        "TableColumns.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ]
            }
        },
        "TableColumns.references_column": {
            "name": "references_column",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "column": [
                    "Any"
                ]
            }
        },
        "TableColumns.rename_column_references": {
            "name": "rename_column_references",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "old_column": [
                    "Any"
                ],
                "new_column": [
                    "Any"
                ]
            }
        },
        "Columns.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "quote_name": [
                    "Any"
                ],
                "col_suffixes": [
                    "Any"
                ]
            }
        },
        "IndexName.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "suffix": [
                    "Any"
                ],
                "create_index_name": [
                    "Any"
                ]
            }
        },
        "ForeignKeyName.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_table": [
                    "Any"
                ],
                "from_columns": [
                    "Any"
                ],
                "to_table": [
                    "Any"
                ],
                "to_columns": [
                    "Any"
                ],
                "suffix_template": [
                    "Any"
                ],
                "create_fk_name": [
                    "Any"
                ]
            }
        },
        "ForeignKeyName.references_table": {
            "name": "references_table",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ]
            }
        },
        "ForeignKeyName.references_column": {
            "name": "references_column",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "column": [
                    "Any"
                ]
            }
        },
        "ForeignKeyName.rename_table_references": {
            "name": "rename_table_references",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_table": [
                    "Any"
                ],
                "new_table": [
                    "Any"
                ]
            }
        },
        "ForeignKeyName.rename_column_references": {
            "name": "rename_column_references",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "old_column": [
                    "Any"
                ],
                "new_column": [
                    "Any"
                ]
            }
        },
        "Statement.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ]
            }
        },
        "Statement.references_table": {
            "name": "references_table",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ]
            }
        },
        "Statement.references_column": {
            "name": "references_column",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "column": [
                    "Any"
                ]
            }
        },
        "Statement.rename_table_references": {
            "name": "rename_table_references",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_table": [
                    "Any"
                ],
                "new_table": [
                    "Any"
                ]
            }
        },
        "Statement.rename_column_references": {
            "name": "rename_column_references",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "old_column": [
                    "Any"
                ],
                "new_column": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/signals.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/utils.py": {
        "typecast_date": {
            "name": "typecast_date",
            "location": 26,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "typecast_time": {
            "name": "typecast_time",
            "location": 27,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "typecast_timestamp": {
            "name": "typecast_timestamp",
            "location": 28,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "rev_typecast_decimal": {
            "name": "rev_typecast_decimal",
            "location": 29,
            "return": [],
            "arguments": {
                "d": [
                    "Any"
                ]
            }
        },
        "split_identifier": {
            "name": "split_identifier",
            "location": 30,
            "return": [],
            "arguments": {
                "identifier": [
                    "Any"
                ]
            }
        },
        "truncate_name": {
            "name": "truncate_name",
            "location": 31,
            "return": [],
            "arguments": {
                "identifier": [
                    "Any"
                ],
                "length": [
                    "Optional[Any]"
                ],
                "hash_len": [
                    "int"
                ]
            }
        },
        "format_number": {
            "name": "format_number",
            "location": 32,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "max_digits": [
                    "Any"
                ],
                "decimal_places": [
                    "Any"
                ]
            }
        },
        "strip_quotes": {
            "name": "strip_quotes",
            "location": 33,
            "return": [],
            "arguments": {
                "table_name": [
                    "Any"
                ]
            }
        },
        "CursorWrapper.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "db": [
                    "Any"
                ]
            }
        },
        "CursorWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "Any"
                ]
            }
        },
        "CursorWrapper.__iter__": {
            "name": "__iter__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CursorWrapper.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CursorWrapper.__exit__": {
            "name": "__exit__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "CursorWrapper.callproc": {
            "name": "callproc",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "procname": [
                    "Any"
                ],
                "params": [
                    "Optional[Any]"
                ],
                "kparams": [
                    "Optional[Any]"
                ]
            }
        },
        "CursorWrapper.execute": {
            "name": "execute",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Optional[Any]"
                ]
            }
        },
        "CursorWrapper.executemany": {
            "name": "executemany",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "param_list": [
                    "Any"
                ]
            }
        },
        "CursorDebugWrapper.execute": {
            "name": "execute",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Optional[Any]"
                ]
            }
        },
        "CursorDebugWrapper.executemany": {
            "name": "executemany",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "param_list": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/base/base.py": {
        "BaseDatabaseWrapper.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_dict": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ],
                "allow_thread_sharing": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseWrapper.ensure_timezone": {
            "name": "ensure_timezone",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.timezone": {
            "name": "timezone",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.timezone_name": {
            "name": "timezone_name",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.queries_logged": {
            "name": "queries_logged",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.queries": {
            "name": "queries",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.get_connection_params": {
            "name": "get_connection_params",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.get_new_connection": {
            "name": "get_new_connection",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn_params": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.init_connection_state": {
            "name": "init_connection_state",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.create_cursor": {
            "name": "create_cursor",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseDatabaseWrapper.connect": {
            "name": "connect",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.check_settings": {
            "name": "check_settings",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.ensure_connection": {
            "name": "ensure_connection",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.cursor": {
            "name": "cursor",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.commit": {
            "name": "commit",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.rollback": {
            "name": "rollback",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.close": {
            "name": "close",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.savepoint": {
            "name": "savepoint",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.savepoint_rollback": {
            "name": "savepoint_rollback",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sid": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.savepoint_commit": {
            "name": "savepoint_commit",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sid": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.clean_savepoints": {
            "name": "clean_savepoints",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.get_autocommit": {
            "name": "get_autocommit",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.set_autocommit": {
            "name": "set_autocommit",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "autocommit": [
                    "Any"
                ],
                "force_begin_transaction_with_broken_autocommit": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseWrapper.get_rollback": {
            "name": "get_rollback",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.set_rollback": {
            "name": "set_rollback",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rollback": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.validate_no_atomic_block": {
            "name": "validate_no_atomic_block",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.validate_no_broken_transaction": {
            "name": "validate_no_broken_transaction",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.constraint_checks_disabled": {
            "name": "constraint_checks_disabled",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.disable_constraint_checking": {
            "name": "disable_constraint_checking",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.enable_constraint_checking": {
            "name": "enable_constraint_checking",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.check_constraints": {
            "name": "check_constraints",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_names": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseDatabaseWrapper.is_usable": {
            "name": "is_usable",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.close_if_unusable_or_obsolete": {
            "name": "close_if_unusable_or_obsolete",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.validate_thread_sharing": {
            "name": "validate_thread_sharing",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.prepare_database": {
            "name": "prepare_database",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.wrap_database_errors": {
            "name": "wrap_database_errors",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.chunked_cursor": {
            "name": "chunked_cursor",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.make_debug_cursor": {
            "name": "make_debug_cursor",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.make_cursor": {
            "name": "make_cursor",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.temporary_connection": {
            "name": "temporary_connection",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.schema_editor": {
            "name": "schema_editor",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.on_commit": {
            "name": "on_commit",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.run_and_clear_commit_hooks": {
            "name": "run_and_clear_commit_hooks",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseWrapper.execute_wrapper": {
            "name": "execute_wrapper",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapper": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseWrapper.copy": {
            "name": "copy",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Optional[Any]"
                ],
                "allow_thread_sharing": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/client.py": {
        "BaseDatabaseClient.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseClient.runshell": {
            "name": "runshell",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/creation.py": {
        "BaseDatabaseCreation.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseCreation.create_test_db": {
            "name": "create_test_db",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "verbosity": [
                    "int"
                ],
                "autoclobber": [
                    "bool"
                ],
                "serialize": [
                    "bool"
                ],
                "keepdb": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseCreation.set_as_test_mirror": {
            "name": "set_as_test_mirror",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "primary_settings_dict": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseCreation.serialize_db_to_string": {
            "name": "serialize_db_to_string",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseCreation.deserialize_db_from_string": {
            "name": "deserialize_db_from_string",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseCreation.clone_test_db": {
            "name": "clone_test_db",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "Any"
                ],
                "verbosity": [
                    "int"
                ],
                "autoclobber": [
                    "bool"
                ],
                "keepdb": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseCreation.get_test_db_clone_settings": {
            "name": "get_test_db_clone_settings",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseCreation.destroy_test_db": {
            "name": "destroy_test_db",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_database_name": [
                    "Optional[Any]"
                ],
                "verbosity": [
                    "int"
                ],
                "keepdb": [
                    "bool"
                ],
                "suffix": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseDatabaseCreation.sql_table_creation_suffix": {
            "name": "sql_table_creation_suffix",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseCreation.test_db_signature": {
            "name": "test_db_signature",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/features.py": {
        "BaseDatabaseFeatures.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseFeatures.supports_explaining_query_execution": {
            "name": "supports_explaining_query_execution",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseFeatures.supports_transactions": {
            "name": "supports_transactions",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseFeatures.supports_stddev": {
            "name": "supports_stddev",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/introspection.py": {
        "BaseDatabaseIntrospection.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.get_field_type": {
            "name": "get_field_type",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": [
                    "Any"
                ],
                "description": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.table_name_converter": {
            "name": "table_name_converter",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.column_name_converter": {
            "name": "column_name_converter",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.table_names": {
            "name": "table_names",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Optional[Any]"
                ],
                "include_views": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseIntrospection.get_table_list": {
            "name": "get_table_list",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.django_table_names": {
            "name": "django_table_names",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "only_existing": [
                    "bool"
                ],
                "include_views": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseIntrospection.installed_models": {
            "name": "installed_models",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "tables": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.sequence_list": {
            "name": "sequence_list",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseIntrospection.get_sequences": {
            "name": "get_sequences",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ],
                "table_fields": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.get_key_columns": {
            "name": "get_key_columns",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.get_primary_key_column": {
            "name": "get_primary_key_column",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseIntrospection.get_constraints": {
            "name": "get_constraints",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/operations.py": {
        "BaseDatabaseOperations.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.autoinc_sql": {
            "name": "autoinc_sql",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "column": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.bulk_batch_size": {
            "name": "bulk_batch_size",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "objs": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.cache_key_culling_sql": {
            "name": "cache_key_culling_sql",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.unification_cast_sql": {
            "name": "unification_cast_sql",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "output_field": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.date_extract_sql": {
            "name": "date_extract_sql",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.date_interval_sql": {
            "name": "date_interval_sql",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timedelta": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.date_trunc_sql": {
            "name": "date_trunc_sql",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.datetime_cast_date_sql": {
            "name": "datetime_cast_date_sql",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.datetime_cast_time_sql": {
            "name": "datetime_cast_time_sql",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.datetime_extract_sql": {
            "name": "datetime_extract_sql",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.datetime_trunc_sql": {
            "name": "datetime_trunc_sql",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.time_trunc_sql": {
            "name": "time_trunc_sql",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.time_extract_sql": {
            "name": "time_extract_sql",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.deferrable_sql": {
            "name": "deferrable_sql",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.distinct_sql": {
            "name": "distinct_sql",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.fetch_returned_insert_id": {
            "name": "fetch_returned_insert_id",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.field_cast_sql": {
            "name": "field_cast_sql",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "db_type": [
                    "Any"
                ],
                "internal_type": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.force_no_ordering": {
            "name": "force_no_ordering",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.for_update_sql": {
            "name": "for_update_sql",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "nowait": [
                    "bool"
                ],
                "skip_locked": [
                    "bool"
                ],
                "of": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.limit_offset_sql": {
            "name": "limit_offset_sql",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "low_mark": [
                    "Any"
                ],
                "high_mark": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.last_executed_query": {
            "name": "last_executed_query",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.last_insert_id": {
            "name": "last_insert_id",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ],
                "pk_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.lookup_cast": {
            "name": "lookup_cast",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "internal_type": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseDatabaseOperations.max_in_list_size": {
            "name": "max_in_list_size",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.max_name_length": {
            "name": "max_name_length",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.no_limit_value": {
            "name": "no_limit_value",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.pk_default_value": {
            "name": "pk_default_value",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.prepare_sql_script": {
            "name": "prepare_sql_script",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.process_clob": {
            "name": "process_clob",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.return_insert_id": {
            "name": "return_insert_id",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.compiler": {
            "name": "compiler",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "compiler_name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.quote_name": {
            "name": "quote_name",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.random_function_sql": {
            "name": "random_function_sql",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.regex_lookup": {
            "name": "regex_lookup",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.savepoint_create_sql": {
            "name": "savepoint_create_sql",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "sid": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.savepoint_commit_sql": {
            "name": "savepoint_commit_sql",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "sid": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.savepoint_rollback_sql": {
            "name": "savepoint_rollback_sql",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "sid": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.set_time_zone_sql": {
            "name": "set_time_zone_sql",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.sql_flush": {
            "name": "sql_flush",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "tables": [
                    "Any"
                ],
                "sequences": [
                    "Any"
                ],
                "allow_cascade": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseOperations.execute_sql_flush": {
            "name": "execute_sql_flush",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ],
                "sql_list": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.sequence_reset_by_name_sql": {
            "name": "sequence_reset_by_name_sql",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "sequences": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.sequence_reset_sql": {
            "name": "sequence_reset_sql",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "model_list": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.start_transaction_sql": {
            "name": "start_transaction_sql",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseOperations.end_transaction_sql": {
            "name": "end_transaction_sql",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "success": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseOperations.tablespace_sql": {
            "name": "tablespace_sql",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "tablespace": [
                    "Any"
                ],
                "inline": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseOperations.prep_for_like_query": {
            "name": "prep_for_like_query",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.validate_autopk_value": {
            "name": "validate_autopk_value",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.adapt_unknown_value": {
            "name": "adapt_unknown_value",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.adapt_datefield_value": {
            "name": "adapt_datefield_value",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.adapt_datetimefield_value": {
            "name": "adapt_datetimefield_value",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.adapt_timefield_value": {
            "name": "adapt_timefield_value",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.adapt_decimalfield_value": {
            "name": "adapt_decimalfield_value",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "max_digits": [
                    "Optional[Any]"
                ],
                "decimal_places": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseDatabaseOperations.adapt_ipaddressfield_value": {
            "name": "adapt_ipaddressfield_value",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.year_lookup_bounds_for_date_field": {
            "name": "year_lookup_bounds_for_date_field",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.year_lookup_bounds_for_datetime_field": {
            "name": "year_lookup_bounds_for_datetime_field",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.get_db_converters": {
            "name": "get_db_converters",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.convert_durationfield_value": {
            "name": "convert_durationfield_value",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.check_expression_support": {
            "name": "check_expression_support",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.combine_expression": {
            "name": "combine_expression",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "connector": [
                    "Any"
                ],
                "sub_expressions": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.combine_duration_expression": {
            "name": "combine_duration_expression",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "connector": [
                    "Any"
                ],
                "sub_expressions": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.binary_placeholder_sql": {
            "name": "binary_placeholder_sql",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.modify_insert_params": {
            "name": "modify_insert_params",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "placeholder": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.integer_field_range": {
            "name": "integer_field_range",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "internal_type": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.subtract_temporals": {
            "name": "subtract_temporals",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "internal_type": [
                    "Any"
                ],
                "lhs": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.window_frame_start": {
            "name": "window_frame_start",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.window_frame_end": {
            "name": "window_frame_end",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "end": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseOperations.window_frame_rows_start_end": {
            "name": "window_frame_rows_start_end",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[Any]"
                ],
                "end": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseDatabaseOperations.window_frame_range_start_end": {
            "name": "window_frame_range_start_end",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[Any]"
                ],
                "end": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseDatabaseOperations.explain_query_prefix": {
            "name": "explain_query_prefix",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "format": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/schema.py": {
        "BaseDatabaseSchemaEditor.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "collect_sql": [
                    "bool"
                ],
                "atomic": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.__enter__": {
            "name": "__enter__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseSchemaEditor.__exit__": {
            "name": "__exit__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.execute": {
            "name": "execute",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.quote_name": {
            "name": "quote_name",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.column_sql": {
            "name": "column_sql",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "include_default": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.skip_default": {
            "name": "skip_default",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.prepare_default": {
            "name": "prepare_default",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.effective_default": {
            "name": "effective_default",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.quote_value": {
            "name": "quote_value",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.create_model": {
            "name": "create_model",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.delete_model": {
            "name": "delete_model",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.add_index": {
            "name": "add_index",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.remove_index": {
            "name": "remove_index",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.alter_unique_together": {
            "name": "alter_unique_together",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_unique_together": [
                    "Any"
                ],
                "new_unique_together": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.alter_index_together": {
            "name": "alter_index_together",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_index_together": [
                    "Any"
                ],
                "new_index_together": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.alter_db_table": {
            "name": "alter_db_table",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_db_table": [
                    "Any"
                ],
                "new_db_table": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.alter_db_tablespace": {
            "name": "alter_db_tablespace",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_db_tablespace": [
                    "Any"
                ],
                "new_db_tablespace": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.add_field": {
            "name": "add_field",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.remove_field": {
            "name": "remove_field",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.alter_field": {
            "name": "alter_field",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_field": [
                    "Any"
                ],
                "new_field": [
                    "Any"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "BaseDatabaseSchemaEditor.remove_procedure": {
            "name": "remove_procedure",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "procedure_name": [
                    "Any"
                ],
                "param_types": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/validation.py": {
        "BaseDatabaseValidation.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseDatabaseValidation.check": {
            "name": "check",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabaseValidation.check_field": {
            "name": "check_field",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/base/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/dummy/base.py": {
        "complain": {
            "name": "complain",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ignore": {
            "name": "ignore",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DatabaseWrapper.is_usable": {
            "name": "is_usable",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/dummy/features.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/dummy/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/client.py": {
        "DatabaseClient.settings_to_cmd_args": {
            "name": "settings_to_cmd_args",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "settings_dict": [
                    "Any"
                ]
            }
        },
        "DatabaseClient.runshell": {
            "name": "runshell",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/compiler.py": {
        "SQLCompiler.as_subquery_condition": {
            "name": "as_subquery_condition",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "compiler": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/creation.py": {
        "DatabaseCreation.sql_table_creation_suffix": {
            "name": "sql_table_creation_suffix",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/features.py": {
        "DatabaseFeatures.can_introspect_foreign_keys": {
            "name": "can_introspect_foreign_keys",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.has_zoneinfo_database": {
            "name": "has_zoneinfo_database",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.is_sql_auto_is_null_enabled": {
            "name": "is_sql_auto_is_null_enabled",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.supports_over_clause": {
            "name": "supports_over_clause",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.has_select_for_update_skip_locked": {
            "name": "has_select_for_update_skip_locked",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.needs_explain_extended": {
            "name": "needs_explain_extended",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.supports_transactions": {
            "name": "supports_transactions",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.ignores_table_name_case": {
            "name": "ignores_table_name_case",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/operations.py": {
        "DatabaseOperations.date_extract_sql": {
            "name": "date_extract_sql",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.date_trunc_sql": {
            "name": "date_trunc_sql",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_cast_date_sql": {
            "name": "datetime_cast_date_sql",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_cast_time_sql": {
            "name": "datetime_cast_time_sql",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_extract_sql": {
            "name": "datetime_extract_sql",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_trunc_sql": {
            "name": "datetime_trunc_sql",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.time_trunc_sql": {
            "name": "time_trunc_sql",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.date_interval_sql": {
            "name": "date_interval_sql",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "timedelta": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.format_for_duration_arithmetic": {
            "name": "format_for_duration_arithmetic",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.force_no_ordering": {
            "name": "force_no_ordering",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.last_executed_query": {
            "name": "last_executed_query",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.no_limit_value": {
            "name": "no_limit_value",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.quote_name": {
            "name": "quote_name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.random_function_sql": {
            "name": "random_function_sql",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.sql_flush": {
            "name": "sql_flush",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "tables": [
                    "Any"
                ],
                "sequences": [
                    "Any"
                ],
                "allow_cascade": [
                    "bool"
                ]
            }
        },
        "DatabaseOperations.validate_autopk_value": {
            "name": "validate_autopk_value",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_datetimefield_value": {
            "name": "adapt_datetimefield_value",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_timefield_value": {
            "name": "adapt_timefield_value",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.max_name_length": {
            "name": "max_name_length",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.bulk_insert_sql": {
            "name": "bulk_insert_sql",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "placeholder_rows": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.combine_expression": {
            "name": "combine_expression",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "connector": [
                    "Any"
                ],
                "sub_expressions": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.get_db_converters": {
            "name": "get_db_converters",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_textfield_value": {
            "name": "convert_textfield_value",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_booleanfield_value": {
            "name": "convert_booleanfield_value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_datetimefield_value": {
            "name": "convert_datetimefield_value",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_uuidfield_value": {
            "name": "convert_uuidfield_value",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.binary_placeholder_sql": {
            "name": "binary_placeholder_sql",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.subtract_temporals": {
            "name": "subtract_temporals",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "internal_type": [
                    "Any"
                ],
                "lhs": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.explain_query_prefix": {
            "name": "explain_query_prefix",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "format": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseOperations.regex_lookup": {
            "name": "regex_lookup",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/schema.py": {
        "DatabaseSchemaEditor.quote_value": {
            "name": "quote_value",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.skip_default": {
            "name": "skip_default",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.add_field": {
            "name": "add_field",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/validation.py": {
        "DatabaseValidation.check": {
            "name": "check",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseValidation.check_field_type": {
            "name": "check_field_type",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "field_type": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/mysql/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/client.py": {
        "DatabaseClient.runshell": {
            "name": "runshell",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/compiler.py": {
        "SQLCompiler.as_sql": {
            "name": "as_sql",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "with_limits": [
                    "bool"
                ],
                "with_col_aliases": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/creation.py": {
        "DatabaseCreation.set_as_test_mirror": {
            "name": "set_as_test_mirror",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "primary_settings_dict": [
                    "Any"
                ]
            }
        },
        "DatabaseCreation.test_db_signature": {
            "name": "test_db_signature",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/features.py": {
        "DatabaseFeatures.has_fetch_offset_support": {
            "name": "has_fetch_offset_support",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseFeatures.allow_sliced_subqueries_with_in": {
            "name": "allow_sliced_subqueries_with_in",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/functions.py": {
        "IntervalToSeconds.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        },
        "SecondsToInterval.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/schema.py": {
        "DatabaseSchemaEditor.quote_value": {
            "name": "quote_value",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.remove_field": {
            "name": "remove_field",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.delete_model": {
            "name": "delete_model",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.alter_field": {
            "name": "alter_field",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_field": [
                    "Any"
                ],
                "new_field": [
                    "Any"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "DatabaseSchemaEditor.normalize_name": {
            "name": "normalize_name",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.prepare_default": {
            "name": "prepare_default",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/validation.py": {
        "DatabaseValidation.check_field_type": {
            "name": "check_field_type",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "field_type": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/oracle/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/base.py": {
        "psycopg2_version": {
            "name": "psycopg2_version",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "DatabaseWrapper.get_connection_params": {
            "name": "get_connection_params",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.get_new_connection": {
            "name": "get_new_connection",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "conn_params": [
                    "Any"
                ]
            }
        },
        "DatabaseWrapper.ensure_timezone": {
            "name": "ensure_timezone",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.init_connection_state": {
            "name": "init_connection_state",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.create_cursor": {
            "name": "create_cursor",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseWrapper.chunked_cursor": {
            "name": "chunked_cursor",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.check_constraints": {
            "name": "check_constraints",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_names": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseWrapper.is_usable": {
            "name": "is_usable",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.pg_version": {
            "name": "pg_version",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/client.py": {
        "DatabaseClient.runshell_db": {
            "name": "runshell_db",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "conn_params": [
                    "Any"
                ]
            }
        },
        "DatabaseClient.runshell": {
            "name": "runshell",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/creation.py": {
        "DatabaseCreation.sql_table_creation_suffix": {
            "name": "sql_table_creation_suffix",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/features.py": {
        "DatabaseFeatures.is_postgresql_9_5": {
            "name": "is_postgresql_9_5",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/introspection.py": {
        "DatabaseIntrospection.get_field_type": {
            "name": "get_field_type",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": [
                    "Any"
                ],
                "description": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_table_list": {
            "name": "get_table_list",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_table_description": {
            "name": "get_table_description",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_sequences": {
            "name": "get_sequences",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ],
                "table_fields": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_relations": {
            "name": "get_relations",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_key_columns": {
            "name": "get_key_columns",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_constraints": {
            "name": "get_constraints",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/operations.py": {
        "DatabaseOperations.unification_cast_sql": {
            "name": "unification_cast_sql",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "output_field": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.date_extract_sql": {
            "name": "date_extract_sql",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.date_trunc_sql": {
            "name": "date_trunc_sql",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_cast_date_sql": {
            "name": "datetime_cast_date_sql",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_cast_time_sql": {
            "name": "datetime_cast_time_sql",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_extract_sql": {
            "name": "datetime_extract_sql",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_trunc_sql": {
            "name": "datetime_trunc_sql",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.time_trunc_sql": {
            "name": "time_trunc_sql",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.deferrable_sql": {
            "name": "deferrable_sql",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.fetch_returned_insert_ids": {
            "name": "fetch_returned_insert_ids",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.lookup_cast": {
            "name": "lookup_cast",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "internal_type": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseOperations.no_limit_value": {
            "name": "no_limit_value",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.prepare_sql_script": {
            "name": "prepare_sql_script",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.quote_name": {
            "name": "quote_name",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.set_time_zone_sql": {
            "name": "set_time_zone_sql",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.sql_flush": {
            "name": "sql_flush",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "tables": [
                    "Any"
                ],
                "sequences": [
                    "Any"
                ],
                "allow_cascade": [
                    "bool"
                ]
            }
        },
        "DatabaseOperations.sequence_reset_by_name_sql": {
            "name": "sequence_reset_by_name_sql",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "sequences": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.tablespace_sql": {
            "name": "tablespace_sql",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "tablespace": [
                    "Any"
                ],
                "inline": [
                    "bool"
                ]
            }
        },
        "DatabaseOperations.sequence_reset_sql": {
            "name": "sequence_reset_sql",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "model_list": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.prep_for_iexact_query": {
            "name": "prep_for_iexact_query",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.max_name_length": {
            "name": "max_name_length",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.distinct_sql": {
            "name": "distinct_sql",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.last_executed_query": {
            "name": "last_executed_query",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.return_insert_id": {
            "name": "return_insert_id",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.bulk_insert_sql": {
            "name": "bulk_insert_sql",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "placeholder_rows": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_datefield_value": {
            "name": "adapt_datefield_value",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_datetimefield_value": {
            "name": "adapt_datetimefield_value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_timefield_value": {
            "name": "adapt_timefield_value",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_ipaddressfield_value": {
            "name": "adapt_ipaddressfield_value",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.subtract_temporals": {
            "name": "subtract_temporals",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "internal_type": [
                    "Any"
                ],
                "lhs": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.window_frame_range_start_end": {
            "name": "window_frame_range_start_end",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[Any]"
                ],
                "end": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseOperations.explain_query_prefix": {
            "name": "explain_query_prefix",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "format": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/schema.py": {
        "DatabaseSchemaEditor.quote_value": {
            "name": "quote_value",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/utils.py": {
        "utc_tzinfo_factory": {
            "name": "utc_tzinfo_factory",
            "location": 7,
            "return": [],
            "arguments": {
                "offset": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/base.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/client.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/creation.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/features.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/introspection.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/operations.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/schema.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/utils.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/postgresql_psycopg2/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/base.py": {
        "decoder": {
            "name": "decoder",
            "location": 15,
            "return": [],
            "arguments": {
                "conv_func": [
                    "Any"
                ]
            }
        },
        "DatabaseWrapper.get_connection_params": {
            "name": "get_connection_params",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.get_new_connection": {
            "name": "get_new_connection",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "conn_params": [
                    "Any"
                ]
            }
        },
        "DatabaseWrapper.init_connection_state": {
            "name": "init_connection_state",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.create_cursor": {
            "name": "create_cursor",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseWrapper.close": {
            "name": "close",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.disable_constraint_checking": {
            "name": "disable_constraint_checking",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.enable_constraint_checking": {
            "name": "enable_constraint_checking",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.check_constraints": {
            "name": "check_constraints",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_names": [
                    "Optional[Any]"
                ]
            }
        },
        "DatabaseWrapper.is_usable": {
            "name": "is_usable",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWrapper.is_in_memory_db": {
            "name": "is_in_memory_db",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLiteCursorWrapper.execute": {
            "name": "execute",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ],
                "params": [
                    "Optional[Any]"
                ]
            }
        },
        "SQLiteCursorWrapper.executemany": {
            "name": "executemany",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ],
                "param_list": [
                    "Any"
                ]
            }
        },
        "SQLiteCursorWrapper.convert_query": {
            "name": "convert_query",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/client.py": {
        "DatabaseClient.runshell": {
            "name": "runshell",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/creation.py": {
        "DatabaseCreation.is_in_memory_db": {
            "name": "is_in_memory_db",
            "location": 10,
            "return": [],
            "arguments": {
                "database_name": [
                    "Any"
                ]
            }
        },
        "DatabaseCreation.get_test_db_clone_settings": {
            "name": "get_test_db_clone_settings",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": [
                    "Any"
                ]
            }
        },
        "DatabaseCreation.test_db_signature": {
            "name": "test_db_signature",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/features.py": {
        "DatabaseFeatures.supports_stddev": {
            "name": "supports_stddev",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/introspection.py": {
        "get_field_size": {
            "name": "get_field_size",
            "location": 10,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ]
            }
        },
        "FlexibleFieldLookupDict.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_table_list": {
            "name": "get_table_list",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_table_description": {
            "name": "get_table_description",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_sequences": {
            "name": "get_sequences",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ],
                "table_fields": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_relations": {
            "name": "get_relations",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_key_columns": {
            "name": "get_key_columns",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_primary_key_column": {
            "name": "get_primary_key_column",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        },
        "DatabaseIntrospection.get_constraints": {
            "name": "get_constraints",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "table_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/operations.py": {
        "DatabaseOperations.bulk_batch_size": {
            "name": "bulk_batch_size",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "objs": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.check_expression_support": {
            "name": "check_expression_support",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.date_extract_sql": {
            "name": "date_extract_sql",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.date_interval_sql": {
            "name": "date_interval_sql",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "timedelta": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.format_for_duration_arithmetic": {
            "name": "format_for_duration_arithmetic",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.date_trunc_sql": {
            "name": "date_trunc_sql",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.time_trunc_sql": {
            "name": "time_trunc_sql",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_cast_date_sql": {
            "name": "datetime_cast_date_sql",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_cast_time_sql": {
            "name": "datetime_cast_time_sql",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_extract_sql": {
            "name": "datetime_extract_sql",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.datetime_trunc_sql": {
            "name": "datetime_trunc_sql",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "tzname": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.time_extract_sql": {
            "name": "time_extract_sql",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.pk_default_value": {
            "name": "pk_default_value",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.last_executed_query": {
            "name": "last_executed_query",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [
                    "Any"
                ],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.quote_name": {
            "name": "quote_name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.no_limit_value": {
            "name": "no_limit_value",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseOperations.sql_flush": {
            "name": "sql_flush",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "style": [
                    "Any"
                ],
                "tables": [
                    "Any"
                ],
                "sequences": [
                    "Any"
                ],
                "allow_cascade": [
                    "bool"
                ]
            }
        },
        "DatabaseOperations.execute_sql_flush": {
            "name": "execute_sql_flush",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ],
                "sql_list": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_datetimefield_value": {
            "name": "adapt_datetimefield_value",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.adapt_timefield_value": {
            "name": "adapt_timefield_value",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.get_db_converters": {
            "name": "get_db_converters",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_datetimefield_value": {
            "name": "convert_datetimefield_value",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_datefield_value": {
            "name": "convert_datefield_value",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_timefield_value": {
            "name": "convert_timefield_value",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.get_decimalfield_converter": {
            "name": "get_decimalfield_converter",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_uuidfield_value": {
            "name": "convert_uuidfield_value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.convert_booleanfield_value": {
            "name": "convert_booleanfield_value",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.bulk_insert_sql": {
            "name": "bulk_insert_sql",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "placeholder_rows": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.combine_expression": {
            "name": "combine_expression",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "connector": [
                    "Any"
                ],
                "sub_expressions": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.combine_duration_expression": {
            "name": "combine_duration_expression",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "connector": [
                    "Any"
                ],
                "sub_expressions": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.integer_field_range": {
            "name": "integer_field_range",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "internal_type": [
                    "Any"
                ]
            }
        },
        "DatabaseOperations.subtract_temporals": {
            "name": "subtract_temporals",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "internal_type": [
                    "Any"
                ],
                "lhs": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/schema.py": {
        "DatabaseSchemaEditor.__enter__": {
            "name": "__enter__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseSchemaEditor.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.quote_value": {
            "name": "quote_value",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.alter_db_table": {
            "name": "alter_db_table",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_db_table": [
                    "Any"
                ],
                "new_db_table": [
                    "Any"
                ],
                "disable_constraints": [
                    "bool"
                ]
            }
        },
        "DatabaseSchemaEditor.alter_field": {
            "name": "alter_field",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "old_field": [
                    "Any"
                ],
                "new_field": [
                    "Any"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "DatabaseSchemaEditor.delete_model": {
            "name": "delete_model",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "handle_autom2m": [
                    "bool"
                ]
            }
        },
        "DatabaseSchemaEditor.add_field": {
            "name": "add_field",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "DatabaseSchemaEditor.remove_field": {
            "name": "remove_field",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/backends/sqlite3/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/migrations/exceptions.py": {
        "NodeNotFoundError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ],
                "node": [
                    "Any"
                ],
                "origin": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/graph.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Node.__lt__": {
            "name": "__lt__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__getitem__": {
            "name": "__getitem__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Node.add_child": {
            "name": "add_child",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Any"
                ]
            }
        },
        "Node.add_parent": {
            "name": "add_parent",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Any"
                ]
            }
        },
        "Node.ancestors": {
            "name": "ancestors",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.descendants": {
            "name": "descendants",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyNode.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "origin": [
                    "Any"
                ],
                "error_message": [
                    "Any"
                ]
            }
        },
        "DummyNode.promote": {
            "name": "promote",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyNode.raise_error": {
            "name": "raise_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationGraph.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationGraph.add_node": {
            "name": "add_node",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "migration": [
                    "Any"
                ]
            }
        },
        "MigrationGraph.add_dummy_node": {
            "name": "add_dummy_node",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "origin": [
                    "Any"
                ],
                "error_message": [
                    "Any"
                ]
            }
        },
        "MigrationGraph.add_dependency": {
            "name": "add_dependency",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migration": [
                    "Any"
                ],
                "child": [
                    "Any"
                ],
                "parent": [
                    "Any"
                ],
                "skip_validation": [
                    "bool"
                ]
            }
        },
        "MigrationGraph.remove_replaced_nodes": {
            "name": "remove_replaced_nodes",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacement": [
                    "Any"
                ],
                "replaced": [
                    "Any"
                ]
            }
        },
        "MigrationGraph.remove_replacement_node": {
            "name": "remove_replacement_node",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacement": [
                    "Any"
                ],
                "replaced": [
                    "Any"
                ]
            }
        },
        "MigrationGraph.validate_consistency": {
            "name": "validate_consistency",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationGraph.clear_cache": {
            "name": "clear_cache",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationGraph.forwards_plan": {
            "name": "forwards_plan",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ]
            }
        },
        "MigrationGraph.backwards_plan": {
            "name": "backwards_plan",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ]
            }
        },
        "MigrationGraph.iterative_dfs": {
            "name": "iterative_dfs",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "forwards": [
                    "bool"
                ]
            }
        },
        "MigrationGraph.root_nodes": {
            "name": "root_nodes",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[Any]"
                ]
            }
        },
        "MigrationGraph.leaf_nodes": {
            "name": "leaf_nodes",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[Any]"
                ]
            }
        },
        "MigrationGraph.ensure_not_cyclic": {
            "name": "ensure_not_cyclic",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "get_children": [
                    "Any"
                ]
            }
        },
        "MigrationGraph.make_state": {
            "name": "make_state",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [
                    "Optional[Any]"
                ],
                "at_end": [
                    "bool"
                ],
                "real_apps": [
                    "Optional[Any]"
                ]
            }
        },
        "MigrationGraph.__contains__": {
            "name": "__contains__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/migration.py": {
        "swappable_dependency": {
            "name": "swappable_dependency",
            "location": 28,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "Migration.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Any"
                ]
            }
        },
        "Migration.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Migration.__hash__": {
            "name": "__hash__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Migration.mutate_state": {
            "name": "mutate_state",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "project_state": [
                    "Any"
                ],
                "preserve": [
                    "bool"
                ]
            }
        },
        "Migration.apply": {
            "name": "apply",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "project_state": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "collect_sql": [
                    "bool"
                ]
            }
        },
        "Migration.unapply": {
            "name": "unapply",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "project_state": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "collect_sql": [
                    "bool"
                ]
            }
        },
        "SwappableTuple.__new__": {
            "name": "__new__",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [
                    "Any"
                ],
                "setting": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/optimizer.py": {
        "MigrationOptimizer.optimize": {
            "name": "optimize",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "operations": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "MigrationOptimizer.optimize_inner": {
            "name": "optimize_inner",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "operations": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/serializer.py": {
        "serializer_factory": {
            "name": "serializer_factory",
            "location": 85,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "BaseSerializer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseSerializer.serialize": {
            "name": "serialize",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSequenceSerializer.serialize": {
            "name": "serialize",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSimpleSerializer.serialize": {
            "name": "serialize",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeSerializer.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateSerializer.serialize": {
            "name": "serialize",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalSerializer.serialize": {
            "name": "serialize",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeconstructableSerializer.serialize_deconstructed": {
            "name": "serialize_deconstructed",
            "location": 30,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ]
            }
        },
        "DeconstructableSerializer.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictionarySerializer.serialize": {
            "name": "serialize",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumSerializer.serialize": {
            "name": "serialize",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FloatSerializer.serialize": {
            "name": "serialize",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeSerializer.serialize": {
            "name": "serialize",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctoolsPartialSerializer.serialize": {
            "name": "serialize",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IterableSerializer.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelFieldSerializer.serialize": {
            "name": "serialize",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelManagerSerializer.serialize": {
            "name": "serialize",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OperationSerializer.serialize": {
            "name": "serialize",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegexSerializer.serialize": {
            "name": "serialize",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsReferenceSerializer.serialize": {
            "name": "serialize",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimedeltaSerializer.serialize": {
            "name": "serialize",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeSerializer.serialize": {
            "name": "serialize",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeSerializer.serialize": {
            "name": "serialize",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UUIDSerializer.serialize": {
            "name": "serialize",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/state.py": {},
    "django-graphql-master/mypy_stubs/django/db/migrations/topological_sort.py": {
        "topological_sort_as_sets": {
            "name": "topological_sort_as_sets",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "dependency_graph": [
                    "Any"
                ]
            }
        },
        "stable_topological_sort": {
            "name": "stable_topological_sort",
            "location": 8,
            "return": [],
            "arguments": {
                "l": [
                    "Any"
                ],
                "dependency_graph": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/utils.py": {
        "get_migration_name_timestamp": {
            "name": "get_migration_name_timestamp",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "RegexObject.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "RegexObject.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/migrations/operations/base.py": {
        "Operation.__new__": {
            "name": "__new__",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Operation.deconstruct": {
            "name": "deconstruct",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.state_forwards": {
            "name": "state_forwards",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "Operation.database_forwards": {
            "name": "database_forwards",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "Operation.database_backwards": {
            "name": "database_backwards",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "Operation.describe": {
            "name": "describe",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.references_model": {
            "name": "references_model",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "Operation.references_field": {
            "name": "references_field",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "Operation.allow_migrate_model": {
            "name": "allow_migrate_model",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "connection_alias": [
                    "Any"
                ],
                "model": [
                    "Any"
                ]
            }
        },
        "Operation.reduce": {
            "name": "reduce",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/operations/fields.py": {
        "FieldOperation.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "FieldOperation.model_name_lower": {
            "name": "model_name_lower",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldOperation.name_lower": {
            "name": "name_lower",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldOperation.is_same_model_operation": {
            "name": "is_same_model_operation",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ]
            }
        },
        "FieldOperation.is_same_field_operation": {
            "name": "is_same_field_operation",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ]
            }
        },
        "FieldOperation.references_model": {
            "name": "references_model",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "FieldOperation.references_field": {
            "name": "references_field",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "FieldOperation.reduce": {
            "name": "reduce",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "AddField.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "preserve_default": [
                    "bool"
                ]
            }
        },
        "AddField.deconstruct": {
            "name": "deconstruct",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddField.state_forwards": {
            "name": "state_forwards",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AddField.database_forwards": {
            "name": "database_forwards",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AddField.database_backwards": {
            "name": "database_backwards",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AddField.describe": {
            "name": "describe",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddField.reduce": {
            "name": "reduce",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "RemoveField.deconstruct": {
            "name": "deconstruct",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoveField.state_forwards": {
            "name": "state_forwards",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "RemoveField.database_forwards": {
            "name": "database_forwards",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RemoveField.database_backwards": {
            "name": "database_backwards",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RemoveField.describe": {
            "name": "describe",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterField.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "preserve_default": [
                    "bool"
                ]
            }
        },
        "AlterField.deconstruct": {
            "name": "deconstruct",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterField.state_forwards": {
            "name": "state_forwards",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AlterField.database_forwards": {
            "name": "database_forwards",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterField.database_backwards": {
            "name": "database_backwards",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterField.describe": {
            "name": "describe",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterField.reduce": {
            "name": "reduce",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "RenameField.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "old_name": [
                    "Any"
                ],
                "new_name": [
                    "Any"
                ]
            }
        },
        "RenameField.old_name_lower": {
            "name": "old_name_lower",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameField.new_name_lower": {
            "name": "new_name_lower",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameField.deconstruct": {
            "name": "deconstruct",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameField.state_forwards": {
            "name": "state_forwards",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "RenameField.database_forwards": {
            "name": "database_forwards",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RenameField.database_backwards": {
            "name": "database_backwards",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RenameField.describe": {
            "name": "describe",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameField.references_field": {
            "name": "references_field",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "RenameField.reduce": {
            "name": "reduce",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/operations/models.py": {
        "ModelOperation.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "ModelOperation.name_lower": {
            "name": "name_lower",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelOperation.references_model": {
            "name": "references_model",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelOperation.reduce": {
            "name": "reduce",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "CreateModel.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "fields": [
                    "Any"
                ],
                "options": [
                    "Optional[Any]"
                ],
                "bases": [
                    "Optional[Any]"
                ],
                "managers": [
                    "Optional[Any]"
                ]
            }
        },
        "CreateModel.deconstruct": {
            "name": "deconstruct",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateModel.state_forwards": {
            "name": "state_forwards",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "CreateModel.database_forwards": {
            "name": "database_forwards",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "CreateModel.database_backwards": {
            "name": "database_backwards",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "CreateModel.describe": {
            "name": "describe",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateModel.references_model": {
            "name": "references_model",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "CreateModel.model_to_key": {
            "name": "model_to_key",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "CreateModel.reduce": {
            "name": "reduce",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "DeleteModel.deconstruct": {
            "name": "deconstruct",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeleteModel.state_forwards": {
            "name": "state_forwards",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "DeleteModel.database_forwards": {
            "name": "database_forwards",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "DeleteModel.database_backwards": {
            "name": "database_backwards",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "DeleteModel.describe": {
            "name": "describe",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameModel.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_name": [
                    "Any"
                ],
                "new_name": [
                    "Any"
                ]
            }
        },
        "RenameModel.old_name_lower": {
            "name": "old_name_lower",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameModel.new_name_lower": {
            "name": "new_name_lower",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameModel.deconstruct": {
            "name": "deconstruct",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameModel.state_forwards": {
            "name": "state_forwards",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "RenameModel.database_forwards": {
            "name": "database_forwards",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RenameModel.database_backwards": {
            "name": "database_backwards",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RenameModel.references_model": {
            "name": "references_model",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "RenameModel.describe": {
            "name": "describe",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenameModel.reduce": {
            "name": "reduce",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "AlterModelTable.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "table": [
                    "Any"
                ]
            }
        },
        "AlterModelTable.deconstruct": {
            "name": "deconstruct",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterModelTable.state_forwards": {
            "name": "state_forwards",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AlterModelTable.database_forwards": {
            "name": "database_forwards",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterModelTable.database_backwards": {
            "name": "database_backwards",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterModelTable.describe": {
            "name": "describe",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterModelTable.reduce": {
            "name": "reduce",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelOptionOperation.reduce": {
            "name": "reduce",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "FieldRelatedOptionOperation.reduce": {
            "name": "reduce",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "Any"
                ],
                "in_between": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "AlterUniqueTogether.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "unique_together": [
                    "Any"
                ]
            }
        },
        "AlterUniqueTogether.deconstruct": {
            "name": "deconstruct",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterUniqueTogether.state_forwards": {
            "name": "state_forwards",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AlterUniqueTogether.database_forwards": {
            "name": "database_forwards",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterUniqueTogether.database_backwards": {
            "name": "database_backwards",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterUniqueTogether.references_field": {
            "name": "references_field",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "AlterUniqueTogether.describe": {
            "name": "describe",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterIndexTogether.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "index_together": [
                    "Any"
                ]
            }
        },
        "AlterIndexTogether.deconstruct": {
            "name": "deconstruct",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterIndexTogether.state_forwards": {
            "name": "state_forwards",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AlterIndexTogether.database_forwards": {
            "name": "database_forwards",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterIndexTogether.database_backwards": {
            "name": "database_backwards",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterIndexTogether.references_field": {
            "name": "references_field",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "AlterIndexTogether.describe": {
            "name": "describe",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterOrderWithRespectTo.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "order_with_respect_to": [
                    "Any"
                ]
            }
        },
        "AlterOrderWithRespectTo.deconstruct": {
            "name": "deconstruct",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterOrderWithRespectTo.state_forwards": {
            "name": "state_forwards",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AlterOrderWithRespectTo.database_forwards": {
            "name": "database_forwards",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterOrderWithRespectTo.database_backwards": {
            "name": "database_backwards",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterOrderWithRespectTo.references_field": {
            "name": "references_field",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "AlterOrderWithRespectTo.describe": {
            "name": "describe",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterModelOptions.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "options": [
                    "Any"
                ]
            }
        },
        "AlterModelOptions.deconstruct": {
            "name": "deconstruct",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterModelOptions.state_forwards": {
            "name": "state_forwards",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AlterModelOptions.database_forwards": {
            "name": "database_forwards",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterModelOptions.database_backwards": {
            "name": "database_backwards",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterModelOptions.describe": {
            "name": "describe",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterModelManagers.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "managers": [
                    "Any"
                ]
            }
        },
        "AlterModelManagers.deconstruct": {
            "name": "deconstruct",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlterModelManagers.state_forwards": {
            "name": "state_forwards",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AlterModelManagers.database_forwards": {
            "name": "database_forwards",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterModelManagers.database_backwards": {
            "name": "database_backwards",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AlterModelManagers.describe": {
            "name": "describe",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOperation.model_name_lower": {
            "name": "model_name_lower",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddIndex.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "index": [
                    "Any"
                ]
            }
        },
        "AddIndex.state_forwards": {
            "name": "state_forwards",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "AddIndex.database_forwards": {
            "name": "database_forwards",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AddIndex.database_backwards": {
            "name": "database_backwards",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "AddIndex.deconstruct": {
            "name": "deconstruct",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddIndex.describe": {
            "name": "describe",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoveIndex.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "RemoveIndex.state_forwards": {
            "name": "state_forwards",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "RemoveIndex.database_forwards": {
            "name": "database_forwards",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RemoveIndex.database_backwards": {
            "name": "database_backwards",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RemoveIndex.deconstruct": {
            "name": "deconstruct",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoveIndex.describe": {
            "name": "describe",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/operations/special.py": {
        "SeparateDatabaseAndState.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_operations": [
                    "Optional[Any]"
                ],
                "state_operations": [
                    "Optional[Any]"
                ]
            }
        },
        "SeparateDatabaseAndState.deconstruct": {
            "name": "deconstruct",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeparateDatabaseAndState.state_forwards": {
            "name": "state_forwards",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "SeparateDatabaseAndState.database_forwards": {
            "name": "database_forwards",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "SeparateDatabaseAndState.database_backwards": {
            "name": "database_backwards",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "SeparateDatabaseAndState.describe": {
            "name": "describe",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSQL.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "reverse_sql": [
                    "Optional[Any]"
                ],
                "state_operations": [
                    "Optional[Any]"
                ],
                "hints": [
                    "Optional[Any]"
                ],
                "elidable": [
                    "bool"
                ]
            }
        },
        "RunSQL.deconstruct": {
            "name": "deconstruct",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSQL.reversible": {
            "name": "reversible",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunSQL.state_forwards": {
            "name": "state_forwards",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "RunSQL.database_forwards": {
            "name": "database_forwards",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RunSQL.database_backwards": {
            "name": "database_backwards",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RunSQL.describe": {
            "name": "describe",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunPython.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "Any"
                ],
                "reverse_code": [
                    "Optional[Any]"
                ],
                "atomic": [
                    "Optional[Any]"
                ],
                "hints": [
                    "Optional[Any]"
                ],
                "elidable": [
                    "bool"
                ]
            }
        },
        "RunPython.deconstruct": {
            "name": "deconstruct",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunPython.reversible": {
            "name": "reversible",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunPython.state_forwards": {
            "name": "state_forwards",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "RunPython.database_forwards": {
            "name": "database_forwards",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RunPython.database_backwards": {
            "name": "database_backwards",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "from_state": [
                    "Any"
                ],
                "to_state": [
                    "Any"
                ]
            }
        },
        "RunPython.describe": {
            "name": "describe",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunPython.noop": {
            "name": "noop",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/operations/utils.py": {
        "is_referenced_by_foreign_key": {
            "name": "is_referenced_by_foreign_key",
            "location": 7,
            "return": [],
            "arguments": {
                "state": [
                    "Any"
                ],
                "model_name_lower": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/migrations/operations/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/models/aggregates.py": {
        "Aggregate.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.get_source_fields": {
            "name": "get_source_fields",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "Aggregate.resolve_expression": {
            "name": "resolve_expression",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Aggregate.default_alias": {
            "name": "default_alias",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.as_sql": {
            "name": "as_sql",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [],
                "connection": []
            }
        },
        "Avg.as_mysql": {
            "name": "as_mysql",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Avg.as_oracle": {
            "name": "as_oracle",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Count.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "distinct": [
                    "bool"
                ],
                "filter": [
                    "Optional[Any]"
                ]
            }
        },
        "Count.convert_value": {
            "name": "convert_value",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdDev.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "sample": [
                    "bool"
                ]
            }
        },
        "Sum.as_mysql": {
            "name": "as_mysql",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Sum.as_oracle": {
            "name": "as_oracle",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Variance.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "sample": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/base.py": {
        "subclass_exception": {
            "name": "subclass_exception",
            "location": 11,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "bases": [
                    "Any"
                ],
                "module": [
                    "Any"
                ],
                "attached_to": [
                    "Any"
                ]
            }
        },
        "method_set_order": {
            "name": "method_set_order",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ordered_obj": [
                    "Any"
                ],
                "id_list": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "method_get_order": {
            "name": "method_get_order",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "ordered_obj": [
                    "Any"
                ]
            }
        },
        "make_foreign_order_accessors": {
            "name": "make_foreign_order_accessors",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Any"
                ],
                "related_model": [
                    "Any"
                ]
            }
        },
        "model_unpickle": {
            "name": "model_unpickle",
            "location": 52,
            "return": [],
            "arguments": {
                "model_id": [
                    "Any"
                ]
            }
        },
        "ModelBase.__new__": {
            "name": "__new__",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [
                    "Any"
                ],
                "bases": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "ModelBase.add_to_class": {
            "name": "add_to_class",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ModelStateFieldsCacheDescriptor.__get__": {
            "name": "__get__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.from_db": {
            "name": "from_db",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "db": [
                    "Any"
                ],
                "field_names": [
                    "Any"
                ],
                "values": [
                    "Any"
                ]
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Model.__hash__": {
            "name": "__hash__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__reduce__": {
            "name": "__reduce__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.get_deferred_fields": {
            "name": "get_deferred_fields",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.refresh_from_db": {
            "name": "refresh_from_db",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "Optional[Any]"
                ],
                "fields": [
                    "Optional[Any]"
                ]
            }
        },
        "Model.serializable_value": {
            "name": "serializable_value",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ]
            }
        },
        "Model.save": {
            "name": "save",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "bool"
                ],
                "force_update": [
                    "bool"
                ],
                "using": [
                    "Optional[Any]"
                ],
                "update_fields": [
                    "Optional[Any]"
                ]
            }
        },
        "Model.save_base": {
            "name": "save_base",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool"
                ],
                "force_insert": [
                    "bool"
                ],
                "force_update": [
                    "bool"
                ],
                "using": [
                    "Optional[Any]"
                ],
                "update_fields": [
                    "Optional[Any]"
                ]
            }
        },
        "Model.delete": {
            "name": "delete",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Optional[Any]"
                ],
                "keep_parents": [
                    "bool"
                ]
            }
        },
        "Model.prepare_database_save": {
            "name": "prepare_database_save",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "Model.clean": {
            "name": "clean",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.validate_unique": {
            "name": "validate_unique",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "Optional[Any]"
                ]
            }
        },
        "Model.date_error_message": {
            "name": "date_error_message",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_type": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "unique_for": [
                    "Any"
                ]
            }
        },
        "Model.unique_error_message": {
            "name": "unique_error_message",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "model_class": [
                    "Any"
                ],
                "unique_check": [
                    "Any"
                ]
            }
        },
        "Model.full_clean": {
            "name": "full_clean",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "Optional[Any]"
                ],
                "validate_unique": [
                    "bool"
                ]
            }
        },
        "Model.clean_fields": {
            "name": "clean_fields",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "Optional[Any]"
                ]
            }
        },
        "Model.check": {
            "name": "check",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/constants.py": {},
    "django-graphql-master/mypy_stubs/django/db/models/deletion.py": {
        "CASCADE": {
            "name": "CASCADE",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "sub_objs": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "PROTECT": {
            "name": "PROTECT",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "sub_objs": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "SET": {
            "name": "SET",
            "location": 14,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "SET_NULL": {
            "name": "SET_NULL",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "sub_objs": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "SET_DEFAULT": {
            "name": "SET_DEFAULT",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "sub_objs": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "DO_NOTHING": {
            "name": "DO_NOTHING",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "collector": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "sub_objs": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "get_candidate_relations_to_delete": {
            "name": "get_candidate_relations_to_delete",
            "location": 18,
            "return": [],
            "arguments": {
                "opts": [
                    "Any"
                ]
            }
        },
        "ProtectedError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Any"
                ],
                "protected_objects": [
                    "Any"
                ]
            }
        },
        "Collector.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ]
            }
        },
        "Collector.add": {
            "name": "add",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "objs": [
                    "Any"
                ],
                "source": [
                    "Optional[Any]"
                ],
                "nullable": [
                    "bool"
                ],
                "reverse_dependency": [
                    "bool"
                ]
            }
        },
        "Collector.add_field_update": {
            "name": "add_field_update",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "objs": [
                    "Any"
                ]
            }
        },
        "Collector.can_fast_delete": {
            "name": "can_fast_delete",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "objs": [
                    "Any"
                ],
                "from_field": [
                    "Optional[Any]"
                ]
            }
        },
        "Collector.get_del_batches": {
            "name": "get_del_batches",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "objs": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Collector.collect": {
            "name": "collect",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objs": [
                    "Any"
                ],
                "source": [
                    "Optional[Any]"
                ],
                "nullable": [
                    "bool"
                ],
                "collect_related": [
                    "bool"
                ],
                "source_attr": [
                    "Optional[Any]"
                ],
                "reverse_dependency": [
                    "bool"
                ],
                "keep_parents": [
                    "bool"
                ]
            }
        },
        "Collector.related_objects": {
            "name": "related_objects",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "related": [
                    "Any"
                ],
                "objs": [
                    "Any"
                ]
            }
        },
        "Collector.instances_with_model": {
            "name": "instances_with_model",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collector.sort": {
            "name": "sort",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collector.delete": {
            "name": "delete",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/expressions.py": {
        "SQLiteNumericMixin.as_sqlite": {
            "name": "as_sqlite",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Combinable.__neg__": {
            "name": "__neg__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Combinable.__add__": {
            "name": "__add__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__sub__": {
            "name": "__sub__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__mul__": {
            "name": "__mul__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__truediv__": {
            "name": "__truediv__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__mod__": {
            "name": "__mod__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__pow__": {
            "name": "__pow__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__and__": {
            "name": "__and__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.bitand": {
            "name": "bitand",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.bitleftshift": {
            "name": "bitleftshift",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.bitrightshift": {
            "name": "bitrightshift",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__or__": {
            "name": "__or__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.bitor": {
            "name": "bitor",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__radd__": {
            "name": "__radd__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__rsub__": {
            "name": "__rsub__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__rmul__": {
            "name": "__rmul__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__rmod__": {
            "name": "__rmod__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__rpow__": {
            "name": "__rpow__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__rand__": {
            "name": "__rand__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Combinable.__ror__": {
            "name": "__ror__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "BaseExpression.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseExpression.get_db_converters": {
            "name": "get_db_converters",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseExpression.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "BaseExpression.as_sql": {
            "name": "as_sql",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseExpression.contains_aggregate": {
            "name": "contains_aggregate",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.contains_over_clause": {
            "name": "contains_over_clause",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.contains_column_references": {
            "name": "contains_column_references",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.resolve_expression": {
            "name": "resolve_expression",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "BaseExpression.field": {
            "name": "field",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.convert_value": {
            "name": "convert_value",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.get_lookup": {
            "name": "get_lookup",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "lookup": [
                    "Any"
                ]
            }
        },
        "BaseExpression.get_transform": {
            "name": "get_transform",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BaseExpression.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "BaseExpression.copy": {
            "name": "copy",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.get_source_fields": {
            "name": "get_source_fields",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.asc": {
            "name": "asc",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.desc": {
            "name": "desc",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.reverse_ordering": {
            "name": "reverse_ordering",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.flatten": {
            "name": "flatten",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExpression.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "BaseExpression.__hash__": {
            "name": "__hash__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CombinedExpression.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Any"
                ],
                "connector": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "CombinedExpression.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CombinedExpression.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "CombinedExpression.as_sql": {
            "name": "as_sql",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "CombinedExpression.resolve_expression": {
            "name": "resolve_expression",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "DurationExpression.compile": {
            "name": "compile",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "side": [
                    "Any"
                ],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DurationExpression.as_sql": {
            "name": "as_sql",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "TemporalSubtraction.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "TemporalSubtraction.as_sql": {
            "name": "as_sql",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "F.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "F.resolve_expression": {
            "name": "resolve_expression",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "F.asc": {
            "name": "asc",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "F.desc": {
            "name": "desc",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "F.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "F.__hash__": {
            "name": "__hash__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResolvedOuterRef.as_sql": {
            "name": "as_sql",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolvedOuterRef.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "relabels": [
                    "Any"
                ]
            }
        },
        "OuterRef.resolve_expression": {
            "name": "resolve_expression",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Func.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Func.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Func.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "Func.resolve_expression": {
            "name": "resolve_expression",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Func.as_sql": {
            "name": "as_sql",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "function": [
                    "Optional[Any]"
                ],
                "template": [
                    "Optional[Any]"
                ],
                "arg_joiner": [
                    "Optional[Any]"
                ]
            }
        },
        "Func.copy": {
            "name": "copy",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "Value.as_sql": {
            "name": "as_sql",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Value.resolve_expression": {
            "name": "resolve_expression",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Value.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationValue.as_sql": {
            "name": "as_sql",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "RawSQL.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "RawSQL.as_sql": {
            "name": "as_sql",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "RawSQL.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawSQL.__hash__": {
            "name": "__hash__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Star.as_sql": {
            "name": "as_sql",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Random.as_sql": {
            "name": "as_sql",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Col.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "target": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "Col.as_sql": {
            "name": "as_sql",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Col.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "relabels": [
                    "Any"
                ]
            }
        },
        "Col.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Col.get_db_converters": {
            "name": "get_db_converters",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Ref.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refs": [
                    "Any"
                ],
                "source": [
                    "Any"
                ]
            }
        },
        "Ref.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ref.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "Ref.resolve_expression": {
            "name": "resolve_expression",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Ref.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "relabels": [
                    "Any"
                ]
            }
        },
        "Ref.as_sql": {
            "name": "as_sql",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Ref.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionList.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionWrapper.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "output_field": [
                    "Any"
                ]
            }
        },
        "ExpressionWrapper.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "ExpressionWrapper.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpressionWrapper.as_sql": {
            "name": "as_sql",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "When.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Optional[Any]"
                ],
                "then": [
                    "Optional[Any]"
                ]
            }
        },
        "When.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "When.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "When.get_source_fields": {
            "name": "get_source_fields",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "When.resolve_expression": {
            "name": "resolve_expression",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "When.as_sql": {
            "name": "as_sql",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "When.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "Case.resolve_expression": {
            "name": "resolve_expression",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Case.copy": {
            "name": "copy",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.as_sql": {
            "name": "as_sql",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "template": [
                    "Optional[Any]"
                ],
                "case_joiner": [
                    "Optional[Any]"
                ]
            }
        },
        "Subquery.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "Subquery.copy": {
            "name": "copy",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subquery.resolve_expression": {
            "name": "resolve_expression",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Subquery.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subquery.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "Subquery.as_sql": {
            "name": "as_sql",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "Exists.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exists.__invert__": {
            "name": "__invert__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exists.resolve_expression": {
            "name": "resolve_expression",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ]
            }
        },
        "Exists.as_sql": {
            "name": "as_sql",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "Exists.as_oracle": {
            "name": "as_oracle",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "OrderBy.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "descending": [
                    "bool"
                ],
                "nulls_first": [
                    "bool"
                ],
                "nulls_last": [
                    "bool"
                ]
            }
        },
        "OrderBy.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "OrderBy.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderBy.as_sql": {
            "name": "as_sql",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "OrderBy.as_sqlite": {
            "name": "as_sqlite",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "OrderBy.as_mysql": {
            "name": "as_mysql",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "OrderBy.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderBy.reverse_ordering": {
            "name": "reverse_ordering",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderBy.asc": {
            "name": "asc",
            "location": 237,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBy.desc": {
            "name": "desc",
            "location": 238,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "partition_by": [
                    "Optional[Any]"
                ],
                "order_by": [
                    "Optional[Any]"
                ],
                "frame": [
                    "Optional[Any]"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "Window.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Window.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "Window.as_sql": {
            "name": "as_sql",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "function": [
                    "Optional[Any]"
                ],
                "template": [
                    "Optional[Any]"
                ]
            }
        },
        "Window.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WindowFrame.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[Any]"
                ],
                "end": [
                    "Optional[Any]"
                ]
            }
        },
        "WindowFrame.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exprs": [
                    "Any"
                ]
            }
        },
        "WindowFrame.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WindowFrame.as_sql": {
            "name": "as_sql",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "WindowFrame.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WindowFrame.window_frame_start_end": {
            "name": "window_frame_start_end",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "start": [
                    "Any"
                ],
                "end": [
                    "Any"
                ]
            }
        },
        "RowRange.window_frame_start_end": {
            "name": "window_frame_start_end",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "start": [
                    "Any"
                ],
                "end": [
                    "Any"
                ]
            }
        },
        "ValueRange.window_frame_start_end": {
            "name": "window_frame_start_end",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "start": [
                    "Any"
                ],
                "end": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/indexes.py": {
        "Index.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.check_name": {
            "name": "check_name",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.create_sql": {
            "name": "create_sql",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ],
                "using": [
                    "str"
                ]
            }
        },
        "Index.remove_sql": {
            "name": "remove_sql",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "schema_editor": [
                    "Any"
                ]
            }
        },
        "Index.deconstruct": {
            "name": "deconstruct",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.clone": {
            "name": "clone",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.set_name_with_model": {
            "name": "set_name_with_model",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "Index.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/lookups.py": {
        "Lookup.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "Lookup.apply_bilateral_transforms": {
            "name": "apply_bilateral_transforms",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Lookup.batch_process_rhs": {
            "name": "batch_process_rhs",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "rhs": [
                    "Optional[Any]"
                ]
            }
        },
        "Lookup.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lookup.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_exprs": [
                    "Any"
                ]
            }
        },
        "Lookup.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lookup.get_db_prep_lookup": {
            "name": "get_db_prep_lookup",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Lookup.process_lhs": {
            "name": "process_lhs",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "lhs": [
                    "Optional[Any]"
                ]
            }
        },
        "Lookup.process_rhs": {
            "name": "process_rhs",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Lookup.rhs_is_direct_value": {
            "name": "rhs_is_direct_value",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lookup.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "relabels": [
                    "Any"
                ]
            }
        },
        "Lookup.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lookup.as_sql": {
            "name": "as_sql",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Lookup.contains_aggregate": {
            "name": "contains_aggregate",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lookup.contains_over_clause": {
            "name": "contains_over_clause",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lookup.is_summary": {
            "name": "is_summary",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transform.lhs": {
            "name": "lhs",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transform.get_bilateral_transforms": {
            "name": "get_bilateral_transforms",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinLookup.process_lhs": {
            "name": "process_lhs",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "lhs": [
                    "Optional[Any]"
                ]
            }
        },
        "BuiltinLookup.as_sql": {
            "name": "as_sql",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "BuiltinLookup.get_rhs_op": {
            "name": "get_rhs_op",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "FieldGetDbPrepValueMixin.get_db_prep_lookup": {
            "name": "get_db_prep_lookup",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "FieldGetDbPrepValueIterableMixin.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldGetDbPrepValueIterableMixin.process_rhs": {
            "name": "process_rhs",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "FieldGetDbPrepValueIterableMixin.resolve_expression_parameter": {
            "name": "resolve_expression_parameter",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "sql": [
                    "Any"
                ],
                "param": [
                    "Any"
                ]
            }
        },
        "FieldGetDbPrepValueIterableMixin.batch_process_rhs": {
            "name": "batch_process_rhs",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "rhs": [
                    "Optional[Any]"
                ]
            }
        },
        "Exact.process_rhs": {
            "name": "process_rhs",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "IExact.process_rhs": {
            "name": "process_rhs",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "IntegerFieldFloatRounding.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "In.process_rhs": {
            "name": "process_rhs",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "In.get_rhs_op": {
            "name": "get_rhs_op",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "In.as_sql": {
            "name": "as_sql",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "In.split_parameter_list_as_sql": {
            "name": "split_parameter_list_as_sql",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "PatternLookup.get_rhs_op": {
            "name": "get_rhs_op",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "PatternLookup.process_rhs": {
            "name": "process_rhs",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "qn": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Range.get_rhs_op": {
            "name": "get_rhs_op",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "IsNull.as_sql": {
            "name": "as_sql",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Regex.as_sql": {
            "name": "as_sql",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "YearLookup.year_lookup_bounds": {
            "name": "year_lookup_bounds",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "year": [
                    "Any"
                ]
            }
        },
        "YearComparisonLookup.as_sql": {
            "name": "as_sql",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "YearComparisonLookup.get_rhs_op": {
            "name": "get_rhs_op",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "YearComparisonLookup.get_bound": {
            "name": "get_bound",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "finish": [
                    "Any"
                ]
            }
        },
        "YearExact.as_sql": {
            "name": "as_sql",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "YearGt.get_bound": {
            "name": "get_bound",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "finish": [
                    "Any"
                ]
            }
        },
        "YearGte.get_bound": {
            "name": "get_bound",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "finish": [
                    "Any"
                ]
            }
        },
        "YearLt.get_bound": {
            "name": "get_bound",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "finish": [
                    "Any"
                ]
            }
        },
        "YearLte.get_bound": {
            "name": "get_bound",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "Any"
                ],
                "finish": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/manager.py": {
        "BaseManager.__new__": {
            "name": "__new__",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseManager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.deconstruct": {
            "name": "deconstruct",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.check": {
            "name": "check",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.from_queryset": {
            "name": "from_queryset",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "queryset_class": [
                    "Any"
                ],
                "class_name": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseManager.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "BaseManager.db_manager": {
            "name": "db_manager",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Optional[Any]"
                ],
                "hints": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseManager.db": {
            "name": "db",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.get_queryset": {
            "name": "get_queryset",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.all": {
            "name": "all",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "BaseManager.__hash__": {
            "name": "__hash__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagerDescriptor.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "Any"
                ]
            }
        },
        "ManagerDescriptor.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "EmptyManager.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "EmptyManager.get_queryset": {
            "name": "get_queryset",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/options.py": {
        "normalize_together": {
            "name": "normalize_together",
            "location": 12,
            "return": [],
            "arguments": {
                "option_together": [
                    "Any"
                ]
            }
        },
        "make_immutable_fields_list": {
            "name": "make_immutable_fields_list",
            "location": 13,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "Options.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Any"
                ],
                "app_label": [
                    "Optional[Any]"
                ]
            }
        },
        "Options.label": {
            "name": "label",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.label_lower": {
            "name": "label_lower",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.app_config": {
            "name": "app_config",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.installed": {
            "name": "installed",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "Options.add_manager": {
            "name": "add_manager",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "Any"
                ]
            }
        },
        "Options.add_field": {
            "name": "add_field",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "private": [
                    "bool"
                ]
            }
        },
        "Options.setup_pk": {
            "name": "setup_pk",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "Options.setup_proxy": {
            "name": "setup_proxy",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ]
            }
        },
        "Options.can_migrate": {
            "name": "can_migrate",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Options.verbose_name_raw": {
            "name": "verbose_name_raw",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.swapped": {
            "name": "swapped",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.managers": {
            "name": "managers",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.managers_map": {
            "name": "managers_map",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.base_manager": {
            "name": "base_manager",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.default_manager": {
            "name": "default_manager",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.fields": {
            "name": "fields",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.concrete_fields": {
            "name": "concrete_fields",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.local_concrete_fields": {
            "name": "local_concrete_fields",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.many_to_many": {
            "name": "many_to_many",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.related_objects": {
            "name": "related_objects",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.fields_map": {
            "name": "fields_map",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.get_field": {
            "name": "get_field",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ]
            }
        },
        "Options.get_base_chain": {
            "name": "get_base_chain",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ]
            }
        },
        "Options.get_parent_list": {
            "name": "get_parent_list",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.get_ancestor_link": {
            "name": "get_ancestor_link",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "ancestor": [
                    "Any"
                ]
            }
        },
        "Options.get_path_to_parent": {
            "name": "get_path_to_parent",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [
                    "Any"
                ]
            }
        },
        "Options.get_path_from_parent": {
            "name": "get_path_from_parent",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [
                    "Any"
                ]
            }
        },
        "Options.get_fields": {
            "name": "get_fields",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "include_parents": [
                    "bool"
                ],
                "include_hidden": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/query.py": {
        "normalize_prefetch_lookups": {
            "name": "normalize_prefetch_lookups",
            "location": 134,
            "return": [],
            "arguments": {
                "lookups": [
                    "Any"
                ],
                "prefix": [
                    "Optional[Any]"
                ]
            }
        },
        "prefetch_related_objects": {
            "name": "prefetch_related_objects",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "model_instances": [
                    "Any"
                ]
            }
        },
        "get_prefetcher": {
            "name": "get_prefetcher",
            "location": 136,
            "return": [],
            "arguments": {
                "instance": [
                    "Any"
                ],
                "through_attr": [
                    "Any"
                ],
                "to_attr": [
                    "Any"
                ]
            }
        },
        "prefetch_one_level": {
            "name": "prefetch_one_level",
            "location": 137,
            "return": [],
            "arguments": {
                "instances": [
                    "Any"
                ],
                "prefetcher": [
                    "Any"
                ],
                "lookup": [
                    "Any"
                ],
                "level": [
                    "Any"
                ]
            }
        },
        "get_related_populators": {
            "name": "get_related_populators",
            "location": 153,
            "return": [],
            "arguments": {
                "klass_info": [
                    "Any"
                ],
                "select": [
                    "Any"
                ],
                "db": [
                    "Any"
                ]
            }
        },
        "BaseIterable.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "Any"
                ],
                "chunked_fetch": [
                    "bool"
                ],
                "chunk_size": [
                    "Any"
                ]
            }
        },
        "ModelIterable.__iter__": {
            "name": "__iter__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuesIterable.__iter__": {
            "name": "__iter__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuesListIterable.__iter__": {
            "name": "__iter__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamedValuesListIterable.create_namedtuple_class": {
            "name": "create_namedtuple_class",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "NamedValuesListIterable.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatValuesListIterable.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[Any]"
                ],
                "query": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ],
                "hints": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.as_manager": {
            "name": "as_manager",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "QuerySet.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "QuerySet.__len__": {
            "name": "__len__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__iter__": {
            "name": "__iter__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__bool__": {
            "name": "__bool__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__getitem__": {
            "name": "__getitem__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "Any"
                ]
            }
        },
        "QuerySet.__and__": {
            "name": "__and__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "QuerySet.__or__": {
            "name": "__or__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "QuerySet.iterator": {
            "name": "iterator",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "QuerySet.aggregate": {
            "name": "aggregate",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.count": {
            "name": "count",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.get": {
            "name": "get",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.create": {
            "name": "create",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.bulk_create": {
            "name": "bulk_create",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "objs": [
                    "Any"
                ],
                "batch_size": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.get_or_create": {
            "name": "get_or_create",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "defaults": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.update_or_create": {
            "name": "update_or_create",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "defaults": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.earliest": {
            "name": "earliest",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.latest": {
            "name": "latest",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.first": {
            "name": "first",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.last": {
            "name": "last",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.in_bulk": {
            "name": "in_bulk",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "id_list": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.delete": {
            "name": "delete",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.update": {
            "name": "update",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.exists": {
            "name": "exists",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.explain": {
            "name": "explain",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.raw": {
            "name": "raw",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "raw_query": [
                    "Any"
                ],
                "params": [
                    "Optional[Any]"
                ],
                "translations": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.values": {
            "name": "values",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.values_list": {
            "name": "values_list",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.dates": {
            "name": "dates",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "kind": [
                    "Any"
                ],
                "order": [
                    "str"
                ]
            }
        },
        "QuerySet.datetimes": {
            "name": "datetimes",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ],
                "kind": [
                    "Any"
                ],
                "order": [
                    "str"
                ],
                "tzinfo": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.none": {
            "name": "none",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.all": {
            "name": "all",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.filter": {
            "name": "filter",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.exclude": {
            "name": "exclude",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.complex_filter": {
            "name": "complex_filter",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "filter_obj": [
                    "Any"
                ]
            }
        },
        "QuerySet.union": {
            "name": "union",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.intersection": {
            "name": "intersection",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.difference": {
            "name": "difference",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.select_for_update": {
            "name": "select_for_update",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "nowait": [
                    "bool"
                ],
                "skip_locked": [
                    "bool"
                ],
                "of": [
                    "Any"
                ]
            }
        },
        "QuerySet.select_related": {
            "name": "select_related",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.prefetch_related": {
            "name": "prefetch_related",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.annotate": {
            "name": "annotate",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.order_by": {
            "name": "order_by",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.distinct": {
            "name": "distinct",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.extra": {
            "name": "extra",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "select": [
                    "Optional[Any]"
                ],
                "where": [
                    "Optional[Any]"
                ],
                "params": [
                    "Optional[Any]"
                ],
                "tables": [
                    "Optional[Any]"
                ],
                "order_by": [
                    "Optional[Any]"
                ],
                "select_params": [
                    "Optional[Any]"
                ]
            }
        },
        "QuerySet.reverse": {
            "name": "reverse",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.defer": {
            "name": "defer",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.only": {
            "name": "only",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.using": {
            "name": "using",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "QuerySet.ordered": {
            "name": "ordered",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.db": {
            "name": "db",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.resolve_expression": {
            "name": "resolve_expression",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceCheckMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "EmptyQuerySet.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_query": [
                    "Any"
                ],
                "model": [
                    "Optional[Any]"
                ],
                "query": [
                    "Optional[Any]"
                ],
                "params": [
                    "Optional[Any]"
                ],
                "translations": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ],
                "hints": [
                    "Optional[Any]"
                ]
            }
        },
        "RawQuerySet.resolve_model_init_order": {
            "name": "resolve_model_init_order",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.prefetch_related": {
            "name": "prefetch_related",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.__len__": {
            "name": "__len__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.__bool__": {
            "name": "__bool__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.__iter__": {
            "name": "__iter__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.iterator": {
            "name": "iterator",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.__getitem__": {
            "name": "__getitem__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "Any"
                ]
            }
        },
        "RawQuerySet.db": {
            "name": "db",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.using": {
            "name": "using",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "RawQuerySet.columns": {
            "name": "columns",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuerySet.model_fields": {
            "name": "model_fields",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Prefetch.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "Any"
                ],
                "queryset": [
                    "Optional[Any]"
                ],
                "to_attr": [
                    "Optional[Any]"
                ]
            }
        },
        "Prefetch.add_prefix": {
            "name": "add_prefix",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Any"
                ]
            }
        },
        "Prefetch.get_current_prefetch_to": {
            "name": "get_current_prefetch_to",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "Any"
                ]
            }
        },
        "Prefetch.get_current_to_attr": {
            "name": "get_current_to_attr",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "Any"
                ]
            }
        },
        "Prefetch.get_current_queryset": {
            "name": "get_current_queryset",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "Any"
                ]
            }
        },
        "Prefetch.__eq__": {
            "name": "__eq__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Prefetch.__hash__": {
            "name": "__hash__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedPopulator.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "klass_info": [
                    "Any"
                ],
                "select": [
                    "Any"
                ],
                "db": [
                    "Any"
                ]
            }
        },
        "RelatedPopulator.populate": {
            "name": "populate",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Any"
                ],
                "from_obj": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/query_utils.py": {
        "subclasses": {
            "name": "subclasses",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "select_related_descend": {
            "name": "select_related_descend",
            "location": 48,
            "return": [],
            "arguments": {
                "field": [
                    "Any"
                ],
                "restricted": [
                    "Any"
                ],
                "requested": [
                    "Any"
                ],
                "load_fields": [
                    "Any"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "refs_expression": {
            "name": "refs_expression",
            "location": 49,
            "return": [],
            "arguments": {
                "lookup_parts": [
                    "Any"
                ],
                "annotations": [
                    "Any"
                ]
            }
        },
        "check_rel_lookup_compatibility": {
            "name": "check_rel_lookup_compatibility",
            "location": 50,
            "return": [],
            "arguments": {
                "model": [
                    "Any"
                ],
                "target_opts": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "QueryWrapper.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "QueryWrapper.as_sql": {
            "name": "as_sql",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ]
            }
        },
        "Q.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q.__or__": {
            "name": "__or__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Q.__and__": {
            "name": "__and__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Q.__invert__": {
            "name": "__invert__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Q.resolve_expression": {
            "name": "resolve_expression",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Q.deconstruct": {
            "name": "deconstruct",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeferredAttribute.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ]
            }
        },
        "DeferredAttribute.__get__": {
            "name": "__get__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "RegisterLookupMixin.get_lookups": {
            "name": "get_lookups",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "RegisterLookupMixin.get_lookup": {
            "name": "get_lookup",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_name": [
                    "Any"
                ]
            }
        },
        "RegisterLookupMixin.get_transform": {
            "name": "get_transform",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_name": [
                    "Any"
                ]
            }
        },
        "RegisterLookupMixin.merge_dicts": {
            "name": "merge_dicts",
            "location": 44,
            "return": [],
            "arguments": {
                "dicts": [
                    "Any"
                ]
            }
        },
        "RegisterLookupMixin.register_lookup": {
            "name": "register_lookup",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "lookup": [
                    "Any"
                ],
                "lookup_name": [
                    "Optional[Any]"
                ]
            }
        },
        "FilteredRelation.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relation_name": [
                    "Any"
                ]
            }
        },
        "FilteredRelation.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "FilteredRelation.clone": {
            "name": "clone",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilteredRelation.resolve_expression": {
            "name": "resolve_expression",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredRelation.as_sql": {
            "name": "as_sql",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/signals.py": {
        "ModelSignal.connect": {
            "name": "connect",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "Any"
                ],
                "sender": [
                    "Optional[Any]"
                ],
                "weak": [
                    "bool"
                ],
                "dispatch_uid": [
                    "Optional[Any]"
                ],
                "apps": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelSignal.disconnect": {
            "name": "disconnect",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "receiver": [
                    "Optional[Any]"
                ],
                "sender": [
                    "Optional[Any]"
                ],
                "dispatch_uid": [
                    "Optional[Any]"
                ],
                "apps": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/utils.py": {
        "make_model_tuple": {
            "name": "make_model_tuple",
            "location": 7,
            "return": [],
            "arguments": {
                "model": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/models/fields/files.py": {
        "FieldFile.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "FieldFile.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "FieldFile.__hash__": {
            "name": "__hash__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldFile.path": {
            "name": "path",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldFile.url": {
            "name": "url",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldFile.size": {
            "name": "size",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldFile.open": {
            "name": "open",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "FieldFile.save": {
            "name": "save",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "content": [
                    "Any"
                ],
                "save": [
                    "bool"
                ]
            }
        },
        "FieldFile.delete": {
            "name": "delete",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save": [
                    "bool"
                ]
            }
        },
        "FieldFile.closed": {
            "name": "closed",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldFile.close": {
            "name": "close",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileDescriptor.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "FileDescriptor.__get__": {
            "name": "__get__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "FileDescriptor.__set__": {
            "name": "__set__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "FileField.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "upload_to": [
                    "str"
                ],
                "storage": [
                    "Optional[Any]"
                ]
            }
        },
        "FileField.check": {
            "name": "check",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileField.deconstruct": {
            "name": "deconstruct",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileField.get_internal_type": {
            "name": "get_internal_type",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileField.get_prep_value": {
            "name": "get_prep_value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FileField.pre_save": {
            "name": "pre_save",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "model_instance": [
                    "Any"
                ],
                "add": [
                    "Any"
                ]
            }
        },
        "FileField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "FileField.generate_filename": {
            "name": "generate_filename",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "filename": [
                    "Any"
                ]
            }
        },
        "FileField.save_form_data": {
            "name": "save_form_data",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "FileField.formfield": {
            "name": "formfield",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageFileDescriptor.__set__": {
            "name": "__set__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ImageFieldFile.delete": {
            "name": "delete",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save": [
                    "bool"
                ]
            }
        },
        "ImageField.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "width_field": [
                    "Optional[Any]"
                ],
                "height_field": [
                    "Optional[Any]"
                ]
            }
        },
        "ImageField.check": {
            "name": "check",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageField.deconstruct": {
            "name": "deconstruct",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "ImageField.update_dimension_fields": {
            "name": "update_dimension_fields",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "ImageField.formfield": {
            "name": "formfield",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/fields/mixins.py": {
        "FieldCacheMixin.get_cache_name": {
            "name": "get_cache_name",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldCacheMixin.get_cached_value": {
            "name": "get_cached_value",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "default": [
                    "Any"
                ]
            }
        },
        "FieldCacheMixin.is_cached": {
            "name": "is_cached",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "FieldCacheMixin.set_cached_value": {
            "name": "set_cached_value",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldCacheMixin.delete_cached_value": {
            "name": "delete_cached_value",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/fields/proxy.py": {
        "OrderWrt.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/fields/related.py": {
        "resolve_relation": {
            "name": "resolve_relation",
            "location": 14,
            "return": [],
            "arguments": {
                "scope_model": [
                    "Any"
                ],
                "relation": [
                    "Any"
                ]
            }
        },
        "lazy_related_operation": {
            "name": "lazy_related_operation",
            "location": 15,
            "return": [],
            "arguments": {
                "function": [
                    "Any"
                ],
                "model": [
                    "Any"
                ]
            }
        },
        "create_many_to_many_intermediary_model": {
            "name": "create_many_to_many_intermediary_model",
            "location": 129,
            "return": [],
            "arguments": {
                "field": [
                    "Any"
                ],
                "klass": [
                    "Any"
                ]
            }
        },
        "RelatedField.related_model": {
            "name": "related_model",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.check": {
            "name": "check",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.db_type": {
            "name": "db_type",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "RelatedField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "private_only": [
                    "bool"
                ]
            }
        },
        "RelatedField.deconstruct": {
            "name": "deconstruct",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.get_forward_related_filter": {
            "name": "get_forward_related_filter",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "RelatedField.get_reverse_related_filter": {
            "name": "get_reverse_related_filter",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "RelatedField.swappable_setting": {
            "name": "swappable_setting",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.set_attributes_from_rel": {
            "name": "set_attributes_from_rel",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.do_related_class": {
            "name": "do_related_class",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "cls": [
                    "Any"
                ]
            }
        },
        "RelatedField.get_limit_choices_to": {
            "name": "get_limit_choices_to",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.formfield": {
            "name": "formfield",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.related_query_name": {
            "name": "related_query_name",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.target_field": {
            "name": "target_field",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedField.get_cache_name": {
            "name": "get_cache_name",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "Any"
                ],
                "on_delete": [
                    "Any"
                ],
                "from_fields": [
                    "Any"
                ],
                "to_fields": [
                    "Any"
                ],
                "rel": [
                    "Optional[Any]"
                ],
                "related_name": [
                    "Optional[Any]"
                ],
                "related_query_name": [
                    "Optional[Any]"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ],
                "parent_link": [
                    "bool"
                ],
                "swappable": [
                    "bool"
                ]
            }
        },
        "ForeignObject.check": {
            "name": "check",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.deconstruct": {
            "name": "deconstruct",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.resolve_related_fields": {
            "name": "resolve_related_fields",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.related_fields": {
            "name": "related_fields",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.reverse_related_fields": {
            "name": "reverse_related_fields",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.local_related_fields": {
            "name": "local_related_fields",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.foreign_related_fields": {
            "name": "foreign_related_fields",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.get_local_related_value": {
            "name": "get_local_related_value",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "ForeignObject.get_foreign_related_value": {
            "name": "get_foreign_related_value",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "ForeignObject.get_instance_value_for_fields": {
            "name": "get_instance_value_for_fields",
            "location": 70,
            "return": [],
            "arguments": {
                "instance": [
                    "Any"
                ],
                "fields": [
                    "Any"
                ]
            }
        },
        "ForeignObject.get_attname_column": {
            "name": "get_attname_column",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.get_joining_columns": {
            "name": "get_joining_columns",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "reverse_join": [
                    "bool"
                ]
            }
        },
        "ForeignObject.get_reverse_joining_columns": {
            "name": "get_reverse_joining_columns",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObject.get_extra_descriptor_filter": {
            "name": "get_extra_descriptor_filter",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "ForeignObject.get_extra_restriction": {
            "name": "get_extra_restriction",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "where_class": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ],
                "related_alias": [
                    "Any"
                ]
            }
        },
        "ForeignObject.get_path_info": {
            "name": "get_path_info",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeignObject.get_reverse_path_info": {
            "name": "get_reverse_path_info",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeignObject.get_lookups": {
            "name": "get_lookups",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ForeignObject.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "private_only": [
                    "bool"
                ]
            }
        },
        "ForeignObject.contribute_to_related_class": {
            "name": "contribute_to_related_class",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "related": [
                    "Any"
                ]
            }
        },
        "ForeignKey.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "Any"
                ],
                "on_delete": [
                    "Any"
                ],
                "related_name": [
                    "Optional[Any]"
                ],
                "related_query_name": [
                    "Optional[Any]"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ],
                "parent_link": [
                    "bool"
                ],
                "to_field": [
                    "Optional[Any]"
                ],
                "db_constraint": [
                    "bool"
                ]
            }
        },
        "ForeignKey.check": {
            "name": "check",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.deconstruct": {
            "name": "deconstruct",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.to_python": {
            "name": "to_python",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ForeignKey.target_field": {
            "name": "target_field",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.get_reverse_path_info": {
            "name": "get_reverse_path_info",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeignKey.validate": {
            "name": "validate",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "model_instance": [
                    "Any"
                ]
            }
        },
        "ForeignKey.get_attname": {
            "name": "get_attname",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.get_attname_column": {
            "name": "get_attname_column",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.get_default": {
            "name": "get_default",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.get_db_prep_save": {
            "name": "get_db_prep_save",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ForeignKey.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "ForeignKey.contribute_to_related_class": {
            "name": "contribute_to_related_class",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "related": [
                    "Any"
                ]
            }
        },
        "ForeignKey.formfield": {
            "name": "formfield",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKey.db_check": {
            "name": "db_check",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "ForeignKey.db_type": {
            "name": "db_type",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "ForeignKey.db_parameters": {
            "name": "db_parameters",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "ForeignKey.convert_empty_strings": {
            "name": "convert_empty_strings",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ForeignKey.get_db_converters": {
            "name": "get_db_converters",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "ForeignKey.get_col": {
            "name": "get_col",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "OneToOneField.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "Any"
                ],
                "on_delete": [
                    "Any"
                ],
                "to_field": [
                    "Optional[Any]"
                ]
            }
        },
        "OneToOneField.deconstruct": {
            "name": "deconstruct",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneToOneField.formfield": {
            "name": "formfield",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneToOneField.save_form_data": {
            "name": "save_form_data",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "ManyToManyField.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "Any"
                ],
                "related_name": [
                    "Optional[Any]"
                ],
                "related_query_name": [
                    "Optional[Any]"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ],
                "symmetrical": [
                    "Optional[Any]"
                ],
                "through": [
                    "Optional[Any]"
                ],
                "through_fields": [
                    "Optional[Any]"
                ],
                "db_constraint": [
                    "bool"
                ],
                "db_table": [
                    "Optional[Any]"
                ],
                "swappable": [
                    "bool"
                ]
            }
        },
        "ManyToManyField.check": {
            "name": "check",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyField.deconstruct": {
            "name": "deconstruct",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyField.get_path_info": {
            "name": "get_path_info",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "ManyToManyField.get_reverse_path_info": {
            "name": "get_reverse_path_info",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "ManyToManyField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "ManyToManyField.contribute_to_related_class": {
            "name": "contribute_to_related_class",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "related": [
                    "Any"
                ]
            }
        },
        "ManyToManyField.set_attributes_from_rel": {
            "name": "set_attributes_from_rel",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyField.value_from_object": {
            "name": "value_from_object",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "ManyToManyField.save_form_data": {
            "name": "save_form_data",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "ManyToManyField.formfield": {
            "name": "formfield",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyField.db_check": {
            "name": "db_check",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "ManyToManyField.db_type": {
            "name": "db_type",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "ManyToManyField.db_parameters": {
            "name": "db_parameters",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/fields/related_descriptors.py": {
        "create_reverse_many_to_one_manager": {
            "name": "create_reverse_many_to_one_manager",
            "location": 42,
            "return": [],
            "arguments": {
                "superclass": [
                    "Any"
                ],
                "rel": [
                    "Any"
                ]
            }
        },
        "create_forward_many_to_many_manager": {
            "name": "create_forward_many_to_many_manager",
            "location": 51,
            "return": [],
            "arguments": {
                "superclass": [
                    "Any"
                ],
                "rel": [
                    "Any"
                ],
                "reverse": [
                    "Any"
                ]
            }
        },
        "ForwardManyToOneDescriptor.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_with_rel": [
                    "Any"
                ]
            }
        },
        "ForwardManyToOneDescriptor.RelatedObjectDoesNotExist": {
            "name": "RelatedObjectDoesNotExist",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwardManyToOneDescriptor.is_cached": {
            "name": "is_cached",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "ForwardManyToOneDescriptor.get_queryset": {
            "name": "get_queryset",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwardManyToOneDescriptor.get_prefetch_queryset": {
            "name": "get_prefetch_queryset",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [
                    "Any"
                ],
                "queryset": [
                    "Optional[Any]"
                ]
            }
        },
        "ForwardManyToOneDescriptor.get_object": {
            "name": "get_object",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "ForwardManyToOneDescriptor.__get__": {
            "name": "__get__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "ForwardManyToOneDescriptor.__set__": {
            "name": "__set__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ForwardManyToOneDescriptor.__reduce__": {
            "name": "__reduce__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwardOneToOneDescriptor.get_object": {
            "name": "get_object",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "ForwardOneToOneDescriptor.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ReverseOneToOneDescriptor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "related": [
                    "Any"
                ]
            }
        },
        "ReverseOneToOneDescriptor.RelatedObjectDoesNotExist": {
            "name": "RelatedObjectDoesNotExist",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReverseOneToOneDescriptor.is_cached": {
            "name": "is_cached",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "ReverseOneToOneDescriptor.get_queryset": {
            "name": "get_queryset",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReverseOneToOneDescriptor.get_prefetch_queryset": {
            "name": "get_prefetch_queryset",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [
                    "Any"
                ],
                "queryset": [
                    "Optional[Any]"
                ]
            }
        },
        "ReverseOneToOneDescriptor.__get__": {
            "name": "__get__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "ReverseOneToOneDescriptor.__set__": {
            "name": "__set__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ReverseOneToOneDescriptor.__reduce__": {
            "name": "__reduce__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReverseManyToOneDescriptor.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "Any"
                ]
            }
        },
        "ReverseManyToOneDescriptor.related_manager_cls": {
            "name": "related_manager_cls",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReverseManyToOneDescriptor.__get__": {
            "name": "__get__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "ReverseManyToOneDescriptor.__set__": {
            "name": "__set__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ManyToManyDescriptor.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "Any"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "ManyToManyDescriptor.through": {
            "name": "through",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyDescriptor.related_manager_cls": {
            "name": "related_manager_cls",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/fields/related_lookups.py": {
        "get_normalized_value": {
            "name": "get_normalized_value",
            "location": 15,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "lhs": [
                    "Any"
                ]
            }
        },
        "MultiColSource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "targets": [
                    "Any"
                ],
                "sources": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "MultiColSource.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "relabels": [
                    "Any"
                ]
            }
        },
        "MultiColSource.get_lookup": {
            "name": "get_lookup",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "lookup": [
                    "Any"
                ]
            }
        },
        "RelatedIn.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedIn.as_sql": {
            "name": "as_sql",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "RelatedLookupMixin.get_prep_lookup": {
            "name": "get_prep_lookup",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelatedLookupMixin.as_sql": {
            "name": "as_sql",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/fields/reverse_related.py": {
        "ForeignObjectRel.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "to": [
                    "Any"
                ],
                "related_name": [
                    "Optional[Any]"
                ],
                "related_query_name": [
                    "Optional[Any]"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ],
                "parent_link": [
                    "bool"
                ],
                "on_delete": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeignObjectRel.hidden": {
            "name": "hidden",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.name": {
            "name": "name",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.remote_field": {
            "name": "remote_field",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.target_field": {
            "name": "target_field",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.related_model": {
            "name": "related_model",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.many_to_many": {
            "name": "many_to_many",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.many_to_one": {
            "name": "many_to_one",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.one_to_many": {
            "name": "one_to_many",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.one_to_one": {
            "name": "one_to_one",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.get_lookup": {
            "name": "get_lookup",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_name": [
                    "Any"
                ]
            }
        },
        "ForeignObjectRel.get_internal_type": {
            "name": "get_internal_type",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.db_type": {
            "name": "db_type",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.get_choices": {
            "name": "get_choices",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "include_blank": [
                    "bool"
                ],
                "blank_choice": [
                    "Any"
                ]
            }
        },
        "ForeignObjectRel.is_hidden": {
            "name": "is_hidden",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.get_joining_columns": {
            "name": "get_joining_columns",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.get_extra_restriction": {
            "name": "get_extra_restriction",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "where_class": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ],
                "related_alias": [
                    "Any"
                ]
            }
        },
        "ForeignObjectRel.set_field_name": {
            "name": "set_field_name",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForeignObjectRel.get_accessor_name": {
            "name": "get_accessor_name",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeignObjectRel.get_path_info": {
            "name": "get_path_info",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "ForeignObjectRel.get_cache_name": {
            "name": "get_cache_name",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneRel.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "to": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "related_name": [
                    "Optional[Any]"
                ],
                "related_query_name": [
                    "Optional[Any]"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ],
                "parent_link": [
                    "bool"
                ],
                "on_delete": [
                    "Optional[Any]"
                ]
            }
        },
        "ManyToOneRel.get_related_field": {
            "name": "get_related_field",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneRel.set_field_name": {
            "name": "set_field_name",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToOneRel.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "to": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ],
                "related_name": [
                    "Optional[Any]"
                ],
                "related_query_name": [
                    "Optional[Any]"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ],
                "parent_link": [
                    "bool"
                ],
                "on_delete": [
                    "Optional[Any]"
                ]
            }
        },
        "ManyToManyRel.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "to": [
                    "Any"
                ],
                "related_name": [
                    "Optional[Any]"
                ],
                "related_query_name": [
                    "Optional[Any]"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ],
                "symmetrical": [
                    "bool"
                ],
                "through": [
                    "Optional[Any]"
                ],
                "through_fields": [
                    "Optional[Any]"
                ],
                "db_constraint": [
                    "bool"
                ]
            }
        },
        "ManyToManyRel.get_related_field": {
            "name": "get_related_field",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/fields/__init__.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "primary_key": [
                    "bool"
                ],
                "max_length": [
                    "Optional[Any]"
                ],
                "unique": [
                    "bool"
                ],
                "blank": [
                    "bool"
                ],
                "null": [
                    "bool"
                ],
                "db_index": [
                    "bool"
                ],
                "rel": [
                    "Optional[Any]"
                ],
                "default": [
                    "Any"
                ],
                "editable": [
                    "bool"
                ],
                "serialize": [
                    "bool"
                ],
                "unique_for_date": [
                    "Optional[Any]"
                ],
                "unique_for_month": [
                    "Optional[Any]"
                ],
                "unique_for_year": [
                    "Optional[Any]"
                ],
                "choices": [
                    "Optional[Any]"
                ],
                "help_text": [
                    "str"
                ],
                "db_column": [
                    "Optional[Any]"
                ],
                "db_tablespace": [
                    "Optional[Any]"
                ],
                "auto_created": [
                    "bool"
                ],
                "validators": [
                    "Any"
                ],
                "error_messages": [
                    "Optional[Any]"
                ]
            }
        },
        "Field.check": {
            "name": "check",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.get_col": {
            "name": "get_col",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ]
            }
        },
        "Field.cached_col": {
            "name": "cached_col",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.select_format": {
            "name": "select_format",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "sql": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "Field.deconstruct": {
            "name": "deconstruct",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.clone": {
            "name": "clone",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Field.__lt__": {
            "name": "__lt__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Field.__hash__": {
            "name": "__hash__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "memodict": [
                    "Any"
                ]
            }
        },
        "Field.__copy__": {
            "name": "__copy__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__reduce__": {
            "name": "__reduce__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.get_pk_value_on_save": {
            "name": "get_pk_value_on_save",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "Field.to_python": {
            "name": "to_python",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.validators": {
            "name": "validators",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.run_validators": {
            "name": "run_validators",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "model_instance": [
                    "Any"
                ]
            }
        },
        "Field.clean": {
            "name": "clean",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "model_instance": [
                    "Any"
                ]
            }
        },
        "Field.db_type_parameters": {
            "name": "db_type_parameters",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.db_check": {
            "name": "db_check",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.db_type": {
            "name": "db_type",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.rel_db_type": {
            "name": "rel_db_type",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.cast_db_type": {
            "name": "cast_db_type",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.db_parameters": {
            "name": "db_parameters",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.db_type_suffix": {
            "name": "db_type_suffix",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.get_db_converters": {
            "name": "get_db_converters",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.unique": {
            "name": "unique",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.db_tablespace": {
            "name": "db_tablespace",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.set_attributes_from_name": {
            "name": "set_attributes_from_name",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Field.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "private_only": [
                    "bool"
                ]
            }
        },
        "Field.get_filter_kwargs_for_object": {
            "name": "get_filter_kwargs_for_object",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Field.get_attname": {
            "name": "get_attname",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.get_attname_column": {
            "name": "get_attname_column",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.get_internal_type": {
            "name": "get_internal_type",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.pre_save": {
            "name": "pre_save",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "model_instance": [
                    "Any"
                ],
                "add": [
                    "Any"
                ]
            }
        },
        "Field.get_prep_value": {
            "name": "get_prep_value",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "Field.get_db_prep_save": {
            "name": "get_db_prep_save",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Field.has_default": {
            "name": "has_default",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.get_default": {
            "name": "get_default",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.get_choices": {
            "name": "get_choices",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "include_blank": [
                    "bool"
                ],
                "blank_choice": [
                    "Any"
                ],
                "limit_choices_to": [
                    "Optional[Any]"
                ]
            }
        },
        "Field.value_to_string": {
            "name": "value_to_string",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Field.save_form_data": {
            "name": "save_form_data",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "Field.formfield": {
            "name": "formfield",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.value_from_object": {
            "name": "value_from_object",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "AutoField.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoField.check": {
            "name": "check",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoField.deconstruct": {
            "name": "deconstruct",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoField.get_internal_type": {
            "name": "get_internal_type",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoField.to_python": {
            "name": "to_python",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "AutoField.rel_db_type": {
            "name": "rel_db_type",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "AutoField.validate": {
            "name": "validate",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "model_instance": [
                    "Any"
                ]
            }
        },
        "AutoField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "AutoField.get_prep_value": {
            "name": "get_prep_value",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "AutoField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "private_only": [
                    "bool"
                ]
            }
        },
        "AutoField.formfield": {
            "name": "formfield",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigAutoField.get_internal_type": {
            "name": "get_internal_type",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BigAutoField.rel_db_type": {
            "name": "rel_db_type",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "BooleanField.get_internal_type": {
            "name": "get_internal_type",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BooleanField.to_python": {
            "name": "to_python",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BooleanField.get_prep_value": {
            "name": "get_prep_value",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BooleanField.formfield": {
            "name": "formfield",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharField.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharField.check": {
            "name": "check",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharField.cast_db_type": {
            "name": "cast_db_type",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "CharField.get_internal_type": {
            "name": "get_internal_type",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharField.to_python": {
            "name": "to_python",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "CharField.get_prep_value": {
            "name": "get_prep_value",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "CharField.formfield": {
            "name": "formfield",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateTimeCheckMixin.check": {
            "name": "check",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateField.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "auto_now": [
                    "bool"
                ],
                "auto_now_add": [
                    "bool"
                ]
            }
        },
        "DateField.deconstruct": {
            "name": "deconstruct",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateField.get_internal_type": {
            "name": "get_internal_type",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateField.to_python": {
            "name": "to_python",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DateField.pre_save": {
            "name": "pre_save",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "model_instance": [
                    "Any"
                ],
                "add": [
                    "Any"
                ]
            }
        },
        "DateField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "private_only": [
                    "bool"
                ]
            }
        },
        "DateField.get_prep_value": {
            "name": "get_prep_value",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DateField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "DateField.value_to_string": {
            "name": "value_to_string",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "DateField.formfield": {
            "name": "formfield",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateTimeField.get_internal_type": {
            "name": "get_internal_type",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateTimeField.to_python": {
            "name": "to_python",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DateTimeField.pre_save": {
            "name": "pre_save",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "model_instance": [
                    "Any"
                ],
                "add": [
                    "Any"
                ]
            }
        },
        "DateTimeField.get_prep_value": {
            "name": "get_prep_value",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DateTimeField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "DateTimeField.value_to_string": {
            "name": "value_to_string",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "DateTimeField.formfield": {
            "name": "formfield",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "max_digits": [
                    "Optional[Any]"
                ],
                "decimal_places": [
                    "Optional[Any]"
                ]
            }
        },
        "DecimalField.check": {
            "name": "check",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.validators": {
            "name": "validators",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.context": {
            "name": "context",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.deconstruct": {
            "name": "deconstruct",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.get_internal_type": {
            "name": "get_internal_type",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.to_python": {
            "name": "to_python",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalField.get_db_prep_save": {
            "name": "get_db_prep_save",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "DecimalField.get_prep_value": {
            "name": "get_prep_value",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalField.formfield": {
            "name": "formfield",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationField.get_internal_type": {
            "name": "get_internal_type",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationField.to_python": {
            "name": "to_python",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DurationField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "DurationField.get_db_converters": {
            "name": "get_db_converters",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "DurationField.value_to_string": {
            "name": "value_to_string",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "DurationField.formfield": {
            "name": "formfield",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailField.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailField.deconstruct": {
            "name": "deconstruct",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailField.formfield": {
            "name": "formfield",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilePathField.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "path": [
                    "str"
                ],
                "match": [
                    "Optional[Any]"
                ],
                "recursive": [
                    "bool"
                ],
                "allow_files": [
                    "bool"
                ],
                "allow_folders": [
                    "bool"
                ]
            }
        },
        "FilePathField.check": {
            "name": "check",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilePathField.deconstruct": {
            "name": "deconstruct",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilePathField.get_prep_value": {
            "name": "get_prep_value",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FilePathField.formfield": {
            "name": "formfield",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilePathField.get_internal_type": {
            "name": "get_internal_type",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FloatField.get_prep_value": {
            "name": "get_prep_value",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FloatField.get_internal_type": {
            "name": "get_internal_type",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FloatField.to_python": {
            "name": "to_python",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FloatField.formfield": {
            "name": "formfield",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerField.check": {
            "name": "check",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerField.validators": {
            "name": "validators",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerField.get_prep_value": {
            "name": "get_prep_value",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "IntegerField.get_internal_type": {
            "name": "get_internal_type",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerField.to_python": {
            "name": "to_python",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "IntegerField.formfield": {
            "name": "formfield",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BigIntegerField.get_internal_type": {
            "name": "get_internal_type",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BigIntegerField.formfield": {
            "name": "formfield",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IPAddressField.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPAddressField.deconstruct": {
            "name": "deconstruct",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IPAddressField.get_prep_value": {
            "name": "get_prep_value",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "IPAddressField.get_internal_type": {
            "name": "get_internal_type",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericIPAddressField.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "protocol": [
                    "str"
                ],
                "unpack_ipv4": [
                    "bool"
                ]
            }
        },
        "GenericIPAddressField.check": {
            "name": "check",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericIPAddressField.deconstruct": {
            "name": "deconstruct",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericIPAddressField.get_internal_type": {
            "name": "get_internal_type",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericIPAddressField.to_python": {
            "name": "to_python",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "GenericIPAddressField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "GenericIPAddressField.get_prep_value": {
            "name": "get_prep_value",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "GenericIPAddressField.formfield": {
            "name": "formfield",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NullBooleanField.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullBooleanField.deconstruct": {
            "name": "deconstruct",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NullBooleanField.get_internal_type": {
            "name": "get_internal_type",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositiveIntegerRelDbTypeMixin.rel_db_type": {
            "name": "rel_db_type",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "PositiveIntegerField.get_internal_type": {
            "name": "get_internal_type",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositiveIntegerField.formfield": {
            "name": "formfield",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositiveSmallIntegerField.get_internal_type": {
            "name": "get_internal_type",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositiveSmallIntegerField.formfield": {
            "name": "formfield",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlugField.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlugField.deconstruct": {
            "name": "deconstruct",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlugField.get_internal_type": {
            "name": "get_internal_type",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlugField.formfield": {
            "name": "formfield",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SmallIntegerField.get_internal_type": {
            "name": "get_internal_type",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextField.get_internal_type": {
            "name": "get_internal_type",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextField.to_python": {
            "name": "to_python",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TextField.get_prep_value": {
            "name": "get_prep_value",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TextField.formfield": {
            "name": "formfield",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeField.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "auto_now": [
                    "bool"
                ],
                "auto_now_add": [
                    "bool"
                ]
            }
        },
        "TimeField.deconstruct": {
            "name": "deconstruct",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeField.get_internal_type": {
            "name": "get_internal_type",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeField.to_python": {
            "name": "to_python",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TimeField.pre_save": {
            "name": "pre_save",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "model_instance": [
                    "Any"
                ],
                "add": [
                    "Any"
                ]
            }
        },
        "TimeField.get_prep_value": {
            "name": "get_prep_value",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TimeField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "TimeField.value_to_string": {
            "name": "value_to_string",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "TimeField.formfield": {
            "name": "formfield",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLField.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "URLField.deconstruct": {
            "name": "deconstruct",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLField.formfield": {
            "name": "formfield",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryField.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryField.deconstruct": {
            "name": "deconstruct",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryField.get_internal_type": {
            "name": "get_internal_type",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryField.get_placeholder": {
            "name": "get_placeholder",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "BinaryField.get_default": {
            "name": "get_default",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "BinaryField.value_to_string": {
            "name": "value_to_string",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "BinaryField.to_python": {
            "name": "to_python",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "UUIDField.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose_name": [
                    "Optional[Any]"
                ]
            }
        },
        "UUIDField.deconstruct": {
            "name": "deconstruct",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UUIDField.get_internal_type": {
            "name": "get_internal_type",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UUIDField.get_db_prep_value": {
            "name": "get_db_prep_value",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "prepared": [
                    "bool"
                ]
            }
        },
        "UUIDField.to_python": {
            "name": "to_python",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "UUIDField.formfield": {
            "name": "formfield",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/functions/comparison.py": {
        "Cast.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "output_field": [
                    "Any"
                ]
            }
        },
        "Cast.as_sql": {
            "name": "as_sql",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Cast.as_mysql": {
            "name": "as_mysql",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Cast.as_postgresql": {
            "name": "as_postgresql",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Coalesce.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalesce.as_oracle": {
            "name": "as_oracle",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Greatest.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greatest.as_sqlite": {
            "name": "as_sqlite",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Least.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Least.as_sqlite": {
            "name": "as_sqlite",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/functions/datetime.py": {
        "TimezoneMixin.get_tzname": {
            "name": "get_tzname",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Extract.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "lookup_name": [
                    "Optional[Any]"
                ],
                "tzinfo": [
                    "Optional[Any]"
                ]
            }
        },
        "Extract.as_sql": {
            "name": "as_sql",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Extract.resolve_expression": {
            "name": "resolve_expression",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "Now.as_postgresql": {
            "name": "as_postgresql",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "TruncBase.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ],
                "tzinfo": [
                    "Optional[Any]"
                ]
            }
        },
        "TruncBase.as_sql": {
            "name": "as_sql",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "TruncBase.resolve_expression": {
            "name": "resolve_expression",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ],
                "for_save": [
                    "bool"
                ]
            }
        },
        "TruncBase.convert_value": {
            "name": "convert_value",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Trunc.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "kind": [
                    "Any"
                ],
                "output_field": [
                    "Optional[Any]"
                ],
                "tzinfo": [
                    "Optional[Any]"
                ]
            }
        },
        "TruncDate.as_sql": {
            "name": "as_sql",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "TruncTime.as_sql": {
            "name": "as_sql",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/functions/text.py": {
        "BytesToCharFieldConversionMixin.convert_value": {
            "name": "convert_value",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Chr.as_mysql": {
            "name": "as_mysql",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Chr.as_oracle": {
            "name": "as_oracle",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Chr.as_sqlite": {
            "name": "as_sqlite",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ConcatPair.as_sqlite": {
            "name": "as_sqlite",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ConcatPair.as_mysql": {
            "name": "as_mysql",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "ConcatPair.coalesce": {
            "name": "coalesce",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Concat.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Left.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "length": [
                    "Any"
                ]
            }
        },
        "Left.get_substr": {
            "name": "get_substr",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Left.use_substr": {
            "name": "use_substr",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Length.as_mysql": {
            "name": "as_mysql",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "LPad.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "length": [
                    "Any"
                ],
                "fill_text": [
                    "Any"
                ]
            }
        },
        "Ord.as_mysql": {
            "name": "as_mysql",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Ord.as_sqlite": {
            "name": "as_sqlite",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Repeat.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "number": [
                    "Any"
                ]
            }
        },
        "Repeat.as_oracle": {
            "name": "as_oracle",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Replace.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "text": [
                    "Any"
                ],
                "replacement": [
                    "Any"
                ]
            }
        },
        "Right.get_substr": {
            "name": "get_substr",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrIndex.as_postgresql": {
            "name": "as_postgresql",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Substr.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "pos": [
                    "Any"
                ],
                "length": [
                    "Optional[Any]"
                ]
            }
        },
        "Substr.as_sqlite": {
            "name": "as_sqlite",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Substr.as_oracle": {
            "name": "as_oracle",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/functions/window.py": {
        "LagLeadFunction.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "offset": [
                    "int"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "NthValue.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Any"
                ],
                "nth": [
                    "int"
                ]
            }
        },
        "Ntile.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_buckets": [
                    "int"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/functions/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/db/models/sql/compiler.py": {
        "cursor_iter": {
            "name": "cursor_iter",
            "location": 68,
            "return": [],
            "arguments": {
                "cursor": [
                    "Any"
                ],
                "sentinel": [
                    "Any"
                ],
                "col_count": [
                    "Any"
                ],
                "itersize": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.setup_query": {
            "name": "setup_query",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.pre_sql_setup": {
            "name": "pre_sql_setup",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.get_group_by": {
            "name": "get_group_by",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "select": [
                    "Any"
                ],
                "order_by": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.collapse_group_by": {
            "name": "collapse_group_by",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "expressions": [
                    "Any"
                ],
                "having": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.get_select": {
            "name": "get_select",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.get_order_by": {
            "name": "get_order_by",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.get_extra_select": {
            "name": "get_extra_select",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "order_by": [
                    "Any"
                ],
                "select": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.quote_name_unless_alias": {
            "name": "quote_name_unless_alias",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.compile": {
            "name": "compile",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Any"
                ],
                "select_format": [
                    "bool"
                ]
            }
        },
        "SQLCompiler.get_combinator_sql": {
            "name": "get_combinator_sql",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "combinator": [
                    "Any"
                ],
                "all": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.as_sql": {
            "name": "as_sql",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "with_limits": [
                    "bool"
                ],
                "with_col_aliases": [
                    "bool"
                ]
            }
        },
        "SQLCompiler.get_default_columns": {
            "name": "get_default_columns",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "start_alias": [
                    "Optional[Any]"
                ],
                "opts": [
                    "Optional[Any]"
                ],
                "from_parent": [
                    "Optional[Any]"
                ]
            }
        },
        "SQLCompiler.get_distinct": {
            "name": "get_distinct",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.find_ordering_name": {
            "name": "find_ordering_name",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "opts": [
                    "Any"
                ],
                "alias": [
                    "Optional[Any]"
                ],
                "default_order": [
                    "str"
                ],
                "already_seen": [
                    "Optional[Any]"
                ]
            }
        },
        "SQLCompiler.get_from_clause": {
            "name": "get_from_clause",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.get_related_selections": {
            "name": "get_related_selections",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "select": [
                    "Any"
                ],
                "opts": [
                    "Optional[Any]"
                ],
                "root_alias": [
                    "Optional[Any]"
                ],
                "cur_depth": [
                    "int"
                ],
                "requested": [
                    "Optional[Any]"
                ],
                "restricted": [
                    "Optional[Any]"
                ]
            }
        },
        "SQLCompiler.get_select_for_update_of_arguments": {
            "name": "get_select_for_update_of_arguments",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.deferred_to_columns": {
            "name": "deferred_to_columns",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.get_converters": {
            "name": "get_converters",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "expressions": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.apply_converters": {
            "name": "apply_converters",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Any"
                ],
                "converters": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.results_iter": {
            "name": "results_iter",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "results": [
                    "Optional[Any]"
                ],
                "tuple_expected": [
                    "bool"
                ],
                "chunked_fetch": [
                    "bool"
                ],
                "chunk_size": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.has_results": {
            "name": "has_results",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.execute_sql": {
            "name": "execute_sql",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "result_type": [
                    "Any"
                ],
                "chunked_fetch": [
                    "bool"
                ],
                "chunk_size": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.as_subquery_condition": {
            "name": "as_subquery_condition",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "compiler": [
                    "Any"
                ]
            }
        },
        "SQLCompiler.explain_query": {
            "name": "explain_query",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLInsertCompiler.field_as_sql": {
            "name": "field_as_sql",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "val": [
                    "Any"
                ]
            }
        },
        "SQLInsertCompiler.prepare_value": {
            "name": "prepare_value",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SQLInsertCompiler.pre_save_val": {
            "name": "pre_save_val",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "SQLInsertCompiler.assemble_as_sql": {
            "name": "assemble_as_sql",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "value_rows": [
                    "Any"
                ]
            }
        },
        "SQLInsertCompiler.as_sql": {
            "name": "as_sql",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLInsertCompiler.execute_sql": {
            "name": "execute_sql",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "return_id": [
                    "bool"
                ]
            }
        },
        "SQLDeleteCompiler.as_sql": {
            "name": "as_sql",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLUpdateCompiler.as_sql": {
            "name": "as_sql",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLUpdateCompiler.execute_sql": {
            "name": "execute_sql",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "result_type": [
                    "Any"
                ]
            }
        },
        "SQLUpdateCompiler.pre_sql_setup": {
            "name": "pre_sql_setup",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAggregateCompiler.as_sql": {
            "name": "as_sql",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/sql/constants.py": {},
    "django-graphql-master/mypy_stubs/django/db/models/sql/datastructures.py": {
        "MultiJoin.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names_pos": [
                    "Any"
                ],
                "path_with_names": [
                    "Any"
                ]
            }
        },
        "Join.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "Any"
                ],
                "parent_alias": [
                    "Any"
                ],
                "table_alias": [
                    "Any"
                ],
                "join_type": [
                    "Any"
                ],
                "join_field": [
                    "Any"
                ],
                "nullable": [
                    "Any"
                ],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "Join.as_sql": {
            "name": "as_sql",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Join.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "Join.equals": {
            "name": "equals",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "with_filtered_relation": [
                    "Any"
                ]
            }
        },
        "Join.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Join.demote": {
            "name": "demote",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Join.promote": {
            "name": "promote",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTable.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ]
            }
        },
        "BaseTable.as_sql": {
            "name": "as_sql",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "BaseTable.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "BaseTable.equals": {
            "name": "equals",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ],
                "with_filtered_relation": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/sql/query.py": {
        "RawQuery.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Any"
                ],
                "using": [
                    "Any"
                ],
                "params": [
                    "Optional[Any]"
                ]
            }
        },
        "RawQuery.chain": {
            "name": "chain",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ]
            }
        },
        "RawQuery.clone": {
            "name": "clone",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ]
            }
        },
        "RawQuery.get_columns": {
            "name": "get_columns",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuery.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawQuery.params_type": {
            "name": "params_type",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "where": [
                    "Any"
                ]
            }
        },
        "Query.extra": {
            "name": "extra",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.annotations": {
            "name": "annotations",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.has_select_fields": {
            "name": "has_select_fields",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.base_table": {
            "name": "base_table",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.sql_with_params": {
            "name": "sql_with_params",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "Query.get_compiler": {
            "name": "get_compiler",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ]
            }
        },
        "Query.get_meta": {
            "name": "get_meta",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.clone": {
            "name": "clone",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.chain": {
            "name": "chain",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "klass": [
                    "Optional[Any]"
                ]
            }
        },
        "Query.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "Query.rewrite_cols": {
            "name": "rewrite_cols",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "annotation": [
                    "Any"
                ],
                "col_cnt": [
                    "Any"
                ]
            }
        },
        "Query.get_aggregation": {
            "name": "get_aggregation",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ],
                "added_aggregate_names": [
                    "Any"
                ]
            }
        },
        "Query.get_count": {
            "name": "get_count",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ]
            }
        },
        "Query.has_filters": {
            "name": "has_filters",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.has_results": {
            "name": "has_results",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ]
            }
        },
        "Query.explain": {
            "name": "explain",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "Any"
                ],
                "format": [
                    "Optional[Any]"
                ]
            }
        },
        "Query.combine": {
            "name": "combine",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "Any"
                ],
                "connector": [
                    "Any"
                ]
            }
        },
        "Query.deferred_to_data": {
            "name": "deferred_to_data",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ],
                "callback": [
                    "Any"
                ]
            }
        },
        "Query.table_alias": {
            "name": "table_alias",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [
                    "Any"
                ],
                "create": [
                    "bool"
                ],
                "filtered_relation": [
                    "Optional[Any]"
                ]
            }
        },
        "Query.ref_alias": {
            "name": "ref_alias",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "Query.unref_alias": {
            "name": "unref_alias",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Query.promote_joins": {
            "name": "promote_joins",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "Any"
                ]
            }
        },
        "Query.demote_joins": {
            "name": "demote_joins",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "Any"
                ]
            }
        },
        "Query.reset_refcounts": {
            "name": "reset_refcounts",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_counts": [
                    "Any"
                ]
            }
        },
        "Query.change_aliases": {
            "name": "change_aliases",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "Query.bump_prefix": {
            "name": "bump_prefix",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outer_query": [
                    "Any"
                ]
            }
        },
        "Query.get_initial_alias": {
            "name": "get_initial_alias",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.count_active_tables": {
            "name": "count_active_tables",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.join": {
            "name": "join",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "join": [
                    "Any"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "reuse_with_filtered_relation": [
                    "bool"
                ]
            }
        },
        "Query.join_parent_model": {
            "name": "join_parent_model",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ],
                "seen": [
                    "Any"
                ]
            }
        },
        "Query.add_annotation": {
            "name": "add_annotation",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ],
                "is_summary": [
                    "bool"
                ]
            }
        },
        "Query.resolve_expression": {
            "name": "resolve_expression",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ]
            }
        },
        "Query.as_sql": {
            "name": "as_sql",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "Query.resolve_lookup_value": {
            "name": "resolve_lookup_value",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "can_reuse": [
                    "Any"
                ],
                "allow_joins": [
                    "Any"
                ]
            }
        },
        "Query.solve_lookup_type": {
            "name": "solve_lookup_type",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "lookup": [
                    "Any"
                ]
            }
        },
        "Query.check_query_object_type": {
            "name": "check_query_object_type",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "opts": [
                    "Any"
                ],
                "field": [
                    "Any"
                ]
            }
        },
        "Query.check_related_objects": {
            "name": "check_related_objects",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "opts": [
                    "Any"
                ]
            }
        },
        "Query.build_lookup": {
            "name": "build_lookup",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "lookups": [
                    "Any"
                ],
                "lhs": [
                    "Any"
                ],
                "rhs": [
                    "Any"
                ]
            }
        },
        "Query.try_transform": {
            "name": "try_transform",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "lhs": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "Query.build_filter": {
            "name": "build_filter",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "filter_expr": [
                    "Any"
                ],
                "branch_negated": [
                    "bool"
                ],
                "current_negated": [
                    "bool"
                ],
                "can_reuse": [
                    "Optional[Any]"
                ],
                "allow_joins": [
                    "bool"
                ],
                "split_subq": [
                    "bool"
                ],
                "reuse_with_filtered_relation": [
                    "bool"
                ]
            }
        },
        "Query.add_filter": {
            "name": "add_filter",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_clause": [
                    "Any"
                ]
            }
        },
        "Query.add_q": {
            "name": "add_q",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q_object": [
                    "Any"
                ]
            }
        },
        "Query.build_filtered_relation_q": {
            "name": "build_filtered_relation_q",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "q_object": [
                    "Any"
                ],
                "reuse": [
                    "Any"
                ],
                "branch_negated": [
                    "bool"
                ],
                "current_negated": [
                    "bool"
                ]
            }
        },
        "Query.add_filtered_relation": {
            "name": "add_filtered_relation",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filtered_relation": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ]
            }
        },
        "Query.names_to_path": {
            "name": "names_to_path",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "names": [
                    "Any"
                ],
                "opts": [
                    "Any"
                ],
                "allow_many": [
                    "bool"
                ],
                "fail_on_missing": [
                    "bool"
                ]
            }
        },
        "Query.setup_joins": {
            "name": "setup_joins",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "names": [
                    "Any"
                ],
                "opts": [
                    "Any"
                ],
                "alias": [
                    "Any"
                ],
                "can_reuse": [
                    "Optional[Any]"
                ],
                "allow_many": [
                    "bool"
                ],
                "reuse_with_filtered_relation": [
                    "bool"
                ]
            }
        },
        "Query.trim_joins": {
            "name": "trim_joins",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "targets": [
                    "Any"
                ],
                "joins": [
                    "Any"
                ],
                "path": [
                    "Any"
                ]
            }
        },
        "Query.resolve_ref": {
            "name": "resolve_ref",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "allow_joins": [
                    "bool"
                ],
                "reuse": [
                    "Optional[Any]"
                ],
                "summarize": [
                    "bool"
                ]
            }
        },
        "Query.split_exclude": {
            "name": "split_exclude",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "filter_expr": [
                    "Any"
                ],
                "can_reuse": [
                    "Any"
                ],
                "names_with_path": [
                    "Any"
                ]
            }
        },
        "Query.set_empty": {
            "name": "set_empty",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.is_empty": {
            "name": "is_empty",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.set_limits": {
            "name": "set_limits",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "Optional[Any]"
                ],
                "high": [
                    "Optional[Any]"
                ]
            }
        },
        "Query.clear_limits": {
            "name": "clear_limits",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.has_limit_one": {
            "name": "has_limit_one",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.can_filter": {
            "name": "can_filter",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.clear_select_clause": {
            "name": "clear_select_clause",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.clear_select_fields": {
            "name": "clear_select_fields",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.set_select": {
            "name": "set_select",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols": [
                    "Any"
                ]
            }
        },
        "Query.add_distinct_fields": {
            "name": "add_distinct_fields",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.add_fields": {
            "name": "add_fields",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_names": [
                    "Any"
                ],
                "allow_m2m": [
                    "bool"
                ]
            }
        },
        "Query.add_ordering": {
            "name": "add_ordering",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.clear_ordering": {
            "name": "clear_ordering",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_empty": [
                    "Any"
                ]
            }
        },
        "Query.set_group_by": {
            "name": "set_group_by",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.add_select_related": {
            "name": "add_select_related",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ]
            }
        },
        "Query.add_extra": {
            "name": "add_extra",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "select": [
                    "Any"
                ],
                "select_params": [
                    "Any"
                ],
                "where": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "tables": [
                    "Any"
                ],
                "order_by": [
                    "Any"
                ]
            }
        },
        "Query.clear_deferred_loading": {
            "name": "clear_deferred_loading",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.add_deferred_loading": {
            "name": "add_deferred_loading",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_names": [
                    "Any"
                ]
            }
        },
        "Query.add_immediate_loading": {
            "name": "add_immediate_loading",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_names": [
                    "Any"
                ]
            }
        },
        "Query.get_loaded_field_names": {
            "name": "get_loaded_field_names",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.get_loaded_field_names_cb": {
            "name": "get_loaded_field_names_cb",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "fields": [
                    "Any"
                ]
            }
        },
        "Query.set_annotation_mask": {
            "name": "set_annotation_mask",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "Any"
                ]
            }
        },
        "Query.append_annotation_mask": {
            "name": "append_annotation_mask",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "Any"
                ]
            }
        },
        "Query.set_extra_mask": {
            "name": "set_extra_mask",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "Any"
                ]
            }
        },
        "Query.set_values": {
            "name": "set_values",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ]
            }
        },
        "Query.annotation_select": {
            "name": "annotation_select",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.extra_select": {
            "name": "extra_select",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.trim_start": {
            "name": "trim_start",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "names_with_path": [
                    "Any"
                ]
            }
        },
        "Query.is_nullable": {
            "name": "is_nullable",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "JoinPromoter.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "Any"
                ],
                "num_children": [
                    "Any"
                ],
                "negated": [
                    "Any"
                ]
            }
        },
        "JoinPromoter.add_votes": {
            "name": "add_votes",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "votes": [
                    "Any"
                ]
            }
        },
        "JoinPromoter.update_join_types": {
            "name": "update_join_types",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/sql/subqueries.py": {
        "DeleteQuery.do_query": {
            "name": "do_query",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "Any"
                ],
                "where": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "DeleteQuery.delete_batch": {
            "name": "delete_batch",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "pk_list": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "DeleteQuery.delete_qs": {
            "name": "delete_qs",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "UpdateQuery.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateQuery.clone": {
            "name": "clone",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateQuery.update_batch": {
            "name": "update_batch",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk_list": [
                    "Any"
                ],
                "values": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        },
        "UpdateQuery.add_update_values": {
            "name": "add_update_values",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ]
            }
        },
        "UpdateQuery.add_update_fields": {
            "name": "add_update_fields",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values_seq": [
                    "Any"
                ]
            }
        },
        "UpdateQuery.add_related_update": {
            "name": "add_related_update",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "UpdateQuery.get_related_updates": {
            "name": "get_related_updates",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InsertQuery.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertQuery.insert_values": {
            "name": "insert_values",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ],
                "objs": [
                    "Any"
                ],
                "raw": [
                    "bool"
                ]
            }
        },
        "AggregateQuery.add_subquery": {
            "name": "add_subquery",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Any"
                ],
                "using": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/sql/where.py": {
        "WhereNode.split_having": {
            "name": "split_having",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "negated": [
                    "bool"
                ]
            }
        },
        "WhereNode.as_sql": {
            "name": "as_sql",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "WhereNode.get_group_by_cols": {
            "name": "get_group_by_cols",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhereNode.get_source_expressions": {
            "name": "get_source_expressions",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhereNode.set_source_expressions": {
            "name": "set_source_expressions",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Any"
                ]
            }
        },
        "WhereNode.relabel_aliases": {
            "name": "relabel_aliases",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "WhereNode.clone": {
            "name": "clone",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhereNode.relabeled_clone": {
            "name": "relabeled_clone",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "change_map": [
                    "Any"
                ]
            }
        },
        "WhereNode.contains_aggregate": {
            "name": "contains_aggregate",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhereNode.contains_over_clause": {
            "name": "contains_over_clause",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhereNode.is_summary": {
            "name": "is_summary",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhereNode.resolve_expression": {
            "name": "resolve_expression",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NothingNode.as_sql": {
            "name": "as_sql",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ]
            }
        },
        "ExtraWhere.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqls": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "ExtraWhere.as_sql": {
            "name": "as_sql",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Optional[Any]"
                ],
                "connection": [
                    "Optional[Any]"
                ]
            }
        },
        "SubqueryConstraint.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ],
                "columns": [
                    "Any"
                ],
                "targets": [
                    "Any"
                ],
                "query_object": [
                    "Any"
                ]
            }
        },
        "SubqueryConstraint.as_sql": {
            "name": "as_sql",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/db/models/sql/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/dispatch/dispatcher.py": {
        "receiver": {
            "name": "receiver",
            "location": 23,
            "return": [],
            "arguments": {
                "signal": [
                    "Any"
                ]
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "providing_args": [
                    "Optional[Any]"
                ],
                "use_caching": [
                    "bool"
                ]
            }
        },
        "Signal.connect": {
            "name": "connect",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "Any"
                ],
                "sender": [
                    "Optional[Any]"
                ],
                "weak": [
                    "bool"
                ],
                "dispatch_uid": [
                    "Optional[Any]"
                ]
            }
        },
        "Signal.disconnect": {
            "name": "disconnect",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "receiver": [
                    "Optional[Any]"
                ],
                "sender": [
                    "Optional[Any]"
                ],
                "dispatch_uid": [
                    "Optional[Any]"
                ]
            }
        },
        "Signal.has_listeners": {
            "name": "has_listeners",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "Optional[Any]"
                ]
            }
        },
        "Signal.send": {
            "name": "send",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "Any"
                ]
            }
        },
        "Signal.send_robust": {
            "name": "send_robust",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/dispatch/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/forms/boundfield.py": {
        "BoundField.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "BoundField.subwidgets": {
            "name": "subwidgets",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.__bool__": {
            "name": "__bool__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.__iter__": {
            "name": "__iter__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.__len__": {
            "name": "__len__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.__getitem__": {
            "name": "__getitem__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "Any"
                ]
            }
        },
        "BoundField.errors": {
            "name": "errors",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.as_widget": {
            "name": "as_widget",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "Optional[Any]"
                ],
                "attrs": [
                    "Optional[Any]"
                ],
                "only_initial": [
                    "bool"
                ]
            }
        },
        "BoundField.as_text": {
            "name": "as_text",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "BoundField.as_textarea": {
            "name": "as_textarea",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "BoundField.as_hidden": {
            "name": "as_hidden",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "BoundField.data": {
            "name": "data",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.value": {
            "name": "value",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.label_tag": {
            "name": "label_tag",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "contents": [
                    "Optional[Any]"
                ],
                "attrs": [
                    "Optional[Any]"
                ],
                "label_suffix": [
                    "Optional[Any]"
                ]
            }
        },
        "BoundField.css_classes": {
            "name": "css_classes",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "extra_classes": [
                    "Optional[Any]"
                ]
            }
        },
        "BoundField.is_hidden": {
            "name": "is_hidden",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.auto_id": {
            "name": "auto_id",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.id_for_label": {
            "name": "id_for_label",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.initial": {
            "name": "initial",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundField.build_widget_attrs": {
            "name": "build_widget_attrs",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": [
                    "Any"
                ],
                "widget": [
                    "Optional[Any]"
                ]
            }
        },
        "BoundWidget.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_widget": [
                    "Any"
                ],
                "data": [
                    "Any"
                ],
                "renderer": [
                    "Any"
                ]
            }
        },
        "BoundWidget.tag": {
            "name": "tag",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "wrap_label": [
                    "bool"
                ]
            }
        },
        "BoundWidget.template_name": {
            "name": "template_name",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundWidget.id_for_label": {
            "name": "id_for_label",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundWidget.choice_label": {
            "name": "choice_label",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/fields.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.prepare_value": {
            "name": "prepare_value",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.to_python": {
            "name": "to_python",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.run_validators": {
            "name": "run_validators",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.clean": {
            "name": "clean",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Field.bound_data": {
            "name": "bound_data",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "initial": [
                    "Any"
                ]
            }
        },
        "Field.widget_attrs": {
            "name": "widget_attrs",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ]
            }
        },
        "Field.has_changed": {
            "name": "has_changed",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "Field.get_bound_field": {
            "name": "get_bound_field",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        },
        "Field.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "CharField.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharField.to_python": {
            "name": "to_python",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "CharField.widget_attrs": {
            "name": "widget_attrs",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ]
            }
        },
        "IntegerField.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerField.to_python": {
            "name": "to_python",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "IntegerField.widget_attrs": {
            "name": "widget_attrs",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ]
            }
        },
        "FloatField.to_python": {
            "name": "to_python",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FloatField.validate": {
            "name": "validate",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FloatField.widget_attrs": {
            "name": "widget_attrs",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ]
            }
        },
        "DecimalField.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.to_python": {
            "name": "to_python",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalField.validate": {
            "name": "validate",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalField.widget_attrs": {
            "name": "widget_attrs",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ]
            }
        },
        "BaseTemporalField.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTemporalField.to_python": {
            "name": "to_python",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseTemporalField.strptime": {
            "name": "strptime",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "format": [
                    "Any"
                ]
            }
        },
        "DateField.to_python": {
            "name": "to_python",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DateField.strptime": {
            "name": "strptime",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "format": [
                    "Any"
                ]
            }
        },
        "TimeField.to_python": {
            "name": "to_python",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TimeField.strptime": {
            "name": "strptime",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "format": [
                    "Any"
                ]
            }
        },
        "DateTimeField.prepare_value": {
            "name": "prepare_value",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DateTimeField.to_python": {
            "name": "to_python",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DateTimeField.strptime": {
            "name": "strptime",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "format": [
                    "Any"
                ]
            }
        },
        "DurationField.prepare_value": {
            "name": "prepare_value",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DurationField.to_python": {
            "name": "to_python",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "RegexField.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "Any"
                ]
            }
        },
        "EmailField.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileField.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileField.to_python": {
            "name": "to_python",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "FileField.clean": {
            "name": "clean",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "initial": [
                    "Optional[Any]"
                ]
            }
        },
        "FileField.bound_data": {
            "name": "bound_data",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "initial": [
                    "Any"
                ]
            }
        },
        "FileField.has_changed": {
            "name": "has_changed",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "ImageField.to_python": {
            "name": "to_python",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "ImageField.widget_attrs": {
            "name": "widget_attrs",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [
                    "Any"
                ]
            }
        },
        "URLField.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLField.to_python": {
            "name": "to_python",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BooleanField.to_python": {
            "name": "to_python",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BooleanField.validate": {
            "name": "validate",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BooleanField.has_changed": {
            "name": "has_changed",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "NullBooleanField.to_python": {
            "name": "to_python",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "NullBooleanField.validate": {
            "name": "validate",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "CallableChoiceIterator.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices_func": [
                    "Any"
                ]
            }
        },
        "CallableChoiceIterator.__iter__": {
            "name": "__iter__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceField.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceField.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "ChoiceField.to_python": {
            "name": "to_python",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ChoiceField.validate": {
            "name": "validate",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ChoiceField.valid_value": {
            "name": "valid_value",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TypedChoiceField.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedChoiceField.clean": {
            "name": "clean",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultipleChoiceField.to_python": {
            "name": "to_python",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultipleChoiceField.validate": {
            "name": "validate",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultipleChoiceField.has_changed": {
            "name": "has_changed",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "TypedMultipleChoiceField.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedMultipleChoiceField.clean": {
            "name": "clean",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TypedMultipleChoiceField.validate": {
            "name": "validate",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ComboField.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ]
            }
        },
        "ComboField.clean": {
            "name": "clean",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultiValueField.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Any"
                ]
            }
        },
        "MultiValueField.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "MultiValueField.validate": {
            "name": "validate",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultiValueField.clean": {
            "name": "clean",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultiValueField.compress": {
            "name": "compress",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_list": [
                    "Any"
                ]
            }
        },
        "MultiValueField.has_changed": {
            "name": "has_changed",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "FilePathField.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "SplitDateTimeField.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplitDateTimeField.compress": {
            "name": "compress",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "data_list": [
                    "Any"
                ]
            }
        },
        "GenericIPAddressField.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericIPAddressField.to_python": {
            "name": "to_python",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SlugField.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUIDField.prepare_value": {
            "name": "prepare_value",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "UUIDField.to_python": {
            "name": "to_python",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/forms.py": {
        "DeclarativeFieldsMetaclass.__new__": {
            "name": "__new__",
            "location": 9,
            "return": [],
            "arguments": {
                "mcs": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "bases": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "DeclarativeFieldsMetaclass.__prepare__": {
            "name": "__prepare__",
            "location": 11,
            "return": [],
            "arguments": {
                "mcs": [
                    "Any"
                ]
            }
        },
        "BaseForm.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Any]"
                ],
                "files": [
                    "Optional[Any]"
                ],
                "auto_id": [
                    "str"
                ],
                "prefix": [
                    "Optional[Any]"
                ],
                "initial": [
                    "Optional[Any]"
                ],
                "error_class": [
                    "Any"
                ],
                "label_suffix": [
                    "Optional[Any]"
                ],
                "empty_permitted": [
                    "bool"
                ],
                "field_order": [
                    "Optional[Any]"
                ],
                "use_required_attribute": [
                    "Optional[Any]"
                ],
                "renderer": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseForm.order_fields": {
            "name": "order_fields",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_order": [
                    "Any"
                ]
            }
        },
        "BaseForm.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.__getitem__": {
            "name": "__getitem__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BaseForm.errors": {
            "name": "errors",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.is_valid": {
            "name": "is_valid",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.add_prefix": {
            "name": "add_prefix",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ]
            }
        },
        "BaseForm.add_initial_prefix": {
            "name": "add_initial_prefix",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "Any"
                ]
            }
        },
        "BaseForm.as_table": {
            "name": "as_table",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.as_ul": {
            "name": "as_ul",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.as_p": {
            "name": "as_p",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.non_field_errors": {
            "name": "non_field_errors",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.add_error": {
            "name": "add_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "error": [
                    "Any"
                ]
            }
        },
        "BaseForm.has_error": {
            "name": "has_error",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "code": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseForm.full_clean": {
            "name": "full_clean",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.clean": {
            "name": "clean",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.has_changed": {
            "name": "has_changed",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.changed_data": {
            "name": "changed_data",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.media": {
            "name": "media",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.is_multipart": {
            "name": "is_multipart",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.hidden_fields": {
            "name": "hidden_fields",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.visible_fields": {
            "name": "visible_fields",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseForm.get_initial_for_field": {
            "name": "get_initial_for_field",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ],
                "field_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/formsets.py": {
        "formset_factory": {
            "name": "formset_factory",
            "location": 61,
            "return": [],
            "arguments": {
                "form": [
                    "Any"
                ],
                "formset": [
                    "Any"
                ],
                "extra": [
                    "int"
                ],
                "can_order": [
                    "bool"
                ],
                "can_delete": [
                    "bool"
                ],
                "max_num": [
                    "Optional[Any]"
                ],
                "validate_max": [
                    "bool"
                ],
                "min_num": [
                    "Optional[Any]"
                ],
                "validate_min": [
                    "bool"
                ]
            }
        },
        "all_valid": {
            "name": "all_valid",
            "location": 62,
            "return": [],
            "arguments": {
                "formsets": [
                    "Any"
                ]
            }
        },
        "ManagementForm.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Any]"
                ],
                "files": [
                    "Optional[Any]"
                ],
                "auto_id": [
                    "str"
                ],
                "prefix": [
                    "Optional[Any]"
                ],
                "initial": [
                    "Optional[Any]"
                ],
                "error_class": [
                    "Any"
                ],
                "form_kwargs": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseFormSet.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseFormSet.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.__bool__": {
            "name": "__bool__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.management_form": {
            "name": "management_form",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.total_form_count": {
            "name": "total_form_count",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.initial_form_count": {
            "name": "initial_form_count",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.forms": {
            "name": "forms",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseFormSet.initial_forms": {
            "name": "initial_forms",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.extra_forms": {
            "name": "extra_forms",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.empty_form": {
            "name": "empty_form",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.cleaned_data": {
            "name": "cleaned_data",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.deleted_forms": {
            "name": "deleted_forms",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.ordered_forms": {
            "name": "ordered_forms",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.get_default_prefix": {
            "name": "get_default_prefix",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseFormSet.non_form_errors": {
            "name": "non_form_errors",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.errors": {
            "name": "errors",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.total_error_count": {
            "name": "total_error_count",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.is_valid": {
            "name": "is_valid",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.full_clean": {
            "name": "full_clean",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.clean": {
            "name": "clean",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.has_changed": {
            "name": "has_changed",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.add_fields": {
            "name": "add_fields",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseFormSet.add_prefix": {
            "name": "add_prefix",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseFormSet.is_multipart": {
            "name": "is_multipart",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.media": {
            "name": "media",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.as_table": {
            "name": "as_table",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.as_p": {
            "name": "as_p",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.as_ul": {
            "name": "as_ul",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/models.py": {
        "model_to_dict": {
            "name": "model_to_dict",
            "location": 12,
            "return": [],
            "arguments": {
                "instance": [
                    "Any"
                ],
                "fields": [
                    "Optional[Any]"
                ],
                "exclude": [
                    "Optional[Any]"
                ]
            }
        },
        "fields_for_model": {
            "name": "fields_for_model",
            "location": 13,
            "return": [],
            "arguments": {
                "model": [
                    "Any"
                ],
                "fields": [
                    "Optional[Any]"
                ],
                "exclude": [
                    "Optional[Any]"
                ],
                "widgets": [
                    "Optional[Any]"
                ],
                "formfield_callback": [
                    "Optional[Any]"
                ],
                "localized_fields": [
                    "Optional[Any]"
                ],
                "labels": [
                    "Optional[Any]"
                ],
                "help_texts": [
                    "Optional[Any]"
                ],
                "error_messages": [
                    "Optional[Any]"
                ],
                "field_classes": [
                    "Optional[Any]"
                ]
            }
        },
        "modelform_factory": {
            "name": "modelform_factory",
            "location": 40,
            "return": [],
            "arguments": {
                "model": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "fields": [
                    "Optional[Any]"
                ],
                "exclude": [
                    "Optional[Any]"
                ],
                "formfield_callback": [
                    "Optional[Any]"
                ],
                "widgets": [
                    "Optional[Any]"
                ],
                "localized_fields": [
                    "Optional[Any]"
                ],
                "labels": [
                    "Optional[Any]"
                ],
                "help_texts": [
                    "Optional[Any]"
                ],
                "error_messages": [
                    "Optional[Any]"
                ],
                "field_classes": [
                    "Optional[Any]"
                ]
            }
        },
        "modelformset_factory": {
            "name": "modelformset_factory",
            "location": 68,
            "return": [],
            "arguments": {
                "model": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "formfield_callback": [
                    "Optional[Any]"
                ],
                "formset": [
                    "Any"
                ],
                "extra": [
                    "int"
                ],
                "can_delete": [
                    "bool"
                ],
                "can_order": [
                    "bool"
                ],
                "max_num": [
                    "Optional[Any]"
                ],
                "fields": [
                    "Optional[Any]"
                ],
                "exclude": [
                    "Optional[Any]"
                ],
                "widgets": [
                    "Optional[Any]"
                ],
                "validate_max": [
                    "bool"
                ],
                "localized_fields": [
                    "Optional[Any]"
                ],
                "labels": [
                    "Optional[Any]"
                ],
                "help_texts": [
                    "Optional[Any]"
                ],
                "error_messages": [
                    "Optional[Any]"
                ],
                "min_num": [
                    "Optional[Any]"
                ],
                "validate_min": [
                    "bool"
                ],
                "field_classes": [
                    "Optional[Any]"
                ]
            }
        },
        "inlineformset_factory": {
            "name": "inlineformset_factory",
            "location": 82,
            "return": [],
            "arguments": {
                "parent_model": [
                    "Any"
                ],
                "model": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "formset": [
                    "Any"
                ],
                "fk_name": [
                    "Optional[Any]"
                ],
                "fields": [
                    "Optional[Any]"
                ],
                "exclude": [
                    "Optional[Any]"
                ],
                "extra": [
                    "int"
                ],
                "can_order": [
                    "bool"
                ],
                "can_delete": [
                    "bool"
                ],
                "max_num": [
                    "Optional[Any]"
                ],
                "formfield_callback": [
                    "Optional[Any]"
                ],
                "widgets": [
                    "Optional[Any]"
                ],
                "validate_max": [
                    "bool"
                ],
                "localized_fields": [
                    "Optional[Any]"
                ],
                "labels": [
                    "Optional[Any]"
                ],
                "help_texts": [
                    "Optional[Any]"
                ],
                "error_messages": [
                    "Optional[Any]"
                ],
                "min_num": [
                    "Optional[Any]"
                ],
                "validate_min": [
                    "bool"
                ],
                "field_classes": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelFormOptions.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Optional[Any]"
                ]
            }
        },
        "ModelFormMetaclass.__new__": {
            "name": "__new__",
            "location": 28,
            "return": [],
            "arguments": {
                "mcs": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "bases": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "BaseModelForm.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Any]"
                ],
                "files": [
                    "Optional[Any]"
                ],
                "auto_id": [
                    "str"
                ],
                "prefix": [
                    "Optional[Any]"
                ],
                "initial": [
                    "Optional[Any]"
                ],
                "error_class": [
                    "Any"
                ],
                "label_suffix": [
                    "Optional[Any]"
                ],
                "empty_permitted": [
                    "bool"
                ],
                "instance": [
                    "Optional[Any]"
                ],
                "use_required_attribute": [
                    "Optional[Any]"
                ],
                "renderer": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelForm.clean": {
            "name": "clean",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModelForm.validate_unique": {
            "name": "validate_unique",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelForm.save": {
            "name": "save",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModelFormSet.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Any]"
                ],
                "files": [
                    "Optional[Any]"
                ],
                "auto_id": [
                    "str"
                ],
                "prefix": [
                    "Optional[Any]"
                ],
                "queryset": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseModelFormSet.initial_form_count": {
            "name": "initial_form_count",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModelFormSet.get_queryset": {
            "name": "get_queryset",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModelFormSet.save_new": {
            "name": "save_new",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModelFormSet.save_existing": {
            "name": "save_existing",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "instance": [
                    "Any"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModelFormSet.delete_existing": {
            "name": "delete_existing",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModelFormSet.save": {
            "name": "save",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModelFormSet.clean": {
            "name": "clean",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelFormSet.validate_unique": {
            "name": "validate_unique",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelFormSet.get_unique_error_message": {
            "name": "get_unique_error_message",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "unique_check": [
                    "Any"
                ]
            }
        },
        "BaseModelFormSet.get_date_error_message": {
            "name": "get_date_error_message",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "date_check": [
                    "Any"
                ]
            }
        },
        "BaseModelFormSet.get_form_error": {
            "name": "get_form_error",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModelFormSet.save_existing_objects": {
            "name": "save_existing_objects",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModelFormSet.save_new_objects": {
            "name": "save_new_objects",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModelFormSet.add_fields": {
            "name": "add_fields",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseInlineFormSet.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Any]"
                ],
                "files": [
                    "Optional[Any]"
                ],
                "instance": [
                    "Optional[Any]"
                ],
                "save_as_new": [
                    "bool"
                ],
                "prefix": [
                    "Optional[Any]"
                ],
                "queryset": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseInlineFormSet.initial_form_count": {
            "name": "initial_form_count",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseInlineFormSet.get_default_prefix": {
            "name": "get_default_prefix",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseInlineFormSet.save_new": {
            "name": "save_new",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseInlineFormSet.add_fields": {
            "name": "add_fields",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Any"
                ],
                "index": [
                    "Any"
                ]
            }
        },
        "BaseInlineFormSet.get_unique_error_message": {
            "name": "get_unique_error_message",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "unique_check": [
                    "Any"
                ]
            }
        },
        "InlineForeignKeyField.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_instance": [
                    "Any"
                ]
            }
        },
        "InlineForeignKeyField.clean": {
            "name": "clean",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "InlineForeignKeyField.has_changed": {
            "name": "has_changed",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "ModelChoiceIterator.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "ModelChoiceIterator.__iter__": {
            "name": "__iter__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelChoiceIterator.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelChoiceIterator.__bool__": {
            "name": "__bool__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelChoiceIterator.choice": {
            "name": "choice",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "ModelChoiceField.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "Any"
                ]
            }
        },
        "ModelChoiceField.get_limit_choices_to": {
            "name": "get_limit_choices_to",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelChoiceField.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "ModelChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "ModelChoiceField.prepare_value": {
            "name": "prepare_value",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ModelChoiceField.to_python": {
            "name": "to_python",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ModelChoiceField.validate": {
            "name": "validate",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ModelChoiceField.has_changed": {
            "name": "has_changed",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "ModelMultipleChoiceField.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "Any"
                ]
            }
        },
        "ModelMultipleChoiceField.to_python": {
            "name": "to_python",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ModelMultipleChoiceField.clean": {
            "name": "clean",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ModelMultipleChoiceField.prepare_value": {
            "name": "prepare_value",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ModelMultipleChoiceField.has_changed": {
            "name": "has_changed",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/renderers.py": {
        "get_default_renderer": {
            "name": "get_default_renderer",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "BaseRenderer.get_template": {
            "name": "get_template",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "BaseRenderer.render": {
            "name": "render",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ],
                "context": [
                    "Any"
                ],
                "request": [
                    "Optional[Any]"
                ]
            }
        },
        "EngineMixin.get_template": {
            "name": "get_template",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "EngineMixin.engine": {
            "name": "engine",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplatesSetting.get_template": {
            "name": "get_template",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/utils.py": {
        "pretty_name": {
            "name": "pretty_name",
            "location": 8,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ]
            }
        },
        "flatatt": {
            "name": "flatatt",
            "location": 9,
            "return": [],
            "arguments": {
                "attrs": [
                    "Any"
                ]
            }
        },
        "from_current_timezone": {
            "name": "from_current_timezone",
            "location": 31,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "to_current_timezone": {
            "name": "to_current_timezone",
            "location": 32,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "ErrorDict.as_data": {
            "name": "as_data",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorDict.get_json_data": {
            "name": "get_json_data",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "escape_html": [
                    "bool"
                ]
            }
        },
        "ErrorDict.as_json": {
            "name": "as_json",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "escape_html": [
                    "bool"
                ]
            }
        },
        "ErrorDict.as_ul": {
            "name": "as_ul",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorDict.as_text": {
            "name": "as_text",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initlist": [
                    "Optional[Any]"
                ],
                "error_class": [
                    "Optional[Any]"
                ]
            }
        },
        "ErrorList.as_data": {
            "name": "as_data",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.get_json_data": {
            "name": "get_json_data",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "escape_html": [
                    "bool"
                ]
            }
        },
        "ErrorList.as_json": {
            "name": "as_json",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "escape_html": [
                    "bool"
                ]
            }
        },
        "ErrorList.as_ul": {
            "name": "as_ul",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.as_text": {
            "name": "as_text",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.__contains__": {
            "name": "__contains__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "ErrorList.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "ErrorList.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "Any"
                ]
            }
        },
        "ErrorList.__reduce_ex__": {
            "name": "__reduce_ex__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/widgets.py": {
        "Media.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "Optional[Any]"
                ],
                "css": [
                    "Optional[Any]"
                ],
                "js": [
                    "Optional[Any]"
                ]
            }
        },
        "Media.render": {
            "name": "render",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Media.render_js": {
            "name": "render_js",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Media.render_css": {
            "name": "render_css",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Media.absolute_path": {
            "name": "absolute_path",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "Media.__getitem__": {
            "name": "__getitem__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Media.merge": {
            "name": "merge",
            "location": 17,
            "return": [],
            "arguments": {
                "list_1": [
                    "Any"
                ],
                "list_2": [
                    "Any"
                ]
            }
        },
        "Media.__add__": {
            "name": "__add__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "MediaDefiningClass.__new__": {
            "name": "__new__",
            "location": 21,
            "return": [],
            "arguments": {
                "mcs": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "bases": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "Widget.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "Widget.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "Widget.is_hidden": {
            "name": "is_hidden",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Widget.subwidgets": {
            "name": "subwidgets",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "Widget.format_value": {
            "name": "format_value",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Widget.get_context": {
            "name": "get_context",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "Widget.render": {
            "name": "render",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ],
                "renderer": [
                    "Optional[Any]"
                ]
            }
        },
        "Widget.build_attrs": {
            "name": "build_attrs",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "base_attrs": [
                    "Any"
                ],
                "extra_attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "Widget.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "Widget.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "Widget.id_for_label": {
            "name": "id_for_label",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "Any"
                ]
            }
        },
        "Widget.use_required_attribute": {
            "name": "use_required_attribute",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ]
            }
        },
        "Input.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "Input.get_context": {
            "name": "get_context",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "PasswordInput.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "render_value": [
                    "bool"
                ]
            }
        },
        "PasswordInput.get_context": {
            "name": "get_context",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "MultipleHiddenInput.get_context": {
            "name": "get_context",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "MultipleHiddenInput.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "MultipleHiddenInput.format_value": {
            "name": "format_value",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FileInput.format_value": {
            "name": "format_value",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FileInput.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "FileInput.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.clear_checkbox_name": {
            "name": "clear_checkbox_name",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.clear_checkbox_id": {
            "name": "clear_checkbox_id",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.is_initial": {
            "name": "is_initial",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.format_value": {
            "name": "format_value",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.get_context": {
            "name": "get_context",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.use_required_attribute": {
            "name": "use_required_attribute",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ]
            }
        },
        "ClearableFileInput.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "Textarea.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "DateTimeBaseInput.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "format": [
                    "Optional[Any]"
                ]
            }
        },
        "DateTimeBaseInput.format_value": {
            "name": "format_value",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "CheckboxInput.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "check_test": [
                    "Optional[Any]"
                ]
            }
        },
        "CheckboxInput.format_value": {
            "name": "format_value",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "CheckboxInput.get_context": {
            "name": "get_context",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "CheckboxInput.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "CheckboxInput.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "ChoiceWidget.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "choices": [
                    "Any"
                ]
            }
        },
        "ChoiceWidget.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "ChoiceWidget.subwidgets": {
            "name": "subwidgets",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "ChoiceWidget.options": {
            "name": "options",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "ChoiceWidget.optgroups": {
            "name": "optgroups",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "ChoiceWidget.create_option": {
            "name": "create_option",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "label": [
                    "Any"
                ],
                "selected": [
                    "Any"
                ],
                "index": [
                    "Any"
                ],
                "subindex": [
                    "Optional[Any]"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "ChoiceWidget.get_context": {
            "name": "get_context",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "ChoiceWidget.id_for_label": {
            "name": "id_for_label",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "Any"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "ChoiceWidget.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "ChoiceWidget.format_value": {
            "name": "format_value",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Select.get_context": {
            "name": "get_context",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "Select.use_required_attribute": {
            "name": "use_required_attribute",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ]
            }
        },
        "NullBooleanSelect.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "NullBooleanSelect.format_value": {
            "name": "format_value",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "NullBooleanSelect.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "SelectMultiple.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "SelectMultiple.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "CheckboxSelectMultiple.use_required_attribute": {
            "name": "use_required_attribute",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "initial": [
                    "Any"
                ]
            }
        },
        "CheckboxSelectMultiple.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "CheckboxSelectMultiple.id_for_label": {
            "name": "id_for_label",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "Any"
                ],
                "index": [
                    "Optional[Any]"
                ]
            }
        },
        "MultiWidget.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "Any"
                ],
                "attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "MultiWidget.is_hidden": {
            "name": "is_hidden",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiWidget.get_context": {
            "name": "get_context",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "MultiWidget.id_for_label": {
            "name": "id_for_label",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "Any"
                ]
            }
        },
        "MultiWidget.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "MultiWidget.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "MultiWidget.decompress": {
            "name": "decompress",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "MultiWidget.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "MultiWidget.needs_multipart_form": {
            "name": "needs_multipart_form",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SplitDateTimeWidget.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "date_format": [
                    "Optional[Any]"
                ],
                "time_format": [
                    "Optional[Any]"
                ],
                "date_attrs": [
                    "Optional[Any]"
                ],
                "time_attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "SplitDateTimeWidget.decompress": {
            "name": "decompress",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SplitHiddenDateTimeWidget.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "date_format": [
                    "Optional[Any]"
                ],
                "time_format": [
                    "Optional[Any]"
                ],
                "date_attrs": [
                    "Optional[Any]"
                ],
                "time_attrs": [
                    "Optional[Any]"
                ]
            }
        },
        "SelectDateWidget.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Optional[Any]"
                ],
                "years": [
                    "Optional[Any]"
                ],
                "months": [
                    "Optional[Any]"
                ],
                "empty_label": [
                    "Optional[Any]"
                ]
            }
        },
        "SelectDateWidget.get_context": {
            "name": "get_context",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "SelectDateWidget.format_value": {
            "name": "format_value",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "SelectDateWidget.id_for_label": {
            "name": "id_for_label",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "Any"
                ]
            }
        },
        "SelectDateWidget.value_from_datadict": {
            "name": "value_from_datadict",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "SelectDateWidget.value_omitted_from_data": {
            "name": "value_omitted_from_data",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "files": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/forms/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/http/cookie.py": {
        "parse_cookie": {
            "name": "parse_cookie",
            "location": 10,
            "return": [],
            "arguments": {
                "cookie": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/http/multipartparser.py": {
        "MultiPartParser.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "META": [
                    "Any"
                ],
                "input_data": [
                    "Any"
                ],
                "upload_handlers": [
                    "Any"
                ],
                "encoding": [
                    "Optional[Any]"
                ]
            }
        },
        "MultiPartParser.parse": {
            "name": "parse",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiPartParser.handle_file_complete": {
            "name": "handle_file_complete",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_field_name": [
                    "Any"
                ],
                "counters": [
                    "Any"
                ]
            }
        },
        "MultiPartParser.IE_sanitize": {
            "name": "IE_sanitize",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "Any"
                ]
            }
        },
        "LazyStream.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "Any"
                ],
                "length": [
                    "Optional[Any]"
                ]
            }
        },
        "LazyStream.tell": {
            "name": "tell",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyStream.read": {
            "name": "read",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "size": [
                    "Optional[Any]"
                ]
            }
        },
        "LazyStream.__next__": {
            "name": "__next__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyStream.close": {
            "name": "close",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyStream.__iter__": {
            "name": "__iter__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyStream.unget": {
            "name": "unget",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes": [
                    "Any"
                ]
            }
        },
        "ChunkIter.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flo": [
                    "Any"
                ],
                "chunk_size": [
                    "Any"
                ]
            }
        },
        "ChunkIter.__next__": {
            "name": "__next__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkIter.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterBoundaryIter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ],
                "boundary": [
                    "Any"
                ]
            }
        },
        "InterBoundaryIter.__iter__": {
            "name": "__iter__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterBoundaryIter.__next__": {
            "name": "__next__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundaryIter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ],
                "boundary": [
                    "Any"
                ]
            }
        },
        "BoundaryIter.__iter__": {
            "name": "__iter__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundaryIter.__next__": {
            "name": "__next__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ],
                "boundary": [
                    "Any"
                ]
            }
        },
        "Parser.__iter__": {
            "name": "__iter__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/http/request.py": {
        "bytes_to_text": {
            "name": "bytes_to_text",
            "location": 79,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ],
                "encoding": [
                    "Any"
                ]
            }
        },
        "split_domain_port": {
            "name": "split_domain_port",
            "location": 80,
            "return": [],
            "arguments": {
                "host": [
                    "Any"
                ]
            }
        },
        "validate_host": {
            "name": "validate_host",
            "location": 81,
            "return": [],
            "arguments": {
                "host": [
                    "Any"
                ],
                "allowed_hosts": [
                    "Any"
                ]
            }
        },
        "HttpRequest.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.get_host": {
            "name": "get_host",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.get_port": {
            "name": "get_port",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.get_full_path": {
            "name": "get_full_path",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "force_append_slash": [
                    "bool"
                ]
            }
        },
        "HttpRequest.get_full_path_info": {
            "name": "get_full_path_info",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "force_append_slash": [
                    "bool"
                ]
            }
        },
        "HttpRequest.get_signed_cookie": {
            "name": "get_signed_cookie",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Any"
                ],
                "salt": [
                    "str"
                ],
                "max_age": [
                    "Optional[Any]"
                ]
            }
        },
        "HttpRequest.get_raw_uri": {
            "name": "get_raw_uri",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.build_absolute_uri": {
            "name": "build_absolute_uri",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "location": [
                    "Optional[Any]"
                ]
            }
        },
        "HttpRequest.scheme": {
            "name": "scheme",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.is_secure": {
            "name": "is_secure",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.is_ajax": {
            "name": "is_ajax",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.encoding": {
            "name": "encoding",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Any"
                ]
            }
        },
        "HttpRequest.upload_handlers": {
            "name": "upload_handlers",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "upload_handlers": [
                    "Any"
                ]
            }
        },
        "HttpRequest.parse_file_upload": {
            "name": "parse_file_upload",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "META": [
                    "Any"
                ],
                "post_data": [
                    "Any"
                ]
            }
        },
        "HttpRequest.body": {
            "name": "body",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.close": {
            "name": "close",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.read": {
            "name": "read",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.readline": {
            "name": "readline",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.__iter__": {
            "name": "__iter__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.xreadlines": {
            "name": "xreadlines",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequest.readlines": {
            "name": "readlines",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryDict.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_string": [
                    "Optional[Any]"
                ],
                "mutable": [
                    "bool"
                ],
                "encoding": [
                    "Optional[Any]"
                ]
            }
        },
        "QueryDict.fromkeys": {
            "name": "fromkeys",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "QueryDict.encoding": {
            "name": "encoding",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "QueryDict.__setitem__": {
            "name": "__setitem__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "QueryDict.__delitem__": {
            "name": "__delitem__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "QueryDict.__copy__": {
            "name": "__copy__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryDict.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "QueryDict.setlist": {
            "name": "setlist",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "list_": [
                    "Any"
                ]
            }
        },
        "QueryDict.setlistdefault": {
            "name": "setlistdefault",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default_list": [
                    "Optional[Any]"
                ]
            }
        },
        "QueryDict.appendlist": {
            "name": "appendlist",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "QueryDict.pop": {
            "name": "pop",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "QueryDict.popitem": {
            "name": "popitem",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryDict.clear": {
            "name": "clear",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryDict.setdefault": {
            "name": "setdefault",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "QueryDict.copy": {
            "name": "copy",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryDict.urlencode": {
            "name": "urlencode",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "safe": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/http/response.py": {
        "HttpResponseBase.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "Optional[Any]"
                ],
                "status": [
                    "Optional[Any]"
                ],
                "reason": [
                    "Optional[Any]"
                ],
                "charset": [
                    "Optional[Any]"
                ]
            }
        },
        "HttpResponseBase.reason_phrase": {
            "name": "reason_phrase",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.charset": {
            "name": "charset",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.serialize_headers": {
            "name": "serialize_headers",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.__setitem__": {
            "name": "__setitem__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.__delitem__": {
            "name": "__delitem__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.__getitem__": {
            "name": "__getitem__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "header": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.has_header": {
            "name": "has_header",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "header": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.items": {
            "name": "items",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.get": {
            "name": "get",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "header": [
                    "Any"
                ],
                "alternate": [
                    "Optional[Any]"
                ]
            }
        },
        "HttpResponseBase.set_cookie": {
            "name": "set_cookie",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "str"
                ],
                "max_age": [
                    "Optional[Any]"
                ],
                "expires": [
                    "Optional[Any]"
                ],
                "path": [
                    "str"
                ],
                "domain": [
                    "Optional[Any]"
                ],
                "secure": [
                    "bool"
                ],
                "httponly": [
                    "bool"
                ],
                "samesite": [
                    "Optional[Any]"
                ]
            }
        },
        "HttpResponseBase.setdefault": {
            "name": "setdefault",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.set_signed_cookie": {
            "name": "set_signed_cookie",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "salt": [
                    "str"
                ]
            }
        },
        "HttpResponseBase.delete_cookie": {
            "name": "delete_cookie",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "path": [
                    "str"
                ],
                "domain": [
                    "Optional[Any]"
                ]
            }
        },
        "HttpResponseBase.make_bytes": {
            "name": "make_bytes",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.close": {
            "name": "close",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.write": {
            "name": "write",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "HttpResponseBase.flush": {
            "name": "flush",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.tell": {
            "name": "tell",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.readable": {
            "name": "readable",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.seekable": {
            "name": "seekable",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.writable": {
            "name": "writable",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseBase.writelines": {
            "name": "writelines",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Any"
                ]
            }
        },
        "HttpResponse.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "HttpResponse.serialize": {
            "name": "serialize",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse.content": {
            "name": "content",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "HttpResponse.__iter__": {
            "name": "__iter__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse.write": {
            "name": "write",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "HttpResponse.tell": {
            "name": "tell",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse.getvalue": {
            "name": "getvalue",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse.writable": {
            "name": "writable",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse.writelines": {
            "name": "writelines",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Any"
                ]
            }
        },
        "StreamingHttpResponse.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "streaming_content": [
                    "Any"
                ]
            }
        },
        "StreamingHttpResponse.content": {
            "name": "content",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingHttpResponse.streaming_content": {
            "name": "streaming_content",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "StreamingHttpResponse.__iter__": {
            "name": "__iter__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamingHttpResponse.getvalue": {
            "name": "getvalue",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileResponse.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileResponse.set_headers": {
            "name": "set_headers",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelike": [
                    "Any"
                ]
            }
        },
        "HttpResponseRedirectBase.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redirect_to": [
                    "Any"
                ]
            }
        },
        "HttpResponseNotModified.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseNotModified.content": {
            "name": "content",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseNotAllowed.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permitted_methods": [
                    "Any"
                ]
            }
        },
        "JsonResponse.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "encoder": [
                    "Any"
                ],
                "safe": [
                    "bool"
                ],
                "json_dumps_params": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/http/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/middleware/cache.py": {
        "UpdateCacheMiddleware.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Optional[Any]"
                ]
            }
        },
        "UpdateCacheMiddleware.process_response": {
            "name": "process_response",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        },
        "FetchFromCacheMiddleware.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Optional[Any]"
                ]
            }
        },
        "FetchFromCacheMiddleware.process_request": {
            "name": "process_request",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "CacheMiddleware.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Optional[Any]"
                ],
                "cache_timeout": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/clickjacking.py": {
        "XFrameOptionsMiddleware.process_response": {
            "name": "process_response",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        },
        "XFrameOptionsMiddleware.get_xframe_options_value": {
            "name": "get_xframe_options_value",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/common.py": {
        "CommonMiddleware.process_request": {
            "name": "process_request",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "CommonMiddleware.should_redirect_with_slash": {
            "name": "should_redirect_with_slash",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "CommonMiddleware.get_full_path_with_slash": {
            "name": "get_full_path_with_slash",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "CommonMiddleware.process_response": {
            "name": "process_response",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        },
        "BrokenLinkEmailsMiddleware.process_response": {
            "name": "process_response",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        },
        "BrokenLinkEmailsMiddleware.is_internal_request": {
            "name": "is_internal_request",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [
                    "Any"
                ],
                "referer": [
                    "Any"
                ]
            }
        },
        "BrokenLinkEmailsMiddleware.is_ignorable_request": {
            "name": "is_ignorable_request",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "uri": [
                    "Any"
                ],
                "domain": [
                    "Any"
                ],
                "referer": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/csrf.py": {
        "get_token": {
            "name": "get_token",
            "location": 20,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "rotate_token": {
            "name": "rotate_token",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "CsrfViewMiddleware.process_request": {
            "name": "process_request",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "CsrfViewMiddleware.process_view": {
            "name": "process_view",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "callback": [
                    "Any"
                ],
                "callback_args": [
                    "Any"
                ],
                "callback_kwargs": [
                    "Any"
                ]
            }
        },
        "CsrfViewMiddleware.process_response": {
            "name": "process_response",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/gzip.py": {
        "GZipMiddleware.process_response": {
            "name": "process_response",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/http.py": {
        "ConditionalGetMiddleware.process_response": {
            "name": "process_response",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        },
        "ConditionalGetMiddleware.needs_etag": {
            "name": "needs_etag",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/locale.py": {
        "LocaleMiddleware.process_request": {
            "name": "process_request",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "LocaleMiddleware.process_response": {
            "name": "process_response",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/security.py": {
        "SecurityMiddleware.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Optional[Any]"
                ]
            }
        },
        "SecurityMiddleware.process_request": {
            "name": "process_request",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "SecurityMiddleware.process_response": {
            "name": "process_response",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/middleware/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/template/base.py": {
        "linebreak_iter": {
            "name": "linebreak_iter",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "template_source": [
                    "Any"
                ]
            }
        },
        "render_value_in_context": {
            "name": "render_value_in_context",
            "location": 137,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "context": [
                    "Any"
                ]
            }
        },
        "token_kwargs": {
            "name": "token_kwargs",
            "location": 146,
            "return": [],
            "arguments": {
                "bits": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ],
                "support_legacy": [
                    "bool"
                ]
            }
        },
        "VariableDoesNotExist.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Any"
                ],
                "params": [
                    "Any"
                ]
            }
        },
        "Origin.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "template_name": [
                    "Optional[Any]"
                ],
                "loader": [
                    "Optional[Any]"
                ]
            }
        },
        "Origin.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Origin.loader_name": {
            "name": "loader_name",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_string": [
                    "Any"
                ],
                "origin": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "engine": [
                    "Optional[Any]"
                ]
            }
        },
        "Template.__iter__": {
            "name": "__iter__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.render": {
            "name": "render",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "Template.compile_nodelist": {
            "name": "compile_nodelist",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.get_exception_info": {
            "name": "get_exception_info",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "exception": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_type": [
                    "Any"
                ],
                "contents": [
                    "Any"
                ],
                "position": [
                    "Optional[Any]"
                ],
                "lineno": [
                    "Optional[Any]"
                ]
            }
        },
        "Token.split_contents": {
            "name": "split_contents",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_string": [
                    "Any"
                ]
            }
        },
        "Lexer.tokenize": {
            "name": "tokenize",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.create_token": {
            "name": "create_token",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "token_string": [
                    "Any"
                ],
                "position": [
                    "Any"
                ],
                "lineno": [
                    "Any"
                ],
                "in_tag": [
                    "Any"
                ]
            }
        },
        "DebugLexer.tokenize": {
            "name": "tokenize",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Any"
                ],
                "libraries": [
                    "Optional[Any]"
                ],
                "builtins": [
                    "Optional[Any]"
                ],
                "origin": [
                    "Optional[Any]"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "parse_until": [
                    "Optional[Any]"
                ]
            }
        },
        "Parser.skip_past": {
            "name": "skip_past",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endtag": [
                    "Any"
                ]
            }
        },
        "Parser.extend_nodelist": {
            "name": "extend_nodelist",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ],
                "node": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "Parser.error": {
            "name": "error",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "Any"
                ],
                "e": [
                    "Any"
                ]
            }
        },
        "Parser.invalid_block_tag": {
            "name": "invalid_block_tag",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Any"
                ],
                "command": [
                    "Any"
                ],
                "parse_until": [
                    "Optional[Any]"
                ]
            }
        },
        "Parser.unclosed_block_tag": {
            "name": "unclosed_block_tag",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_until": [
                    "Any"
                ]
            }
        },
        "Parser.next_token": {
            "name": "next_token",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.prepend_token": {
            "name": "prepend_token",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Any"
                ]
            }
        },
        "Parser.delete_first_token": {
            "name": "delete_first_token",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.add_library": {
            "name": "add_library",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lib": [
                    "Any"
                ]
            }
        },
        "Parser.compile_filter": {
            "name": "compile_filter",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "Any"
                ]
            }
        },
        "Parser.find_filter": {
            "name": "find_filter",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "filter_name": [
                    "Any"
                ]
            }
        },
        "FilterExpression.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "FilterExpression.resolve": {
            "name": "resolve",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ],
                "ignore_failures": [
                    "bool"
                ]
            }
        },
        "FilterExpression.args_check": {
            "name": "args_check",
            "location": 106,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ],
                "func": [
                    "Any"
                ],
                "provided": [
                    "Any"
                ]
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Any"
                ]
            }
        },
        "Variable.resolve": {
            "name": "resolve",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "Node.render": {
            "name": "render",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "Node.render_annotated": {
            "name": "render_annotated",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "Node.__iter__": {
            "name": "__iter__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_nodes_by_type": {
            "name": "get_nodes_by_type",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "nodetype": [
                    "Any"
                ]
            }
        },
        "NodeList.render": {
            "name": "render",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "NodeList.get_nodes_by_type": {
            "name": "get_nodes_by_type",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "nodetype": [
                    "Any"
                ]
            }
        },
        "TextNode.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Any"
                ]
            }
        },
        "TextNode.render": {
            "name": "render",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "VariableNode.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_expression": [
                    "Any"
                ]
            }
        },
        "VariableNode.render": {
            "name": "render",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/context.py": {
        "make_context": {
            "name": "make_context",
            "location": 59,
            "return": [],
            "arguments": {
                "context": [
                    "Any"
                ],
                "request": [
                    "Optional[Any]"
                ]
            }
        },
        "ContextDict.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "ContextDict.__enter__": {
            "name": "__enter__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextDict.__exit__": {
            "name": "__exit__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContext.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseContext.__copy__": {
            "name": "__copy__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseContext.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContext.push": {
            "name": "push",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseContext.pop": {
            "name": "pop",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseContext.__setitem__": {
            "name": "__setitem__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseContext.set_upward": {
            "name": "set_upward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BaseContext.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "BaseContext.__delitem__": {
            "name": "__delitem__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "BaseContext.__contains__": {
            "name": "__contains__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "BaseContext.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "otherwise": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseContext.setdefault": {
            "name": "setdefault",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseContext.new": {
            "name": "new",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "values": [
                    "Optional[Any]"
                ]
            }
        },
        "BaseContext.flatten": {
            "name": "flatten",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseContext.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_": [
                    "Optional[Any]"
                ],
                "autoescape": [
                    "bool"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ],
                "use_tz": [
                    "Optional[Any]"
                ]
            }
        },
        "Context.bind_template": {
            "name": "bind_template",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ]
            }
        },
        "Context.__copy__": {
            "name": "__copy__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.update": {
            "name": "update",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other_dict": [
                    "Any"
                ]
            }
        },
        "RenderContext.__iter__": {
            "name": "__iter__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderContext.__contains__": {
            "name": "__contains__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "RenderContext.get": {
            "name": "get",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "otherwise": [
                    "Optional[Any]"
                ]
            }
        },
        "RenderContext.__getitem__": {
            "name": "__getitem__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "RenderContext.push_state": {
            "name": "push_state",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ],
                "isolated_context": [
                    "bool"
                ]
            }
        },
        "RequestContext.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "dict_": [
                    "Optional[Any]"
                ],
                "processors": [
                    "Optional[Any]"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ],
                "use_tz": [
                    "Optional[Any]"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "RequestContext.bind_template": {
            "name": "bind_template",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ]
            }
        },
        "RequestContext.new": {
            "name": "new",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "values": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/context_processors.py": {
        "csrf": {
            "name": "csrf",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 8,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "i18n": {
            "name": "i18n",
            "location": 9,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "tz": {
            "name": "tz",
            "location": 10,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "static": {
            "name": "static",
            "location": 11,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "media": {
            "name": "media",
            "location": 12,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        },
        "request": {
            "name": "request",
            "location": 13,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/defaultfilters.py": {
        "stringfilter": {
            "name": "stringfilter",
            "location": 11,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "addslashes": {
            "name": "addslashes",
            "location": 12,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "capfirst": {
            "name": "capfirst",
            "location": 13,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "escapejs_filter": {
            "name": "escapejs_filter",
            "location": 14,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "json_script": {
            "name": "json_script",
            "location": 15,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "element_id": [
                    "Any"
                ]
            }
        },
        "floatformat": {
            "name": "floatformat",
            "location": 16,
            "return": [],
            "arguments": {
                "text": [
                    "Any"
                ],
                "arg": [
                    "int"
                ]
            }
        },
        "iriencode": {
            "name": "iriencode",
            "location": 17,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "linenumbers": {
            "name": "linenumbers",
            "location": 18,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "lower": {
            "name": "lower",
            "location": 19,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "make_list": {
            "name": "make_list",
            "location": 20,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "slugify": {
            "name": "slugify",
            "location": 21,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "stringformat": {
            "name": "stringformat",
            "location": 22,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "title": {
            "name": "title",
            "location": 23,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "truncatechars": {
            "name": "truncatechars",
            "location": 24,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "truncatechars_html": {
            "name": "truncatechars_html",
            "location": 25,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "truncatewords": {
            "name": "truncatewords",
            "location": 26,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "truncatewords_html": {
            "name": "truncatewords_html",
            "location": 27,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "upper": {
            "name": "upper",
            "location": 28,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "urlencode": {
            "name": "urlencode",
            "location": 29,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "safe": [
                    "Optional[Any]"
                ]
            }
        },
        "urlize": {
            "name": "urlize",
            "location": 30,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "urlizetrunc": {
            "name": "urlizetrunc",
            "location": 31,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "limit": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "wordcount": {
            "name": "wordcount",
            "location": 32,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "wordwrap": {
            "name": "wordwrap",
            "location": 33,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "ljust": {
            "name": "ljust",
            "location": 34,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "rjust": {
            "name": "rjust",
            "location": 35,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "center": {
            "name": "center",
            "location": 36,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "cut": {
            "name": "cut",
            "location": 37,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "escape_filter": {
            "name": "escape_filter",
            "location": 38,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "force_escape": {
            "name": "force_escape",
            "location": 39,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "linebreaks_filter": {
            "name": "linebreaks_filter",
            "location": 40,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "linebreaksbr": {
            "name": "linebreaksbr",
            "location": 41,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "safe": {
            "name": "safe",
            "location": 42,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "safeseq": {
            "name": "safeseq",
            "location": 43,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "striptags": {
            "name": "striptags",
            "location": 44,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "dictsort": {
            "name": "dictsort",
            "location": 45,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "dictsortreversed": {
            "name": "dictsortreversed",
            "location": 46,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 47,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "join": {
            "name": "join",
            "location": 48,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 49,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "length": {
            "name": "length",
            "location": 50,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "length_is": {
            "name": "length_is",
            "location": 51,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "random": {
            "name": "random",
            "location": 52,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "slice_filter": {
            "name": "slice_filter",
            "location": 53,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "unordered_list": {
            "name": "unordered_list",
            "location": 54,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 55,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "get_digit": {
            "name": "get_digit",
            "location": 56,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "date": {
            "name": "date",
            "location": 57,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Optional[Any]"
                ]
            }
        },
        "time": {
            "name": "time",
            "location": 58,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Optional[Any]"
                ]
            }
        },
        "timesince_filter": {
            "name": "timesince_filter",
            "location": 59,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Optional[Any]"
                ]
            }
        },
        "timeuntil_filter": {
            "name": "timeuntil_filter",
            "location": 60,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Optional[Any]"
                ]
            }
        },
        "default": {
            "name": "default",
            "location": 61,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "default_if_none": {
            "name": "default_if_none",
            "location": 62,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "divisibleby": {
            "name": "divisibleby",
            "location": 63,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "yesno": {
            "name": "yesno",
            "location": 64,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Optional[Any]"
                ]
            }
        },
        "filesizeformat": {
            "name": "filesizeformat",
            "location": 65,
            "return": [],
            "arguments": {
                "bytes_": [
                    "Any"
                ]
            }
        },
        "pluralize": {
            "name": "pluralize",
            "location": 66,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "str"
                ]
            }
        },
        "phone2numeric_filter": {
            "name": "phone2numeric_filter",
            "location": 67,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 68,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/defaulttags.py": {
        "autoescape": {
            "name": "autoescape",
            "location": 136,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "comment": {
            "name": "comment",
            "location": 137,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "cycle": {
            "name": "cycle",
            "location": 138,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "csrf_token": {
            "name": "csrf_token",
            "location": 139,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 140,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_filter": {
            "name": "do_filter",
            "location": 141,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "firstof": {
            "name": "firstof",
            "location": 142,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_for": {
            "name": "do_for",
            "location": 143,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_ifequal": {
            "name": "do_ifequal",
            "location": 144,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ],
                "negate": [
                    "Any"
                ]
            }
        },
        "ifequal": {
            "name": "ifequal",
            "location": 145,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "ifnotequal": {
            "name": "ifnotequal",
            "location": 146,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_if": {
            "name": "do_if",
            "location": 161,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "ifchanged": {
            "name": "ifchanged",
            "location": 162,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "find_library": {
            "name": "find_library",
            "location": 163,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "load_from_library": {
            "name": "load_from_library",
            "location": 164,
            "return": [],
            "arguments": {
                "library": [
                    "Any"
                ],
                "label": [
                    "Any"
                ],
                "names": [
                    "Any"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 165,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "lorem": {
            "name": "lorem",
            "location": 166,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 167,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "regroup": {
            "name": "regroup",
            "location": 168,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "resetcycle": {
            "name": "resetcycle",
            "location": 169,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "spaceless": {
            "name": "spaceless",
            "location": 170,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "templatetag": {
            "name": "templatetag",
            "location": 171,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "url": {
            "name": "url",
            "location": 172,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "verbatim": {
            "name": "verbatim",
            "location": 173,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "widthratio": {
            "name": "widthratio",
            "location": 174,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_with": {
            "name": "do_with",
            "location": 175,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "AutoEscapeControlNode.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "Any"
                ],
                "nodelist": [
                    "Any"
                ]
            }
        },
        "AutoEscapeControlNode.render": {
            "name": "render",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "CommentNode.render": {
            "name": "render",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "CsrfTokenNode.render": {
            "name": "render",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "CycleNode.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cyclevars": [
                    "Any"
                ],
                "variable_name": [
                    "Optional[Any]"
                ],
                "silent": [
                    "bool"
                ]
            }
        },
        "CycleNode.render": {
            "name": "render",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "CycleNode.reset": {
            "name": "reset",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "DebugNode.render": {
            "name": "render",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "FilterNode.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_expr": [
                    "Any"
                ],
                "nodelist": [
                    "Any"
                ]
            }
        },
        "FilterNode.render": {
            "name": "render",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "FirstOfNode.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "Any"
                ],
                "asvar": [
                    "Optional[Any]"
                ]
            }
        },
        "FirstOfNode.render": {
            "name": "render",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "ForNode.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loopvars": [
                    "Any"
                ],
                "sequence": [
                    "Any"
                ],
                "is_reversed": [
                    "Any"
                ],
                "nodelist_loop": [
                    "Any"
                ],
                "nodelist_empty": [
                    "Optional[Any]"
                ]
            }
        },
        "ForNode.render": {
            "name": "render",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "IfChangedNode.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist_true": [
                    "Any"
                ],
                "nodelist_false": [
                    "Any"
                ]
            }
        },
        "IfChangedNode.render": {
            "name": "render",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "IfEqualNode.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var1": [
                    "Any"
                ],
                "var2": [
                    "Any"
                ],
                "nodelist_true": [
                    "Any"
                ],
                "nodelist_false": [
                    "Any"
                ],
                "negate": [
                    "Any"
                ]
            }
        },
        "IfEqualNode.render": {
            "name": "render",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "IfNode.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conditions_nodelists": [
                    "Any"
                ]
            }
        },
        "IfNode.__iter__": {
            "name": "__iter__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfNode.nodelist": {
            "name": "nodelist",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfNode.render": {
            "name": "render",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "LoremNode.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "Any"
                ],
                "method": [
                    "Any"
                ],
                "common": [
                    "Any"
                ]
            }
        },
        "LoremNode.render": {
            "name": "render",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "RegroupNode.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Any"
                ],
                "expression": [
                    "Any"
                ],
                "var_name": [
                    "Any"
                ]
            }
        },
        "RegroupNode.resolve_expression": {
            "name": "resolve_expression",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "context": [
                    "Any"
                ]
            }
        },
        "RegroupNode.render": {
            "name": "render",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "LoadNode.render": {
            "name": "render",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "NowNode.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format_string": [
                    "Any"
                ],
                "asvar": [
                    "Optional[Any]"
                ]
            }
        },
        "NowNode.render": {
            "name": "render",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "ResetCycleNode.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Any"
                ]
            }
        },
        "ResetCycleNode.render": {
            "name": "render",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "SpacelessNode.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ]
            }
        },
        "SpacelessNode.render": {
            "name": "render",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "TemplateTagNode.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tagtype": [
                    "Any"
                ]
            }
        },
        "TemplateTagNode.render": {
            "name": "render",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "URLNode.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "Any"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ],
                "asvar": [
                    "Any"
                ]
            }
        },
        "URLNode.render": {
            "name": "render",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "VerbatimNode.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "VerbatimNode.render": {
            "name": "render",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "WidthRatioNode.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val_expr": [
                    "Any"
                ],
                "max_expr": [
                    "Any"
                ],
                "max_width": [
                    "Any"
                ],
                "asvar": [
                    "Optional[Any]"
                ]
            }
        },
        "WidthRatioNode.render": {
            "name": "render",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "WithNode.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Any"
                ],
                "name": [
                    "Any"
                ],
                "nodelist": [
                    "Any"
                ],
                "extra_context": [
                    "Optional[Any]"
                ]
            }
        },
        "WithNode.render": {
            "name": "render",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "TemplateLiteral.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "text": [
                    "Any"
                ]
            }
        },
        "TemplateLiteral.display": {
            "name": "display",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplateLiteral.eval": {
            "name": "eval",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "TemplateIfParser.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "TemplateIfParser.create_var": {
            "name": "create_var",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/engine.py": {
        "Engine.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirs": [
                    "Optional[Any]"
                ],
                "app_dirs": [
                    "bool"
                ],
                "context_processors": [
                    "Optional[Any]"
                ],
                "debug": [
                    "bool"
                ],
                "loaders": [
                    "Optional[Any]"
                ],
                "string_if_invalid": [
                    "str"
                ],
                "file_charset": [
                    "str"
                ],
                "libraries": [
                    "Optional[Any]"
                ],
                "builtins": [
                    "Optional[Any]"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "Engine.get_default": {
            "name": "get_default",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "Engine.template_context_processors": {
            "name": "template_context_processors",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_template_builtins": {
            "name": "get_template_builtins",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "builtins": [
                    "Any"
                ]
            }
        },
        "Engine.get_template_libraries": {
            "name": "get_template_libraries",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "libraries": [
                    "Any"
                ]
            }
        },
        "Engine.template_loaders": {
            "name": "template_loaders",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_template_loaders": {
            "name": "get_template_loaders",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "template_loaders": [
                    "Any"
                ]
            }
        },
        "Engine.find_template_loader": {
            "name": "find_template_loader",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "loader": [
                    "Any"
                ]
            }
        },
        "Engine.find_template": {
            "name": "find_template",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "dirs": [
                    "Optional[Any]"
                ],
                "skip": [
                    "Optional[Any]"
                ]
            }
        },
        "Engine.from_string": {
            "name": "from_string",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "template_code": [
                    "Any"
                ]
            }
        },
        "Engine.get_template": {
            "name": "get_template",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "Engine.render_to_string": {
            "name": "render_to_string",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ],
                "context": [
                    "Optional[Any]"
                ]
            }
        },
        "Engine.select_template": {
            "name": "select_template",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "template_name_list": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/exceptions.py": {
        "TemplateDoesNotExist.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Any"
                ],
                "tried": [
                    "Optional[Any]"
                ],
                "backend": [
                    "Optional[Any]"
                ],
                "chain": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/library.py": {
        "parse_bits": {
            "name": "parse_bits",
            "location": 40,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "bits": [
                    "Any"
                ],
                "params": [
                    "Any"
                ],
                "varargs": [
                    "Any"
                ],
                "varkw": [
                    "Any"
                ],
                "defaults": [
                    "Any"
                ],
                "kwonly": [
                    "Any"
                ],
                "kwonly_defaults": [
                    "Any"
                ],
                "takes_context": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "import_library": {
            "name": "import_library",
            "location": 41,
            "return": [],
            "arguments": {
                "name": [
                    "Any"
                ]
            }
        },
        "Library.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.tag": {
            "name": "tag",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Any]"
                ],
                "compile_function": [
                    "Optional[Any]"
                ]
            }
        },
        "Library.tag_function": {
            "name": "tag_function",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ]
            }
        },
        "Library.filter": {
            "name": "filter",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Any]"
                ],
                "filter_func": [
                    "Optional[Any]"
                ]
            }
        },
        "Library.filter_function": {
            "name": "filter_function",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ]
            }
        },
        "Library.simple_tag": {
            "name": "simple_tag",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Optional[Any]"
                ],
                "takes_context": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "Library.inclusion_tag": {
            "name": "inclusion_tag",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "Any"
                ],
                "func": [
                    "Optional[Any]"
                ],
                "takes_context": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "TagHelperNode.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "takes_context": [
                    "Any"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ]
            }
        },
        "TagHelperNode.get_resolved_arguments": {
            "name": "get_resolved_arguments",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "SimpleNode.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "takes_context": [
                    "Any"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ],
                "target_var": [
                    "Any"
                ]
            }
        },
        "SimpleNode.render": {
            "name": "render",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "InclusionNode.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "takes_context": [
                    "Any"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ],
                "filename": [
                    "Any"
                ]
            }
        },
        "InclusionNode.render": {
            "name": "render",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/loader.py": {
        "get_template": {
            "name": "get_template",
            "location": 8,
            "return": [],
            "arguments": {
                "template_name": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "select_template": {
            "name": "select_template",
            "location": 9,
            "return": [],
            "arguments": {
                "template_name_list": [
                    "Any"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "render_to_string": {
            "name": "render_to_string",
            "location": 10,
            "return": [],
            "arguments": {
                "template_name": [
                    "Any"
                ],
                "context": [
                    "Optional[Any]"
                ],
                "request": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/loader_tags.py": {
        "do_block": {
            "name": "do_block",
            "location": 45,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "construct_relative_path": {
            "name": "construct_relative_path",
            "location": 46,
            "return": [],
            "arguments": {
                "current_template_name": [
                    "Any"
                ],
                "relative_name": [
                    "Any"
                ]
            }
        },
        "do_extends": {
            "name": "do_extends",
            "location": 47,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_include": {
            "name": "do_include",
            "location": 48,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "BlockContext.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockContext.add_blocks": {
            "name": "add_blocks",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "Any"
                ]
            }
        },
        "BlockContext.pop": {
            "name": "pop",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BlockContext.push": {
            "name": "push",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "block": [
                    "Any"
                ]
            }
        },
        "BlockContext.get_block": {
            "name": "get_block",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "BlockNode.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "nodelist": [
                    "Any"
                ],
                "parent": [
                    "Optional[Any]"
                ]
            }
        },
        "BlockNode.render": {
            "name": "render",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "BlockNode.super": {
            "name": "super",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtendsNode.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ],
                "parent_name": [
                    "Any"
                ],
                "template_dirs": [
                    "Optional[Any]"
                ]
            }
        },
        "ExtendsNode.find_template": {
            "name": "find_template",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ],
                "context": [
                    "Any"
                ]
            }
        },
        "ExtendsNode.get_parent": {
            "name": "get_parent",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "ExtendsNode.render": {
            "name": "render",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "IncludeNode.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ]
            }
        },
        "IncludeNode.render": {
            "name": "render",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/response.py": {
        "SimpleTemplateResponse.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ],
                "context": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "status": [
                    "Optional[Any]"
                ],
                "charset": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTemplateResponse.resolve_template": {
            "name": "resolve_template",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ]
            }
        },
        "SimpleTemplateResponse.resolve_context": {
            "name": "resolve_context",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "SimpleTemplateResponse.rendered_content": {
            "name": "rendered_content",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTemplateResponse.add_post_render_callback": {
            "name": "add_post_render_callback",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Any"
                ]
            }
        },
        "SimpleTemplateResponse.render": {
            "name": "render",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTemplateResponse.is_rendered": {
            "name": "is_rendered",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTemplateResponse.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTemplateResponse.content": {
            "name": "content",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "TemplateResponse.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ],
                "template": [
                    "Any"
                ],
                "context": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Optional[Any]"
                ],
                "status": [
                    "Optional[Any]"
                ],
                "charset": [
                    "Optional[Any]"
                ],
                "using": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/smartif.py": {
        "infix": {
            "name": "infix",
            "location": 16,
            "return": [],
            "arguments": {
                "bp": [
                    "Any"
                ],
                "func": [
                    "Any"
                ]
            }
        },
        "prefix": {
            "name": "prefix",
            "location": 17,
            "return": [],
            "arguments": {
                "bp": [
                    "Any"
                ],
                "func": [
                    "Any"
                ]
            }
        },
        "TokenBase.nud": {
            "name": "nud",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "TokenBase.led": {
            "name": "led",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "Any"
                ],
                "parser": [
                    "Any"
                ]
            }
        },
        "TokenBase.display": {
            "name": "display",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Literal.display": {
            "name": "display",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.nud": {
            "name": "nud",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "Literal.eval": {
            "name": "eval",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "EndToken.nud": {
            "name": "nud",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "IfParser.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Any"
                ]
            }
        },
        "IfParser.translate_token": {
            "name": "translate_token",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "Any"
                ]
            }
        },
        "IfParser.next_token": {
            "name": "next_token",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfParser.parse": {
            "name": "parse",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfParser.expression": {
            "name": "expression",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "rbp": [
                    "int"
                ]
            }
        },
        "IfParser.create_var": {
            "name": "create_var",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/utils.py": {
        "get_app_template_dirs": {
            "name": "get_app_template_dirs",
            "location": 17,
            "return": [],
            "arguments": {
                "dirname": [
                    "Any"
                ]
            }
        },
        "EngineHandler.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "templates": [
                    "Optional[Any]"
                ]
            }
        },
        "EngineHandler.templates": {
            "name": "templates",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineHandler.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [
                    "Any"
                ]
            }
        },
        "EngineHandler.__iter__": {
            "name": "__iter__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineHandler.all": {
            "name": "all",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/template/backends/base.py": {
        "BaseEngine.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Any"
                ]
            }
        },
        "BaseEngine.app_dirname": {
            "name": "app_dirname",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEngine.from_string": {
            "name": "from_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_code": [
                    "Any"
                ]
            }
        },
        "BaseEngine.get_template": {
            "name": "get_template",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "BaseEngine.template_dirs": {
            "name": "template_dirs",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEngine.iter_template_filenames": {
            "name": "iter_template_filenames",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/backends/django.py": {
        "copy_exception": {
            "name": "copy_exception",
            "location": 24,
            "return": [],
            "arguments": {
                "exc": [
                    "Any"
                ],
                "backend": [
                    "Optional[Any]"
                ]
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "exc": [
                    "Any"
                ],
                "backend": [
                    "Any"
                ]
            }
        },
        "get_installed_libraries": {
            "name": "get_installed_libraries",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "get_package_libraries": {
            "name": "get_package_libraries",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "pkg": [
                    "Any"
                ]
            }
        },
        "DjangoTemplates.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Any"
                ]
            }
        },
        "DjangoTemplates.from_string": {
            "name": "from_string",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "template_code": [
                    "Any"
                ]
            }
        },
        "DjangoTemplates.get_template": {
            "name": "get_template",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "DjangoTemplates.get_templatetag_libraries": {
            "name": "get_templatetag_libraries",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "custom_libraries": [
                    "Any"
                ]
            }
        },
        "Template.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Any"
                ],
                "backend": [
                    "Any"
                ]
            }
        },
        "Template.origin": {
            "name": "origin",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.render": {
            "name": "render",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[Any]"
                ],
                "request": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/backends/dummy.py": {
        "TemplateStrings.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Any"
                ]
            }
        },
        "TemplateStrings.from_string": {
            "name": "from_string",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "template_code": [
                    "Any"
                ]
            }
        },
        "TemplateStrings.get_template": {
            "name": "get_template",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "Template.render": {
            "name": "render",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[Any]"
                ],
                "request": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/backends/utils.py": {
        "csrf_input": {
            "name": "csrf_input",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/backends/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/template/loaders/app_directories.py": {
        "Loader.get_dirs": {
            "name": "get_dirs",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/loaders/base.py": {
        "Loader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Any"
                ]
            }
        },
        "Loader.get_template": {
            "name": "get_template",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ],
                "skip": [
                    "Optional[Any]"
                ]
            }
        },
        "Loader.get_template_sources": {
            "name": "get_template_sources",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "Loader.reset": {
            "name": "reset",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/loaders/cached.py": {
        "Loader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Any"
                ],
                "loaders": [
                    "Any"
                ]
            }
        },
        "Loader.get_contents": {
            "name": "get_contents",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [
                    "Any"
                ]
            }
        },
        "Loader.get_template": {
            "name": "get_template",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ],
                "skip": [
                    "Optional[Any]"
                ]
            }
        },
        "Loader.get_template_sources": {
            "name": "get_template_sources",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        },
        "Loader.cache_key": {
            "name": "cache_key",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ],
                "skip": [
                    "Optional[Any]"
                ]
            }
        },
        "Loader.generate_hash": {
            "name": "generate_hash",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "values": [
                    "Any"
                ]
            }
        },
        "Loader.reset": {
            "name": "reset",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/loaders/filesystem.py": {
        "Loader.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Any"
                ],
                "dirs": [
                    "Optional[Any]"
                ]
            }
        },
        "Loader.get_dirs": {
            "name": "get_dirs",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loader.get_contents": {
            "name": "get_contents",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [
                    "Any"
                ]
            }
        },
        "Loader.get_template_sources": {
            "name": "get_template_sources",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/loaders/locmem.py": {
        "Loader.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Any"
                ],
                "templates_dict": [
                    "Any"
                ]
            }
        },
        "Loader.get_contents": {
            "name": "get_contents",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [
                    "Any"
                ]
            }
        },
        "Loader.get_template_sources": {
            "name": "get_template_sources",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/template/loaders/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/templatetags/cache.py": {
        "do_cache": {
            "name": "do_cache",
            "location": 19,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "CacheNode.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ],
                "expire_time_var": [
                    "Any"
                ],
                "fragment_name": [
                    "Any"
                ],
                "vary_on": [
                    "Any"
                ],
                "cache_name": [
                    "Any"
                ]
            }
        },
        "CacheNode.render": {
            "name": "render",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/templatetags/i18n.py": {
        "do_get_available_languages": {
            "name": "do_get_available_languages",
            "location": 65,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_get_language_info": {
            "name": "do_get_language_info",
            "location": 66,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_get_language_info_list": {
            "name": "do_get_language_info_list",
            "location": 67,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "language_name": {
            "name": "language_name",
            "location": 68,
            "return": [],
            "arguments": {
                "lang_code": [
                    "Any"
                ]
            }
        },
        "language_name_translated": {
            "name": "language_name_translated",
            "location": 69,
            "return": [],
            "arguments": {
                "lang_code": [
                    "Any"
                ]
            }
        },
        "language_name_local": {
            "name": "language_name_local",
            "location": 70,
            "return": [],
            "arguments": {
                "lang_code": [
                    "Any"
                ]
            }
        },
        "language_bidi": {
            "name": "language_bidi",
            "location": 71,
            "return": [],
            "arguments": {
                "lang_code": [
                    "Any"
                ]
            }
        },
        "do_get_current_language": {
            "name": "do_get_current_language",
            "location": 72,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_get_current_language_bidi": {
            "name": "do_get_current_language_bidi",
            "location": 73,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_translate": {
            "name": "do_translate",
            "location": 74,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_block_translate": {
            "name": "do_block_translate",
            "location": 75,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "language": {
            "name": "language",
            "location": 76,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "GetAvailableLanguagesNode.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Any"
                ]
            }
        },
        "GetAvailableLanguagesNode.render": {
            "name": "render",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "GetLanguageInfoNode.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang_code": [
                    "Any"
                ],
                "variable": [
                    "Any"
                ]
            }
        },
        "GetLanguageInfoNode.render": {
            "name": "render",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "GetLanguageInfoListNode.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "languages": [
                    "Any"
                ],
                "variable": [
                    "Any"
                ]
            }
        },
        "GetLanguageInfoListNode.get_language_info": {
            "name": "get_language_info",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "language": [
                    "Any"
                ]
            }
        },
        "GetLanguageInfoListNode.render": {
            "name": "render",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "GetCurrentLanguageNode.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Any"
                ]
            }
        },
        "GetCurrentLanguageNode.render": {
            "name": "render",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "GetCurrentLanguageBidiNode.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Any"
                ]
            }
        },
        "GetCurrentLanguageBidiNode.render": {
            "name": "render",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "TranslateNode.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_expression": [
                    "Any"
                ],
                "noop": [
                    "Any"
                ],
                "asvar": [
                    "Optional[Any]"
                ],
                "message_context": [
                    "Optional[Any]"
                ]
            }
        },
        "TranslateNode.render": {
            "name": "render",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "BlockTranslateNode.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extra_context": [
                    "Any"
                ],
                "singular": [
                    "Any"
                ],
                "plural": [
                    "Optional[Any]"
                ],
                "countervar": [
                    "Optional[Any]"
                ],
                "counter": [
                    "Optional[Any]"
                ],
                "message_context": [
                    "Optional[Any]"
                ],
                "trimmed": [
                    "bool"
                ],
                "asvar": [
                    "Optional[Any]"
                ]
            }
        },
        "BlockTranslateNode.render_token_list": {
            "name": "render_token_list",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [
                    "Any"
                ]
            }
        },
        "BlockTranslateNode.render": {
            "name": "render",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ],
                "nested": [
                    "bool"
                ]
            }
        },
        "LanguageNode.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ],
                "language": [
                    "Any"
                ]
            }
        },
        "LanguageNode.render": {
            "name": "render",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/templatetags/l10n.py": {
        "localize": {
            "name": "localize",
            "location": 10,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "unlocalize": {
            "name": "unlocalize",
            "location": 11,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "localize_tag": {
            "name": "localize_tag",
            "location": 19,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "LocalizeNode.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ],
                "use_l10n": [
                    "Any"
                ]
            }
        },
        "LocalizeNode.render": {
            "name": "render",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/templatetags/static.py": {
        "get_static_prefix": {
            "name": "get_static_prefix",
            "location": 20,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "get_media_prefix": {
            "name": "get_media_prefix",
            "location": 21,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "do_static": {
            "name": "do_static",
            "location": 34,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "static": {
            "name": "static",
            "location": 35,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "PrefixNode.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "varname": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "PrefixNode.handle_token": {
            "name": "handle_token",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "PrefixNode.handle_simple": {
            "name": "handle_simple",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [
                    "Any"
                ]
            }
        },
        "PrefixNode.render": {
            "name": "render",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "StaticNode.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "varname": [
                    "Optional[Any]"
                ],
                "path": [
                    "Optional[Any]"
                ]
            }
        },
        "StaticNode.url": {
            "name": "url",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "StaticNode.render": {
            "name": "render",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "StaticNode.handle_simple": {
            "name": "handle_simple",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [
                    "Any"
                ]
            }
        },
        "StaticNode.handle_token": {
            "name": "handle_token",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/templatetags/tz.py": {
        "localtime": {
            "name": "localtime",
            "location": 13,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "utc": {
            "name": "utc",
            "location": 14,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "do_timezone": {
            "name": "do_timezone",
            "location": 15,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "arg": [
                    "Any"
                ]
            }
        },
        "localtime_tag": {
            "name": "localtime_tag",
            "location": 34,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "timezone_tag": {
            "name": "timezone_tag",
            "location": 35,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "get_current_timezone_tag": {
            "name": "get_current_timezone_tag",
            "location": 36,
            "return": [],
            "arguments": {
                "parser": [
                    "Any"
                ],
                "token": [
                    "Any"
                ]
            }
        },
        "LocalTimeNode.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ],
                "use_tz": [
                    "Any"
                ]
            }
        },
        "LocalTimeNode.render": {
            "name": "render",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "TimezoneNode.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "Any"
                ],
                "tz": [
                    "Any"
                ]
            }
        },
        "TimezoneNode.render": {
            "name": "render",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        },
        "GetCurrentTimezoneNode.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Any"
                ]
            }
        },
        "GetCurrentTimezoneNode.render": {
            "name": "render",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/templatetags/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/test/client.py": {
        "encode_multipart": {
            "name": "encode_multipart",
            "location": 25,
            "return": [],
            "arguments": {
                "boundary": [
                    "Any"
                ],
                "data": [
                    "Any"
                ]
            }
        },
        "encode_file": {
            "name": "encode_file",
            "location": 26,
            "return": [],
            "arguments": {
                "boundary": [
                    "Any"
                ],
                "key": [
                    "Any"
                ],
                "file": [
                    "Any"
                ]
            }
        },
        "RedirectCycleError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ],
                "last_response": [
                    "Any"
                ]
            }
        },
        "FakePayload.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[Any]"
                ]
            }
        },
        "FakePayload.__len__": {
            "name": "__len__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakePayload.read": {
            "name": "read",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "Optional[Any]"
                ]
            }
        },
        "FakePayload.write": {
            "name": "write",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Any"
                ]
            }
        },
        "ClientHandler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enforce_csrf_checks": [
                    "bool"
                ]
            }
        },
        "ClientHandler.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "Any"
                ]
            }
        },
        "RequestFactory.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestFactory.request": {
            "name": "request",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestFactory.get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "Optional[Any]"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.post": {
            "name": "post",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Any"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.head": {
            "name": "head",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "Optional[Any]"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.trace": {
            "name": "trace",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.options": {
            "name": "options",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.put": {
            "name": "put",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.patch": {
            "name": "patch",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.delete": {
            "name": "delete",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "RequestFactory.generic": {
            "name": "generic",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "Any"
                ],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enforce_csrf_checks": [
                    "bool"
                ]
            }
        },
        "Client.store_exc_info": {
            "name": "store_exc_info",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.session": {
            "name": "session",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.request": {
            "name": "request",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get": {
            "name": "get",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "Optional[Any]"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.post": {
            "name": "post",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "Optional[Any]"
                ],
                "content_type": [
                    "Any"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.head": {
            "name": "head",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "Optional[Any]"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.options": {
            "name": "options",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.put": {
            "name": "put",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.patch": {
            "name": "patch",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.delete": {
            "name": "delete",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.trace": {
            "name": "trace",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ],
                "data": [
                    "str"
                ],
                "follow": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "Client.login": {
            "name": "login",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.force_login": {
            "name": "force_login",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "Any"
                ],
                "backend": [
                    "Optional[Any]"
                ]
            }
        },
        "Client.logout": {
            "name": "logout",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/test/html.py": {
        "normalize_whitespace": {
            "name": "normalize_whitespace",
            "location": 10,
            "return": [],
            "arguments": {
                "string": [
                    "Any"
                ]
            }
        },
        "parse_html": {
            "name": "parse_html",
            "location": 47,
            "return": [],
            "arguments": {
                "html": [
                    "Any"
                ]
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "attributes": [
                    "Any"
                ]
            }
        },
        "Element.append": {
            "name": "append",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Any"
                ]
            }
        },
        "Element.finalize": {
            "name": "finalize",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "element": [
                    "Any"
                ]
            }
        },
        "Element.__hash__": {
            "name": "__hash__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.__contains__": {
            "name": "__contains__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "element": [
                    "Any"
                ]
            }
        },
        "Element.count": {
            "name": "count",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "element": [
                    "Any"
                ]
            }
        },
        "Element.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "RootElement.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.error": {
            "name": "error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Any"
                ]
            }
        },
        "Parser.format_position": {
            "name": "format_position",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "Optional[Any]"
                ],
                "element": [
                    "Optional[Any]"
                ]
            }
        },
        "Parser.current": {
            "name": "current",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.handle_startendtag": {
            "name": "handle_startendtag",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "Parser.handle_starttag": {
            "name": "handle_starttag",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "Parser.handle_endtag": {
            "name": "handle_endtag",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Any"
                ]
            }
        },
        "Parser.handle_data": {
            "name": "handle_data",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "Parser.handle_charref": {
            "name": "handle_charref",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Parser.handle_entityref": {
            "name": "handle_entityref",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/test/runner.py": {
        "default_test_processes": {
            "name": "default_test_processes",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "is_discoverable": {
            "name": "is_discoverable",
            "location": 95,
            "return": [],
            "arguments": {
                "label": [
                    "Any"
                ]
            }
        },
        "reorder_suite": {
            "name": "reorder_suite",
            "location": 96,
            "return": [],
            "arguments": {
                "suite": [
                    "Any"
                ],
                "classes": [
                    "Any"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "partition_suite_by_type": {
            "name": "partition_suite_by_type",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "suite": [
                    "Any"
                ],
                "classes": [
                    "Any"
                ],
                "bins": [
                    "Any"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "partition_suite_by_case": {
            "name": "partition_suite_by_case",
            "location": 98,
            "return": [],
            "arguments": {
                "suite": [
                    "Any"
                ]
            }
        },
        "filter_tests_by_tags": {
            "name": "filter_tests_by_tags",
            "location": 99,
            "return": [],
            "arguments": {
                "suite": [
                    "Any"
                ],
                "tags": [
                    "Any"
                ],
                "exclude_tags": [
                    "Any"
                ]
            }
        },
        "DebugSQLTextTestResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Any"
                ],
                "descriptions": [
                    "Any"
                ],
                "verbosity": [
                    "Any"
                ]
            }
        },
        "DebugSQLTextTestResult.startTest": {
            "name": "startTest",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ]
            }
        },
        "DebugSQLTextTestResult.stopTest": {
            "name": "stopTest",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ]
            }
        },
        "DebugSQLTextTestResult.addError": {
            "name": "addError",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "DebugSQLTextTestResult.addFailure": {
            "name": "addFailure",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "DebugSQLTextTestResult.addSubTest": {
            "name": "addSubTest",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "subtest": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "DebugSQLTextTestResult.printErrorList": {
            "name": "printErrorList",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flavour": [
                    "Any"
                ],
                "errors": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTestResult.test_index": {
            "name": "test_index",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteTestResult.check_picklable": {
            "name": "check_picklable",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.check_subtest_picklable": {
            "name": "check_subtest_picklable",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "subtest": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.stop_if_failfast": {
            "name": "stop_if_failfast",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTestResult.stop": {
            "name": "stop",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTestResult.startTestRun": {
            "name": "startTestRun",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTestResult.stopTestRun": {
            "name": "stopTestRun",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteTestResult.startTest": {
            "name": "startTest",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.stopTest": {
            "name": "stopTest",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.addError": {
            "name": "addError",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.addFailure": {
            "name": "addFailure",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.addSubTest": {
            "name": "addSubTest",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "subtest": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.addSuccess": {
            "name": "addSuccess",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.addSkip": {
            "name": "addSkip",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "reason": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.addExpectedFailure": {
            "name": "addExpectedFailure",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ],
                "err": [
                    "Any"
                ]
            }
        },
        "RemoteTestResult.addUnexpectedSuccess": {
            "name": "addUnexpectedSuccess",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ]
            }
        },
        "RemoteTestRunner.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failfast": [
                    "bool"
                ],
                "resultclass": [
                    "Optional[Any]"
                ]
            }
        },
        "RemoteTestRunner.run": {
            "name": "run",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "test": [
                    "Any"
                ]
            }
        },
        "ParallelTestSuite.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "Any"
                ],
                "processes": [
                    "Any"
                ],
                "failfast": [
                    "bool"
                ]
            }
        },
        "ParallelTestSuite.run": {
            "name": "run",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "result": [
                    "Any"
                ]
            }
        },
        "DiscoverRunner.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Optional[Any]"
                ],
                "top_level": [
                    "Optional[Any]"
                ],
                "verbosity": [
                    "int"
                ],
                "interactive": [
                    "bool"
                ],
                "failfast": [
                    "bool"
                ],
                "keepdb": [
                    "bool"
                ],
                "reverse": [
                    "bool"
                ],
                "debug_mode": [
                    "bool"
                ],
                "debug_sql": [
                    "bool"
                ],
                "parallel": [
                    "int"
                ],
                "tags": [
                    "Optional[Any]"
                ],
                "exclude_tags": [
                    "Optional[Any]"
                ]
            }
        },
        "DiscoverRunner.add_arguments": {
            "name": "add_arguments",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parser": [
                    "Any"
                ]
            }
        },
        "DiscoverRunner.setup_test_environment": {
            "name": "setup_test_environment",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscoverRunner.build_suite": {
            "name": "build_suite",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "test_labels": [
                    "Optional[Any]"
                ],
                "extra_tests": [
                    "Optional[Any]"
                ]
            }
        },
        "DiscoverRunner.setup_databases": {
            "name": "setup_databases",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoverRunner.get_resultclass": {
            "name": "get_resultclass",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoverRunner.get_test_runner_kwargs": {
            "name": "get_test_runner_kwargs",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoverRunner.run_checks": {
            "name": "run_checks",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscoverRunner.run_suite": {
            "name": "run_suite",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "suite": [
                    "Any"
                ]
            }
        },
        "DiscoverRunner.teardown_databases": {
            "name": "teardown_databases",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_config": [
                    "Any"
                ]
            }
        },
        "DiscoverRunner.teardown_test_environment": {
            "name": "teardown_test_environment",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscoverRunner.suite_result": {
            "name": "suite_result",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "suite": [
                    "Any"
                ],
                "result": [
                    "Any"
                ]
            }
        },
        "DiscoverRunner.run_tests": {
            "name": "run_tests",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "test_labels": [
                    "Any"
                ],
                "extra_tests": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/test/selenium.py": {
        "SeleniumTestCaseBase.__new__": {
            "name": "__new__",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [
                    "Any"
                ],
                "bases": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "SeleniumTestCaseBase.import_webdriver": {
            "name": "import_webdriver",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "browser": [
                    "Any"
                ]
            }
        },
        "SeleniumTestCaseBase.create_webdriver": {
            "name": "create_webdriver",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeleniumTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SeleniumTestCase.disable_implicit_wait": {
            "name": "disable_implicit_wait",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/test/signals.py": {
        "clear_cache_handlers": {
            "name": "clear_cache_handlers",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_installed_apps": {
            "name": "update_installed_apps",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_connections_time_zone": {
            "name": "update_connections_time_zone",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear_routers_cache": {
            "name": "clear_routers_cache",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reset_template_engines": {
            "name": "reset_template_engines",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear_serializers_cache": {
            "name": "clear_serializers_cache",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "language_changed": {
            "name": "language_changed",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "localize_settings_changed": {
            "name": "localize_settings_changed",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "file_storage_changed": {
            "name": "file_storage_changed",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "complex_setting_changed": {
            "name": "complex_setting_changed",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "root_urlconf_changed": {
            "name": "root_urlconf_changed",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "static_storage_changed": {
            "name": "static_storage_changed",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "static_finders_changed": {
            "name": "static_finders_changed",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "auth_password_validators_changed": {
            "name": "auth_password_validators_changed",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "user_model_swapped": {
            "name": "user_model_swapped",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/test/testcases.py": {
        "skipIfDBFeature": {
            "name": "skipIfDBFeature",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "skipUnlessDBFeature": {
            "name": "skipUnlessDBFeature",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "_AssertNumQueriesContext.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_case": [
                    "Any"
                ],
                "num": [
                    "Any"
                ],
                "connection": [
                    "Any"
                ]
            }
        },
        "_AssertNumQueriesContext.__exit__": {
            "name": "__exit__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "_AssertTemplateUsedContext.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_case": [
                    "Any"
                ],
                "template_name": [
                    "Any"
                ]
            }
        },
        "_AssertTemplateUsedContext.on_template_render": {
            "name": "on_template_render",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "Any"
                ],
                "signal": [
                    "Any"
                ],
                "template": [
                    "Any"
                ],
                "context": [
                    "Any"
                ]
            }
        },
        "_AssertTemplateUsedContext.test": {
            "name": "test",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssertTemplateUsedContext.message": {
            "name": "message",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssertTemplateUsedContext.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssertTemplateUsedContext.__exit__": {
            "name": "__exit__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "_AssertTemplateNotUsedContext.test": {
            "name": "test",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssertTemplateNotUsedContext.message": {
            "name": "message",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CursorFailure.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls_name": [
                    "Any"
                ],
                "wrapped": [
                    "Any"
                ]
            }
        },
        "_CursorFailure.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SimpleTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SimpleTestCase.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTestCase.settings": {
            "name": "settings",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTestCase.modify_settings": {
            "name": "modify_settings",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTestCase.assertRedirects": {
            "name": "assertRedirects",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Any"
                ],
                "expected_url": [
                    "Any"
                ],
                "status_code": [
                    "int"
                ],
                "target_status_code": [
                    "int"
                ],
                "msg_prefix": [
                    "str"
                ],
                "fetch_redirect_response": [
                    "bool"
                ]
            }
        },
        "SimpleTestCase.assertContains": {
            "name": "assertContains",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Any"
                ],
                "text": [
                    "Any"
                ],
                "count": [
                    "Optional[Any]"
                ],
                "status_code": [
                    "int"
                ],
                "msg_prefix": [
                    "str"
                ],
                "html": [
                    "bool"
                ]
            }
        },
        "SimpleTestCase.assertNotContains": {
            "name": "assertNotContains",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Any"
                ],
                "text": [
                    "Any"
                ],
                "status_code": [
                    "int"
                ],
                "msg_prefix": [
                    "str"
                ],
                "html": [
                    "bool"
                ]
            }
        },
        "SimpleTestCase.assertFormError": {
            "name": "assertFormError",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Any"
                ],
                "form": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "errors": [
                    "Any"
                ],
                "msg_prefix": [
                    "str"
                ]
            }
        },
        "SimpleTestCase.assertFormsetError": {
            "name": "assertFormsetError",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Any"
                ],
                "formset": [
                    "Any"
                ],
                "form_index": [
                    "Any"
                ],
                "field": [
                    "Any"
                ],
                "errors": [
                    "Any"
                ],
                "msg_prefix": [
                    "str"
                ]
            }
        },
        "SimpleTestCase.assertTemplateUsed": {
            "name": "assertTemplateUsed",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "Optional[Any]"
                ],
                "template_name": [
                    "Optional[Any]"
                ],
                "msg_prefix": [
                    "str"
                ],
                "count": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTestCase.assertTemplateNotUsed": {
            "name": "assertTemplateNotUsed",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "Optional[Any]"
                ],
                "template_name": [
                    "Optional[Any]"
                ],
                "msg_prefix": [
                    "str"
                ]
            }
        },
        "SimpleTestCase.assertRaisesMessage": {
            "name": "assertRaisesMessage",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "expected_exception": [
                    "Any"
                ],
                "expected_message": [
                    "Any"
                ]
            }
        },
        "SimpleTestCase.assertWarnsMessage": {
            "name": "assertWarnsMessage",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "expected_warning": [
                    "Any"
                ],
                "expected_message": [
                    "Any"
                ]
            }
        },
        "SimpleTestCase.assertFieldOutput": {
            "name": "assertFieldOutput",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fieldclass": [
                    "Any"
                ],
                "valid": [
                    "Any"
                ],
                "invalid": [
                    "Any"
                ],
                "field_args": [
                    "Optional[Any]"
                ],
                "field_kwargs": [
                    "Optional[Any]"
                ],
                "empty_value": [
                    "str"
                ]
            }
        },
        "SimpleTestCase.assertHTMLEqual": {
            "name": "assertHTMLEqual",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "html1": [
                    "Any"
                ],
                "html2": [
                    "Any"
                ],
                "msg": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTestCase.assertHTMLNotEqual": {
            "name": "assertHTMLNotEqual",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "html1": [
                    "Any"
                ],
                "html2": [
                    "Any"
                ],
                "msg": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTestCase.assertInHTML": {
            "name": "assertInHTML",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "needle": [
                    "Any"
                ],
                "haystack": [
                    "Any"
                ],
                "count": [
                    "Optional[Any]"
                ],
                "msg_prefix": [
                    "str"
                ]
            }
        },
        "SimpleTestCase.assertJSONEqual": {
            "name": "assertJSONEqual",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "Any"
                ],
                "expected_data": [
                    "Any"
                ],
                "msg": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTestCase.assertJSONNotEqual": {
            "name": "assertJSONNotEqual",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "Any"
                ],
                "expected_data": [
                    "Any"
                ],
                "msg": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTestCase.assertXMLEqual": {
            "name": "assertXMLEqual",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml1": [
                    "Any"
                ],
                "xml2": [
                    "Any"
                ],
                "msg": [
                    "Optional[Any]"
                ]
            }
        },
        "SimpleTestCase.assertXMLNotEqual": {
            "name": "assertXMLNotEqual",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml1": [
                    "Any"
                ],
                "xml2": [
                    "Any"
                ],
                "msg": [
                    "Optional[Any]"
                ]
            }
        },
        "TransactionTestCase.assertQuerysetEqual": {
            "name": "assertQuerysetEqual",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "qs": [
                    "Any"
                ],
                "values": [
                    "Any"
                ],
                "transform": [
                    "Any"
                ],
                "ordered": [
                    "bool"
                ],
                "msg": [
                    "Optional[Any]"
                ]
            }
        },
        "TransactionTestCase.assertNumQueries": {
            "name": "assertNumQueries",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "num": [
                    "Any"
                ],
                "func": [
                    "Optional[Any]"
                ]
            }
        },
        "TestCase.setUpClass": {
            "name": "setUpClass",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CheckCondition.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckCondition.add_condition": {
            "name": "add_condition",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [
                    "Any"
                ],
                "reason": [
                    "Any"
                ]
            }
        },
        "CheckCondition.__get__": {
            "name": "__get__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "QuietWSGIRequestHandler.log_message": {
            "name": "log_message",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FSFilesHandler.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "Any"
                ]
            }
        },
        "FSFilesHandler.file_path": {
            "name": "file_path",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "Any"
                ]
            }
        },
        "FSFilesHandler.get_response": {
            "name": "get_response",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "FSFilesHandler.serve": {
            "name": "serve",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        },
        "FSFilesHandler.__call__": {
            "name": "__call__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "Any"
                ],
                "start_response": [
                    "Any"
                ]
            }
        },
        "_StaticFilesHandler.get_base_dir": {
            "name": "get_base_dir",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_StaticFilesHandler.get_base_url": {
            "name": "get_base_url",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MediaFilesHandler.get_base_dir": {
            "name": "get_base_dir",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MediaFilesHandler.get_base_url": {
            "name": "get_base_url",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LiveServerThread.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Any"
                ],
                "static_handler": [
                    "Any"
                ],
                "connections_override": [
                    "Optional[Any]"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "LiveServerThread.run": {
            "name": "run",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveServerThread.terminate": {
            "name": "terminate",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveServerTestCase.live_server_url": {
            "name": "live_server_url",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "LiveServerTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LiveServerTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SerializeMixin.setUpClass": {
            "name": "setUpClass",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SerializeMixin.tearDownClass": {
            "name": "tearDownClass",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/test/utils.py": {
        "setup_test_environment": {
            "name": "setup_test_environment",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "Optional[Any]"
                ]
            }
        },
        "teardown_test_environment": {
            "name": "teardown_test_environment",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_runner": {
            "name": "get_runner",
            "location": 23,
            "return": [],
            "arguments": {
                "settings": [
                    "Any"
                ],
                "test_runner_class": [
                    "Optional[Any]"
                ]
            }
        },
        "isolate_lru_cache": {
            "name": "isolate_lru_cache",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "lru_cache_object": [
                    "Any"
                ]
            }
        },
        "Approximate.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Any"
                ],
                "places": [
                    "int"
                ]
            }
        },
        "Approximate.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "ContextList.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "ContextList.get": {
            "name": "get",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "ContextList.__contains__": {
            "name": "__contains__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "ContextList.keys": {
            "name": "keys",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextDecorator.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "Optional[Any]"
                ],
                "kwarg_name": [
                    "Optional[Any]"
                ]
            }
        },
        "TestContextDecorator.enable": {
            "name": "enable",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextDecorator.disable": {
            "name": "disable",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextDecorator.__enter__": {
            "name": "__enter__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextDecorator.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "TestContextDecorator.decorate_class": {
            "name": "decorate_class",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ]
            }
        },
        "TestContextDecorator.decorate_callable": {
            "name": "decorate_callable",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ]
            }
        },
        "TestContextDecorator.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "decorated": [
                    "Any"
                ]
            }
        },
        "override_settings.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "override_settings.enable": {
            "name": "enable",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "override_settings.disable": {
            "name": "disable",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "override_settings.save_options": {
            "name": "save_options",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_func": [
                    "Any"
                ]
            }
        },
        "override_settings.decorate_class": {
            "name": "decorate_class",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ]
            }
        },
        "modify_settings.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "modify_settings.save_options": {
            "name": "save_options",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_func": [
                    "Any"
                ]
            }
        },
        "modify_settings.enable": {
            "name": "enable",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "override_system_checks.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_checks": [
                    "Any"
                ],
                "deployment_checks": [
                    "Optional[Any]"
                ]
            }
        },
        "override_system_checks.enable": {
            "name": "enable",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "override_system_checks.disable": {
            "name": "disable",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptureQueriesContext.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Any"
                ]
            }
        },
        "CaptureQueriesContext.__iter__": {
            "name": "__iter__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaptureQueriesContext.__getitem__": {
            "name": "__getitem__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ]
            }
        },
        "CaptureQueriesContext.__len__": {
            "name": "__len__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaptureQueriesContext.captured_queries": {
            "name": "captured_queries",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaptureQueriesContext.__enter__": {
            "name": "__enter__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaptureQueriesContext.__exit__": {
            "name": "__exit__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "ignore_warnings.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ignore_warnings.enable": {
            "name": "enable",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ignore_warnings.disable": {
            "name": "disable",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "override_script_prefix.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Any"
                ]
            }
        },
        "override_script_prefix.enable": {
            "name": "enable",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "override_script_prefix.disable": {
            "name": "disable",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingCaptureMixin.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingCaptureMixin.tearDown": {
            "name": "tearDown",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "isolate_apps.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "isolate_apps.enable": {
            "name": "enable",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "isolate_apps.disable": {
            "name": "disable",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/test/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/urls/base.py": {
        "resolve": {
            "name": "resolve",
            "location": 10,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ],
                "urlconf": [
                    "Optional[Any]"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 11,
            "return": [],
            "arguments": {
                "viewname": [
                    "Any"
                ],
                "urlconf": [
                    "Optional[Any]"
                ],
                "args": [
                    "Optional[Any]"
                ],
                "kwargs": [
                    "Optional[Any]"
                ],
                "current_app": [
                    "Optional[Any]"
                ]
            }
        },
        "clear_url_caches": {
            "name": "clear_url_caches",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_script_prefix": {
            "name": "set_script_prefix",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "Any"
                ]
            }
        },
        "get_script_prefix": {
            "name": "get_script_prefix",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "clear_script_prefix": {
            "name": "clear_script_prefix",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_urlconf": {
            "name": "set_urlconf",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "urlconf_name": [
                    "Any"
                ]
            }
        },
        "get_urlconf": {
            "name": "get_urlconf",
            "location": 20,
            "return": [],
            "arguments": {
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "is_valid_path": {
            "name": "is_valid_path",
            "location": 21,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ],
                "urlconf": [
                    "Optional[Any]"
                ]
            }
        },
        "translate_url": {
            "name": "translate_url",
            "location": 22,
            "return": [],
            "arguments": {
                "url": [
                    "Any"
                ],
                "lang_code": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/urls/conf.py": {
        "include": {
            "name": "include",
            "location": 8,
            "return": [],
            "arguments": {
                "arg": [
                    "Any"
                ],
                "namespace": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/urls/converters.py": {
        "register_converter": {
            "name": "register_converter",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "converter": [
                    "Any"
                ],
                "type_name": [
                    "Any"
                ]
            }
        },
        "get_converters": {
            "name": "get_converters",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "get_converter": {
            "name": "get_converter",
            "location": 33,
            "return": [],
            "arguments": {
                "raw_converter": [
                    "Any"
                ]
            }
        },
        "IntConverter.to_python": {
            "name": "to_python",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "IntConverter.to_url": {
            "name": "to_url",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "StringConverter.to_python": {
            "name": "to_python",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "StringConverter.to_url": {
            "name": "to_url",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "UUIDConverter.to_python": {
            "name": "to_python",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "UUIDConverter.to_url": {
            "name": "to_url",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/urls/exceptions.py": {},
    "django-graphql-master/mypy_stubs/django/urls/resolvers.py": {
        "get_resolver": {
            "name": "get_resolver",
            "location": 23,
            "return": [],
            "arguments": {
                "urlconf": [
                    "Optional[Any]"
                ]
            }
        },
        "get_ns_resolver": {
            "name": "get_ns_resolver",
            "location": 24,
            "return": [],
            "arguments": {
                "ns_pattern": [
                    "Any"
                ],
                "resolver": [
                    "Any"
                ],
                "converters": [
                    "Any"
                ]
            }
        },
        "ResolverMatch.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ],
                "url_name": [
                    "Optional[Any]"
                ],
                "app_names": [
                    "Optional[Any]"
                ],
                "namespaces": [
                    "Optional[Any]"
                ]
            }
        },
        "ResolverMatch.__getitem__": {
            "name": "__getitem__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Any"
                ]
            }
        },
        "LocaleRegexDescriptor.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "Any"
                ]
            }
        },
        "LocaleRegexDescriptor.__get__": {
            "name": "__get__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "CheckURLMixin.describe": {
            "name": "describe",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegexPattern.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "Any"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "is_endpoint": [
                    "bool"
                ]
            }
        },
        "RegexPattern.match": {
            "name": "match",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "RegexPattern.check": {
            "name": "check",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RoutePattern.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "Any"
                ],
                "name": [
                    "Optional[Any]"
                ],
                "is_endpoint": [
                    "bool"
                ]
            }
        },
        "RoutePattern.match": {
            "name": "match",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "RoutePattern.check": {
            "name": "check",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalePrefixPattern.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix_default_language": [
                    "bool"
                ]
            }
        },
        "LocalePrefixPattern.regex": {
            "name": "regex",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalePrefixPattern.language_prefix": {
            "name": "language_prefix",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalePrefixPattern.match": {
            "name": "match",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "LocalePrefixPattern.check": {
            "name": "check",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalePrefixPattern.describe": {
            "name": "describe",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLPattern.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Any"
                ],
                "callback": [
                    "Any"
                ],
                "default_args": [
                    "Optional[Any]"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "URLPattern.check": {
            "name": "check",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLPattern.resolve": {
            "name": "resolve",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "URLPattern.lookup_str": {
            "name": "lookup_str",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLResolver.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Any"
                ],
                "urlconf_name": [
                    "Any"
                ],
                "default_kwargs": [
                    "Optional[Any]"
                ],
                "app_name": [
                    "Optional[Any]"
                ],
                "namespace": [
                    "Optional[Any]"
                ]
            }
        },
        "URLResolver.check": {
            "name": "check",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLResolver.reverse_dict": {
            "name": "reverse_dict",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLResolver.namespace_dict": {
            "name": "namespace_dict",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLResolver.app_dict": {
            "name": "app_dict",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLResolver.resolve": {
            "name": "resolve",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "URLResolver.urlconf_module": {
            "name": "urlconf_module",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLResolver.url_patterns": {
            "name": "url_patterns",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URLResolver.resolve_error_handler": {
            "name": "resolve_error_handler",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "view_type": [
                    "Any"
                ]
            }
        },
        "URLResolver.reverse": {
            "name": "reverse",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "lookup_view": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/urls/utils.py": {
        "get_callable": {
            "name": "get_callable",
            "location": 7,
            "return": [],
            "arguments": {
                "lookup_view": [
                    "Any"
                ]
            }
        },
        "get_mod_func": {
            "name": "get_mod_func",
            "location": 8,
            "return": [],
            "arguments": {
                "callback": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/urls/__init__.py": {},
    "django-graphql-master/mypy_stubs/django/utils/archive.py": {
        "extract": {
            "name": "extract",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "Any"
                ],
                "to_path": [
                    "str"
                ]
            }
        },
        "Archive.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Any"
                ]
            }
        },
        "Archive.__enter__": {
            "name": "__enter__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Archive.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Any"
                ],
                "exc_value": [
                    "Any"
                ],
                "traceback": [
                    "Any"
                ]
            }
        },
        "Archive.extract": {
            "name": "extract",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_path": [
                    "str"
                ]
            }
        },
        "Archive.list": {
            "name": "list",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.close": {
            "name": "close",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseArchive.split_leading_dir": {
            "name": "split_leading_dir",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "Any"
                ]
            }
        },
        "BaseArchive.has_leading_dir": {
            "name": "has_leading_dir",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "paths": [
                    "Any"
                ]
            }
        },
        "BaseArchive.extract": {
            "name": "extract",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseArchive.list": {
            "name": "list",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TarArchive.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Any"
                ]
            }
        },
        "TarArchive.list": {
            "name": "list",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TarArchive.extract": {
            "name": "extract",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_path": [
                    "Any"
                ]
            }
        },
        "TarArchive.close": {
            "name": "close",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipArchive.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Any"
                ]
            }
        },
        "ZipArchive.list": {
            "name": "list",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipArchive.extract": {
            "name": "extract",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_path": [
                    "Any"
                ]
            }
        },
        "ZipArchive.close": {
            "name": "close",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/autoreload.py": {
        "gen_filenames": {
            "name": "gen_filenames",
            "location": 13,
            "return": [],
            "arguments": {
                "only_new": [
                    "bool"
                ]
            }
        },
        "clean_files": {
            "name": "clean_files",
            "location": 14,
            "return": [],
            "arguments": {
                "filelist": [
                    "Any"
                ]
            }
        },
        "reset_translations": {
            "name": "reset_translations",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "inotify_code_changed": {
            "name": "inotify_code_changed",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "code_changed": {
            "name": "code_changed",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "check_errors": {
            "name": "check_errors",
            "location": 18,
            "return": [],
            "arguments": {
                "fn": [
                    "Any"
                ]
            }
        },
        "raise_last_exception": {
            "name": "raise_last_exception",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ensure_echo_on": {
            "name": "ensure_echo_on",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reloader_thread": {
            "name": "reloader_thread",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restart_with_reloader": {
            "name": "restart_with_reloader",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "python_reloader": {
            "name": "python_reloader",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "main_func": [
                    "Any"
                ],
                "args": [
                    "Any"
                ],
                "kwargs": [
                    "Any"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "main_func": [
                    "Any"
                ],
                "args": [
                    "Optional[Any]"
                ],
                "kwargs": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/baseconv.py": {
        "BaseConverter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "digits": [
                    "Any"
                ],
                "sign": [
                    "str"
                ]
            }
        },
        "BaseConverter.encode": {
            "name": "encode",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "Any"
                ]
            }
        },
        "BaseConverter.decode": {
            "name": "decode",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "Any"
                ]
            }
        },
        "BaseConverter.convert": {
            "name": "convert",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "number": [
                    "Any"
                ],
                "from_digits": [
                    "Any"
                ],
                "to_digits": [
                    "Any"
                ],
                "sign": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/cache.py": {
        "patch_cache_control": {
            "name": "patch_cache_control",
            "location": 9,
            "return": [],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "get_max_age": {
            "name": "get_max_age",
            "location": 10,
            "return": [],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "set_response_etag": {
            "name": "set_response_etag",
            "location": 11,
            "return": [],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "get_conditional_response": {
            "name": "get_conditional_response",
            "location": 12,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "etag": [
                    "Optional[Any]"
                ],
                "last_modified": [
                    "Optional[Any]"
                ],
                "response": [
                    "Optional[Any]"
                ]
            }
        },
        "patch_response_headers": {
            "name": "patch_response_headers",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ],
                "cache_timeout": [
                    "Optional[Any]"
                ]
            }
        },
        "add_never_cache_headers": {
            "name": "add_never_cache_headers",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ]
            }
        },
        "patch_vary_headers": {
            "name": "patch_vary_headers",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Any"
                ],
                "newheaders": [
                    "Any"
                ]
            }
        },
        "has_vary_header": {
            "name": "has_vary_header",
            "location": 16,
            "return": [],
            "arguments": {
                "response": [
                    "Any"
                ],
                "header_query": [
                    "Any"
                ]
            }
        },
        "get_cache_key": {
            "name": "get_cache_key",
            "location": 17,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "key_prefix": [
                    "Optional[Any]"
                ],
                "method": [
                    "str"
                ],
                "cache": [
                    "Optional[Any]"
                ]
            }
        },
        "learn_cache_key": {
            "name": "learn_cache_key",
            "location": 18,
            "return": [],
            "arguments": {
                "request": [
                    "Any"
                ],
                "response": [
                    "Any"
                ],
                "cache_timeout": [
                    "Optional[Any]"
                ],
                "key_prefix": [
                    "Optional[Any]"
                ],
                "cache": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/crypto.py": {
        "salted_hmac": {
            "name": "salted_hmac",
            "location": 9,
            "return": [],
            "arguments": {
                "key_salt": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "secret": [
                    "Optional[Any]"
                ]
            }
        },
        "get_random_string": {
            "name": "get_random_string",
            "location": 10,
            "return": [],
            "arguments": {
                "length": [
                    "int"
                ],
                "allowed_chars": [
                    "str"
                ]
            }
        },
        "constant_time_compare": {
            "name": "constant_time_compare",
            "location": 11,
            "return": [],
            "arguments": {
                "val1": [
                    "Any"
                ],
                "val2": [
                    "Any"
                ]
            }
        },
        "pbkdf2": {
            "name": "pbkdf2",
            "location": 12,
            "return": [],
            "arguments": {
                "password": [
                    "Any"
                ],
                "salt": [
                    "Any"
                ],
                "iterations": [
                    "Any"
                ],
                "dklen": [
                    "int"
                ],
                "digest": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/datastructures.py": {
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Optional[Any]"
                ]
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "OrderedSet.remove": {
            "name": "remove",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "OrderedSet.discard": {
            "name": "discard",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__contains__": {
            "name": "__contains__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "OrderedSet.__bool__": {
            "name": "__bool__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__len__": {
            "name": "__len__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiValueDict.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_to_list_mapping": [
                    "Any"
                ]
            }
        },
        "MultiValueDict.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "MultiValueDict.__setitem__": {
            "name": "__setitem__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "MultiValueDict.__copy__": {
            "name": "__copy__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiValueDict.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "MultiValueDict.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "MultiValueDict.getlist": {
            "name": "getlist",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "MultiValueDict.setlist": {
            "name": "setlist",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "list_": [
                    "Any"
                ]
            }
        },
        "MultiValueDict.setdefault": {
            "name": "setdefault",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "MultiValueDict.setlistdefault": {
            "name": "setlistdefault",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "default_list": [
                    "Optional[Any]"
                ]
            }
        },
        "MultiValueDict.appendlist": {
            "name": "appendlist",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "MultiValueDict.items": {
            "name": "items",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiValueDict.lists": {
            "name": "lists",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiValueDict.values": {
            "name": "values",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiValueDict.copy": {
            "name": "copy",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiValueDict.update": {
            "name": "update",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiValueDict.dict": {
            "name": "dict",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableList.__new__": {
            "name": "__new__",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ImmutableList.complain": {
            "name": "complain",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictWrapper.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ],
                "func": [
                    "Any"
                ],
                "prefix": [
                    "Any"
                ]
            }
        },
        "DictWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/dateformat.py": {
        "format": {
            "name": "format",
            "location": 61,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "format_string": [
                    "Any"
                ]
            }
        },
        "time_format": {
            "name": "time_format",
            "location": 62,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "format_string": [
                    "Any"
                ]
            }
        },
        "Formatter.format": {
            "name": "format",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "formatstr": [
                    "Any"
                ]
            }
        },
        "TimeFormat.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "TimeFormat.a": {
            "name": "a",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.A": {
            "name": "A",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.B": {
            "name": "B",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.e": {
            "name": "e",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.f": {
            "name": "f",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.g": {
            "name": "g",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.G": {
            "name": "G",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.h": {
            "name": "h",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.H": {
            "name": "H",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.i": {
            "name": "i",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.O": {
            "name": "O",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.P": {
            "name": "P",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.s": {
            "name": "s",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.T": {
            "name": "T",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.u": {
            "name": "u",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeFormat.Z": {
            "name": "Z",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.b": {
            "name": "b",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.c": {
            "name": "c",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.d": {
            "name": "d",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.D": {
            "name": "D",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.E": {
            "name": "E",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.F": {
            "name": "F",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.I": {
            "name": "I",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.j": {
            "name": "j",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.l": {
            "name": "l",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.L": {
            "name": "L",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.m": {
            "name": "m",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.M": {
            "name": "M",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.n": {
            "name": "n",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.N": {
            "name": "N",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.o": {
            "name": "o",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.r": {
            "name": "r",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.S": {
            "name": "S",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.t": {
            "name": "t",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.U": {
            "name": "U",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.w": {
            "name": "w",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.W": {
            "name": "W",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.y": {
            "name": "y",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.Y": {
            "name": "Y",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateFormat.z": {
            "name": "z",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/dateparse.py": {
        "parse_date": {
            "name": "parse_date",
            "location": 14,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 15,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "parse_datetime": {
            "name": "parse_datetime",
            "location": 16,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "parse_duration": {
            "name": "parse_duration",
            "location": 17,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/dates.py": {},
    "django-graphql-master/mypy_stubs/django/utils/datetime_safe.py": {
        "new_date": {
            "name": "new_date",
            "location": 19,
            "return": [],
            "arguments": {
                "d": [
                    "Any"
                ]
            }
        },
        "new_datetime": {
            "name": "new_datetime",
            "location": 20,
            "return": [],
            "arguments": {
                "d": [
                    "Any"
                ]
            }
        },
        "strftime": {
            "name": "strftime",
            "location": 21,
            "return": [],
            "arguments": {
                "dt": [
                    "Any"
                ],
                "fmt": [
                    "Any"
                ]
            }
        },
        "date.strftime": {
            "name": "strftime",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": [
                    "Any"
                ]
            }
        },
        "datetime.strftime": {
            "name": "strftime",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": [
                    "Any"
                ]
            }
        },
        "datetime.combine": {
            "name": "combine",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "date": [
                    "Any"
                ],
                "time": [
                    "Any"
                ]
            }
        },
        "datetime.date": {
            "name": "date",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/deconstruct.py": {
        "deconstructible": {
            "name": "deconstructible",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/decorators.py": {
        "method_decorator": {
            "name": "method_decorator",
            "location": 10,
            "return": [],
            "arguments": {
                "decorator": [
                    "Any"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "decorator_from_middleware_with_args": {
            "name": "decorator_from_middleware_with_args",
            "location": 11,
            "return": [],
            "arguments": {
                "middleware_class": [
                    "Any"
                ]
            }
        },
        "decorator_from_middleware": {
            "name": "decorator_from_middleware",
            "location": 12,
            "return": [],
            "arguments": {
                "middleware_class": [
                    "Any"
                ]
            }
        },
        "available_attrs": {
            "name": "available_attrs",
            "location": 13,
            "return": [],
            "arguments": {
                "fn": [
                    "Any"
                ]
            }
        },
        "make_middleware_decorator": {
            "name": "make_middleware_decorator",
            "location": 14,
            "return": [],
            "arguments": {
                "middleware_class": [
                    "Any"
                ]
            }
        },
        "classonlymethod.__get__": {
            "name": "__get__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "classproperty.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Optional[Any]"
                ]
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "classproperty.getter": {
            "name": "getter",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/deprecation.py": {
        "warn_about_renamed_method.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "Any"
                ],
                "old_method_name": [
                    "Any"
                ],
                "new_method_name": [
                    "Any"
                ],
                "deprecation_warning": [
                    "Any"
                ]
            }
        },
        "warn_about_renamed_method.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "f": [
                    "Any"
                ]
            }
        },
        "RenameMethodsBase.__new__": {
            "name": "__new__",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [
                    "Any"
                ],
                "bases": [
                    "Any"
                ],
                "attrs": [
                    "Any"
                ]
            }
        },
        "DeprecationInstanceCheck.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "MiddlewareMixin.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Optional[Any]"
                ]
            }
        },
        "MiddlewareMixin.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/duration.py": {
        "duration_string": {
            "name": "duration_string",
            "location": 7,
            "return": [],
            "arguments": {
                "duration": [
                    "Any"
                ]
            }
        },
        "duration_iso_string": {
            "name": "duration_iso_string",
            "location": 8,
            "return": [],
            "arguments": {
                "duration": [
                    "Any"
                ]
            }
        },
        "duration_microseconds": {
            "name": "duration_microseconds",
            "location": 9,
            "return": [],
            "arguments": {
                "delta": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/encoding.py": {
        "smart_text": {
            "name": "smart_text",
            "location": 13,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ],
                "encoding": [
                    "str"
                ],
                "strings_only": [
                    "bool"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "is_protected_type": {
            "name": "is_protected_type",
            "location": 14,
            "return": [],
            "arguments": {
                "obj": [
                    "Any"
                ]
            }
        },
        "force_text": {
            "name": "force_text",
            "location": 15,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ],
                "encoding": [
                    "str"
                ],
                "strings_only": [
                    "bool"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "smart_bytes": {
            "name": "smart_bytes",
            "location": 16,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ],
                "encoding": [
                    "str"
                ],
                "strings_only": [
                    "bool"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "force_bytes": {
            "name": "force_bytes",
            "location": 17,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ],
                "encoding": [
                    "str"
                ],
                "strings_only": [
                    "bool"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "iri_to_uri": {
            "name": "iri_to_uri",
            "location": 21,
            "return": [],
            "arguments": {
                "iri": [
                    "Any"
                ]
            }
        },
        "uri_to_iri": {
            "name": "uri_to_iri",
            "location": 22,
            "return": [],
            "arguments": {
                "uri": [
                    "Any"
                ]
            }
        },
        "escape_uri_path": {
            "name": "escape_uri_path",
            "location": 23,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "repercent_broken_unicode": {
            "name": "repercent_broken_unicode",
            "location": 24,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "filepath_to_uri": {
            "name": "filepath_to_uri",
            "location": 25,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "get_system_encoding": {
            "name": "get_system_encoding",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "DjangoUnicodeDecodeError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/feedgenerator.py": {
        "rfc2822_date": {
            "name": "rfc2822_date",
            "location": 7,
            "return": [],
            "arguments": {
                "date": [
                    "Any"
                ]
            }
        },
        "rfc3339_date": {
            "name": "rfc3339_date",
            "location": 8,
            "return": [],
            "arguments": {
                "date": [
                    "Any"
                ]
            }
        },
        "get_tag_uri": {
            "name": "get_tag_uri",
            "location": 9,
            "return": [],
            "arguments": {
                "url": [
                    "Any"
                ],
                "date": [
                    "Any"
                ]
            }
        },
        "SyndicationFeed.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "Any"
                ],
                "link": [
                    "Any"
                ],
                "description": [
                    "Any"
                ],
                "language": [
                    "Optional[Any]"
                ],
                "author_email": [
                    "Optional[Any]"
                ],
                "author_name": [
                    "Optional[Any]"
                ],
                "author_link": [
                    "Optional[Any]"
                ],
                "subtitle": [
                    "Optional[Any]"
                ],
                "categories": [
                    "Optional[Any]"
                ],
                "feed_url": [
                    "Optional[Any]"
                ],
                "feed_copyright": [
                    "Optional[Any]"
                ],
                "feed_guid": [
                    "Optional[Any]"
                ],
                "ttl": [
                    "Optional[Any]"
                ]
            }
        },
        "SyndicationFeed.add_item": {
            "name": "add_item",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "title": [
                    "Any"
                ],
                "link": [
                    "Any"
                ],
                "description": [
                    "Any"
                ],
                "author_email": [
                    "Optional[Any]"
                ],
                "author_name": [
                    "Optional[Any]"
                ],
                "author_link": [
                    "Optional[Any]"
                ],
                "pubdate": [
                    "Optional[Any]"
                ],
                "comments": [
                    "Optional[Any]"
                ],
                "unique_id": [
                    "Optional[Any]"
                ],
                "unique_id_is_permalink": [
                    "Optional[Any]"
                ],
                "categories": [
                    "Any"
                ],
                "item_copyright": [
                    "Optional[Any]"
                ],
                "ttl": [
                    "Optional[Any]"
                ],
                "updateddate": [
                    "Optional[Any]"
                ],
                "enclosures": [
                    "Optional[Any]"
                ]
            }
        },
        "SyndicationFeed.num_items": {
            "name": "num_items",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyndicationFeed.root_attributes": {
            "name": "root_attributes",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyndicationFeed.add_root_elements": {
            "name": "add_root_elements",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "SyndicationFeed.item_attributes": {
            "name": "item_attributes",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "SyndicationFeed.add_item_elements": {
            "name": "add_item_elements",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ]
            }
        },
        "SyndicationFeed.write": {
            "name": "write",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "Any"
                ],
                "encoding": [
                    "Any"
                ]
            }
        },
        "SyndicationFeed.writeString": {
            "name": "writeString",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [
                    "Any"
                ]
            }
        },
        "SyndicationFeed.latest_post_date": {
            "name": "latest_post_date",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enclosure.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Any"
                ],
                "length": [
                    "Any"
                ],
                "mime_type": [
                    "Any"
                ]
            }
        },
        "RssFeed.write": {
            "name": "write",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "Any"
                ],
                "encoding": [
                    "Any"
                ]
            }
        },
        "RssFeed.rss_attributes": {
            "name": "rss_attributes",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RssFeed.write_items": {
            "name": "write_items",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "RssFeed.add_root_elements": {
            "name": "add_root_elements",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "RssFeed.endChannelElement": {
            "name": "endChannelElement",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "RssUserland091Feed.add_item_elements": {
            "name": "add_item_elements",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ]
            }
        },
        "Rss201rev2Feed.add_item_elements": {
            "name": "add_item_elements",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ]
            }
        },
        "Atom1Feed.write": {
            "name": "write",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "Any"
                ],
                "encoding": [
                    "Any"
                ]
            }
        },
        "Atom1Feed.root_attributes": {
            "name": "root_attributes",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Atom1Feed.add_root_elements": {
            "name": "add_root_elements",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "Atom1Feed.write_items": {
            "name": "write_items",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ]
            }
        },
        "Atom1Feed.add_item_elements": {
            "name": "add_item_elements",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Any"
                ],
                "item": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/formats.py": {
        "reset_format_cache": {
            "name": "reset_format_cache",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "iter_format_modules": {
            "name": "iter_format_modules",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "lang": [
                    "Any"
                ],
                "format_module_path": [
                    "Optional[Any]"
                ]
            }
        },
        "get_format_modules": {
            "name": "get_format_modules",
            "location": 12,
            "return": [],
            "arguments": {
                "lang": [
                    "Optional[Any]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "get_format": {
            "name": "get_format",
            "location": 13,
            "return": [],
            "arguments": {
                "format_type": [
                    "Any"
                ],
                "lang": [
                    "Optional[Any]"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ]
            }
        },
        "date_format": {
            "name": "date_format",
            "location": 17,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "format": [
                    "Optional[Any]"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ]
            }
        },
        "time_format": {
            "name": "time_format",
            "location": 18,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "format": [
                    "Optional[Any]"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ]
            }
        },
        "number_format": {
            "name": "number_format",
            "location": 19,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "decimal_pos": [
                    "Optional[Any]"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ],
                "force_grouping": [
                    "bool"
                ]
            }
        },
        "localize": {
            "name": "localize",
            "location": 20,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ]
            }
        },
        "localize_input": {
            "name": "localize_input",
            "location": 21,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "default": [
                    "Optional[Any]"
                ]
            }
        },
        "sanitize_separators": {
            "name": "sanitize_separators",
            "location": 22,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/functional.py": {
        "curry": {
            "name": "curry",
            "location": 7,
            "return": [],
            "arguments": {
                "_curried_func": [
                    "Any"
                ]
            }
        },
        "lazy": {
            "name": "lazy",
            "location": 18,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "lazystr": {
            "name": "lazystr",
            "location": 19,
            "return": [],
            "arguments": {
                "text": [
                    "Any"
                ]
            }
        },
        "keep_lazy": {
            "name": "keep_lazy",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "keep_lazy_text": {
            "name": "keep_lazy_text",
            "location": 21,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "new_method_proxy": {
            "name": "new_method_proxy",
            "location": 25,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "unpickle_lazyobject": {
            "name": "unpickle_lazyobject",
            "location": 49,
            "return": [],
            "arguments": {
                "wrapped": [
                    "Any"
                ]
            }
        },
        "partition": {
            "name": "partition",
            "location": 56,
            "return": [],
            "arguments": {
                "predicate": [
                    "Any"
                ],
                "values": [
                    "Any"
                ]
            }
        },
        "cached_property.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ],
                "name": [
                    "Optional[Any]"
                ]
            }
        },
        "cached_property.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "cls": [
                    "Optional[Any]"
                ]
            }
        },
        "LazyObject.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyObject.__setattr__": {
            "name": "__setattr__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "LazyObject.__delattr__": {
            "name": "__delattr__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "LazyObject.__reduce__": {
            "name": "__reduce__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyObject.__copy__": {
            "name": "__copy__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyObject.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        },
        "SimpleLazyObject.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Any"
                ]
            }
        },
        "SimpleLazyObject.__copy__": {
            "name": "__copy__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleLazyObject.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/hashable.py": {
        "make_hashable": {
            "name": "make_hashable",
            "location": 7,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/html.py": {
        "escape": {
            "name": "escape",
            "location": 16,
            "return": [],
            "arguments": {
                "text": [
                    "Any"
                ]
            }
        },
        "escapejs": {
            "name": "escapejs",
            "location": 17,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "json_script": {
            "name": "json_script",
            "location": 18,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "element_id": [
                    "Any"
                ]
            }
        },
        "conditional_escape": {
            "name": "conditional_escape",
            "location": 19,
            "return": [],
            "arguments": {
                "text": [
                    "Any"
                ]
            }
        },
        "format_html": {
            "name": "format_html",
            "location": 20,
            "return": [],
            "arguments": {
                "format_string": [
                    "Any"
                ]
            }
        },
        "format_html_join": {
            "name": "format_html_join",
            "location": 21,
            "return": [],
            "arguments": {
                "sep": [
                    "Any"
                ],
                "format_string": [
                    "Any"
                ],
                "args_generator": [
                    "Any"
                ]
            }
        },
        "linebreaks": {
            "name": "linebreaks",
            "location": 22,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "strip_tags": {
            "name": "strip_tags",
            "location": 32,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "strip_spaces_between_tags": {
            "name": "strip_spaces_between_tags",
            "location": 33,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "smart_urlquote": {
            "name": "smart_urlquote",
            "location": 34,
            "return": [],
            "arguments": {
                "url": [
                    "Any"
                ]
            }
        },
        "urlize": {
            "name": "urlize",
            "location": 35,
            "return": [],
            "arguments": {
                "text": [
                    "Any"
                ],
                "trim_url_limit": [
                    "Optional[Any]"
                ],
                "nofollow": [
                    "bool"
                ],
                "autoescape": [
                    "bool"
                ]
            }
        },
        "avoid_wrapping": {
            "name": "avoid_wrapping",
            "location": 36,
            "return": [],
            "arguments": {
                "value": [
                    "Any"
                ]
            }
        },
        "html_safe": {
            "name": "html_safe",
            "location": 37,
            "return": [],
            "arguments": {
                "klass": [
                    "Any"
                ]
            }
        },
        "MLStripper.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLStripper.handle_data": {
            "name": "handle_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Any"
                ]
            }
        },
        "MLStripper.handle_entityref": {
            "name": "handle_entityref",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "MLStripper.handle_charref": {
            "name": "handle_charref",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "MLStripper.get_data": {
            "name": "get_data",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/http.py": {
        "urlquote": {
            "name": "urlquote",
            "location": 16,
            "return": [],
            "arguments": {
                "url": [
                    "Any"
                ],
                "safe": [
                    "str"
                ]
            }
        },
        "urlquote_plus": {
            "name": "urlquote_plus",
            "location": 17,
            "return": [],
            "arguments": {
                "url": [
                    "Any"
                ],
                "safe": [
                    "str"
                ]
            }
        },
        "urlunquote": {
            "name": "urlunquote",
            "location": 18,
            "return": [],
            "arguments": {
                "quoted_url": [
                    "Any"
                ]
            }
        },
        "urlunquote_plus": {
            "name": "urlunquote_plus",
            "location": 19,
            "return": [],
            "arguments": {
                "quoted_url": [
                    "Any"
                ]
            }
        },
        "urlencode": {
            "name": "urlencode",
            "location": 20,
            "return": [],
            "arguments": {
                "query": [
                    "Any"
                ],
                "doseq": [
                    "bool"
                ]
            }
        },
        "cookie_date": {
            "name": "cookie_date",
            "location": 21,
            "return": [],
            "arguments": {
                "epoch_seconds": [
                    "Optional[Any]"
                ]
            }
        },
        "http_date": {
            "name": "http_date",
            "location": 22,
            "return": [],
            "arguments": {
                "epoch_seconds": [
                    "Optional[Any]"
                ]
            }
        },
        "parse_http_date": {
            "name": "parse_http_date",
            "location": 23,
            "return": [],
            "arguments": {
                "date": [
                    "Any"
                ]
            }
        },
        "parse_http_date_safe": {
            "name": "parse_http_date_safe",
            "location": 24,
            "return": [],
            "arguments": {
                "date": [
                    "Any"
                ]
            }
        },
        "base36_to_int": {
            "name": "base36_to_int",
            "location": 25,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "int_to_base36": {
            "name": "int_to_base36",
            "location": 26,
            "return": [],
            "arguments": {
                "i": [
                    "Any"
                ]
            }
        },
        "urlsafe_base64_encode": {
            "name": "urlsafe_base64_encode",
            "location": 27,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "urlsafe_base64_decode": {
            "name": "urlsafe_base64_decode",
            "location": 28,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "parse_etags": {
            "name": "parse_etags",
            "location": 29,
            "return": [],
            "arguments": {
                "etag_str": [
                    "Any"
                ]
            }
        },
        "quote_etag": {
            "name": "quote_etag",
            "location": 30,
            "return": [],
            "arguments": {
                "etag_str": [
                    "Any"
                ]
            }
        },
        "is_same_domain": {
            "name": "is_same_domain",
            "location": 31,
            "return": [],
            "arguments": {
                "host": [
                    "Any"
                ],
                "pattern": [
                    "Any"
                ]
            }
        },
        "is_safe_url": {
            "name": "is_safe_url",
            "location": 32,
            "return": [],
            "arguments": {
                "url": [
                    "Any"
                ],
                "allowed_hosts": [
                    "Any"
                ],
                "require_https": [
                    "bool"
                ]
            }
        },
        "limited_parse_qsl": {
            "name": "limited_parse_qsl",
            "location": 33,
            "return": [],
            "arguments": {
                "qs": [
                    "Any"
                ],
                "keep_blank_values": [
                    "bool"
                ],
                "encoding": [
                    "str"
                ],
                "errors": [
                    "str"
                ],
                "fields_limit": [
                    "Optional[Any]"
                ]
            }
        },
        "escape_leading_slashes": {
            "name": "escape_leading_slashes",
            "location": 34,
            "return": [],
            "arguments": {
                "url": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/inspect.py": {
        "get_func_args": {
            "name": "get_func_args",
            "location": 7,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "get_func_full_args": {
            "name": "get_func_full_args",
            "location": 8,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "func_accepts_kwargs": {
            "name": "func_accepts_kwargs",
            "location": 9,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "func_accepts_var_args": {
            "name": "func_accepts_var_args",
            "location": 10,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "func_has_no_args": {
            "name": "func_has_no_args",
            "location": 11,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ]
            }
        },
        "func_supports_parameter": {
            "name": "func_supports_parameter",
            "location": 12,
            "return": [],
            "arguments": {
                "func": [
                    "Any"
                ],
                "parameter": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/ipv6.py": {
        "clean_ipv6_address": {
            "name": "clean_ipv6_address",
            "location": 7,
            "return": [],
            "arguments": {
                "ip_str": [
                    "Any"
                ],
                "unpack_ipv4": [
                    "bool"
                ],
                "error_message": [
                    "Any"
                ]
            }
        },
        "is_valid_ipv6_address": {
            "name": "is_valid_ipv6_address",
            "location": 8,
            "return": [],
            "arguments": {
                "ip_str": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/itercompat.py": {
        "is_iterable": {
            "name": "is_iterable",
            "location": 7,
            "return": [],
            "arguments": {
                "x": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/jslex.py": {
        "literals": {
            "name": "literals",
            "location": 15,
            "return": [],
            "arguments": {
                "choices": [
                    "Any"
                ],
                "prefix": [
                    "str"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "prepare_js_for_gettext": {
            "name": "prepare_js_for_gettext",
            "location": 30,
            "return": [],
            "arguments": {
                "js": [
                    "Any"
                ]
            }
        },
        "Tok.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ],
                "regex": [
                    "Any"
                ],
                "next": [
                    "Optional[Any]"
                ]
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "Any"
                ],
                "first": [
                    "Any"
                ]
            }
        },
        "Lexer.lex": {
            "name": "lex",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Any"
                ]
            }
        },
        "JsLexer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/log.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "logging_config": [
                    "Any"
                ],
                "logging_settings": [
                    "Any"
                ]
            }
        },
        "log_response": {
            "name": "log_response",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "Any"
                ]
            }
        },
        "AdminEmailHandler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include_html": [
                    "bool"
                ],
                "email_backend": [
                    "Optional[Any]"
                ]
            }
        },
        "AdminEmailHandler.emit": {
            "name": "emit",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Any"
                ]
            }
        },
        "AdminEmailHandler.send_mail": {
            "name": "send_mail",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "Any"
                ],
                "message": [
                    "Any"
                ]
            }
        },
        "AdminEmailHandler.connection": {
            "name": "connection",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminEmailHandler.format_subject": {
            "name": "format_subject",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [
                    "Any"
                ]
            }
        },
        "CallbackFilter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Any"
                ]
            }
        },
        "CallbackFilter.filter": {
            "name": "filter",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "record": [
                    "Any"
                ]
            }
        },
        "RequireDebugFalse.filter": {
            "name": "filter",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "record": [
                    "Any"
                ]
            }
        },
        "RequireDebugTrue.filter": {
            "name": "filter",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "record": [
                    "Any"
                ]
            }
        },
        "ServerFormatter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerFormatter.format": {
            "name": "format",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "record": [
                    "Any"
                ]
            }
        },
        "ServerFormatter.uses_server_time": {
            "name": "uses_server_time",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/lorem_ipsum.py": {
        "sentence": {
            "name": "sentence",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "paragraph": {
            "name": "paragraph",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "paragraphs": {
            "name": "paragraphs",
            "location": 13,
            "return": [],
            "arguments": {
                "count": [
                    "Any"
                ],
                "common": [
                    "bool"
                ]
            }
        },
        "words": {
            "name": "words",
            "location": 14,
            "return": [],
            "arguments": {
                "count": [
                    "Any"
                ],
                "common": [
                    "bool"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/lru_cache.py": {},
    "django-graphql-master/mypy_stubs/django/utils/module_loading.py": {
        "import_string": {
            "name": "import_string",
            "location": 7,
            "return": [],
            "arguments": {
                "dotted_path": [
                    "Any"
                ]
            }
        },
        "autodiscover_modules": {
            "name": "autodiscover_modules",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "module_has_submodule": {
            "name": "module_has_submodule",
            "location": 9,
            "return": [],
            "arguments": {
                "package": [
                    "Any"
                ],
                "module_name": [
                    "Any"
                ]
            }
        },
        "module_dir": {
            "name": "module_dir",
            "location": 10,
            "return": [],
            "arguments": {
                "module": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/numberformat.py": {
        "format": {
            "name": "format",
            "location": 7,
            "return": [],
            "arguments": {
                "number": [
                    "Any"
                ],
                "decimal_sep": [
                    "Any"
                ],
                "decimal_pos": [
                    "Optional[Any]"
                ],
                "grouping": [
                    "int"
                ],
                "thousand_sep": [
                    "str"
                ],
                "force_grouping": [
                    "bool"
                ],
                "use_l10n": [
                    "Optional[Any]"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/regex_helper.py": {
        "normalize": {
            "name": "normalize",
            "location": 13,
            "return": [],
            "arguments": {
                "pattern": [
                    "Any"
                ]
            }
        },
        "next_char": {
            "name": "next_char",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "input_iter": [
                    "Any"
                ]
            }
        },
        "walk_to_end": {
            "name": "walk_to_end",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "ch": [
                    "Any"
                ],
                "input_iter": [
                    "Any"
                ]
            }
        },
        "get_quantifier": {
            "name": "get_quantifier",
            "location": 16,
            "return": [],
            "arguments": {
                "ch": [
                    "Any"
                ],
                "input_iter": [
                    "Any"
                ]
            }
        },
        "contains": {
            "name": "contains",
            "location": 17,
            "return": [],
            "arguments": {
                "source": [
                    "Any"
                ],
                "inst": [
                    "Any"
                ]
            }
        },
        "flatten_result": {
            "name": "flatten_result",
            "location": 18,
            "return": [],
            "arguments": {
                "source": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/safestring.py": {
        "mark_safe": {
            "name": "mark_safe",
            "location": 17,
            "return": [],
            "arguments": {
                "s": [
                    "Any"
                ]
            }
        },
        "SafeData.__html__": {
            "name": "__html__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SafeBytes.__add__": {
            "name": "__add__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "rhs": [
                    "Any"
                ]
            }
        },
        "SafeText.__add__": {
            "name": "__add__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "rhs": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/tree.py": {},
    "django-graphql-master/mypy_stubs/django/utils/_os.py": {
        "upath": {
            "name": "upath",
            "location": 10,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "npath": {
            "name": "npath",
            "location": 11,
            "return": [],
            "arguments": {
                "path": [
                    "Any"
                ]
            }
        },
        "safe_join": {
            "name": "safe_join",
            "location": 12,
            "return": [],
            "arguments": {
                "base": [
                    "Any"
                ]
            }
        },
        "symlinks_supported": {
            "name": "symlinks_supported",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/mypy_stubs/django/utils/__init__.py": {},
    "django-graphql-master/mypy_stubs/model_utils/choices.py": {
        "Choices.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choices.__len__": {
            "name": "__len__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Choices.__iter__": {
            "name": "__iter__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Choices.__getattr__": {
            "name": "__getattr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "attname": [
                    "Any"
                ]
            }
        },
        "Choices.__getitem__": {
            "name": "__getitem__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Choices.__add__": {
            "name": "__add__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Choices.__radd__": {
            "name": "__radd__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Choices.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Choices.__contains__": {
            "name": "__contains__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ]
            }
        },
        "Choices.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "memo": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/model_utils/managers.py": {
        "InheritanceIterable.__iter__": {
            "name": "__iter__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InheritanceQuerySetMixin.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InheritanceQuerySetMixin.select_subclasses": {
            "name": "select_subclasses",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InheritanceQuerySetMixin.annotate": {
            "name": "annotate",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InheritanceQuerySetMixin.iterator": {
            "name": "iterator",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InheritanceQuerySetMixin.get_subclass": {
            "name": "get_subclass",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InheritanceManagerMixin.get_queryset": {
            "name": "get_queryset",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InheritanceManagerMixin.select_subclasses": {
            "name": "select_subclasses",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InheritanceManagerMixin.get_subclass": {
            "name": "get_subclass",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryManagerMixin.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryManagerMixin.order_by": {
            "name": "order_by",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryManagerMixin.get_queryset": {
            "name": "get_queryset",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftDeletableQuerySetMixin.delete": {
            "name": "delete",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftDeletableManagerMixin.get_queryset": {
            "name": "get_queryset",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-graphql-master/mypy_stubs/model_utils/tracker.py": {
        "DescriptorMixin.__get__": {
            "name": "__get__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "owner": [
                    "Any"
                ]
            }
        },
        "FieldInstanceTracker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "fields": [
                    "Any"
                ],
                "field_map": [
                    "Any"
                ]
            }
        },
        "FieldInstanceTracker.get_field_value": {
            "name": "get_field_value",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "FieldInstanceTracker.set_saved_fields": {
            "name": "set_saved_fields",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Optional[Any]"
                ]
            }
        },
        "FieldInstanceTracker.current": {
            "name": "current",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "Optional[Any]"
                ]
            }
        },
        "FieldInstanceTracker.has_changed": {
            "name": "has_changed",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "FieldInstanceTracker.previous": {
            "name": "previous",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "FieldInstanceTracker.changed": {
            "name": "changed",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldInstanceTracker.init_deferred_fields": {
            "name": "init_deferred_fields",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTracker.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Optional[Any]"
                ]
            }
        },
        "FieldTracker.get_field_map": {
            "name": "get_field_map",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ]
            }
        },
        "FieldTracker.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ],
                "name": [
                    "Any"
                ]
            }
        },
        "FieldTracker.finalize_class": {
            "name": "finalize_class",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "Any"
                ]
            }
        },
        "FieldTracker.initialize_tracker": {
            "name": "initialize_tracker",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "Any"
                ],
                "instance": [
                    "Any"
                ]
            }
        },
        "FieldTracker.patch_save": {
            "name": "patch_save",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ]
            }
        },
        "FieldTracker.__get__": {
            "name": "__get__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "owner": [
                    "Any"
                ]
            }
        },
        "ModelInstanceTracker.has_changed": {
            "name": "has_changed",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "Any"
                ]
            }
        },
        "ModelInstanceTracker.changed": {
            "name": "changed",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelTracker.get_field_map": {
            "name": "get_field_map",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "Any"
                ]
            }
        }
    },
    "django-graphql-master/mypy_stubs/model_utils/__init__.py": {},
    "django-graphql-master/src/manage.py": {},
    "django-graphql-master/src/apps/__init__.py": {},
    "django-graphql-master/src/apps/for_django/admin.py": {},
    "django-graphql-master/src/apps/for_django/apps.py": {},
    "django-graphql-master/src/apps/for_django/graphql_mutation.py": {
        "Token.mutate": {
            "name": "mutate",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "ResolveInfo"
                ],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "SocialAuthCallbackPayload.mutate": {
            "name": "mutate",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "ResolveInfo"
                ],
                "input": [
                    "SocialAuthCallbackInput"
                ]
            }
        }
    },
    "django-graphql-master/src/apps/for_django/graphql_query.py": {
        "User.resolve_full_name": {
            "name": "resolve_full_name",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "UserQuery.resolve_allUsers": {
            "name": "resolve_allUsers",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "ResolveInfo"
                ],
                "pk_gte": [
                    "bool"
                ]
            }
        },
        "UserQuery.resolve_user": {
            "name": "resolve_user",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "ResolveInfo"
                ],
                "pk": []
            }
        }
    },
    "django-graphql-master/src/apps/for_django/managers.py": {
        "UserManager.create_superuser": {
            "name": "create_superuser",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "email": [],
                "password": []
            }
        }
    },
    "django-graphql-master/src/apps/for_django/models.py": {},
    "django-graphql-master/src/apps/for_django/urls.py": {},
    "django-graphql-master/src/apps/for_django/view.py": {
        "LoginView.post": {
            "name": "post",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "HttpRequest"
                ]
            }
        }
    },
    "django-graphql-master/src/apps/for_django/__init__.py": {},
    "django-graphql-master/src/apps/for_django/migrations/0001_initial.py": {},
    "django-graphql-master/src/apps/for_django/migrations/__init__.py": {},
    "django-graphql-master/src/config/schema.py": {},
    "django-graphql-master/src/config/urls.py": {},
    "django-graphql-master/src/config/wsgi.py": {},
    "django-graphql-master/src/config/__init__.py": {},
    "django-graphql-master/src/config/settings/base.py": {},
    "django-graphql-master/src/config/settings/local.py": {},
    "django-graphql-master/src/config/settings/__init__.py": {},
    "django-graphql-master/src/utils/choices.py": {},
    "django-graphql-master/src/utils/graphql_auth.py": {
        "login_required_resolver": {
            "name": "login_required_resolver",
            "location": 8,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "permission_required_resolver": {
            "name": "permission_required_resolver",
            "location": 17,
            "return": [],
            "arguments": {
                "roles": [
                    "List[str]"
                ]
            }
        },
        "login_required_resolver.wrapper": {
            "name": "wrapper",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "ResolveInfo"
                ]
            }
        },
        "permission_required_resolver.wrap": {
            "name": "wrap",
            "location": 18,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "permission_required_resolver.wrap.wrapped_f": {
            "name": "wrapped_f",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "ResolveInfo"
                ]
            }
        }
    },
    "django-graphql-master/src/utils/jwt.py": {
        "encode": {
            "name": "encode",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 22,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        }
    },
    "django-graphql-master/src/utils/jwt_middleware.py": {
        "get_user": {
            "name": "get_user",
            "location": 10,
            "return": [
                "Optional[User]"
            ],
            "arguments": {
                "user_id": []
            }
        },
        "JWTAuthenticationMiddleware.process_request": {
            "name": "process_request",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "django-graphql-master/src/utils/test_jwt.py": {
        "test_encode_decode": {
            "name": "test_encode_decode",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "django-graphql-master/src/utils/__init__.py": {},
    "django-graphql-master/src/utils/oauth/facebook.py": {
        "oauth": {
            "name": "oauth",
            "location": 12,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "get_user_detail": {
            "name": "get_user_detail",
            "location": 22,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        }
    },
    "django-graphql-master/src/utils/oauth/__init__.py": {}
}
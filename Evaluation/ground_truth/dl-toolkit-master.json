{
    "dl-toolkit-master/main_divide.py": {},
    "dl-toolkit-master/setup.py": {},
    "dl-toolkit-master/src/preprocessing/base.py": {
        "BasePandasTransformer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ]
            }
        },
        "BasePandasTransformer.check_column_params": {
            "name": "check_column_params",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ]
            }
        },
        "BasePandasTransformer.__normalize_column_param": {
            "name": "__normalize_column_param",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ]
            }
        },
        "BasePandasTransformer.prepare_to_fit": {
            "name": "prepare_to_fit",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "BasePandasTransformer._check_types": {
            "name": "_check_types",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "BasePandasTransformer._check_str": {
            "name": "_check_str",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "param_name": [
                    "str"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/column_transformers.py": {
        "LogTransformer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ]
            }
        },
        "LogTransformer.fit": {
            "name": "fit",
            "location": 17,
            "return": [
                "Type['LogTransformer']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "LogTransformer.transform": {
            "name": "transform",
            "location": 26,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "LogTransformer.inverse_transform": {
            "name": "inverse_transform",
            "location": 29,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "Log10Transformer.fit": {
            "name": "fit",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "Log10Transformer.transform": {
            "name": "transform",
            "location": 46,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "Log10Transformer.inverse_transform": {
            "name": "inverse_transform",
            "location": 49,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "PercentChangeTransformer.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ],
                "periods": []
            }
        },
        "PercentChangeTransformer.fit": {
            "name": "fit",
            "location": 77,
            "return": [
                "Type['PercentChangeTransformer']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "PercentChangeTransformer.transform": {
            "name": "transform",
            "location": 85,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "MovingAverageTransformer.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "column": [
                    "str"
                ],
                "window": [],
                "kind": []
            }
        },
        "MovingAverageTransformer.fit": {
            "name": "fit",
            "location": 105,
            "return": [
                "Type['MovingAverageTransformer']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "MovingAverageTransformer.transform": {
            "name": "transform",
            "location": 115,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "MovingAverageTransformer._check_init_params": {
            "name": "_check_init_params",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "column": [
                    "str"
                ],
                "window": [
                    "int"
                ],
                "kind": [
                    "str"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/io.py": {
        "CsvSaver.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "write_index": []
            }
        },
        "CsvSaver.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "CsvSaver._check_init_params": {
            "name": "_check_init_params",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/pandas_wrapper.py": {
        "DataFrameWrapper.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "List[str]"
                ],
                "index": []
            }
        },
        "DataFrameWrapper.fit": {
            "name": "fit",
            "location": 29,
            "return": [
                "Type['DataFrameWrapper']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ],
                "y": []
            }
        },
        "DataFrameWrapper.transform": {
            "name": "transform",
            "location": 44,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "np.ndarray"
                ]
            }
        },
        "PandasFeatureUnion.merge_dataframes_by_column": {
            "name": "merge_dataframes_by_column",
            "location": 60,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "Xs": []
            }
        },
        "PandasFeatureUnion.transform": {
            "name": "transform",
            "location": 64,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "PandasFeatureUnion.fit_transform": {
            "name": "fit_transform",
            "location": 96,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/price_transformation.py": {
        "LogReturns.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ]
            }
        },
        "LogReturns.fit": {
            "name": "fit",
            "location": 17,
            "return": [
                "Type['LogReturns']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "LogReturns.transform": {
            "name": "transform",
            "location": 22,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "PercentReturns.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ]
            }
        },
        "PercentReturns.fit": {
            "name": "fit",
            "location": 36,
            "return": [
                "Type['PercentReturns']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "PercentReturns.transform": {
            "name": "transform",
            "location": 49,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/scaling.py": {
        "BaseScaler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ],
                "train_len": [
                    "int"
                ]
            }
        },
        "BaseScaler.transform": {
            "name": "transform",
            "location": 30,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "BaseScaler.inverse_transform": {
            "name": "inverse_transform",
            "location": 39,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "MinMaxScaler.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ],
                "feature_range": [],
                "copy": [],
                "train_len": [
                    "int"
                ]
            }
        },
        "MinMaxScaler.fit": {
            "name": "fit",
            "location": 62,
            "return": [
                "Type['MinMaxScaler']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "StandardScaler.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ],
                "copy": [],
                "with_mean": [],
                "with_std": [],
                "train_len": [
                    "int"
                ]
            }
        },
        "StandardScaler.fit": {
            "name": "fit",
            "location": 98,
            "return": [
                "Type['MinMaxScaler']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/selection.py": {
        "RowSelector.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "RowSelector.fit": {
            "name": "fit",
            "location": 23,
            "return": [
                "Type['RowSelector']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "RowSelector.transform": {
            "name": "transform",
            "location": 34,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "RowSelector._check_init_params": {
            "name": "_check_init_params",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "ColumnSelector.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "ColumnSelector.fit": {
            "name": "fit",
            "location": 67,
            "return": [
                "Type['ColumnSelector']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "ColumnSelector.transform": {
            "name": "transform",
            "location": 72,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/two_columns_transformers.py": {
        "TwoColumnsTransformer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ],
                "operation": [
                    "Callable[([np.ndarray, np.ndarray], np.ndarray)]"
                ],
                "new_col_name": [
                    "str"
                ],
                "safety_checks": []
            }
        },
        "TwoColumnsTransformer.fit": {
            "name": "fit",
            "location": 59,
            "return": [
                "Type['TwoColumnsTransformer']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "TwoColumnsTransformer.transform": {
            "name": "transform",
            "location": 72,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "TwoColPercentDiffTransformer.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ]
            }
        },
        "TwoColPercentDiffTransformer.fit": {
            "name": "fit",
            "location": 120,
            "return": [
                "Type['TwoColPercentDiffTransformer']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "TwoColPercentDiffTransformer.transform": {
            "name": "transform",
            "location": 125,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "TwoColPercentDiffTransformer.__init__.operation": {
            "name": "operation",
            "location": 109,
            "return": [],
            "arguments": {
                "a": [
                    "np.ndarray"
                ],
                "b": [
                    "np.ndarray"
                ]
            }
        },
        "TwoColPercentDiffTransformer.__init__.safety": {
            "name": "safety",
            "location": 112,
            "return": [],
            "arguments": {
                "a": [
                    "np.ndarray"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/__init__.py": {},
    "dl-toolkit-master/src/preprocessing/divide_dataset/divide.py": {
        "TimeseriesDateIntervalComputer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "date_column": [
                    "str"
                ],
                "period_len": [
                    "int"
                ],
                "period_shift": [
                    "int"
                ],
                "train_len": [
                    "int"
                ]
            }
        },
        "TimeseriesDateIntervalComputer.fit": {
            "name": "fit",
            "location": 69,
            "return": [
                "Type['TimeseriesDateIntervalComputer']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "TimeseriesDateIntervalComputer.transform": {
            "name": "transform",
            "location": 86,
            "return": [
                "Tuple[(np.ndarray, np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/divide_dataset/make_dataset.py": {
        "DatasetCreator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "Sequence[str]"
                ],
                "train_len": [
                    "int"
                ],
                "bptt": [
                    "int"
                ],
                "valid_percent": [
                    "Union[(float, None)]"
                ],
                "shuffle_in_time": [],
                "shuffle_columns": [],
                "interactive": []
            }
        },
        "DatasetCreator.fit": {
            "name": "fit",
            "location": 43,
            "return": [
                "Type['DatasetCreator']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "DatasetCreator.transform": {
            "name": "transform",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        },
        "DatasetCreator.subset_no_validation": {
            "name": "subset_no_validation",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "pd.DataFrame"
                ],
                "start_index": [],
                "end_index": [],
                "bptt": [],
                "shuffle_columns": []
            }
        },
        "DatasetCreator.subset_with_validation": {
            "name": "subset_with_validation",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "pd.DataFrame"
                ],
                "start_index": [],
                "end_index": [],
                "bptt": [],
                "shuffle_columns": [],
                "valid_percent": [
                    "float"
                ]
            }
        },
        "DatasetCreator._get_slice": {
            "name": "_get_slice",
            "location": 214,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pd.DataFrame"
                ],
                "start_index": [
                    "int"
                ],
                "bptt": [
                    "int"
                ],
                "shuffle_columns": [
                    "bool"
                ]
            }
        },
        "DatasetCreator.__check_init_params": {
            "name": "__check_init_params",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "train_len": [],
                "bptt": [],
                "valid_percent": [],
                "shuffle_in_time": [],
                "shuffle_columns": [],
                "interactive": []
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/divide_dataset/__init__.py": {},
    "dl-toolkit-master/src/preprocessing/technical_analysis/rsi.py": {
        "RsiTransformer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "column": [
                    "str"
                ],
                "window": []
            }
        },
        "RsiTransformer.fit": {
            "name": "fit",
            "location": 37,
            "return": [
                "Type['RsiTransformer']"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ],
                "y": []
            }
        },
        "RsiTransformer.transform": {
            "name": "transform",
            "location": 44,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/src/preprocessing/technical_analysis/__init__.py": {},
    "dl-toolkit-master/src/rnn_input_creator/creator.py": {
        "create_dataset": {
            "name": "create_dataset",
            "location": 7,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "bptt": [
                    "int"
                ],
                "targets": [
                    "List[str]"
                ]
            }
        },
        "__check_input": {
            "name": "__check_input",
            "location": 70,
            "return": [],
            "arguments": {
                "data": [],
                "features": [],
                "targets": []
            }
        }
    },
    "dl-toolkit-master/src/rnn_input_creator/__init__.py": {},
    "dl-toolkit-master/tests/test_base_transformer.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {}
        },
        "test_it_raises_wrong_init_params": {
            "name": "test_it_raises_wrong_init_params",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_it_converts_init_columns": {
            "name": "test_it_converts_init_columns",
            "location": 41,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_raises_wrong_X_type": {
            "name": "test_it_raises_wrong_X_type",
            "location": 56,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_raises_wrong_y_type": {
            "name": "test_it_raises_wrong_y_type",
            "location": 64,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_prepares_to_fit": {
            "name": "test_it_prepares_to_fit",
            "location": 72,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "dl-toolkit-master/tests/test_column_selector.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_it_raises_wrong_init_params": {
            "name": "test_it_raises_wrong_init_params",
            "location": 23,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_selects_columns": {
            "name": "test_it_selects_columns",
            "location": 46,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_raises_missing_column": {
            "name": "test_it_raises_missing_column",
            "location": 58,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "dl-toolkit-master/tests/test_input_creator.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_data": {
            "name": "test_it_checks_data",
            "location": 23,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_single_target": {
            "name": "test_single_target",
            "location": 43,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_multiple_targets": {
            "name": "test_multiple_targets",
            "location": 54,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_raises_on_wrong_features": {
            "name": "test_raises_on_wrong_features",
            "location": 66,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_raises_on_str_target": {
            "name": "test_raises_on_str_target",
            "location": 74,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_raises_on_wrong_target": {
            "name": "test_raises_on_wrong_target",
            "location": 79,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_raises_on_bptt_too_large": {
            "name": "test_raises_on_bptt_too_large",
            "location": 84,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "dl-toolkit-master/tests/test_log_return.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_raises_wrong_init": {
            "name": "test_it_raises_wrong_init",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_it_computes_returns": {
            "name": "test_it_computes_returns",
            "location": 38,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "dl-toolkit-master/tests/test_log_transformer.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_raises_wrong_init_params": {
            "name": "test_it_raises_wrong_init_params",
            "location": 24,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_raises_log_zero": {
            "name": "test_it_raises_log_zero",
            "location": 38,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_makes_log": {
            "name": "test_it_makes_log",
            "location": 48,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_makes_inverse_transform": {
            "name": "test_it_makes_inverse_transform",
            "location": 66,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "dl-toolkit-master/tests/test_moving_average.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_init_params": {
            "name": "test_it_checks_init_params",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_window_len": {
            "name": "test_it_checks_window_len",
            "location": 42,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_computes_simple_moving_average": {
            "name": "test_it_computes_simple_moving_average",
            "location": 50,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_computes_exp_moving_average": {
            "name": "test_it_computes_exp_moving_average",
            "location": 68,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "dl-toolkit-master/tests/test_one_col_perc_return_transformer.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_init_params": {
            "name": "test_it_checks_init_params",
            "location": 25,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_columns_in_df": {
            "name": "test_it_checks_columns_in_df",
            "location": 33,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_no_zeros_in_a": {
            "name": "test_it_checks_no_zeros_in_a",
            "location": 43,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_transforms_data": {
            "name": "test_it_transforms_data",
            "location": 49,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/tests/test_pandas_feature_union.py": {
        "data": {
            "name": "data",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_it_concats_data": {
            "name": "test_it_concats_data",
            "location": 29,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_returns_zeros_if_no_transformers": {
            "name": "test_it_returns_zeros_if_no_transformers",
            "location": 61,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_raises_on_sparse": {
            "name": "test_it_raises_on_sparse",
            "location": 75,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_raises_on_not_dataframe": {
            "name": "test_it_raises_on_not_dataframe",
            "location": 91,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "dl-toolkit-master/tests/test_pandas_wrapper.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_init_params": {
            "name": "test_it_checks_init_params",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_it_raises_on_wrong_type": {
            "name": "test_it_raises_on_wrong_type",
            "location": 36,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_raises_on_wrong_dimensions": {
            "name": "test_it_raises_on_wrong_dimensions",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_it_wraps_data": {
            "name": "test_it_wraps_data",
            "location": 58,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/tests/test_percent_transformer.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_init_params": {
            "name": "test_it_checks_init_params",
            "location": 25,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_columns_in_df": {
            "name": "test_it_checks_columns_in_df",
            "location": 42,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_no_zeros_in_a": {
            "name": "test_it_checks_no_zeros_in_a",
            "location": 52,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_transforms_data": {
            "name": "test_it_transforms_data",
            "location": 58,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/tests/test_row_selector.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {}
        },
        "test_it_raises_wrong_init_params": {
            "name": "test_it_raises_wrong_init_params",
            "location": 24,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_selects_rows": {
            "name": "test_it_selects_rows",
            "location": 61,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_raises_start_too_high": {
            "name": "test_it_raises_start_too_high",
            "location": 71,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_selects_last_row": {
            "name": "test_it_selects_last_row",
            "location": 78,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/tests/test_timeseries_interval_computer.py": {
        "test_it_raises_wrong_date_col": {
            "name": "test_it_raises_wrong_date_col",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "dl-toolkit-master/tests/test_two_col_percent_diff_transformer.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_init_params": {
            "name": "test_it_checks_init_params",
            "location": 25,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_columns_in_df": {
            "name": "test_it_checks_columns_in_df",
            "location": 33,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_no_zeros_in_a": {
            "name": "test_it_checks_no_zeros_in_a",
            "location": 43,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_transforms_data": {
            "name": "test_it_transforms_data",
            "location": 49,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "dl-toolkit-master/tests/test_two_col_transformer.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_it_checks_init_params": {
            "name": "test_it_checks_init_params",
            "location": 25,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_columns_in_df": {
            "name": "test_it_checks_columns_in_df",
            "location": 57,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_runs_safety_checks": {
            "name": "test_it_runs_safety_checks",
            "location": 70,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_runs_with_no_safety_checks": {
            "name": "test_it_runs_with_no_safety_checks",
            "location": 92,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_it_transforms_data": {
            "name": "test_it_transforms_data",
            "location": 104,
            "return": [],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "test_it_checks_init_params.op": {
            "name": "op",
            "location": 26,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_it_checks_columns_in_df.op": {
            "name": "op",
            "location": 58,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_it_runs_safety_checks.safety_a": {
            "name": "safety_a",
            "location": 71,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_it_runs_safety_checks.safety_b": {
            "name": "safety_b",
            "location": 75,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_it_transforms_data.safety_a": {
            "name": "safety_a",
            "location": 105,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "dl-toolkit-master/tests/__init__.py": {}
}
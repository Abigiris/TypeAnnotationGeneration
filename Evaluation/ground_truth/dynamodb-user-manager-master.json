{
    "dynamodb-user-manager-master/setup.py": {},
    "dynamodb-user-manager-master/dynamodbusermanager/cli.py": {
        "main": {
            "name": "main",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 153,
            "return": [
                "int"
            ],
            "arguments": {
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "parse_config": {
            "name": "parse_config",
            "location": 189,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "usage": {
            "name": "usage",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "TextIO"
                ]
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/constants.py": {},
    "dynamodb-user-manager-master/dynamodbusermanager/daemon.py": {
        "Daemon.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ddb": [
                    "'botocore.client.DynamoDB'"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Daemon.reload_users": {
            "name": "reload_users",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.reload_groups": {
            "name": "reload_groups",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.full_update": {
            "name": "full_update",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.main_loop": {
            "name": "main_loop",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.main_loop_done_hook": {
            "name": "main_loop_done_hook",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/entity.py": {
        "Entity.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "gid": [
                    "int"
                ],
                "password": [
                    "Optional[str]"
                ],
                "modified": [
                    "bool"
                ]
            }
        },
        "Entity.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Entity.__ne__": {
            "name": "__ne__",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Entity.name": {
            "name": "name",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Entity.gid": {
            "name": "gid",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Entity.password": {
            "name": "password",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "Entity.modified": {
            "name": "modified",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "Entity._lt_check_other_type": {
            "name": "_lt_check_other_type",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Entity.update_from_dynamodb_item": {
            "name": "update_from_dynamodb_item",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/export.py": {
        "user_to_dynamodb_item": {
            "name": "user_to_dynamodb_item",
            "location": 61,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "user": [
                    "User"
                ]
            }
        },
        "group_to_dynamodb_item": {
            "name": "group_to_dynamodb_item",
            "location": 107,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "group": [
                    "Group"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "usage": {
            "name": "usage",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "TextIO"
                ]
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/group.py": {
        "Group.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "gid": [
                    "int"
                ],
                "administrators": [
                    "Optional[Collection[str]]"
                ],
                "members": [
                    "Optional[Collection[str]]"
                ],
                "password": [
                    "Optional[str]"
                ],
                "modified": [
                    "bool"
                ]
            }
        },
        "Group.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Group.__ne__": {
            "name": "__ne__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Group.__lt__": {
            "name": "__lt__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Group'"
                ]
            }
        },
        "Group.administrators": {
            "name": "administrators",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Union[(List[str], Set[str], Tuple[str])]]"
                ]
            }
        },
        "Group.members": {
            "name": "members",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Union[(List[str], Set[str], Tuple[str])]]"
                ]
            }
        },
        "Group.add_member": {
            "name": "add_member",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Group.remove_member": {
            "name": "remove_member",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Group.as_tuple": {
            "name": "as_tuple",
            "location": 141,
            "return": [
                "GroupTuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.update_from_dynamodb_item": {
            "name": "update_from_dynamodb_item",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Group.from_dynamodb_item": {
            "name": "from_dynamodb_item",
            "location": 182,
            "return": [
                "G@@Group@@"
            ],
            "arguments": {
                "cls": [
                    "Type[G]"
                ],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/shadow.py": {
        "ShadowDatabase.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_load": [
                    "bool"
                ]
            }
        },
        "ShadowDatabase.reload": {
            "name": "reload",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabase.write": {
            "name": "write",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabase.modified": {
            "name": "modified",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabase.load_login_defs": {
            "name": "load_login_defs",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ShadowDatabase.load_passwd_file": {
            "name": "load_passwd_file",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ShadowDatabase.load_group_file": {
            "name": "load_group_file",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ShadowDatabase.load_gshadow_file": {
            "name": "load_gshadow_file",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ShadowDatabase.load_shadow_file": {
            "name": "load_shadow_file",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ShadowDatabase._load_ssh_public_keys": {
            "name": "_load_ssh_public_keys",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabase._parse_shadow_date_field": {
            "name": "_parse_shadow_date_field",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "User"
                ],
                "value": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "line_no": [
                    "int"
                ]
            }
        },
        "ShadowDatabase._parse_shadow_int_field": {
            "name": "_parse_shadow_int_field",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "User"
                ],
                "value": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "line_no": [
                    "int"
                ]
            }
        },
        "ShadowDatabase._write_user_plus_files": {
            "name": "_write_user_plus_files",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabase._write_group_plus_files": {
            "name": "_write_group_plus_files",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabase._write_user": {
            "name": "_write_user",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "User"
                ],
                "passwd": [
                    "TextIO"
                ],
                "shadow": [
                    "TextIO"
                ]
            }
        },
        "ShadowDatabase.create_user_home": {
            "name": "create_user_home",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ]
            }
        },
        "ShadowDatabase.write_user_ssh_keys": {
            "name": "write_user_ssh_keys",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User"
                ]
            }
        },
        "ShadowDatabase._write_group": {
            "name": "_write_group",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "group": [
                    "Group"
                ],
                "gfile": [
                    "TextIO"
                ],
                "gshadow": [
                    "TextIO"
                ]
            }
        },
        "ShadowDatabase._rotate_files": {
            "name": "_rotate_files",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ShadowDatabase._deny_access": {
            "name": "_deny_access",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "expected_uid": [
                    "int"
                ],
                "actual_uid": [
                    "int"
                ]
            }
        },
        "ShadowDatabase._check_reset_group_other_writable": {
            "name": "_check_reset_group_other_writable",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "int"
                ]
            }
        },
        "ShadowDatabaseLock.__init__": {
            "name": "__init__",
            "location": 836,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "int"
                ],
                "timeout": [
                    "Optional[Union[(int, float)]]"
                ]
            }
        },
        "ShadowDatabaseLock._lckpwdf": {
            "name": "_lckpwdf",
            "location": 859,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabaseLock._ulckpwdf": {
            "name": "_ulckpwdf",
            "location": 878,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabaseLock._lock_file_immediate": {
            "name": "_lock_file_immediate",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ShadowDatabaseLock._lock_file": {
            "name": "_lock_file",
            "location": 1005,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "timeout": [
                    "Optional[Union[(int, float)]]"
                ],
                "initial_sleep_time": [
                    "float"
                ],
                "max_sleep_time": [
                    "float"
                ]
            }
        },
        "ShadowDatabaseLock._unlock_file": {
            "name": "_unlock_file",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ShadowDatabaseLock.lock": {
            "name": "lock",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabaseLock.unlock": {
            "name": "unlock",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabaseLock.__enter__": {
            "name": "__enter__",
            "location": 1143,
            "return": [
                "'ShadowDatabaseLock'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowDatabaseLock.__exit__": {
            "name": "__exit__",
            "location": 1147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "traceback": []
            }
        },
        "ShadowWriter.__init__": {
            "name": "__init__",
            "location": 1155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "shadow_filename": [
                    "str"
                ]
            }
        },
        "ShadowWriter.__enter__": {
            "name": "__enter__",
            "location": 1166,
            "return": [
                "Tuple[(TextIO, TextIO)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowWriter.__exit__": {
            "name": "__exit__",
            "location": 1211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "uid": [
                    "int"
                ],
                "gid": [
                    "int"
                ],
                "real_name": [
                    "str"
                ],
                "home": [
                    "str"
                ],
                "shell": [
                    "str"
                ],
                "password": [
                    "Optional[str]"
                ],
                "last_password_change_date": [
                    "Optional[date]"
                ],
                "password_age_min_days": [
                    "Optional[int]"
                ],
                "password_age_max_days": [
                    "Optional[int]"
                ],
                "password_warn_days": [
                    "Optional[int]"
                ],
                "password_disable_days": [
                    "Optional[int]"
                ],
                "account_expire_date": [
                    "Optional[date]"
                ],
                "ssh_public_keys": [
                    "Optional[Set[str]]"
                ],
                "modified": [
                    "bool"
                ]
            }
        },
        "User.__eq__": {
            "name": "__eq__",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "User.__ne__": {
            "name": "__ne__",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "User.__lt__": {
            "name": "__lt__",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'User'"
                ]
            }
        },
        "User.uid": {
            "name": "uid",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "User.real_name": {
            "name": "real_name",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "User.home": {
            "name": "home",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "User.shell": {
            "name": "shell",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "User.ssh_public_keys": {
            "name": "ssh_public_keys",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Union[(Collection[str], str)]]"
                ]
            }
        },
        "User.ssh_dir_permissions_ok": {
            "name": "ssh_dir_permissions_ok",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.authorized_keys_permissions_ok": {
            "name": "authorized_keys_permissions_ok",
            "location": 280,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.authorized_keys": {
            "name": "authorized_keys",
            "location": 331,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.as_tuple": {
            "name": "as_tuple",
            "location": 349,
            "return": [
                "UserTuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.date_from_days": {
            "name": "date_from_days",
            "location": 375,
            "return": [
                "Optional[date]"
            ],
            "arguments": {
                "days": [
                    "Optional[int]"
                ]
            }
        },
        "User.age_from_days": {
            "name": "age_from_days",
            "location": 390,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "days": [
                    "int"
                ]
            }
        },
        "User.date_from_string": {
            "name": "date_from_string",
            "location": 409,
            "return": [
                "Optional[date]"
            ],
            "arguments": {
                "s": [
                    "Optional[str]"
                ]
            }
        },
        "User.update_from_dynamodb_item": {
            "name": "update_from_dynamodb_item",
            "location": 426,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "User.from_dynamodb_item": {
            "name": "from_dynamodb_item",
            "location": 502,
            "return": [
                "U@@User@@"
            ],
            "arguments": {
                "cls": [
                    "Type[U]"
                ],
                "item": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/utils.py": {
        "get_region": {
            "name": "get_region",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "parse_bool": {
            "name": "parse_bool",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "default": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "parse_opt_int": {
            "name": "parse_opt_int",
            "location": 75,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "s": [
                    "Optional[str]"
                ]
            }
        },
        "move_aside": {
            "name": "move_aside",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_ensure_user_owns": {
            "name": "_ensure_user_owns",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "uid": [
                    "int"
                ],
                "filename": [
                    "str"
                ],
                "check_fn": [
                    "Callable[([int], bool)]"
                ],
                "filetype": [
                    "str"
                ],
                "mode": [
                    "int"
                ],
                "mode_cmp_mask": [
                    "int"
                ]
            }
        },
        "ensure_user_owns_dir": {
            "name": "ensure_user_owns_dir",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "uid": [
                    "int"
                ],
                "gid": [
                    "int"
                ],
                "dirname": [
                    "str"
                ],
                "mode": [
                    "int"
                ],
                "mode_cmp_mask": [
                    "int"
                ]
            }
        },
        "ensure_user_owns_file": {
            "name": "ensure_user_owns_file",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "uid": [
                    "int"
                ],
                "filename": [
                    "str"
                ],
                "mode": [
                    "int"
                ],
                "mode_cmp_mask": [
                    "int"
                ]
            }
        },
        "ChangeEffectiveId.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "euid": [
                    "Optional[int]"
                ],
                "egid": [
                    "Optional[int]"
                ]
            }
        },
        "ChangeEffectiveId.__enter__": {
            "name": "__enter__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeEffectiveId.__exit__": {
            "name": "__exit__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "etype": [],
                "evalue": [],
                "traceback": []
            }
        },
        "ChangeEffectiveId.reset": {
            "name": "reset",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dynamodb-user-manager-master/dynamodbusermanager/__init__.py": {},
    "dynamodb-user-manager-master/tests/test_dynamodb.py": {
        "DynamoDBTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamoDBTest.test_scan": {
            "name": "test_scan",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamoDBTest.test_scan.exit_loop": {
            "name": "exit_loop",
            "location": 161,
            "return": [],
            "arguments": {}
        }
    },
    "dynamodb-user-manager-master/tests/test_shadow.py": {
        "ShadowTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShadowTest.test_locking": {
            "name": "test_locking",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShadowTest.test_load": {
            "name": "test_load",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShadowTest.test_save": {
            "name": "test_save",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dynamodb-user-manager-master/tests/__init__.py": {}
}
{
    "ehlit-prototype-master/ehlit/options.py": {
        "check_arguments": {
            "name": "check_arguments",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "OptionsStruct"
                ]
            }
        },
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 57,
            "return": [
                "OptionsStruct"
            ],
            "arguments": {}
        },
        "ArgError.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/__init__.py": {
        "build": {
            "name": "build",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "OptionsStruct"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/__main__.py": {},
    "ehlit-prototype-master/ehlit/parser/ast.py": {
        "DeclarationLookup.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "decls": [
                    "Optional[List['Node']]"
                ]
            }
        },
        "DeclarationLookup.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 57,
            "return": [
                "'DeclarationLookup'"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "DeclarationLookup.error": {
            "name": "error",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "str"
                ]
            }
        },
        "DeclarationLookup.merge": {
            "name": "merge",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'DeclarationLookup'"
                ]
            }
        },
        "DeclarationLookup.find_in": {
            "name": "find_in",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decls": [
                    "List['Node']"
                ]
            }
        },
        "Qualifier.is_const": {
            "name": "is_const",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qualifier.is_restricted": {
            "name": "is_restricted",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qualifier.is_volatile": {
            "name": "is_volatile",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qualifier.is_inline": {
            "name": "is_inline",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qualifier.is_static": {
            "name": "is_static",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qualifier.is_private": {
            "name": "is_private",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qualifier.mangled": {
            "name": "mangled",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnparsedContents.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "Node.build": {
            "name": "build",
            "location": 233,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.find_declaration": {
            "name": "find_declaration",
            "location": 241,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Node.get_declaration": {
            "name": "get_declaration",
            "location": 250,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Node.fail": {
            "name": "fail",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "ParseError.Severity"
                ],
                "pos": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "Node.error": {
            "name": "error",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "Node.warn": {
            "name": "warn",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "Node.declare": {
            "name": "declare",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "'DeclarationBase'"
                ]
            }
        },
        "Node.import_paths": {
            "name": "import_paths",
            "location": 290,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.is_child_of": {
            "name": "is_child_of",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type['Node']"
                ]
            }
        },
        "Node.do_before": {
            "name": "do_before",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do": [
                    "'Node'"
                ],
                "before": [
                    "'Node'"
                ]
            }
        },
        "Node.do_after": {
            "name": "do_after",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do": [
                    "'Node'"
                ],
                "after": [
                    "'Node'"
                ]
            }
        },
        "Node.do_at_end": {
            "name": "do_at_end",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do": [
                    "'Node'"
                ]
            }
        },
        "Node.generate_var_name": {
            "name": "generate_var_name",
            "location": 326,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.mangled_scope": {
            "name": "mangled_scope",
            "location": 334,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.make": {
            "name": "make",
            "location": 337,
            "return": [
                "T@@Node@@"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "T@@Node@@"
                ]
            }
        },
        "Node.parent": {
            "name": "parent",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "'Node'"
                ]
            }
        },
        "Scope.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "Scope.declare": {
            "name": "declare",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "'DeclarationBase'"
                ]
            }
        },
        "Scope.find_declaration": {
            "name": "find_declaration",
            "location": 367,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "UnorderedScope.find_declaration": {
            "name": "find_declaration",
            "location": 380,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "UnorderedScope.scope_contents": {
            "name": "scope_contents",
            "location": 387,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowScope.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "body": [
                    "List['Statement']"
                ]
            }
        },
        "FlowScope.build": {
            "name": "build",
            "location": 406,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowScope.do_before": {
            "name": "do_before",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do": [
                    "Node"
                ],
                "before": [
                    "Node"
                ]
            }
        },
        "FlowScope.do_after": {
            "name": "do_after",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do": [
                    "Node"
                ],
                "after": [
                    "Node"
                ]
            }
        },
        "FlowScope.do_at_end": {
            "name": "do_at_end",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do": [
                    "Node"
                ]
            }
        },
        "FlowScope.body": {
            "name": "body",
            "location": 462,
            "return": [
                "List['Statement']"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericExternInclusion.__init__": {
            "name": "__init__",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "lib": [
                    "List[str]"
                ]
            }
        },
        "GenericExternInclusion.build": {
            "name": "build",
            "location": 485,
            "return": [
                "'GenericExternInclusion'"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericExternInclusion.parse": {
            "name": "parse",
            "location": 499,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericExternInclusion.get_declaration": {
            "name": "get_declaration",
            "location": 505,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "GenericExternInclusion.scope_contents": {
            "name": "scope_contents",
            "location": 513,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Import.import_dir": {
            "name": "import_dir",
            "location": 520,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str"
                ]
            }
        },
        "Import.parse": {
            "name": "parse",
            "location": 538,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Import.find_declaration": {
            "name": "find_declaration",
            "location": 558,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Include.parse": {
            "name": "parse",
            "location": 572,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Include.declare": {
            "name": "declare",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "'DeclarationBase'"
                ]
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "Value.build": {
            "name": "build",
            "location": 599,
            "return": [
                "'Value'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.ref_offset": {
            "name": "ref_offset",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ]
            }
        },
        "Value.cast": {
            "name": "cast",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Optional['Symbol']"
                ]
            }
        },
        "Value.typ": {
            "name": "typ",
            "location": 621,
            "return": [
                "'Type'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.decl": {
            "name": "decl",
            "location": 625,
            "return": [
                "Optional['DeclarationBase']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value._from_any_aligned": {
            "name": "_from_any_aligned",
            "location": 628,
            "return": [
                "'Symbol'"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[('Symbol', 'Type', 'Value')]"
                ],
                "source": [
                    "Union[('Symbol', 'Type', 'Value')]"
                ],
                "is_casting": [
                    "bool"
                ]
            }
        },
        "Value.auto_cast": {
            "name": "auto_cast",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[('Symbol', 'Type')]"
                ]
            }
        },
        "DeclarationBase.__init__": {
            "name": "__init__",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "DeclarationBase.get_declaration": {
            "name": "get_declaration",
            "location": 705,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "DeclarationBase.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 711,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "DeclarationBase.name": {
            "name": "name",
            "location": 721,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeclarationBase.mangled_name": {
            "name": "mangled_name",
            "location": 725,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeclarationBase.mangled": {
            "name": "mangled",
            "location": 732,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.build": {
            "name": "build",
            "location": 737,
            "return": [
                "'Type'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.any_memory_offset": {
            "name": "any_memory_offset",
            "location": 742,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.ref_offset": {
            "name": "ref_offset",
            "location": 746,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.from_any": {
            "name": "from_any",
            "location": 750,
            "return": [
                "'Symbol'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.dup": {
            "name": "dup",
            "location": 754,
            "return": [
                "'Type'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__init__": {
            "name": "__init__",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "Symbol.build": {
            "name": "build",
            "location": 764,
            "return": [
                "'Symbol'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.solve": {
            "name": "solve",
            "location": 769,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.set_qualifiers": {
            "name": "set_qualifiers",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qualifiers": [
                    "Qualifier"
                ]
            }
        },
        "Symbol.is_type": {
            "name": "is_type",
            "location": 783,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.decl": {
            "name": "decl",
            "location": 788,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.repr": {
            "name": "repr",
            "location": 793,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.canonical": {
            "name": "canonical",
            "location": 797,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.mangled": {
            "name": "mangled",
            "location": 804,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.make_symbol": {
            "name": "make_symbol",
            "location": 810,
            "return": [
                "'CompoundIdentifier'"
            ],
            "arguments": {
                "parent": [
                    "Node"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "BuiltinType.__init__": {
            "name": "__init__",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BuiltinType.build": {
            "name": "build",
            "location": 817,
            "return": [
                "'BuiltinType'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.child": {
            "name": "child",
            "location": 822,
            "return": [
                "Optional[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.as_symbol": {
            "name": "as_symbol",
            "location": 828,
            "return": [
                "'CompoundIdentifier'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.from_any": {
            "name": "from_any",
            "location": 831,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.any_memory_offset": {
            "name": "any_memory_offset",
            "location": 837,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.name": {
            "name": "name",
            "location": 841,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.__eq__": {
            "name": "__eq__",
            "location": 844,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "object"
                ]
            }
        },
        "BuiltinType.dup": {
            "name": "dup",
            "location": 851,
            "return": [
                "'BuiltinType'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.mangled": {
            "name": "mangled",
            "location": 855,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.__init__": {
            "name": "__init__",
            "location": 860,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Node"
                ]
            }
        },
        "Container.build": {
            "name": "build",
            "location": 865,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.inner_child": {
            "name": "inner_child",
            "location": 871,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolContainer.__init__": {
            "name": "__init__",
            "location": 878,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Symbol"
                ]
            }
        },
        "SymbolContainer.build": {
            "name": "build",
            "location": 884,
            "return": [
                "'SymbolContainer'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolContainer.is_type": {
            "name": "is_type",
            "location": 890,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Symbol"
                ],
                "length": [
                    "Optional[Node]"
                ]
            }
        },
        "Array.build": {
            "name": "build",
            "location": 901,
            "return": [
                "'Array'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.typ": {
            "name": "typ",
            "location": 906,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.any_memory_offset": {
            "name": "any_memory_offset",
            "location": 910,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.solve": {
            "name": "solve",
            "location": 913,
            "return": [
                "DeclarationBase"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.repr": {
            "name": "repr",
            "location": 919,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.decl": {
            "name": "decl",
            "location": 923,
            "return": [
                "DeclarationBase"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.mangled": {
            "name": "mangled",
            "location": 929,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.__init__": {
            "name": "__init__",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Type"
                ]
            }
        },
        "ArrayType.build": {
            "name": "build",
            "location": 940,
            "return": [
                "'ArrayType'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.any_memory_offset": {
            "name": "any_memory_offset",
            "location": 946,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.from_any": {
            "name": "from_any",
            "location": 949,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.name": {
            "name": "name",
            "location": 955,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.dup": {
            "name": "dup",
            "location": 958,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.mangled": {
            "name": "mangled",
            "location": 962,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.__init__": {
            "name": "__init__",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Symbol"
                ]
            }
        },
        "Reference.build": {
            "name": "build",
            "location": 971,
            "return": [
                "SymbolContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.decl": {
            "name": "decl",
            "location": 980,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.typ": {
            "name": "typ",
            "location": 984,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.repr": {
            "name": "repr",
            "location": 988,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.name": {
            "name": "name",
            "location": 992,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.mangled": {
            "name": "mangled",
            "location": 996,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceToValue.__init__": {
            "name": "__init__",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Symbol"
                ]
            }
        },
        "ReferenceToValue.build": {
            "name": "build",
            "location": 1004,
            "return": [
                "'ReferenceToValue'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceToValue.typ": {
            "name": "typ",
            "location": 1010,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceToValue.ref_offset": {
            "name": "ref_offset",
            "location": 1021,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int"
                ]
            }
        },
        "ReferenceToValue.auto_cast": {
            "name": "auto_cast",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "ReferenceToType.__init__": {
            "name": "__init__",
            "location": 1029,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Symbol"
                ],
                "qualifiers": [
                    "Qualifier"
                ]
            }
        },
        "ReferenceToType.build": {
            "name": "build",
            "location": 1033,
            "return": [
                "'ReferenceToType'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceToType.ref_offset": {
            "name": "ref_offset",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int"
                ]
            }
        },
        "ReferenceToType.any_memory_offset": {
            "name": "any_memory_offset",
            "location": 1046,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.__init__": {
            "name": "__init__",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Type"
                ],
                "qualifiers": [
                    "Qualifier"
                ]
            }
        },
        "ReferenceType.build": {
            "name": "build",
            "location": 1058,
            "return": [
                "'ReferenceType'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.ref_offset": {
            "name": "ref_offset",
            "location": 1063,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.any_memory_offset": {
            "name": "any_memory_offset",
            "location": 1067,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.from_any": {
            "name": "from_any",
            "location": 1070,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.inner_child": {
            "name": "inner_child",
            "location": 1076,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.name": {
            "name": "name",
            "location": 1083,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.dup": {
            "name": "dup",
            "location": 1086,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceType.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 1089,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "ReferenceType.mangled": {
            "name": "mangled",
            "location": 1093,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionType.__init__": {
            "name": "__init__",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Symbol"
                ],
                "args": [
                    "List['VariableDeclaration']"
                ],
                "is_variadic": [
                    "bool"
                ],
                "variadic_type": [
                    "Optional[Symbol]"
                ]
            }
        },
        "FunctionType.build": {
            "name": "build",
            "location": 1113,
            "return": [
                "'FunctionType'"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionType.name": {
            "name": "name",
            "location": 1122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionType.dup": {
            "name": "dup",
            "location": 1125,
            "return": [
                "'FunctionType'"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionType.from_any": {
            "name": "from_any",
            "location": 1128,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionType.mangled": {
            "name": "mangled",
            "location": 1132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.__init__": {
            "name": "__init__",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "str"
                ]
            }
        },
        "Operator.auto_cast": {
            "name": "auto_cast",
            "location": 1147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Symbol"
                ]
            }
        },
        "VariableAssignment.__init__": {
            "name": "__init__",
            "location": 1152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Symbol"
                ],
                "assign": [
                    "'Assignment'"
                ]
            }
        },
        "VariableAssignment.build": {
            "name": "build",
            "location": 1159,
            "return": [
                "'VariableAssignment'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.__init__": {
            "name": "__init__",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "'Expression'"
                ]
            }
        },
        "Assignment.build": {
            "name": "build",
            "location": 1174,
            "return": [
                "'Assignment'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Declaration.__init__": {
            "name": "__init__",
            "location": 1181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "typ": [
                    "Symbol"
                ],
                "sym": [
                    "Optional['Identifier']"
                ],
                "qualifiers": [
                    "Qualifier"
                ]
            }
        },
        "Declaration.build": {
            "name": "build",
            "location": 1192,
            "return": [
                "'Declaration'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Declaration.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 1201,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Declaration.name": {
            "name": "name",
            "location": 1205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Declaration.typ": {
            "name": "typ",
            "location": 1209,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Declaration._make_type": {
            "name": "_make_type",
            "location": 1216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclaration.__init__": {
            "name": "__init__",
            "location": 1224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Symbol"
                ],
                "sym": [
                    "Optional['Identifier']"
                ],
                "assign": [
                    "Optional[Union[(Assignment, List['Expression'])]]"
                ]
            }
        },
        "VariableDeclaration.build": {
            "name": "build",
            "location": 1229,
            "return": [
                "'VariableDeclaration'"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclaration.private": {
            "name": "private",
            "location": 1239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "VariableDeclaration.static": {
            "name": "static",
            "location": 1250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "VariableDeclaration.mangled_name": {
            "name": "mangled_name",
            "location": 1257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclaration.mangled": {
            "name": "mangled",
            "location": 1265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclaration._is_mangled": {
            "name": "_is_mangled",
            "location": 1273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclaration.assign": {
            "name": "assign",
            "location": 1285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "Optional[Union[(Assignment, List['Expression'])]]"
                ]
            }
        },
        "VariableDeclaration._construct": {
            "name": "_construct",
            "location": 1290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 1308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "qualifiers": [
                    "Qualifier"
                ],
                "typ": [
                    "'TemplatedIdentifier'"
                ],
                "sym": [
                    "'Identifier'"
                ],
                "body_str": [
                    "Optional[UnparsedContents]"
                ]
            }
        },
        "Function.build": {
            "name": "build",
            "location": 1316,
            "return": [
                "'Function'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.fail": {
            "name": "fail",
            "location": 1335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "ParseError.Severity"
                ],
                "pos": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "Function.qualifiers": {
            "name": "qualifiers",
            "location": 1339,
            "return": [
                "Qualifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mangled_name": {
            "name": "mangled_name",
            "location": 1343,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mangled": {
            "name": "mangled",
            "location": 1351,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.find_declaration": {
            "name": "find_declaration",
            "location": 1365,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Function.generate_var_name": {
            "name": "generate_var_name",
            "location": 1377,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VArgs.__init__": {
            "name": "__init__",
            "location": 1383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Symbol"
                ]
            }
        },
        "VArgs.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 1386,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "VArgs.mangled_name": {
            "name": "mangled_name",
            "location": 1395,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VArgs.mangled": {
            "name": "mangled",
            "location": 1399,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VArgsLength.__init__": {
            "name": "__init__",
            "location": 1404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VArgsLength.typ": {
            "name": "typ",
            "location": 1408,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "VArgsLength.mangled_name": {
            "name": "mangled_name",
            "location": 1412,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VArgsLength.mangled": {
            "name": "mangled",
            "location": 1416,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statement.__init__": {
            "name": "__init__",
            "location": 1421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Node"
                ]
            }
        },
        "Statement.build": {
            "name": "build",
            "location": 1426,
            "return": [
                "'Statement'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statement.get_declaration": {
            "name": "get_declaration",
            "location": 1431,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Expression.__init__": {
            "name": "__init__",
            "location": 1436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "List[Value]"
                ],
                "parenthesised": [
                    "bool"
                ]
            }
        },
        "Expression.build": {
            "name": "build",
            "location": 1443,
            "return": [
                "'Expression'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.auto_cast": {
            "name": "auto_cast",
            "location": 1448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "Expression.is_parenthesised": {
            "name": "is_parenthesised",
            "location": 1453,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.typ": {
            "name": "typ",
            "location": 1457,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitializationList.__init__": {
            "name": "__init__",
            "location": 1462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "List[Expression]"
                ]
            }
        },
        "InitializationList.build": {
            "name": "build",
            "location": 1468,
            "return": [
                "'InitializationList'"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitializationList.auto_cast": {
            "name": "auto_cast",
            "location": 1473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[('Symbol', 'Type')]"
                ]
            }
        },
        "InitializationList.typ": {
            "name": "typ",
            "location": 1479,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall.__init__": {
            "name": "__init__",
            "location": 1484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Symbol"
                ],
                "args": [
                    "List[Expression]"
                ]
            }
        },
        "FunctionCall.build": {
            "name": "build",
            "location": 1493,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall._is_type_creation": {
            "name": "_is_type_creation",
            "location": 1514,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall._check_args": {
            "name": "_check_args",
            "location": 1517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "FunctionType"
                ]
            }
        },
        "FunctionCall._auto_cast_args": {
            "name": "_auto_cast_args",
            "location": 1534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "FunctionType"
                ]
            }
        },
        "FunctionCall._reorder": {
            "name": "_reorder",
            "location": 1562,
            "return": [
                "'Value'"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall._make_tmp_alloc": {
            "name": "_make_tmp_alloc",
            "location": 1579,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall.typ": {
            "name": "typ",
            "location": 1589,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall.decl": {
            "name": "decl",
            "location": 1598,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall.arg_count": {
            "name": "arg_count",
            "location": 1602,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCall.this_ptr": {
            "name": "this_ptr",
            "location": 1612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "'CompoundIdentifier'"
                ]
            }
        },
        "ArrayAccess.__init__": {
            "name": "__init__",
            "location": 1617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Symbol"
                ],
                "idx": [
                    "Expression"
                ]
            }
        },
        "ArrayAccess.build": {
            "name": "build",
            "location": 1622,
            "return": [
                "'ArrayAccess'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayAccess.typ": {
            "name": "typ",
            "location": 1628,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayAccess.decl": {
            "name": "decl",
            "location": 1633,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayAccess.from_any": {
            "name": "from_any",
            "location": 1636,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayAccess.repr": {
            "name": "repr",
            "location": 1640,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayAccess.mangled": {
            "name": "mangled",
            "location": 1644,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlStructure.__init__": {
            "name": "__init__",
            "location": 1649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "cond": [
                    "Optional[Expression]"
                ],
                "body": [
                    "List[Statement]"
                ]
            }
        },
        "ControlStructure.build": {
            "name": "build",
            "location": 1658,
            "return": [
                "'ControlStructure'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoWhileLoop.__init__": {
            "name": "__init__",
            "location": 1666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "cond": [
                    "Expression"
                ],
                "body": [
                    "List[Statement]"
                ]
            }
        },
        "ForDoLoop.__init__": {
            "name": "__init__",
            "location": 1672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "initializers": [
                    "List[Union[(VariableDeclaration, VariableAssignment)]]"
                ],
                "actions": [
                    "List[Union[(Expression, VariableAssignment)]]"
                ],
                "cond": [
                    "Expression"
                ],
                "body": [
                    "List[Statement]"
                ]
            }
        },
        "ForDoLoop.build": {
            "name": "build",
            "location": 1684,
            "return": [
                "'ForDoLoop'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": 1697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "branches": [
                    "List[ControlStructure]"
                ]
            }
        },
        "Condition.build": {
            "name": "build",
            "location": 1703,
            "return": [
                "'Condition'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchCase.__init__": {
            "name": "__init__",
            "location": 1710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cases": [
                    "List['SwitchCaseTest']"
                ],
                "body": [
                    "'SwitchCaseBody'"
                ]
            }
        },
        "SwitchCase.build": {
            "name": "build",
            "location": 1718,
            "return": [
                "'SwitchCase'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchCaseTest.__init__": {
            "name": "__init__",
            "location": 1726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Optional[Value]"
                ]
            }
        },
        "SwitchCaseTest.build": {
            "name": "build",
            "location": 1732,
            "return": [
                "'SwitchCaseTest'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchCaseBody.__init__": {
            "name": "__init__",
            "location": 1740,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "List[Statement]"
                ],
                "fallthrough": [
                    "bool"
                ]
            }
        },
        "SwitchCaseBody.build": {
            "name": "build",
            "location": 1744,
            "return": [
                "'SwitchCaseBody'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Return.__init__": {
            "name": "__init__",
            "location": 1750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Optional[Expression]"
                ]
            }
        },
        "Return.build": {
            "name": "build",
            "location": 1756,
            "return": [
                "'Return'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Return._finalize_scope": {
            "name": "_finalize_scope",
            "location": 1768,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.__init__": {
            "name": "__init__",
            "location": 1778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Identifier.build": {
            "name": "build",
            "location": 1783,
            "return": [
                "'Identifier'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.typ": {
            "name": "typ",
            "location": 1789,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.decl": {
            "name": "decl",
            "location": 1803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[DeclarationBase]"
                ]
            }
        },
        "Identifier.mangled_name": {
            "name": "mangled_name",
            "location": 1807,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.mangled": {
            "name": "mangled",
            "location": 1812,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundIdentifier.__init__": {
            "name": "__init__",
            "location": 1817,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elems": [
                    "List[Identifier]"
                ]
            }
        },
        "CompoundIdentifier.build": {
            "name": "build",
            "location": 1823,
            "return": [
                "'CompoundIdentifier'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundIdentifier._find_children_declarations": {
            "name": "_find_children_declarations",
            "location": 1839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundIdentifier.ref_offset": {
            "name": "ref_offset",
            "location": 1859,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ]
            }
        },
        "CompoundIdentifier.typ": {
            "name": "typ",
            "location": 1863,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundIdentifier.decl": {
            "name": "decl",
            "location": 1867,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundIdentifier.repr": {
            "name": "repr",
            "location": 1873,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundIdentifier.cast": {
            "name": "cast",
            "location": 1881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Symbol"
                ]
            }
        },
        "CompoundIdentifier.auto_cast": {
            "name": "auto_cast",
            "location": 1884,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "CompoundIdentifier.any_memory_offset": {
            "name": "any_memory_offset",
            "location": 1888,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundIdentifier.mangled": {
            "name": "mangled",
            "location": 1892,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedIdentifier.__init__": {
            "name": "__init__",
            "location": 1899,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "types": [
                    "List[Union[(Symbol, Type)]]"
                ]
            }
        },
        "TemplatedIdentifier.build": {
            "name": "build",
            "location": 1906,
            "return": [
                "'TemplatedIdentifier'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedIdentifier.decl": {
            "name": "decl",
            "location": 1912,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedIdentifier.typ": {
            "name": "typ",
            "location": 1917,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedIdentifier.repr": {
            "name": "repr",
            "location": 1922,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedIdentifier.name": {
            "name": "name",
            "location": 1926,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedIdentifier.mangled": {
            "name": "mangled",
            "location": 1930,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cast.__init__": {
            "name": "__init__",
            "location": 1936,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Symbol"
                ],
                "arg": [
                    "Expression"
                ]
            }
        },
        "Cast.build": {
            "name": "build",
            "location": 1941,
            "return": [
                "'Cast'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cast.typ": {
            "name": "typ",
            "location": 1947,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cast.decl": {
            "name": "decl",
            "location": 1953,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cast.auto_cast": {
            "name": "auto_cast",
            "location": 1956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "HeapAlloc.__init__": {
            "name": "__init__",
            "location": 1965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "CompoundIdentifier"
                ],
                "args": [
                    "List[Expression]"
                ]
            }
        },
        "HeapAlloc.build": {
            "name": "build",
            "location": 1973,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeapAlloc.typ": {
            "name": "typ",
            "location": 1981,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeapAlloc._construct": {
            "name": "_construct",
            "location": 1984,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeapAlloc._var_sym": {
            "name": "_var_sym",
            "location": 1995,
            "return": [
                "Optional[CompoundIdentifier]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeapAlloc._make_tmp_alloc": {
            "name": "_make_tmp_alloc",
            "location": 2008,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeapDealloc.__init__": {
            "name": "__init__",
            "location": 2020,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "CompoundIdentifier"
                ]
            }
        },
        "HeapDealloc.build": {
            "name": "build",
            "location": 2025,
            "return": [
                "'HeapDealloc'"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeapDealloc._destruct": {
            "name": "_destruct",
            "location": 2032,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 2045,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "String.typ": {
            "name": "typ",
            "location": 2050,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.auto_cast": {
            "name": "auto_cast",
            "location": 2053,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "Char.__init__": {
            "name": "__init__",
            "location": 2058,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        },
        "Char.typ": {
            "name": "typ",
            "location": 2063,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.auto_cast": {
            "name": "auto_cast",
            "location": 2066,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 2071,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str"
                ]
            }
        },
        "Number.typ": {
            "name": "typ",
            "location": 2076,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.auto_cast": {
            "name": "auto_cast",
            "location": 2079,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "DecimalNumber.__init__": {
            "name": "__init__",
            "location": 2084,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str"
                ]
            }
        },
        "DecimalNumber.typ": {
            "name": "typ",
            "location": 2089,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalNumber.auto_cast": {
            "name": "auto_cast",
            "location": 2092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "NullValue.__init__": {
            "name": "__init__",
            "location": 2097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullValue.typ": {
            "name": "typ",
            "location": 2101,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullValue.auto_cast": {
            "name": "auto_cast",
            "location": 2104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "BoolValue.__init__": {
            "name": "__init__",
            "location": 2109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool"
                ]
            }
        },
        "BoolValue.typ": {
            "name": "typ",
            "location": 2114,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolValue.auto_cast": {
            "name": "auto_cast",
            "location": 2117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "UnaryOperatorValue.__init__": {
            "name": "__init__",
            "location": 2122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "str"
                ],
                "val": [
                    "Value"
                ]
            }
        },
        "UnaryOperatorValue.build": {
            "name": "build",
            "location": 2128,
            "return": [
                "'UnaryOperatorValue'"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOperatorValue.typ": {
            "name": "typ",
            "location": 2134,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOperatorValue.decl": {
            "name": "decl",
            "location": 2138,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOperatorValue.auto_cast": {
            "name": "auto_cast",
            "location": 2141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(Symbol, Type)]"
                ]
            }
        },
        "AnonymousArray.__init__": {
            "name": "__init__",
            "location": 2154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "contents": [
                    "List[Value]"
                ]
            }
        },
        "AnonymousArray.build": {
            "name": "build",
            "location": 2160,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousArray.typ": {
            "name": "typ",
            "location": 2173,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizeof.__init__": {
            "name": "__init__",
            "location": 2180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sz_typ": [
                    "Symbol"
                ]
            }
        },
        "Sizeof.build": {
            "name": "build",
            "location": 2185,
            "return": [
                "'Sizeof'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizeof.typ": {
            "name": "typ",
            "location": 2191,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.__init__": {
            "name": "__init__",
            "location": 2196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Union[(Type, Symbol)]"
                ],
                "dst": [
                    "Identifier"
                ]
            }
        },
        "Alias.build": {
            "name": "build",
            "location": 2205,
            "return": [
                "'Alias'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.typ": {
            "name": "typ",
            "location": 2216,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.repr": {
            "name": "repr",
            "location": 2225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.name": {
            "name": "name",
            "location": 2231,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.is_type": {
            "name": "is_type",
            "location": 2237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.ref_offset": {
            "name": "ref_offset",
            "location": 2245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Alias.decl": {
            "name": "decl",
            "location": 2249,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.mangled": {
            "name": "mangled",
            "location": 2253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructure.__init__": {
            "name": "__init__",
            "location": 2258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Identifier"
                ],
                "fields": [
                    "Optional[List[VariableDeclaration]]"
                ]
            }
        },
        "ContainerStructure.build": {
            "name": "build",
            "location": 2270,
            "return": [
                "'ContainerStructure'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructure.name": {
            "name": "name",
            "location": 2281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructure.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 2284,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "ContainerStructure.from_any": {
            "name": "from_any",
            "location": 2292,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructure.mangled": {
            "name": "mangled",
            "location": 2296,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructure.mangled_scope": {
            "name": "mangled_scope",
            "location": 2302,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.__init__": {
            "name": "__init__",
            "location": 2307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Identifier"
                ],
                "fields": [
                    "Optional[List[VariableDeclaration]]"
                ]
            }
        },
        "Struct.dup": {
            "name": "dup",
            "location": 2312,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhUnion.__init__": {
            "name": "__init__",
            "location": 2317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Identifier"
                ],
                "fields": [
                    "Optional[List[VariableDeclaration]]"
                ]
            }
        },
        "EhUnion.dup": {
            "name": "dup",
            "location": 2322,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassMethod.build": {
            "name": "build",
            "location": 2327,
            "return": [
                "'ClassMethod'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassMethod.mangled": {
            "name": "mangled",
            "location": 2340,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassProperty.__init__": {
            "name": "__init__",
            "location": 2356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Symbol"
                ],
                "sym": [
                    "Optional['Identifier']"
                ],
                "assign": [
                    "Optional[Assignment]"
                ]
            }
        },
        "ClassProperty.build": {
            "name": "build",
            "location": 2360,
            "return": [
                "'ClassProperty'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ctor.__init__": {
            "name": "__init__",
            "location": 2366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "qualifiers": [
                    "Qualifier"
                ],
                "typ": [
                    "TemplatedIdentifier"
                ],
                "body_str": [
                    "Optional[UnparsedContents]"
                ]
            }
        },
        "Ctor.mangled": {
            "name": "mangled",
            "location": 2371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dtor.__init__": {
            "name": "__init__",
            "location": 2383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "qualifiers": [
                    "Qualifier"
                ],
                "typ": [
                    "TemplatedIdentifier"
                ],
                "body_str": [
                    "Optional[UnparsedContents]"
                ]
            }
        },
        "Dtor.mangled": {
            "name": "mangled",
            "location": 2388,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.__init__": {
            "name": "__init__",
            "location": 2395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Identifier"
                ],
                "contents": [
                    "Optional['EhClass.FieldList']"
                ]
            }
        },
        "EhClass.build": {
            "name": "build",
            "location": 2409,
            "return": [
                "'EhClass'"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 2428,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "EhClass.from_any": {
            "name": "from_any",
            "location": 2436,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.dup": {
            "name": "dup",
            "location": 2439,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.scope_contents": {
            "name": "scope_contents",
            "location": 2443,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.name": {
            "name": "name",
            "location": 2447,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.mangled": {
            "name": "mangled",
            "location": 2451,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.mangled_scope": {
            "name": "mangled_scope",
            "location": 2455,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.properties": {
            "name": "properties",
            "location": 2459,
            "return": [
                "List[ClassProperty]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.methods": {
            "name": "methods",
            "location": 2463,
            "return": [
                "List[ClassMethod]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.ctors": {
            "name": "ctors",
            "location": 2467,
            "return": [
                "List[Ctor]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.dtor": {
            "name": "dtor",
            "location": 2471,
            "return": [
                "Optional[Dtor]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhClass.call_ctor": {
            "name": "call_ctor",
            "location": 2474,
            "return": [
                "Optional[Statement]"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "CompoundIdentifier"
                ],
                "args": [
                    "Optional[List[Expression]]"
                ]
            }
        },
        "EhClass.call_dtor": {
            "name": "call_dtor",
            "location": 2486,
            "return": [
                "Optional[Statement]"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "CompoundIdentifier"
                ]
            }
        },
        "ContainerStructureType.__init__": {
            "name": "__init__",
            "location": 2497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Union[(ContainerStructure, EhClass)]"
                ]
            }
        },
        "ContainerStructureType.from_any": {
            "name": "from_any",
            "location": 2501,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructureType.decl": {
            "name": "decl",
            "location": 2505,
            "return": [
                "Optional[DeclarationBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructureType.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 2508,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "ContainerStructureType.dup": {
            "name": "dup",
            "location": 2511,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructureType.mangled": {
            "name": "mangled",
            "location": 2515,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerStructureType.name": {
            "name": "name",
            "location": 2519,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhEnum.__init__": {
            "name": "__init__",
            "location": 2536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Identifier"
                ],
                "fields": [
                    "Optional[List[Identifier]]"
                ]
            }
        },
        "EhEnum.build": {
            "name": "build",
            "location": 2545,
            "return": [
                "'EhEnum'"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhEnum.mangled": {
            "name": "mangled",
            "location": 2553,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhEnum.mangled_scope": {
            "name": "mangled_scope",
            "location": 2559,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhEnum.from_any": {
            "name": "from_any",
            "location": 2562,
            "return": [
                "Symbol"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhEnum.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 2565,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "EhEnum.name": {
            "name": "name",
            "location": 2576,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhEnum.dup": {
            "name": "dup",
            "location": 2579,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "EhEnum.find_declaration": {
            "name": "find_declaration",
            "location": 2582,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "EnumField.__init__": {
            "name": "__init__",
            "location": 2591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "Identifier"
                ],
                "parent": [
                    "EhEnum"
                ]
            }
        },
        "EnumField.build": {
            "name": "build",
            "location": 2596,
            "return": [
                "'EnumField'"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumField._make_type": {
            "name": "_make_type",
            "location": 2600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumField.mangled": {
            "name": "mangled",
            "location": 2605,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 2614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "sym": [
                    "Identifier"
                ]
            }
        },
        "Namespace.build": {
            "name": "build",
            "location": 2621,
            "return": [
                "'Namespace'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.scope_contents": {
            "name": "scope_contents",
            "location": 2627,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.find_declaration": {
            "name": "find_declaration",
            "location": 2630,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Namespace.get_inner_declaration": {
            "name": "get_inner_declaration",
            "location": 2637,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "Namespace.name": {
            "name": "name",
            "location": 2641,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.mangled": {
            "name": "mangled",
            "location": 2645,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.mangled_scope": {
            "name": "mangled_scope",
            "location": 2649,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.contents": {
            "name": "contents",
            "location": 2657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "List[Node]"
                ]
            }
        },
        "AST.__init__": {
            "name": "__init__",
            "location": 2664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[Node]"
                ]
            }
        },
        "AST.__iter__": {
            "name": "__iter__",
            "location": 2673,
            "return": [
                "Iterator[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__getitem__": {
            "name": "__getitem__",
            "location": 2676,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "AST.__len__": {
            "name": "__len__",
            "location": 2679,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.build": {
            "name": "build",
            "location": 2682,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.build_ast": {
            "name": "build_ast",
            "location": 2685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "OptionsStruct"
                ]
            }
        },
        "AST.fail": {
            "name": "fail",
            "location": 2709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "ParseError.Severity"
                ],
                "pos": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "AST.scope_contents": {
            "name": "scope_contents",
            "location": 2714,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.find_declaration": {
            "name": "find_declaration",
            "location": 2717,
            "return": [
                "DeclarationLookup"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "str"
                ]
            }
        },
        "AST.import_paths": {
            "name": "import_paths",
            "location": 2732,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.is_child_of": {
            "name": "is_child_of",
            "location": 2735,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type[Node]"
                ]
            }
        },
        "AST.generate_var_name": {
            "name": "generate_var_name",
            "location": 2738,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.mangled_scope": {
            "name": "mangled_scope",
            "location": 2743,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/ehlit/parser/ast_builder.py": {
        "ArrayBuilder.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Optional[Union[(ast.Symbol, 'ArrayBuilder')]]"
                ],
                "param": [
                    "Optional[ast.Node]"
                ]
            }
        },
        "ArrayBuilder.set_child": {
            "name": "set_child",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "ast.Symbol"
                ]
            }
        },
        "ArrayBuilder.to_array": {
            "name": "to_array",
            "location": 41,
            "return": [
                "ast.Array"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayBuilder.to_array_access": {
            "name": "to_array_access",
            "location": 47,
            "return": [
                "ast.ArrayAccess"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASTBuilder.visit_comment": {
            "name": "visit_comment",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "RegExMatch"
                ],
                "children": [
                    "Tuple[RegExMatch]"
                ]
            }
        },
        "ASTBuilder.visit_trailing_comma": {
            "name": "visit_trailing_comma",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[StrMatch]"
                ]
            }
        },
        "ASTBuilder.visit_builtin_type": {
            "name": "visit_builtin_type",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[StrMatch]"
                ]
            }
        },
        "ASTBuilder.visit_identifier": {
            "name": "visit_identifier",
            "location": 78,
            "return": [
                "ast.Identifier"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[Union[(RegExMatch, StrMatch)]]"
                ]
            }
        },
        "ASTBuilder.visit_compound_identifier": {
            "name": "visit_compound_identifier",
            "location": 82,
            "return": [
                "ast.CompoundIdentifier"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "List[ast.Identifier]"
                ]
            }
        },
        "ASTBuilder.visit_char": {
            "name": "visit_char",
            "location": 86,
            "return": [
                "ast.Char"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[RegExMatch]"
                ]
            }
        },
        "ASTBuilder.visit_string": {
            "name": "visit_string",
            "location": 89,
            "return": [
                "ast.String"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[RegExMatch]"
                ]
            }
        },
        "ASTBuilder.visit_number": {
            "name": "visit_number",
            "location": 92,
            "return": [
                "ast.Number"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[RegExMatch]"
                ]
            }
        },
        "ASTBuilder.visit_decimal_number": {
            "name": "visit_decimal_number",
            "location": 95,
            "return": [
                "ast.DecimalNumber"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[RegExMatch]"
                ]
            }
        },
        "ASTBuilder.visit_null_value": {
            "name": "visit_null_value",
            "location": 99,
            "return": [
                "ast.NullValue"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[StrMatch]"
                ]
            }
        },
        "ASTBuilder.visit_bool_value": {
            "name": "visit_bool_value",
            "location": 102,
            "return": [
                "ast.BoolValue"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[StrMatch]"
                ]
            }
        },
        "ASTBuilder.visit_referenced_value": {
            "name": "visit_referenced_value",
            "location": 105,
            "return": [
                "ast.Reference"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Symbol, ArrayBuilder)]"
                ]
            }
        },
        "ASTBuilder.visit_function_args": {
            "name": "visit_function_args",
            "location": 113,
            "return": [
                "List[ast.Expression]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ast.Expression]"
                ]
            }
        },
        "ASTBuilder.visit_function_call": {
            "name": "visit_function_call",
            "location": 117,
            "return": [
                "ast.FunctionCall"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Symbol, List[ast.Expression])]"
                ]
            }
        },
        "ASTBuilder.visit_prefix_operator_value": {
            "name": "visit_prefix_operator_value",
            "location": 121,
            "return": [
                "ast.PrefixOperatorValue"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Symbol)]"
                ]
            }
        },
        "ASTBuilder.visit_suffix_operator_value": {
            "name": "visit_suffix_operator_value",
            "location": 126,
            "return": [
                "ast.SuffixOperatorValue"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Symbol, StrMatch)]"
                ]
            }
        },
        "ASTBuilder.visit_sizeof": {
            "name": "visit_sizeof",
            "location": 131,
            "return": [
                "ast.Sizeof"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Symbol)]"
                ]
            }
        },
        "ASTBuilder.visit_array_access": {
            "name": "visit_array_access",
            "location": 135,
            "return": [
                "Optional[ArrayBuilder]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Expression, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_anonymous_array": {
            "name": "visit_anonymous_array",
            "location": 144,
            "return": [
                "ast.AnonymousArray"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Value, StrMatch)]"
                ]
            }
        },
        "ASTBuilder.visit_heap_alloc": {
            "name": "visit_heap_alloc",
            "location": 148,
            "return": [
                "ast.HeapAlloc"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Union[(Tuple[(StrMatch, ast.CompoundIdentifier)], Tuple[(StrMatch, ast.CompoundIdentifier, List[ast.Expression])])]"
                ]
            }
        },
        "ASTBuilder.visit_heap_dealloc": {
            "name": "visit_heap_dealloc",
            "location": 157,
            "return": [
                "ast.HeapDealloc"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.CompoundIdentifier)]"
                ]
            }
        },
        "ASTBuilder.visit_value": {
            "name": "visit_value",
            "location": 161,
            "return": [
                "ast.Symbol"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Symbol, ArrayBuilder)]"
                ]
            }
        },
        "ASTBuilder.visit_equality_sequence": {
            "name": "visit_equality_sequence",
            "location": 171,
            "return": [
                "OperatorSequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Value, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_inequality_sequence": {
            "name": "visit_inequality_sequence",
            "location": 180,
            "return": [
                "OperatorSequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Value, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_lesser_than_sequence": {
            "name": "visit_lesser_than_sequence",
            "location": 189,
            "return": [
                "OperatorSequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "ComparisonSequence"
                ]
            }
        },
        "ASTBuilder.visit_greater_than_sequence": {
            "name": "visit_greater_than_sequence",
            "location": 194,
            "return": [
                "OperatorSequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "ComparisonSequence"
                ]
            }
        },
        "ASTBuilder.visit_operator_sequence": {
            "name": "visit_operator_sequence",
            "location": 199,
            "return": [
                "OperatorSequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[OperatorSequence]"
                ]
            }
        },
        "ASTBuilder.visit_mathematical_operator": {
            "name": "visit_mathematical_operator",
            "location": 203,
            "return": [
                "ast.Operator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "StrMatch"
                ]
            }
        },
        "ASTBuilder.visit_boolean_operator": {
            "name": "visit_boolean_operator",
            "location": 206,
            "return": [
                "ast.Operator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "StrMatch"
                ]
            }
        },
        "ASTBuilder.visit_bitwise_operator": {
            "name": "visit_bitwise_operator",
            "location": 209,
            "return": [
                "ast.Operator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "StrMatch"
                ]
            }
        },
        "ASTBuilder.visit_comparison_operator": {
            "name": "visit_comparison_operator",
            "location": 212,
            "return": [
                "ast.Operator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "StrMatch"
                ]
            }
        },
        "ASTBuilder.visit_parenthesised_expression": {
            "name": "visit_parenthesised_expression",
            "location": 215,
            "return": [
                "ast.Expression"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ast.Expression]"
                ]
            }
        },
        "ASTBuilder.visit_expression": {
            "name": "visit_expression",
            "location": 219,
            "return": [
                "ast.Expression"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[Union[(List[ast.Value], ast.Value)]]"
                ]
            }
        },
        "ASTBuilder.visit_assignment": {
            "name": "visit_assignment",
            "location": 226,
            "return": [
                "ast.Assignment"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ast.Expression]"
                ]
            }
        },
        "ASTBuilder.visit_operation_assignment": {
            "name": "visit_operation_assignment",
            "location": 230,
            "return": [
                "ast.Assignment"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Union[(Tuple[(ast.Operator, ast.Assignment)], Tuple[ast.Assignment])]"
                ]
            }
        },
        "ASTBuilder.visit_cast": {
            "name": "visit_cast",
            "location": 240,
            "return": [
                "ast.Cast"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Symbol, ast.Expression)]"
                ]
            }
        },
        "ASTBuilder.visit_qualifier": {
            "name": "visit_qualifier",
            "location": 247,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_array_element": {
            "name": "visit_array_element",
            "location": 258,
            "return": [
                "ArrayBuilder"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[Union[(None, ast.Expression)]]"
                ]
            }
        },
        "ASTBuilder.visit_array": {
            "name": "visit_array",
            "location": 264,
            "return": [
                "Optional[ArrayBuilder]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ArrayBuilder, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_reference": {
            "name": "visit_reference",
            "location": 274,
            "return": [
                "Union[(ast.Array, ast.Reference)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Union[(Tuple[(StrMatch, ast.Symbol)], Tuple[(StrMatch, ArrayBuilder, ast.Symbol)])]"
                ]
            }
        },
        "ASTBuilder.visit_function_type_args": {
            "name": "visit_function_type_args",
            "location": 285,
            "return": [
                "Tuple[(ast.Symbol, ...)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Symbol, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_function_type": {
            "name": "visit_function_type",
            "location": 289,
            "return": [
                "ast.TemplatedIdentifier"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Symbol, Tuple[(ast.Symbol, ...)])]"
                ]
            }
        },
        "ASTBuilder.visit_full_type": {
            "name": "visit_full_type",
            "location": 314,
            "return": [
                "ast.Symbol"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(Optional[ast.Qualifier], ast.Symbol, ast.Symbol, Optional[ArrayBuilder])]"
                ]
            }
        },
        "ASTBuilder.visit_variable_declaration": {
            "name": "visit_variable_declaration",
            "location": 336,
            "return": [
                "ast.VariableDeclaration"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Symbol, ast.Identifier)]"
                ]
            }
        },
        "ASTBuilder.visit_variable_declaration_assignable": {
            "name": "visit_variable_declaration_assignable",
            "location": 341,
            "return": [
                "ast.VariableDeclaration"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.VariableDeclaration, Optional[ast.Assignment])]"
                ]
            }
        },
        "ASTBuilder.visit_local_variable_declaration": {
            "name": "visit_local_variable_declaration",
            "location": 349,
            "return": [
                "ast.VariableDeclaration"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Union[(Tuple[ast.VariableDeclaration], Tuple[(StrMatch, ast.VariableDeclaration)])]"
                ]
            }
        },
        "ASTBuilder.visit_variable_assignment": {
            "name": "visit_variable_assignment",
            "location": 360,
            "return": [
                "ast.VariableAssignment"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Union[(Tuple[(ast.Symbol, ArrayBuilder, ast.Assignment)], Tuple[(ast.Symbol, ast.Assignment)])]"
                ]
            }
        },
        "ASTBuilder.visit_return_instruction": {
            "name": "visit_return_instruction",
            "location": 371,
            "return": [
                "ast.Return"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Expression)]"
                ]
            }
        },
        "ASTBuilder.visit_statement": {
            "name": "visit_statement",
            "location": 377,
            "return": [
                "ast.Statement"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ast.Node]"
                ]
            }
        },
        "ASTBuilder.visit_global_variable": {
            "name": "visit_global_variable",
            "location": 380,
            "return": [
                "ast.Statement"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Union[(Tuple[ast.VariableDeclaration], Tuple[(str, ast.VariableDeclaration)], Tuple[(str, str, ast.VariableDeclaration)])]"
                ]
            }
        },
        "ASTBuilder.visit_control_structure_body": {
            "name": "visit_control_structure_body",
            "location": 407,
            "return": [
                "Tuple[ast.Node]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ast.Node]"
                ]
            }
        },
        "ASTBuilder.visit_control_structure": {
            "name": "visit_control_structure",
            "location": 411,
            "return": [
                "ControlStructureArgs"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Expression, Union[(List[ast.Statement], ast.Statement)])]"
                ]
            }
        },
        "ASTBuilder.visit_if_condition": {
            "name": "visit_if_condition",
            "location": 420,
            "return": [
                "ast.ControlStructure"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ControlStructureArgs)]"
                ]
            }
        },
        "ASTBuilder.visit_elif_condition": {
            "name": "visit_elif_condition",
            "location": 424,
            "return": [
                "ast.ControlStructure"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ControlStructureArgs)]"
                ]
            }
        },
        "ASTBuilder.visit_else_condition": {
            "name": "visit_else_condition",
            "location": 429,
            "return": [
                "ast.ControlStructure"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, Union[(List[ast.Statement], ast.Statement)])]"
                ]
            }
        },
        "ASTBuilder.visit_condition": {
            "name": "visit_condition",
            "location": 437,
            "return": [
                "ast.Condition"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.ControlStructure, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_while_loop": {
            "name": "visit_while_loop",
            "location": 441,
            "return": [
                "ast.ControlStructure"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ControlStructureArgs)]"
                ]
            }
        },
        "ASTBuilder.visit_do_while_loop": {
            "name": "visit_do_while_loop",
            "location": 445,
            "return": [
                "ast.ControlStructure"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, Union[(ast.Statement, List[ast.Statement])], StrMatch, ast.Expression)]"
                ]
            }
        },
        "ASTBuilder.visit_for_do_loop_initializers": {
            "name": "visit_for_do_loop_initializers",
            "location": 456,
            "return": [
                "List[ForDoInitializer]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ForDoInitializer, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_for_do_loop_actions": {
            "name": "visit_for_do_loop_actions",
            "location": 461,
            "return": [
                "List[ForDoAction]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ForDoAction]"
                ]
            }
        },
        "ASTBuilder.visit_for_do_loop": {
            "name": "visit_for_do_loop",
            "location": 465,
            "return": [
                "ast.ControlStructure"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, List[ForDoInitializer], StrMatch, List[ForDoAction], StrMatch, ControlStructureArgs)]"
                ]
            }
        },
        "ASTBuilder.visit_switch_case_test": {
            "name": "visit_switch_case_test",
            "location": 472,
            "return": [
                "List[ast.SwitchCaseTest]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, Optional[ast.Value])]"
                ]
            }
        },
        "ASTBuilder.visit_switch_case_body": {
            "name": "visit_switch_case_body",
            "location": 479,
            "return": [
                "ast.SwitchCaseBody"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Union[(Tuple[(ast.Statement, StrMatch)], Tuple[(ast.Statement, ...)])]"
                ]
            }
        },
        "ASTBuilder.visit_switch_cases": {
            "name": "visit_switch_cases",
            "location": 488,
            "return": [
                "ast.SwitchCase"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(List[ast.SwitchCaseTest], ast.SwitchCaseBody)]"
                ]
            }
        },
        "ASTBuilder.visit_switch": {
            "name": "visit_switch",
            "location": 493,
            "return": [
                "ast.ControlStructure"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Expression, ast.Statement)]"
                ]
            }
        },
        "ASTBuilder.visit_control_structure_body_stub_braces": {
            "name": "visit_control_structure_body_stub_braces",
            "location": 501,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(RegExMatch, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_control_structure_body_stub_inner": {
            "name": "visit_control_structure_body_stub_inner",
            "location": 508,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(RegExMatch, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_control_structure_body_stub": {
            "name": "visit_control_structure_body_stub",
            "location": 515,
            "return": [
                "ast.UnparsedContents"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[str]"
                ]
            }
        },
        "ASTBuilder.visit_function_variadic_dots": {
            "name": "visit_function_variadic_dots",
            "location": 522,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "None"
                ]
            }
        },
        "ASTBuilder.visit_function_arguments": {
            "name": "visit_function_arguments",
            "location": 525,
            "return": [
                "Tuple[(List[ast.VariableDeclaration], Optional[ast.Symbol])]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ast.VariableDeclaration]"
                ]
            }
        },
        "ASTBuilder.visit_function_prototype": {
            "name": "visit_function_prototype",
            "location": 542,
            "return": [
                "Tuple[(ast.TemplatedIdentifier, ast.Identifier)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Symbol, ast.Identifier, Tuple[(List[ast.VariableDeclaration], Optional[ast.Symbol])])]"
                ]
            }
        },
        "ASTBuilder.visit_function_declaration": {
            "name": "visit_function_declaration",
            "location": 560,
            "return": [
                "ast.Function"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[Tuple[(ast.TemplatedIdentifier, ast.Identifier)]]"
                ]
            }
        },
        "ASTBuilder.parse_function_definition": {
            "name": "parse_function_definition",
            "location": 573,
            "return": [
                "Tuple[(ast.Qualifier, ast.TemplatedIdentifier, ast.Identifier, ast.UnparsedContents, bool)]"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Tuple[(Tuple[(ast.TemplatedIdentifier, ast.Identifier)], ast.UnparsedContents)]"
                ]
            }
        },
        "ASTBuilder.visit_function_definition": {
            "name": "visit_function_definition",
            "location": 595,
            "return": [
                "ast.Function"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(Tuple[(ast.TemplatedIdentifier, ast.Identifier)], ast.UnparsedContents)]"
                ]
            }
        },
        "ASTBuilder.visit_function": {
            "name": "visit_function",
            "location": 605,
            "return": [
                "ast.Function"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[ast.Function]"
                ]
            }
        },
        "ASTBuilder.visit_include_part": {
            "name": "visit_include_part",
            "location": 611,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[RegExMatch]"
                ]
            }
        },
        "ASTBuilder.visit_include_instruction": {
            "name": "visit_include_instruction",
            "location": 614,
            "return": [
                "ast.Include"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_import_part": {
            "name": "visit_import_part",
            "location": 618,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[RegExMatch]"
                ]
            }
        },
        "ASTBuilder.visit_import_instruction": {
            "name": "visit_import_instruction",
            "location": 621,
            "return": [
                "ast.Import"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_alias": {
            "name": "visit_alias",
            "location": 628,
            "return": [
                "ast.Alias"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Symbol, ast.Identifier)]"
                ]
            }
        },
        "ASTBuilder.visit_namespace": {
            "name": "visit_namespace",
            "location": 632,
            "return": [
                "ast.Namespace"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.CompoundIdentifier, ast.Node)]"
                ]
            }
        },
        "ASTBuilder.visit_struct": {
            "name": "visit_struct",
            "location": 648,
            "return": [
                "ast.Struct"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Identifier, ast.VariableDeclaration)]"
                ]
            }
        },
        "ASTBuilder.visit_union": {
            "name": "visit_union",
            "location": 655,
            "return": [
                "ast.EhUnion"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Identifier, ast.VariableDeclaration)]"
                ]
            }
        },
        "ASTBuilder.visit_enum": {
            "name": "visit_enum",
            "location": 662,
            "return": [
                "ast.EhEnum"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Identifier, ast.Identifier)]"
                ]
            }
        },
        "ASTBuilder.visit_constructor": {
            "name": "visit_constructor",
            "location": 669,
            "return": [
                "ast.Ctor"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(str, Tuple[(List[ast.VariableDeclaration], Optional[ast.Symbol])], ast.UnparsedContents)]"
                ]
            }
        },
        "ASTBuilder.visit_destructor": {
            "name": "visit_destructor",
            "location": 708,
            "return": [
                "ast.Dtor"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(str, ast.UnparsedContents)]"
                ]
            }
        },
        "ASTBuilder.visit_class_method": {
            "name": "visit_class_method",
            "location": 731,
            "return": [
                "ast.ClassMethod"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(Tuple[(ast.TemplatedIdentifier, ast.Identifier)], ast.UnparsedContents)]"
                ]
            }
        },
        "ASTBuilder.visit_class_property": {
            "name": "visit_class_property",
            "location": 740,
            "return": [
                "ast.ClassProperty"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Symbol, ast.Identifier)]"
                ]
            }
        },
        "ASTBuilder.visit_eh_class": {
            "name": "visit_eh_class",
            "location": 744,
            "return": [
                "ast.EhClass"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(StrMatch, ast.Identifier, Union[(ast.ClassMethod, ast.ClassProperty)])]"
                ]
            }
        },
        "ASTBuilder.visit_function_body_grammar": {
            "name": "visit_function_body_grammar",
            "location": 755,
            "return": [
                "List[ast.Node]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Node, ...)]"
                ]
            }
        },
        "ASTBuilder.visit_grammar": {
            "name": "visit_grammar",
            "location": 759,
            "return": [
                "ast.AST"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ParseTreeNode"
                ],
                "children": [
                    "Tuple[(ast.Node, ...)]"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/parser/c_header.py": {
        "find_clang_posix": {
            "name": "find_clang_posix",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_builtin_defines": {
            "name": "_get_builtin_defines",
            "location": 111,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "cursor_to_ehlit": {
            "name": "cursor_to_ehlit",
            "location": 194,
            "return": [
                "Optional[ast.Node]"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "type_to_ehlit": {
            "name": "type_to_ehlit",
            "location": 202,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "value_to_ehlit": {
            "name": "value_to_ehlit",
            "location": 228,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "val": [
                    "str"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "find_file_in_path": {
            "name": "find_file_in_path",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 250,
            "return": [
                "List[ast.Node]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "parse_VAR_DECL": {
            "name": "parse_VAR_DECL",
            "location": 269,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "parse_FUNCTION_DECL": {
            "name": "parse_FUNCTION_DECL",
            "location": 294,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "parse_TYPEDEF_DECL": {
            "name": "parse_TYPEDEF_DECL",
            "location": 316,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "_parse_container_structure_fields": {
            "name": "_parse_container_structure_fields",
            "location": 322,
            "return": [
                "List[ast.VariableDeclaration]"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "parse_STRUCT_DECL": {
            "name": "parse_STRUCT_DECL",
            "location": 331,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "parse_UNION_DECL": {
            "name": "parse_UNION_DECL",
            "location": 341,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "parse_ENUM_DECL": {
            "name": "parse_ENUM_DECL",
            "location": 351,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "parse_MACRO_DEFINITION": {
            "name": "parse_MACRO_DEFINITION",
            "location": 367,
            "return": [
                "Optional[ast.Node]"
            ],
            "arguments": {
                "cursor": [
                    "Cursor"
                ]
            }
        },
        "_macro_var_type": {
            "name": "_macro_var_type",
            "location": 403,
            "return": [
                "ast.Symbol"
            ],
            "arguments": {
                "tokens": [
                    "List[Token]"
                ]
            }
        },
        "_macro_alias_value": {
            "name": "_macro_alias_value",
            "location": 415,
            "return": [
                "Optional[ast.Symbol]"
            ],
            "arguments": {
                "tokens": [
                    "List[Token]"
                ]
            }
        },
        "_macro_alias_type": {
            "name": "_macro_alias_type",
            "location": 428,
            "return": [
                "Optional[ast.Symbol]"
            ],
            "arguments": {
                "tokens": [
                    "List[Token]"
                ]
            }
        },
        "type_VOID": {
            "name": "type_VOID",
            "location": 449,
            "return": [
                "ast.Symbol"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_POINTER": {
            "name": "type_POINTER",
            "location": 453,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_TYPEDEF": {
            "name": "type_TYPEDEF",
            "location": 469,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_CONSTANTARRAY": {
            "name": "type_CONSTANTARRAY",
            "location": 473,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_INCOMPLETEARRAY": {
            "name": "type_INCOMPLETEARRAY",
            "location": 481,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_ELABORATED": {
            "name": "type_ELABORATED",
            "location": 487,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_RECORD": {
            "name": "type_RECORD",
            "location": 500,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_FUNCTIONPROTO": {
            "name": "type_FUNCTIONPROTO",
            "location": 513,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "type_UNEXPOSED": {
            "name": "type_UNEXPOSED",
            "location": 524,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "CDefine.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "ast.Identifier"
                ]
            }
        },
        "CMacroFunction.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "ast.Identifier"
                ],
                "arg_cnt": [
                    "int"
                ]
            }
        },
        "CAnyType.make_symbol": {
            "name": "make_symbol",
            "location": 156,
            "return": [
                "ast.Symbol"
            ],
            "arguments": {}
        },
        "CAnyType.name": {
            "name": "name",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAnyType.dup": {
            "name": "dup",
            "location": 163,
            "return": [
                "ast.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAnyType.from_any": {
            "name": "from_any",
            "location": 166,
            "return": [
                "ast.Symbol"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/ehlit/parser/error.py": {
        "handle_parse_error": {
            "name": "handle_parse_error",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "err": [
                    "NoMatch"
                ],
                "parser": [
                    "ParserPython"
                ]
            }
        },
        "Failure.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "'ParseError.Severity'"
                ],
                "pos": [
                    "int"
                ],
                "msg": [
                    "str"
                ],
                "file": [
                    "Optional[str]"
                ]
            }
        },
        "Failure.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseError.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failures": [
                    "List[Failure]"
                ],
                "parser": [
                    "Optional[ParserPython]"
                ]
            }
        },
        "ParseError.summary": {
            "name": "summary",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseError.__str__": {
            "name": "__str__",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/ehlit/parser/function.py": {
        "parse": {
            "name": "parse",
            "location": 31,
            "return": [
                "List[Statement]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "have_return_value": [
                    "bool"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/parser/grammar.py": {
        "trailing_comma": {
            "name": "trailing_comma",
            "location": 40,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "block_comment": {
            "name": "block_comment",
            "location": 47,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "line_comment": {
            "name": "line_comment",
            "location": 51,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "builtin_keyword": {
            "name": "builtin_keyword",
            "location": 58,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "builtin_type": {
            "name": "builtin_type",
            "location": 65,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "identifier": {
            "name": "identifier",
            "location": 70,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "compound_identifier": {
            "name": "compound_identifier",
            "location": 75,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "char": {
            "name": "char",
            "location": 79,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "string": {
            "name": "string",
            "location": 85,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "number": {
            "name": "number",
            "location": 89,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "decimal_number": {
            "name": "decimal_number",
            "location": 93,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "null_value": {
            "name": "null_value",
            "location": 97,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "bool_value": {
            "name": "bool_value",
            "location": 101,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "referenced_value": {
            "name": "referenced_value",
            "location": 105,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_args": {
            "name": "function_args",
            "location": 109,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_call": {
            "name": "function_call",
            "location": 113,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "writable_value": {
            "name": "writable_value",
            "location": 117,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "disambiguated_prefix_operator_value": {
            "name": "disambiguated_prefix_operator_value",
            "location": 121,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "prefix_operator_value": {
            "name": "prefix_operator_value",
            "location": 125,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "suffix_operator_value": {
            "name": "suffix_operator_value",
            "location": 129,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "sizeof": {
            "name": "sizeof",
            "location": 133,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "array_access": {
            "name": "array_access",
            "location": 137,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "anonymous_array": {
            "name": "anonymous_array",
            "location": 141,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "cast": {
            "name": "cast",
            "location": 145,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "heap_alloc": {
            "name": "heap_alloc",
            "location": 149,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "heap_dealloc": {
            "name": "heap_dealloc",
            "location": 153,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "value": {
            "name": "value",
            "location": 157,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "equality_sequence": {
            "name": "equality_sequence",
            "location": 166,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "inequality_sequence": {
            "name": "inequality_sequence",
            "location": 170,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "lesser_than_sequence": {
            "name": "lesser_than_sequence",
            "location": 174,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "greater_than_sequence": {
            "name": "greater_than_sequence",
            "location": 178,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "operator_sequence": {
            "name": "operator_sequence",
            "location": 182,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "mathematical_operator": {
            "name": "mathematical_operator",
            "location": 186,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "boolean_operator": {
            "name": "boolean_operator",
            "location": 190,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "comparison_operator": {
            "name": "comparison_operator",
            "location": 194,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "bitwise_operator": {
            "name": "bitwise_operator",
            "location": 198,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "operator": {
            "name": "operator",
            "location": 202,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "parenthesised_expression": {
            "name": "parenthesised_expression",
            "location": 206,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "expression": {
            "name": "expression",
            "location": 210,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "assignment": {
            "name": "assignment",
            "location": 214,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "operation_assignment": {
            "name": "operation_assignment",
            "location": 218,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "qualifier": {
            "name": "qualifier",
            "location": 225,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "array_element": {
            "name": "array_element",
            "location": 229,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "array": {
            "name": "array",
            "location": 233,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "reference": {
            "name": "reference",
            "location": 237,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_type_args": {
            "name": "function_type_args",
            "location": 241,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_type": {
            "name": "function_type",
            "location": 251,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "full_type": {
            "name": "full_type",
            "location": 255,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "variable_declaration": {
            "name": "variable_declaration",
            "location": 262,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "variable_declaration_assignable": {
            "name": "variable_declaration_assignable",
            "location": 266,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "local_variable_declaration": {
            "name": "local_variable_declaration",
            "location": 270,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "variable_assignment": {
            "name": "variable_assignment",
            "location": 274,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "return_instruction": {
            "name": "return_instruction",
            "location": 278,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "statement": {
            "name": "statement",
            "location": 284,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "global_variable": {
            "name": "global_variable",
            "location": 288,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "instruction": {
            "name": "instruction",
            "location": 292,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "control_structure_body": {
            "name": "control_structure_body",
            "location": 299,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "control_structure": {
            "name": "control_structure",
            "location": 303,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "if_condition": {
            "name": "if_condition",
            "location": 307,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "elif_condition": {
            "name": "elif_condition",
            "location": 311,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "else_condition": {
            "name": "else_condition",
            "location": 315,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "condition": {
            "name": "condition",
            "location": 319,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "while_loop": {
            "name": "while_loop",
            "location": 323,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "do_while_loop": {
            "name": "do_while_loop",
            "location": 327,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "for_do_loop_initializers": {
            "name": "for_do_loop_initializers",
            "location": 331,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "for_do_loop_actions": {
            "name": "for_do_loop_actions",
            "location": 335,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "for_do_loop": {
            "name": "for_do_loop",
            "location": 339,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "switch_case_test": {
            "name": "switch_case_test",
            "location": 343,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "switch_case_body": {
            "name": "switch_case_body",
            "location": 347,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "switch_cases": {
            "name": "switch_cases",
            "location": 351,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "switch": {
            "name": "switch",
            "location": 355,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "open_brace": {
            "name": "open_brace",
            "location": 362,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "close_brace": {
            "name": "close_brace",
            "location": 366,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "control_structure_potential_closing_brace": {
            "name": "control_structure_potential_closing_brace",
            "location": 370,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "control_structure_body_stub_braces": {
            "name": "control_structure_body_stub_braces",
            "location": 374,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "control_structure_body_stub_inner": {
            "name": "control_structure_body_stub_inner",
            "location": 380,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "control_structure_body_stub": {
            "name": "control_structure_body_stub",
            "location": 387,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_variadic_dots": {
            "name": "function_variadic_dots",
            "location": 394,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_arguments": {
            "name": "function_arguments",
            "location": 398,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_prototype": {
            "name": "function_prototype",
            "location": 404,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_declaration": {
            "name": "function_declaration",
            "location": 408,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_definition": {
            "name": "function_definition",
            "location": 412,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function": {
            "name": "function",
            "location": 416,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "include_part": {
            "name": "include_part",
            "location": 423,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "include_instruction": {
            "name": "include_instruction",
            "location": 427,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "import_part": {
            "name": "import_part",
            "location": 431,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "import_instruction": {
            "name": "import_instruction",
            "location": 435,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "alias": {
            "name": "alias",
            "location": 442,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "namespace": {
            "name": "namespace",
            "location": 446,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "global_statement": {
            "name": "global_statement",
            "location": 450,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "struct": {
            "name": "struct",
            "location": 457,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "union": {
            "name": "union",
            "location": 461,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "enum": {
            "name": "enum",
            "location": 465,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "constructor": {
            "name": "constructor",
            "location": 469,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "destructor": {
            "name": "destructor",
            "location": 474,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "class_method": {
            "name": "class_method",
            "location": 478,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "class_property": {
            "name": "class_property",
            "location": 482,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "class_contents": {
            "name": "class_contents",
            "location": 486,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "eh_class": {
            "name": "eh_class",
            "location": 490,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "function_body_grammar": {
            "name": "function_body_grammar",
            "location": 497,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "grammar": {
            "name": "grammar",
            "location": 501,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        },
        "comment_grammar": {
            "name": "comment_grammar",
            "location": 505,
            "return": [
                "GrammarType"
            ],
            "arguments": {}
        }
    },
    "ehlit-prototype-master/ehlit/parser/source.py": {
        "parse": {
            "name": "parse",
            "location": 30,
            "return": [
                "AST"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/parser/__init__.py": {},
    "ehlit-prototype-master/ehlit/writer/dump.py": {
        "indent": {
            "name": "indent",
            "location": 39,
            "return": [
                "Callable[(..., None)]"
            ],
            "arguments": {
                "fn": [
                    "IndentedFnType"
                ]
            }
        },
        "indent.fn_wrapper": {
            "name": "fn_wrapper",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "'DumpWriter'"
                ],
                "node": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "AST"
                ]
            }
        },
        "DumpWriter.dump": {
            "name": "dump",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "DumpWriter.decrement_prefix": {
            "name": "decrement_prefix",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DumpWriter.increment_prefix": {
            "name": "increment_prefix",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.print_node": {
            "name": "print_node",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.print_node_list": {
            "name": "print_node_list",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "lst": [
                    "Sequence[Node]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.print_str": {
            "name": "print_str",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpInclude": {
            "name": "dumpInclude",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inc": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpImport": {
            "name": "dumpImport",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dump_declaration": {
            "name": "dump_declaration",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dump_variable_declaration": {
            "name": "dump_variable_declaration",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls_name": [
                    "str"
                ],
                "decl": [
                    "VariableDeclaration"
                ]
            }
        },
        "DumpWriter.dumpVariableDeclaration": {
            "name": "dumpVariableDeclaration",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dump_function": {
            "name": "dump_function",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls_name": [
                    "str"
                ],
                "fun": [
                    "Function"
                ]
            }
        },
        "DumpWriter.dumpFunction": {
            "name": "dumpFunction",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpStatement": {
            "name": "dumpStatement",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpExpression": {
            "name": "dumpExpression",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dumpInitializationList": {
            "name": "dumpInitializationList",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dumpCast": {
            "name": "dumpCast",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpFunctionCall": {
            "name": "dumpFunctionCall",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpArrayAccess": {
            "name": "dumpArrayAccess",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpVariableAssignment": {
            "name": "dumpVariableAssignment",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpAssignment": {
            "name": "dumpAssignment",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpControlStructure": {
            "name": "dumpControlStructure",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "struct": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpDoWhileLoop": {
            "name": "dumpDoWhileLoop",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dumpForDoLoop": {
            "name": "dumpForDoLoop",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpCondition": {
            "name": "dumpCondition",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dumpSwitchCase": {
            "name": "dumpSwitchCase",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpSwitchCaseTest": {
            "name": "dumpSwitchCaseTest",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dumpSwitchCaseBody": {
            "name": "dumpSwitchCaseBody",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ],
                "_": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dumpReturn": {
            "name": "dumpReturn",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dump_qualifiers": {
            "name": "dump_qualifiers",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Symbol, Function)]"
                ]
            }
        },
        "DumpWriter.dumpReferenceToType": {
            "name": "dumpReferenceToType",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpReferenceToValue": {
            "name": "dumpReferenceToValue",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpOperator": {
            "name": "dumpOperator",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpArray": {
            "name": "dumpArray",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpFunctionType": {
            "name": "dumpFunctionType",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpCompoundIdentifier": {
            "name": "dumpCompoundIdentifier",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ],
                "is_next": [
                    "bool"
                ]
            }
        },
        "DumpWriter.dumpIdentifier": {
            "name": "dumpIdentifier",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpTemplatedIdentifier": {
            "name": "dumpTemplatedIdentifier",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpHeapAlloc": {
            "name": "dumpHeapAlloc",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpHeapDealloc": {
            "name": "dumpHeapDealloc",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpNumber": {
            "name": "dumpNumber",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpDecimalNumber": {
            "name": "dumpDecimalNumber",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpChar": {
            "name": "dumpChar",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpString": {
            "name": "dumpString",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpNullValue": {
            "name": "dumpNullValue",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpBoolValue": {
            "name": "dumpBoolValue",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpPrefixOperatorValue": {
            "name": "dumpPrefixOperatorValue",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpSuffixOperatorValue": {
            "name": "dumpSuffixOperatorValue",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpAnonymousArray": {
            "name": "dumpAnonymousArray",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpSizeof": {
            "name": "dumpSizeof",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpAlias": {
            "name": "dumpAlias",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpStruct": {
            "name": "dumpStruct",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpEhUnion": {
            "name": "dumpEhUnion",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpClassMethod": {
            "name": "dumpClassMethod",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpCtor": {
            "name": "dumpCtor",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpDtor": {
            "name": "dumpDtor",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpClassProperty": {
            "name": "dumpClassProperty",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpEhClass": {
            "name": "dumpEhClass",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpEhEnum": {
            "name": "dumpEhEnum",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpEnumField": {
            "name": "dumpEnumField",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpNamespace": {
            "name": "dumpNamespace",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpCDefine": {
            "name": "dumpCDefine",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpCMacroFunction": {
            "name": "dumpCMacroFunction",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        },
        "DumpWriter.dumpCAnyType": {
            "name": "dumpCAnyType",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Node, str)]"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/writer/import_file.py": {
        "ImportWriter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "AST"
                ],
                "f": [
                    "str"
                ]
            }
        },
        "ImportWriter.write": {
            "name": "write",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "ImportWriter.write_indent": {
            "name": "write_indent",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportWriter.writeInclude": {
            "name": "writeInclude",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Include"
                ]
            }
        },
        "ImportWriter.writeImport": {
            "name": "writeImport",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Import"
                ]
            }
        },
        "ImportWriter.writeFunction": {
            "name": "writeFunction",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Function"
                ]
            }
        },
        "ImportWriter.write_function_prototype": {
            "name": "write_function_prototype",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Function"
                ]
            }
        },
        "ImportWriter.write_function_body": {
            "name": "write_function_body",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Function"
                ]
            }
        },
        "ImportWriter.writeDeclaration": {
            "name": "writeDeclaration",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Declaration"
                ]
            }
        },
        "ImportWriter.writeArgumentDefinitionList": {
            "name": "writeArgumentDefinitionList",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[VariableDeclaration]"
                ]
            }
        },
        "ImportWriter.writeStatement": {
            "name": "writeStatement",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Statement"
                ]
            }
        },
        "ImportWriter.writeReturn": {
            "name": "writeReturn",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Return"
                ]
            }
        },
        "ImportWriter.writeExpression": {
            "name": "writeExpression",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Expression"
                ]
            }
        },
        "ImportWriter.writeArray": {
            "name": "writeArray",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Array"
                ]
            }
        },
        "ImportWriter.writeReferenceToType": {
            "name": "writeReferenceToType",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ReferenceToType"
                ]
            }
        },
        "ImportWriter.writeFunctionType": {
            "name": "writeFunctionType",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "FunctionType"
                ]
            }
        },
        "ImportWriter.writeAssignment": {
            "name": "writeAssignment",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Assignment"
                ]
            }
        },
        "ImportWriter.writeCompoundIdentifier": {
            "name": "writeCompoundIdentifier",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "CompoundIdentifier"
                ]
            }
        },
        "ImportWriter.writeIdentifier": {
            "name": "writeIdentifier",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Identifier"
                ]
            }
        },
        "ImportWriter.writeTemplatedIdentifier": {
            "name": "writeTemplatedIdentifier",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TemplatedIdentifier"
                ]
            }
        },
        "ImportWriter.writeOperator": {
            "name": "writeOperator",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Operator"
                ]
            }
        },
        "ImportWriter.writeNumber": {
            "name": "writeNumber",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Number"
                ]
            }
        },
        "ImportWriter.writeDecimalNumber": {
            "name": "writeDecimalNumber",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "DecimalNumber"
                ]
            }
        },
        "ImportWriter.writeBoolValue": {
            "name": "writeBoolValue",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "BoolValue"
                ]
            }
        },
        "ImportWriter.writeAlias": {
            "name": "writeAlias",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Alias"
                ]
            }
        },
        "ImportWriter.writeVariableDeclaration": {
            "name": "writeVariableDeclaration",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "VariableDeclaration"
                ]
            }
        },
        "ImportWriter.writeCast": {
            "name": "writeCast",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Cast"
                ]
            }
        },
        "ImportWriter.writeContainerStructure": {
            "name": "writeContainerStructure",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ContainerStructure"
                ]
            }
        },
        "ImportWriter.writeStruct": {
            "name": "writeStruct",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Struct"
                ]
            }
        },
        "ImportWriter.writeEhUnion": {
            "name": "writeEhUnion",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "EhUnion"
                ]
            }
        },
        "ImportWriter.writeClassMethod": {
            "name": "writeClassMethod",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassMethod"
                ]
            }
        },
        "ImportWriter.writeClassProperty": {
            "name": "writeClassProperty",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassProperty"
                ]
            }
        },
        "ImportWriter.writeCtor": {
            "name": "writeCtor",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassMethod"
                ]
            }
        },
        "ImportWriter.writeDtor": {
            "name": "writeDtor",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassMethod"
                ]
            }
        },
        "ImportWriter.writeEhClass": {
            "name": "writeEhClass",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "EhClass"
                ]
            }
        },
        "ImportWriter.writeEhEnum": {
            "name": "writeEhEnum",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "EhEnum"
                ]
            }
        },
        "ImportWriter.writeNamespace": {
            "name": "writeNamespace",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Namespace"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/writer/source.py": {
        "GeneratedIdentifier.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SourceWriter.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "AST"
                ],
                "f": [
                    "str"
                ]
            }
        },
        "SourceWriter.write": {
            "name": "write",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "SourceWriter.write_indent": {
            "name": "write_indent",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceWriter.write_value": {
            "name": "write_value",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Value"
                ]
            }
        },
        "SourceWriter.writeInclude": {
            "name": "writeInclude",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inc": [
                    "Include"
                ]
            }
        },
        "SourceWriter.writeImport": {
            "name": "writeImport",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Import"
                ]
            }
        },
        "SourceWriter.writeReferenceToType": {
            "name": "writeReferenceToType",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "ReferenceToType"
                ]
            }
        },
        "SourceWriter.writeReferenceToValue": {
            "name": "writeReferenceToValue",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "ReferenceToValue"
                ]
            }
        },
        "SourceWriter.writeArray": {
            "name": "writeArray",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "Array"
                ]
            }
        },
        "SourceWriter.is_dynamic_array": {
            "name": "is_dynamic_array",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "SourceWriter.array_needs_parens": {
            "name": "array_needs_parens",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "SourceWriter.write_declaration_post": {
            "name": "write_declaration_post",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Symbol"
                ]
            }
        },
        "SourceWriter.writeFunctionType": {
            "name": "writeFunctionType",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "FunctionType"
                ]
            }
        },
        "SourceWriter.write_type_prefix": {
            "name": "write_type_prefix",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Symbol"
                ]
            }
        },
        "SourceWriter.write_type_suffix": {
            "name": "write_type_suffix",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Symbol"
                ]
            }
        },
        "SourceWriter.writeDeclaration": {
            "name": "writeDeclaration",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "Declaration"
                ]
            }
        },
        "SourceWriter.writeVariableDeclaration": {
            "name": "writeVariableDeclaration",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "VariableDeclaration"
                ]
            }
        },
        "SourceWriter.writeArgumentDefinitionList": {
            "name": "writeArgumentDefinitionList",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Sequence[VariableDeclaration]"
                ],
                "variadic": [
                    "bool"
                ],
                "variadic_type": [
                    "Optional[Symbol]"
                ]
            }
        },
        "SourceWriter.write_function_prototype": {
            "name": "write_function_prototype",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "Function"
                ]
            }
        },
        "SourceWriter.write_predeclarations": {
            "name": "write_predeclarations",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Scope"
                ]
            }
        },
        "SourceWriter.write_function_declaration": {
            "name": "write_function_declaration",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Function"
                ]
            }
        },
        "SourceWriter.writeFunction": {
            "name": "writeFunction",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Function"
                ]
            }
        },
        "SourceWriter.needs_to_write_function_body": {
            "name": "needs_to_write_function_body",
            "location": 320,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Function"
                ]
            }
        },
        "SourceWriter.writeStatement": {
            "name": "writeStatement",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "Statement"
                ]
            }
        },
        "SourceWriter.writeExpression": {
            "name": "writeExpression",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Expression"
                ]
            }
        },
        "SourceWriter.writeInitializationList": {
            "name": "writeInitializationList",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "InitializationList"
                ]
            }
        },
        "SourceWriter.writeAssignment": {
            "name": "writeAssignment",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "Assignment"
                ]
            }
        },
        "SourceWriter.writeVariableAssignment": {
            "name": "writeVariableAssignment",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "VariableAssignment"
                ]
            }
        },
        "SourceWriter.writeCast": {
            "name": "writeCast",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Cast"
                ]
            }
        },
        "SourceWriter.writeFunctionCall": {
            "name": "writeFunctionCall",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "FunctionCall"
                ]
            }
        },
        "SourceWriter.writeArrayAccess": {
            "name": "writeArrayAccess",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "ArrayAccess"
                ]
            }
        },
        "SourceWriter.writeControlStructure": {
            "name": "writeControlStructure",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "struct": [
                    "ControlStructure"
                ]
            }
        },
        "SourceWriter.writeDoWhileLoop": {
            "name": "writeDoWhileLoop",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "DoWhileLoop"
                ]
            }
        },
        "SourceWriter.writeForDoLoop": {
            "name": "writeForDoLoop",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ForDoLoop"
                ]
            }
        },
        "SourceWriter.writeCondition": {
            "name": "writeCondition",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "Condition"
                ]
            }
        },
        "SourceWriter.writeSwitchCase": {
            "name": "writeSwitchCase",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "SwitchCase"
                ]
            }
        },
        "SourceWriter.writeSwitchCaseTest": {
            "name": "writeSwitchCaseTest",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "SwitchCaseTest"
                ]
            }
        },
        "SourceWriter.writeSwitchCaseBody": {
            "name": "writeSwitchCaseBody",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "SwitchCaseBody"
                ]
            }
        },
        "SourceWriter.writeReturn": {
            "name": "writeReturn",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret": [
                    "Return"
                ]
            }
        },
        "SourceWriter.writeOperator": {
            "name": "writeOperator",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Operator"
                ]
            }
        },
        "SourceWriter.writeCompoundIdentifier": {
            "name": "writeCompoundIdentifier",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "CompoundIdentifier"
                ]
            }
        },
        "SourceWriter.writeIdentifier": {
            "name": "writeIdentifier",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Identifier"
                ]
            }
        },
        "SourceWriter.writeGeneratedIdentifier": {
            "name": "writeGeneratedIdentifier",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "GeneratedIdentifier"
                ]
            }
        },
        "SourceWriter.writeTemplatedIdentifier": {
            "name": "writeTemplatedIdentifier",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "TemplatedIdentifier"
                ]
            }
        },
        "SourceWriter.writeHeapAlloc": {
            "name": "writeHeapAlloc",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HeapAlloc"
                ]
            }
        },
        "SourceWriter.writeHeapDealloc": {
            "name": "writeHeapDealloc",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HeapDealloc"
                ]
            }
        },
        "SourceWriter.writeChar": {
            "name": "writeChar",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Char"
                ]
            }
        },
        "SourceWriter.writeString": {
            "name": "writeString",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "String"
                ]
            }
        },
        "SourceWriter.writeNumber": {
            "name": "writeNumber",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Number"
                ]
            }
        },
        "SourceWriter.writeDecimalNumber": {
            "name": "writeDecimalNumber",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "DecimalNumber"
                ]
            }
        },
        "SourceWriter.writeNullValue": {
            "name": "writeNullValue",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "NullValue"
                ]
            }
        },
        "SourceWriter.writeBoolValue": {
            "name": "writeBoolValue",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "BoolValue"
                ]
            }
        },
        "SourceWriter.writePrefixOperatorValue": {
            "name": "writePrefixOperatorValue",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "PrefixOperatorValue"
                ]
            }
        },
        "SourceWriter.writeSuffixOperatorValue": {
            "name": "writeSuffixOperatorValue",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "SuffixOperatorValue"
                ]
            }
        },
        "SourceWriter.writeAnonymousArray": {
            "name": "writeAnonymousArray",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "AnonymousArray"
                ]
            }
        },
        "SourceWriter.writeSizeof": {
            "name": "writeSizeof",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sizeof"
                ]
            }
        },
        "SourceWriter.writeAlias": {
            "name": "writeAlias",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Alias"
                ]
            }
        },
        "SourceWriter.writeContainerStructure": {
            "name": "writeContainerStructure",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ContainerStructure"
                ]
            }
        },
        "SourceWriter.writeStruct": {
            "name": "writeStruct",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Struct"
                ]
            }
        },
        "SourceWriter.writeEhUnion": {
            "name": "writeEhUnion",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "EhUnion"
                ]
            }
        },
        "SourceWriter.writeClassMethod": {
            "name": "writeClassMethod",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassMethod"
                ]
            }
        },
        "SourceWriter.writeClassProperty": {
            "name": "writeClassProperty",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassProperty"
                ]
            }
        },
        "SourceWriter.writeCtor": {
            "name": "writeCtor",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassMethod"
                ]
            }
        },
        "SourceWriter.writeDtor": {
            "name": "writeDtor",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassMethod"
                ]
            }
        },
        "SourceWriter.writeEhClass": {
            "name": "writeEhClass",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "EhClass"
                ]
            }
        },
        "SourceWriter.writeEhEnum": {
            "name": "writeEhEnum",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "EhEnum"
                ]
            }
        },
        "SourceWriter.writeNamespace": {
            "name": "writeNamespace",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Namespace"
                ]
            }
        }
    },
    "ehlit-prototype-master/ehlit/writer/__init__.py": {},
    "ehlit-prototype-master/test/common.py": {
        "Pipe.__enter__": {
            "name": "__enter__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipe.__exit__": {
            "name": "__exit__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EhlitTestCase.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "EhlitTestCase.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EhlitTestCase.tearDown": {
            "name": "tearDown",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EhlitTestCase.discover_tests": {
            "name": "discover_tests",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "EhlitTestCase.run_compiler": {
            "name": "run_compiler",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "opts": []
            }
        },
        "EhlitTestCase.compile": {
            "name": "compile",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "EhlitTestCase.dump": {
            "name": "dump",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "EhlitTestCase.assert_error": {
            "name": "assert_error",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "error": []
            }
        },
        "EhlitTestCase.assert_error_file": {
            "name": "assert_error_file",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "error_file": []
            }
        },
        "EhlitTestCase.assert_compiles": {
            "name": "assert_compiles",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "EhlitTestCase.assert_files_equal": {
            "name": "assert_files_equal",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "file1": [],
                "file2": []
            }
        },
        "EhlitTestCase.assert_equal_to_file": {
            "name": "assert_equal_to_file",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "filename": [],
                "repls": []
            }
        },
        "EhlitTestCase.assert_dumps_to": {
            "name": "assert_dumps_to",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "repls": []
            }
        },
        "EhlitTestCase.assert_declares": {
            "name": "assert_declares",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "sym": []
            }
        },
        "EhlitTestCase.assert_not_declares": {
            "name": "assert_not_declares",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "sym": [],
                "expected_err": []
            }
        }
    },
    "ehlit-prototype-master/test/test_compiler.py": {
        "TestCompiler.test_file_not_ehlit_source": {
            "name": "test_file_not_ehlit_source",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCompiler.test_file_no_ent": {
            "name": "test_file_no_ent",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/test_c_parser.py": {
        "TestCParser.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestCParser.test_c_parser": {
            "name": "test_c_parser",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCParser.test_c_variadic_function_call": {
            "name": "test_c_variadic_function_call",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCParser.test_c_macro_usage": {
            "name": "test_c_macro_usage",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCParser._compute_sizes": {
            "name": "_compute_sizes",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/test_dump.py": {
        "TestDump.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestDump.test_dump": {
            "name": "test_dump",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/test_imports.py": {
        "TestImports.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestImports.test_import_generation": {
            "name": "test_import_generation",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImports.test_importing_file": {
            "name": "test_importing_file",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/test_language.py": {
        "TestLanguage.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestLanguage.test_language": {
            "name": "test_language",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/test_language_errors.py": {
        "TestLanguageErrors.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestLanguageErrors.test_language_errors": {
            "name": "test_language_errors",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/test_style.py": {
        "TestCodeFormat.test_code_format": {
            "name": "test_code_format",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/test_typings.py": {
        "TestTypings.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypings.test_typings": {
            "name": "test_typings",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ehlit-prototype-master/test/__init__.py": {}
}
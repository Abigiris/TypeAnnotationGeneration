{
    "elastest-service-manager-master/src/config.py": {
        "print_env_vars": {
            "name": "print_env_vars",
            "location": 85,
            "return": [],
            "arguments": {}
        }
    },
    "elastest-service-manager-master/src/runesm.py": {
        "add_mware": {
            "name": "add_mware",
            "location": 37,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "add_check_api": {
            "name": "add_check_api",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "create_api": {
            "name": "create_api",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "shutdown_handler": {
            "name": "shutdown_handler",
            "location": 117,
            "return": [],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "add_check_api.health_check": {
            "name": "health_check",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "add_check_api.application_data": {
            "name": "application_data",
            "location": 84,
            "return": [],
            "arguments": {}
        }
    },
    "elastest-service-manager-master/src/setup.py": {},
    "elastest-service-manager-master/src/__init__.py": {},
    "elastest-service-manager-master/src/adapters/auth.py": {
        "Auth.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Auth.create_credentials": {
            "name": "create_credentials",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "binding_id": [],
                "instance_id": []
            }
        },
        "Auth.delete_credentials": {
            "name": "delete_credentials",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "binding_info": []
            }
        },
        "DummyAuth.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyAuth.create_credentials": {
            "name": "create_credentials",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "binding_id": [],
                "instance_id": []
            }
        },
        "DummyAuth.delete_credentials": {
            "name": "delete_credentials",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "binding_info": []
            }
        },
        "KeystoneAuth.create_credentials": {
            "name": "create_credentials",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "binding_id": [],
                "instance_id": []
            }
        },
        "KeystoneAuth.delete_credentials": {
            "name": "delete_credentials",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "binding_info": []
            }
        },
        "KeystoneAuth._keystone_client": {
            "name": "_keystone_client",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/src/adapters/generic.py": {
        "AsychExe.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "tasks": [],
                "store": []
            }
        },
        "AsychExe.run": {
            "name": "run",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": [],
                "state": []
            }
        },
        "Task.run": {
            "name": "run",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.start": {
            "name": "start",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynchExe.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "SynchExe.run": {
            "name": "run",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/src/adapters/log.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 28,
            "return": [],
            "arguments": {
                "name": [],
                "level": [],
                "space": [],
                "series": [],
                "sentinel": []
            }
        },
        "SentinelLogHandler.setLevel": {
            "name": "setLevel",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "SentinelLogHandler.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "backup_file": [],
                "space": [],
                "series": []
            }
        },
        "SentinelLogHandler.format_msg": {
            "name": "format_msg",
            "location": 65,
            "return": [],
            "arguments": {
                "record": []
            }
        },
        "SentinelLogHandler.emit": {
            "name": "emit",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "SentinelLogHandler.write_backup": {
            "name": "write_backup",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "SentinelLogHandler.close": {
            "name": "close",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentinelLogHandler._get_kafka_producer": {
            "name": "_get_kafka_producer",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "endpoint": [],
                "key_serializer": [],
                "value_serializer": []
            }
        },
        "SentinelLogHandler._send_msg": {
            "name": "_send_msg",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "SentinelAgentInjector.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentinelAgentInjector._create_srv_inst_space": {
            "name": "_create_srv_inst_space",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "base_url": [],
                "username": [],
                "apikey": [],
                "space": []
            }
        },
        "SentinelAgentInjector._setup_network": {
            "name": "_setup_network",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "m": [],
                "svc_id": []
            }
        },
        "SentinelAgentInjector._setup_logger": {
            "name": "_setup_logger",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "net": [],
                "svc_id": []
            }
        },
        "SentinelAgentInjector._update_deployment": {
            "name": "_update_deployment",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "m": [],
                "net": [],
                "syslog_agent": []
            }
        },
        "SentinelAgentInjector.inject": {
            "name": "inject",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "m_yaml": [],
                "svc_id": []
            }
        },
        "SentinelAgentInjector.remove": {
            "name": "remove",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "srv_id": []
            }
        }
    },
    "elastest-service-manager-master/src/adapters/measurer.py": {
        "MeasurerFactory.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeasurerFactory.start_heartbeat_measurer": {
            "name": "start_heartbeat_measurer",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "MeasurerFactory.stop_heartbeat_measurer": {
            "name": "stop_heartbeat_measurer",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": []
            }
        },
        "Measurer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "Measurer.get_endpoint": {
            "name": "get_endpoint",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measurer.__poll_endpoint": {
            "name": "__poll_endpoint",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measurer.__endpoint_is_healthy": {
            "name": "__endpoint_is_healthy",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measurer.__measure_health": {
            "name": "__measure_health",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measurer.run": {
            "name": "run",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measurer.stop": {
            "name": "stop",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measurer.is_stopped": {
            "name": "is_stopped",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeasurerException.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "errors": []
            }
        }
    },
    "elastest-service-manager-master/src/adapters/resources.py": {
        "DeployerBackend.create": {
            "name": "create",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "c_type": [
                    "str"
                ]
            }
        },
        "DeployerBackend.info": {
            "name": "info",
            "location": 46,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "DeployerBackend.delete": {
            "name": "delete",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "DeployerBackend.is_ok": {
            "name": "is_ok",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeployerBackend._reconcile_state": {
            "name": "_reconcile_state",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "DockerBackend.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerBackend.create": {
            "name": "create",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "c_type": [
                    "str"
                ]
            }
        },
        "DockerBackend.dict_to_list": {
            "name": "dict_to_list",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "DockerBackend.info": {
            "name": "info",
            "location": 174,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "DockerBackend.container_attrs": {
            "name": "container_attrs",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "data": []
            }
        },
        "DockerBackend._container_attrs": {
            "name": "_container_attrs",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "data": [],
                "names": [],
                "out": []
            }
        },
        "DockerBackend.delete": {
            "name": "delete",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "DockerBackend.is_ok": {
            "name": "is_ok",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EPMBackend.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPMBackend.create": {
            "name": "create",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "c_type": [
                    "str"
                ]
            }
        },
        "EPMBackend.info": {
            "name": "info",
            "location": 341,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "EPMBackend.delete": {
            "name": "delete",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "EPMBackend.is_ok": {
            "name": "is_ok",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesBackend.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KubernetesBackend.get_kube_auth_token": {
            "name": "get_kube_auth_token",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesBackend._save_manifest_to_file": {
            "name": "_save_manifest_to_file",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "m": [],
                "mani_path": []
            }
        },
        "KubernetesBackend._create_deployment": {
            "name": "_create_deployment",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "KubernetesBackend._create_service": {
            "name": "_create_service",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "KubernetesBackend._response_result": {
            "name": "_response_result",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "item_description": [],
                "api_response": []
            }
        },
        "KubernetesBackend._deploy": {
            "name": "_deploy",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict"
                ],
                "namespace": [
                    "str"
                ]
            }
        },
        "KubernetesBackend._delete": {
            "name": "_delete",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "KubernetesBackend.dict_to_list": {
            "name": "dict_to_list",
            "location": 624,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "KubernetesBackend._update_env_var": {
            "name": "_update_env_var",
            "location": 636,
            "return": [],
            "arguments": {
                "self": [],
                "manifests": [],
                "extra_env_list": []
            }
        },
        "KubernetesBackend._is_instance_alive_from_info": {
            "name": "_is_instance_alive_from_info",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "KubernetesBackend._create_directory": {
            "name": "_create_directory",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": []
            }
        },
        "KubernetesBackend.valid_data_received": {
            "name": "valid_data_received",
            "location": 692,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": [],
                "content": []
            }
        },
        "KubernetesBackend.create": {
            "name": "create",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "c_type": [
                    "str"
                ]
            }
        },
        "KubernetesBackend._get_instance_status": {
            "name": "_get_instance_status",
            "location": 762,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ],
                "api_response": []
            }
        },
        "KubernetesBackend._get_container_data": {
            "name": "_get_container_data",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ],
                "api_response": []
            }
        },
        "KubernetesBackend._get_info_service": {
            "name": "_get_info_service",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "KubernetesBackend._get_info_deployment": {
            "name": "_get_info_deployment",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "KubernetesBackend.get_info": {
            "name": "get_info",
            "location": 856,
            "return": [],
            "arguments": {
                "self": [],
                "manifests": [],
                "instance_id": []
            }
        },
        "KubernetesBackend.info": {
            "name": "info",
            "location": 892,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "KubernetesBackend.get_manifest_path": {
            "name": "get_manifest_path",
            "location": 911,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": []
            }
        },
        "KubernetesBackend.delete_mani_dir": {
            "name": "delete_mani_dir",
            "location": 924,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": []
            }
        },
        "KubernetesBackend.delete": {
            "name": "delete",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "KubernetesBackend.is_ok": {
            "name": "is_ok",
            "location": 978,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyBackend.__init__": {
            "name": "__init__",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyBackend.create": {
            "name": "create",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "c_type": [
                    "str"
                ]
            }
        },
        "DummyBackend.info": {
            "name": "info",
            "location": 991,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "DummyBackend.delete": {
            "name": "delete",
            "location": 1009,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "DummyBackend.is_ok": {
            "name": "is_ok",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.__init__": {
            "name": "__init__",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.create": {
            "name": "create",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "c_type": [
                    "str"
                ]
            }
        },
        "ResourceManager.info": {
            "name": "info",
            "location": 1042,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "ResourceManager.delete": {
            "name": "delete",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "ResourceManager.is_ok": {
            "name": "is_ok",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/src/adapters/sql_store.py": {
        "LastOperationSQL.instance": {
            "name": "instance",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LastOperationSQL.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LastOperationSQL.create_table": {
            "name": "create_table",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "LastOperationSQL.table_exists": {
            "name": "table_exists",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "LastOperationSQL.delete_all": {
            "name": "delete_all",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "LastOperationAdapter.create_table": {
            "name": "create_table",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "LastOperationAdapter.sample_model": {
            "name": "sample_model",
            "location": 98,
            "return": [
                "LastOperation"
            ],
            "arguments": {
                "name": []
            }
        },
        "LastOperationAdapter.to_blob": {
            "name": "to_blob",
            "location": 105,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "model": [
                    "LastOperation"
                ]
            }
        },
        "LastOperationAdapter.from_blob": {
            "name": "from_blob",
            "location": 114,
            "return": [
                "LastOperation"
            ],
            "arguments": {
                "cls": [],
                "blob": []
            }
        },
        "LastOperationAdapter.model_to_model_sql": {
            "name": "model_to_model_sql",
            "location": 120,
            "return": [],
            "arguments": {
                "instance_id": [
                    "str"
                ],
                "model": [
                    "LastOperation"
                ]
            }
        },
        "LastOperationAdapter.model_sql_to_model": {
            "name": "model_sql_to_model",
            "location": 137,
            "return": [
                "LastOperation"
            ],
            "arguments": {
                "model_sql": [
                    "LastOperationSQL"
                ]
            }
        },
        "LastOperationAdapter.save": {
            "name": "save",
            "location": 145,
            "return": [
                "LastOperationSQL"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ],
                "model": [
                    "LastOperation"
                ]
            }
        },
        "LastOperationAdapter.delete_all": {
            "name": "delete_all",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LastOperationAdapter.get_all": {
            "name": "get_all",
            "location": 172,
            "return": [
                "[LastOperation]"
            ],
            "arguments": {}
        },
        "LastOperationAdapter.find_by_id_name": {
            "name": "find_by_id_name",
            "location": 178,
            "return": [
                "(LastOperationSQL or None)"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ],
                "model": [
                    "LastOperation"
                ]
            }
        },
        "LastOperationAdapter.exists_in_db": {
            "name": "exists_in_db",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ],
                "model": [
                    "LastOperation"
                ]
            }
        },
        "ServiceInstanceSQL.service": {
            "name": "service",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceInstanceSQL.operations": {
            "name": "operations",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceInstanceSQL.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceInstanceSQL.create_table": {
            "name": "create_table",
            "location": 233,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ServiceInstanceSQL.table_exists": {
            "name": "table_exists",
            "location": 250,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ServiceInstanceSQL.delete_all": {
            "name": "delete_all",
            "location": 254,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ServiceInstanceAdapter.create_table": {
            "name": "create_table",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "ServiceInstanceAdapter.sample_model": {
            "name": "sample_model",
            "location": 267,
            "return": [
                "ServiceInstance"
            ],
            "arguments": {
                "name": []
            }
        },
        "ServiceInstanceAdapter.model_to_model_sql": {
            "name": "model_to_model_sql",
            "location": 278,
            "return": [],
            "arguments": {
                "model": [
                    "ServiceInstance"
                ]
            }
        },
        "ServiceInstanceAdapter.sample_model_sql": {
            "name": "sample_model_sql",
            "location": 293,
            "return": [
                "ServiceInstanceSQL"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ServiceInstanceAdapter.model_sql_to_model": {
            "name": "model_sql_to_model",
            "location": 299,
            "return": [
                "ServiceInstance"
            ],
            "arguments": {
                "model_sql": [
                    "ServiceInstanceSQL"
                ]
            }
        },
        "ServiceInstanceAdapter.get_id": {
            "name": "get_id",
            "location": 312,
            "return": [],
            "arguments": {
                "model": [
                    "ServiceInstance"
                ]
            }
        },
        "ServiceInstanceAdapter.save": {
            "name": "save",
            "location": 322,
            "return": [
                "ServiceInstanceSQL"
            ],
            "arguments": {
                "model": [
                    "ServiceInstance"
                ]
            }
        },
        "ServiceInstanceAdapter.delete_all": {
            "name": "delete_all",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceInstanceAdapter.delete": {
            "name": "delete",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "ServiceInstanceAdapter.get_all": {
            "name": "get_all",
            "location": 361,
            "return": [
                "[ServiceInstance]"
            ],
            "arguments": {}
        },
        "ServiceInstanceAdapter.find_by_id_name": {
            "name": "find_by_id_name",
            "location": 367,
            "return": [
                "(ServiceInstanceSQL or None)"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "ServiceInstanceAdapter.exists_in_db": {
            "name": "exists_in_db",
            "location": 375,
            "return": [
                "bool"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "ManifestSQL.service": {
            "name": "service",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManifestSQL.plan": {
            "name": "plan",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManifestSQL.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManifestSQL.create_table": {
            "name": "create_table",
            "location": 424,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ManifestSQL.table_exists": {
            "name": "table_exists",
            "location": 447,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ManifestSQL.delete_all": {
            "name": "delete_all",
            "location": 451,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ManifestAdapter.create_table": {
            "name": "create_table",
            "location": 458,
            "return": [],
            "arguments": {}
        },
        "ManifestAdapter.sample_model": {
            "name": "sample_model",
            "location": 463,
            "return": [
                "Manifest"
            ],
            "arguments": {
                "name": []
            }
        },
        "ManifestAdapter.model_to_model_sql": {
            "name": "model_to_model_sql",
            "location": 478,
            "return": [],
            "arguments": {
                "model": [
                    "Manifest"
                ]
            }
        },
        "ManifestAdapter.sample_model_sql": {
            "name": "sample_model_sql",
            "location": 505,
            "return": [
                "ManifestSQL"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ManifestAdapter.model_sql_to_model": {
            "name": "model_sql_to_model",
            "location": 510,
            "return": [
                "Manifest"
            ],
            "arguments": {
                "model_sql": [
                    "ManifestSQL"
                ]
            }
        },
        "ManifestAdapter.save": {
            "name": "save",
            "location": 528,
            "return": [
                "ManifestSQL"
            ],
            "arguments": {
                "model": [
                    "Manifest"
                ]
            }
        },
        "ManifestAdapter.delete_all": {
            "name": "delete_all",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ManifestAdapter.delete": {
            "name": "delete",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "ManifestAdapter.get_all": {
            "name": "get_all",
            "location": 569,
            "return": [
                "[Manifest]"
            ],
            "arguments": {}
        },
        "ManifestAdapter.find_by_id_name": {
            "name": "find_by_id_name",
            "location": 575,
            "return": [
                "(ManifestSQL or None)"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "ManifestAdapter.exists_in_db": {
            "name": "exists_in_db",
            "location": 583,
            "return": [
                "bool"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "PlanSQL.manifests": {
            "name": "manifests",
            "location": 607,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlanSQL.services": {
            "name": "services",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlanSQL.__init__": {
            "name": "__init__",
            "location": 614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlanSQL.delete_all": {
            "name": "delete_all",
            "location": 619,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PlanSQL.create_table": {
            "name": "create_table",
            "location": 637,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PlanSQL.table_exists": {
            "name": "table_exists",
            "location": 655,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PlanAdapter.create_table": {
            "name": "create_table",
            "location": 661,
            "return": [],
            "arguments": {}
        },
        "PlanAdapter.sample_model": {
            "name": "sample_model",
            "location": 666,
            "return": [
                "Plan"
            ],
            "arguments": {
                "name": []
            }
        },
        "PlanAdapter.sample_model_sql": {
            "name": "sample_model_sql",
            "location": 680,
            "return": [
                "PlanSQL"
            ],
            "arguments": {
                "cls": []
            }
        },
        "PlanAdapter.model_sql_to_model": {
            "name": "model_sql_to_model",
            "location": 685,
            "return": [
                "Plan"
            ],
            "arguments": {
                "model_sql": [
                    "PlanSQL"
                ]
            }
        },
        "PlanAdapter.model_to_model_sql": {
            "name": "model_to_model_sql",
            "location": 699,
            "return": [],
            "arguments": {
                "model": [
                    "Plan"
                ]
            }
        },
        "PlanAdapter.save": {
            "name": "save",
            "location": 713,
            "return": [
                "PlanSQL"
            ],
            "arguments": {
                "model": [
                    "Plan"
                ]
            }
        },
        "PlanAdapter.delete_all": {
            "name": "delete_all",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PlanAdapter.delete": {
            "name": "delete",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "PlanAdapter.get_all": {
            "name": "get_all",
            "location": 751,
            "return": [
                "[Plan]"
            ],
            "arguments": {}
        },
        "PlanAdapter.find_by_id_name": {
            "name": "find_by_id_name",
            "location": 757,
            "return": [
                "(PlanSQL or None)"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "PlanAdapter.exists_in_db": {
            "name": "exists_in_db",
            "location": 765,
            "return": [
                "bool"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "PlanAdapter.plans_sql_from_service": {
            "name": "plans_sql_from_service",
            "location": 773,
            "return": [],
            "arguments": {
                "service": [
                    "ServiceType"
                ]
            }
        },
        "PlanAdapter.plans_from_service_sql": {
            "name": "plans_from_service_sql",
            "location": 777,
            "return": [],
            "arguments": {
                "service_sql": []
            }
        },
        "PlanMetadataAdapter.to_blob": {
            "name": "to_blob",
            "location": 783,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "model": [
                    "PlanMetadata"
                ]
            }
        },
        "PlanMetadataAdapter.from_blob": {
            "name": "from_blob",
            "location": 805,
            "return": [
                "(PlanMetadata or None)"
            ],
            "arguments": {
                "cls": [],
                "blob": []
            }
        },
        "ServiceTypeSQL.manifests": {
            "name": "manifests",
            "location": 828,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceTypeSQL.instances": {
            "name": "instances",
            "location": 832,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceTypeSQL.plans": {
            "name": "plans",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceTypeSQL.__init__": {
            "name": "__init__",
            "location": 839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceTypeSQL.delete_all": {
            "name": "delete_all",
            "location": 844,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ServiceTypeSQL.create_table": {
            "name": "create_table",
            "location": 849,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ServiceTypeSQL.table_exists": {
            "name": "table_exists",
            "location": 871,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PlanServiceTypeSQL.create_table": {
            "name": "create_table",
            "location": 879,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PlanServiceTypeSQL.table_exists": {
            "name": "table_exists",
            "location": 890,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PlanServiceTypeSQL.delete_all": {
            "name": "delete_all",
            "location": 894,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PlanServiceTypeAdapter.create_table": {
            "name": "create_table",
            "location": 901,
            "return": [],
            "arguments": {}
        },
        "PlanServiceTypeAdapter.delete_all": {
            "name": "delete_all",
            "location": 906,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ServiceTypeAdapter.create_table": {
            "name": "create_table",
            "location": 924,
            "return": [],
            "arguments": {}
        },
        "ServiceTypeAdapter.sample_model": {
            "name": "sample_model",
            "location": 929,
            "return": [
                "ServiceType"
            ],
            "arguments": {
                "name": []
            }
        },
        "ServiceTypeAdapter.sample_model_sql": {
            "name": "sample_model_sql",
            "location": 953,
            "return": [
                "tuple"
            ],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "ServiceTypeAdapter.model_sql_to_model": {
            "name": "model_sql_to_model",
            "location": 958,
            "return": [
                "ServiceType"
            ],
            "arguments": {
                "model_sql": [
                    "ServiceTypeSQL"
                ]
            }
        },
        "ServiceTypeAdapter.model_to_model_sql": {
            "name": "model_to_model_sql",
            "location": 978,
            "return": [
                "tuple"
            ],
            "arguments": {
                "model": [
                    "ServiceType"
                ]
            }
        },
        "ServiceTypeAdapter.save": {
            "name": "save",
            "location": 998,
            "return": [
                "ServiceTypeSQL"
            ],
            "arguments": {
                "model": [
                    "ServiceType"
                ]
            }
        },
        "ServiceTypeAdapter.delete_all": {
            "name": "delete_all",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceTypeAdapter.delete": {
            "name": "delete",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "ServiceTypeAdapter.get_all": {
            "name": "get_all",
            "location": 1046,
            "return": [
                "[ServiceType]"
            ],
            "arguments": {}
        },
        "ServiceTypeAdapter.find_by_id_name": {
            "name": "find_by_id_name",
            "location": 1052,
            "return": [
                "(ServiceTypeSQL or None)"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "ServiceTypeAdapter.exists_in_db": {
            "name": "exists_in_db",
            "location": 1060,
            "return": [
                "bool"
            ],
            "arguments": {
                "id_name": [
                    "str"
                ]
            }
        },
        "DashboardClientAdapter.to_blob": {
            "name": "to_blob",
            "location": 1070,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "model": [
                    "DashboardClient"
                ]
            }
        },
        "DashboardClientAdapter.from_blob": {
            "name": "from_blob",
            "location": 1081,
            "return": [
                "(DashboardClient or None)"
            ],
            "arguments": {
                "cls": [],
                "blob": []
            }
        },
        "ServiceMetadataAdapter.to_blob": {
            "name": "to_blob",
            "location": 1090,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "model": [
                    "ServiceMetadata"
                ]
            }
        },
        "ServiceMetadataAdapter.from_blob": {
            "name": "from_blob",
            "location": 1105,
            "return": [
                "(ServiceMetadata or None)"
            ],
            "arguments": {
                "cls": [],
                "blob": []
            }
        },
        "Helper.to_blob": {
            "name": "to_blob",
            "location": 1146,
            "return": [
                "str"
            ],
            "arguments": {
                "model": []
            }
        },
        "Helper.from_blob": {
            "name": "from_blob",
            "location": 1150,
            "return": [
                "dict"
            ],
            "arguments": {
                "blob": []
            }
        }
    },
    "elastest-service-manager-master/src/adapters/store.py": {
        "Store.add_service": {
            "name": "add_service",
            "location": 51,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "ServiceType"
                ]
            }
        },
        "Store.get_service": {
            "name": "get_service",
            "location": 54,
            "return": [
                "List[ServiceType]"
            ],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "Store.delete_service": {
            "name": "delete_service",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "Store.add_service_instance": {
            "name": "add_service_instance",
            "location": 60,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "service_instance": [
                    "ServiceInstance"
                ]
            }
        },
        "Store.get_service_instance": {
            "name": "get_service_instance",
            "location": 63,
            "return": [
                "List[ServiceInstance]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "Store.delete_service_instance": {
            "name": "delete_service_instance",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_instance_id": [
                    "str"
                ]
            }
        },
        "Store.add_manifest": {
            "name": "add_manifest",
            "location": 69,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "Manifest"
                ]
            }
        },
        "Store.get_manifest": {
            "name": "get_manifest",
            "location": 72,
            "return": [
                "List[Manifest]"
            ],
            "arguments": {
                "self": [],
                "manifest_id": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ]
            }
        },
        "Store.delete_manifest": {
            "name": "delete_manifest",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manifest_id": [
                    "str"
                ]
            }
        },
        "Store.add_last_operation": {
            "name": "add_last_operation",
            "location": 78,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "last_operation": [
                    "LastOperation"
                ]
            }
        },
        "Store.delete_last_operation": {
            "name": "delete_last_operation",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "Store.get_last_operation": {
            "name": "get_last_operation",
            "location": 84,
            "return": [
                "List[LastOperation]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "Store.is_ok": {
            "name": "is_ok",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLStore.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLStore.get_connection": {
            "name": "get_connection",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "SQLStore.set_up": {
            "name": "set_up",
            "location": 121,
            "return": [],
            "arguments": {
                "wait_time": []
            }
        },
        "SQLStore.get_service": {
            "name": "get_service",
            "location": 146,
            "return": [
                "List[ServiceType]"
            ],
            "arguments": {
                "service_id": [
                    "str"
                ]
            }
        },
        "SQLStore.add_service": {
            "name": "add_service",
            "location": 158,
            "return": [
                "tuple"
            ],
            "arguments": {
                "service": [
                    "ServiceType"
                ]
            }
        },
        "SQLStore.delete_service": {
            "name": "delete_service",
            "location": 172,
            "return": [
                "tuple"
            ],
            "arguments": {
                "service_id": [
                    "str"
                ]
            }
        },
        "SQLStore.get_manifest": {
            "name": "get_manifest",
            "location": 190,
            "return": [
                "List[Manifest]"
            ],
            "arguments": {
                "manifest_id": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ]
            }
        },
        "SQLStore.add_manifest": {
            "name": "add_manifest",
            "location": 216,
            "return": [
                "tuple"
            ],
            "arguments": {
                "manifest": []
            }
        },
        "SQLStore.delete_manifest": {
            "name": "delete_manifest",
            "location": 233,
            "return": [],
            "arguments": {
                "manifest_id": [
                    "str"
                ]
            }
        },
        "SQLStore.get_service_instance": {
            "name": "get_service_instance",
            "location": 245,
            "return": [
                "List[ServiceInstance]"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ]
            }
        },
        "SQLStore.add_service_instance": {
            "name": "add_service_instance",
            "location": 258,
            "return": [
                "tuple"
            ],
            "arguments": {
                "instance": [
                    "ServiceInstance"
                ]
            }
        },
        "SQLStore.delete_service_instance": {
            "name": "delete_service_instance",
            "location": 282,
            "return": [],
            "arguments": {
                "instance_id": [
                    "str"
                ]
            }
        },
        "SQLStore.delete_last_operation": {
            "name": "delete_last_operation",
            "location": 336,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "SQLStore.get_last_operation": {
            "name": "get_last_operation",
            "location": 302,
            "return": [
                "List[ServiceInstance]"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ]
            }
        },
        "SQLStore.add_last_operation": {
            "name": "add_last_operation",
            "location": 315,
            "return": [
                "tuple"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ],
                "last_operation": [
                    "LastOperation"
                ]
            }
        },
        "SQLStore.is_ok": {
            "name": "is_ok",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoDBStore.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": []
            }
        },
        "MongoDBStore.get_service": {
            "name": "get_service",
            "location": 372,
            "return": [
                "List[ServiceType]"
            ],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.add_service": {
            "name": "add_service",
            "location": 393,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "ServiceType"
                ]
            }
        },
        "MongoDBStore.delete_service": {
            "name": "delete_service",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.add_manifest": {
            "name": "add_manifest",
            "location": 410,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "Manifest"
                ]
            }
        },
        "MongoDBStore.get_manifest": {
            "name": "get_manifest",
            "location": 424,
            "return": [
                "List[Manifest]"
            ],
            "arguments": {
                "self": [],
                "manifest_id": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.delete_manifest": {
            "name": "delete_manifest",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manifest_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.get_service_instance": {
            "name": "get_service_instance",
            "location": 467,
            "return": [
                "List[ServiceInstance]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.add_service_instance": {
            "name": "add_service_instance",
            "location": 488,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "service_instance": [
                    "ServiceInstance"
                ]
            }
        },
        "MongoDBStore._sanitise_attrs": {
            "name": "_sanitise_attrs",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "service_instance": []
            }
        },
        "MongoDBStore.delete_service_instance": {
            "name": "delete_service_instance",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_instance_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.add_last_operation": {
            "name": "add_last_operation",
            "location": 527,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "last_operation": [
                    "LastOperation"
                ]
            }
        },
        "MongoDBStore.get_last_operation": {
            "name": "get_last_operation",
            "location": 533,
            "return": [
                "List[LastOperation]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.delete_last_operation": {
            "name": "delete_last_operation",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "MongoDBStore.is_ok": {
            "name": "is_ok",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InMemoryStore.__init__": {
            "name": "__init__",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryStore.get_service": {
            "name": "get_service",
            "location": 584,
            "return": [
                "List[ServiceType]"
            ],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.add_service": {
            "name": "add_service",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "ServiceType"
                ]
            }
        },
        "InMemoryStore.delete_service": {
            "name": "delete_service",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.valid_manifest_type": {
            "name": "valid_manifest_type",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "type": []
            }
        },
        "InMemoryStore.add_manifest": {
            "name": "add_manifest",
            "location": 628,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "Manifest"
                ]
            }
        },
        "InMemoryStore.get_manifest": {
            "name": "get_manifest",
            "location": 651,
            "return": [
                "List[Manifest]"
            ],
            "arguments": {
                "self": [],
                "manifest_id": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.delete_manifest": {
            "name": "delete_manifest",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manifest_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.add_service_instance": {
            "name": "add_service_instance",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_instance": [
                    "ServiceInstance"
                ]
            }
        },
        "InMemoryStore.get_service_instance": {
            "name": "get_service_instance",
            "location": 690,
            "return": [
                "List[ServiceInstance]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.delete_service_instance": {
            "name": "delete_service_instance",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_instance_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.add_last_operation": {
            "name": "add_last_operation",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ],
                "last_operation": [
                    "LastOperation"
                ]
            }
        },
        "InMemoryStore.get_last_operation": {
            "name": "get_last_operation",
            "location": 731,
            "return": [
                "List[LastOperation]"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.delete_last_operation": {
            "name": "delete_last_operation",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str"
                ]
            }
        },
        "InMemoryStore.is_ok": {
            "name": "is_ok",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/src/adapters/__init__.py": {},
    "elastest-service-manager-master/src/esm/encoder.py": {
        "JSONEncoder.default": {
            "name": "default",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        }
    },
    "elastest-service-manager-master/src/esm/util.py": {
        "_deserialize": {
            "name": "_deserialize",
            "location": 14,
            "return": [],
            "arguments": {
                "data": [],
                "klass": []
            }
        },
        "_deserialize_primitive": {
            "name": "_deserialize_primitive",
            "location": 55,
            "return": [],
            "arguments": {
                "data": [],
                "klass": []
            }
        },
        "_deserialize_object": {
            "name": "_deserialize_object",
            "location": 74,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "deserialize_date": {
            "name": "deserialize_date",
            "location": 83,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "deserialize_datetime": {
            "name": "deserialize_datetime",
            "location": 99,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "deserialize_model": {
            "name": "deserialize_model",
            "location": 117,
            "return": [],
            "arguments": {
                "data": [],
                "klass": []
            }
        },
        "_deserialize_list": {
            "name": "_deserialize_list",
            "location": 142,
            "return": [],
            "arguments": {
                "data": [],
                "boxed_type": []
            }
        },
        "_deserialize_dict": {
            "name": "_deserialize_dict",
            "location": 158,
            "return": [],
            "arguments": {
                "data": [],
                "boxed_type": []
            }
        },
        "Singleton.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "decorated": []
            }
        },
        "Singleton.instance": {
            "name": "instance",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Singleton.__call__": {
            "name": "__call__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Singleton.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "inst": []
            }
        }
    },
    "elastest-service-manager-master/src/esm/__init__.py": {},
    "elastest-service-manager-master/src/esm/controllers/catalog_controller.py": {
        "catalog": {
            "name": "catalog",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "register_service": {
            "name": "register_service",
            "location": 80,
            "return": [],
            "arguments": {
                "service": []
            }
        },
        "delete_service_type": {
            "name": "delete_service_type",
            "location": 103,
            "return": [],
            "arguments": {
                "service_id": []
            }
        },
        "store_manifest": {
            "name": "store_manifest",
            "location": 123,
            "return": [],
            "arguments": {
                "manifest_id": [],
                "manifest": []
            }
        },
        "get_manifest": {
            "name": "get_manifest",
            "location": 155,
            "return": [],
            "arguments": {
                "manifest_id": []
            }
        },
        "list_manifests": {
            "name": "list_manifests",
            "location": 173,
            "return": [],
            "arguments": {}
        }
    },
    "elastest-service-manager-master/src/esm/controllers/service_instances_controller.py": {
        "create_service_instance": {
            "name": "create_service_instance",
            "location": 42,
            "return": [],
            "arguments": {
                "instance_id": [],
                "service": [],
                "accept_incomplete": []
            }
        },
        "deprovision_service_instance": {
            "name": "deprovision_service_instance",
            "location": 83,
            "return": [],
            "arguments": {
                "instance_id": [],
                "service_id": [],
                "plan_id": [],
                "accept_incomplete": []
            }
        },
        "instance_info": {
            "name": "instance_info",
            "location": 119,
            "return": [],
            "arguments": {
                "instance_id": []
            }
        },
        "all_instance_info": {
            "name": "all_instance_info",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "last_operation_status": {
            "name": "last_operation_status",
            "location": 159,
            "return": [],
            "arguments": {
                "instance_id": [],
                "service_id": [],
                "plan_id": [],
                "operation": []
            }
        },
        "service_bind": {
            "name": "service_bind",
            "location": 193,
            "return": [],
            "arguments": {
                "instance_id": [],
                "binding_id": [],
                "binding": []
            }
        },
        "service_unbind": {
            "name": "service_unbind",
            "location": 228,
            "return": [],
            "arguments": {
                "instance_id": [],
                "binding_id": [],
                "service_id": [],
                "plan_id": []
            }
        },
        "update_service_instance": {
            "name": "update_service_instance",
            "location": 263,
            "return": [],
            "arguments": {
                "instance_id": [],
                "plan": [],
                "accept_incomplete": []
            }
        }
    },
    "elastest-service-manager-master/src/esm/controllers/tasks.py": {
        "CreateInstance.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "CreateInstance.run": {
            "name": "run",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeleteInstance.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "DeleteInstance.run": {
            "name": "run",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetrieveInstance.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": [],
                "state": []
            }
        },
        "RetrieveInstance.run": {
            "name": "run",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetrieveInstance._get_instance": {
            "name": "_get_instance",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "srv_inst": []
            }
        },
        "RetrieveAllInstances.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "RetrieveAllInstances.run": {
            "name": "run",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetrieveInstanceLastOp.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "RetrieveInstanceLastOp.run": {
            "name": "run",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BindInstance.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "BindInstance.run": {
            "name": "run",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnbindInstance.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "UnbindInstance.run": {
            "name": "run",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateInstance.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": []
            }
        },
        "UpdateInstance.run": {
            "name": "run",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeasureInstance.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "context": [],
                "state": []
            }
        },
        "MeasureInstance.run": {
            "name": "run",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/src/esm/controllers/__init__.py": {
        "_version_ok": {
            "name": "_version_ok",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "elastest-service-manager-master/src/esm/models/base_model_.py": {
        "Model.from_dict": {
            "name": "from_dict",
            "location": 17,
            "return": [
                "T@@"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "dikt": []
            }
        },
        "Model.to_dict": {
            "name": "to_dict",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.to_str": {
            "name": "to_str",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Model.__ne__": {
            "name": "__ne__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/binding_request.py": {
        "BindingRequest.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "app_guid": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ],
                "service_id": [
                    "str"
                ],
                "parameters": [
                    "object"
                ],
                "bind_resource": [
                    "BindResource"
                ]
            }
        },
        "BindingRequest.from_dict": {
            "name": "from_dict",
            "location": 54,
            "return": [
                "'BindingRequest'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "BindingRequest.app_guid": {
            "name": "app_guid",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "app_guid": [
                    "str"
                ]
            }
        },
        "BindingRequest.plan_id": {
            "name": "plan_id",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "plan_id": [
                    "str"
                ]
            }
        },
        "BindingRequest.service_id": {
            "name": "service_id",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "BindingRequest.parameters": {
            "name": "parameters",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": [
                    "object"
                ]
            }
        },
        "BindingRequest.bind_resource": {
            "name": "bind_resource",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "bind_resource": [
                    "BindResource"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/binding_response.py": {
        "BindingResponse.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "credentials": [
                    "object"
                ],
                "syslog_drain_url": [
                    "str"
                ],
                "route_service_url": [
                    "str"
                ],
                "volume_mounts": [
                    "List[object]"
                ]
            }
        },
        "BindingResponse.from_dict": {
            "name": "from_dict",
            "location": 49,
            "return": [
                "'BindingResponse'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "BindingResponse.credentials": {
            "name": "credentials",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "credentials": [
                    "object"
                ]
            }
        },
        "BindingResponse.syslog_drain_url": {
            "name": "syslog_drain_url",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "syslog_drain_url": [
                    "str"
                ]
            }
        },
        "BindingResponse.route_service_url": {
            "name": "route_service_url",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "route_service_url": [
                    "str"
                ]
            }
        },
        "BindingResponse.volume_mounts": {
            "name": "volume_mounts",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "volume_mounts": [
                    "List[object]"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/bind_resource.py": {
        "BindResource.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "app_guid": [
                    "str"
                ],
                "route": [
                    "str"
                ]
            }
        },
        "BindResource.from_dict": {
            "name": "from_dict",
            "location": 38,
            "return": [
                "'BindResource'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "BindResource.app_guid": {
            "name": "app_guid",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "app_guid": [
                    "str"
                ]
            }
        },
        "BindResource.route": {
            "name": "route",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "route": [
                    "str"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/catalog.py": {
        "Catalog.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "services": [
                    "List[ServiceType]"
                ]
            }
        },
        "Catalog.from_dict": {
            "name": "from_dict",
            "location": 35,
            "return": [
                "'Catalog'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "Catalog.services": {
            "name": "services",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "services": [
                    "List[ServiceType]"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/dashboard_client.py": {
        "DashboardClient.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "secret": [
                    "str"
                ],
                "redirect_uri": [
                    "str"
                ]
            }
        },
        "DashboardClient.from_dict": {
            "name": "from_dict",
            "location": 43,
            "return": [
                "'DashboardClient'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "DashboardClient.id": {
            "name": "id",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "DashboardClient.secret": {
            "name": "secret",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "secret": [
                    "str"
                ]
            }
        },
        "DashboardClient.redirect_uri": {
            "name": "redirect_uri",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "redirect_uri": [
                    "str"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/empty.py": {
        "Empty.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Empty.from_dict": {
            "name": "from_dict",
            "location": 30,
            "return": [
                "'Empty'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/error.py": {
        "Error.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ]
            }
        },
        "Error.from_dict": {
            "name": "from_dict",
            "location": 33,
            "return": [
                "'Error'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "Error.description": {
            "name": "description",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/last_operation.py": {
        "LastOperation.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "LastOperation.from_dict": {
            "name": "from_dict",
            "location": 38,
            "return": [
                "'LastOperation'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "LastOperation.state": {
            "name": "state",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "LastOperation.description": {
            "name": "description",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/manifest.py": {
        "Manifest.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ],
                "service_id": [
                    "str"
                ],
                "manifest_type": [
                    "str"
                ],
                "manifest_content": [
                    "str"
                ],
                "endpoints": [
                    "object"
                ],
                "config": [
                    "object"
                ]
            }
        },
        "Manifest.from_dict": {
            "name": "from_dict",
            "location": 63,
            "return": [
                "'Manifest'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "Manifest.id": {
            "name": "id",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Manifest.plan_id": {
            "name": "plan_id",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "plan_id": [
                    "str"
                ]
            }
        },
        "Manifest.service_id": {
            "name": "service_id",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "Manifest.manifest_type": {
            "name": "manifest_type",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "manifest_type": [
                    "str"
                ]
            }
        },
        "Manifest.manifest_content": {
            "name": "manifest_content",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "manifest_content": [
                    "str"
                ]
            }
        },
        "Manifest.endpoints": {
            "name": "endpoints",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "endpoints": [
                    "object"
                ]
            }
        },
        "Manifest.config": {
            "name": "config",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "object"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/plan.py": {
        "Plan.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "metadata": [
                    "PlanMetadata"
                ],
                "free": [
                    "bool"
                ],
                "bindable": [
                    "bool"
                ]
            }
        },
        "Plan.from_dict": {
            "name": "from_dict",
            "location": 58,
            "return": [
                "'Plan'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "Plan.id": {
            "name": "id",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Plan.name": {
            "name": "name",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Plan.description": {
            "name": "description",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ]
            }
        },
        "Plan.metadata": {
            "name": "metadata",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": [
                    "PlanMetadata"
                ]
            }
        },
        "Plan.free": {
            "name": "free",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "free": [
                    "bool"
                ]
            }
        },
        "Plan.bindable": {
            "name": "bindable",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "bindable": [
                    "bool"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/plan_metadata.py": {
        "PlanMetadata.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "bullets": [
                    "str"
                ],
                "costs": [
                    "object"
                ],
                "display_name": [
                    "str"
                ],
                "extras": [
                    "object"
                ]
            }
        },
        "PlanMetadata.from_dict": {
            "name": "from_dict",
            "location": 49,
            "return": [
                "'PlanMetadata'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "PlanMetadata.bullets": {
            "name": "bullets",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "bullets": [
                    "str"
                ]
            }
        },
        "PlanMetadata.costs": {
            "name": "costs",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "costs": [
                    "object"
                ]
            }
        },
        "PlanMetadata.display_name": {
            "name": "display_name",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "display_name": [
                    "str"
                ]
            }
        },
        "PlanMetadata.extras": {
            "name": "extras",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "extras": [
                    "object"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/previous_values.py": {
        "PreviousValues.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "plan_id": [
                    "str"
                ],
                "service_id": [
                    "str"
                ],
                "organization_id": [
                    "str"
                ],
                "space_id": [
                    "str"
                ]
            }
        },
        "PreviousValues.from_dict": {
            "name": "from_dict",
            "location": 48,
            "return": [
                "'PreviousValues'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "PreviousValues.plan_id": {
            "name": "plan_id",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "plan_id": [
                    "str"
                ]
            }
        },
        "PreviousValues.service_id": {
            "name": "service_id",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "PreviousValues.organization_id": {
            "name": "organization_id",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "organization_id": [
                    "str"
                ]
            }
        },
        "PreviousValues.space_id": {
            "name": "space_id",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "space_id": [
                    "str"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/service_instance.py": {
        "ServiceInstance.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "service_type": [
                    "ServiceType"
                ],
                "state": [
                    "LastOperation"
                ],
                "context": [
                    "object"
                ]
            }
        },
        "ServiceInstance.from_dict": {
            "name": "from_dict",
            "location": 45,
            "return": [
                "'ServiceInstance'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "ServiceInstance.service_type": {
            "name": "service_type",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "service_type": [
                    "ServiceType"
                ]
            }
        },
        "ServiceInstance.state": {
            "name": "state",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "LastOperation"
                ]
            }
        },
        "ServiceInstance.context": {
            "name": "context",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "object"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/service_metadata.py": {
        "ServiceMetadata.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "display_name": [
                    "str"
                ],
                "image_url": [
                    "str"
                ],
                "long_description": [
                    "str"
                ],
                "provider_display_name": [
                    "str"
                ],
                "documentation_url": [
                    "str"
                ],
                "support_url": [
                    "str"
                ],
                "extras": [
                    "object"
                ]
            }
        },
        "ServiceMetadata.from_dict": {
            "name": "from_dict",
            "location": 64,
            "return": [
                "'ServiceMetadata'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "ServiceMetadata.display_name": {
            "name": "display_name",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "display_name": [
                    "str"
                ]
            }
        },
        "ServiceMetadata.image_url": {
            "name": "image_url",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "image_url": [
                    "str"
                ]
            }
        },
        "ServiceMetadata.long_description": {
            "name": "long_description",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "long_description": [
                    "str"
                ]
            }
        },
        "ServiceMetadata.provider_display_name": {
            "name": "provider_display_name",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "provider_display_name": [
                    "str"
                ]
            }
        },
        "ServiceMetadata.documentation_url": {
            "name": "documentation_url",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "documentation_url": [
                    "str"
                ]
            }
        },
        "ServiceMetadata.support_url": {
            "name": "support_url",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "support_url": [
                    "str"
                ]
            }
        },
        "ServiceMetadata.extras": {
            "name": "extras",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "extras": [
                    "object"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/service_request.py": {
        "ServiceRequest.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ],
                "context": [
                    "object"
                ],
                "organization_guid": [
                    "str"
                ],
                "space_guid": [
                    "str"
                ],
                "parameters": [
                    "object"
                ]
            }
        },
        "ServiceRequest.from_dict": {
            "name": "from_dict",
            "location": 59,
            "return": [
                "'ServiceRequest'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "ServiceRequest.service_id": {
            "name": "service_id",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "ServiceRequest.plan_id": {
            "name": "plan_id",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "plan_id": [
                    "str"
                ]
            }
        },
        "ServiceRequest.context": {
            "name": "context",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "object"
                ]
            }
        },
        "ServiceRequest.organization_guid": {
            "name": "organization_guid",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "organization_guid": [
                    "str"
                ]
            }
        },
        "ServiceRequest.space_guid": {
            "name": "space_guid",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "space_guid": [
                    "str"
                ]
            }
        },
        "ServiceRequest.parameters": {
            "name": "parameters",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": [
                    "object"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/service_response.py": {
        "ServiceResponse.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "dashboard_url": [
                    "str"
                ],
                "operation": [
                    "str"
                ]
            }
        },
        "ServiceResponse.from_dict": {
            "name": "from_dict",
            "location": 38,
            "return": [
                "'ServiceResponse'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "ServiceResponse.dashboard_url": {
            "name": "dashboard_url",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "dashboard_url": [
                    "str"
                ]
            }
        },
        "ServiceResponse.operation": {
            "name": "operation",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/service_type.py": {
        "ServiceType.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "short_name": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "bindable": [
                    "bool"
                ],
                "tags": [
                    "List[str]"
                ],
                "metadata": [
                    "ServiceMetadata"
                ],
                "requires": [
                    "List[str]"
                ],
                "plan_updateable": [
                    "bool"
                ],
                "plans": [
                    "List[Plan]"
                ],
                "dashboard_client": [
                    "DashboardClient"
                ]
            }
        },
        "ServiceType.from_dict": {
            "name": "from_dict",
            "location": 86,
            "return": [
                "'ServiceType'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "ServiceType.id": {
            "name": "id",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "ServiceType.name": {
            "name": "name",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ServiceType.short_name": {
            "name": "short_name",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "short_name": [
                    "str"
                ]
            }
        },
        "ServiceType.description": {
            "name": "description",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ]
            }
        },
        "ServiceType.bindable": {
            "name": "bindable",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "bindable": [
                    "bool"
                ]
            }
        },
        "ServiceType.tags": {
            "name": "tags",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "tags": [
                    "List[str]"
                ]
            }
        },
        "ServiceType.metadata": {
            "name": "metadata",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": [
                    "ServiceMetadata"
                ]
            }
        },
        "ServiceType.requires": {
            "name": "requires",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "requires": [
                    "List[str]"
                ]
            }
        },
        "ServiceType.plan_updateable": {
            "name": "plan_updateable",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "plan_updateable": [
                    "bool"
                ]
            }
        },
        "ServiceType.plans": {
            "name": "plans",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "plans": [
                    "List[Plan]"
                ]
            }
        },
        "ServiceType.dashboard_client": {
            "name": "dashboard_client",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "dashboard_client": [
                    "DashboardClient"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/update_operation_response.py": {
        "UpdateOperationResponse.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ]
            }
        },
        "UpdateOperationResponse.from_dict": {
            "name": "from_dict",
            "location": 33,
            "return": [
                "'UpdateOperationResponse'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "UpdateOperationResponse.operation": {
            "name": "operation",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/update_request.py": {
        "UpdateRequest.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "object"
                ],
                "service_id": [
                    "str"
                ],
                "plan_id": [
                    "str"
                ],
                "parameters": [
                    "object"
                ],
                "previous_values": [
                    "PreviousValues"
                ]
            }
        },
        "UpdateRequest.from_dict": {
            "name": "from_dict",
            "location": 54,
            "return": [
                "'UpdateRequest'"
            ],
            "arguments": {
                "cls": [],
                "dikt": []
            }
        },
        "UpdateRequest.context": {
            "name": "context",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "object"
                ]
            }
        },
        "UpdateRequest.service_id": {
            "name": "service_id",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "service_id": [
                    "str"
                ]
            }
        },
        "UpdateRequest.plan_id": {
            "name": "plan_id",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "plan_id": [
                    "str"
                ]
            }
        },
        "UpdateRequest.parameters": {
            "name": "parameters",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": [
                    "object"
                ]
            }
        },
        "UpdateRequest.previous_values": {
            "name": "previous_values",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "previous_values": [
                    "PreviousValues"
                ]
            }
        }
    },
    "elastest-service-manager-master/src/esm/models/__init__.py": {},
    "elastest-service-manager-master/tests/test_catalog_controller.py": {
        "TestCatalogController.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.tearDown": {
            "name": "tearDown",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_catalog": {
            "name": "test_catalog",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_request_no_version_header": {
            "name": "test_request_no_version_header",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_register_service": {
            "name": "test_register_service",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_double_svc_registration_deny": {
            "name": "test_double_svc_registration_deny",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_delete_service_type": {
            "name": "test_delete_service_type",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_delete_missing_service": {
            "name": "test_delete_missing_service",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController._send_svc_reg": {
            "name": "_send_svc_reg",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_store_manifest": {
            "name": "test_store_manifest",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_update_manifest": {
            "name": "test_update_manifest",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_get_manifest": {
            "name": "test_get_manifest",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCatalogController.test_list_manifests": {
            "name": "test_list_manifests",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_docker_backend.py": {
        "TestDockerCompose.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerCompose.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerCompose.test_docker_info": {
            "name": "test_docker_info",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerCompose.test_docker_delete_cmd": {
            "name": "test_docker_delete_cmd",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerComposeWithoutSetup.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerComposeWithoutSetup.tearDown": {
            "name": "tearDown",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerComposeWithoutSetup.test_docker_create_cmd": {
            "name": "test_docker_create_cmd",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerComposeWithoutSetup.test_docker_create_cmd_with_params": {
            "name": "test_docker_create_cmd_with_params",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerBasicBackend.setUp": {
            "name": "setUp",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerBasicBackend.tearDown": {
            "name": "tearDown",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerBasicBackend.test_docker_create": {
            "name": "test_docker_create",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerBasicBackend.test_docker_info": {
            "name": "test_docker_info",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDockerBasicBackend.test_docker_delete": {
            "name": "test_docker_delete",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_dummy_backend.py": {
        "TestEPMBackend.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackend.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackend.test_info": {
            "name": "test_info",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackend.test_delete_cmd": {
            "name": "test_delete_cmd",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackendWithoutSetup.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackendWithoutSetup.tearDown": {
            "name": "tearDown",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackendWithoutSetup.test_create": {
            "name": "test_create",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_epm_backend.py": {
        "TestEPMBackend.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackend.tearDown": {
            "name": "tearDown",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackend.test_info": {
            "name": "test_info",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackend.test_delete_cmd": {
            "name": "test_delete_cmd",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackendWithoutSetup.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackendWithoutSetup.tearDown": {
            "name": "tearDown",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEPMBackendWithoutSetup.test_create": {
            "name": "test_create",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_k8s_backend.py": {
        "TestK8SBackend.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.test_end2end_with_create_twice": {
            "name": "test_end2end_with_create_twice",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.test_create_with_null_manifest": {
            "name": "test_create_with_null_manifest",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.test_create_with_no_manifest": {
            "name": "test_create_with_no_manifest",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.test_create_with_invalid_manifest": {
            "name": "test_create_with_invalid_manifest",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.test_delete_non_existent": {
            "name": "test_delete_non_existent",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.test_docker_info": {
            "name": "test_docker_info",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackend.test_empty_delete": {
            "name": "test_empty_delete",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackendOffline.test_create_not_responding": {
            "name": "test_create_not_responding",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestK8SBackendOffline.test_delete_not_responding": {
            "name": "test_delete_not_responding",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_measurer.py": {
        "TestCaseMeasurer.test_endpoint_never_alive": {
            "name": "test_endpoint_never_alive",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_endpoint": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_sentinel_integration.py": {
        "TestCaseSentinelIntegration.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "methodName": []
            }
        },
        "TestCaseSentinelIntegration.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseSentinelIntegration.test_send_string_to_sentinel": {
            "name": "test_send_string_to_sentinel",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseSentinelIntegration.test_send_dict_to_sentinel": {
            "name": "test_send_dict_to_sentinel",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseSentinelIntegration.test_log_save_in_sentinel": {
            "name": "test_log_save_in_sentinel",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_service_instances_controller.py": {
        "TestServiceInstancesController.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController._assert200": {
            "name": "_assert200",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "TestServiceInstancesController.tearDown": {
            "name": "tearDown",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController._send_service_request": {
            "name": "_send_service_request",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "headers": [],
                "params": []
            }
        },
        "TestServiceInstancesController._delete_service_instance": {
            "name": "_delete_service_instance",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_request_no_version_header": {
            "name": "test_request_no_version_header",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_create_service_instance": {
            "name": "test_create_service_instance",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_create_instance_with_same_id": {
            "name": "test_create_instance_with_same_id",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_create_instance_with_nonexistant_plan": {
            "name": "test_create_instance_with_nonexistant_plan",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_create_service_instance_with_params": {
            "name": "test_create_service_instance_with_params",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_deprovision_service_instance": {
            "name": "test_deprovision_service_instance",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_all_instance_info": {
            "name": "test_all_instance_info",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_instance_info": {
            "name": "test_instance_info",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_last_operation_status": {
            "name": "test_last_operation_status",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_service_bind_unbind": {
            "name": "test_service_bind_unbind",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_update_service_instance": {
            "name": "test_update_service_instance",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestServiceInstancesController.test_create_service_instance_with_params._check_key": {
            "name": "_check_key",
            "location": 201,
            "return": [],
            "arguments": {
                "key_name": [],
                "info": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_sql_db.py": {
        "TestCaseManifestManifest.test_db_connect_successful": {
            "name": "test_db_connect_successful",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifestManifest.test_db_connect_not_successful": {
            "name": "test_db_connect_not_successful",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "mock_connection": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_sql_instance.py": {
        "TestCaseServiceInstance.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_instance_create_table": {
            "name": "test_instance_create_table",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_sample_model": {
            "name": "test_sample_model",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_get_instance_with_instance_id": {
            "name": "test_get_instance_with_instance_id",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_adapter_delete": {
            "name": "test_adapter_delete",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_adapter_save_to_update": {
            "name": "test_adapter_save_to_update",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_get_instance_with_id": {
            "name": "test_get_instance_with_id",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_get_instance_with_id_and_not_found": {
            "name": "test_get_instance_with_id_and_not_found",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "mock_exists_in_db": []
            }
        },
        "TestCaseServiceInstance.test_get_instance_with_id_as_none": {
            "name": "test_get_instance_with_id_as_none",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_instance_created": {
            "name": "test_instance_created",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_instance_deletion": {
            "name": "test_instance_deletion",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceInstance.test_add_instance_existing": {
            "name": "test_add_instance_existing",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "mock_exists": []
            }
        },
        "TestCaseServiceInstance.test_delete_instance_nonexistent": {
            "name": "test_delete_instance_nonexistent",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_sql_manifest.py": {
        "TestCaseManifest.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.tearDown": {
            "name": "tearDown",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_manifest_create_table": {
            "name": "test_manifest_create_table",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_sample_model_with_plans": {
            "name": "test_sample_model_with_plans",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_adapter_delete": {
            "name": "test_adapter_delete",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_adapter_save_to_update": {
            "name": "test_adapter_save_to_update",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_get_manifest_with_id": {
            "name": "test_get_manifest_with_id",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_get_manifest_with_manifest_id_and_plan_id": {
            "name": "test_get_manifest_with_manifest_id_and_plan_id",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_get_manifest_with_manifest_id": {
            "name": "test_get_manifest_with_manifest_id",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_get_manifest_with_id_and_not_found": {
            "name": "test_get_manifest_with_id_and_not_found",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "mock_exists_in_db": []
            }
        },
        "TestCaseManifest.test_manifest_created": {
            "name": "test_manifest_created",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_manifest_deletion": {
            "name": "test_manifest_deletion",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseManifest.test_add_manifest_existing": {
            "name": "test_add_manifest_existing",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "mock_exists": []
            }
        },
        "TestCaseManifest.test_delete_manifest_nonexistent": {
            "name": "test_delete_manifest_nonexistent",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_sql_plan.py": {
        "TestCasePlan.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCasePlan.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCasePlan.test_plan_create_table": {
            "name": "test_plan_create_table",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCasePlan.test_sample_model": {
            "name": "test_sample_model",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCasePlan.test_adapter_delete": {
            "name": "test_adapter_delete",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCasePlan.test_adapter_save_to_update": {
            "name": "test_adapter_save_to_update",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCasePlan.test_adapter_get_all": {
            "name": "test_adapter_get_all",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCasePlan.test_adapter_create_from_service": {
            "name": "test_adapter_create_from_service",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_sql_service_type.py": {
        "TestCaseServiceType.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_plan_service_type_create_table": {
            "name": "test_plan_service_type_create_table",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_service_type_create_table": {
            "name": "test_service_type_create_table",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_sample_model_with_plans": {
            "name": "test_sample_model_with_plans",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_adapter_delete": {
            "name": "test_adapter_delete",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_adapter_save_to_update": {
            "name": "test_adapter_save_to_update",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_get_service_with_id": {
            "name": "test_get_service_with_id",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_get_service_with_id_and_not_found": {
            "name": "test_get_service_with_id_and_not_found",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "mock_exists_in_db": []
            }
        },
        "TestCaseServiceType.test_get_service_with_id_as_none": {
            "name": "test_get_service_with_id_as_none",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_service_created": {
            "name": "test_service_created",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_service_deletion": {
            "name": "test_service_deletion",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_add_service_existing": {
            "name": "test_add_service_existing",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "mock_exists": []
            }
        },
        "TestCaseServiceType.test_delete_service_nonexistent": {
            "name": "test_delete_service_nonexistent",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseServiceType.test_delete_all": {
            "name": "test_delete_all",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/test_store_backends.py": {
        "TestInMemoryStore.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInMemoryStore.tearDown": {
            "name": "tearDown",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInMemoryStore.test_add": {
            "name": "test_add",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInMemoryStore.test_get": {
            "name": "test_get",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInMemoryStore.test_get_all": {
            "name": "test_get_all",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInMemoryStore.test_delete": {
            "name": "test_delete",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInMemoryStore.test_delete_all": {
            "name": "test_delete_all",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBStore.setUp": {
            "name": "setUp",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBStore.tearDown": {
            "name": "tearDown",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBStore.test_get": {
            "name": "test_get",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBStore.test_delete": {
            "name": "test_delete",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBStore.test_get_all": {
            "name": "test_get_all",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBStore.test_delete_all": {
            "name": "test_delete_all",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBStore.test_add": {
            "name": "test_add",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStore.setUp": {
            "name": "setUp",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStore.test_get": {
            "name": "test_get",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStore.test_delete": {
            "name": "test_delete",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStore.test_add": {
            "name": "test_add",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/__init__.py": {
        "BaseTestCase.create_app": {
            "name": "create_app",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elastest-service-manager-master/tests/e2e/e2e.py": {
        "create_svc": {
            "name": "create_svc",
            "location": 28,
            "return": [],
            "arguments": {
                "name": [],
                "svc_id": [],
                "plan_id": [],
                "delete": []
            }
        },
        "report_svc_instances": {
            "name": "report_svc_instances",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "create_svc_instances": {
            "name": "create_svc_instances",
            "location": 62,
            "return": [],
            "arguments": {
                "delete": []
            }
        },
        "validate_registrations": {
            "name": "validate_registrations",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "register_services": {
            "name": "register_services",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "run_me": {
            "name": "run_me",
            "location": 124,
            "return": [],
            "arguments": {
                "delete_services": []
            }
        }
    },
    "elastest-service-manager-master/tests/manifests/et_svc_manifest.py": {
        "run_me": {
            "name": "run_me",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "run_me.create_svc": {
            "name": "create_svc",
            "location": 61,
            "return": [],
            "arguments": {
                "name": [],
                "svc_id": [],
                "plan_id": [],
                "delete": []
            }
        }
    }
}
{
    "elib_config-master/setup.py": {
        "read_local_files": {
            "name": "read_local_files",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_local_files._read_single_file": {
            "name": "_read_single_file",
            "location": 46,
            "return": [],
            "arguments": {
                "file_path": []
            }
        }
    },
    "elib_config-master/elib_config/_exc.py": {},
    "elib_config-master/elib_config/_logging.py": {},
    "elib_config-master/elib_config/_setup.py": {
        "ELIBConfig.check": {
            "name": "check",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ELIBConfig.setup": {
            "name": "setup",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [],
                "app_version": [
                    "str"
                ],
                "app_name": [
                    "str"
                ],
                "config_file_path": [
                    "str"
                ],
                "config_sep_str": [
                    "str"
                ],
                "root_path": [
                    "typing.Optional[typing.List[str]]"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_types.py": {},
    "elib_config-master/elib_config/_utils.py": {
        "friendly_type_name": {
            "name": "friendly_type_name",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_type": [
                    "typing.Type"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_validate.py": {
        "validate_config": {
            "name": "validate_config",
            "location": 13,
            "return": [],
            "arguments": {
                "raise_": []
            }
        }
    },
    "elib_config-master/elib_config/__init__.py": {},
    "elib_config-master/elib_config/_file/_config_example.py": {
        "_nested_default_dict": {
            "name": "_nested_default_dict",
            "location": 21,
            "return": [
                "defaultdict"
            ],
            "arguments": {}
        },
        "_default_dict_to_dict": {
            "name": "_default_dict_to_dict",
            "location": 25,
            "return": [
                "dict"
            ],
            "arguments": {
                "source": []
            }
        },
        "_get_header": {
            "name": "_get_header",
            "location": 32,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {}
        },
        "_aggregate_config_values": {
            "name": "_aggregate_config_values",
            "location": 41,
            "return": [
                "dict"
            ],
            "arguments": {
                "config_values": [
                    "typing.List[ConfigValue]"
                ]
            }
        },
        "_add_config_values_to_toml_object": {
            "name": "_add_config_values_to_toml_object",
            "location": 61,
            "return": [],
            "arguments": {
                "toml_obj": [
                    "TOMLContainer"
                ],
                "data": [
                    "typing.Dict[(str, typing.Union[(dict, ConfigValue)])]"
                ]
            }
        },
        "write_example_config": {
            "name": "write_example_config",
            "location": 71,
            "return": [],
            "arguments": {
                "example_file_path": [
                    "str"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_file/_config_example_header.py": {},
    "elib_config-master/elib_config/_file/_config_file.py": {
        "_ensure_config_file_exists": {
            "name": "_ensure_config_file_exists",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "_read_file": {
            "name": "_read_file",
            "location": 32,
            "return": [
                "typing.MutableMapping[(str, typing.Any)]"
            ],
            "arguments": {}
        },
        "_write_file": {
            "name": "_write_file",
            "location": 47,
            "return": [],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "read_config_file": {
            "name": "read_config_file",
            "location": 53,
            "return": [
                "typing.MutableMapping[(str, typing.Any)]"
            ],
            "arguments": {}
        }
    },
    "elib_config-master/elib_config/_file/_exc.py": {
        "_ConfigFileError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file_path": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "ConfigFileNotFoundError.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file_path": [
                    "str"
                ]
            }
        },
        "EmptyValueError.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file_path": [
                    "str"
                ],
                "line_no": [
                    "int"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_file/__init__.py": {},
    "elib_config-master/elib_config/_value/_config_value.py": {
        "ConfigValue.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue.path": {
            "name": "path",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue.key": {
            "name": "key",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue.name": {
            "name": "name",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue._from_environ": {
            "name": "_from_environ",
            "location": 62,
            "return": [
                "typing.Optional[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue._from_config_file": {
            "name": "_from_config_file",
            "location": 69,
            "return": [
                "typing.Optional[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue._from_default": {
            "name": "_from_default",
            "location": 79,
            "return": [
                "typing.Optional[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue.raw_value": {
            "name": "raw_value",
            "location": 85,
            "return": [
                "typing.Optional[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue.__call__": {
            "name": "__call__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue._raise_invalid_type_error": {
            "name": "_raise_invalid_type_error",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue._cast": {
            "name": "_cast",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "ConfigValue.type_name": {
            "name": "type_name",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValue.friendly_type_name": {
            "name": "friendly_type_name",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_bool.py": {
        "ConfigValueBool.type_name": {
            "name": "type_name",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueBool._cast": {
            "name": "_cast",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "ConfigValueBool.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueBool._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_float.py": {
        "ConfigValueFloat.type_name": {
            "name": "type_name",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueFloat._cast": {
            "name": "_cast",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "ConfigValueFloat.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueFloat.set_limits": {
            "name": "set_limits",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "min_": [
                    "typing.Optional[float]"
                ],
                "max_": [
                    "typing.Optional[float]"
                ]
            }
        },
        "ConfigValueFloat._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_integer.py": {
        "ConfigValueInteger.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueInteger.type_name": {
            "name": "type_name",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueInteger._raise_out_of_bound_error": {
            "name": "_raise_out_of_bound_error",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "ConfigValueInteger._cast": {
            "name": "_cast",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "ConfigValueInteger.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueInteger.set_limits": {
            "name": "set_limits",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "min_": [],
                "max_": []
            }
        },
        "ConfigValueInteger._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_list.py": {
        "ConfigValueList.type_name": {
            "name": "type_name",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueList.friendly_type_name": {
            "name": "friendly_type_name",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueList.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueList._expected_element_type": {
            "name": "_expected_element_type",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueList._cast": {
            "name": "_cast",
            "location": 45,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "raw_value": [
                    "object"
                ]
            }
        },
        "ConfigValueList.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueList._toml_add_value_type": {
            "name": "_toml_add_value_type",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueList._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_path.py": {
        "ConfigValuePath.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath.must_exist": {
            "name": "must_exist",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath.must_be_file": {
            "name": "must_be_file",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath.must_be_dir": {
            "name": "must_be_dir",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath.create_dir": {
            "name": "create_dir",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath.type_name": {
            "name": "type_name",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath.friendly_type_name": {
            "name": "friendly_type_name",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath._cast": {
            "name": "_cast",
            "location": 84,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "ConfigValuePath.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValuePath._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_string.py": {
        "ConfigValueString.type_name": {
            "name": "type_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueString._cast": {
            "name": "_cast",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "ConfigValueString.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueString._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_table.py": {
        "ConfigValueTableKey.user_friendly_type": {
            "name": "user_friendly_type",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTableKey.mandatory": {
            "name": "mandatory",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTableArray.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTableArray.type_name": {
            "name": "type_name",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTableArray._check_key_type": {
            "name": "_check_key_type",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "key_value": []
            }
        },
        "ConfigValueTableArray._get_key_value": {
            "name": "_get_key_value",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "raw_value": [
                    "dict"
                ],
                "key": [
                    "ConfigValueTableKey"
                ]
            }
        },
        "ConfigValueTableArray._check_keys": {
            "name": "_check_keys",
            "location": 87,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "raw_value": [
                    "dict"
                ]
            }
        },
        "ConfigValueTableArray._cast": {
            "name": "_cast",
            "location": 93,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "ConfigValueTableArray.__call__": {
            "name": "__call__",
            "location": 100,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTableArray.__getattr__": {
            "name": "__getattr__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ConfigValueTableArray.__getitem__": {
            "name": "__getitem__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ConfigValueTableArray._get_key_state_as_comment": {
            "name": "_get_key_state_as_comment",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "ConfigValueTableKey"
                ]
            }
        },
        "ConfigValueTableArray._toml_add_value_type": {
            "name": "_toml_add_value_type",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueTableArray._add_key_to_example_table": {
            "name": "_add_key_to_example_table",
            "location": 134,
            "return": [],
            "arguments": {
                "_table": [
                    "tomlkit.container.Container"
                ],
                "key": [
                    "ConfigValueTableKey"
                ]
            }
        },
        "ConfigValueTableArray._generate_example": {
            "name": "_generate_example",
            "location": 146,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTableArray._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueTableArray._toml_add_comments": {
            "name": "_toml_add_comments",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueTableArray._toml_add_value": {
            "name": "_toml_add_value",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ],
                "not_set": [
                    "str"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_config_value_toml.py": {
        "ConfigValueTOML.key": {
            "name": "key",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTOML.friendly_type_name": {
            "name": "friendly_type_name",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigValueTOML._toml_add_description": {
            "name": "_toml_add_description",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueTOML._toml_add_value_type": {
            "name": "_toml_add_value_type",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueTOML._toml_add_comments": {
            "name": "_toml_add_comments",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueTOML._toml_add_value": {
            "name": "_toml_add_value",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ],
                "not_set": [
                    "str"
                ]
            }
        },
        "ConfigValueTOML._toml_comment": {
            "name": "_toml_comment",
            "location": 71,
            "return": [],
            "arguments": {
                "toml_obj": [
                    "tomlkit.container.Container"
                ],
                "comment": [
                    "str"
                ]
            }
        },
        "ConfigValueTOML._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "ConfigValueTOML.add_to_toml_obj": {
            "name": "add_to_toml_obj",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ],
                "not_set": [
                    "str"
                ]
            }
        }
    },
    "elib_config-master/elib_config/_value/_exc.py": {
        "_ConfigValueError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "DuplicateConfigValueError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ]
            }
        },
        "ConfigMissingValueError.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathMustExistError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ]
            }
        },
        "NotAFileError.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ]
            }
        },
        "NotAFolderError.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ]
            }
        },
        "OutOfBoundError.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ],
                "value": [
                    "float"
                ],
                "min_": [
                    "typing.Optional[float]"
                ],
                "max_": [
                    "typing.Optional[float]"
                ]
            }
        },
        "MissingTableKeyError.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ],
                "key_name": [
                    "str"
                ]
            }
        },
        "TableKeyTypeError.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "value_name": [
                    "str"
                ],
                "key_name": [
                    "str"
                ],
                "key_expected_type": [],
                "key_actual_type": []
            }
        }
    },
    "elib_config-master/elib_config/_value/__init__.py": {},
    "elib_config-master/test/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 13,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 25,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 31,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 36,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "clean_os_env": {
            "name": "clean_os_env",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "_global_tear_down": {
            "name": "_global_tear_down",
            "location": 54,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "monkeypatch": []
            }
        },
        "dummy_setup": {
            "name": "dummy_setup",
            "location": 79,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_clean_known_values": {
            "name": "_clean_known_values",
            "location": 98,
            "return": [],
            "arguments": {}
        }
    },
    "elib_config-master/test/test_config_file.py": {
        "test_ensure_config_file_exists_missing": {
            "name": "test_ensure_config_file_exists_missing",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_ensure_config_file_exists": {
            "name": "test_ensure_config_file_exists",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_read_file_empty": {
            "name": "test_read_file_empty",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_read_file_basic": {
            "name": "test_read_file_basic",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_invalid_file": {
            "name": "test_invalid_file",
            "location": 45,
            "return": [],
            "arguments": {
                "file_content": []
            }
        },
        "test_empty_value": {
            "name": "test_empty_value",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_write_file": {
            "name": "test_write_file",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "elib_config-master/test/test_config_value.py": {
        "_dummy_value": {
            "name": "_dummy_value",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_config_value_basic": {
            "name": "test_config_value_basic",
            "location": 36,
            "return": [],
            "arguments": {
                "dummy_value": []
            }
        },
        "test_value_no_default": {
            "name": "test_value_no_default",
            "location": 44,
            "return": [],
            "arguments": {
                "dummy_value": []
            }
        },
        "test_value_in_environ": {
            "name": "test_value_in_environ",
            "location": 49,
            "return": [],
            "arguments": {
                "dummy_value": []
            }
        },
        "test_value_in_config_file": {
            "name": "test_value_in_config_file",
            "location": 57,
            "return": [],
            "arguments": {
                "dummy_value": []
            }
        },
        "test_config_value_name": {
            "name": "test_config_value_name",
            "location": 74,
            "return": [],
            "arguments": {
                "value_name": []
            }
        },
        "DummyConfigValue._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "toml_obj": [
                    "tomlkit.container.Container"
                ]
            }
        },
        "DummyConfigValue._cast": {
            "name": "_cast",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "DummyConfigValue.type_name": {
            "name": "type_name",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_config-master/test/test_config_value_bool.py": {
        "_dummy_string_value": {
            "name": "_dummy_string_value",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_no_default": {
            "name": "test_no_default",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_string_value_default": {
            "name": "test_string_value_default",
            "location": 28,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_string_value_type_name": {
            "name": "test_string_value_type_name",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_invalid_cast_type_from_config_file": {
            "name": "test_invalid_cast_type_from_config_file",
            "location": 45,
            "return": [],
            "arguments": {
                "value": [],
                "file_value": []
            }
        },
        "test_valid_cast_type_from_config_file": {
            "name": "test_valid_cast_type_from_config_file",
            "location": 53,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "elib_config-master/test/test_config_value_float.py": {
        "_dummy_string_value": {
            "name": "_dummy_string_value",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_no_default": {
            "name": "test_no_default",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_string_value_default": {
            "name": "test_string_value_default",
            "location": 28,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_string_value_type_name": {
            "name": "test_string_value_type_name",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_invalid_cast_type_from_config_file": {
            "name": "test_invalid_cast_type_from_config_file",
            "location": 46,
            "return": [],
            "arguments": {
                "value": [],
                "file_value": []
            }
        },
        "test_valid_cast_type_from_config_file": {
            "name": "test_valid_cast_type_from_config_file",
            "location": 53,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_min": {
            "name": "test_min",
            "location": 58,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueFloat"
                ]
            }
        },
        "test_max": {
            "name": "test_max",
            "location": 67,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueFloat"
                ]
            }
        },
        "test_min_max": {
            "name": "test_min_max",
            "location": 76,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueFloat"
                ]
            }
        }
    },
    "elib_config-master/test/test_config_value_integer.py": {
        "_dummy_string_value": {
            "name": "_dummy_string_value",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_no_default": {
            "name": "test_no_default",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_string_value_default": {
            "name": "test_string_value_default",
            "location": 28,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_string_value_type_name": {
            "name": "test_string_value_type_name",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_invalid_cast_type_from_config_file": {
            "name": "test_invalid_cast_type_from_config_file",
            "location": 46,
            "return": [],
            "arguments": {
                "value": [],
                "file_value": []
            }
        },
        "test_valid_cast_type_from_config_file": {
            "name": "test_valid_cast_type_from_config_file",
            "location": 53,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_min": {
            "name": "test_min",
            "location": 58,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueInteger"
                ]
            }
        },
        "test_max": {
            "name": "test_max",
            "location": 67,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueInteger"
                ]
            }
        },
        "test_min_max": {
            "name": "test_min_max",
            "location": 76,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueInteger"
                ]
            }
        }
    },
    "elib_config-master/test/test_config_value_list.py": {
        "_dummy_string_value": {
            "name": "_dummy_string_value",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_no_default": {
            "name": "test_no_default",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_string_value_default": {
            "name": "test_string_value_default",
            "location": 31,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueList"
                ]
            }
        },
        "test_string_value_type_name": {
            "name": "test_string_value_type_name",
            "location": 35,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueList"
                ]
            }
        },
        "test_invalid_cast_type_from_config_file": {
            "name": "test_invalid_cast_type_from_config_file",
            "location": 50,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueList"
                ],
                "file_value": [],
                "wrong_type": []
            }
        },
        "test_valid_cast_type_from_config_file": {
            "name": "test_valid_cast_type_from_config_file",
            "location": 57,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueList"
                ]
            }
        },
        "test_element_type_check": {
            "name": "test_element_type_check",
            "location": 66,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueList"
                ],
                "not_a_string": []
            }
        },
        "test_element_type_check_from_file": {
            "name": "test_element_type_check_from_file",
            "location": 78,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValueList"
                ],
                "not_a_string": []
            }
        },
        "test_toml_example_unmanaged_element_type": {
            "name": "test_toml_example_unmanaged_element_type",
            "location": 85,
            "return": [],
            "arguments": {}
        }
    },
    "elib_config-master/test/test_config_value_path.py": {
        "_dummy_string_value": {
            "name": "_dummy_string_value",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_no_default": {
            "name": "test_no_default",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_string_value_default": {
            "name": "test_string_value_default",
            "location": 30,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_string_value_type_name": {
            "name": "test_string_value_type_name",
            "location": 34,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_invalid_cast_type_from_config_file": {
            "name": "test_invalid_cast_type_from_config_file",
            "location": 47,
            "return": [],
            "arguments": {
                "value": [],
                "file_value": []
            }
        },
        "test_valid_cast_type_from_config_file": {
            "name": "test_valid_cast_type_from_config_file",
            "location": 54,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_path_value_file": {
            "name": "test_path_value_file",
            "location": 59,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_path_value_must_exist": {
            "name": "test_path_value_must_exist",
            "location": 67,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        },
        "test_path_value_must_be_file_with_file": {
            "name": "test_path_value_must_be_file_with_file",
            "location": 77,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        },
        "test_path_value_must_be_file_with_dir": {
            "name": "test_path_value_must_be_file_with_dir",
            "location": 84,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        },
        "test_path_value_must_be_dir_with_dir": {
            "name": "test_path_value_must_be_dir_with_dir",
            "location": 96,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        },
        "test_path_value_must_be_dir_with_file": {
            "name": "test_path_value_must_be_dir_with_file",
            "location": 103,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        },
        "test_path_value_create_missing_dir": {
            "name": "test_path_value_create_missing_dir",
            "location": 115,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        },
        "test_path_value_must_be_both": {
            "name": "test_path_value_must_be_both",
            "location": 123,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        },
        "test_path_value_must_be_both2": {
            "name": "test_path_value_must_be_both2",
            "location": 129,
            "return": [],
            "arguments": {
                "value": [
                    "ConfigValuePath"
                ]
            }
        }
    },
    "elib_config-master/test/test_config_value_root_path.py": {
        "test_config_value_with_root_path": {
            "name": "test_config_value_with_root_path",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "DummyValue._cast": {
            "name": "_cast",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "raw_value": []
            }
        },
        "DummyValue.type_name": {
            "name": "type_name",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyValue._toml_add_examples": {
            "name": "_toml_add_examples",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_config-master/test/test_config_value_string.py": {
        "_dummy_string_value": {
            "name": "_dummy_string_value",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_no_default": {
            "name": "test_no_default",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_string_value_default": {
            "name": "test_string_value_default",
            "location": 29,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_string_value_type_name": {
            "name": "test_string_value_type_name",
            "location": 33,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_invalid_cast_type_from_config_file": {
            "name": "test_invalid_cast_type_from_config_file",
            "location": 46,
            "return": [],
            "arguments": {
                "value": [],
                "file_value": []
            }
        },
        "test_valid_cast_type_from_config_file": {
            "name": "test_valid_cast_type_from_config_file",
            "location": 53,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_valid_cast_type_from_config_file_single_quotes": {
            "name": "test_valid_cast_type_from_config_file_single_quotes",
            "location": 59,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "elib_config-master/test/test_config_value_table.py": {
        "test_basics": {
            "name": "test_basics",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_wrong_key_type": {
            "name": "test_wrong_key_type",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_missing_key": {
            "name": "test_missing_key",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_missing_optional_key": {
            "name": "test_missing_optional_key",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_get_attr": {
            "name": "test_get_attr",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_get_attr_missing": {
            "name": "test_get_attr_missing",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_optional_key": {
            "name": "test_optional_key",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_cast_wrong_type": {
            "name": "test_cast_wrong_type",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "elib_config-master/test/test_error_string.py": {
        "test_basics": {
            "name": "test_basics",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "elib_config-master/test/test_example_config.py": {
        "_strip_header": {
            "name": "_strip_header",
            "location": 18,
            "return": [],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "test_config_values_to_text": {
            "name": "test_config_values_to_text",
            "location": 356,
            "return": [],
            "arguments": {
                "test_case": [],
                "expected": []
            }
        },
        "TestCase.create": {
            "name": "create",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_config-master/test/test_setup.py": {
        "test_no_setup": {
            "name": "test_no_setup",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_correct_setup": {
            "name": "test_correct_setup",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_partial_setup": {
            "name": "test_partial_setup",
            "location": 28,
            "return": [],
            "arguments": {
                "attrib": []
            }
        }
    },
    "elib_config-master/test/test_utils.py": {
        "test_friendly_type_name": {
            "name": "test_friendly_type_name",
            "location": 20,
            "return": [],
            "arguments": {
                "raw_type": [],
                "friendly_name": []
            }
        }
    },
    "elib_config-master/test/test_validate.py": {
        "_create_values_with_default": {
            "name": "_create_values_with_default",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_valid_bare_config": {
            "name": "test_valid_bare_config",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_config_without_default": {
            "name": "test_config_without_default",
            "location": 30,
            "return": [],
            "arguments": {
                "val_cls": []
            }
        },
        "test_duplicate_path": {
            "name": "test_duplicate_path",
            "location": 40,
            "return": [],
            "arguments": {
                "val_name": []
            }
        },
        "test_missing_multiple": {
            "name": "test_missing_multiple",
            "location": 47,
            "return": [],
            "arguments": {}
        }
    },
    "elib_config-master/test/__init__.py": {}
}
{
    "estimark-master/docs/conf.py": {},
    "estimark-master/estimark/__init__.py": {},
    "estimark-master/estimark/__main__.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {
                "args": [
                    "List[str]"
                ]
            }
        }
    },
    "estimark-master/estimark/application/__init__.py": {},
    "estimark-master/estimark/application/domain/__init__.py": {},
    "estimark-master/estimark/application/domain/common/exceptions.py": {},
    "estimark-master/estimark/application/domain/common/query_parser.py": {
        "QueryParser.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "Sequence[Union[(str, TermTuple)]]"
                ]
            }
        },
        "QueryParser._default_join": {
            "name": "_default_join",
            "location": 70,
            "return": [
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "List[Callable]"
                ]
            }
        },
        "QueryParser._parse_term": {
            "name": "_parse_term",
            "location": 80,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "term_tuple": [
                    "TermTuple"
                ]
            }
        },
        "QueryParser._parse_like": {
            "name": "_parse_like",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "pattern": [
                    "str"
                ],
                "insensitive": []
            }
        }
    },
    "estimark-master/estimark/application/domain/common/types.py": {},
    "estimark-master/estimark/application/domain/common/__init__.py": {},
    "estimark-master/estimark/application/domain/models/classification.py": {
        "Classification.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/models/classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/models/entity.py": {
        "Entity.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/models/link.py": {
        "Link.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/models/schedule.py": {
        "Schedule.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/models/slot.py": {
        "Slot.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/models/task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/models/__init__.py": {},
    "estimark-master/estimark/application/domain/repositories/memory_model_repositories.py": {},
    "estimark-master/estimark/application/domain/repositories/memory_repository.py": {
        "MemoryRepository.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "QueryParser"
                ]
            }
        },
        "MemoryRepository.add": {
            "name": "add",
            "location": 17,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "MemoryRepository.search": {
            "name": "search",
            "location": 31,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ],
                "limit": [],
                "offset": []
            }
        },
        "MemoryRepository.remove": {
            "name": "remove",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "MemoryRepository.count": {
            "name": "count",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ]
            }
        },
        "MemoryRepository.load": {
            "name": "load",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Dict[(str, T)])]"
                ]
            }
        },
        "MemoryRepository._location": {
            "name": "_location",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/domain/repositories/repository.py": {
        "Repository.add": {
            "name": "add",
            "location": 9,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "Repository.search": {
            "name": "search",
            "location": 13,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Repository.remove": {
            "name": "remove",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "Repository.count": {
            "name": "count",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ]
            }
        }
    },
    "estimark-master/estimark/application/domain/repositories/__init__.py": {},
    "estimark-master/estimark/application/domain/services/plot_service.py": {
        "PlotService.plot_gantt": {
            "name": "plot_gantt",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "Schedule"
                ]
            }
        },
        "PlotService.plot_kanban": {
            "name": "plot_kanban",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "List[Task]"
                ],
                "sort": [
                    "List[str]"
                ],
                "group": [
                    "str"
                ]
            }
        },
        "MemoryPlotService.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryPlotService.plot_gantt": {
            "name": "plot_gantt",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "Schedule"
                ]
            }
        },
        "MemoryPlotService.plot_kanban": {
            "name": "plot_kanban",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "List[Task]"
                ],
                "sort": [
                    "List[str]"
                ],
                "group": [
                    "str"
                ]
            }
        }
    },
    "estimark-master/estimark/application/domain/services/__init__.py": {},
    "estimark-master/estimark/application/informers/estimark_informer.py": {
        "StandardEstimarkInformer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_repository": [
                    "TaskRepository"
                ],
                "link_repository": [
                    "LinkRepository"
                ],
                "classifier_repository": [
                    "ClassifierRepository"
                ],
                "schedule_repository": [
                    "ScheduleRepository"
                ],
                "slot_repository": [
                    "SlotRepository"
                ]
            }
        },
        "StandardEstimarkInformer.search": {
            "name": "search",
            "location": 31,
            "return": [
                "RecordList"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ],
                "domain": [
                    "QueryDomain"
                ],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        }
    },
    "estimark-master/estimark/application/informers/__init__.py": {},
    "estimark-master/estimark/application/managers/estimation_manager.py": {
        "EstimationManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_repository": [
                    "TaskRepository"
                ],
                "classifier_repository": [
                    "ClassifierRepository"
                ],
                "classification_repository": [
                    "ClassificationRepository"
                ],
                "link_repository": [
                    "LinkRepository"
                ],
                "schedule_repository": [
                    "ScheduleRepository"
                ],
                "slot_repository": [
                    "SlotRepository"
                ],
                "plot_service": [
                    "PlotService"
                ]
            }
        },
        "EstimationManager.estimate": {
            "name": "estimate",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "states": [
                    "List[str]"
                ]
            }
        },
        "EstimationManager.plot": {
            "name": "plot",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "EstimationManager._calculate_slots": {
            "name": "_calculate_slots",
            "location": 69,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "List[str]"
                ]
            }
        },
        "EstimationManager._calculate_start": {
            "name": "_calculate_start",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "task_amounts_dict": [],
                "task_id": []
            }
        },
        "EstimationManager._calculate_amount": {
            "name": "_calculate_amount",
            "location": 104,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        }
    },
    "estimark-master/estimark/application/managers/initialization_manager.py": {
        "InitializationManager.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classifier_repository": [
                    "ClassifierRepository"
                ]
            }
        },
        "InitializationManager.initialize": {
            "name": "initialize",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/application/managers/__init__.py": {},
    "estimark-master/estimark/core/__init__.py": {},
    "estimark-master/estimark/core/common/config.py": {},
    "estimark-master/estimark/core/common/__init__.py": {},
    "estimark-master/estimark/core/data/rst_analyzer.py": {
        "RstAnalyzer.analyze": {
            "name": "analyze",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "_RstVisitor.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RstVisitor.visit_title": {
            "name": "visit_title",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "_RstVisitor.visit_field": {
            "name": "visit_field",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "_RstVisitor.unknown_visit": {
            "name": "unknown_visit",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "RstAnalyzer.analyze.assign_result": {
            "name": "assign_result",
            "location": 18,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "estimark-master/estimark/core/data/rst_classification_repository.py": {
        "RstClassificationRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "QueryParser"
                ],
                "loader": [
                    "RstLoader"
                ]
            }
        },
        "RstClassificationRepository.load": {
            "name": "load",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/core/data/rst_link_repository.py": {
        "RstLinkRepository.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "QueryParser"
                ],
                "loader": [
                    "RstLoader"
                ]
            }
        },
        "RstLinkRepository.load": {
            "name": "load",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/core/data/rst_loader.py": {
        "RstLoader.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ],
                "analyzer": [
                    "RstAnalyzer"
                ]
            }
        },
        "RstLoader.nodes": {
            "name": "nodes",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RstLoader.load": {
            "name": "load",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RstLoader._analyze_node": {
            "name": "_analyze_node",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Path"
                ]
            }
        },
        "RstLoader._extract_content": {
            "name": "_extract_content",
            "location": 47,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Path"
                ]
            }
        },
        "RstLoader._extract_id": {
            "name": "_extract_id",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RstLoader._extract_parent_id": {
            "name": "_extract_parent_id",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "nodes_dict": [
                    "Dict[(str, Any)]"
                ],
                "value": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "estimark-master/estimark/core/data/rst_repository.py": {
        "RstRepository.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "QueryParser"
                ],
                "loader": [
                    "RstLoader"
                ],
                "item_class": [
                    "Type[T]"
                ]
            }
        },
        "RstRepository.add": {
            "name": "add",
            "location": 19,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "RstRepository.search": {
            "name": "search",
            "location": 22,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ],
                "limit": [],
                "offset": []
            }
        },
        "RstRepository.remove": {
            "name": "remove",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "RstRepository.count": {
            "name": "count",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ]
            }
        },
        "RstRepository.load": {
            "name": "load",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RstRepository._location": {
            "name": "_location",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/core/data/rst_task_repository.py": {
        "RstTaskRepository.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "QueryParser"
                ],
                "loader": [
                    "RstLoader"
                ]
            }
        }
    },
    "estimark-master/estimark/core/data/__init__.py": {},
    "estimark-master/estimark/core/data/json/init_json_database.py": {
        "init_json_database": {
            "name": "init_json_database",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "schema": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "estimark-master/estimark/core/data/json/json_model_repositories.py": {
        "JsonClassificationRepository.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "parser": [
                    "QueryParser"
                ],
                "collection_name": [
                    "str"
                ],
                "file_suffix": [
                    "str"
                ]
            }
        },
        "JsonClassifierRepository.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "parser": [
                    "QueryParser"
                ],
                "collection_name": [
                    "str"
                ],
                "file_suffix": [
                    "str"
                ]
            }
        },
        "JsonLinkRepository.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "parser": [
                    "QueryParser"
                ],
                "collection_name": [
                    "str"
                ],
                "file_suffix": [
                    "str"
                ]
            }
        },
        "JsonScheduleRepository.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "parser": [
                    "QueryParser"
                ],
                "collection_name": [
                    "str"
                ],
                "file_suffix": [
                    "str"
                ]
            }
        },
        "JsonSlotRepository.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "parser": [
                    "QueryParser"
                ],
                "collection_name": [
                    "str"
                ],
                "file_suffix": [
                    "str"
                ]
            }
        },
        "JsonTaskRepository.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "parser": [
                    "QueryParser"
                ],
                "collection_name": [
                    "str"
                ],
                "file_suffix": [
                    "str"
                ]
            }
        }
    },
    "estimark-master/estimark/core/data/json/json_repository.py": {
        "JsonRepository.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str"
                ],
                "parser": [
                    "QueryParser"
                ],
                "collection_name": [
                    "str"
                ],
                "item_class": [
                    "Type[T]"
                ],
                "file_suffix": [
                    "str"
                ]
            }
        },
        "JsonRepository.add": {
            "name": "add",
            "location": 24,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "JsonRepository.search": {
            "name": "search",
            "location": 44,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ],
                "limit": [],
                "offset": []
            }
        },
        "JsonRepository.remove": {
            "name": "remove",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(T, List[T])]"
                ]
            }
        },
        "JsonRepository.count": {
            "name": "count",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "QueryDomain"
                ]
            }
        },
        "JsonRepository._location": {
            "name": "_location",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonRepository.file_path": {
            "name": "file_path",
            "location": 107,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/estimark/core/data/json/__init__.py": {},
    "estimark-master/estimark/core/plot/altair_plot_service.py": {
        "AltairPlotService.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot_dir": [
                    "str"
                ],
                "slot_repository": [
                    "SlotRepository"
                ]
            }
        },
        "AltairPlotService.plot_gantt": {
            "name": "plot_gantt",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "Schedule"
                ]
            }
        },
        "AltairPlotService.plot_kanban": {
            "name": "plot_kanban",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "List[Task]"
                ],
                "sort": [
                    "List[str]"
                ],
                "group": [
                    "str"
                ]
            }
        }
    },
    "estimark-master/estimark/core/plot/__init__.py": {},
    "estimark-master/estimark/factories/altair_factory.py": {
        "AltairFactory.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "AltairFactory.plot_service": {
            "name": "plot_service",
            "location": 14,
            "return": [
                "PlotService"
            ],
            "arguments": {
                "self": [],
                "slot_repository": [
                    "SlotRepository"
                ]
            }
        }
    },
    "estimark-master/estimark/factories/base_factory.py": {
        "BaseFactory.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "BaseFactory.query_parser": {
            "name": "query_parser",
            "location": 21,
            "return": [
                "QueryParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.task_repository": {
            "name": "task_repository",
            "location": 24,
            "return": [
                "TaskRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "BaseFactory.link_repository": {
            "name": "link_repository",
            "location": 29,
            "return": [
                "LinkRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "BaseFactory.classifier_repository": {
            "name": "classifier_repository",
            "location": 34,
            "return": [
                "ClassifierRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "BaseFactory.classification_repository": {
            "name": "classification_repository",
            "location": 39,
            "return": [
                "ClassificationRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "BaseFactory.schedule_repository": {
            "name": "schedule_repository",
            "location": 44,
            "return": [
                "ScheduleRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "BaseFactory.slot_repository": {
            "name": "slot_repository",
            "location": 49,
            "return": [
                "SlotRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "BaseFactory.plot_service": {
            "name": "plot_service",
            "location": 54,
            "return": [
                "PlotService"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.estimation_manager": {
            "name": "estimation_manager",
            "location": 57,
            "return": [
                "EstimationManager"
            ],
            "arguments": {
                "self": [],
                "task_repository": [
                    "TaskRepository"
                ],
                "classifier_repository": [
                    "ClassifierRepository"
                ],
                "classification_repository": [
                    "ClassificationRepository"
                ],
                "link_repository": [
                    "LinkRepository"
                ],
                "schedule_repository": [
                    "ScheduleRepository"
                ],
                "slot_repository": [
                    "SlotRepository"
                ],
                "plot_service": [
                    "PlotService"
                ]
            }
        },
        "BaseFactory.initialization_manager": {
            "name": "initialization_manager",
            "location": 71,
            "return": [
                "InitializationManager"
            ],
            "arguments": {
                "self": [],
                "classifier_repository": [
                    "ClassifierRepository"
                ]
            }
        },
        "BaseFactory.estimark_informer": {
            "name": "estimark_informer",
            "location": 76,
            "return": [
                "EstimarkInformer"
            ],
            "arguments": {
                "self": [],
                "task_repository": [
                    "TaskRepository"
                ],
                "link_repository": [
                    "LinkRepository"
                ],
                "classifier_repository": [
                    "ClassifierRepository"
                ],
                "schedule_repository": [
                    "ScheduleRepository"
                ],
                "slot_repository": [
                    "SlotRepository"
                ]
            }
        }
    },
    "estimark-master/estimark/factories/check_factory.py": {
        "CheckFactory.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "CheckFactory.task_repository": {
            "name": "task_repository",
            "location": 15,
            "return": [
                "TaskRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        }
    },
    "estimark-master/estimark/factories/json_factory.py": {
        "JsonFactory.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "JsonFactory.classification_repository": {
            "name": "classification_repository",
            "location": 21,
            "return": [
                "ClassificationRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "JsonFactory.classifier_repository": {
            "name": "classifier_repository",
            "location": 27,
            "return": [
                "ClassifierRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "JsonFactory.link_repository": {
            "name": "link_repository",
            "location": 33,
            "return": [
                "LinkRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "JsonFactory.schedule_repository": {
            "name": "schedule_repository",
            "location": 39,
            "return": [
                "ScheduleRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "JsonFactory.slot_repository": {
            "name": "slot_repository",
            "location": 45,
            "return": [
                "SlotRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        },
        "JsonFactory.task_repository": {
            "name": "task_repository",
            "location": 51,
            "return": [
                "TaskRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ]
            }
        }
    },
    "estimark-master/estimark/factories/rst_factory.py": {
        "RstFactory.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ]
            }
        },
        "RstFactory.rst_analyzer": {
            "name": "rst_analyzer",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RstFactory.rst_loader": {
            "name": "rst_loader",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "analyzer": [
                    "RstAnalyzer"
                ]
            }
        },
        "RstFactory.task_repository": {
            "name": "task_repository",
            "location": 23,
            "return": [
                "TaskRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ],
                "loader": [
                    "RstLoader"
                ]
            }
        },
        "RstFactory.link_repository": {
            "name": "link_repository",
            "location": 30,
            "return": [
                "RstLinkRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ],
                "loader": [
                    "RstLoader"
                ]
            }
        },
        "RstFactory.classification_repository": {
            "name": "classification_repository",
            "location": 37,
            "return": [
                "ClassificationRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "QueryParser"
                ],
                "loader": [
                    "RstLoader"
                ]
            }
        }
    },
    "estimark-master/estimark/factories/__init__.py": {},
    "estimark-master/estimark/presenters/__init__.py": {},
    "estimark-master/estimark/presenters/shell/shell.py": {
        "Shell.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "injector": [
                    "Injectark"
                ]
            }
        },
        "Shell.run": {
            "name": "run",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Shell.parse": {
            "name": "parse",
            "location": 23,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Shell.init": {
            "name": "init",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options_dict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Shell.estimate": {
            "name": "estimate",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options_dict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Shell.show": {
            "name": "show",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options_dict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Shell.plot": {
            "name": "plot",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "options_dict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Shell.version": {
            "name": "version",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "options_dict": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "estimark-master/estimark/presenters/shell/__init__.py": {},
    "estimark-master/tests/test_main.py": {
        "test_main_definition": {
            "name": "test_main_definition",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/__init__.py": {},
    "estimark-master/tests/application/__init__.py": {},
    "estimark-master/tests/application/domain/__init__.py": {},
    "estimark-master/tests/application/domain/common/test_query_parser.py": {
        "parser": {
            "name": "parser",
            "location": 8,
            "return": [
                "QueryParser"
            ],
            "arguments": {}
        },
        "test_query_parser_object_creation": {
            "name": "test_query_parser_object_creation",
            "location": 12,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_tuple": {
            "name": "test_query_parser_parse_tuple",
            "location": 16,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_single_term": {
            "name": "test_query_parser_parse_single_term",
            "location": 40,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_default_join": {
            "name": "test_query_parser_default_join",
            "location": 59,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_multiple_terms": {
            "name": "test_query_parser_parse_multiple_terms",
            "location": 79,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_with_empty_list": {
            "name": "test_query_parser_with_empty_list",
            "location": 109,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_string_parser_with_lists_of_lists": {
            "name": "test_string_parser_with_lists_of_lists",
            "location": 117,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_like": {
            "name": "test_query_parser_parse_like",
            "location": 133,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_contains": {
            "name": "test_query_parser_parse_contains",
            "location": 167,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_single_term.expected": {
            "name": "expected",
            "location": 43,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_query_parser_default_join.expected": {
            "name": "expected",
            "location": 62,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_string_parser_with_lists_of_lists.expected": {
            "name": "expected",
            "location": 120,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "estimark-master/tests/application/domain/common/__init__.py": {},
    "estimark-master/tests/application/domain/models/test_classification.py": {
        "test_classification_instantiation": {
            "name": "test_classification_instantiation",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/models/test_classifier.py": {
        "test_classifier_instantiation": {
            "name": "test_classifier_instantiation",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/models/test_entity.py": {
        "entity": {
            "name": "entity",
            "location": 6,
            "return": [
                "Entity"
            ],
            "arguments": {}
        },
        "test_entity_creation": {
            "name": "test_entity_creation",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "Entity"
                ]
            }
        },
        "test_entity_default_attributes": {
            "name": "test_entity_default_attributes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "Entity"
                ]
            }
        },
        "test_entity_attributes_from_dict": {
            "name": "test_entity_attributes_from_dict",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/models/test_link.py": {
        "test_link_instantiation": {
            "name": "test_link_instantiation",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/models/test_schedule.py": {
        "test_schedule_instantiation": {
            "name": "test_schedule_instantiation",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/models/test_slot.py": {
        "test_slot_instantiation": {
            "name": "test_slot_instantiation",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/models/test_task.py": {
        "test_task_instantiation": {
            "name": "test_task_instantiation",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/models/__init__.py": {},
    "estimark-master/tests/application/domain/repositories/test_expression_parser.py": {
        "parser": {
            "name": "parser",
            "location": 8,
            "return": [
                "QueryParser"
            ],
            "arguments": {}
        },
        "test_expression_parser_object_creation": {
            "name": "test_expression_parser_object_creation",
            "location": 12,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_parse_tuple": {
            "name": "test_expression_parser_parse_tuple",
            "location": 16,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_parse_single_term": {
            "name": "test_expression_parser_parse_single_term",
            "location": 40,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_default_join": {
            "name": "test_expression_parser_default_join",
            "location": 59,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_parse_multiple_terms": {
            "name": "test_expression_parser_parse_multiple_terms",
            "location": 79,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_with_empty_list": {
            "name": "test_expression_parser_with_empty_list",
            "location": 109,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_string_parser_with_lists_of_lists": {
            "name": "test_string_parser_with_lists_of_lists",
            "location": 117,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_parse_like": {
            "name": "test_expression_parser_parse_like",
            "location": 133,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_parse_contains": {
            "name": "test_expression_parser_parse_contains",
            "location": 167,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "test_expression_parser_parse_single_term.expected": {
            "name": "expected",
            "location": 43,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_expression_parser_default_join.expected": {
            "name": "expected",
            "location": 62,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_string_parser_with_lists_of_lists.expected": {
            "name": "expected",
            "location": 120,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "estimark-master/tests/application/domain/repositories/test_memory_repository.py": {
        "test_memory_repository_implementation": {
            "name": "test_memory_repository_implementation",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "memory_repository": {
            "name": "memory_repository",
            "location": 21,
            "return": [
                "MemoryRepository"
            ],
            "arguments": {}
        },
        "filled_memory_repository": {
            "name": "filled_memory_repository",
            "location": 29,
            "return": [
                "MemoryRepository"
            ],
            "arguments": {
                "memory_repository": []
            }
        },
        "test_memory_repository_add": {
            "name": "test_memory_repository_add",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_repository": []
            }
        },
        "test_memory_repository_add_update": {
            "name": "test_memory_repository_add_update",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_repository": []
            }
        },
        "test_memory_repository_add_no_id": {
            "name": "test_memory_repository_add_no_id",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_repository": []
            }
        },
        "test_memory_repository_search": {
            "name": "test_memory_repository_search",
            "location": 82,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_search_all": {
            "name": "test_memory_repository_search_all",
            "location": 93,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_count": {
            "name": "test_memory_repository_count",
            "location": 99,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_count_domain": {
            "name": "test_memory_repository_count_domain",
            "location": 105,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_search_limit": {
            "name": "test_memory_repository_search_limit",
            "location": 112,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_search_limit_none": {
            "name": "test_memory_repository_search_limit_none",
            "location": 118,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_search_offset": {
            "name": "test_memory_repository_search_offset",
            "location": 124,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_remove_true": {
            "name": "test_memory_repository_remove_true",
            "location": 130,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_remove_false": {
            "name": "test_memory_repository_remove_false",
            "location": 140,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_remove_idempotent": {
            "name": "test_memory_repository_remove_idempotent",
            "location": 149,
            "return": [],
            "arguments": {
                "filled_memory_repository": []
            }
        },
        "test_memory_repository_add_multiple": {
            "name": "test_memory_repository_add_multiple",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_repository": []
            }
        },
        "DummyEntity.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/tests/application/domain/repositories/test_repository.py": {
        "test_repository_methods": {
            "name": "test_repository_methods",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/repositories/__init__.py": {},
    "estimark-master/tests/application/domain/services/conftest.py": {
        "slot_repository": {
            "name": "slot_repository",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "plot_service": {
            "name": "plot_service",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/application/domain/services/test_plot_service.py": {
        "test_plot_service_instantiation": {
            "name": "test_plot_service_instantiation",
            "location": 5,
            "return": [],
            "arguments": {
                "plot_service": []
            }
        },
        "test_plot_service_plot_gantt": {
            "name": "test_plot_service_plot_gantt",
            "location": 9,
            "return": [],
            "arguments": {
                "plot_service": []
            }
        },
        "test_plot_service_plot_kanban": {
            "name": "test_plot_service_plot_kanban",
            "location": 15,
            "return": [],
            "arguments": {
                "plot_service": []
            }
        }
    },
    "estimark-master/tests/application/domain/services/__init__.py": {},
    "estimark-master/tests/application/informers/conftest.py": {
        "task_repository": {
            "name": "task_repository",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "link_repository": {
            "name": "link_repository",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "classifier_repository": {
            "name": "classifier_repository",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "schedule_repository": {
            "name": "schedule_repository",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "slot_repository": {
            "name": "slot_repository",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "estimark_informer": {
            "name": "estimark_informer",
            "location": 42,
            "return": [],
            "arguments": {
                "task_repository": [],
                "link_repository": [],
                "classifier_repository": [],
                "schedule_repository": [],
                "slot_repository": []
            }
        }
    },
    "estimark-master/tests/application/informers/test_estimark_informer.py": {
        "test_estimark_informer_instantiation": {
            "name": "test_estimark_informer_instantiation",
            "location": 3,
            "return": [],
            "arguments": {
                "estimark_informer": []
            }
        },
        "test_estimark_informer_search_tasks": {
            "name": "test_estimark_informer_search_tasks",
            "location": 7,
            "return": [],
            "arguments": {
                "estimark_informer": []
            }
        },
        "test_estimark_informer_search_links": {
            "name": "test_estimark_informer_search_links",
            "location": 13,
            "return": [],
            "arguments": {
                "estimark_informer": []
            }
        },
        "test_estimark_informer_search_classifiers": {
            "name": "test_estimark_informer_search_classifiers",
            "location": 19,
            "return": [],
            "arguments": {
                "estimark_informer": []
            }
        },
        "test_estimark_informer_search_schedules": {
            "name": "test_estimark_informer_search_schedules",
            "location": 25,
            "return": [],
            "arguments": {
                "estimark_informer": []
            }
        },
        "test_estimark_informer_search_slots": {
            "name": "test_estimark_informer_search_slots",
            "location": 31,
            "return": [],
            "arguments": {
                "estimark_informer": []
            }
        }
    },
    "estimark-master/tests/application/informers/__init__.py": {},
    "estimark-master/tests/application/managers/conftest.py": {
        "classifier_repository": {
            "name": "classifier_repository",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "task_repository": {
            "name": "task_repository",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "classification_repository": {
            "name": "classification_repository",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "link_repository": {
            "name": "link_repository",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "merged_link_repository": {
            "name": "merged_link_repository",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "schedule_repository": {
            "name": "schedule_repository",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "slot_repository": {
            "name": "slot_repository",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "plot_service": {
            "name": "plot_service",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "estimation_manager": {
            "name": "estimation_manager",
            "location": 166,
            "return": [],
            "arguments": {
                "task_repository": [],
                "classifier_repository": [],
                "classification_repository": [],
                "link_repository": [],
                "schedule_repository": [],
                "slot_repository": [],
                "plot_service": []
            }
        },
        "initialization_manager": {
            "name": "initialization_manager",
            "location": 177,
            "return": [],
            "arguments": {
                "classifier_repository": []
            }
        }
    },
    "estimark-master/tests/application/managers/test_estimation_manager.py": {
        "test_estimation_manager_instantiation": {
            "name": "test_estimation_manager_instantiation",
            "location": 5,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_calculate_slots": {
            "name": "test_estimation_manager_calculate_slots",
            "location": 9,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_estimate": {
            "name": "test_estimation_manager_estimate",
            "location": 35,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_plot_empty": {
            "name": "test_estimation_manager_plot_empty",
            "location": 41,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_plot_schedule": {
            "name": "test_estimation_manager_plot_schedule",
            "location": 46,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_estimate_merged_tasks": {
            "name": "test_estimation_manager_estimate_merged_tasks",
            "location": 56,
            "return": [],
            "arguments": {
                "estimation_manager": [],
                "merged_link_repository": []
            }
        },
        "test_estimation_manager_calculate_slots_state_missing": {
            "name": "test_estimation_manager_calculate_slots_state_missing",
            "location": 84,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_plot_kanban": {
            "name": "test_estimation_manager_plot_kanban",
            "location": 91,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_plot_kanban_no_tasks": {
            "name": "test_estimation_manager_plot_kanban_no_tasks",
            "location": 98,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_plot_kanban_states": {
            "name": "test_estimation_manager_plot_kanban_states",
            "location": 106,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_plot_kanban_owners": {
            "name": "test_estimation_manager_plot_kanban_owners",
            "location": 114,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        },
        "test_estimation_manager_plot_invalid_type": {
            "name": "test_estimation_manager_plot_invalid_type",
            "location": 122,
            "return": [],
            "arguments": {
                "estimation_manager": []
            }
        }
    },
    "estimark-master/tests/application/managers/test_initialization_manager.py": {
        "test_initialization_manager_instantiation": {
            "name": "test_initialization_manager_instantiation",
            "location": 2,
            "return": [],
            "arguments": {
                "initialization_manager": []
            }
        },
        "test_initialization_manager_initialize_non_empty": {
            "name": "test_initialization_manager_initialize_non_empty",
            "location": 6,
            "return": [],
            "arguments": {
                "initialization_manager": []
            }
        },
        "test_initialization_manager_initialize_empty": {
            "name": "test_initialization_manager_initialize_empty",
            "location": 14,
            "return": [],
            "arguments": {
                "initialization_manager": []
            }
        }
    },
    "estimark-master/tests/application/managers/__init__.py": {},
    "estimark-master/tests/core/__init__.py": {},
    "estimark-master/tests/core/data/conftest.py": {
        "rst_file": {
            "name": "rst_file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "rst_analyzer": {
            "name": "rst_analyzer",
            "location": 17,
            "return": [
                "RstAnalyzer"
            ],
            "arguments": {}
        },
        "rst_loader": {
            "name": "rst_loader",
            "location": 22,
            "return": [
                "RstLoader"
            ],
            "arguments": {
                "root_directory": [],
                "rst_analyzer": []
            }
        },
        "root_directory": {
            "name": "root_directory",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "estimark-master/tests/core/data/test_rst_analyzer.py": {
        "test_rst_analyzer_definition": {
            "name": "test_rst_analyzer_definition",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_analyzer": []
            }
        },
        "test_rst_analyzer_analyzes_rst_file": {
            "name": "test_rst_analyzer_analyzes_rst_file",
            "location": 8,
            "return": [],
            "arguments": {
                "rst_analyzer": [],
                "rst_file": []
            }
        }
    },
    "estimark-master/tests/core/data/test_rst_classification_repositoy.py": {
        "rst_classification_repository": {
            "name": "rst_classification_repository",
            "location": 8,
            "return": [
                "RstClassificationRepository"
            ],
            "arguments": {
                "rst_loader": []
            }
        },
        "test_rst_classification_repository_instantiation": {
            "name": "test_rst_classification_repository_instantiation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_classification_repository": []
            }
        }
    },
    "estimark-master/tests/core/data/test_rst_link_repositoy.py": {
        "rst_link_repository": {
            "name": "rst_link_repository",
            "location": 8,
            "return": [
                "RstLinkRepository"
            ],
            "arguments": {
                "rst_loader": []
            }
        },
        "test_rst_link_repository_instantiation": {
            "name": "test_rst_link_repository_instantiation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_link_repository": []
            }
        },
        "test_rst_link_repository_load": {
            "name": "test_rst_link_repository_load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_link_repository": []
            }
        },
        "test_rst_link_repository_search": {
            "name": "test_rst_link_repository_search",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_link_repository": []
            }
        },
        "test_rst_link_repository_search_with_predecessors": {
            "name": "test_rst_link_repository_search_with_predecessors",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_link_repository": []
            }
        }
    },
    "estimark-master/tests/core/data/test_rst_loader.py": {
        "test_rst_loader_instantiation": {
            "name": "test_rst_loader_instantiation",
            "location": 3,
            "return": [],
            "arguments": {
                "rst_loader": []
            }
        },
        "test_rst_loader_load": {
            "name": "test_rst_loader_load",
            "location": 7,
            "return": [],
            "arguments": {
                "rst_loader": []
            }
        },
        "test_rst_loader_load_if_not_initialized": {
            "name": "test_rst_loader_load_if_not_initialized",
            "location": 14,
            "return": [],
            "arguments": {
                "rst_loader": []
            }
        },
        "test_rst_loader_load_custom_id": {
            "name": "test_rst_loader_load_custom_id",
            "location": 19,
            "return": [],
            "arguments": {
                "rst_loader": []
            }
        }
    },
    "estimark-master/tests/core/data/test_rst_repositoy.py": {
        "test_rst_repository_implementation": {
            "name": "test_rst_repository_implementation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "rst_repository": {
            "name": "rst_repository",
            "location": 19,
            "return": [
                "RstRepository"
            ],
            "arguments": {
                "rst_loader": []
            }
        },
        "test_rst_repository_load": {
            "name": "test_rst_repository_load",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_add": {
            "name": "test_rst_repository_add",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_remove": {
            "name": "test_rst_repository_remove",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_search": {
            "name": "test_rst_repository_search",
            "location": 46,
            "return": [],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_search_all": {
            "name": "test_rst_repository_search_all",
            "location": 57,
            "return": [],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_search_limit": {
            "name": "test_rst_repository_search_limit",
            "location": 62,
            "return": [],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_search_offset": {
            "name": "test_rst_repository_search_offset",
            "location": 67,
            "return": [],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_count": {
            "name": "test_rst_repository_count",
            "location": 72,
            "return": [],
            "arguments": {
                "rst_repository": []
            }
        },
        "test_rst_repository_count_domain": {
            "name": "test_rst_repository_count_domain",
            "location": 77,
            "return": [],
            "arguments": {
                "rst_repository": []
            }
        },
        "DummyEntity.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "estimark-master/tests/core/data/test_rst_task_repositoy.py": {
        "rst_task_repository": {
            "name": "rst_task_repository",
            "location": 8,
            "return": [
                "RstTaskRepository"
            ],
            "arguments": {
                "rst_loader": []
            }
        },
        "test_rst_repository_instantiation": {
            "name": "test_rst_repository_instantiation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "rst_task_repository": []
            }
        }
    },
    "estimark-master/tests/core/data/__init__.py": {},
    "estimark-master/tests/core/data/json/test_init_json_database.py": {
        "test_init_json_database": {
            "name": "test_init_json_database",
            "location": 5,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_init_json_database_existing_file": {
            "name": "test_init_json_database_existing_file",
            "location": 23,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "estimark-master/tests/core/data/json/test_json_repository.py": {
        "test_json_repository_implementation": {
            "name": "test_json_repository_implementation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "json_repository": {
            "name": "json_repository",
            "location": 20,
            "return": [
                "JsonRepository"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_json_repository_add": {
            "name": "test_json_repository_add",
            "location": 42,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_add_no_id": {
            "name": "test_json_repository_add_no_id",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_add_update": {
            "name": "test_json_repository_add_update",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_search": {
            "name": "test_json_repository_search",
            "location": 82,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_search_all": {
            "name": "test_json_repository_search_all",
            "location": 92,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_search_limit": {
            "name": "test_json_repository_search_limit",
            "location": 97,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_search_limit_zero": {
            "name": "test_json_repository_search_limit_zero",
            "location": 102,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_search_offset": {
            "name": "test_json_repository_search_offset",
            "location": 107,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_search_non_existent_file": {
            "name": "test_json_repository_search_non_existent_file",
            "location": 112,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_remove_true": {
            "name": "test_json_repository_remove_true",
            "location": 118,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_remove_false": {
            "name": "test_json_repository_remove_false",
            "location": 139,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_remove_non_existent_file": {
            "name": "test_json_repository_remove_non_existent_file",
            "location": 152,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_count": {
            "name": "test_json_repository_count",
            "location": 164,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "test_json_repository_count_domain": {
            "name": "test_json_repository_count_domain",
            "location": 170,
            "return": [],
            "arguments": {
                "json_repository": []
            }
        },
        "DummyEntity.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "field_1": [
                    "str"
                ]
            }
        }
    },
    "estimark-master/tests/core/data/json/__init__.py": {},
    "estimark-master/tests/core/plot/test_altair_plot_service.py": {
        "slot_repository": {
            "name": "slot_repository",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "plot_service": {
            "name": "plot_service",
            "location": 25,
            "return": [],
            "arguments": {
                "slot_repository": []
            }
        },
        "test_altair_plot_service_plot_gantt": {
            "name": "test_altair_plot_service_plot_gantt",
            "location": 29,
            "return": [],
            "arguments": {
                "plot_service": [],
                "tmpdir": []
            }
        },
        "test_altair_plot_service_plot_kanban": {
            "name": "test_altair_plot_service_plot_kanban",
            "location": 40,
            "return": [],
            "arguments": {
                "plot_service": [],
                "tmpdir": []
            }
        }
    },
    "estimark-master/tests/core/plot/__init__.py": {},
    "estimark-master/tests/factories/test_factories.py": {
        "test_factories": {
            "name": "test_factories",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "estimark-master/tests/factories/__init__.py": {},
    "estimark-master/tests/presenters/__init__.py": {},
    "estimark-master/tests/presenters/shell/conftest.py": {
        "shell": {
            "name": "shell",
            "location": 9,
            "return": [
                "Shell"
            ],
            "arguments": {}
        }
    },
    "estimark-master/tests/presenters/shell/test_cli.py": {
        "test_shell_initialization": {
            "name": "test_shell_initialization",
            "location": 5,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_parse_no_arguments": {
            "name": "test_shell_parse_no_arguments",
            "location": 9,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_parse_estimate": {
            "name": "test_shell_parse_estimate",
            "location": 14,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_parse_show": {
            "name": "test_shell_parse_show",
            "location": 20,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_run": {
            "name": "test_shell_run",
            "location": 26,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_init": {
            "name": "test_shell_init",
            "location": 50,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_estimate": {
            "name": "test_shell_estimate",
            "location": 55,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_estimate_states": {
            "name": "test_shell_estimate_states",
            "location": 60,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_show": {
            "name": "test_shell_show",
            "location": 65,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_show_unknown": {
            "name": "test_shell_show_unknown",
            "location": 70,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_version": {
            "name": "test_shell_version",
            "location": 76,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_plot": {
            "name": "test_shell_plot",
            "location": 81,
            "return": [],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_run.mock_parse": {
            "name": "mock_parse",
            "location": 31,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_shell_run.mock_parse.MockNamespace.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_shell_run.mock_parse.MockNamespace.func": {
            "name": "func",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "options_dict": []
            }
        }
    },
    "estimark-master/tests/presenters/shell/__init__.py": {}
}
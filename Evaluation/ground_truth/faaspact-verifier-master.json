{
    "faaspact-verifier-master/setup.py": {},
    "faaspact-verifier-master/faaspact_verifier/context.py": {
        "create_default_context": {
            "name": "create_default_context",
            "location": 17,
            "return": [
                "Context"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/definitions.py": {
        "_pluck_interactions": {
            "name": "_pluck_interactions",
            "location": 59,
            "return": [
                "Tuple[(Interaction, ...)]"
            ],
            "arguments": {
                "pact": [
                    "Pact"
                ]
            }
        },
        "_pluck_interaction": {
            "name": "_pluck_interaction",
            "location": 64,
            "return": [
                "Interaction"
            ],
            "arguments": {
                "raw_interaction": [
                    "Dict"
                ]
            }
        },
        "_pluck_request": {
            "name": "_pluck_request",
            "location": 82,
            "return": [
                "Request"
            ],
            "arguments": {
                "raw_request": [
                    "Dict"
                ]
            }
        },
        "_pluck_response": {
            "name": "_pluck_response",
            "location": 92,
            "return": [
                "Response"
            ],
            "arguments": {
                "raw_response": [
                    "Dict"
                ]
            }
        },
        "_pluck_provider_state": {
            "name": "_pluck_provider_state",
            "location": 101,
            "return": [
                "ProviderState"
            ],
            "arguments": {
                "raw_provider_state": [
                    "Dict"
                ]
            }
        },
        "Pact.interactions": {
            "name": "interactions",
            "location": 37,
            "return": [
                "Tuple[(Interaction, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pact.provider_name": {
            "name": "provider_name",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pact.consumer_name": {
            "name": "consumer_name",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/exceptions.py": {},
    "faaspact-verifier-master/faaspact_verifier/types.py": {},
    "faaspact-verifier-master/faaspact_verifier/use_verifier.py": {
        "use_verifier": {
            "name": "use_verifier",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [
                    "Context"
                ],
                "provider": [
                    "str"
                ],
                "provider_state_fixture_by_descriptor": [
                    "Dict[(str, ProviderStateFixture)]"
                ],
                "faasport": [
                    "Faasport"
                ],
                "publish_results": [
                    "bool"
                ],
                "failon": [
                    "FrozenSet"
                ],
                "provider_version": [
                    "str"
                ],
                "always": [
                    "Optional[Callable[([], ContextManager)]]"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/__init__.py": {},
    "faaspact-verifier-master/faaspact_verifier/abc/notification_gateway.py": {
        "NotificationGateway.announce_job_results": {
            "name": "announce_job_results",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pacts": [
                    "List[Pact]"
                ],
                "emulator_results_list": [
                    "List[List[EmulatorResult]]"
                ],
                "verification_results_list": [
                    "List[List[VerificationResult]]"
                ],
                "results_published": [
                    "bool"
                ],
                "succeeded": [
                    "bool"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/abc/pact_broker_gateway.py": {
        "PactBrokerGateway.fetch_provider_pacts": {
            "name": "fetch_provider_pacts",
            "location": 11,
            "return": [
                "List[Pact]"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ]
            }
        },
        "PactBrokerGateway.provide_verification_results": {
            "name": "provide_verification_results",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider_version": [
                    "str"
                ],
                "pact": [
                    "Pact"
                ],
                "verification_results": [
                    "List[VerificationResult]"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/abc/verifier.py": {
        "Verifier.verify_pact": {
            "name": "verify_pact",
            "location": 11,
            "return": [
                "List[VerificationResult]"
            ],
            "arguments": {
                "self": [],
                "pact": [
                    "Pact"
                ],
                "emulator_results": [
                    "List[EmulatorResult]"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/abc/__init__.py": {},
    "faaspact-verifier-master/faaspact_verifier/delivery/cli.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 57,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "_current_commit_sha": {
            "name": "_current_commit_sha",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "faaspact-verifier-master/faaspact_verifier/delivery/github_prs.py": {
        "fetch_feature_pacts": {
            "name": "fetch_feature_pacts",
            "location": 17,
            "return": [
                "FrozenSet[str]"
            ],
            "arguments": {
                "pull_request_url": [
                    "str"
                ]
            }
        },
        "_pluck_feature_pacts": {
            "name": "_pluck_feature_pacts",
            "location": 35,
            "return": [
                "FrozenSet[str]"
            ],
            "arguments": {
                "pr_body": [
                    "str"
                ]
            }
        },
        "_pluck_pull_request_info": {
            "name": "_pluck_pull_request_info",
            "location": 73,
            "return": [
                "PullRequestInfo"
            ],
            "arguments": {
                "pull_request_url": [
                    "str"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/delivery/github_prs_test.py": {
        "TestFetchFeaturePacts.test_fetches_feature_pacts": {
            "name": "test_fetches_feature_pacts",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchFeaturePacts.raises_exception_on_github_failure": {
            "name": "raises_exception_on_github_failure",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/delivery/__init__.py": {},
    "faaspact-verifier-master/faaspact_verifier/entities/emulator.py": {
        "emulate_pact_interactions": {
            "name": "emulate_pact_interactions",
            "location": 12,
            "return": [
                "List[EmulatorResult]"
            ],
            "arguments": {
                "pact": [
                    "Pact"
                ],
                "provider_state_fixture_by_descriptor": [
                    "Dict[(str, ProviderStateFixture)]"
                ],
                "faasport": [
                    "Faasport"
                ],
                "always": [
                    "Optional[AlwaysFixture]"
                ]
            }
        },
        "_emulate_interaction": {
            "name": "_emulate_interaction",
            "location": 27,
            "return": [
                "EmulatorResult"
            ],
            "arguments": {
                "interaction": [
                    "Interaction"
                ],
                "provider_state_fixture_by_descriptor": [
                    "Dict[(str, ProviderStateFixture)]"
                ],
                "faasport": [
                    "Faasport"
                ],
                "always": [
                    "Optional[AlwaysFixture]"
                ]
            }
        },
        "_provider_state_fixtures_with_params": {
            "name": "_provider_state_fixtures_with_params",
            "location": 52,
            "return": [
                "List[Tuple[(ProviderStateFixture, Dict)]]"
            ],
            "arguments": {
                "provider_state_fixture_by_descriptor": [
                    "Dict[(str, ProviderStateFixture)]"
                ],
                "provider_states": [
                    "Tuple[(ProviderState, ...)]"
                ]
            }
        },
        "_pluck_parameter_names": {
            "name": "_pluck_parameter_names",
            "location": 81,
            "return": [
                "FrozenSet[str]"
            ],
            "arguments": {
                "provider_state_fixture": [
                    "Callable"
                ]
            }
        },
        "_use_provider_states": {
            "name": "_use_provider_states",
            "location": 94,
            "return": [
                "Generator"
            ],
            "arguments": {
                "provider_state_fixtures_with_params": [
                    "List[Tuple[(ProviderStateFixture, Dict)]]"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/entities/job.py": {
        "succeeded": {
            "name": "succeeded",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "pact_with_verification_results": [
                    "Iterable[Tuple[(Pact, List[VerificationResult])]]"
                ],
                "failon": [
                    "FrozenSet[str]"
                ]
            }
        },
        "_overlap": {
            "name": "_overlap",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "set_a": [
                    "FrozenSet"
                ],
                "set_b": [
                    "FrozenSet"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/entities/__init__.py": {},
    "faaspact-verifier-master/faaspact_verifier/gateways/logger_notification_gateway.py": {
        "_format_pact_results": {
            "name": "_format_pact_results",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "pact": [
                    "Pact"
                ],
                "emulator_results": [
                    "List[EmulatorResult]"
                ],
                "verification_results": [
                    "List[VerificationResult]"
                ]
            }
        },
        "LoggerNotificationGateway.announce_job_results": {
            "name": "announce_job_results",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pacts": [
                    "List[Pact]"
                ],
                "emulator_results_list": [
                    "List[List[EmulatorResult]]"
                ],
                "verification_results_list": [
                    "List[List[VerificationResult]]"
                ],
                "results_published": [
                    "bool"
                ],
                "succeeded": [
                    "bool"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/gateways/pactman_adapters.py": {
        "PactmanResponse.text": {
            "name": "text",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PactmanResponse.json": {
            "name": "json",
            "location": 13,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PactmanResult.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PactmanResult.fail": {
            "name": "fail",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "path": [
                    "Any"
                ]
            }
        },
        "PactmanResult.messages": {
            "name": "messages",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/gateways/pactman_verifier.py": {
        "_build_pactman_response": {
            "name": "_build_pactman_response",
            "location": 37,
            "return": [
                "pactman_adapters.PactmanResponse"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "_build_pactman_interaction": {
            "name": "_build_pactman_interaction",
            "location": 45,
            "return": [
                "Dict"
            ],
            "arguments": {
                "interaction": [
                    "Interaction"
                ]
            }
        },
        "_drop_none_values": {
            "name": "_drop_none_values",
            "location": 54,
            "return": [
                "Dict"
            ],
            "arguments": {
                "dictionary": [
                    "Dict"
                ]
            }
        },
        "PactmanVerifier.verify_pact": {
            "name": "verify_pact",
            "location": 14,
            "return": [
                "List[VerificationResult]"
            ],
            "arguments": {
                "self": [],
                "pact": [
                    "Pact"
                ],
                "emulator_results": [
                    "List[EmulatorResult]"
                ]
            }
        },
        "PactmanVerifier._verify_interaction": {
            "name": "_verify_interaction",
            "location": 20,
            "return": [
                "VerificationResult"
            ],
            "arguments": {
                "self": [],
                "interaction": [
                    "Interaction"
                ],
                "emulator_result": [
                    "EmulatorResult"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/gateways/pact_broker_gateway.py": {
        "_pluck_pact": {
            "name": "_pluck_pact",
            "location": 56,
            "return": [
                "Pact"
            ],
            "arguments": {
                "raw_pact": [
                    "Dict"
                ],
                "raw_consumer_version": [
                    "Dict"
                ]
            }
        },
        "_pluck_pact_version": {
            "name": "_pluck_pact_version",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_pact": [
                    "Dict"
                ]
            }
        },
        "PactBrokerGateway.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "PactBrokerGateway.fetch_provider_pacts": {
            "name": "fetch_provider_pacts",
            "location": 19,
            "return": [
                "List[Pact]"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ]
            }
        },
        "PactBrokerGateway.provide_verification_results": {
            "name": "provide_verification_results",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider_version": [
                    "str"
                ],
                "pact": [
                    "Pact"
                ],
                "verification_results": [
                    "List[VerificationResult]"
                ]
            }
        },
        "PactBrokerGateway._fetch_latest_provider_pacts": {
            "name": "_fetch_latest_provider_pacts",
            "location": 40,
            "return": [
                "List[Pact]"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "tag": [
                    "Optional[str]"
                ]
            }
        },
        "PactBrokerGateway._fetch_pact_by_href": {
            "name": "_fetch_pact_by_href",
            "location": 46,
            "return": [
                "Pact"
            ],
            "arguments": {
                "self": [],
                "href": [
                    "str"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/gateways/test_pactman_verifier.py": {
        "_make_interaction": {
            "name": "_make_interaction",
            "location": 155,
            "return": [
                "Interaction"
            ],
            "arguments": {
                "response": [
                    "Response"
                ]
            }
        },
        "TestVerifyInteraction.test_response_equality": {
            "name": "test_response_equality",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Response"
                ],
                "should_verify": [
                    "bool"
                ]
            }
        },
        "TestVerifyInteraction.test_fails_if_emulator_result_is_error": {
            "name": "test_fails_if_emulator_result_is_error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyInteraction.test_body_matching_rules": {
            "name": "test_body_matching_rules",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Dict"
                ],
                "should_verify": [
                    "bool"
                ]
            }
        },
        "TestVerifyInteraction.test_header_matching_rules": {
            "name": "test_header_matching_rules",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict"
                ],
                "should_verify": [
                    "bool"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/gateways/__init__.py": {},
    "faaspact-verifier-master/faaspact_verifier/user_defined/always.py": {
        "always": {
            "name": "always",
            "location": 10,
            "return": [
                "AlwaysFixture"
            ],
            "arguments": {
                "func": [
                    "Callable[([], Generator)]"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/user_defined/faasport.py": {
        "faasport": {
            "name": "faasport",
            "location": 9,
            "return": [
                "Faasport"
            ],
            "arguments": {
                "func": [
                    "Faasport"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/user_defined/provider_state.py": {
        "provider_state": {
            "name": "provider_state",
            "location": 10,
            "return": [
                "Callable[([UserProviderStateFixture], ProviderStateFixture)]"
            ],
            "arguments": {
                "descriptor": [
                    "str"
                ]
            }
        },
        "provider_state.provider_state_collector": {
            "name": "provider_state_collector",
            "location": 13,
            "return": [
                "ProviderStateFixture"
            ],
            "arguments": {
                "func": [
                    "UserProviderStateFixture"
                ]
            }
        }
    },
    "faaspact-verifier-master/faaspact_verifier/user_defined/__init__.py": {}
}
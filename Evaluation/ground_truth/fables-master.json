{
    "fables-master/example.py": {},
    "fables-master/noxfile.py": {
        "blacken": {
            "name": "blacken",
            "location": 8,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 14,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "type_check": {
            "name": "type_check",
            "location": 21,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "test": {
            "name": "test",
            "location": 28,
            "return": [],
            "arguments": {
                "session": [],
                "pandas": []
            }
        }
    },
    "fables-master/setup.py": {},
    "fables-master/fables/api.py": {
        "_check_file_size": {
            "name": "_check_file_size",
            "location": 16,
            "return": [
                "Tuple[(bool, int)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_check_stream_size": {
            "name": "_check_stream_size",
            "location": 21,
            "return": [
                "Tuple[(bool, int)]"
            ],
            "arguments": {
                "stream": [
                    "IO[bytes]"
                ]
            }
        },
        "_parse_user_input": {
            "name": "_parse_user_input",
            "location": 28,
            "return": [
                "Tuple[(Optional[str], Optional[IO[bytes]], Dict[(str, str)])]"
            ],
            "arguments": {
                "io": [
                    "Union[(str, IO[bytes], None)]"
                ],
                "calling_func_name": [
                    "str"
                ],
                "password": [
                    "Optional[str]"
                ],
                "passwords": [
                    "Optional[Dict[(str, str)]]"
                ],
                "stream_file_name": [
                    "Optional[str]"
                ]
            }
        },
        "detect": {
            "name": "detect",
            "location": 79,
            "return": [
                "FileNode"
            ],
            "arguments": {
                "io": [
                    "Union[(str, IO[bytes], None)]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 99,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "io": [
                    "Union[(str, IO[bytes], None)]"
                ]
            }
        }
    },
    "fables-master/fables/constants.py": {},
    "fables-master/fables/errors.py": {
        "InsufficientEncodingDetectorConfidenceError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "confidence_threshold": [
                    "float"
                ]
            }
        }
    },
    "fables-master/fables/parse.py": {
        "sniff_delimiter": {
            "name": "sniff_delimiter",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "bytesio": [
                    "IO[bytes]"
                ],
                "encoding": [
                    "Optional[str]"
                ]
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "bytesio": [
                    "IO[bytes]"
                ]
            }
        },
        "_extract_data_frame_from_csv": {
            "name": "_extract_data_frame_from_csv",
            "location": 56,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "bytesio": [
                    "IO[bytes]"
                ],
                "pandas_kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "remove_data_before_header": {
            "name": "remove_data_before_header",
            "location": 73,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "force_numeric": [
                    "bool"
                ]
            }
        },
        "post_process_dataframe": {
            "name": "post_process_dataframe",
            "location": 114,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "force_numeric": [
                    "bool"
                ]
            }
        },
        "parse_csv": {
            "name": "parse_csv",
            "location": 134,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "bytesio": [
                    "IO[bytes]"
                ]
            }
        },
        "parse_excel_sheet": {
            "name": "parse_excel_sheet",
            "location": 153,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "excel_file": [
                    "pd.ExcelFile"
                ],
                "sheet": [
                    "str"
                ]
            }
        },
        "ParseVisitor.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseVisitor.visit": {
            "name": "visit",
            "location": 172,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "FileNode"
                ]
            }
        },
        "ParseVisitor.visit_Csv": {
            "name": "visit_Csv",
            "location": 177,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Csv"
                ]
            }
        },
        "ParseVisitor._visit_excel": {
            "name": "_visit_excel",
            "location": 196,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[(Xls, Xlsx, Xlsb)]"
                ]
            }
        },
        "ParseVisitor.visit_Xls": {
            "name": "visit_Xls",
            "location": 235,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Xls"
                ]
            }
        },
        "ParseVisitor.visit_Xlsx": {
            "name": "visit_Xlsx",
            "location": 238,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Xlsx"
                ]
            }
        },
        "ParseVisitor.visit_Xlsb": {
            "name": "visit_Xlsb",
            "location": 241,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Xlsb"
                ]
            }
        },
        "ParseVisitor.visit_Zip": {
            "name": "visit_Zip",
            "location": 244,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Zip"
                ]
            }
        },
        "ParseVisitor.visit_Directory": {
            "name": "visit_Directory",
            "location": 248,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Directory"
                ]
            }
        },
        "ParseVisitor.visit_Skip": {
            "name": "visit_Skip",
            "location": 252,
            "return": [
                "Iterable[ParseResult]"
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "Skip"
                ]
            }
        }
    },
    "fables-master/fables/results.py": {},
    "fables-master/fables/table.py": {
        "Table.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fables-master/fables/tree.py": {
        "mimetype_from_stream": {
            "name": "mimetype_from_stream",
            "location": 350,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "stream": [
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "extension_from_name": {
            "name": "extension_from_name",
            "location": 361,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "mimetype_and_extension": {
            "name": "mimetype_and_extension",
            "location": 369,
            "return": [
                "Tuple[(Optional[str], Optional[str])]"
            ],
            "arguments": {}
        },
        "node_from_file": {
            "name": "node_from_file",
            "location": 386,
            "return": [
                "FileNode"
            ],
            "arguments": {}
        },
        "StreamManager.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "stream": [
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "StreamManager.__enter__": {
            "name": "__enter__",
            "location": 51,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamManager.__exit__": {
            "name": "__exit__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileNode.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileNode.empty": {
            "name": "empty",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileNode.stream": {
            "name": "stream",
            "location": 95,
            "return": [
                "StreamManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileNode.children": {
            "name": "children",
            "location": 103,
            "return": [
                "Iterator['FileNode']"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileNode.encrypted": {
            "name": "encrypted",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileNode.add_password": {
            "name": "add_password",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "FileNode.password": {
            "name": "password",
            "location": 114,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileNode.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MimeTypeFileNode.is_my_mimetype_or_extension": {
            "name": "is_my_mimetype_or_extension",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "mimetype": [
                    "Optional[str]"
                ],
                "extension": [
                    "Optional[str]"
                ]
            }
        },
        "Zip._bytes_password": {
            "name": "_bytes_password",
            "location": 174,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zip._encrypted_from_bit_signature": {
            "name": "_encrypted_from_bit_signature",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "zf": [
                    "zipfile.ZipFile"
                ]
            }
        },
        "Zip._password_decrypts": {
            "name": "_password_decrypts",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zip.encrypted": {
            "name": "encrypted",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zip.children": {
            "name": "children",
            "location": 219,
            "return": [
                "Iterator[FileNode]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelEncryptionMixin.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelEncryptionMixin.decrypt": {
            "name": "decrypt",
            "location": 265,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "encrypted_stream": [
                    "IO[bytes]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "ExcelEncryptionMixin.encrypted": {
            "name": "encrypted",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelEncryptionMixin.stream": {
            "name": "stream",
            "location": 299,
            "return": [
                "StreamManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.children": {
            "name": "children",
            "location": 339,
            "return": [
                "Iterator[FileNode]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fables-master/fables/__init__.py": {},
    "fables-master/tests/context.py": {},
    "fables-master/tests/__init__.py": {},
    "fables-master/tests/integration/constants.py": {},
    "fables-master/tests/integration/test_it_decrypts_files.py": {
        "test_it_unlocks_files_when_the_password_is_correct": {
            "name": "test_it_unlocks_files_when_the_password_is_correct",
            "location": 23,
            "return": [],
            "arguments": {
                "name": [],
                "password": [],
                "expected_to_be_encrypted": []
            }
        },
        "test_it_raises_an_exception_when_decrypting_a_corrupt_file": {
            "name": "test_it_raises_an_exception_when_decrypting_a_corrupt_file",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "fables-master/tests/integration/test_it_detects_files.py": {
        "test_it_detects_file_metadata": {
            "name": "test_it_detects_file_metadata",
            "location": 34,
            "return": [],
            "arguments": {
                "name": [],
                "node_type": [],
                "mimetype": [],
                "extension": [],
                "num_children": []
            }
        },
        "test_it_detects_when_a_file_is_encrypted": {
            "name": "test_it_detects_when_a_file_is_encrypted",
            "location": 56,
            "return": [],
            "arguments": {
                "name": [],
                "expected_to_be_encrypted": []
            }
        },
        "test_it_raises_a_value_error_for_a_file_name_that_does_not_exist_on_disk": {
            "name": "test_it_raises_a_value_error_for_a_file_name_that_does_not_exist_on_disk",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_it_raises_a_type_error_for_stream_not_read_in_bytes_mode": {
            "name": "test_it_raises_a_type_error_for_stream_not_read_in_bytes_mode",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_it_detects_when_a_file_is_empty": {
            "name": "test_it_detects_when_a_file_is_empty",
            "location": 84,
            "return": [],
            "arguments": {}
        }
    },
    "fables-master/tests/integration/test_it_extracts_files.py": {
        "test_zip_children_nodes_have_file_name_for_named_stream": {
            "name": "test_zip_children_nodes_have_file_name_for_named_stream",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_zip_children_nodes_have_file_name_for_nameless_stream": {
            "name": "test_zip_children_nodes_have_file_name_for_nameless_stream",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "fables-master/tests/integration/test_it_parses_files.py": {
        "_it_parses_a_csv": {
            "name": "_it_parses_a_csv",
            "location": 31,
            "return": [],
            "arguments": {
                "csv_name": [],
                "expected_df": []
            }
        },
        "test_it_parses_a_csv": {
            "name": "test_it_parses_a_csv",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_csv_with_only_a_header": {
            "name": "test_it_parses_a_csv_with_only_a_header",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_stream_parse_is_the_same_as_disk_parse": {
            "name": "test_stream_parse_is_the_same_as_disk_parse",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "_it_parses_an_excel_file_with_one_sheet": {
            "name": "_it_parses_an_excel_file_with_one_sheet",
            "location": 83,
            "return": [],
            "arguments": {
                "excel_name": [],
                "expected_df": [],
                "passwords": []
            }
        },
        "test_it_parses_a_xlsx_with_one_sheet": {
            "name": "test_it_parses_a_xlsx_with_one_sheet",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xlsb_with_one_sheet": {
            "name": "test_it_parses_a_xlsb_with_one_sheet",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xlsb_with_only_a_header": {
            "name": "test_it_parses_a_xlsb_with_only_a_header",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xlsb_with_many_sheets": {
            "name": "test_it_parses_a_xlsb_with_many_sheets",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xlsx_with_many_sheets": {
            "name": "test_it_parses_a_xlsx_with_many_sheets",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xlsx_with_only_a_header": {
            "name": "test_it_parses_a_xlsx_with_only_a_header",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xlsx_with_only_one_cell_filled": {
            "name": "test_it_parses_a_xlsx_with_only_one_cell_filled",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xls_with_one_sheet": {
            "name": "test_it_parses_a_xls_with_one_sheet",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xls_with_many_sheets": {
            "name": "test_it_parses_a_xls_with_many_sheets",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "_validate_basic_csv_and_basic_xlsx_together": {
            "name": "_validate_basic_csv_and_basic_xlsx_together",
            "location": 248,
            "return": [],
            "arguments": {
                "parse_results": [],
                "child_names": []
            }
        },
        "test_it_parses_all_files_in_a_directory": {
            "name": "test_it_parses_all_files_in_a_directory",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "_it_parses_flat_files_in_a_basic_zip": {
            "name": "_it_parses_flat_files_in_a_basic_zip",
            "location": 291,
            "return": [],
            "arguments": {
                "zip_file": [],
                "zip_path": []
            }
        },
        "test_it_parses_flat_files_in_a_basic_zip": {
            "name": "test_it_parses_flat_files_in_a_basic_zip",
            "location": 302,
            "return": [],
            "arguments": {}
        },
        "_validate_side_xls_file": {
            "name": "_validate_side_xls_file",
            "location": 313,
            "return": [],
            "arguments": {
                "xls_result": [],
                "expected_name": []
            }
        },
        "test_it_parses_files_in_a_directory_inside_a_zip": {
            "name": "test_it_parses_files_in_a_directory_inside_a_zip",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_files_in_a_zip_in_a_zip": {
            "name": "test_it_parses_files_in_a_zip_in_a_zip",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_files_in_an_encrypted_zip_with_password": {
            "name": "test_it_parses_files_in_an_encrypted_zip_with_password",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_files_in_an_encrypted_xlsx": {
            "name": "test_it_parses_files_in_an_encrypted_xlsx",
            "location": 404,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_files_in_an_encrypted_xls": {
            "name": "test_it_parses_files_in_an_encrypted_xls",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_nested_encrypted_files": {
            "name": "test_it_parses_nested_encrypted_files",
            "location": 418,
            "return": [],
            "arguments": {}
        },
        "test_it_finds_no_tables_in_an_invalid_csv_plain_text_file": {
            "name": "test_it_finds_no_tables_in_an_invalid_csv_plain_text_file",
            "location": 455,
            "return": [],
            "arguments": {}
        },
        "test_it_finds_tables_in_a_valid_csv_plain_text_file": {
            "name": "test_it_finds_tables_in_a_valid_csv_plain_text_file",
            "location": 474,
            "return": [],
            "arguments": {}
        },
        "test_it_finds_no_tables_in_a_png_file": {
            "name": "test_it_finds_no_tables_in_a_png_file",
            "location": 493,
            "return": [],
            "arguments": {}
        },
        "test_it_raises_a_value_error_for_a_file_name_that_does_not_exist_on_disk": {
            "name": "test_it_raises_a_value_error_for_a_file_name_that_does_not_exist_on_disk",
            "location": 499,
            "return": [],
            "arguments": {}
        },
        "test_it_raises_a_type_error_for_stream_not_read_in_bytes_mode": {
            "name": "test_it_raises_a_type_error_for_stream_not_read_in_bytes_mode",
            "location": 508,
            "return": [],
            "arguments": {}
        },
        "test_it_creates_a_parse_error_for_malformed_csv": {
            "name": "test_it_creates_a_parse_error_for_malformed_csv",
            "location": 520,
            "return": [],
            "arguments": {}
        },
        "test_it_creates_a_parse_error_for_corrupt_file": {
            "name": "test_it_creates_a_parse_error_for_corrupt_file",
            "location": 539,
            "return": [],
            "arguments": {}
        },
        "test_it_removes_columns_that_have_no_headers_and_have_only_null_data_before_parsing": {
            "name": "test_it_removes_columns_that_have_no_headers_and_have_only_null_data_before_parsing",
            "location": 569,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "test_it_parses_a_xls_with_no_extension": {
            "name": "test_it_parses_a_xls_with_no_extension",
            "location": 593,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_xlsx_with_no_extension": {
            "name": "test_it_parses_a_xlsx_with_no_extension",
            "location": 598,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_files_in_a_zip_with_no_extension": {
            "name": "test_it_parses_files_in_a_zip_with_no_extension",
            "location": 603,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_csv_with_missing_opening_rows": {
            "name": "test_it_parses_a_csv_with_missing_opening_rows",
            "location": 609,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_semicolon_seperated_csv": {
            "name": "test_it_parses_a_semicolon_seperated_csv",
            "location": 622,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_a_tab_seperated_csv": {
            "name": "test_it_parses_a_tab_seperated_csv",
            "location": 633,
            "return": [],
            "arguments": {}
        },
        "test_it_parses_files_with_null_opening_rows": {
            "name": "test_it_parses_files_with_null_opening_rows",
            "location": 651,
            "return": [],
            "arguments": {
                "file_name": [],
                "test_callable": [],
                "expected_df": []
            }
        },
        "test_it_parses_files_with_null_leading_and_trailing_cols": {
            "name": "test_it_parses_files_with_null_leading_and_trailing_cols",
            "location": 684,
            "return": [],
            "arguments": {
                "file_name": [],
                "test_callable": [],
                "expected_df": []
            }
        },
        "test_it_parses_files_with_null_middle_cols": {
            "name": "test_it_parses_files_with_null_middle_cols",
            "location": 721,
            "return": [],
            "arguments": {
                "file_name": [],
                "test_callable": [],
                "expected_df": []
            }
        },
        "test_it_parses_files_with_null_middle_rows": {
            "name": "test_it_parses_files_with_null_middle_rows",
            "location": 738,
            "return": [],
            "arguments": {
                "file_name": [],
                "test_callable": [],
                "expected_df": []
            }
        },
        "test_it_parses_files_with_noisy_opening_rows": {
            "name": "test_it_parses_files_with_noisy_opening_rows",
            "location": 756,
            "return": [],
            "arguments": {
                "file_name": [],
                "test_callable": [],
                "expected_df": []
            }
        },
        "test_it_parses_csv_files_with_a_lot_of_json": {
            "name": "test_it_parses_csv_files_with_a_lot_of_json",
            "location": 775,
            "return": [],
            "arguments": {
                "file_name": [],
                "test_callable": [],
                "expected_df": []
            }
        },
        "test_it_parses_files_using_pandas_kwargs": {
            "name": "test_it_parses_files_using_pandas_kwargs",
            "location": 789,
            "return": [],
            "arguments": {
                "file_name": [],
                "pandas_kwargs": []
            }
        },
        "test_force_numeric": {
            "name": "test_force_numeric",
            "location": 865,
            "return": [],
            "arguments": {
                "file_name": [],
                "force_numeric": [],
                "pandas_kwargs": [],
                "expected_df": []
            }
        }
    },
    "fables-master/tests/integration/__init__.py": {},
    "fables-master/tests/unit/test_api.py": {
        "test_check_file_size_detects_when_file_is_too_large": {
            "name": "test_check_file_size_detects_when_file_is_too_large",
            "location": 18,
            "return": [],
            "arguments": {
                "name": [],
                "size": [],
                "expected_to_be_too_big": [],
                "monkeypatch": []
            }
        },
        "test_detect_raises_a_value_error_when_file_is_too_large": {
            "name": "test_detect_raises_a_value_error_when_file_is_too_large",
            "location": 34,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_detect_detects_when_stream_is_too_large": {
            "name": "test_detect_detects_when_stream_is_too_large",
            "location": 58,
            "return": [],
            "arguments": {
                "size": [],
                "expected_to_be_too_big": [],
                "monkeypatch": []
            }
        },
        "test_detect_raises_a_value_error_when_stream_is_too_large": {
            "name": "test_detect_raises_a_value_error_when_stream_is_too_large",
            "location": 71,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "_it_raises_a_value_error_when_passwords_is_not_a_dict": {
            "name": "_it_raises_a_value_error_when_passwords_is_not_a_dict",
            "location": 88,
            "return": [],
            "arguments": {
                "callable": []
            }
        },
        "test_detect_raises_a_value_error_when_passwords_is_not_a_dict": {
            "name": "test_detect_raises_a_value_error_when_passwords_is_not_a_dict",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_parse_raises_a_value_error_when_passwords_is_not_a_dict": {
            "name": "test_parse_raises_a_value_error_when_passwords_is_not_a_dict",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "_it_raises_a_value_error_when_password_is_not_a_str": {
            "name": "_it_raises_a_value_error_when_password_is_not_a_str",
            "location": 104,
            "return": [],
            "arguments": {
                "callable": []
            }
        },
        "test_detect_raises_a_value_error_when_password_is_not_a_str": {
            "name": "test_detect_raises_a_value_error_when_password_is_not_a_str",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_parse_raises_a_value_error_when_password_is_not_a_str": {
            "name": "test_parse_raises_a_value_error_when_password_is_not_a_str",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_parse_raises_value_error_when_no_io_or_tree_is_given": {
            "name": "test_parse_raises_value_error_when_no_io_or_tree_is_given",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_detect_accepts_a_stream_file_name": {
            "name": "test_detect_accepts_a_stream_file_name",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_parse_accepts_a_stream_file_name": {
            "name": "test_parse_accepts_a_stream_file_name",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_node_stream_property_returns_at_byte_0_after_detect": {
            "name": "test_node_stream_property_returns_at_byte_0_after_detect",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_node_stream_property_returns_at_byte_0_after_parse": {
            "name": "test_node_stream_property_returns_at_byte_0_after_parse",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "MockOSStatResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "test_check_file_size_detects_when_file_is_too_large.mock_stat": {
            "name": "mock_stat",
            "location": 21,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_detect_raises_a_value_error_when_file_is_too_large.mock_exists": {
            "name": "mock_exists",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_detect_raises_a_value_error_when_file_is_too_large.mock_stat": {
            "name": "mock_stat",
            "location": 42,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_detect_detects_when_stream_is_too_large.mock_tell": {
            "name": "mock_tell",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_detect_raises_a_value_error_when_stream_is_too_large.mock_tell": {
            "name": "mock_tell",
            "location": 74,
            "return": [],
            "arguments": {}
        }
    },
    "fables-master/tests/unit/test_table.py": {
        "test_table_str": {
            "name": "test_table_str",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "fables-master/tests/unit/test_tree.py": {
        "test_extension_from_name": {
            "name": "test_extension_from_name",
            "location": 16,
            "return": [],
            "arguments": {
                "name": [],
                "expected_extension": []
            }
        },
        "test_stream_manager_raises_runtime_error_for_only_none_args": {
            "name": "test_stream_manager_raises_runtime_error_for_only_none_args",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_it_assigns_the_right_password": {
            "name": "test_it_assigns_the_right_password",
            "location": 91,
            "return": [],
            "arguments": {
                "name": [],
                "passwords": [],
                "expected_password": []
            }
        },
        "test_add_password_to_node": {
            "name": "test_add_password_to_node",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_node_str": {
            "name": "test_node_str",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_mimetype_from_stream_for_empty_stream": {
            "name": "test_mimetype_from_stream_for_empty_stream",
            "location": 110,
            "return": [],
            "arguments": {}
        }
    },
    "fables-master/tests/unit/__init__.py": {}
}
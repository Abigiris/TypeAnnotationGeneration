{
    "faceanalysis-master/algorithms/facenet/vectorize.py": {
        "get_face_vectors_batch": {
            "name": "get_face_vectors_batch",
            "location": 16,
            "return": [
                "List[List[FaceVector]]"
            ],
            "arguments": {
                "img_paths": [
                    "List[str]"
                ],
                "prealigned": [
                    "bool"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "faceanalysis-master/algorithms/face_recognition/vectorize.py": {
        "get_face_embedding": {
            "name": "get_face_embedding",
            "location": 11,
            "return": [
                "Optional[FaceVector]"
            ],
            "arguments": {
                "face": [
                    "Image"
                ]
            }
        },
        "find_faces": {
            "name": "find_faces",
            "location": 20,
            "return": [
                "Iterable[Image]"
            ],
            "arguments": {
                "img": [
                    "Image"
                ]
            }
        },
        "get_face_vectors": {
            "name": "get_face_vectors",
            "location": 25,
            "return": [
                "List[FaceVector]"
            ],
            "arguments": {
                "img_path": [
                    "str"
                ],
                "prealigned": [
                    "bool"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "faceanalysis-master/algorithms/insightface/vectorize.py": {
        "get_face_vectors_batch": {
            "name": "get_face_vectors_batch",
            "location": 16,
            "return": [
                "List[List[FaceVector]]"
            ],
            "arguments": {
                "img_paths": [
                    "List[str]"
                ],
                "prealigned": [
                    "bool"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "faceanalysis-master/app/main.py": {
        "_main": {
            "name": "_main",
            "location": 43,
            "return": [],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "Commands.worker": {
            "name": "worker",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Commands.runserver": {
            "name": "runserver",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Commands.createdb": {
            "name": "createdb",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Commands.dropdb": {
            "name": "dropdb",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/api.py": {
        "ProcessImg.post": {
            "name": "post",
            "location": 73,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessImg.get": {
            "name": "get",
            "location": 129,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "str"
                ]
            }
        },
        "ImgUpload.post": {
            "name": "post",
            "location": 171,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImgMatchList.get": {
            "name": "get",
            "location": 236,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "str"
                ]
            }
        },
        "ImgList.get": {
            "name": "get",
            "location": 264,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetDatabase.get": {
            "name": "get",
            "location": 270,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/face_matcher.py": {
        "_add_entry_to_session": {
            "name": "_add_entry_to_session",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "session": [
                    "Session"
                ]
            }
        },
        "_store_face_vector": {
            "name": "_store_face_vector",
            "location": 35,
            "return": [],
            "arguments": {
                "features": [
                    "FaceVector"
                ],
                "img_id": [
                    "str"
                ],
                "session": [
                    "Session"
                ]
            }
        },
        "_store_matches": {
            "name": "_store_matches",
            "location": 43,
            "return": [],
            "arguments": {
                "this_img_id": [
                    "str"
                ],
                "that_img_id": [
                    "str"
                ],
                "distance_score": [
                    "float"
                ],
                "session": [
                    "Session"
                ]
            }
        },
        "_load_image_ids_and_face_vectors": {
            "name": "_load_image_ids_and_face_vectors",
            "location": 59,
            "return": [
                "Tuple[(List[str], np.array)]"
            ],
            "arguments": {}
        },
        "_prepare_matches": {
            "name": "_prepare_matches",
            "location": 75,
            "return": [],
            "arguments": {
                "matches": [
                    "List[dict]"
                ],
                "that_img_id": [
                    "str"
                ],
                "distance_score": [
                    "float"
                ]
            }
        },
        "_update_img_status": {
            "name": "_update_img_status",
            "location": 93,
            "return": [],
            "arguments": {
                "img_id": [
                    "str"
                ],
                "status": [
                    "Optional[ImageStatusEnum]"
                ],
                "error_msg": [
                    "Optional[str]"
                ]
            }
        },
        "_compute_distances": {
            "name": "_compute_distances",
            "location": 109,
            "return": [
                "np.array"
            ],
            "arguments": {
                "face_encodings": [
                    "np.array"
                ],
                "face_to_compare": [
                    "FaceVector"
                ]
            }
        },
        "process_image": {
            "name": "process_image",
            "location": 120,
            "return": [],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/face_vectorizer.py": {
        "_format_mount_path": {
            "name": "_format_mount_path",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "img_path": [
                    "str"
                ]
            }
        },
        "_format_host_path": {
            "name": "_format_host_path",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "img_path": [
                    "str"
                ]
            }
        },
        "get_face_vectors": {
            "name": "get_face_vectors",
            "location": 33,
            "return": [
                "List[FaceVector]"
            ],
            "arguments": {
                "img_path": [
                    "str"
                ],
                "algorithm": [
                    "str"
                ]
            }
        },
        "face_vector_to_text": {
            "name": "face_vector_to_text",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "vector": [
                    "FaceVector"
                ]
            }
        },
        "face_vector_from_text": {
            "name": "face_vector_from_text",
            "location": 51,
            "return": [
                "FaceVector"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/log.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 10,
            "return": [
                "Logger"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/models.py": {
        "_connect": {
            "name": "_connect",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "init_models": {
            "name": "init_models",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "delete_models": {
            "name": "delete_models",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "get_db_session": {
            "name": "get_db_session",
            "location": 115,
            "return": [
                "Session"
            ],
            "arguments": {
                "commit": []
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/settings.py": {},
    "faceanalysis-master/app/faceanalysis/storage.py": {
        "_get_storage_service": {
            "name": "_get_storage_service",
            "location": 29,
            "return": [
                "Container"
            ],
            "arguments": {}
        },
        "_get_image": {
            "name": "_get_image",
            "location": 39,
            "return": [
                "Object"
            ],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        },
        "store_image": {
            "name": "store_image",
            "location": 53,
            "return": [],
            "arguments": {
                "iterator": [
                    "IO[bytes]"
                ],
                "image_name": [
                    "str"
                ]
            }
        },
        "delete_image": {
            "name": "delete_image",
            "location": 63,
            "return": [],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        },
        "get_image_path": {
            "name": "get_image_path",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/tasks.py": {
        "process_image": {
            "name": "process_image",
            "location": 13,
            "return": [],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/__init__.py": {},
    "faceanalysis-master/app/faceanalysis/domain/docker.py": {
        "process_image": {
            "name": "process_image",
            "location": 19,
            "return": [],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        },
        "get_processing_status": {
            "name": "get_processing_status",
            "location": 35,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        },
        "upload_image": {
            "name": "upload_image",
            "location": 48,
            "return": [],
            "arguments": {
                "stream": [
                    "IO[bytes]"
                ],
                "img_id": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "list_images": {
            "name": "list_images",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "lookup_matching_images": {
            "name": "lookup_matching_images",
            "location": 68,
            "return": [
                "Tuple[(List[str], List[float])]"
            ],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/domain/errors.py": {},
    "faceanalysis-master/app/faceanalysis/domain/faceapi.py": {
        "process_image": {
            "name": "process_image",
            "location": 31,
            "return": [],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        },
        "get_processing_status": {
            "name": "get_processing_status",
            "location": 50,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        },
        "_get_model_id": {
            "name": "_get_model_id",
            "location": 80,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {}
        },
        "upload_image": {
            "name": "upload_image",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "stream": [
                    "IO[bytes]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "list_images": {
            "name": "list_images",
            "location": 120,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "_fetch_faces_for_person": {
            "name": "_fetch_faces_for_person",
            "location": 129,
            "return": [
                "Tuple[(List[str], str)]"
            ],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        },
        "_fetch_matching_faces": {
            "name": "_fetch_matching_faces",
            "location": 151,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "face_ids": [
                    "List[str]"
                ]
            }
        },
        "_fetch_mappings_for_faces": {
            "name": "_fetch_mappings_for_faces",
            "location": 172,
            "return": [
                "List[FaceApiMapping]"
            ],
            "arguments": {
                "face_ids": [
                    "Iterable[str]"
                ]
            }
        },
        "lookup_matching_images": {
            "name": "lookup_matching_images",
            "location": 180,
            "return": [
                "Tuple[(List[str], List[float])]"
            ],
            "arguments": {
                "img_id": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/app/faceanalysis/domain/__init__.py": {},
    "faceanalysis-master/app/tests/test_api.py": {
        "_load_test_image": {
            "name": "_load_test_image",
            "location": 165,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "ApiTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ApiTestCase._upload_img": {
            "name": "_upload_img",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "expected_status_code": []
            }
        },
        "ApiTestCase._process_img": {
            "name": "_process_img",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "img_id": [],
                "expected_status_code": []
            }
        },
        "ApiTestCase._get_imgs": {
            "name": "_get_imgs",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "expected_status_code": []
            }
        },
        "ApiTestCase._get_matches": {
            "name": "_get_matches",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "img_id": [],
                "expected_status_code": []
            }
        },
        "ApiTestCase._wait_for_img_to_finish_processing": {
            "name": "_wait_for_img_to_finish_processing",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "img_id": [],
                "expected_status_code": [],
                "wait_time": [],
                "polling_interval": []
            }
        },
        "ApiTestCase._test_end_to_end_with_matching_imgs": {
            "name": "_test_end_to_end_with_matching_imgs",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "fnames": []
            }
        },
        "ApiTestCase.test_end_to_end_with_one_face_per_img_that_match": {
            "name": "test_end_to_end_with_one_face_per_img_that_match",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_end_to_end_with_multiple_faces_per_img_that_match": {
            "name": "test_end_to_end_with_multiple_faces_per_img_that_match",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_end_to_end_with_one_to_multiple_faces_per_img_that_match": {
            "name": "test_end_to_end_with_one_to_multiple_faces_per_img_that_match",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_upload_and_process_img_without_face": {
            "name": "test_upload_and_process_img_without_face",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_processing_img_that_has_not_yet_been_uploaded": {
            "name": "test_processing_img_that_has_not_yet_been_uploaded",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_upload_and_process_twice": {
            "name": "test_upload_and_process_twice",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_end_to_end_with_different_file_formats": {
            "name": "test_end_to_end_with_different_file_formats",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_network_outages": {
            "name": "test_network_outages",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_queue_failures": {
            "name": "test_queue_failures",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_upload_file_not_allowed": {
            "name": "test_upload_file_not_allowed",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiTestCase.test_upload_arbitrarily_large_file": {
            "name": "test_upload_arbitrarily_large_file",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/app/tests/__init__.py": {},
    "faceanalysis-master/scripts/filter_similar_images/crop_faces.py": {
        "crop_directory": {
            "name": "crop_directory",
            "location": 10,
            "return": [],
            "arguments": {
                "tsv_file": [
                    "str"
                ],
                "config_file": [
                    "str"
                ],
                "input_dir": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ],
                "is_flat_dir": [
                    "bool"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_parse_arguments": {
            "name": "_parse_arguments",
            "location": 41,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        }
    },
    "faceanalysis-master/scripts/filter_similar_images/dedupe_tsv.py": {
        "get_image_from_path": {
            "name": "get_image_from_path",
            "location": 12,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image_path": [
                    "str"
                ]
            }
        },
        "image_to_hash": {
            "name": "image_to_hash",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "image_distance": {
            "name": "image_distance",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "read_tsv": {
            "name": "read_tsv",
            "location": 30,
            "return": [],
            "arguments": {
                "tsv_file": [
                    "str"
                ]
            }
        },
        "print_tsv": {
            "name": "print_tsv",
            "location": 39,
            "return": [],
            "arguments": {
                "image1": [
                    "str"
                ],
                "image2": [
                    "str"
                ],
                "distance": [
                    "str"
                ]
            }
        },
        "dedupe_tsv": {
            "name": "dedupe_tsv",
            "location": 44,
            "return": [],
            "arguments": {
                "tsv_file": [
                    "str"
                ],
                "min_distance": [
                    "float"
                ],
                "hash_cutoff": [
                    "int"
                ]
            }
        },
        "restricted_float": {
            "name": "restricted_float",
            "location": 56,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_parse_arguments": {
            "name": "_parse_arguments",
            "location": 71,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        }
    },
    "faceanalysis-master/scripts/get_famous_people_list/src/get_famous_people_list.py": {
        "get_pages": {
            "name": "get_pages",
            "location": 16,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "demonym_file": [
                    "str"
                ]
            }
        },
        "get_people": {
            "name": "get_people",
            "location": 40,
            "return": [],
            "arguments": {
                "pages": [
                    "List[str]"
                ],
                "output_file": [
                    "str"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 73,
            "return": [],
            "arguments": {}
        }
    },
    "faceanalysis-master/scripts/get_famous_people_list/src/__init__.py": {},
    "faceanalysis-master/scripts/get_famous_people_photos/src/get_famous_people_photos.py": {
        "increment": {
            "name": "increment",
            "location": 46,
            "return": [],
            "arguments": {
                "add_amount": [
                    "int"
                ]
            }
        },
        "reset": {
            "name": "reset",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "get_photos": {
            "name": "get_photos",
            "location": 60,
            "return": [],
            "arguments": {
                "famous_people_file": [
                    "str"
                ]
            }
        },
        "fetch_urls_multithread": {
            "name": "fetch_urls_multithread",
            "location": 82,
            "return": [
                "Tuple[(List[List[str]], List[str])]"
            ],
            "arguments": {
                "unique_people": [
                    "Set[str]"
                ],
                "total_count": [
                    "int"
                ]
            }
        },
        "multiprocess": {
            "name": "multiprocess",
            "location": 111,
            "return": [
                "Tuple[(List[List[str]], List[str])]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ],
                "all_urls": [
                    "List[List[str]]"
                ],
                "people": [
                    "List[str]"
                ],
                "total_count": [
                    "int"
                ],
                "info": [
                    "str"
                ]
            }
        },
        "get_urls": {
            "name": "get_urls",
            "location": 138,
            "return": [
                "Tuple[(List[str], str)]"
            ],
            "arguments": {
                "person": [
                    "str"
                ]
            }
        },
        "safe_match_images": {
            "name": "safe_match_images",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "match_images": {
            "name": "match_images",
            "location": 161,
            "return": [
                "Tuple[(List[str], str)]"
            ],
            "arguments": {
                "thumbnail_urls": [
                    "List[str]"
                ],
                "person": [
                    "str"
                ]
            }
        },
        "dedupe_images": {
            "name": "dedupe_images",
            "location": 199,
            "return": [
                "Tuple[(List[str], str)]"
            ],
            "arguments": {
                "matched_urls": [
                    "List[str]"
                ],
                "person": [
                    "str"
                ]
            }
        },
        "download_urls": {
            "name": "download_urls",
            "location": 224,
            "return": [],
            "arguments": {
                "deduped_urls": [
                    "List[str]"
                ],
                "person": [
                    "str"
                ]
            }
        },
        "url_to_image": {
            "name": "url_to_image",
            "location": 247,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "url_to_img_hash": {
            "name": "url_to_img_hash",
            "location": 263,
            "return": [
                "int"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "image_distance": {
            "name": "image_distance",
            "location": 278,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "IMAGE_HASH"
                ],
                "y": [
                    "IMAGE_HASH"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/get_famous_people_photos/src/__init__.py": {},
    "faceanalysis-master/scripts/preprocessor/src/main.py": {
        "_main": {
            "name": "_main",
            "location": 4,
            "return": [],
            "arguments": {
                "inputdirectory": [
                    "str"
                ],
                "outputdirectory": [
                    "str"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "_cli.directory_type": {
            "name": "directory_type",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "arg": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/preprocessor/src/processor.py": {
        "normalize_images": {
            "name": "normalize_images",
            "location": 10,
            "return": [],
            "arguments": {
                "inputdirectory": [
                    "str"
                ],
                "outputdirectory": [
                    "str"
                ]
            }
        },
        "normalize_image": {
            "name": "normalize_image",
            "location": 30,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "save_image": {
            "name": "save_image",
            "location": 36,
            "return": [],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "img": [
                    "np.ndarray"
                ]
            }
        },
        "get_output_file_name": {
            "name": "get_output_file_name",
            "location": 40,
            "return": [
                "Path"
            ],
            "arguments": {
                "infile": [
                    "Path"
                ],
                "inputpath": [
                    "Path"
                ],
                "outputpath": [
                    "Path"
                ]
            }
        },
        "ensure_dir_exists_for_file": {
            "name": "ensure_dir_exists_for_file",
            "location": 54,
            "return": [],
            "arguments": {
                "file_name": [
                    "Path"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/preprocessor/src/__init__.py": {},
    "faceanalysis-master/scripts/validation/src/validate.py": {
        "_parse_arguments": {
            "name": "_parse_arguments",
            "location": 7,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "_main": {
            "name": "_main",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "faceanalysis-master/scripts/validation/src/__init__.py": {},
    "faceanalysis-master/scripts/validation/src/calculator/calculator.py": {
        "Calculator.calculate": {
            "name": "calculate",
            "location": 14,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "Iterable[Pair]"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/calculator/distance_calculator.py": {
        "DistanceCalculator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance_metric": [
                    "Union[(str, DistanceMetric)]"
                ]
            }
        },
        "DistanceCalculator.calculate": {
            "name": "calculate",
            "location": 25,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "Iterable[Pair]"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/calculator/threshold_calculator.py": {
        "ThresholdCalculator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance_metric": [
                    "Union[(str, DistanceMetric)]"
                ],
                "threshold_metric": [
                    "Union[(str, ThresholdMetric)]"
                ],
                "threshold_start": [
                    "float"
                ],
                "threshold_end": [
                    "float"
                ],
                "threshold_step": [
                    "float"
                ]
            }
        },
        "ThresholdCalculator.calculate": {
            "name": "calculate",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "Iterable[Pair]"
                ]
            }
        },
        "ThresholdCalculator._get_threshold_scorer": {
            "name": "_get_threshold_scorer",
            "location": 57,
            "return": [
                "Callable[([np.ndarray, np.ndarray], float)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/calculator/__init__.py": {},
    "faceanalysis-master/scripts/validation/src/evaluator/evaluator.py": {
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "face_vector_parser": [
                    "FaceVectorParser"
                ],
                "threshold_calculator": [
                    "ThresholdCalculator"
                ],
                "distance_calculator": [
                    "DistanceCalculator"
                ]
            }
        },
        "Evaluator.create_evaluator": {
            "name": "create_evaluator",
            "location": 30,
            "return": [
                "'Evaluator'"
            ],
            "arguments": {
                "cls": [],
                "args": [
                    "Namespace"
                ]
            }
        },
        "Evaluator.compute_metrics": {
            "name": "compute_metrics",
            "location": 53,
            "return": [
                "FaceVectorMetric"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.evaluate": {
            "name": "evaluate",
            "location": 56,
            "return": [
                "EvaluationMetric"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/evaluator/__init__.py": {},
    "faceanalysis-master/scripts/validation/src/metrics/metrics.py": {
        "EvaluationMetric.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "accuracy": [
                    "float"
                ],
                "recall": [
                    "float"
                ],
                "precision": [
                    "float"
                ]
            }
        },
        "EvaluationMetric.accuracy": {
            "name": "accuracy",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluationMetric.recall": {
            "name": "recall",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluationMetric.precision": {
            "name": "precision",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvaluationMetric.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceVectorMetric.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_expected": [
                    "int"
                ],
                "num_missing": [
                    "int"
                ],
                "percentage_missing": [
                    "float"
                ]
            }
        },
        "FaceVectorMetric.num_expected": {
            "name": "num_expected",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceVectorMetric.num_missing": {
            "name": "num_missing",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceVectorMetric.percentage_missing": {
            "name": "percentage_missing",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceVectorMetric.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/metrics/__init__.py": {},
    "faceanalysis-master/scripts/validation/src/parser/container_parser.py": {
        "ContainerParser.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair_parser": [
                    "PairParser"
                ],
                "container_name": [
                    "str"
                ],
                "is_prealigned": [
                    "bool"
                ]
            }
        },
        "ContainerParser._face_vectors": {
            "name": "_face_vectors",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerParser.compute_pairs": {
            "name": "compute_pairs",
            "location": 32,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerParser.compute_metrics": {
            "name": "compute_metrics",
            "location": 38,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerParser._compute_face_vectors": {
            "name": "_compute_face_vectors",
            "location": 41,
            "return": [
                "List[List[List[float]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerParser._get_base_dir_for_volume_mapping": {
            "name": "_get_base_dir_for_volume_mapping",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "full_image_path": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/face_vector_fill_parser.py": {
        "FaceVectorFillParser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container_parser": [
                    "ContainerParser"
                ],
                "embedding_size": [
                    "int"
                ],
                "distance_metric": [
                    "str"
                ]
            }
        },
        "FaceVectorFillParser._build_pipeline": {
            "name": "_build_pipeline",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_size": [
                    "int"
                ],
                "distance_metric": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/face_vector_parser.py": {
        "FaceVectorParser.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container_parser": [
                    "ContainerParser"
                ],
                "parser_pipeline": [
                    "ParserPipeline"
                ],
                "distance_metric": [
                    "str"
                ]
            }
        },
        "FaceVectorParser.compute_pairs": {
            "name": "compute_pairs",
            "location": 20,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceVectorParser.compute_metrics": {
            "name": "compute_metrics",
            "location": 23,
            "return": [
                "FaceVectorMetric"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/face_vector_remove_parser.py": {
        "FaceVectorRemoveParser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container_parser": [
                    "ContainerParser"
                ],
                "distance_metric": [
                    "str"
                ]
            }
        },
        "FaceVectorRemoveParser._build_pipeline": {
            "name": "_build_pipeline",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance_metric": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/pair.py": {
        "Pair.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image1": [
                    "T"
                ],
                "image2": [
                    "T"
                ],
                "is_match": [
                    "bool"
                ]
            }
        },
        "Pair.image1": {
            "name": "image1",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pair.image2": {
            "name": "image2",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pair.is_match": {
            "name": "is_match",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/pair_parser.py": {
        "PairParser.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs_fname": [
                    "str"
                ],
                "image_dir": [
                    "str"
                ]
            }
        },
        "PairParser.compute_pairs": {
            "name": "compute_pairs",
            "location": 16,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairParser.compute_metrics": {
            "name": "compute_metrics",
            "location": 28,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairParser._compute_full_path": {
            "name": "_compute_full_path",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "image_path": [
                    "str"
                ]
            }
        },
        "PairParser._compute_pair": {
            "name": "_compute_pair",
            "location": 40,
            "return": [
                "Pair"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/parser_base.py": {
        "ParserBase.compute_pairs": {
            "name": "compute_pairs",
            "location": 11,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserBase.compute_metrics": {
            "name": "compute_metrics",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/__init__.py": {},
    "faceanalysis-master/scripts/validation/src/parser/pipeline/parser_pipeline.py": {
        "ParserPipeline.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container_parser": [
                    "ContainerParser"
                ]
            }
        },
        "ParserPipeline._pairs": {
            "name": "_pairs",
            "location": 22,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserPipeline.build": {
            "name": "build",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "funcs": [
                    "Iterable[Callable[([Iterable[Pair]], Iterable[Pair])]]"
                ]
            }
        },
        "ParserPipeline.execute_pipeline": {
            "name": "execute_pipeline",
            "location": 31,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/pipeline/parser_pipeline_funcs.py": {
        "fill_empty": {
            "name": "fill_empty",
            "location": 7,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "pairs": [
                    "Iterable[Pair]"
                ],
                "embedding_size": [
                    "int"
                ]
            }
        },
        "remove_empty": {
            "name": "remove_empty",
            "location": 14,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "pairs": [
                    "Iterable[Pair]"
                ]
            }
        },
        "filter_target": {
            "name": "filter_target",
            "location": 18,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "pairs": [
                    "Iterable[Pair]"
                ],
                "distance_metric": [
                    "str"
                ]
            }
        },
        "_compute_target": {
            "name": "_compute_target",
            "location": 23,
            "return": [
                "Pair"
            ],
            "arguments": {
                "pair": [
                    "Pair"
                ],
                "distance_metric": [
                    "str"
                ]
            }
        }
    },
    "faceanalysis-master/scripts/validation/src/parser/pipeline/__init__.py": {}
}
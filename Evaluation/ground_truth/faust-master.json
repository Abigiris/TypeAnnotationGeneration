{
    "faust-master/setup.py": {
        "add_default": {
            "name": "add_default",
            "location": 127,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "add_doc": {
            "name": "add_doc",
            "location": 132,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "strip_comments": {
            "name": "strip_comments",
            "location": 151,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "_pip_requirement": {
            "name": "_pip_requirement",
            "location": 155,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "_reqs": {
            "name": "_reqs",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "reqs": {
            "name": "reqs",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "extras": {
            "name": "extras",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "extras_require": {
            "name": "extras_require",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "ve_build_ext.run": {
            "name": "run",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ve_build_ext.build_extension": {
            "name": "build_extension",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "ext": []
            }
        }
    },
    "faust-master/docs/conf.py": {
        "configcheck_project_settings": {
            "name": "configcheck_project_settings",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "configcheck_should_ignore": {
            "name": "configcheck_should_ignore",
            "location": 122,
            "return": [],
            "arguments": {
                "setting": []
            }
        }
    },
    "faust-master/docs/_ext/faustdocs.py": {
        "typeify": {
            "name": "typeify",
            "location": 57,
            "return": [],
            "arguments": {
                "S": [],
                "type": []
            }
        },
        "shorten": {
            "name": "shorten",
            "location": 63,
            "return": [],
            "arguments": {
                "S": [],
                "newtarget": [],
                "src_dict": []
            }
        },
        "get_abbr": {
            "name": "get_abbr",
            "location": 73,
            "return": [],
            "arguments": {
                "pre": [],
                "rest": [],
                "type": [],
                "orig": []
            }
        },
        "resolve": {
            "name": "resolve",
            "location": 92,
            "return": [],
            "arguments": {
                "S": [],
                "type": []
            }
        },
        "pkg_of": {
            "name": "pkg_of",
            "location": 113,
            "return": [],
            "arguments": {
                "module_fqdn": []
            }
        },
        "basename": {
            "name": "basename",
            "location": 117,
            "return": [],
            "arguments": {
                "module_fqdn": []
            }
        },
        "modify_textnode": {
            "name": "modify_textnode",
            "location": 121,
            "return": [],
            "arguments": {
                "T": [],
                "newtarget": [],
                "node": [],
                "src_dict": [],
                "type": []
            }
        },
        "maybe_resolve_abbreviations": {
            "name": "maybe_resolve_abbreviations",
            "location": 130,
            "return": [],
            "arguments": {
                "app": [],
                "env": [],
                "node": [],
                "contnode": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 151,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "faust-master/docs/_ext/typehints.py": {
        "format_annotation": {
            "name": "format_annotation",
            "location": 11,
            "return": [],
            "arguments": {
                "annotation": []
            }
        },
        "process_signature": {
            "name": "process_signature",
            "location": 99,
            "return": [],
            "arguments": {
                "app": [],
                "what": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "obj": [],
                "options": [],
                "signature": [],
                "return_annotation": []
            }
        },
        "process_docstring": {
            "name": "process_docstring",
            "location": 116,
            "return": [],
            "arguments": {
                "app": [],
                "what": [],
                "name": [],
                "obj": [],
                "options": [],
                "lines": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 167,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "faust-master/examples/concurrency.py": {},
    "faust-master/examples/hello_world.py": {},
    "faust-master/examples/leader.py": {},
    "faust-master/examples/livecheck.py": {
        "create_order.on_order_sent": {
            "name": "on_order_sent",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": [
                    "FutureMessage"
                ]
            }
        }
    },
    "faust-master/examples/tableofset.py": {},
    "faust-master/examples/tabletest.py": {},
    "faust-master/examples/task_queue.py": {
        "task": {
            "name": "task",
            "location": 89,
            "return": [
                "Task"
            ],
            "arguments": {
                "fun": [
                    "Callable"
                ]
            }
        },
        "Request.handler": {
            "name": "handler",
            "location": 40,
            "return": [
                "Callable[(..., Awaitable)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Callable[(..., Awaitable)]"
                ]
            }
        },
        "Task.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/examples/windowed_aggregation.py": {
        "window_processor": {
            "name": "window_processor",
            "location": 34,
            "return": [],
            "arguments": {
                "key": [],
                "events": []
            }
        }
    },
    "faust-master/examples/withdrawals.py": {
        "generate_withdrawals_dict": {
            "name": "generate_withdrawals_dict",
            "location": 82,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "generate_withdrawals": {
            "name": "generate_withdrawals",
            "location": 97,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "faust-master/examples/word_count.py": {},
    "faust-master/examples/__init__.py": {},
    "faust-master/examples/advanced/isolated_partitions_crashing.py": {
        "generate_withdrawals": {
            "name": "generate_withdrawals",
            "location": 92,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "generate_withdrawals_dict": {
            "name": "generate_withdrawals_dict",
            "location": 97,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "faust-master/examples/advanced/rpc.py": {},
    "faust-master/examples/advanced/service.py": {},
    "faust-master/examples/crontab/tz_aware.py": {},
    "faust-master/examples/crontab/tz_unaware.py": {},
    "faust-master/examples/django/manage.py": {},
    "faust-master/examples/django/setup.py": {
        "add_default": {
            "name": "add_default",
            "location": 33,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "add_doc": {
            "name": "add_doc",
            "location": 38,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "strip_comments": {
            "name": "strip_comments",
            "location": 57,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "_pip_requirement": {
            "name": "_pip_requirement",
            "location": 61,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "_reqs": {
            "name": "_reqs",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "reqs": {
            "name": "reqs",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/examples/django/accounts/agents.py": {},
    "faust-master/examples/django/accounts/apps.py": {},
    "faust-master/examples/django/accounts/models.py": {},
    "faust-master/examples/django/accounts/__init__.py": {},
    "faust-master/examples/django/accounts/migrations/0001_initial.py": {},
    "faust-master/examples/django/accounts/migrations/__init__.py": {},
    "faust-master/examples/django/faustapp/app.py": {
        "configure_from_settings": {
            "name": "configure_from_settings",
            "location": 14,
            "return": [],
            "arguments": {
                "app": [],
                "conf": []
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/examples/django/faustapp/apps.py": {},
    "faust-master/examples/django/faustapp/__init__.py": {},
    "faust-master/examples/django/faustapp/migrations/__init__.py": {},
    "faust-master/examples/django/proj/settings.py": {},
    "faust-master/examples/django/proj/urls.py": {},
    "faust-master/examples/django/proj/wsgi.py": {},
    "faust-master/examples/django/proj/__init__.py": {},
    "faust-master/examples/django/proj/__main__.py": {},
    "faust-master/examples/kubernetes/consumer/consumer.py": {
        "get_score_key": {
            "name": "get_score_key",
            "location": 19,
            "return": [],
            "arguments": {
                "score": []
            }
        }
    },
    "faust-master/examples/kubernetes/producer/producer.py": {
        "publish_message": {
            "name": "publish_message",
            "location": 9,
            "return": [],
            "arguments": {
                "producer_instance": [],
                "topic_name": [],
                "key": [],
                "value": []
            }
        },
        "connect_kafka_producer": {
            "name": "connect_kafka_producer",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/examples/windowing/hopping.py": {},
    "faust-master/examples/windowing/tumbling.py": {},
    "faust-master/extra/release/sphinx2rst_config.py": {},
    "faust-master/extra/tools/benchmark.py": {},
    "faust-master/extra/tools/render_configuration_reference.py": {
        "render": {
            "name": "render",
            "location": 230,
            "return": [],
            "arguments": {
                "fh": []
            }
        },
        "Rst.to_ref": {
            "name": "to_ref",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "Type"
                ]
            }
        },
        "Rst.header": {
            "name": "header",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "Rst.header1": {
            "name": "header1",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "Rst.header2": {
            "name": "header2",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "Rst.header3": {
            "name": "header3",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "Rst.header4": {
            "name": "header4",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "Rst.ref": {
            "name": "ref",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ref_class": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Rst.envvar": {
            "name": "envvar",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Rst.const": {
            "name": "const",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Rst._class": {
            "name": "_class",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Rst.option": {
            "name": "option",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Rst.literal": {
            "name": "literal",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Rst.directive": {
            "name": "directive",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "Rst.inforow": {
            "name": "inforow",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Rst.normalize_docstring_indent": {
            "name": "normalize_docstring_indent",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Rst.normalize_indent": {
            "name": "normalize_indent",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "line_start": [
                    "int"
                ]
            }
        },
        "Rst.strip_space": {
            "name": "strip_space",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Rst.reindent": {
            "name": "reindent",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "new_indent": [
                    "int"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "ConfigRef.section": {
            "name": "section",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "Section"
                ],
                "settings": [
                    "List[Param]"
                ]
            }
        },
        "ConfigRef.setting": {
            "name": "setting",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "Param"
                ]
            }
        },
        "ConfigRef.setting_default": {
            "name": "setting_default",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "None"
                ]
            }
        },
        "ConfigRef.setting_metadata": {
            "name": "setting_metadata",
            "location": 184,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "Param"
                ]
            }
        },
        "ConfigRef.settingref": {
            "name": "settingref",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "str"
                ]
            }
        }
    },
    "faust-master/extra/tools/verify_ascending.py": {},
    "faust-master/extra/tools/verify_doc_defaults.py": {
        "verify_settings": {
            "name": "verify_settings",
            "location": 57,
            "return": [
                "Iterator[Error]"
            ],
            "arguments": {
                "rst_path": [
                    "Path"
                ]
            }
        },
        "report_errors": {
            "name": "report_errors",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "errors": [
                    "Iterator[Error]"
                ]
            }
        },
        "carp": {
            "name": "carp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "find_settings_in_rst": {
            "name": "find_settings_in_rst",
            "location": 92,
            "return": [],
            "arguments": {
                "rst_path": [
                    "Path"
                ],
                "locals": [
                    "Dict[(str, Any)]"
                ],
                "builtin_locals": [
                    "Dict[(str, Any)]"
                ],
                "ignore_settings": [
                    "Set[str]"
                ]
            }
        }
    },
    "faust-master/extra/tools/verify_tabletest_changelog.py": {},
    "faust-master/faust/auth.py": {
        "SASLCredentials.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SASLCredentials.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSSAPICredentials.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSSAPICredentials.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLCredentials.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "ssl.SSLContext"
                ]
            }
        },
        "SSLCredentials.__repr__": {
            "name": "__repr__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/channels.py": {
        "Channel.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Channel._get_default_schema": {
            "name": "_get_default_schema",
            "location": 120,
            "return": [
                "SchemaT"
            ],
            "arguments": {
                "self": [],
                "key_type": [
                    "ModelArg"
                ],
                "value_type": [
                    "ModelArg"
                ]
            }
        },
        "Channel.queue": {
            "name": "queue",
            "location": 129,
            "return": [
                "ThrowableQueue"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.clone": {
            "name": "clone",
            "location": 145,
            "return": [
                "ChannelT[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.clone_using_queue": {
            "name": "clone_using_queue",
            "location": 166,
            "return": [
                "ChannelT[T]"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "asyncio.Queue"
                ]
            }
        },
        "Channel._clone": {
            "name": "_clone",
            "location": 170,
            "return": [
                "ChannelT[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel._clone_args": {
            "name": "_clone_args",
            "location": 173,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.stream": {
            "name": "stream",
            "location": 187,
            "return": [
                "StreamT[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.get_topic_name": {
            "name": "get_topic_name",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.send_soon": {
            "name": "send_soon",
            "location": 220,
            "return": [
                "FutureMessage"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.as_future_message": {
            "name": "as_future_message",
            "location": 242,
            "return": [
                "FutureMessage"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "partition": [
                    "int"
                ],
                "timestamp": [
                    "float"
                ],
                "headers": [
                    "HeadersArg"
                ],
                "schema": [
                    "SchemaT"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "callback": [
                    "MessageSentCallback"
                ],
                "eager_partitioning": [
                    "bool"
                ]
            }
        },
        "Channel.prepare_headers": {
            "name": "prepare_headers",
            "location": 282,
            "return": [
                "OpenHeadersArg"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Optional[HeadersArg]"
                ]
            }
        },
        "Channel._future_message_to_event": {
            "name": "_future_message_to_event",
            "location": 334,
            "return": [
                "EventT"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "FutureMessage"
                ]
            }
        },
        "Channel.prepare_key": {
            "name": "prepare_key",
            "location": 359,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "schema": [
                    "SchemaT"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        },
        "Channel.prepare_value": {
            "name": "prepare_value",
            "location": 372,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "V"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "schema": [
                    "SchemaT"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        },
        "Channel._compile_deliver": {
            "name": "_compile_deliver",
            "location": 399,
            "return": [
                "Callable[([Message], Awaitable[None])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel._create_event": {
            "name": "_create_event",
            "location": 412,
            "return": [
                "EventT[T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "headers": [
                    "Optional[HeadersArg]"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Channel.empty": {
            "name": "empty",
            "location": 432,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.on_stop_iteration": {
            "name": "on_stop_iteration",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.derive": {
            "name": "derive",
            "location": 487,
            "return": [
                "ChannelT[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__aiter__": {
            "name": "__aiter__",
            "location": 496,
            "return": [
                "ChannelT[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel._throw": {
            "name": "_throw",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "Channel.__repr__": {
            "name": "__repr__",
            "location": 518,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel._object_id_as_hex": {
            "name": "_object_id_as_hex",
            "location": 536,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__str__": {
            "name": "__str__",
            "location": 540,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.subscriber_count": {
            "name": "subscriber_count",
            "location": 545,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.label": {
            "name": "label",
            "location": 550,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedChannel.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "SerializedChannel._contribute_to_schema": {
            "name": "_contribute_to_schema",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "SchemaT"
                ]
            }
        },
        "SerializedChannel._get_default_schema": {
            "name": "_get_default_schema",
            "location": 611,
            "return": [
                "SchemaT"
            ],
            "arguments": {
                "self": [],
                "key_type": [
                    "ModelArg"
                ],
                "value_type": [
                    "ModelArg"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "allow_empty": [
                    "bool"
                ]
            }
        },
        "SerializedChannel._clone_args": {
            "name": "_clone_args",
            "location": 626,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedChannel.prepare_key": {
            "name": "prepare_key",
            "location": 635,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "schema": [
                    "SchemaT"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        },
        "SerializedChannel.prepare_value": {
            "name": "prepare_value",
            "location": 650,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "V"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "schema": [
                    "SchemaT"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        }
    },
    "faust-master/faust/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "headers": [
                    "Optional[HeadersArg]"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Event._attach": {
            "name": "_attach",
            "location": 222,
            "return": [
                "Awaitable[RecordMetadata]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(ChannelT, str)]"
                ],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "partition": [
                    "int"
                ],
                "timestamp": [
                    "float"
                ],
                "headers": [
                    "HeadersArg"
                ],
                "schema": [
                    "SchemaT"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "callback": [
                    "MessageSentCallback"
                ]
            }
        },
        "Event.ack": {
            "name": "ack",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/exceptions.py": {
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "ValidationError.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/joins.py": {
        "Join.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Join.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Join.__ne__": {
            "name": "__ne__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "faust-master/faust/streams.py": {
        "current_event": {
            "name": "current_event",
            "location": 77,
            "return": [
                "Optional[EventT]"
            ],
            "arguments": {}
        },
        "Stream.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "AsyncIterator[T_co]"
                ]
            }
        },
        "Stream.get_active_stream": {
            "name": "get_active_stream",
            "location": 164,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.get_root_stream": {
            "name": "get_root_stream",
            "location": 194,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._iter_ll_forwards": {
            "name": "_iter_ll_forwards",
            "location": 198,
            "return": [
                "Iterator[StreamT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._iter_ll_backwards": {
            "name": "_iter_ll_backwards",
            "location": 201,
            "return": [
                "Iterator[StreamT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._iter_ll": {
            "name": "_iter_ll",
            "location": 204,
            "return": [
                "Iterator[StreamT]"
            ],
            "arguments": {
                "self": [],
                "dir_": [
                    "_LinkedListDirection"
                ]
            }
        },
        "Stream.add_processor": {
            "name": "add_processor",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processor": [
                    "Processor[T]"
                ]
            }
        },
        "Stream.info": {
            "name": "info",
            "location": 231,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.clone": {
            "name": "clone",
            "location": 248,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._chain": {
            "name": "_chain",
            "location": 259,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.noack": {
            "name": "noack",
            "location": 272,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.enumerate": {
            "name": "enumerate",
            "location": 397,
            "return": [
                "AsyncIterable[Tuple[(int, T_co)]]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ]
            }
        },
        "Stream.through": {
            "name": "through",
            "location": 405,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(str, ChannelT)]"
                ]
            }
        },
        "Stream._enable_passive": {
            "name": "_enable_passive",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ]
            }
        },
        "Stream._channel_stop_iteration": {
            "name": "_channel_stop_iteration",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Any"
                ]
            }
        },
        "Stream.echo": {
            "name": "echo",
            "location": 487,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.group_by": {
            "name": "group_by",
            "location": 507,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "GroupByKeyArg"
                ]
            }
        },
        "Stream.filter": {
            "name": "filter",
            "location": 606,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Processor[T]"
                ]
            }
        },
        "Stream.derive_topic": {
            "name": "derive_topic",
            "location": 638,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Stream.combine": {
            "name": "combine",
            "location": 674,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.contribute_to_stream": {
            "name": "contribute_to_stream",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "StreamT"
                ]
            }
        },
        "Stream.join": {
            "name": "join",
            "location": 697,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.left_join": {
            "name": "left_join",
            "location": 701,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.inner_join": {
            "name": "inner_join",
            "location": 705,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.outer_join": {
            "name": "outer_join",
            "location": 709,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._join": {
            "name": "_join",
            "location": 713,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "join_strategy": [
                    "JoinT"
                ]
            }
        },
        "Stream.__iter__": {
            "name": "__iter__",
            "location": 747,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.__next__": {
            "name": "__next__",
            "location": 750,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.__aiter__": {
            "name": "__aiter__",
            "location": 753,
            "return": [
                "AsyncIterator[T_co]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._set_current_event": {
            "name": "_set_current_event",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "Stream.__and__": {
            "name": "__and__",
            "location": 967,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Stream.__copy__": {
            "name": "__copy__",
            "location": 970,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._repr_info": {
            "name": "_repr_info",
            "location": 973,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.label": {
            "name": "label",
            "location": 979,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._repr_channel": {
            "name": "_repr_channel",
            "location": 983,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.shortlabel": {
            "name": "shortlabel",
            "location": 987,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream._human_channel": {
            "name": "_human_channel",
            "location": 997,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/topics.py": {
        "Topic.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Topic._compile_decode": {
            "name": "_compile_decode",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.send_soon": {
            "name": "send_soon",
            "location": 196,
            "return": [
                "FutureMessage"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic._clone_args": {
            "name": "_clone_args",
            "location": 242,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.pattern": {
            "name": "pattern",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Union[(str, Pattern)]"
                ]
            }
        },
        "Topic.partitions": {
            "name": "partitions",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partitions": [
                    "int"
                ]
            }
        },
        "Topic.derive": {
            "name": "derive",
            "location": 304,
            "return": [
                "ChannelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.derive_topic": {
            "name": "derive_topic",
            "location": 315,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.get_topic_name": {
            "name": "get_topic_name",
            "location": 357,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic._topic_name_or_default": {
            "name": "_topic_name_or_default",
            "location": 428,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[Union[(str, ChannelT)]]"
                ]
            }
        },
        "Topic._on_published": {
            "name": "_on_published",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "asyncio.Future"
                ],
                "message": [
                    "FutureMessage"
                ],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "Topic.__aiter__": {
            "name": "__aiter__",
            "location": 480,
            "return": [
                "ChannelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.__str__": {
            "name": "__str__",
            "location": 493,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/windows.py": {
        "_PyHoppingWindow.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Seconds"
                ],
                "step": [
                    "Seconds"
                ],
                "expires": [
                    "Seconds"
                ]
            }
        },
        "_PyHoppingWindow.ranges": {
            "name": "ranges",
            "location": 40,
            "return": [
                "List[WindowRange]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "_PyHoppingWindow.stale": {
            "name": "stale",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ],
                "latest_timestamp": [
                    "float"
                ]
            }
        },
        "_PyHoppingWindow.current": {
            "name": "current",
            "location": 51,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "_PyHoppingWindow.delta": {
            "name": "delta",
            "location": 58,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ],
                "d": [
                    "Seconds"
                ]
            }
        },
        "_PyHoppingWindow.earliest": {
            "name": "earliest",
            "location": 61,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "_PyHoppingWindow._start_initial_range": {
            "name": "_start_initial_range",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "_PyHoppingWindow._stale_before": {
            "name": "_stale_before",
            "location": 69,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "latest_timestamp": [
                    "float"
                ],
                "expires": [
                    "float"
                ]
            }
        },
        "TumblingWindow.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Seconds"
                ],
                "expires": [
                    "Seconds"
                ]
            }
        },
        "_PySlidingWindow.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "before": [
                    "Seconds"
                ],
                "after": [
                    "Seconds"
                ],
                "expires": [
                    "Seconds"
                ]
            }
        },
        "_PySlidingWindow.ranges": {
            "name": "ranges",
            "location": 116,
            "return": [
                "List[WindowRange]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "_PySlidingWindow.stale": {
            "name": "stale",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ],
                "latest_timestamp": [
                    "float"
                ]
            }
        },
        "_PySlidingWindow._stale_before": {
            "name": "_stale_before",
            "location": 138,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "expires": [
                    "float"
                ],
                "latest_timestamp": [
                    "float"
                ]
            }
        },
        "_PySlidingWindow.current": {
            "name": "current",
            "location": 141,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "_PySlidingWindow.delta": {
            "name": "delta",
            "location": 145,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ],
                "d": [
                    "Seconds"
                ]
            }
        },
        "_PySlidingWindow.earliest": {
            "name": "earliest",
            "location": 148,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        }
    },
    "faust-master/faust/worker.py": {
        "format_log_arguments": {
            "name": "format_log_arguments",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "arg": [
                    "Any"
                ],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "_partition_set_logtable": {
            "name": "_partition_set_logtable",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "arg": [
                    "Iterable[TP]"
                ]
            }
        },
        "_repr_partition_set": {
            "name": "_repr_partition_set",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "Set[int]"
                ]
            }
        },
        "_iter_consecutive_numbers": {
            "name": "_iter_consecutive_numbers",
            "location": 125,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "s": [
                    "Iterable[int]"
                ]
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Worker._on_sigint": {
            "name": "_on_sigint",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_sigterm": {
            "name": "_on_sigterm",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._flag_as_shutdown_by_signal": {
            "name": "_flag_as_shutdown_by_signal",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_startup_end_spinner": {
            "name": "_on_startup_end_spinner",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_shutdown_immediately": {
            "name": "_on_shutdown_immediately",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 313,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.change_workdir": {
            "name": "change_workdir",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Worker.autodiscover": {
            "name": "autodiscover",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._setproctitle": {
            "name": "_setproctitle",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "str"
                ]
            }
        },
        "Worker._proc_ident": {
            "name": "_proc_ident",
            "location": 348,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._proc_web_ident": {
            "name": "_proc_web_ident",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.on_worker_shutdown": {
            "name": "on_worker_shutdown",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.on_setup_root_logger": {
            "name": "on_setup_root_logger",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "Worker._disable_spinner_if_level_below_WARN": {
            "name": "_disable_spinner_if_level_below_WARN",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ]
            }
        },
        "Worker._setup_spinner_handler": {
            "name": "_setup_spinner_handler",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "setproctitle": {
            "name": "setproctitle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/__init__.py": {
        "_extract_arg_from_argv": {
            "name": "_extract_arg_from_argv",
            "location": 76,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "Sequence[str]"
                ]
            }
        },
        "_module.__getattr__": {
            "name": "__getattr__",
            "location": 253,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_module.__dir__": {
            "name": "__dir__",
            "location": 262,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/__main__.py": {},
    "faust-master/faust/agents/actor.py": {
        "Actor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentT"
                ],
                "stream": [
                    "StreamT"
                ],
                "it": [
                    "_T"
                ],
                "index": [
                    "int"
                ],
                "active_partitions": [
                    "Set[TP]"
                ]
            }
        },
        "Actor.cancel": {
            "name": "cancel",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.label": {
            "name": "label",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterableActor.__aiter__": {
            "name": "__aiter__",
            "location": 82,
            "return": [
                "AsyncIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterableActor.traceback": {
            "name": "traceback",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitableActor.__await__": {
            "name": "__await__",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitableActor.traceback": {
            "name": "traceback",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/agents/agent.py": {
        "current_agent": {
            "name": "current_agent",
            "location": 153,
            "return": [
                "Optional[AgentT]"
            ],
            "arguments": {}
        },
        "Agent.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "AgentFun"
                ]
            }
        },
        "Agent.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 232,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.actor_tracebacks": {
            "name": "actor_tracebacks",
            "location": 238,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._new_supervisor": {
            "name": "_new_supervisor",
            "location": 284,
            "return": [
                "SupervisorStrategyT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._get_supervisor_strategy": {
            "name": "_get_supervisor_strategy",
            "location": 302,
            "return": [
                "Type[SupervisorStrategyT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._get_active_partitions": {
            "name": "_get_active_partitions",
            "location": 327,
            "return": [
                "Optional[Set[TP]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.cancel": {
            "name": "cancel",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._on_first_isolated_partition_assigned": {
            "name": "_on_first_isolated_partition_assigned",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Agent.info": {
            "name": "info",
            "location": 432,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.clone": {
            "name": "clone",
            "location": 447,
            "return": [
                "AgentT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.test_context": {
            "name": "test_context",
            "location": 455,
            "return": [
                "AgentTestWrapperT"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ],
                "supervisor_strategy": [
                    "SupervisorStrategyT"
                ],
                "on_error": [
                    "AgentErrorHandler"
                ]
            }
        },
        "Agent._prepare_channel": {
            "name": "_prepare_channel",
            "location": 478,
            "return": [
                "ChannelT"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(str, ChannelT)]"
                ],
                "internal": [
                    "bool"
                ],
                "schema": [
                    "SchemaT"
                ],
                "key_type": [
                    "ModelArg"
                ],
                "value_type": [
                    "ModelArg"
                ]
            }
        },
        "Agent.__call__": {
            "name": "__call__",
            "location": 504,
            "return": [
                "ActorRefT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.actor_from_stream": {
            "name": "actor_from_stream",
            "location": 532,
            "return": [
                "ActorRefT"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Optional[StreamT]"
                ]
            }
        },
        "Agent.add_sink": {
            "name": "add_sink",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "SinkT"
                ]
            }
        },
        "Agent.stream": {
            "name": "stream",
            "location": 583,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ],
                "active_partitions": [
                    "Set[TP]"
                ]
            }
        },
        "Agent._maybe_unwrap_reply_request": {
            "name": "_maybe_unwrap_reply_request",
            "location": 604,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "V"
                ]
            }
        },
        "Agent._response_class": {
            "name": "_response_class",
            "location": 715,
            "return": [
                "Type[ReqRepResponse]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Agent._create_req": {
            "name": "_create_req",
            "location": 800,
            "return": [
                "Tuple[(V, Optional[HeadersArg])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "reply_to": [
                    "ReplyToArg"
                ],
                "correlation_id": [
                    "str"
                ],
                "headers": [
                    "HeadersArg"
                ]
            }
        },
        "Agent._request_class": {
            "name": "_request_class",
            "location": 827,
            "return": [
                "Type[ReqRepRequest]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "V"
                ]
            }
        },
        "Agent._get_strtopic": {
            "name": "_get_strtopic",
            "location": 860,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "Union[(str, ChannelT, TopicT, AgentT)]"
                ]
            }
        },
        "Agent._repr_info": {
            "name": "_repr_info",
            "location": 989,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.get_topic_names": {
            "name": "get_topic_names",
            "location": 992,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.channel": {
            "name": "channel",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ]
            }
        },
        "Agent.channel_iterator": {
            "name": "channel_iterator",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": [
                    "AsyncIterator"
                ]
            }
        },
        "Agent.label": {
            "name": "label",
            "location": 1032,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._agent_label": {
            "name": "_agent_label",
            "location": 1036,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name_suffix": [
                    "str"
                ]
            }
        },
        "Agent.shortlabel": {
            "name": "shortlabel",
            "location": 1042,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTestWrapper.__init__": {
            "name": "__init__",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTestWrapper.stream": {
            "name": "stream",
            "location": 1068,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTestWrapper.to_message": {
            "name": "to_message",
            "location": 1115,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ]
            }
        },
        "AgentTestWrapper.__aiter__": {
            "name": "__aiter__",
            "location": 1145,
            "return": [
                "AsyncIterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/agents/manager.py": {
        "AgentManager.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "AgentManager.__hash__": {
            "name": "__hash__",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentManager.actor_tracebacks": {
            "name": "actor_tracebacks",
            "location": 61,
            "return": [
                "Mapping[(str, List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentManager.human_tracebacks": {
            "name": "human_tracebacks",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentManager.service_reset": {
            "name": "service_reset",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentManager.cancel": {
            "name": "cancel",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentManager.update_topic_index": {
            "name": "update_topic_index",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentManager._collect_agents_for_update": {
            "name": "_collect_agents_for_update",
            "location": 131,
            "return": [
                "Dict[(AgentT, Set[TP])]"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Set[TP]"
                ]
            }
        }
    },
    "faust-master/faust/agents/models.py": {},
    "faust-master/faust/agents/replies.py": {
        "ReplyPromise.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reply_to": [
                    "str"
                ],
                "correlation_id": [
                    "str"
                ]
            }
        },
        "ReplyPromise.__post_init__": {
            "name": "__post_init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyPromise._verify_correlation_id": {
            "name": "_verify_correlation_id",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "correlation_id": [
                    "str"
                ]
            }
        },
        "ReplyPromise.fulfill": {
            "name": "fulfill",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "correlation_id": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BarrierState.__post_init__": {
            "name": "__post_init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BarrierState._verify_correlation_id": {
            "name": "_verify_correlation_id",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "correlation_id": [
                    "str"
                ]
            }
        },
        "BarrierState.add": {
            "name": "add",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "ReplyPromise"
                ]
            }
        },
        "BarrierState.finalize": {
            "name": "finalize",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BarrierState.fulfill": {
            "name": "fulfill",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "correlation_id": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BarrierState.get_nowait": {
            "name": "get_nowait",
            "location": 127,
            "return": [
                "ReplyTuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyConsumer.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "ReplyConsumer._reply_topic": {
            "name": "_reply_topic",
            "location": 195,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/agents/__init__.py": {},
    "faust-master/faust/app/base.py": {
        "BootStrategy.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "BootStrategy.server": {
            "name": "server",
            "location": 267,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.client_only": {
            "name": "client_only",
            "location": 286,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.producer_only": {
            "name": "producer_only",
            "location": 296,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy._chain": {
            "name": "_chain",
            "location": 303,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.sensors": {
            "name": "sensors",
            "location": 306,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.kafka_producer": {
            "name": "kafka_producer",
            "location": 312,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy._should_enable_kafka_producer": {
            "name": "_should_enable_kafka_producer",
            "location": 318,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.kafka_consumer": {
            "name": "kafka_consumer",
            "location": 323,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy._should_enable_kafka_consumer": {
            "name": "_should_enable_kafka_consumer",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.kafka_client_consumer": {
            "name": "kafka_client_consumer",
            "location": 341,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.agents": {
            "name": "agents",
            "location": 349,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.kafka_conductor": {
            "name": "kafka_conductor",
            "location": 353,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.web_server": {
            "name": "web_server",
            "location": 359,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy._should_enable_web": {
            "name": "_should_enable_web",
            "location": 365,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.web_components": {
            "name": "web_components",
            "location": 370,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategy.tables": {
            "name": "tables",
            "location": 374,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "App._init_signals": {
            "name": "_init_signals",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._init_fixups": {
            "name": "_init_fixups",
            "location": 538,
            "return": [
                "MutableSequence[FixupT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 551,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._prepare_subservice": {
            "name": "_prepare_subservice",
            "location": 628,
            "return": [
                "ServiceT"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "Union[(ServiceT, Type[ServiceT])]"
                ]
            }
        },
        "App.config_from_object": {
            "name": "config_from_object",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "App.finalize": {
            "name": "finalize",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.worker_init": {
            "name": "worker_init",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.worker_init_post_autodiscover": {
            "name": "worker_init_post_autodiscover",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.discover": {
            "name": "discover",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._on_autodiscovery_error": {
            "name": "_on_autodiscovery_error",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App._discovery_modules": {
            "name": "_discovery_modules",
            "location": 727,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.main": {
            "name": "main",
            "location": 743,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.topic": {
            "name": "topic",
            "location": 754,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.channel": {
            "name": "channel",
            "location": 805,
            "return": [
                "ChannelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.agent": {
            "name": "agent",
            "location": 831,
            "return": [
                "Callable[([AgentFun[_T]], AgentT[_T])]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(str, ChannelT[_T])]"
                ]
            }
        },
        "App.task": {
            "name": "task",
            "location": 897,
            "return": [
                "TaskDecoratorRet"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "TaskArg"
                ]
            }
        },
        "App._task": {
            "name": "_task",
            "location": 926,
            "return": [
                "TaskArg"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "TaskArg"
                ],
                "on_leader": [
                    "bool"
                ],
                "traced": [
                    "bool"
                ]
            }
        },
        "App.timer": {
            "name": "timer",
            "location": 950,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "Seconds"
                ],
                "on_leader": [
                    "bool"
                ],
                "traced": [
                    "bool"
                ],
                "name": [
                    "str"
                ],
                "max_drift_correction": [
                    "float"
                ]
            }
        },
        "App.crontab": {
            "name": "crontab",
            "location": 1003,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "cron_format": [
                    "str"
                ]
            }
        },
        "App.service": {
            "name": "service",
            "location": 1056,
            "return": [
                "Type[ServiceT]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[ServiceT]"
                ]
            }
        },
        "App.is_leader": {
            "name": "is_leader",
            "location": 1072,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.stream": {
            "name": "stream",
            "location": 1076,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(AsyncIterable, Iterable)]"
                ],
                "beacon": [
                    "NodeT"
                ]
            }
        },
        "App.Table": {
            "name": "Table",
            "location": 1097,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App.GlobalTable": {
            "name": "GlobalTable",
            "location": 1135,
            "return": [
                "GlobalTableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App.SetTable": {
            "name": "SetTable",
            "location": 1178,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App.SetGlobalTable": {
            "name": "SetGlobalTable",
            "location": 1198,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App.page": {
            "name": "page",
            "location": 1218,
            "return": [
                "Callable[([PageArg], Type[View])]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "App.table_route": {
            "name": "table_route",
            "location": 1242,
            "return": [
                "ViewDecorator"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "shard_param": [
                    "str"
                ]
            }
        },
        "App.command": {
            "name": "command",
            "location": 1285,
            "return": [
                "Callable[([Callable], Type[_AppCommand])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.create_event": {
            "name": "create_event",
            "location": 1304,
            "return": [
                "EventT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "headers": [
                    "HeadersArg"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "App.trace": {
            "name": "trace",
            "location": 1333,
            "return": [
                "ContextManager"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "trace_enabled": [
                    "bool"
                ]
            }
        },
        "App.traced": {
            "name": "traced",
            "location": 1345,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Callable"
                ],
                "name": [
                    "str"
                ],
                "sample_rate": [
                    "float"
                ]
            }
        },
        "App._start_span_from_rebalancing": {
            "name": "_start_span_from_rebalancing",
            "location": 1361,
            "return": [
                "opentracing.Span"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App.in_transaction": {
            "name": "in_transaction",
            "location": 1431,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.LiveCheck": {
            "name": "LiveCheck",
            "location": 1438,
            "return": [
                "_LiveCheck"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 1505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._span_add_default_tags": {
            "name": "_span_add_default_tags",
            "location": 1519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "App.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 1523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 1531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._on_rebalance_when_stopped": {
            "name": "_on_rebalance_when_stopped",
            "location": 1605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._update_assignment": {
            "name": "_update_assignment",
            "location": 1658,
            "return": [
                "Tuple[(Set[TP], Set[TP])]"
            ],
            "arguments": {
                "self": [],
                "assigned": [
                    "Set[TP]"
                ]
            }
        },
        "App._new_producer": {
            "name": "_new_producer",
            "location": 1671,
            "return": [
                "ProducerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._new_consumer": {
            "name": "_new_consumer",
            "location": 1674,
            "return": [
                "ConsumerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._new_conductor": {
            "name": "_new_conductor",
            "location": 1682,
            "return": [
                "ConductorT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._new_transport": {
            "name": "_new_transport",
            "location": 1685,
            "return": [
                "TransportT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._new_producer_transport": {
            "name": "_new_producer_transport",
            "location": 1689,
            "return": [
                "TransportT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._new_cache_backend": {
            "name": "_new_cache_backend",
            "location": 1693,
            "return": [
                "CacheBackendT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.FlowControlQueue": {
            "name": "FlowControlQueue",
            "location": 1697,
            "return": [
                "ThrowableQueue"
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "int"
                ]
            }
        },
        "App.Worker": {
            "name": "Worker",
            "location": 1711,
            "return": [
                "_Worker"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.on_webserver_init": {
            "name": "on_webserver_init",
            "location": 1716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "Web"
                ]
            }
        },
        "App._create_directories": {
            "name": "_create_directories",
            "location": 1720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.__repr__": {
            "name": "__repr__",
            "location": 1725,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._configure": {
            "name": "_configure",
            "location": 1740,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._load_settings": {
            "name": "_load_settings",
            "location": 1747,
            "return": [
                "_Settings"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._prepare_compat_settings": {
            "name": "_prepare_compat_settings",
            "location": 1756,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "MutableMapping"
                ]
            }
        },
        "App._load_settings_from_source": {
            "name": "_load_settings_from_source",
            "location": 1780,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Any"
                ]
            }
        },
        "App.conf": {
            "name": "conf",
            "location": 1802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "_Settings"
                ]
            }
        },
        "App.producer": {
            "name": "producer",
            "location": 1813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ]
            }
        },
        "App.consumer": {
            "name": "consumer",
            "location": 1824,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ]
            }
        },
        "App.transport": {
            "name": "transport",
            "location": 1835,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "TransportT"
                ]
            }
        },
        "App.producer_transport": {
            "name": "producer_transport",
            "location": 1846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "TransportT"
                ]
            }
        },
        "App.cache": {
            "name": "cache",
            "location": 1857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "CacheBackendT"
                ]
            }
        },
        "App.tables": {
            "name": "tables",
            "location": 1861,
            "return": [
                "TableManagerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.topics": {
            "name": "topics",
            "location": 1871,
            "return": [
                "ConductorT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.monitor": {
            "name": "monitor",
            "location": 1893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monitor": [
                    "Monitor"
                ]
            }
        },
        "App._fetcher": {
            "name": "_fetcher",
            "location": 1897,
            "return": [
                "_Fetcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._reply_consumer": {
            "name": "_reply_consumer",
            "location": 1903,
            "return": [
                "ReplyConsumer"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.flow_control": {
            "name": "flow_control",
            "location": 1908,
            "return": [
                "FlowControlEvent"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.http_client": {
            "name": "http_client",
            "location": 1925,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "HttpClientT"
                ]
            }
        },
        "App.assignor": {
            "name": "assignor",
            "location": 1929,
            "return": [
                "PartitionAssignorT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._leader_assignor": {
            "name": "_leader_assignor",
            "location": 1939,
            "return": [
                "LeaderAssignorT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.router": {
            "name": "router",
            "location": 1953,
            "return": [
                "RouterT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.web": {
            "name": "web",
            "location": 1965,
            "return": [
                "Web"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._new_web": {
            "name": "_new_web",
            "location": 1969,
            "return": [
                "Web"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.serializers": {
            "name": "serializers",
            "location": 1973,
            "return": [
                "RegistryT"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.label": {
            "name": "label",
            "location": 1987,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.shortlabel": {
            "name": "shortlabel",
            "location": 1992,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.agent._inner": {
            "name": "_inner",
            "location": 861,
            "return": [
                "AgentT[_T]"
            ],
            "arguments": {
                "fun": [
                    "AgentFun[_T]"
                ]
            }
        },
        "App.task._inner": {
            "name": "_inner",
            "location": 922,
            "return": [
                "TaskArg"
            ],
            "arguments": {
                "fun": [
                    "TaskArg"
                ]
            }
        },
        "App.timer._inner": {
            "name": "_inner",
            "location": 980,
            "return": [
                "TaskArg"
            ],
            "arguments": {
                "fun": [
                    "TaskArg"
                ]
            }
        },
        "App.crontab._inner": {
            "name": "_inner",
            "location": 1039,
            "return": [
                "TaskArg"
            ],
            "arguments": {
                "fun": [
                    "TaskArg"
                ]
            }
        },
        "App.page._decorator": {
            "name": "_decorator",
            "location": 1225,
            "return": [
                "Type[View]"
            ],
            "arguments": {
                "fun": [
                    "PageArg"
                ]
            }
        },
        "App.table_route._decorator": {
            "name": "_decorator",
            "location": 1249,
            "return": [
                "ViewHandlerFun"
            ],
            "arguments": {
                "fun": [
                    "ViewHandlerFun"
                ]
            }
        },
        "App.command._inner": {
            "name": "_inner",
            "location": 1297,
            "return": [
                "Type[_AppCommand]"
            ],
            "arguments": {
                "fun": [
                    "Callable[(..., Awaitable[Any])]"
                ]
            }
        },
        "App.traced.wrapped": {
            "name": "wrapped",
            "location": 1354,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/app/router.py": {
        "Router.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Router.key_store": {
            "name": "key_store",
            "location": 25,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "Router.table_metadata": {
            "name": "table_metadata",
            "location": 32,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "Router.tables_metadata": {
            "name": "tables_metadata",
            "location": 38,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._get_table_topic": {
            "name": "_get_table_topic",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "Router._get_serialized_key": {
            "name": "_get_serialized_key",
            "location": 47,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "Router._get_table": {
            "name": "_get_table",
            "location": 50,
            "return": [
                "CollectionT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Router._urlident": {
            "name": "_urlident",
            "location": 79,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "URL"
                ]
            }
        }
    },
    "faust-master/faust/app/_attached.py": {
        "Attachments.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Attachments.enabled": {
            "name": "enabled",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attachments.put": {
            "name": "put",
            "location": 132,
            "return": [
                "Awaitable[RecordMetadata]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ],
                "channel": [
                    "Union[(str, ChannelT)]"
                ],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "partition": [
                    "int"
                ],
                "timestamp": [
                    "float"
                ],
                "headers": [
                    "HeadersArg"
                ],
                "schema": [
                    "SchemaT"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "callback": [
                    "MessageSentCallback"
                ]
            }
        },
        "Attachments._attachments_for": {
            "name": "_attachments_for",
            "location": 183,
            "return": [
                "Iterator[FutureMessage]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "commit_offset": [
                    "int"
                ]
            }
        }
    },
    "faust-master/faust/app/__init__.py": {},
    "faust-master/faust/assignor/client_assignment.py": {
        "CopartitionedAssignment.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actives": [
                    "Set[int]"
                ],
                "standbys": [
                    "Set[int]"
                ],
                "topics": [
                    "Set[str]"
                ]
            }
        },
        "CopartitionedAssignment.validate": {
            "name": "validate",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopartitionedAssignment.num_assigned": {
            "name": "num_assigned",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.get_unassigned": {
            "name": "get_unassigned",
            "location": 36,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "num_partitions": [
                    "int"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.pop_partition": {
            "name": "pop_partition",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.unassign_partition": {
            "name": "unassign_partition",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.assign_partition": {
            "name": "assign_partition",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.unassign_extras": {
            "name": "unassign_extras",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int"
                ],
                "replicas": [
                    "int"
                ]
            }
        },
        "CopartitionedAssignment.partition_assigned": {
            "name": "partition_assigned",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.promote_standby_to_active": {
            "name": "promote_standby_to_active",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "standby_partition": [
                    "int"
                ]
            }
        },
        "CopartitionedAssignment.get_assigned_partitions": {
            "name": "get_assigned_partitions",
            "location": 65,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.can_assign": {
            "name": "can_assign",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignment.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientAssignment.active_tps": {
            "name": "active_tps",
            "location": 90,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientAssignment.standby_tps": {
            "name": "standby_tps",
            "location": 94,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientAssignment._get_tps": {
            "name": "_get_tps",
            "location": 97,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "ClientAssignment.kafka_protocol_assignment": {
            "name": "kafka_protocol_assignment",
            "location": 105,
            "return": [
                "Sequence[Tuple[(str, List[int])]]"
            ],
            "arguments": {
                "self": [],
                "table_manager": [
                    "TableManagerT"
                ]
            }
        },
        "ClientAssignment.add_copartitioned_assignment": {
            "name": "add_copartitioned_assignment",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignment": [
                    "CopartitionedAssignment"
                ]
            }
        },
        "ClientAssignment.copartitioned_assignment": {
            "name": "copartitioned_assignment",
            "location": 125,
            "return": [
                "CopartitionedAssignment"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "Set[str]"
                ]
            }
        },
        "ClientAssignment._colocated_partitions": {
            "name": "_colocated_partitions",
            "location": 135,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "Set[str]"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "ClientMetadata.__post_init__": {
            "name": "__post_init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/assignor/cluster_assignment.py": {
        "ClusterAssignment.__post_init__": {
            "name": "__post_init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterAssignment.topics": {
            "name": "topics",
            "location": 33,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterAssignment.add_client": {
            "name": "add_client",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "subscription": [
                    "List[str]"
                ],
                "metadata": [
                    "ClientMetadata"
                ]
            }
        },
        "ClusterAssignment.copartitioned_assignments": {
            "name": "copartitioned_assignments",
            "location": 42,
            "return": [
                "CopartMapping"
            ],
            "arguments": {
                "self": [],
                "copartitioned_topics": [
                    "Set[str]"
                ]
            }
        }
    },
    "faust-master/faust/assignor/copartitioned_assignor.py": {
        "CopartitionedAssignor.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "Iterable[str]"
                ],
                "cluster_asgn": [
                    "MutableMapping[(str, CopartitionedAssignment)]"
                ],
                "num_partitions": [
                    "int"
                ],
                "replicas": [
                    "int"
                ],
                "capacity": [
                    "int"
                ]
            }
        },
        "CopartitionedAssignor.get_assignment": {
            "name": "get_assignment",
            "location": 60,
            "return": [
                "MutableMapping[(str, CopartitionedAssignment)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopartitionedAssignor._all_assigned": {
            "name": "_all_assigned",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._assign": {
            "name": "_assign",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._assigned_partition_counts": {
            "name": "_assigned_partition_counts",
            "location": 79,
            "return": [
                "Counter[int]"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._get_client_limit": {
            "name": "_get_client_limit",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._total_assigns_per_partition": {
            "name": "_total_assigns_per_partition",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._unassign_overassigned": {
            "name": "_unassign_overassigned",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._get_unassigned": {
            "name": "_get_unassigned",
            "location": 107,
            "return": [
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._can_assign": {
            "name": "_can_assign",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "assignment": [
                    "CopartitionedAssignment"
                ],
                "partition": [
                    "int"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._client_exhausted": {
            "name": "_client_exhausted",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "assignemnt": [
                    "CopartitionedAssignment"
                ],
                "active": [
                    "bool"
                ],
                "client_limit": [
                    "int"
                ]
            }
        },
        "CopartitionedAssignor._find_promotable_standby": {
            "name": "_find_promotable_standby",
            "location": 133,
            "return": [
                "Optional[CopartitionedAssignment]"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ],
                "candidates": [
                    "Iterator[CopartitionedAssignment]"
                ]
            }
        },
        "CopartitionedAssignor._find_round_robin_assignable": {
            "name": "_find_round_robin_assignable",
            "location": 147,
            "return": [
                "Optional[CopartitionedAssignment]"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ],
                "candidates": [
                    "Iterator[CopartitionedAssignment]"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CopartitionedAssignor._assign_round_robin": {
            "name": "_assign_round_robin",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unassigned": [
                    "Iterable[int]"
                ],
                "active": [
                    "bool"
                ]
            }
        }
    },
    "faust-master/faust/assignor/leader_assignor.py": {
        "LeaderAssignor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "LeaderAssignor._leader_topic": {
            "name": "_leader_topic",
            "location": 30,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderAssignor._leader_topic_name": {
            "name": "_leader_topic_name",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderAssignor._leader_tp": {
            "name": "_leader_tp",
            "location": 43,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderAssignor.is_leader": {
            "name": "is_leader",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/assignor/partition_assignor.py": {
        "PartitionAssignor.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "replicas": [
                    "int"
                ]
            }
        },
        "PartitionAssignor.group_for_topic": {
            "name": "group_for_topic",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "PartitionAssignor.changelog_distribution": {
            "name": "changelog_distribution",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "HostToPartitionMap"
                ]
            }
        },
        "PartitionAssignor._metadata": {
            "name": "_metadata",
            "location": 107,
            "return": [
                "ClientMetadata"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignor._url": {
            "name": "_url",
            "location": 116,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignor.on_assignment": {
            "name": "on_assignment",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignment": [
                    "ConsumerProtocolMemberMetadata"
                ]
            }
        },
        "PartitionAssignor.metadata": {
            "name": "metadata",
            "location": 135,
            "return": [
                "ConsumerProtocolMemberMetadata"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "Set[str]"
                ]
            }
        },
        "PartitionAssignor._group_co_subscribed": {
            "name": "_group_co_subscribed",
            "location": 140,
            "return": [
                "Iterable[Set[str]]"
            ],
            "arguments": {
                "cls": [],
                "topics": [
                    "Set[str]"
                ],
                "subscriptions": [
                    "MemberSubscriptionMapping"
                ]
            }
        },
        "PartitionAssignor._get_copartitioned_groups": {
            "name": "_get_copartitioned_groups",
            "location": 156,
            "return": [
                "CopartitionedGroups"
            ],
            "arguments": {
                "cls": [],
                "topics": [
                    "Set[str]"
                ],
                "cluster": [
                    "ClusterMetadata"
                ],
                "subscriptions": [
                    "MemberSubscriptionMapping"
                ]
            }
        },
        "PartitionAssignor._get_client_metadata": {
            "name": "_get_client_metadata",
            "location": 177,
            "return": [
                "ClientMetadata"
            ],
            "arguments": {
                "cls": [],
                "metadata": [
                    "ConsumerProtocolMemberMetadata"
                ]
            }
        },
        "PartitionAssignor._update_member_urls": {
            "name": "_update_member_urls",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clients_metadata": [
                    "ClientMetadataMapping"
                ]
            }
        },
        "PartitionAssignor.assign": {
            "name": "assign",
            "location": 189,
            "return": [
                "MemberAssignmentMapping"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "ClusterMetadata"
                ],
                "member_metadata": [
                    "MemberMetadataMapping"
                ]
            }
        },
        "PartitionAssignor._trace_assign": {
            "name": "_trace_assign",
            "location": 198,
            "return": [
                "MemberAssignmentMapping"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "ClusterMetadata"
                ],
                "member_metadata": [
                    "MemberMetadataMapping"
                ]
            }
        },
        "PartitionAssignor._assign": {
            "name": "_assign",
            "location": 213,
            "return": [
                "MemberAssignmentMapping"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "ClusterMetadata"
                ],
                "member_metadata": [
                    "MemberMetadataMapping"
                ]
            }
        },
        "PartitionAssignor._perform_assignment": {
            "name": "_perform_assignment",
            "location": 228,
            "return": [
                "MemberAssignmentMapping"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "ClusterMetadata"
                ],
                "member_metadata": [
                    "MemberMetadataMapping"
                ]
            }
        },
        "PartitionAssignor._global_table_standby_assignments": {
            "name": "_global_table_standby_assignments",
            "location": 295,
            "return": [
                "ClientAssignmentMapping"
            ],
            "arguments": {
                "self": [],
                "assignments": [
                    "ClientAssignmentMapping"
                ],
                "partitions_by_topic": [
                    "Mapping[(str, int)]"
                ]
            }
        },
        "PartitionAssignor._protocol_assignments": {
            "name": "_protocol_assignments",
            "location": 318,
            "return": [
                "MemberAssignmentMapping"
            ],
            "arguments": {
                "self": [],
                "assignments": [
                    "ClientAssignmentMapping"
                ],
                "cl_distribution": [
                    "HostToPartitionMap"
                ],
                "topic_groups": [
                    "Mapping[(str, int)]"
                ]
            }
        },
        "PartitionAssignor._compress": {
            "name": "_compress",
            "location": 341,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "raw": [
                    "bytes"
                ]
            }
        },
        "PartitionAssignor._decompress": {
            "name": "_decompress",
            "location": 345,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "compressed": [
                    "bytes"
                ]
            }
        },
        "PartitionAssignor._topics_filtered": {
            "name": "_topics_filtered",
            "location": 349,
            "return": [
                "TopicToPartitionMap"
            ],
            "arguments": {
                "cls": [],
                "assignment": [
                    "TopicToPartitionMap"
                ],
                "topics": [
                    "Set[str]"
                ]
            }
        },
        "PartitionAssignor._get_changelog_distribution": {
            "name": "_get_changelog_distribution",
            "location": 356,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": [],
                "assignments": [
                    "ClientAssignmentMapping"
                ]
            }
        },
        "PartitionAssignor.name": {
            "name": "name",
            "location": 366,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignor.version": {
            "name": "version",
            "location": 370,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignor.assigned_standbys": {
            "name": "assigned_standbys",
            "location": 373,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignor.assigned_actives": {
            "name": "assigned_actives",
            "location": 380,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignor.table_metadata": {
            "name": "table_metadata",
            "location": 387,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "PartitionAssignor.tables_metadata": {
            "name": "tables_metadata",
            "location": 393,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignor.key_store": {
            "name": "key_store",
            "location": 396,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "PartitionAssignor.is_active": {
            "name": "is_active",
            "location": 399,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "PartitionAssignor.is_standby": {
            "name": "is_standby",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        }
    },
    "faust-master/faust/assignor/__init__.py": {},
    "faust-master/faust/cli/agents.py": {
        "agents.agents": {
            "name": "agents",
            "location": 32,
            "return": [
                "Sequence[AgentT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "agents.agent_to_row": {
            "name": "agent_to_row",
            "location": 41,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentT"
                ]
            }
        },
        "agents._name": {
            "name": "_name",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentT"
                ]
            }
        },
        "agents._maybe_topic": {
            "name": "_maybe_topic",
            "location": 52,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentT"
                ]
            }
        },
        "agents._topic": {
            "name": "_topic",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentT"
                ]
            }
        },
        "agents._help": {
            "name": "_help",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "AgentT"
                ]
            }
        }
    },
    "faust-master/faust/cli/base.py": {
        "compat_option": {
            "name": "compat_option",
            "location": 168,
            "return": [
                "Callable[([Any], click.Parameter)]"
            ],
            "arguments": {}
        },
        "find_app": {
            "name": "find_app",
            "location": 257,
            "return": [
                "AppT"
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "prepare_app": {
            "name": "prepare_app",
            "location": 313,
            "return": [
                "AppT"
            ],
            "arguments": {
                "app": [
                    "AppT"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "_apply_options": {
            "name": "_apply_options",
            "location": 337,
            "return": [
                "OptionDecorator"
            ],
            "arguments": {
                "options": [
                    "OptionSequence"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_prepare_cli": {
            "name": "_prepare_cli",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "app": [
                    "Union[(AppT, str)]"
                ],
                "quiet": [
                    "bool"
                ],
                "debug": [
                    "bool"
                ],
                "workdir": [
                    "str"
                ],
                "datadir": [
                    "str"
                ],
                "json": [
                    "bool"
                ],
                "no_color": [
                    "bool"
                ],
                "loop": [
                    "str"
                ]
            }
        },
        "call_command": {
            "name": "call_command",
            "location": 1019,
            "return": [
                "Tuple[(int, IO, IO)]"
            ],
            "arguments": {
                "command": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ],
                "stdout": [
                    "IO"
                ],
                "stderr": [
                    "IO"
                ],
                "side_effects": [
                    "bool"
                ]
            }
        },
        "argument.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "argument.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Any"
                ]
            }
        },
        "argument.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "option.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "option.__call__": {
            "name": "__call__",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Any"
                ]
            }
        },
        "option.__repr__": {
            "name": "__repr__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "compat_option._callback": {
            "name": "_callback",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "_apply_options._inner": {
            "name": "_inner",
            "location": 339,
            "return": [
                "OptionDecorator"
            ],
            "arguments": {
                "fun": [
                    "OptionDecorator"
                ]
            }
        },
        "_Group.get_help": {
            "name": "get_help",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "_Group.get_usage": {
            "name": "get_usage",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "_Group._maybe_import_app": {
            "name": "_maybe_import_app",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "Sequence[str]"
                ]
            }
        },
        "_Group._extract_param": {
            "name": "_extract_param",
            "location": 373,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "Sequence[str]"
                ],
                "shortopt": [
                    "str"
                ],
                "longopt": [
                    "str"
                ]
            }
        },
        "_Group.make_context": {
            "name": "make_context",
            "location": 396,
            "return": [
                "click.Context"
            ],
            "arguments": {
                "self": [],
                "info_name": [
                    "str"
                ],
                "args": [
                    "str"
                ],
                "app": [
                    "AppT"
                ],
                "parent": [
                    "click.Context"
                ],
                "stdout": [
                    "IO"
                ],
                "stderr": [
                    "IO"
                ],
                "side_effects": [
                    "bool"
                ]
            }
        },
        "Command.as_click_command": {
            "name": "as_click_command",
            "location": 517,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Command.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.parse": {
            "name": "parse",
            "location": 554,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "cls": [],
                "argv": [
                    "Sequence[str]"
                ]
            }
        },
        "Command._parse": {
            "name": "_parse",
            "location": 560,
            "return": [
                "Mapping"
            ],
            "arguments": {}
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "Command.__call__": {
            "name": "__call__",
            "location": 605,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.run_using_worker": {
            "name": "run_using_worker",
            "location": 613,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.on_worker_created": {
            "name": "on_worker_created",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "Worker"
                ]
            }
        },
        "Command.as_service": {
            "name": "as_service",
            "location": 627,
            "return": [
                "ServiceT"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Command.worker_for_service": {
            "name": "worker_for_service",
            "location": 636,
            "return": [
                "Worker"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "ServiceT"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Command._Worker": {
            "name": "_Worker",
            "location": 657,
            "return": [
                "Type[Worker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.tabulate": {
            "name": "tabulate",
            "location": 660,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "terminal.TableDataT"
                ],
                "headers": [
                    "Sequence[str]"
                ],
                "wrap_last_row": [
                    "bool"
                ],
                "title": [
                    "str"
                ],
                "title_color": [
                    "str"
                ]
            }
        },
        "Command._tabulate_json": {
            "name": "_tabulate_json",
            "location": 691,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "terminal.TableDataT"
                ],
                "headers": [
                    "Sequence[str]"
                ]
            }
        },
        "Command.table": {
            "name": "table",
            "location": 698,
            "return": [
                "terminal.Table"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "terminal.TableDataT"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "Command.color": {
            "name": "color",
            "location": 705,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Command.dark": {
            "name": "dark",
            "location": 717,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Command.bold": {
            "name": "bold",
            "location": 721,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Command.bold_tail": {
            "name": "bold_tail",
            "location": 725,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Command._table_wrap": {
            "name": "_table_wrap",
            "location": 730,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "terminal.Table"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Command.say": {
            "name": "say",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "file": [
                    "IO"
                ],
                "err": [
                    "IO"
                ]
            }
        },
        "Command.carp": {
            "name": "carp",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Any"
                ]
            }
        },
        "Command.dumps": {
            "name": "dumps",
            "location": 761,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Command.loglevel": {
            "name": "loglevel",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ]
            }
        },
        "Command.blocking_timeout": {
            "name": "blocking_timeout",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "Command.console_port": {
            "name": "console_port",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ]
            }
        },
        "AppCommand.from_handler": {
            "name": "from_handler",
            "location": 811,
            "return": [
                "Callable[([Callable], Type['AppCommand'])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AppCommand.__init__": {
            "name": "__init__",
            "location": 835,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "AppCommand._finalize_app": {
            "name": "_finalize_app",
            "location": 851,
            "return": [
                "AppT"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "AppCommand._app_from_str": {
            "name": "_app_from_str",
            "location": 857,
            "return": [
                "Optional[AppT]"
            ],
            "arguments": {
                "self": [],
                "appstr": [
                    "str"
                ]
            }
        },
        "AppCommand._finalize_concrete_app": {
            "name": "_finalize_concrete_app",
            "location": 866,
            "return": [
                "AppT"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "AppCommand._detect_main_package": {
            "name": "_detect_main_package",
            "location": 874,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "List[str]"
                ]
            }
        },
        "AppCommand.to_key": {
            "name": "to_key",
            "location": 906,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "AppCommand.to_value": {
            "name": "to_value",
            "location": 920,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "AppCommand.to_model": {
            "name": "to_model",
            "location": 935,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[str]"
                ],
                "value": [
                    "str"
                ],
                "serializer": [
                    "CodecArg"
                ]
            }
        },
        "AppCommand.import_relative_to_app": {
            "name": "import_relative_to_app",
            "location": 961,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "AppCommand.to_topic": {
            "name": "to_topic",
            "location": 977,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str"
                ]
            }
        },
        "AppCommand.abbreviate_fqdn": {
            "name": "abbreviate_fqdn",
            "location": 986,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AppCommand.blocking_timeout": {
            "name": "blocking_timeout",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "Command.as_click_command._inner": {
            "name": "_inner",
            "location": 525,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "AppCommand.from_handler._inner": {
            "name": "_inner",
            "location": 816,
            "return": [
                "Type['AppCommand']"
            ],
            "arguments": {
                "fun": [
                    "Callable[(..., Awaitable[Any])]"
                ]
            }
        }
    },
    "faust-master/faust/cli/clean_versions.py": {
        "clean_versions.remove_old_versiondirs": {
            "name": "remove_old_versiondirs",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/cli/completion.py": {
        "completion.shell": {
            "name": "shell",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/cli/faust.py": {},
    "faust-master/faust/cli/livecheck.py": {
        "livecheck.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/cli/model.py": {
        "model._unknown_model": {
            "name": "_unknown_model",
            "location": 53,
            "return": [
                "click.UsageError"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "model.model_fields": {
            "name": "model_fields",
            "location": 62,
            "return": [
                "terminal.TableDataT"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[ModelT]"
                ]
            }
        },
        "model.field": {
            "name": "field",
            "location": 66,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "FieldDescriptorT"
                ]
            }
        },
        "model._type": {
            "name": "_type",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Any"
                ]
            }
        },
        "model.model_to_row": {
            "name": "model_to_row",
            "location": 77,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[ModelT]"
                ]
            }
        },
        "model._name": {
            "name": "_name",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[ModelT]"
                ]
            }
        },
        "model._help": {
            "name": "_help",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[ModelT]"
                ]
            }
        }
    },
    "faust-master/faust/cli/models.py": {
        "models.models": {
            "name": "models",
            "location": 31,
            "return": [
                "Sequence[Type[ModelT]]"
            ],
            "arguments": {
                "self": [],
                "builtins": [
                    "bool"
                ]
            }
        },
        "models.model_to_row": {
            "name": "model_to_row",
            "location": 39,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[ModelT]"
                ]
            }
        },
        "models._name": {
            "name": "_name",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[ModelT]"
                ]
            }
        },
        "models._help": {
            "name": "_help",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[ModelT]"
                ]
            }
        }
    },
    "faust-master/faust/cli/params.py": {
        "CaseInsensitiveChoice.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "Iterable[Any]"
                ]
            }
        },
        "CaseInsensitiveChoice.convert": {
            "name": "convert",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "Optional[click.Parameter]"
                ],
                "ctx": [
                    "Optional[click.Context]"
                ]
            }
        },
        "TCPPort.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLParam.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLParam.convert": {
            "name": "convert",
            "location": 72,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "Optional[click.Parameter]"
                ],
                "ctx": [
                    "Optional[click.Context]"
                ]
            }
        },
        "URLParam.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/cli/reset.py": {},
    "faust-master/faust/cli/send.py": {},
    "faust-master/faust/cli/tables.py": {},
    "faust-master/faust/cli/worker.py": {
        "worker.on_worker_created": {
            "name": "on_worker_created",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "Worker"
                ]
            }
        },
        "worker.as_service": {
            "name": "as_service",
            "location": 59,
            "return": [
                "ServiceT"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "worker._init_worker_options": {
            "name": "_init_worker_options",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "worker._Worker": {
            "name": "_Worker",
            "location": 90,
            "return": [
                "Type[Worker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "worker.banner": {
            "name": "banner",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "Worker"
                ]
            }
        },
        "worker._format_banner_table": {
            "name": "_format_banner_table",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "TableDataT"
                ]
            }
        },
        "worker._banner_title": {
            "name": "_banner_title",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "worker._banner_data": {
            "name": "_banner_data",
            "location": 111,
            "return": [
                "TableDataT"
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "Worker"
                ]
            }
        },
        "worker._human_cython_info": {
            "name": "_human_cython_info",
            "location": 133,
            "return": [
                "Optional[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "worker._human_transport_info": {
            "name": "_human_transport_info",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "Any"
                ]
            }
        },
        "worker._driver_versions": {
            "name": "_driver_versions",
            "location": 149,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "worker.faust_ident": {
            "name": "faust_ident",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "worker.platform": {
            "name": "platform",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/cli/__init__.py": {},
    "faust-master/faust/contrib/sentry.py": {
        "_build_sentry_handler": {
            "name": "_build_sentry_handler",
            "location": 40,
            "return": [
                "Type[_SentryHandler]"
            ],
            "arguments": {}
        },
        "handler_from_dsn": {
            "name": "handler_from_dsn",
            "location": 91,
            "return": [
                "Optional[logging.Handler]"
            ],
            "arguments": {
                "dsn": [
                    "str"
                ],
                "workers": [
                    "int"
                ],
                "include_paths": [
                    "Iterable[str]"
                ],
                "loglevel": [
                    "int"
                ],
                "qsize": [
                    "int"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "AppT"
                ]
            }
        },
        "_build_sentry_handler.FaustSentryHandler.can_record": {
            "name": "can_record",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "_build_sentry_handler.FaustSentryHandler._is_expected_cancel": {
            "name": "_is_expected_cancel",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "_build_sentry_handler.FaustSentryHandler.emit": {
            "name": "emit",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "_build_sentry_handler.FaustSentryHandler.carp": {
            "name": "carp",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        }
    },
    "faust-master/faust/contrib/__init__.py": {},
    "faust-master/faust/fixups/base.py": {
        "Fixup.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Fixup.enabled": {
            "name": "enabled",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixup.autodiscover_modules": {
            "name": "autodiscover_modules",
            "location": 22,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixup.on_worker_init": {
            "name": "on_worker_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/fixups/django.py": {
        "Fixup.enabled": {
            "name": "enabled",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixup.wait_for_django": {
            "name": "wait_for_django",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixup.autodiscover_modules": {
            "name": "autodiscover_modules",
            "location": 73,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixup.on_worker_init": {
            "name": "on_worker_init",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixup.apps": {
            "name": "apps",
            "location": 91,
            "return": [
                "_Apps"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixup.settings": {
            "name": "settings",
            "location": 96,
            "return": [
                "_Settings"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/fixups/__init__.py": {
        "fixups": {
            "name": "fixups",
            "location": 16,
            "return": [
                "Iterator[FixupT]"
            ],
            "arguments": {
                "app": [
                    "AppT"
                ]
            }
        }
    },
    "faust-master/faust/livecheck/app.py": {
        "LiveCheckSensor.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 48,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "LiveCheckSensor.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "LiveCheck.for_app": {
            "name": "for_app",
            "location": 103,
            "return": [
                "'LiveCheck'"
            ],
            "arguments": {
                "cls": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "LiveCheck._contribute_to_app": {
            "name": "_contribute_to_app",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "LiveCheck.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "LiveCheck.current_test": {
            "name": "current_test",
            "location": 174,
            "return": [
                "Optional[TestExecution]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck._can_resolve": {
            "name": "_can_resolve",
            "location": 179,
            "return": [
                "asyncio.Event"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck._apply_monkeypatches": {
            "name": "_apply_monkeypatches",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck._connect_signals": {
            "name": "_connect_signals",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck.on_produce_attach_test_headers": {
            "name": "on_produce_attach_test_headers",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "AppT"
                ],
                "key": [
                    "bytes"
                ],
                "value": [
                    "bytes"
                ],
                "partition": [
                    "int"
                ],
                "timestamp": [
                    "float"
                ],
                "headers": [
                    "List[Tuple[(str, bytes)]]"
                ],
                "signal": [
                    "BaseSignalT"
                ]
            }
        },
        "LiveCheck.case": {
            "name": "case",
            "location": 208,
            "return": [
                "Callable[([Type], _Case)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck._extract_signals": {
            "name": "_extract_signals",
            "location": 272,
            "return": [
                "Iterable[Tuple[(str, Type[BaseSignal])]]"
            ],
            "arguments": {
                "self": [],
                "case_cls": [
                    "Type[_Case]"
                ],
                "base_case": [
                    "Type[_Case]"
                ]
            }
        },
        "LiveCheck.add_case": {
            "name": "add_case",
            "location": 293,
            "return": [
                "_Case"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "_Case"
                ]
            }
        },
        "LiveCheck._install_bus_agent": {
            "name": "_install_bus_agent",
            "location": 317,
            "return": [
                "AgentT"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck._install_test_execution_agent": {
            "name": "_install_test_execution_agent",
            "location": 323,
            "return": [
                "AgentT"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck._prepare_case_name": {
            "name": "_prepare_case_name",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LiveCheck.bus": {
            "name": "bus",
            "location": 362,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck.pending_tests": {
            "name": "pending_tests",
            "location": 371,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck.reports": {
            "name": "reports",
            "location": 380,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveCheck.case._inner": {
            "name": "_inner",
            "location": 231,
            "return": [
                "_Case"
            ],
            "arguments": {
                "cls": [
                    "Type"
                ]
            }
        }
    },
    "faust-master/faust/livecheck/case.py": {
        "Case.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case._now": {
            "name": "_now",
            "location": 231,
            "return": [
                "datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case._set_pass_state": {
            "name": "_set_pass_state",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "State"
                ]
            }
        },
        "Case._maybe_recover_from_failed_state": {
            "name": "_maybe_recover_from_failed_state",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case._failed_longer_than": {
            "name": "_failed_longer_than",
            "location": 393,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "secs": [
                    "float"
                ]
            }
        },
        "Case.seconds_since_last_fail": {
            "name": "seconds_since_last_fail",
            "location": 401,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.current_test": {
            "name": "current_test",
            "location": 456,
            "return": [
                "Optional[TestExecution]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.current_execution": {
            "name": "current_execution",
            "location": 461,
            "return": [
                "Optional[TestRunner]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.label": {
            "name": "label",
            "location": 466,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/livecheck/exceptions.py": {},
    "faust-master/faust/livecheck/locals.py": {
        "current_execution": {
            "name": "current_execution",
            "location": 26,
            "return": [
                "Optional[_TestRunner]"
            ],
            "arguments": {}
        },
        "current_test": {
            "name": "current_test",
            "location": 31,
            "return": [
                "Optional[TestExecution]"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/livecheck/models.py": {
        "State.is_ok": {
            "name": "is_ok",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution.from_headers": {
            "name": "from_headers",
            "location": 60,
            "return": [
                "Optional['TestExecution']"
            ],
            "arguments": {
                "cls": [],
                "headers": [
                    "Mapping"
                ]
            }
        },
        "TestExecution.as_headers": {
            "name": "as_headers",
            "location": 80,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution.ident": {
            "name": "ident",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution.shortident": {
            "name": "shortident",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution._build_ident": {
            "name": "_build_ident",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "case_name": [
                    "str"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "TestExecution._now": {
            "name": "_now",
            "location": 105,
            "return": [
                "datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution.human_date": {
            "name": "human_date",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution.was_issued_today": {
            "name": "was_issued_today",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution.is_expired": {
            "name": "is_expired",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecution.short_case_name": {
            "name": "short_case_name",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/livecheck/runners.py": {
        "TestRunner.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "_Case"
                ],
                "test": [
                    "TestExecution"
                ],
                "started": [
                    "float"
                ]
            }
        },
        "TestRunner._prepare_args": {
            "name": "_prepare_args",
            "location": 122,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Iterable"
                ]
            }
        },
        "TestRunner._prepare_kwargs": {
            "name": "_prepare_kwargs",
            "location": 126,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "kwargs": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "TestRunner._prepare_val": {
            "name": "_prepare_val",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Any"
                ]
            }
        },
        "TestRunner._format_log": {
            "name": "_format_log",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "TestRunner.log_info": {
            "name": "log_info",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "TestRunner.end": {
            "name": "end",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner._flush_logs": {
            "name": "_flush_logs",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "int"
                ]
            }
        }
    },
    "faust-master/faust/livecheck/signals.py": {
        "BaseSignal.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "case": [
                    "_Case"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "BaseSignal.__set_name__": {
            "name": "__set_name__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "BaseSignal._wakeup_resolvers": {
            "name": "_wakeup_resolvers",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal._get_current_value": {
            "name": "_get_current_value",
            "location": 69,
            "return": [
                "SignalEvent"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "BaseSignal._index_key": {
            "name": "_index_key",
            "location": 72,
            "return": [
                "Tuple[(str, str, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "BaseSignal._set_current_value": {
            "name": "_set_current_value",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "event": [
                    "SignalEvent"
                ]
            }
        },
        "BaseSignal.clone": {
            "name": "clone",
            "location": 78,
            "return": [
                "'BaseSignal'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal._asdict": {
            "name": "_asdict",
            "location": 82,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal._verify_event": {
            "name": "_verify_event",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ev": [
                    "SignalEvent"
                ],
                "key": [
                    "Any"
                ],
                "name": [
                    "str"
                ],
                "case": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/livecheck/__init__.py": {},
    "faust-master/faust/livecheck/patches/aiohttp.py": {
        "patch_all": {
            "name": "patch_all",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_aiohttp_session": {
            "name": "patch_aiohttp_session",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_aiohttp_session.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_aiohttp_session.ClientSession.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_configs": [
                    "Optional[List[TraceConfig]]"
                ]
            }
        },
        "patch_aiohttp_session.ClientSession._faust_trace_configs": {
            "name": "_faust_trace_configs",
            "location": 52,
            "return": [
                "List[TraceConfig]"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "List[TraceConfig]"
                ]
            }
        }
    },
    "faust-master/faust/livecheck/patches/__init__.py": {
        "patch_all": {
            "name": "patch_all",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/models/base.py": {
        "maybe_model": {
            "name": "maybe_model",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "arg": [
                    "Any"
                ]
            }
        },
        "Model._maybe_namespace": {
            "name": "_maybe_namespace",
            "location": 174,
            "return": [
                "Optional[Type[ModelT]]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "Any"
                ]
            }
        },
        "Model._maybe_reconstruct": {
            "name": "_maybe_reconstruct",
            "location": 212,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "Any"
                ]
            }
        },
        "Model._from_data_field": {
            "name": "_from_data_field",
            "location": 217,
            "return": [
                "Optional['Model']"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "Any"
                ]
            }
        },
        "Model.loads": {
            "name": "loads",
            "location": 225,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "cls": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "Model.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str"
                ],
                "namespace": [
                    "str"
                ],
                "include_metadata": [
                    "bool"
                ],
                "isodates": [
                    "bool"
                ],
                "abstract": [
                    "bool"
                ],
                "allow_blessed_key": [
                    "bool"
                ],
                "decimals": [
                    "bool"
                ],
                "coerce": [
                    "bool"
                ],
                "coercions": [
                    "CoercionMapping"
                ],
                "polymorphic_fields": [
                    "bool"
                ],
                "validation": [
                    "bool"
                ],
                "date_parser": [
                    "Callable[([Any], datetime)]"
                ],
                "lazy_creation": [
                    "bool"
                ]
            }
        },
        "Model.make_final": {
            "name": "make_final",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model._init_subclass": {
            "name": "_init_subclass",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "serializer": [
                    "str"
                ],
                "namespace": [
                    "str"
                ],
                "include_metadata": [
                    "bool"
                ],
                "isodates": [
                    "bool"
                ],
                "abstract": [
                    "bool"
                ],
                "allow_blessed_key": [
                    "bool"
                ],
                "decimals": [
                    "bool"
                ],
                "coerce": [
                    "bool"
                ],
                "coercions": [
                    "CoercionMapping"
                ],
                "polymorphic_fields": [
                    "bool"
                ],
                "validation": [
                    "bool"
                ],
                "date_parser": [
                    "Callable[([Any], datetime)]"
                ]
            }
        },
        "Model.__abstract_init__": {
            "name": "__abstract_init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._contribute_to_options": {
            "name": "_contribute_to_options",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "options": [
                    "ModelOptions"
                ]
            }
        },
        "Model._contribute_methods": {
            "name": "_contribute_methods",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model._contribute_field_descriptors": {
            "name": "_contribute_field_descriptors",
            "location": 409,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "cls": [],
                "target": [
                    "Type"
                ],
                "options": [
                    "ModelOptions"
                ],
                "parent": [
                    "FieldDescriptorT"
                ]
            }
        },
        "Model._BUILD_init": {
            "name": "_BUILD_init",
            "location": 418,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model._BUILD_hash": {
            "name": "_BUILD_hash",
            "location": 423,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model._BUILD_eq": {
            "name": "_BUILD_eq",
            "location": 428,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Model.to_representation": {
            "name": "to_representation",
            "location": 432,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._humanize": {
            "name": "_humanize",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_valid": {
            "name": "is_valid",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.validate": {
            "name": "validate",
            "location": 443,
            "return": [
                "List[ValidationError]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.validate_or_raise": {
            "name": "validate_or_raise",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._itervalidate": {
            "name": "_itervalidate",
            "location": 454,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.validation_errors": {
            "name": "validation_errors",
            "location": 459,
            "return": [
                "List[ValidationError]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.derive": {
            "name": "derive",
            "location": 462,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._derive": {
            "name": "_derive",
            "location": 467,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.dumps": {
            "name": "dumps",
            "location": 470,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 475,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/models/fields.py": {
        "_is_concrete_model": {
            "name": "_is_concrete_model",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "field_for_type": {
            "name": "field_for_type",
            "location": 546,
            "return": [
                "Tuple[(Type[FieldDescriptorT], Optional[Type[Tag]])]"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "FieldDescriptor.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.on_model_attached": {
            "name": "on_model_attached",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor._prepare_type_expression": {
            "name": "_prepare_type_expression",
            "location": 173,
            "return": [
                "TypeExpression"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor._compile_type_expression": {
            "name": "_compile_type_expression",
            "location": 181,
            "return": [
                "Optional[Callable[([T], T)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.__set_name__": {
            "name": "__set_name__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type[ModelT]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "FieldDescriptor.clone": {
            "name": "clone",
            "location": 194,
            "return": [
                "FieldDescriptorT"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.as_dict": {
            "name": "as_dict",
            "location": 197,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.validate_all": {
            "name": "validate_all",
            "location": 214,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldDescriptor.validate": {
            "name": "validate",
            "location": 231,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "FieldDescriptor.to_python": {
            "name": "to_python",
            "location": 234,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldDescriptor.prepare_value": {
            "name": "prepare_value",
            "location": 240,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldDescriptor._copy_descriptors": {
            "name": "_copy_descriptors",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "FieldDescriptor.__get__": {
            "name": "__get__",
            "location": 248,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "owner": [
                    "Type"
                ]
            }
        },
        "FieldDescriptor.should_coerce": {
            "name": "should_coerce",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ],
                "coerce": [
                    "bool"
                ]
            }
        },
        "FieldDescriptor.getattr": {
            "name": "getattr",
            "location": 270,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "ModelT"
                ]
            }
        },
        "FieldDescriptor._parents_path": {
            "name": "_parents_path",
            "location": 277,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.validation_error": {
            "name": "validation_error",
            "location": 283,
            "return": [
                "ValidationError"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "FieldDescriptor.__set__": {
            "name": "__set__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Any"
                ],
                "value": [
                    "T"
                ]
            }
        },
        "FieldDescriptor.__repr__": {
            "name": "__repr__",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.ident": {
            "name": "ident",
            "location": 300,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.related_models": {
            "name": "related_models",
            "location": 305,
            "return": [
                "Set[Type[ModelT]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptor.lazy_coercion": {
            "name": "lazy_coercion",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanField.validate": {
            "name": "validate",
            "location": 317,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "BooleanField.prepare_value": {
            "name": "prepare_value",
            "location": 322,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "NumberField.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberField.validate": {
            "name": "validate",
            "location": 346,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "IntegerField.prepare_value": {
            "name": "prepare_value",
            "location": 362,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FloatField.prepare_value": {
            "name": "prepare_value",
            "location": 369,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalField.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.to_python": {
            "name": "to_python",
            "location": 390,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalField.prepare_value": {
            "name": "prepare_value",
            "location": 398,
            "return": [
                "Optional[Decimal]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DecimalField.validate": {
            "name": "validate",
            "location": 402,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Decimal"
                ]
            }
        },
        "CharField.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharField.validate": {
            "name": "validate",
            "location": 449,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "CharacterType@@str@@bytes@@"
                ]
            }
        },
        "StringField.prepare_value": {
            "name": "prepare_value",
            "location": 470,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatetimeField.to_python": {
            "name": "to_python",
            "location": 483,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "DatetimeField.prepare_value": {
            "name": "prepare_value",
            "location": 491,
            "return": [
                "Optional[datetime]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "BytesField.__init__": {
            "name": "__init__",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesField.prepare_value": {
            "name": "prepare_value",
            "location": 520,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        }
    },
    "faust-master/faust/models/record.py": {
        "_kvrepr": {
            "name": "_kvrepr",
            "location": 630,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "Record.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "serializer": [
                    "str"
                ],
                "namespace": [
                    "str"
                ],
                "include_metadata": [
                    "bool"
                ],
                "isodates": [
                    "bool"
                ],
                "abstract": [
                    "bool"
                ],
                "allow_blessed_key": [
                    "bool"
                ],
                "decimals": [
                    "bool"
                ],
                "coerce": [
                    "bool"
                ],
                "coercions": [
                    "CoercionMapping"
                ],
                "polymorphic_fields": [
                    "bool"
                ],
                "validation": [
                    "bool"
                ],
                "date_parser": [
                    "Callable[([Any], datetime)]"
                ],
                "lazy_creation": [
                    "bool"
                ]
            }
        },
        "Record._contribute_to_options": {
            "name": "_contribute_to_options",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "options": [
                    "ModelOptions"
                ]
            }
        },
        "Record._contribute_methods": {
            "name": "_contribute_methods",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._contribute_field_descriptors": {
            "name": "_contribute_field_descriptors",
            "location": 195,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "cls": [],
                "target": [
                    "Type"
                ],
                "options": [
                    "ModelOptions"
                ],
                "parent": [
                    "FieldDescriptorT"
                ]
            }
        },
        "Record.from_data": {
            "name": "from_data",
            "location": 297,
            "return": [
                "'Record'"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "Mapping"
                ]
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record._BUILD_input_translate_fields": {
            "name": "_BUILD_input_translate_fields",
            "location": 316,
            "return": [
                "Callable[([MutableMapping], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_init": {
            "name": "_BUILD_init",
            "location": 332,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_hash": {
            "name": "_BUILD_hash",
            "location": 495,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_eq": {
            "name": "_BUILD_eq",
            "location": 501,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_ne": {
            "name": "_BUILD_ne",
            "location": 507,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_gt": {
            "name": "_BUILD_gt",
            "location": 513,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_ge": {
            "name": "_BUILD_ge",
            "location": 519,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_lt": {
            "name": "_BUILD_lt",
            "location": 525,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_le": {
            "name": "_BUILD_le",
            "location": 531,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._BUILD_asdict": {
            "name": "_BUILD_asdict",
            "location": 537,
            "return": [
                "Callable[(..., Dict[(str, Any)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Record._prepare_dict": {
            "name": "_prepare_dict",
            "location": 560,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Record._BUILD_asdict_field": {
            "name": "_BUILD_asdict_field",
            "location": 564,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "field": [
                    "FieldDescriptorT"
                ]
            }
        },
        "Record._derive": {
            "name": "_derive",
            "location": 567,
            "return": [
                "ModelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.to_representation": {
            "name": "to_representation",
            "location": 573,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.asdict": {
            "name": "asdict",
            "location": 585,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record._humanize": {
            "name": "_humanize",
            "location": 591,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__json__": {
            "name": "__json__",
            "location": 602,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__eq__": {
            "name": "__eq__",
            "location": 605,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Record.__ne__": {
            "name": "__ne__",
            "location": 609,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Record.__lt__": {
            "name": "__lt__",
            "location": 613,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Record'"
                ]
            }
        },
        "Record.__le__": {
            "name": "__le__",
            "location": 617,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Record'"
                ]
            }
        },
        "Record.__gt__": {
            "name": "__gt__",
            "location": 621,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Record'"
                ]
            }
        },
        "Record.__ge__": {
            "name": "__ge__",
            "location": 625,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Record'"
                ]
            }
        },
        "Record._contribute_field_descriptors.add_to_tagged_indices": {
            "name": "add_to_tagged_indices",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [
                    "str"
                ],
                "tag": [
                    "Type[Tag]"
                ]
            }
        },
        "Record._contribute_field_descriptors.add_related_to_tagged_indices": {
            "name": "add_related_to_tagged_indices",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [
                    "str"
                ],
                "related_model": [
                    "Type"
                ]
            }
        },
        "Record._BUILD_init.generate_setter": {
            "name": "generate_setter",
            "location": 401,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str"
                ],
                "getval": [
                    "str"
                ]
            }
        },
        "Record._BUILD_init.generate_prepare_value": {
            "name": "generate_prepare_value",
            "location": 421,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/models/tags.py": {
        "allow_protected_vars": {
            "name": "allow_protected_vars",
            "location": 28,
            "return": [
                "Iterator"
            ],
            "arguments": {}
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "T@@"
                ]
            }
        },
        "Tag.__set_name__": {
            "name": "__set_name__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Tag.get_value": {
            "name": "get_value",
            "location": 51,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__format__": {
            "name": "__format__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str"
                ]
            }
        },
        "Tag._name": {
            "name": "_name",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpaqueTag.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpaqueTag.__format__": {
            "name": "__format__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str"
                ]
            }
        },
        "TransparentTag.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransparentTag._prepare_value": {
            "name": "_prepare_value",
            "location": 84,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransparentTag.__format__": {
            "name": "__format__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str"
                ]
            }
        },
        "_FrameLocal.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T@@"
                ]
            }
        },
        "_FrameLocal._access_value": {
            "name": "_access_value",
            "location": 106,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FrameLocal.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FrameLocal._frame_ident": {
            "name": "_frame_ident",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "FrameType"
                ]
            }
        },
        "_FrameLocal.data": {
            "name": "data",
            "location": 133,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Personal.get_value": {
            "name": "get_value",
            "location": 141,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Personal.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Any"
                ]
            }
        },
        "Secret._prepare_value": {
            "name": "_prepare_value",
            "location": 163,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sensitive.get_value": {
            "name": "get_value",
            "location": 172,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sensitive.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Any"
                ]
            }
        }
    },
    "faust-master/faust/models/typing.py": {
        "qualname_to_identifier": {
            "name": "qualname_to_identifier",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_TypeInfo_from_type": {
            "name": "_TypeInfo_from_type",
            "location": 156,
            "return": [
                "TypeInfo"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "_is_NoneType": {
            "name": "_is_NoneType",
            "location": 715,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "Any"
                ]
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__repr__": {
            "name": "__repr__",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__getitem__": {
            "name": "__getitem__",
            "location": 181,
            "return": [
                "'Variable'"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Any"
                ]
            }
        },
        "Variable.clone": {
            "name": "clone",
            "location": 184,
            "return": [
                "'Variable'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.next_identifier": {
            "name": "next_identifier",
            "location": 192,
            "return": [
                "'Variable'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._register": {
            "name": "_register",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Node.create_if_compatible": {
            "name": "create_if_compatible",
            "location": 227,
            "return": [
                "Optional['Node']"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "Node._issubclass": {
            "name": "_issubclass",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ],
                "types": [
                    "IsInstanceArgT"
                ]
            }
        },
        "Node.inspect_type": {
            "name": "inspect_type",
            "location": 245,
            "return": [
                "TypeInfo"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Type"
                ],
                "root": [
                    "'RootNode'"
                ]
            }
        },
        "Node.__post_init__": {
            "name": "__post_init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.random_identifier": {
            "name": "random_identifier",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Node.build": {
            "name": "build",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyNode.create_if_compatible": {
            "name": "create_if_compatible",
            "location": 292,
            "return": [
                "Optional['Node']"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "AnyNode.build": {
            "name": "build",
            "location": 298,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "UnionNode._maybe_unroll_union": {
            "name": "_maybe_unroll_union",
            "location": 308,
            "return": [
                "TypeInfo"
            ],
            "arguments": {
                "cls": [],
                "info": [
                    "TypeInfo"
                ]
            }
        },
        "UnionNode.create_if_compatible": {
            "name": "create_if_compatible",
            "location": 319,
            "return": [
                "Optional['Node']"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "UnionNode._all_types_match": {
            "name": "_all_types_match",
            "location": 326,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "IsInstanceArgT"
                ],
                "union_args": [
                    "Tuple"
                ]
            }
        },
        "UnionNode._filter_NoneType": {
            "name": "_filter_NoneType",
            "location": 332,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "union_args": [
                    "Tuple"
                ]
            }
        },
        "UnionNode.build": {
            "name": "build",
            "location": 335,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "LiteralNode.build": {
            "name": "build",
            "location": 343,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "DecimalNode.__post_init__": {
            "name": "__post_init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalNode.build": {
            "name": "build",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "DecimalNode._maybe_coerce": {
            "name": "_maybe_coerce",
            "location": 359,
            "return": [
                "Optional[Decimal]"
            ],
            "arguments": {
                "value": [
                    "Union[(str, Decimal)]"
                ]
            }
        },
        "DatetimeNode.__post_init__": {
            "name": "__post_init__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeNode.build": {
            "name": "build",
            "location": 374,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "DatetimeNode._maybe_coerce": {
            "name": "_maybe_coerce",
            "location": 379,
            "return": [
                "Optional[datetime]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(str, datetime)]"
                ]
            }
        },
        "NamedTupleNode.create_if_compatible": {
            "name": "create_if_compatible",
            "location": 393,
            "return": [
                "Optional['Node']"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "NamedTupleNode.build": {
            "name": "build",
            "location": 402,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "NamedTupleNode.next_namedtuple_name": {
            "name": "next_namedtuple_name",
            "location": 412,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Type[Tuple]"
                ]
            }
        },
        "NamedTupleNode.local_name": {
            "name": "local_name",
            "location": 417,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedTupleNode.global_name": {
            "name": "global_name",
            "location": 421,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleNode.build": {
            "name": "build",
            "location": 430,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "TupleNode._build_tuple_literal": {
            "name": "_build_tuple_literal",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "TupleNode._build_untyped_tuple": {
            "name": "_build_untyped_tuple",
            "location": 447,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "TupleNode._build_vararg_tuple": {
            "name": "_build_vararg_tuple",
            "location": 450,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ],
                "member_type": [
                    "Type"
                ]
            }
        },
        "SetNode.build": {
            "name": "build",
            "location": 461,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "SetNode._build_set_expression": {
            "name": "_build_set_expression",
            "location": 466,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ],
                "member_type": [
                    "Type"
                ]
            }
        },
        "DictNode.build": {
            "name": "build",
            "location": 477,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "DictNode._build_dict_expression": {
            "name": "_build_dict_expression",
            "location": 482,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ],
                "key_type": [
                    "Type"
                ],
                "value_type": [
                    "Type"
                ]
            }
        },
        "ListNode.build": {
            "name": "build",
            "location": 497,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "ListNode._build_list_expression": {
            "name": "_build_list_expression",
            "location": 502,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ],
                "item_type": [
                    "Type"
                ]
            }
        },
        "ModelNode.__post_init__": {
            "name": "__post_init__",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelNode.create_if_compatible": {
            "name": "create_if_compatible",
            "location": 516,
            "return": [
                "Optional['Node']"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "ModelNode._is_model": {
            "name": "_is_model",
            "location": 523,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "ModelNode.build": {
            "name": "build",
            "location": 531,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "ModelNode._ensure_model_name": {
            "name": "_ensure_model_name",
            "location": 535,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "ModelNode.Model": {
            "name": "Model",
            "location": 550,
            "return": [
                "Type[ModelT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserNode.__init__": {
            "name": "__init__",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Type"
                ],
                "root": [
                    "'RootNode'"
                ]
            }
        },
        "UserNode.__post_init__": {
            "name": "__post_init__",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserNode._maybe_coerce": {
            "name": "_maybe_coerce",
            "location": 571,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "UserNode.build": {
            "name": "build",
            "location": 578,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "RootNode._register": {
            "name": "_register",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "RootNode.add_closure": {
            "name": "add_closure",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_name": [
                    "str"
                ],
                "global_name": [
                    "str"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "RootNode.__init__": {
            "name": "__init__",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Type"
                ],
                "root": [
                    "'RootNode'"
                ]
            }
        },
        "RootNode.find_compatible_node_or_default": {
            "name": "find_compatible_node_or_default",
            "location": 619,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "TypeInfo"
                ]
            }
        },
        "RootNode.find_compatible_node": {
            "name": "find_compatible_node",
            "location": 626,
            "return": [
                "Optional['Node']"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "TypeInfo"
                ]
            }
        },
        "RootNode.new_default_node": {
            "name": "new_default_node",
            "location": 637,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Type"
                ]
            }
        },
        "TypeExpression.as_function": {
            "name": "as_function",
            "location": 650,
            "return": [
                "Callable[([T], T)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeExpression.as_string": {
            "name": "as_string",
            "location": 672,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeExpression.as_comprehension": {
            "name": "as_comprehension",
            "location": 683,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "argument_name": [
                    "str"
                ]
            }
        },
        "TypeExpression.build": {
            "name": "build",
            "location": 686,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ]
            }
        },
        "TypeExpression._build_expression": {
            "name": "_build_expression",
            "location": 689,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Variable"
                ],
                "typ": [
                    "Type"
                ]
            }
        },
        "TypeExpression.has_models": {
            "name": "has_models",
            "location": 699,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeExpression.has_custom_types": {
            "name": "has_custom_types",
            "location": 703,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeExpression.has_generic_types": {
            "name": "has_generic_types",
            "location": 707,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeExpression.has_nonfield_types": {
            "name": "has_nonfield_types",
            "location": 711,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/models/__init__.py": {},
    "faust-master/faust/sensors/base.py": {
        "Sensor.on_message_in": {
            "name": "on_message_in",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Sensor.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 28,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "Sensor.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Sensor.on_message_out": {
            "name": "on_message_out",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Sensor.on_topic_buffer_full": {
            "name": "on_topic_buffer_full",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Sensor.on_table_get": {
            "name": "on_table_get",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "Sensor.on_table_set": {
            "name": "on_table_set",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Sensor.on_table_del": {
            "name": "on_table_del",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "Sensor.on_commit_initiated": {
            "name": "on_commit_initiated",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ]
            }
        },
        "Sensor.on_commit_completed": {
            "name": "on_commit_completed",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "Sensor.on_send_initiated": {
            "name": "on_send_initiated",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "topic": [
                    "str"
                ],
                "message": [
                    "PendingMessage"
                ],
                "keysize": [
                    "int"
                ],
                "valsize": [
                    "int"
                ]
            }
        },
        "Sensor.on_send_completed": {
            "name": "on_send_completed",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "Any"
                ],
                "metadata": [
                    "RecordMetadata"
                ]
            }
        },
        "Sensor.on_send_error": {
            "name": "on_send_error",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "exc": [
                    "BaseException"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "Sensor.on_assignment_start": {
            "name": "on_assignment_start",
            "location": 98,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ]
            }
        },
        "Sensor.on_assignment_error": {
            "name": "on_assignment_error",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "Sensor.on_assignment_completed": {
            "name": "on_assignment_completed",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Sensor.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 116,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Sensor.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Sensor.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Sensor.on_web_request_start": {
            "name": "on_web_request_start",
            "location": 128,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ]
            }
        },
        "Sensor.on_web_request_end": {
            "name": "on_web_request_end",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ],
                "response": [
                    "Optional[web.Response]"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Sensor.asdict": {
            "name": "asdict",
            "location": 143,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorDelegate.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "SensorDelegate.add": {
            "name": "add",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [
                    "SensorT"
                ]
            }
        },
        "SensorDelegate.remove": {
            "name": "remove",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [
                    "SensorT"
                ]
            }
        },
        "SensorDelegate.__iter__": {
            "name": "__iter__",
            "location": 167,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorDelegate.on_message_in": {
            "name": "on_message_in",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "SensorDelegate.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 175,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "SensorDelegate.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorDelegate.on_topic_buffer_full": {
            "name": "on_topic_buffer_full",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "SensorDelegate.on_message_out": {
            "name": "on_message_out",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "SensorDelegate.on_table_get": {
            "name": "on_table_get",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "SensorDelegate.on_table_set": {
            "name": "on_table_set",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SensorDelegate.on_table_del": {
            "name": "on_table_del",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "SensorDelegate.on_commit_initiated": {
            "name": "on_commit_initiated",
            "location": 219,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ]
            }
        },
        "SensorDelegate.on_commit_completed": {
            "name": "on_commit_completed",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "SensorDelegate.on_send_initiated": {
            "name": "on_send_initiated",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "topic": [
                    "str"
                ],
                "message": [
                    "PendingMessage"
                ],
                "keysize": [
                    "int"
                ],
                "valsize": [
                    "int"
                ]
            }
        },
        "SensorDelegate.on_send_completed": {
            "name": "on_send_completed",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "Any"
                ],
                "metadata": [
                    "RecordMetadata"
                ]
            }
        },
        "SensorDelegate.on_send_error": {
            "name": "on_send_error",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "exc": [
                    "BaseException"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "SensorDelegate.on_assignment_start": {
            "name": "on_assignment_start",
            "location": 260,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ]
            }
        },
        "SensorDelegate.on_assignment_error": {
            "name": "on_assignment_error",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "SensorDelegate.on_assignment_completed": {
            "name": "on_assignment_completed",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorDelegate.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 283,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "SensorDelegate.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorDelegate.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorDelegate.on_web_request_start": {
            "name": "on_web_request_start",
            "location": 300,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ]
            }
        },
        "SensorDelegate.on_web_request_end": {
            "name": "on_web_request_end",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ],
                "response": [
                    "Optional[web.Response]"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorDelegate.__repr__": {
            "name": "__repr__",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/sensors/datadog.py": {
        "DatadogStatsClient.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "rate": [
                    "float"
                ]
            }
        },
        "DatadogStatsClient.gauge": {
            "name": "gauge",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "value": [
                    "float"
                ],
                "labels": [
                    "Dict"
                ]
            }
        },
        "DatadogStatsClient.increment": {
            "name": "increment",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "value": [
                    "float"
                ],
                "labels": [
                    "Dict"
                ]
            }
        },
        "DatadogStatsClient.incr": {
            "name": "incr",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "DatadogStatsClient.decrement": {
            "name": "decrement",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "value": [
                    "float"
                ],
                "labels": [
                    "Dict"
                ]
            }
        },
        "DatadogStatsClient.decr": {
            "name": "decr",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "count": [
                    "float"
                ]
            }
        },
        "DatadogStatsClient.timing": {
            "name": "timing",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "value": [
                    "float"
                ],
                "labels": [
                    "Dict"
                ]
            }
        },
        "DatadogStatsClient.timed": {
            "name": "timed",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "labels": [
                    "Dict"
                ],
                "use_ms": [
                    "bool"
                ]
            }
        },
        "DatadogStatsClient.histogram": {
            "name": "histogram",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "value": [
                    "float"
                ],
                "labels": [
                    "Dict"
                ]
            }
        },
        "DatadogStatsClient._encode_labels": {
            "name": "_encode_labels",
            "location": 118,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Optional[Dict]"
                ]
            }
        },
        "DatadogMonitor.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "rate": [
                    "float"
                ]
            }
        },
        "DatadogMonitor._new_datadog_stats_client": {
            "name": "_new_datadog_stats_client",
            "location": 152,
            "return": [
                "DatadogStatsClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatadogMonitor.on_message_in": {
            "name": "on_message_in",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "DatadogMonitor.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 168,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "DatadogMonitor.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "DatadogMonitor.on_message_out": {
            "name": "on_message_out",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "DatadogMonitor.on_table_get": {
            "name": "on_table_get",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "DatadogMonitor.on_table_set": {
            "name": "on_table_set",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "DatadogMonitor.on_table_del": {
            "name": "on_table_del",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "DatadogMonitor.on_commit_completed": {
            "name": "on_commit_completed",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "DatadogMonitor.on_send_initiated": {
            "name": "on_send_initiated",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "topic": [
                    "str"
                ],
                "message": [
                    "PendingMessage"
                ],
                "keysize": [
                    "int"
                ],
                "valsize": [
                    "int"
                ]
            }
        },
        "DatadogMonitor.on_send_completed": {
            "name": "on_send_completed",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "Any"
                ],
                "metadata": [
                    "RecordMetadata"
                ]
            }
        },
        "DatadogMonitor.on_send_error": {
            "name": "on_send_error",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "exc": [
                    "BaseException"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "DatadogMonitor.on_assignment_error": {
            "name": "on_assignment_error",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "DatadogMonitor.on_assignment_completed": {
            "name": "on_assignment_completed",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "DatadogMonitor.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 288,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "DatadogMonitor.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "DatadogMonitor.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "DatadogMonitor.count": {
            "name": "count",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "DatadogMonitor.on_tp_commit": {
            "name": "on_tp_commit",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp_offsets": [
                    "TPOffsetMapping"
                ]
            }
        },
        "DatadogMonitor.track_tp_end_offset": {
            "name": "track_tp_end_offset",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "DatadogMonitor.on_web_request_end": {
            "name": "on_web_request_end",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ],
                "response": [
                    "Optional[web.Response]"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "DatadogMonitor._format_label": {
            "name": "_format_label",
            "location": 343,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "Optional[TP]"
                ],
                "stream": [
                    "Optional[StreamT]"
                ],
                "table": [
                    "Optional[CollectionT]"
                ]
            }
        },
        "DatadogMonitor._format_tp_label": {
            "name": "_format_tp_label",
            "location": 355,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "DatadogMonitor._format_stream_label": {
            "name": "_format_stream_label",
            "location": 358,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "StreamT"
                ]
            }
        },
        "DatadogMonitor._stream_label": {
            "name": "_stream_label",
            "location": 361,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "StreamT"
                ]
            }
        },
        "DatadogMonitor._format_table_label": {
            "name": "_format_table_label",
            "location": 366,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "DatadogMonitor.client": {
            "name": "client",
            "location": 370,
            "return": [
                "DatadogStatsClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatadogStatsClient._encode_labels.sanitize": {
            "name": "sanitize",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/sensors/monitor.py": {
        "TableState.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "TableState.asdict": {
            "name": "asdict",
            "location": 77,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableState.__reduce_keywords__": {
            "name": "__reduce_keywords__",
            "location": 85,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.secs_since": {
            "name": "secs_since",
            "location": 301,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "start_time": [
                    "float"
                ]
            }
        },
        "Monitor.ms_since": {
            "name": "ms_since",
            "location": 305,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "start_time": [
                    "float"
                ]
            }
        },
        "Monitor.secs_to_ms": {
            "name": "secs_to_ms",
            "location": 309,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Monitor._sample": {
            "name": "_sample",
            "location": 322,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "prev_event_total": [
                    "int"
                ],
                "prev_message_total": [
                    "int"
                ]
            }
        },
        "Monitor.asdict": {
            "name": "asdict",
            "location": 352,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._events_by_stream_dict": {
            "name": "_events_by_stream_dict",
            "location": 391,
            "return": [
                "MutableMapping[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._events_by_task_dict": {
            "name": "_events_by_task_dict",
            "location": 395,
            "return": [
                "MutableMapping[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._topic_buffer_full_dict": {
            "name": "_topic_buffer_full_dict",
            "location": 399,
            "return": [
                "MutableMapping[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._metric_counts_dict": {
            "name": "_metric_counts_dict",
            "location": 403,
            "return": [
                "MutableMapping[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._http_response_codes_dict": {
            "name": "_http_response_codes_dict",
            "location": 406,
            "return": [
                "MutableMapping[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._tp_committed_offsets_dict": {
            "name": "_tp_committed_offsets_dict",
            "location": 410,
            "return": [
                "TPOffsetDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._tp_read_offsets_dict": {
            "name": "_tp_read_offsets_dict",
            "location": 413,
            "return": [
                "TPOffsetDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._tp_end_offsets_dict": {
            "name": "_tp_end_offsets_dict",
            "location": 416,
            "return": [
                "TPOffsetDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._tp_offsets_as_dict": {
            "name": "_tp_offsets_as_dict",
            "location": 420,
            "return": [
                "TPOffsetDict"
            ],
            "arguments": {
                "cls": [],
                "tp_offsets": [
                    "TPOffsetMapping"
                ]
            }
        },
        "Monitor.on_message_in": {
            "name": "on_message_in",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Monitor.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 438,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "Monitor.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Monitor.on_topic_buffer_full": {
            "name": "on_topic_buffer_full",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Monitor.on_message_out": {
            "name": "on_message_out",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Monitor.on_table_get": {
            "name": "on_table_get",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "Monitor.on_table_set": {
            "name": "on_table_set",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Monitor.on_table_del": {
            "name": "on_table_del",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "Monitor._table_or_create": {
            "name": "_table_or_create",
            "location": 494,
            "return": [
                "TableState"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "Monitor.on_commit_initiated": {
            "name": "on_commit_initiated",
            "location": 501,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ]
            }
        },
        "Monitor.on_commit_completed": {
            "name": "on_commit_completed",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "Monitor.on_send_initiated": {
            "name": "on_send_initiated",
            "location": 514,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "topic": [
                    "str"
                ],
                "message": [
                    "PendingMessage"
                ],
                "keysize": [
                    "int"
                ],
                "valsize": [
                    "int"
                ]
            }
        },
        "Monitor.on_send_completed": {
            "name": "on_send_completed",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "Any"
                ],
                "metadata": [
                    "RecordMetadata"
                ]
            }
        },
        "Monitor.on_send_error": {
            "name": "on_send_error",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "exc": [
                    "BaseException"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "Monitor.count": {
            "name": "count",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Monitor.on_tp_commit": {
            "name": "on_tp_commit",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp_offsets": [
                    "TPOffsetMapping"
                ]
            }
        },
        "Monitor.track_tp_end_offset": {
            "name": "track_tp_end_offset",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Monitor.on_assignment_start": {
            "name": "on_assignment_start",
            "location": 550,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ]
            }
        },
        "Monitor.on_assignment_error": {
            "name": "on_assignment_error",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "Monitor.on_assignment_completed": {
            "name": "on_assignment_completed",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Monitor.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 576,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Monitor.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Monitor.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Monitor.on_web_request_start": {
            "name": "on_web_request_start",
            "location": 607,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ]
            }
        },
        "Monitor.on_web_request_end": {
            "name": "on_web_request_end",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ],
                "response": [
                    "Optional[web.Response]"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "Monitor._normalize": {
            "name": "_normalize",
            "location": 634,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/sensors/prometheus.py": {
        "PrometheusMonitor.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "PrometheusMonitor._initialize_metrics": {
            "name": "_initialize_metrics",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrometheusMonitor.on_message_in": {
            "name": "on_message_in",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "PrometheusMonitor.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 173,
            "return": [
                "typing.Optional[typing.Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "PrometheusMonitor._stream_label": {
            "name": "_stream_label",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "StreamT"
                ]
            }
        },
        "PrometheusMonitor.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "typing.Dict"
                ]
            }
        },
        "PrometheusMonitor.on_message_out": {
            "name": "on_message_out",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "PrometheusMonitor.on_table_get": {
            "name": "on_table_get",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "typing.Any"
                ]
            }
        },
        "PrometheusMonitor.on_table_set": {
            "name": "on_table_set",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "typing.Any"
                ],
                "value": [
                    "typing.Any"
                ]
            }
        },
        "PrometheusMonitor.on_table_del": {
            "name": "on_table_del",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "typing.Any"
                ]
            }
        },
        "PrometheusMonitor.on_commit_completed": {
            "name": "on_commit_completed",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "state": [
                    "typing.Any"
                ]
            }
        },
        "PrometheusMonitor.on_send_initiated": {
            "name": "on_send_initiated",
            "location": 234,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "topic": [
                    "str"
                ],
                "message": [
                    "PendingMessage"
                ],
                "keysize": [
                    "int"
                ],
                "valsize": [
                    "int"
                ]
            }
        },
        "PrometheusMonitor.on_send_completed": {
            "name": "on_send_completed",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "typing.Any"
                ],
                "metadata": [
                    "RecordMetadata"
                ]
            }
        },
        "PrometheusMonitor.on_send_error": {
            "name": "on_send_error",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "exc": [
                    "BaseException"
                ],
                "state": [
                    "typing.Any"
                ]
            }
        },
        "PrometheusMonitor.on_assignment_error": {
            "name": "on_assignment_error",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "typing.Dict"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "PrometheusMonitor.on_assignment_completed": {
            "name": "on_assignment_completed",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "typing.Dict"
                ]
            }
        },
        "PrometheusMonitor.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 282,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "PrometheusMonitor.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "typing.Dict"
                ]
            }
        },
        "PrometheusMonitor.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "typing.Dict"
                ]
            }
        },
        "PrometheusMonitor.count": {
            "name": "count",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "PrometheusMonitor.on_tp_commit": {
            "name": "on_tp_commit",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp_offsets": [
                    "TPOffsetMapping"
                ]
            }
        },
        "PrometheusMonitor.track_tp_end_offset": {
            "name": "track_tp_end_offset",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "PrometheusMonitor.on_web_request_end": {
            "name": "on_web_request_end",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ],
                "response": [
                    "typing.Optional[web.Response]"
                ],
                "state": [
                    "typing.Dict"
                ]
            }
        },
        "PrometheusMonitor.expose_metrics": {
            "name": "expose_metrics",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/sensors/statsd.py": {
        "StatsdMonitor.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "rate": [
                    "float"
                ]
            }
        },
        "StatsdMonitor._new_statsd_client": {
            "name": "_new_statsd_client",
            "location": 64,
            "return": [
                "StatsClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsdMonitor.on_message_in": {
            "name": "on_message_in",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "StatsdMonitor.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 77,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "StatsdMonitor._stream_label": {
            "name": "_stream_label",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "StreamT"
                ]
            }
        },
        "StatsdMonitor.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "StatsdMonitor.on_message_out": {
            "name": "on_message_out",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "StatsdMonitor.on_table_get": {
            "name": "on_table_get",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "StatsdMonitor.on_table_set": {
            "name": "on_table_set",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "StatsdMonitor.on_table_del": {
            "name": "on_table_del",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "StatsdMonitor.on_commit_completed": {
            "name": "on_commit_completed",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "StatsdMonitor.on_send_initiated": {
            "name": "on_send_initiated",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "topic": [
                    "str"
                ],
                "message": [
                    "PendingMessage"
                ],
                "keysize": [
                    "int"
                ],
                "valsize": [
                    "int"
                ]
            }
        },
        "StatsdMonitor.on_send_completed": {
            "name": "on_send_completed",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "Any"
                ],
                "metadata": [
                    "RecordMetadata"
                ]
            }
        },
        "StatsdMonitor.on_send_error": {
            "name": "on_send_error",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "exc": [
                    "BaseException"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "StatsdMonitor.on_assignment_error": {
            "name": "on_assignment_error",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "StatsdMonitor.on_assignment_completed": {
            "name": "on_assignment_completed",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "StatsdMonitor.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 190,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "StatsdMonitor.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "StatsdMonitor.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "StatsdMonitor.count": {
            "name": "count",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "StatsdMonitor.on_tp_commit": {
            "name": "on_tp_commit",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp_offsets": [
                    "TPOffsetMapping"
                ]
            }
        },
        "StatsdMonitor.track_tp_end_offset": {
            "name": "track_tp_end_offset",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "StatsdMonitor.on_web_request_end": {
            "name": "on_web_request_end",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "request": [
                    "web.Request"
                ],
                "response": [
                    "Optional[web.Response]"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "StatsdMonitor.client": {
            "name": "client",
            "location": 250,
            "return": [
                "StatsClient"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/sensors/__init__.py": {},
    "faust-master/faust/serializers/codecs.py": {
        "pickle": {
            "name": "pickle",
            "location": 288,
            "return": [
                "Codec"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "codec": [
                    "CodecT"
                ]
            }
        },
        "_maybe_load_extension_classes": {
            "name": "_maybe_load_extension_classes",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str"
                ]
            }
        },
        "get_codec": {
            "name": "get_codec",
            "location": 343,
            "return": [
                "CodecT"
            ],
            "arguments": {
                "name_or_codec": [
                    "CodecArg"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 361,
            "return": [
                "bytes"
            ],
            "arguments": {
                "codec": [
                    "Optional[CodecArg]"
                ],
                "obj": [
                    "Any"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 366,
            "return": [
                "Any"
            ],
            "arguments": {
                "codec": [
                    "Optional[CodecArg]"
                ],
                "s": [
                    "bytes"
                ]
            }
        },
        "Codec.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Tuple[(CodecT, ...)]"
                ]
            }
        },
        "Codec._loads": {
            "name": "_loads",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "Codec._dumps": {
            "name": "_dumps",
            "location": 218,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Any"
                ]
            }
        },
        "Codec.dumps": {
            "name": "dumps",
            "location": 222,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "Codec.loads": {
            "name": "loads",
            "location": 229,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "Codec.clone": {
            "name": "clone",
            "location": 236,
            "return": [
                "CodecT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Codec.__or__": {
            "name": "__or__",
            "location": 241,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Codec.__repr__": {
            "name": "__repr__",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "json._loads": {
            "name": "_loads",
            "location": 257,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "json._dumps": {
            "name": "_dumps",
            "location": 260,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Any"
                ]
            }
        },
        "yaml._loads": {
            "name": "_loads",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "yaml._dumps": {
            "name": "_dumps",
            "location": 272,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Any"
                ]
            }
        },
        "raw_pickle._loads": {
            "name": "_loads",
            "location": 281,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "raw_pickle._dumps": {
            "name": "_dumps",
            "location": 284,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "binary._loads": {
            "name": "_loads",
            "location": 296,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "binary._dumps": {
            "name": "_dumps",
            "location": 299,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "raw._loads": {
            "name": "_loads",
            "location": 306,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "raw._dumps": {
            "name": "_dumps",
            "location": 309,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        }
    },
    "faust-master/faust/serializers/registry.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ]
            }
        },
        "Registry.loads_key": {
            "name": "loads_key",
            "location": 35,
            "return": [
                "K"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[ModelArg]"
                ],
                "key": [
                    "Optional[bytes]"
                ]
            }
        },
        "Registry._loads": {
            "name": "_loads",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "CodecArg"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "Registry._serializer": {
            "name": "_serializer",
            "location": 66,
            "return": [
                "CodecArg"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[ModelArg]"
                ]
            }
        },
        "Registry.loads_value": {
            "name": "loads_value",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[ModelArg]"
                ],
                "value": [
                    "Optional[bytes]"
                ]
            }
        },
        "Registry._prepare_payload": {
            "name": "_prepare_payload",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[ModelArg]"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Registry.dumps_key": {
            "name": "dumps_key",
            "location": 125,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[ModelArg]"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "Registry.dumps_value": {
            "name": "dumps_value",
            "location": 152,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[ModelArg]"
                ],
                "value": [
                    "V"
                ]
            }
        },
        "Registry.Model": {
            "name": "Model",
            "location": 180,
            "return": [
                "Type[ModelT]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/serializers/schemas.py": {
        "_model_serializer": {
            "name": "_model_serializer",
            "location": 169,
            "return": [
                "Optional[CodecArg]"
            ],
            "arguments": {
                "typ": [
                    "Any"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.update": {
            "name": "update",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.loads_key": {
            "name": "loads_key",
            "location": 70,
            "return": [
                "KT"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Schema.loads_value": {
            "name": "loads_value",
            "location": 80,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "Schema.dumps_key": {
            "name": "dumps_key",
            "location": 90,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "Schema.dumps_value": {
            "name": "dumps_value",
            "location": 99,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "value": [
                    "V"
                ]
            }
        },
        "Schema.on_dumps_key_prepare_headers": {
            "name": "on_dumps_key_prepare_headers",
            "location": 108,
            "return": [
                "OpenHeadersArg"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "V"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        },
        "Schema.on_dumps_value_prepare_headers": {
            "name": "on_dumps_value_prepare_headers",
            "location": 112,
            "return": [
                "OpenHeadersArg"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "V"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        },
        "Schema.compile": {
            "name": "compile",
            "location": 122,
            "return": [
                "DecodeFunction"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Schema.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/serializers/__init__.py": {},
    "faust-master/faust/stores/base.py": {
        "Store.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, URL)]"
                ],
                "app": [
                    "AppT"
                ],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "Store.__hash__": {
            "name": "__hash__",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.persisted_offset": {
            "name": "persisted_offset",
            "location": 64,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Store.set_persisted_offset": {
            "name": "set_persisted_offset",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Store._encode_key": {
            "name": "_encode_key",
            "location": 90,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "Store._encode_value": {
            "name": "_encode_value",
            "location": 97,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "VT"
                ]
            }
        },
        "Store._decode_key": {
            "name": "_decode_key",
            "location": 101,
            "return": [
                "KT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[bytes]"
                ]
            }
        },
        "Store._decode_value": {
            "name": "_decode_value",
            "location": 105,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[bytes]"
                ]
            }
        },
        "Store._repr_info": {
            "name": "_repr_info",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.label": {
            "name": "label",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SerializedStoreKeysView.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "'SerializedStore'"
                ]
            }
        },
        "_SerializedStoreKeysView.__iter__": {
            "name": "__iter__",
            "location": 123,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SerializedStoreValuesView.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "'SerializedStore'"
                ]
            }
        },
        "_SerializedStoreValuesView.__iter__": {
            "name": "__iter__",
            "location": 132,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SerializedStoreItemsView.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "'SerializedStore'"
                ]
            }
        },
        "_SerializedStoreItemsView.__iter__": {
            "name": "__iter__",
            "location": 141,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._get": {
            "name": "_get",
            "location": 149,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "SerializedStore._set": {
            "name": "_set",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ],
                "value": [
                    "Optional[bytes]"
                ]
            }
        },
        "SerializedStore._del": {
            "name": "_del",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "SerializedStore._iterkeys": {
            "name": "_iterkeys",
            "location": 163,
            "return": [
                "Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._itervalues": {
            "name": "_itervalues",
            "location": 167,
            "return": [
                "Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._iteritems": {
            "name": "_iteritems",
            "location": 171,
            "return": [
                "Iterator[Tuple[(bytes, bytes)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._size": {
            "name": "_size",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._contains": {
            "name": "_contains",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "SerializedStore._clear": {
            "name": "_clear",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[EventT]"
                ],
                "to_key": [
                    "Callable[([Any], KT)]"
                ],
                "to_value": [
                    "Callable[([Any], VT)]"
                ]
            }
        },
        "SerializedStore.__getitem__": {
            "name": "__getitem__",
            "location": 202,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "SerializedStore.__setitem__": {
            "name": "__setitem__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "value": [
                    "VT"
                ]
            }
        },
        "SerializedStore.__delitem__": {
            "name": "__delitem__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "SerializedStore.__iter__": {
            "name": "__iter__",
            "location": 214,
            "return": [
                "Iterator[KT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore.__len__": {
            "name": "__len__",
            "location": 217,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore.__contains__": {
            "name": "__contains__",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "object"
                ]
            }
        },
        "SerializedStore.keys": {
            "name": "keys",
            "location": 223,
            "return": [
                "KeysView"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._keys_decoded": {
            "name": "_keys_decoded",
            "location": 227,
            "return": [
                "Iterator[KT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore.values": {
            "name": "values",
            "location": 231,
            "return": [
                "ValuesView"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._values_decoded": {
            "name": "_values_decoded",
            "location": 235,
            "return": [
                "Iterator[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore.items": {
            "name": "items",
            "location": 239,
            "return": [
                "ItemsView"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore._items_decoded": {
            "name": "_items_decoded",
            "location": 243,
            "return": [
                "Iterator[Tuple[(KT, VT)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializedStore.clear": {
            "name": "clear",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/stores/memory.py": {
        "Store.__post_init__": {
            "name": "__post_init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store._clear": {
            "name": "_clear",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[EventT]"
                ],
                "to_key": [
                    "Callable[([Any], Any)]"
                ],
                "to_value": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "Store._create_batch_iterator": {
            "name": "_create_batch_iterator",
            "location": 38,
            "return": [
                "Iterable[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "mark_as_delete": [
                    "Callable[([Any], None)]"
                ],
                "to_key": [
                    "Callable[([Any], Any)]"
                ],
                "to_value": [
                    "Callable[([Any], Any)]"
                ],
                "batch": [
                    "Iterable[EventT]"
                ]
            }
        },
        "Store.persisted_offset": {
            "name": "persisted_offset",
            "location": 52,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Store.reset_state": {
            "name": "reset_state",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/stores/rocksdb.py": {
        "RocksDBOptions.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_open_files": [
                    "int"
                ],
                "write_buffer_size": [
                    "int"
                ],
                "max_write_buffer_number": [
                    "int"
                ],
                "target_file_size_base": [
                    "int"
                ],
                "block_cache_size": [
                    "int"
                ],
                "block_cache_compressed_size": [
                    "int"
                ],
                "bloom_filter_size": [
                    "int"
                ]
            }
        },
        "RocksDBOptions.open": {
            "name": "open",
            "location": 113,
            "return": [
                "DB"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "RocksDBOptions.as_options": {
            "name": "as_options",
            "location": 117,
            "return": [
                "Options"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, URL)]"
                ],
                "app": [
                    "AppT"
                ],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "Store.persisted_offset": {
            "name": "persisted_offset",
            "location": 177,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Store.set_persisted_offset": {
            "name": "set_persisted_offset",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Store.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[EventT]"
                ],
                "to_key": [
                    "Callable[([Any], Any)]"
                ],
                "to_value": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "Store._set": {
            "name": "_set",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ],
                "value": [
                    "Optional[bytes]"
                ]
            }
        },
        "Store._db_for_partition": {
            "name": "_db_for_partition",
            "location": 270,
            "return": [
                "DB"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ]
            }
        },
        "Store._open_for_partition": {
            "name": "_open_for_partition",
            "location": 277,
            "return": [
                "DB"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ]
            }
        },
        "Store._get": {
            "name": "_get",
            "location": 280,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "Store._get_bucket_for_key": {
            "name": "_get_bucket_for_key",
            "location": 291,
            "return": [
                "Optional[_DBValueTuple]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "Store._del": {
            "name": "_del",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "Store.revoke_partitions": {
            "name": "revoke_partitions",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "tps": [
                    "Set[TP]"
                ]
            }
        },
        "Store._contains": {
            "name": "_contains",
            "location": 379,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "Store._dbs_for_key": {
            "name": "_dbs_for_key",
            "location": 386,
            "return": [
                "Iterable[DB]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "Store._dbs_for_actives": {
            "name": "_dbs_for_actives",
            "location": 394,
            "return": [
                "Iterator[DB]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store._size": {
            "name": "_size",
            "location": 404,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store._visible_keys": {
            "name": "_visible_keys",
            "location": 407,
            "return": [
                "Iterator[bytes]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "DB"
                ]
            }
        },
        "Store._visible_items": {
            "name": "_visible_items",
            "location": 414,
            "return": [
                "Iterator[Tuple[(bytes, bytes)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "DB"
                ]
            }
        },
        "Store._visible_values": {
            "name": "_visible_values",
            "location": 421,
            "return": [
                "Iterator[bytes]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "DB"
                ]
            }
        },
        "Store._size1": {
            "name": "_size1",
            "location": 425,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "DB"
                ]
            }
        },
        "Store._iterkeys": {
            "name": "_iterkeys",
            "location": 428,
            "return": [
                "Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store._itervalues": {
            "name": "_itervalues",
            "location": 432,
            "return": [
                "Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store._iteritems": {
            "name": "_iteritems",
            "location": 436,
            "return": [
                "Iterator[Tuple[(bytes, bytes)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store._clear": {
            "name": "_clear",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.reset_state": {
            "name": "reset_state",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.partition_path": {
            "name": "partition_path",
            "location": 455,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int"
                ]
            }
        },
        "Store._path_with_suffix": {
            "name": "_path_with_suffix",
            "location": 460,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Store.path": {
            "name": "path",
            "location": 466,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.basename": {
            "name": "basename",
            "location": 478,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/stores/__init__.py": {},
    "faust-master/faust/tables/base.py": {
        "Collection._has_key": {
            "name": "_has_key",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Collection._get_key": {
            "name": "_get_key",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Collection._set_key": {
            "name": "_set_key",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Collection._del_key": {
            "name": "_del_key",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Collection.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Collection._serializer_from_type": {
            "name": "_serializer_from_type",
            "location": 171,
            "return": [
                "Optional[CodecArg]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[ModelArg]"
                ]
            }
        },
        "Collection.__hash__": {
            "name": "__hash__",
            "location": 180,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._new_store": {
            "name": "_new_store",
            "location": 185,
            "return": [
                "StoreT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._new_store_by_url": {
            "name": "_new_store_by_url",
            "location": 188,
            "return": [
                "StoreT"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, URL)]"
                ]
            }
        },
        "Collection.data": {
            "name": "data",
            "location": 202,
            "return": [
                "StoreT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.on_recover": {
            "name": "on_recover",
            "location": 213,
            "return": [
                "RecoverCallback"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "RecoverCallback"
                ]
            }
        },
        "Collection.info": {
            "name": "info",
            "location": 219,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.persisted_offset": {
            "name": "persisted_offset",
            "location": 241,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Collection.reset_state": {
            "name": "reset_state",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.send_changelog": {
            "name": "send_changelog",
            "location": 253,
            "return": [
                "FutureMessage"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "Optional[int]"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ]
            }
        },
        "Collection._send_changelog": {
            "name": "_send_changelog",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[EventT]"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ]
            }
        },
        "Collection.partition_for_key": {
            "name": "partition_for_key",
            "location": 288,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Collection._verify_source_topic_partitions": {
            "name": "_verify_source_topic_partitions",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_topic": [
                    "str"
                ]
            }
        },
        "Collection._on_changelog_sent": {
            "name": "_on_changelog_sent",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "FutureMessage"
                ]
            }
        },
        "Collection._should_expire_keys": {
            "name": "_should_expire_keys",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._maybe_set_key_ttl": {
            "name": "_maybe_set_key_ttl",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "Collection._maybe_del_key_ttl": {
            "name": "_maybe_del_key_ttl",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "Collection._changelog_topic_name": {
            "name": "_changelog_topic_name",
            "location": 404,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.join": {
            "name": "join",
            "location": 407,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.left_join": {
            "name": "left_join",
            "location": 411,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.inner_join": {
            "name": "inner_join",
            "location": 415,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.outer_join": {
            "name": "outer_join",
            "location": 419,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._join": {
            "name": "_join",
            "location": 423,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "join_strategy": [
                    "JoinT"
                ]
            }
        },
        "Collection.clone": {
            "name": "clone",
            "location": 427,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.combine": {
            "name": "combine",
            "location": 431,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.contribute_to_stream": {
            "name": "contribute_to_stream",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "StreamT"
                ]
            }
        },
        "Collection._new_changelog_topic": {
            "name": "_new_changelog_topic",
            "location": 449,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.__copy__": {
            "name": "__copy__",
            "location": 480,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.__and__": {
            "name": "__and__",
            "location": 483,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Collection._apply_window_op": {
            "name": "_apply_window_op",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Callable[([Any, Any], Any)]"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Collection._set_windowed": {
            "name": "_set_windowed",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Collection._del_windowed": {
            "name": "_del_windowed",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Collection._window_ranges": {
            "name": "_window_ranges",
            "location": 501,
            "return": [
                "Iterator[WindowRange]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Collection._relative_now": {
            "name": "_relative_now",
            "location": 506,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "Collection._relative_event": {
            "name": "_relative_event",
            "location": 513,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "Collection._relative_field": {
            "name": "_relative_field",
            "location": 520,
            "return": [
                "RelativeHandler"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "FieldDescriptorT"
                ]
            }
        },
        "Collection._relative_timestamp": {
            "name": "_relative_timestamp",
            "location": 528,
            "return": [
                "RelativeHandler"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Collection._windowed_now": {
            "name": "_windowed_now",
            "location": 534,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "Collection._windowed_timestamp": {
            "name": "_windowed_timestamp",
            "location": 538,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Collection._windowed_contains": {
            "name": "_windowed_contains",
            "location": 542,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Collection._windowed_delta": {
            "name": "_windowed_delta",
            "location": 546,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "Collection.label": {
            "name": "label",
            "location": 579,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.shortlabel": {
            "name": "shortlabel",
            "location": 584,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.changelog_topic": {
            "name": "changelog_topic",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "TopicT"
                ]
            }
        },
        "Collection.changelog_topic_name": {
            "name": "changelog_topic_name",
            "location": 600,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[EventT]"
                ]
            }
        },
        "Collection._to_key": {
            "name": "_to_key",
            "location": 611,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "Any"
                ]
            }
        },
        "Collection._to_value": {
            "name": "_to_value",
            "location": 618,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Any"
                ]
            }
        },
        "Collection._human_channel": {
            "name": "_human_channel",
            "location": 621,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._repr_info": {
            "name": "_repr_info",
            "location": 624,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._relative_field.to_value": {
            "name": "to_value",
            "location": 521,
            "return": [
                "Union[(float, datetime)]"
            ],
            "arguments": {
                "event": [
                    "EventT"
                ]
            }
        },
        "Collection._relative_timestamp.handler": {
            "name": "handler",
            "location": 529,
            "return": [
                "Union[(float, datetime)]"
            ],
            "arguments": {
                "event": [
                    "EventT"
                ]
            }
        }
    },
    "faust-master/faust/tables/globaltable.py": {},
    "faust-master/faust/tables/manager.py": {
        "TableManager.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "TableManager.persist_offset_on_commit": {
            "name": "persist_offset_on_commit",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "StoreT"
                ],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "TableManager.on_commit": {
            "name": "on_commit",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offsets": [
                    "MutableMapping[(TP, int)]"
                ]
            }
        },
        "TableManager.on_commit_tp": {
            "name": "on_commit_tp",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "TableManager.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManager.on_actives_ready": {
            "name": "on_actives_ready",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManager.on_standbys_ready": {
            "name": "on_standbys_ready",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManager.__hash__": {
            "name": "__hash__",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManager.changelog_topics": {
            "name": "changelog_topics",
            "location": 105,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManager.changelog_queue": {
            "name": "changelog_queue",
            "location": 110,
            "return": [
                "ThrowableQueue"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManager.recovery": {
            "name": "recovery",
            "location": 121,
            "return": [
                "Recovery"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManager.add": {
            "name": "add",
            "location": 128,
            "return": [
                "CollectionT"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "TableManager.on_partitions_revoked": {
            "name": "on_partitions_revoked",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revoked": [
                    "Set[TP]"
                ]
            }
        }
    },
    "faust-master/faust/tables/objects.py": {
        "ChangeloggedObject.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "'ChangeloggedObjectManager'"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "ChangeloggedObject.__post_init__": {
            "name": "__post_init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedObject.sync_from_storage": {
            "name": "sync_from_storage",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ChangeloggedObject.as_stored_value": {
            "name": "as_stored_value",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedObject.apply_changelog_event": {
            "name": "apply_changelog_event",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "int"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ChangeloggedObjectManager.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Table"
                ]
            }
        },
        "ChangeloggedObjectManager.send_changelog_event": {
            "name": "send_changelog_event",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "operation": [
                    "int"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ChangeloggedObjectManager.__getitem__": {
            "name": "__getitem__",
            "location": 87,
            "return": [
                "ChangeloggedObject"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "ChangeloggedObjectManager.__setitem__": {
            "name": "__setitem__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "ChangeloggedObjectManager.__delitem__": {
            "name": "__delitem__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "ChangeloggedObjectManager._table_type_name": {
            "name": "_table_type_name",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedObjectManager.persisted_offset": {
            "name": "persisted_offset",
            "location": 111,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "ChangeloggedObjectManager.set_persisted_offset": {
            "name": "set_persisted_offset",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "ChangeloggedObjectManager.sync_from_storage": {
            "name": "sync_from_storage",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedObjectManager.flush_to_storage": {
            "name": "flush_to_storage",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedObjectManager.reset_state": {
            "name": "reset_state",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedObjectManager.storage": {
            "name": "storage",
            "location": 157,
            "return": [
                "StoreT"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedObjectManager.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[EventT]"
                ],
                "to_key": [
                    "Callable[([Any], Any)]"
                ],
                "to_value": [
                    "Callable[([Any], Any)]"
                ]
            }
        }
    },
    "faust-master/faust/tables/recovery.py": {
        "Recovery.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "tables": [
                    "TableManagerT"
                ]
            }
        },
        "Recovery.signal_recovery_start": {
            "name": "signal_recovery_start",
            "location": 190,
            "return": [
                "Event"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.signal_recovery_end": {
            "name": "signal_recovery_end",
            "location": 197,
            "return": [
                "Event"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.signal_recovery_reset": {
            "name": "signal_recovery_reset",
            "location": 204,
            "return": [
                "Event"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.add_active": {
            "name": "add_active",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "Recovery.add_standby": {
            "name": "add_standby",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "Recovery._add": {
            "name": "_add",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "tp": [
                    "TP"
                ],
                "offsets": [
                    "Counter[TP]"
                ]
            }
        },
        "Recovery.revoke": {
            "name": "revoke",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Recovery.on_partitions_revoked": {
            "name": "on_partitions_revoked",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revoked": [
                    "Set[TP]"
                ]
            }
        },
        "Recovery._set_recovery_started": {
            "name": "_set_recovery_started",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery._set_recovery_ended": {
            "name": "_set_recovery_ended",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.active_remaining_seconds": {
            "name": "active_remaining_seconds",
            "location": 523,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "remaining": [
                    "float"
                ]
            }
        },
        "Recovery._estimated_active_remaining_secs": {
            "name": "_estimated_active_remaining_secs",
            "location": 527,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "remaining": [
                    "float"
                ]
            }
        },
        "Recovery._highwater_logtable": {
            "name": "_highwater_logtable",
            "location": 604,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "highwaters": [
                    "Mapping[(TP, int)]"
                ]
            }
        },
        "Recovery._consolidate_table_keys": {
            "name": "_consolidate_table_keys",
            "location": 616,
            "return": [
                "Iterator[List[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "TableDataT"
                ]
            }
        },
        "Recovery._start_offsets_logtable": {
            "name": "_start_offsets_logtable",
            "location": 664,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "offsets": [
                    "Mapping[(TP, int)]"
                ]
            }
        },
        "Recovery.flush_buffers": {
            "name": "flush_buffers",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.need_recovery": {
            "name": "need_recovery",
            "location": 786,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.active_remaining": {
            "name": "active_remaining",
            "location": 790,
            "return": [
                "Counter[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.standby_remaining": {
            "name": "standby_remaining",
            "location": 800,
            "return": [
                "Counter[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.active_remaining_total": {
            "name": "active_remaining_total",
            "location": 810,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.standby_remaining_total": {
            "name": "standby_remaining_total",
            "location": 814,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.active_stats": {
            "name": "active_stats",
            "location": 818,
            "return": [
                "RecoveryStatsMapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery.standby_stats": {
            "name": "standby_stats",
            "location": 829,
            "return": [
                "RecoveryStatsMapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery._stats_to_logtable": {
            "name": "_stats_to_logtable",
            "location": 841,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "stats": [
                    "RecoveryStatsMapping"
                ]
            }
        },
        "Recovery._current_total_buffer_size": {
            "name": "_current_total_buffer_size",
            "location": 972,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recovery._is_changelog_tp": {
            "name": "_is_changelog_tp",
            "location": 975,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Recovery._slurp_changelogs._maybe_signal_recovery_end": {
            "name": "_maybe_signal_recovery_end",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/tables/sets.py": {
        "SetWindowSet.add": {
            "name": "add",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Any"
                ]
            }
        },
        "SetWindowSet.discard": {
            "name": "discard",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Any"
                ]
            }
        },
        "SetWindowSet._apply_set_operation": {
            "name": "_apply_set_operation",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "str"
                ],
                "element": [
                    "Any"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "ChangeloggedSet.__post_init__": {
            "name": "__post_init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedSet.on_add": {
            "name": "on_add",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "VT"
                ]
            }
        },
        "ChangeloggedSet.on_discard": {
            "name": "on_discard",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "VT"
                ]
            }
        },
        "ChangeloggedSet.on_change": {
            "name": "on_change",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "added": [
                    "Set[VT]"
                ],
                "removed": [
                    "Set[VT]"
                ]
            }
        },
        "ChangeloggedSet.sync_from_storage": {
            "name": "sync_from_storage",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "ChangeloggedSet.as_stored_value": {
            "name": "as_stored_value",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedSet.__iter__": {
            "name": "__iter__",
            "location": 94,
            "return": [
                "Iterator[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeloggedSet.apply_changelog_event": {
            "name": "apply_changelog_event",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "int"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SetTableManager.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "set_table": [
                    "'SetTable[KT, VT]'"
                ]
            }
        },
        "SetTableManager._update": {
            "name": "_update",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "members": [
                    "List[VT]"
                ]
            }
        },
        "SetTableManager._difference_update": {
            "name": "_difference_update",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "members": [
                    "List[VT]"
                ]
            }
        },
        "SetTableManager._clear": {
            "name": "_clear",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "members": [
                    "List[VT]"
                ]
            }
        },
        "SetTableManager._intersection_update": {
            "name": "_intersection_update",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "members": [
                    "List[VT]"
                ]
            }
        },
        "SetTableManager._symmetric_difference_update": {
            "name": "_symmetric_difference_update",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "members": [
                    "List[VT]"
                ]
            }
        },
        "SetTableManager._enable": {
            "name": "_enable",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetTableManager.topic": {
            "name": "topic",
            "location": 263,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetTable.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "SetTable._new_store": {
            "name": "_new_store",
            "location": 304,
            "return": [
                "StoreT"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetTable.__getitem__": {
            "name": "__getitem__",
            "location": 307,
            "return": [
                "ChangeloggedSet[VT]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        }
    },
    "faust-master/faust/tables/table.py": {
        "Table.using_window": {
            "name": "using_window",
            "location": 22,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "WindowT"
                ]
            }
        },
        "Table.hopping": {
            "name": "hopping",
            "location": 31,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Seconds"
                ],
                "step": [
                    "Seconds"
                ],
                "expires": [
                    "Seconds"
                ],
                "key_index": [
                    "bool"
                ]
            }
        },
        "Table.tumbling": {
            "name": "tumbling",
            "location": 40,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Seconds"
                ],
                "expires": [
                    "Seconds"
                ],
                "key_index": [
                    "bool"
                ]
            }
        },
        "Table.__missing__": {
            "name": "__missing__",
            "location": 49,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "Table._has_key": {
            "name": "_has_key",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "Table._get_key": {
            "name": "_get_key",
            "location": 57,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "Table._set_key": {
            "name": "_set_key",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "value": [
                    "VT"
                ]
            }
        },
        "Table._del_key": {
            "name": "_del_key",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "Table.on_key_get": {
            "name": "on_key_get",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "Table.on_key_set": {
            "name": "on_key_set",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "value": [
                    "VT"
                ]
            }
        },
        "Table.on_key_del": {
            "name": "on_key_del",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ]
            }
        },
        "Table.as_ansitable": {
            "name": "as_ansitable",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/tables/wrappers.py": {
        "WindowedKeysView.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "WindowWrapperT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedKeysView.__iter__": {
            "name": "__iter__",
            "location": 63,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedKeysView.__len__": {
            "name": "__len__",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedKeysView.now": {
            "name": "now",
            "location": 75,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedKeysView.current": {
            "name": "current",
            "location": 81,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedKeysView.delta": {
            "name": "delta",
            "location": 87,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedItemsView.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "WindowWrapperT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedItemsView.__iter__": {
            "name": "__iter__",
            "location": 103,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedItemsView.now": {
            "name": "now",
            "location": 111,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedItemsView.current": {
            "name": "current",
            "location": 116,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedItemsView.delta": {
            "name": "delta",
            "location": 121,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedValuesView.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "WindowWrapperT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedValuesView.__iter__": {
            "name": "__iter__",
            "location": 138,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedValuesView.now": {
            "name": "now",
            "location": 147,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedValuesView.current": {
            "name": "current",
            "location": 153,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedValuesView.delta": {
            "name": "delta",
            "location": 159,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSet.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT"
                ],
                "table": [
                    "TableT"
                ],
                "wrapper": [
                    "WindowWrapperT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSet.apply": {
            "name": "apply",
            "location": 202,
            "return": [
                "WindowSetT[(KT, VT)]"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Callable[([VT, VT], VT)]"
                ],
                "value": [
                    "VT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSet.value": {
            "name": "value",
            "location": 214,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSet.now": {
            "name": "now",
            "location": 224,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSet.current": {
            "name": "current",
            "location": 228,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSet.delta": {
            "name": "delta",
            "location": 234,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSet.__unauthorized_dict_operation": {
            "name": "__unauthorized_dict_operation",
            "location": 239,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ]
            }
        },
        "WindowSet.keys": {
            "name": "keys",
            "location": 244,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSet.items": {
            "name": "items",
            "location": 247,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSet.values": {
            "name": "values",
            "location": 250,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSet.__getitem__": {
            "name": "__getitem__",
            "location": 253,
            "return": [
                "VT"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "KT"
                ]
            }
        },
        "WindowSet.__setitem__": {
            "name": "__setitem__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "KT"
                ],
                "value": [
                    "VT"
                ]
            }
        },
        "WindowSet.__delitem__": {
            "name": "__delitem__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "KT"
                ]
            }
        },
        "WindowSet.__iadd__": {
            "name": "__iadd__",
            "location": 276,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__isub__": {
            "name": "__isub__",
            "location": 279,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__imul__": {
            "name": "__imul__",
            "location": 282,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__itruediv__": {
            "name": "__itruediv__",
            "location": 285,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 288,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__imod__": {
            "name": "__imod__",
            "location": 291,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__ipow__": {
            "name": "__ipow__",
            "location": 294,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__ilshift__": {
            "name": "__ilshift__",
            "location": 297,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__irshift__": {
            "name": "__irshift__",
            "location": 300,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__iand__": {
            "name": "__iand__",
            "location": 303,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__ixor__": {
            "name": "__ixor__",
            "location": 306,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__ior__": {
            "name": "__ior__",
            "location": 309,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT"
                ]
            }
        },
        "WindowSet.__repr__": {
            "name": "__repr__",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "TableT"
                ]
            }
        },
        "WindowWrapper.clone": {
            "name": "clone",
            "location": 346,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": [],
                "relative_to": [
                    "RelativeArg"
                ]
            }
        },
        "WindowWrapper.name": {
            "name": "name",
            "location": 356,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.relative_to": {
            "name": "relative_to",
            "location": 360,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "RelativeArg"
                ]
            }
        },
        "WindowWrapper.relative_to_now": {
            "name": "relative_to_now",
            "location": 364,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.relative_to_field": {
            "name": "relative_to_field",
            "location": 368,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "FieldDescriptorT"
                ]
            }
        },
        "WindowWrapper.relative_to_stream": {
            "name": "relative_to_stream",
            "location": 390,
            "return": [
                "WindowWrapperT"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_timestamp": {
            "name": "get_timestamp",
            "location": 398,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapper.on_recover": {
            "name": "on_recover",
            "location": 411,
            "return": [
                "RecoverCallback"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "RecoverCallback"
                ]
            }
        },
        "WindowWrapper.__contains__": {
            "name": "__contains__",
            "location": 415,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "WindowWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 418,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "WindowWrapper.__setitem__": {
            "name": "__setitem__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "WindowWrapper.on_set_key": {
            "name": "on_set_key",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "WindowWrapper.on_del_key": {
            "name": "on_del_key",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "WindowWrapper.__delitem__": {
            "name": "__delitem__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "WindowWrapper.__len__": {
            "name": "__len__",
            "location": 444,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper._relative_handler": {
            "name": "_relative_handler",
            "location": 450,
            "return": [
                "Optional[RelativeHandler]"
            ],
            "arguments": {
                "self": [],
                "relative_to": [
                    "RelativeArg"
                ]
            }
        },
        "WindowWrapper.__iter__": {
            "name": "__iter__",
            "location": 465,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.keys": {
            "name": "keys",
            "location": 468,
            "return": [
                "KeysView"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper._keys": {
            "name": "_keys",
            "location": 472,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.values": {
            "name": "values",
            "location": 482,
            "return": [
                "ValuesView"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapper.items": {
            "name": "items",
            "location": 486,
            "return": [
                "ItemsView"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapper._items": {
            "name": "_items",
            "location": 490,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapper._items_now": {
            "name": "_items_now",
            "location": 499,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper._items_current": {
            "name": "_items_current",
            "location": 507,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapper._items_delta": {
            "name": "_items_delta",
            "location": 517,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapper.as_ansitable": {
            "name": "as_ansitable",
            "location": 526,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "WindowWrapper.get_relative_timestamp": {
            "name": "get_relative_timestamp",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_to": [
                    "RelativeArg"
                ]
            }
        }
    },
    "faust-master/faust/tables/__init__.py": {},
    "faust-master/faust/transport/base.py": {
        "Transport.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "List[URL]"
                ],
                "app": [
                    "AppT"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Transport.create_consumer": {
            "name": "create_consumer",
            "location": 65,
            "return": [
                "ConsumerT"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "ConsumerCallback"
                ]
            }
        },
        "Transport.create_producer": {
            "name": "create_producer",
            "location": 72,
            "return": [
                "ProducerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.create_transaction_manager": {
            "name": "create_transaction_manager",
            "location": 76,
            "return": [
                "TransactionManagerT"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "producer": [
                    "ProducerT"
                ]
            }
        },
        "Transport.create_conductor": {
            "name": "create_conductor",
            "location": 88,
            "return": [
                "ConductorT"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/transport/conductor.py": {
        "ConductorCompiler.build": {
            "name": "build",
            "location": 52,
            "return": [
                "ConsumerCallback"
            ],
            "arguments": {
                "self": [],
                "conductor": [
                    "'Conductor'"
                ],
                "tp": [
                    "TP"
                ],
                "channels": [
                    "MutableSet[_Topic]"
                ]
            }
        },
        "Conductor.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Conductor.acks_enabled_for": {
            "name": "acks_enabled_for",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "Conductor._compile_message_handler": {
            "name": "_compile_message_handler",
            "location": 239,
            "return": [
                "ConsumerCallback"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor._update_tp_index": {
            "name": "_update_tp_index",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assigned": [
                    "Set[TP]"
                ]
            }
        },
        "Conductor._update_callback_map": {
            "name": "_update_callback_map",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor._build_handler": {
            "name": "_build_handler",
            "location": 359,
            "return": [
                "ConsumerCallback"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "channels": [
                    "MutableSet[_Topic]"
                ]
            }
        },
        "Conductor.clear": {
            "name": "clear",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor.__contains__": {
            "name": "__contains__",
            "location": 375,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Conductor.__iter__": {
            "name": "__iter__",
            "location": 378,
            "return": [
                "Iterator[TopicT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor.__len__": {
            "name": "__len__",
            "location": 381,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor.__hash__": {
            "name": "__hash__",
            "location": 384,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor.add": {
            "name": "add",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "TopicT"
                ]
            }
        },
        "Conductor._topic_contain_unsubscribed_topics": {
            "name": "_topic_contain_unsubscribed_topics",
            "location": 394,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "TopicT"
                ]
            }
        },
        "Conductor.discard": {
            "name": "discard",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "Any"
                ]
            }
        },
        "Conductor._flag_changes": {
            "name": "_flag_changes",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor.label": {
            "name": "label",
            "location": 409,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor.shortlabel": {
            "name": "shortlabel",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conductor.acking_topics": {
            "name": "acking_topics",
            "location": 419,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConductorCompiler.build.on_pressure_high": {
            "name": "on_pressure_high",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ConductorCompiler.build.on_pressure_drop": {
            "name": "on_pressure_drop",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/transport/consumer.py": {
        "ensure_TP": {
            "name": "ensure_TP",
            "location": 127,
            "return": [
                "TP"
            ],
            "arguments": {
                "tp": [
                    "Any"
                ]
            }
        },
        "ensure_TPset": {
            "name": "ensure_TPset",
            "location": 132,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "tps": [
                    "Iterable[Any]"
                ]
            }
        },
        "Fetcher.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "TransactionManager.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "TransportT"
                ]
            }
        },
        "TransactionManager._tps_to_transactional_ids": {
            "name": "_tps_to_transactional_ids",
            "location": 250,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Set[TP]"
                ]
            }
        },
        "TransactionManager._tps_to_active_tpgs": {
            "name": "_tps_to_active_tpgs",
            "location": 259,
            "return": [
                "Set[TopicPartitionGroup]"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Set[TP]"
                ]
            }
        },
        "TransactionManager.send_soon": {
            "name": "send_soon",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "FutureMessage"
                ]
            }
        },
        "TransactionManager.key_partition": {
            "name": "key_partition",
            "location": 323,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "TransactionManager.supports_headers": {
            "name": "supports_headers",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "TransportT"
                ],
                "callback": [
                    "ConsumerCallback"
                ],
                "on_partitions_revoked": [
                    "PartitionsRevokedCallback"
                ],
                "on_partitions_assigned": [
                    "PartitionsAssignedCallback"
                ]
            }
        },
        "Consumer.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 455,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer._reset_state": {
            "name": "_reset_state",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer._get_active_partitions": {
            "name": "_get_active_partitions",
            "location": 476,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer._set_active_tps": {
            "name": "_set_active_tps",
            "location": 483,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Set[TP]"
                ]
            }
        },
        "Consumer.on_buffer_full": {
            "name": "on_buffer_full",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Consumer.on_buffer_drop": {
            "name": "on_buffer_drop",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Consumer.stop_flow": {
            "name": "stop_flow",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.resume_flow": {
            "name": "resume_flow",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.pause_partitions": {
            "name": "pause_partitions",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Iterable[TP]"
                ]
            }
        },
        "Consumer.resume_partitions": {
            "name": "resume_partitions",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Iterable[TP]"
                ]
            }
        },
        "Consumer._new_topicpartition": {
            "name": "_new_topicpartition",
            "location": 561,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "Consumer._is_changelog_tp": {
            "name": "_is_changelog_tp",
            "location": 565,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Consumer._to_message": {
            "name": "_to_message",
            "location": 701,
            "return": [
                "ConsumerMessage"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "record": [
                    "Any"
                ]
            }
        },
        "Consumer.track_message": {
            "name": "track_message",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        },
        "Consumer.ack": {
            "name": "ack",
            "location": 713,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        },
        "Consumer._clean_unacked_messages": {
            "name": "_clean_unacked_messages",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.verify_event_path": {
            "name": "verify_event_path",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "Consumer.verify_recovery_event_path": {
            "name": "verify_recovery_event_path",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "Consumer._filter_committable_offsets": {
            "name": "_filter_committable_offsets",
            "location": 894,
            "return": [
                "Dict[(TP, int)]"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Iterable[TP]"
                ]
            }
        },
        "Consumer._filter_tps_with_pending_acks": {
            "name": "_filter_tps_with_pending_acks",
            "location": 968,
            "return": [
                "Iterator[TP]"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "TPorTopicSet"
                ]
            }
        },
        "Consumer._should_commit": {
            "name": "_should_commit",
            "location": 973,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Consumer._new_offset": {
            "name": "_new_offset",
            "location": 977,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "Consumer._add_gap": {
            "name": "_add_gap",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset_from": [
                    "int"
                ],
                "offset_to": [
                    "int"
                ]
            }
        },
        "Consumer.close": {
            "name": "close",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.unacked": {
            "name": "unacked",
            "location": 1103,
            "return": [
                "Set[Message]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerThread.__init__": {
            "name": "__init__",
            "location": 1115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "'ThreadDelegateConsumer'"
                ]
            }
        },
        "ConsumerThread.seek": {
            "name": "seek",
            "location": 1153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "ConsumerThread.assignment": {
            "name": "assignment",
            "location": 1158,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerThread.highwater": {
            "name": "highwater",
            "location": 1163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "ConsumerThread.topic_partitions": {
            "name": "topic_partitions",
            "location": 1168,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "ConsumerThread.close": {
            "name": "close",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerThread.key_partition": {
            "name": "key_partition",
            "location": 1221,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "Optional[bytes]"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "ConsumerThread.verify_recovery_event_path": {
            "name": "verify_recovery_event_path",
            "location": 1228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "ThreadDelegateConsumer.__init__": {
            "name": "__init__",
            "location": 1244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadDelegateConsumer._new_consumer_thread": {
            "name": "_new_consumer_thread",
            "location": 1252,
            "return": [
                "ConsumerThread"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadDelegateConsumer.assignment": {
            "name": "assignment",
            "location": 1305,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadDelegateConsumer.highwater": {
            "name": "highwater",
            "location": 1309,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "ThreadDelegateConsumer.topic_partitions": {
            "name": "topic_partitions",
            "location": 1313,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "ThreadDelegateConsumer.close": {
            "name": "close",
            "location": 1328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadDelegateConsumer.key_partition": {
            "name": "key_partition",
            "location": 1332,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "Optional[bytes]"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "ThreadDelegateConsumer.verify_recovery_event_path": {
            "name": "verify_recovery_event_path",
            "location": 1339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        }
    },
    "faust-master/faust/transport/producer.py": {
        "ProducerBuffer.__post_init__": {
            "name": "__post_init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProducerBuffer.put": {
            "name": "put",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "FutureMessage"
                ]
            }
        },
        "ProducerBuffer.size": {
            "name": "size",
            "location": 97,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "TransportT"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Producer.send_soon": {
            "name": "send_soon",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "FutureMessage"
                ]
            }
        },
        "Producer.key_partition": {
            "name": "key_partition",
            "location": 178,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "Producer.supports_headers": {
            "name": "supports_headers",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/transport/utils.py": {
        "DefaultSchedulingStrategy.map_from_records": {
            "name": "map_from_records",
            "location": 38,
            "return": [
                "TopicIndexMap"
            ],
            "arguments": {
                "cls": [],
                "records": [
                    "Mapping[(TP, List)]"
                ]
            }
        },
        "DefaultSchedulingStrategy.iterate": {
            "name": "iterate",
            "location": 49,
            "return": [
                "Iterator[Tuple[(TP, Any)]]"
            ],
            "arguments": {
                "self": [],
                "records": [
                    "Mapping[(TP, List)]"
                ]
            }
        },
        "DefaultSchedulingStrategy.records_iterator": {
            "name": "records_iterator",
            "location": 53,
            "return": [
                "Iterator[Tuple[(TP, Any)]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "TopicIndexMap"
                ]
            }
        },
        "TopicBuffer.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicBuffer.add": {
            "name": "add",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "buffer": [
                    "List"
                ]
            }
        },
        "TopicBuffer.__iter__": {
            "name": "__iter__",
            "location": 93,
            "return": [
                "Iterator[Tuple[(TP, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicBuffer.__next__": {
            "name": "__next__",
            "location": 110,
            "return": [
                "Tuple[(TP, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/transport/__init__.py": {},
    "faust-master/faust/transport/drivers/aiokafka.py": {
        "server_list": {
            "name": "server_list",
            "location": 166,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "urls": [
                    "List[URL]"
                ],
                "default_port": [
                    "int"
                ]
            }
        },
        "credentials_to_aiokafka_auth": {
            "name": "credentials_to_aiokafka_auth",
            "location": 1263,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "credentials": [
                    "CredentialsT"
                ],
                "ssl_context": [
                    "Any"
                ]
            }
        },
        "ConsumerRebalanceListener.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread": [
                    "ConsumerThread"
                ]
            }
        },
        "ConsumerRebalanceListener.on_partitions_revoked": {
            "name": "on_partitions_revoked",
            "location": 179,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "revoked": [
                    "Iterable[_TopicPartition]"
                ]
            }
        },
        "Consumer._new_consumer_thread": {
            "name": "_new_consumer_thread",
            "location": 210,
            "return": [
                "ConsumerThread"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer._new_topicpartition": {
            "name": "_new_topicpartition",
            "location": 237,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "Consumer._to_message": {
            "name": "_to_message",
            "location": 240,
            "return": [
                "ConsumerMessage"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "record": [
                    "Any"
                ]
            }
        },
        "AIOKafkaConsumerThread.__post_init__": {
            "name": "__post_init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread._create_consumer": {
            "name": "_create_consumer",
            "location": 311,
            "return": [
                "aiokafka.AIOKafkaConsumer"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "AIOKafkaConsumerThread._create_worker_consumer": {
            "name": "_create_worker_consumer",
            "location": 320,
            "return": [
                "aiokafka.AIOKafkaConsumer"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "'Transport'"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "AIOKafkaConsumerThread._create_client_consumer": {
            "name": "_create_client_consumer",
            "location": 372,
            "return": [
                "aiokafka.AIOKafkaConsumer"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "'Transport'"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "AIOKafkaConsumerThread.trace_category": {
            "name": "trace_category",
            "location": 395,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread.start_rebalancing_span": {
            "name": "start_rebalancing_span",
            "location": 398,
            "return": [
                "opentracing.Span"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread.start_coordinator_span": {
            "name": "start_coordinator_span",
            "location": 401,
            "return": [
                "opentracing.Span"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread._start_span": {
            "name": "_start_span",
            "location": 404,
            "return": [
                "opentracing.Span"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AIOKafkaConsumerThread._transform_span_lazy": {
            "name": "_transform_span_lazy",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "AIOKafkaConsumerThread._span_finish": {
            "name": "_span_finish",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "AIOKafkaConsumerThread._on_span_generation_pending": {
            "name": "_on_span_generation_pending",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "AIOKafkaConsumerThread._on_span_generation_known": {
            "name": "_on_span_generation_known",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "AIOKafkaConsumerThread._on_span_cancelled_early": {
            "name": "_on_span_cancelled_early",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "AIOKafkaConsumerThread.traced_from_parent_span": {
            "name": "traced_from_parent_span",
            "location": 484,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "parent_span": [
                    "opentracing.Span"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "AIOKafkaConsumerThread.flush_spans": {
            "name": "flush_spans",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread.on_generation_id_known": {
            "name": "on_generation_id_known",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread.close": {
            "name": "close",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread.verify_event_path": {
            "name": "verify_event_path",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "AIOKafkaConsumerThread.verify_recovery_event_path": {
            "name": "verify_recovery_event_path",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "AIOKafkaConsumerThread._verify_aiokafka_event_path": {
            "name": "_verify_aiokafka_event_path",
            "location": 631,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "AIOKafkaConsumerThread._log_slow_processing_stream": {
            "name": "_log_slow_processing_stream",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AIOKafkaConsumerThread._log_slow_processing_commit": {
            "name": "_log_slow_processing_commit",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AIOKafkaConsumerThread._make_slow_processing_error": {
            "name": "_make_slow_processing_error",
            "location": 703,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ],
                "causes": [
                    "Iterable[str]"
                ]
            }
        },
        "AIOKafkaConsumerThread._log_slow_processing": {
            "name": "_log_slow_processing",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "AIOKafkaConsumerThread.seek": {
            "name": "seek",
            "location": 752,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "AIOKafkaConsumerThread.assignment": {
            "name": "assignment",
            "location": 756,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread.highwater": {
            "name": "highwater",
            "location": 760,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "AIOKafkaConsumerThread.topic_partitions": {
            "name": "topic_partitions",
            "location": 767,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "AIOKafkaConsumerThread._ensure_consumer": {
            "name": "_ensure_consumer",
            "location": 794,
            "return": [
                "aiokafka.AIOKafkaConsumer"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThread.key_partition": {
            "name": "key_partition",
            "location": 868,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "Optional[bytes]"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "Producer.__post_init__": {
            "name": "__post_init__",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer._settings_default": {
            "name": "_settings_default",
            "location": 906,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer._settings_auth": {
            "name": "_settings_auth",
            "location": 924,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer._settings_extra": {
            "name": "_settings_extra",
            "location": 959,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer._new_producer": {
            "name": "_new_producer",
            "location": 964,
            "return": [
                "aiokafka.AIOKafkaProducer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer._producer_type": {
            "name": "_producer_type",
            "location": 973,
            "return": [
                "Type[aiokafka.BaseProducer]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer._ensure_producer": {
            "name": "_ensure_producer",
            "location": 1015,
            "return": [
                "aiokafka.BaseProducer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer.key_partition": {
            "name": "key_partition",
            "location": 1093,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "Producer.supports_headers": {
            "name": "supports_headers",
            "location": 1106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.__init__": {
            "name": "__init__",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport._topic_config": {
            "name": "_topic_config",
            "location": 1132,
            "return": [
                "MutableMapping[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "retention": [
                    "int"
                ],
                "compacting": [
                    "bool"
                ],
                "deleting": [
                    "bool"
                ]
            }
        },
        "AIOKafkaConsumerThread._transform_span_lazy.LazySpan.finish": {
            "name": "finish",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/transport/drivers/confluent.py": {
        "server_list": {
            "name": "server_list",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "urls": [
                    "List[URL]"
                ],
                "default_port": [
                    "int"
                ]
            }
        },
        "Consumer._new_consumer_thread": {
            "name": "_new_consumer_thread",
            "location": 69,
            "return": [
                "ConsumerThread"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer._to_message": {
            "name": "_to_message",
            "location": 98,
            "return": [
                "ConsumerMessage"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "record": [
                    "Any"
                ]
            }
        },
        "Consumer._new_topicpartition": {
            "name": "_new_topicpartition",
            "location": 125,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "ConfluentConsumerThread._create_consumer": {
            "name": "_create_consumer",
            "location": 138,
            "return": [
                "_Consumer"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "ConfluentConsumerThread._create_worker_consumer": {
            "name": "_create_worker_consumer",
            "location": 147,
            "return": [
                "_Consumer"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "'Transport'"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "ConfluentConsumerThread._create_client_consumer": {
            "name": "_create_client_consumer",
            "location": 174,
            "return": [
                "_Consumer"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "'Transport'"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "ConfluentConsumerThread.close": {
            "name": "close",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfluentConsumerThread._on_assign": {
            "name": "_on_assign",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "_Consumer"
                ],
                "assigned": [
                    "List[_TopicPartition]"
                ]
            }
        },
        "ConfluentConsumerThread._on_revoke": {
            "name": "_on_revoke",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "_Consumer"
                ],
                "revoked": [
                    "List[_TopicPartition]"
                ]
            }
        },
        "ConfluentConsumerThread.seek": {
            "name": "seek",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "ConfluentConsumerThread.assignment": {
            "name": "assignment",
            "location": 276,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfluentConsumerThread.highwater": {
            "name": "highwater",
            "location": 279,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "ConfluentConsumerThread.topic_partitions": {
            "name": "topic_partitions",
            "location": 284,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "ConfluentConsumerThread._ensure_consumer": {
            "name": "_ensure_consumer",
            "location": 317,
            "return": [
                "_Consumer"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfluentConsumerThread.key_partition": {
            "name": "key_partition",
            "location": 351,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "Optional[bytes]"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "ProducerProduceFuture.set_from_on_delivery": {
            "name": "set_from_on_delivery",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "Optional[BaseException]"
                ],
                "msg": [
                    "_Message"
                ]
            }
        },
        "ProducerProduceFuture.message_to_metadata": {
            "name": "message_to_metadata",
            "location": 371,
            "return": [
                "RecordMetadata"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_Message"
                ]
            }
        },
        "ProducerThread.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "'Producer'"
                ]
            }
        },
        "ProducerThread.produce": {
            "name": "produce",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ],
                "value": [
                    "bytes"
                ],
                "partition": [
                    "int"
                ],
                "on_delivery": [
                    "Callable"
                ]
            }
        },
        "Producer.__post_init__": {
            "name": "__post_init__",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer.key_partition": {
            "name": "key_partition",
            "location": 549,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "Transport._topic_config": {
            "name": "_topic_config",
            "location": 563,
            "return": [
                "MutableMapping[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "retention": [
                    "int"
                ],
                "compacting": [
                    "bool"
                ],
                "deleting": [
                    "bool"
                ]
            }
        }
    },
    "faust-master/faust/transport/drivers/__init__.py": {},
    "faust-master/faust/transport/_cython/__init__.py": {},
    "faust-master/faust/types/agents.py": {
        "ActorT.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "'AgentT'"
                ],
                "stream": [
                    "StreamT"
                ],
                "it": [
                    "_T@@"
                ],
                "active_partitions": [
                    "Set[TP]"
                ]
            }
        },
        "ActorT.cancel": {
            "name": "cancel",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorT.traceback": {
            "name": "traceback",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentT.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "AgentFun"
                ]
            }
        },
        "AgentT.actor_tracebacks": {
            "name": "actor_tracebacks",
            "location": 145,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentT.__call__": {
            "name": "__call__",
            "location": 149,
            "return": [
                "ActorRefT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentT.test_context": {
            "name": "test_context",
            "location": 157,
            "return": [
                "'AgentTestWrapperT'"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ],
                "supervisor_strategy": [
                    "SupervisorStrategyT"
                ]
            }
        },
        "AgentT.add_sink": {
            "name": "add_sink",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "SinkT"
                ]
            }
        },
        "AgentT.stream": {
            "name": "stream",
            "location": 168,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentT.info": {
            "name": "info",
            "location": 246,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentT.clone": {
            "name": "clone",
            "location": 250,
            "return": [
                "'AgentT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentT.get_topic_names": {
            "name": "get_topic_names",
            "location": 254,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentT.channel": {
            "name": "channel",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "ChannelT"
                ]
            }
        },
        "AgentT.channel_iterator": {
            "name": "channel_iterator",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "AsyncIterator"
                ]
            }
        },
        "AgentT._agent_label": {
            "name": "_agent_label",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name_suffix": [
                    "str"
                ]
            }
        },
        "AgentManagerT.actor_tracebacks": {
            "name": "actor_tracebacks",
            "location": 294,
            "return": [
                "Mapping[(str, List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentManagerT.human_tracebacks": {
            "name": "human_tracebacks",
            "location": 298,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTestWrapperT.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTestWrapperT.to_message": {
            "name": "to_message",
            "location": 333,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ]
            }
        }
    },
    "faust-master/faust/types/app.py": {
        "TracerT.default_tracer": {
            "name": "default_tracer",
            "location": 90,
            "return": [
                "opentracing.Tracer"
            ],
            "arguments": {
                "self": []
            }
        },
        "TracerT.trace": {
            "name": "trace",
            "location": 94,
            "return": [
                "ContextManager"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "sample_rate": [
                    "float"
                ]
            }
        },
        "TracerT.get_tracer": {
            "name": "get_tracer",
            "location": 100,
            "return": [
                "opentracing.Tracer"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "BootStrategyT.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "'AppT'"
                ]
            }
        },
        "BootStrategyT.server": {
            "name": "server",
            "location": 129,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategyT.client_only": {
            "name": "client_only",
            "location": 133,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootStrategyT.producer_only": {
            "name": "producer_only",
            "location": 137,
            "return": [
                "Iterable[ServiceT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "AppT.config_from_object": {
            "name": "config_from_object",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "AppT.finalize": {
            "name": "finalize",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.main": {
            "name": "main",
            "location": 215,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.worker_init": {
            "name": "worker_init",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.worker_init_post_autodiscover": {
            "name": "worker_init_post_autodiscover",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.discover": {
            "name": "discover",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.topic": {
            "name": "topic",
            "location": 234,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.channel": {
            "name": "channel",
            "location": 257,
            "return": [
                "ChannelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.agent": {
            "name": "agent",
            "location": 267,
            "return": [
                "Callable[([AgentFun[_T]], AgentT[_T])]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(str, ChannelT[_T])]"
                ]
            }
        },
        "AppT.task": {
            "name": "task",
            "location": 281,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "TaskArg"
                ]
            }
        },
        "AppT.timer": {
            "name": "timer",
            "location": 287,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "Seconds"
                ],
                "on_leader": [
                    "bool"
                ],
                "traced": [
                    "bool"
                ],
                "name": [
                    "str"
                ],
                "max_drift_correction": [
                    "float"
                ]
            }
        },
        "AppT.crontab": {
            "name": "crontab",
            "location": 295,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "cron_format": [
                    "str"
                ]
            }
        },
        "AppT.service": {
            "name": "service",
            "location": 302,
            "return": [
                "Type[ServiceT]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[ServiceT]"
                ]
            }
        },
        "AppT.stream": {
            "name": "stream",
            "location": 306,
            "return": [
                "StreamT"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "AsyncIterable"
                ],
                "beacon": [
                    "NodeT"
                ]
            }
        },
        "AppT.Table": {
            "name": "Table",
            "location": 313,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AppT.GlobalTable": {
            "name": "GlobalTable",
            "location": 324,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AppT.SetTable": {
            "name": "SetTable",
            "location": 335,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AppT.SetGlobalTable": {
            "name": "SetGlobalTable",
            "location": 346,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AppT.page": {
            "name": "page",
            "location": 357,
            "return": [
                "Callable[([PageArg], Type[View])]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "AppT.table_route": {
            "name": "table_route",
            "location": 364,
            "return": [
                "ViewDecorator"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "shard_param": [
                    "str"
                ]
            }
        },
        "AppT.command": {
            "name": "command",
            "location": 373,
            "return": [
                "Callable[([Callable], Type[_AppCommand])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.create_event": {
            "name": "create_event",
            "location": 380,
            "return": [
                "_EventT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "headers": [
                    "HeadersArg"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "AppT.trace": {
            "name": "trace",
            "location": 396,
            "return": [
                "ContextManager"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "trace_enabled": [
                    "bool"
                ]
            }
        },
        "AppT.LiveCheck": {
            "name": "LiveCheck",
            "location": 418,
            "return": [
                "_LiveCheck"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.is_leader": {
            "name": "is_leader",
            "location": 427,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.FlowControlQueue": {
            "name": "FlowControlQueue",
            "location": 431,
            "return": [
                "ThrowableQueue"
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "int"
                ]
            }
        },
        "AppT.Worker": {
            "name": "Worker",
            "location": 440,
            "return": [
                "_Worker"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.on_webserver_init": {
            "name": "on_webserver_init",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "Web"
                ]
            }
        },
        "AppT.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.conf": {
            "name": "conf",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "_Settings"
                ]
            }
        },
        "AppT.transport": {
            "name": "transport",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "TransportT"
                ]
            }
        },
        "AppT.producer_transport": {
            "name": "producer_transport",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "TransportT"
                ]
            }
        },
        "AppT.cache": {
            "name": "cache",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "CacheBackendT"
                ]
            }
        },
        "AppT.producer": {
            "name": "producer",
            "location": 496,
            "return": [
                "ProducerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.consumer": {
            "name": "consumer",
            "location": 501,
            "return": [
                "ConsumerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.tables": {
            "name": "tables",
            "location": 506,
            "return": [
                "TableManagerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.topics": {
            "name": "topics",
            "location": 511,
            "return": [
                "ConductorT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.monitor": {
            "name": "monitor",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_Monitor"
                ]
            }
        },
        "AppT.flow_control": {
            "name": "flow_control",
            "location": 525,
            "return": [
                "FlowControlEvent"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.http_client": {
            "name": "http_client",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "HttpClientT"
                ]
            }
        },
        "AppT.assignor": {
            "name": "assignor",
            "location": 539,
            "return": [
                "PartitionAssignorT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.router": {
            "name": "router",
            "location": 544,
            "return": [
                "RouterT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.serializers": {
            "name": "serializers",
            "location": 549,
            "return": [
                "RegistryT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.web": {
            "name": "web",
            "location": 554,
            "return": [
                "Web"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT.in_transaction": {
            "name": "in_transaction",
            "location": 559,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppT._span_add_default_tags": {
            "name": "_span_add_default_tags",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "AppT._start_span_from_rebalancing": {
            "name": "_start_span_from_rebalancing",
            "location": 567,
            "return": [
                "opentracing.Span"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/types/assignor.py": {
        "PartitionAssignorT.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "replicas": [
                    "int"
                ]
            }
        },
        "PartitionAssignorT.group_for_topic": {
            "name": "group_for_topic",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "PartitionAssignorT.assigned_standbys": {
            "name": "assigned_standbys",
            "location": 40,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignorT.assigned_actives": {
            "name": "assigned_actives",
            "location": 44,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionAssignorT.is_active": {
            "name": "is_active",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "PartitionAssignorT.is_standby": {
            "name": "is_standby",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "PartitionAssignorT.key_store": {
            "name": "key_store",
            "location": 56,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "PartitionAssignorT.table_metadata": {
            "name": "table_metadata",
            "location": 60,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "PartitionAssignorT.tables_metadata": {
            "name": "tables_metadata",
            "location": 64,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderAssignorT.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "LeaderAssignorT.is_leader": {
            "name": "is_leader",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/auth.py": {
        "to_credentials": {
            "name": "to_credentials",
            "location": 39,
            "return": [
                "Optional[CredentialsT]"
            ],
            "arguments": {
                "obj": [
                    "CredentialsArg"
                ]
            }
        }
    },
    "faust-master/faust/types/channels.py": {
        "ChannelT.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "ChannelT.clone": {
            "name": "clone",
            "location": 70,
            "return": [
                "'ChannelT[_T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.clone_using_queue": {
            "name": "clone_using_queue",
            "location": 75,
            "return": [
                "'ChannelT[_T]'"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "asyncio.Queue"
                ]
            }
        },
        "ChannelT.stream": {
            "name": "stream",
            "location": 79,
            "return": [
                "'_StreamT[_T]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.get_topic_name": {
            "name": "get_topic_name",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.send_soon": {
            "name": "send_soon",
            "location": 102,
            "return": [
                "FutureMessage"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.as_future_message": {
            "name": "as_future_message",
            "location": 118,
            "return": [
                "FutureMessage"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "partition": [
                    "int"
                ],
                "timestamp": [
                    "float"
                ],
                "headers": [
                    "HeadersArg"
                ],
                "schema": [
                    "_SchemaT"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "callback": [
                    "MessageSentCallback"
                ],
                "eager_partitioning": [
                    "bool"
                ]
            }
        },
        "ChannelT.prepare_key": {
            "name": "prepare_key",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "schema": [
                    "_SchemaT"
                ]
            }
        },
        "ChannelT.prepare_value": {
            "name": "prepare_value",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "V"
                ],
                "value_serializer": [
                    "CodecArg"
                ],
                "schema": [
                    "_SchemaT"
                ]
            }
        },
        "ChannelT.empty": {
            "name": "empty",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.on_stop_iteration": {
            "name": "on_stop_iteration",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.__aiter__": {
            "name": "__aiter__",
            "location": 200,
            "return": [
                "'ChannelT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.__anext__": {
            "name": "__anext__",
            "location": 204,
            "return": [
                "Awaitable[_EventT[_T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT._throw": {
            "name": "_throw",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "ChannelT.derive": {
            "name": "derive",
            "location": 216,
            "return": [
                "'ChannelT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.subscriber_count": {
            "name": "subscriber_count",
            "location": 221,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelT.queue": {
            "name": "queue",
            "location": 226,
            "return": [
                "ThrowableQueue"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/codecs.py": {
        "CodecT.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Tuple[('CodecT', ...)]"
                ]
            }
        },
        "CodecT.dumps": {
            "name": "dumps",
            "location": 20,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ]
            }
        },
        "CodecT.loads": {
            "name": "loads",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "CodecT.clone": {
            "name": "clone",
            "location": 28,
            "return": [
                "'CodecT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodecT.__or__": {
            "name": "__or__",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        }
    },
    "faust-master/faust/types/core.py": {
        "prepare_headers": {
            "name": "prepare_headers",
            "location": 54,
            "return": [
                "OpenHeadersArg"
            ],
            "arguments": {
                "target": [
                    "HeadersArg"
                ],
                "tuple_types": [
                    "_TYPTUP"
                ],
                "mutable_map_types": [
                    "_TYPTUP"
                ],
                "mutable_seq_types": [
                    "_TYPTUP"
                ]
            }
        },
        "merge_headers": {
            "name": "merge_headers",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "OpenHeadersArg"
                ],
                "source": [
                    "Mapping[(str, Any)]"
                ]
            }
        }
    },
    "faust-master/faust/types/enums.py": {},
    "faust-master/faust/types/events.py": {
        "EventT.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ],
                "headers": [
                    "Optional[HeadersArg]"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "EventT.ack": {
            "name": "ack",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/fixups.py": {
        "FixupT.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "FixupT.enabled": {
            "name": "enabled",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixupT.autodiscover_modules": {
            "name": "autodiscover_modules",
            "location": 26,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixupT.on_worker_init": {
            "name": "on_worker_init",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/joins.py": {
        "JoinT.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/models.py": {
        "ModelOptions.clone_defaults": {
            "name": "clone_defaults",
            "location": 118,
            "return": [
                "'ModelOptions'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.from_data": {
            "name": "from_data",
            "location": 143,
            "return": [
                "'ModelT'"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "Any"
                ]
            }
        },
        "ModelT.loads": {
            "name": "loads",
            "location": 149,
            "return": [
                "'ModelT'"
            ],
            "arguments": {
                "cls": [],
                "s": [
                    "bytes"
                ]
            }
        },
        "ModelT.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.dumps": {
            "name": "dumps",
            "location": 159,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.derive": {
            "name": "derive",
            "location": 163,
            "return": [
                "'ModelT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.to_representation": {
            "name": "to_representation",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.is_valid": {
            "name": "is_valid",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.validate": {
            "name": "validate",
            "location": 175,
            "return": [
                "List[ValidationError]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.validate_or_raise": {
            "name": "validate_or_raise",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelT.validation_errors": {
            "name": "validation_errors",
            "location": 184,
            "return": [
                "List[ValidationError]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptorT.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptorT.on_model_attached": {
            "name": "on_model_attached",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptorT.clone": {
            "name": "clone",
            "location": 223,
            "return": [
                "'FieldDescriptorT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptorT.as_dict": {
            "name": "as_dict",
            "location": 227,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptorT.validate_all": {
            "name": "validate_all",
            "location": 231,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldDescriptorT.validate": {
            "name": "validate",
            "location": 235,
            "return": [
                "Iterable[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T@@"
                ]
            }
        },
        "FieldDescriptorT.to_python": {
            "name": "to_python",
            "location": 239,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldDescriptorT.prepare_value": {
            "name": "prepare_value",
            "location": 243,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldDescriptorT.should_coerce": {
            "name": "should_coerce",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "FieldDescriptorT.getattr": {
            "name": "getattr",
            "location": 251,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "ModelT"
                ]
            }
        },
        "FieldDescriptorT.validation_error": {
            "name": "validation_error",
            "location": 255,
            "return": [
                "ValidationError"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "FieldDescriptorT.ident": {
            "name": "ident",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptorT.related_models": {
            "name": "related_models",
            "location": 265,
            "return": [
                "Set[Type[ModelT]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldDescriptorT.lazy_coercion": {
            "name": "lazy_coercion",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InitSubclassCheck.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/router.py": {
        "RouterT.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "RouterT.key_store": {
            "name": "key_store",
            "location": 27,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "RouterT.table_metadata": {
            "name": "table_metadata",
            "location": 31,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "RouterT.tables_metadata": {
            "name": "tables_metadata",
            "location": 35,
            "return": [
                "HostToPartitionMap"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/sensors.py": {
        "SensorInterfaceT.on_message_in": {
            "name": "on_message_in",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "SensorInterfaceT.on_stream_event_in": {
            "name": "on_stream_event_in",
            "location": 30,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "SensorInterfaceT.on_stream_event_out": {
            "name": "on_stream_event_out",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "stream": [
                    "StreamT"
                ],
                "event": [
                    "EventT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorInterfaceT.on_topic_buffer_full": {
            "name": "on_topic_buffer_full",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "SensorInterfaceT.on_message_out": {
            "name": "on_message_out",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "message": [
                    "Message"
                ]
            }
        },
        "SensorInterfaceT.on_table_get": {
            "name": "on_table_get",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "SensorInterfaceT.on_table_set": {
            "name": "on_table_set",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SensorInterfaceT.on_table_del": {
            "name": "on_table_del",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "SensorInterfaceT.on_commit_initiated": {
            "name": "on_commit_initiated",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ]
            }
        },
        "SensorInterfaceT.on_commit_completed": {
            "name": "on_commit_completed",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "SensorInterfaceT.on_send_initiated": {
            "name": "on_send_initiated",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "topic": [
                    "str"
                ],
                "message": [
                    "PendingMessage"
                ],
                "keysize": [
                    "int"
                ],
                "valsize": [
                    "int"
                ]
            }
        },
        "SensorInterfaceT.on_send_completed": {
            "name": "on_send_completed",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "state": [
                    "Any"
                ],
                "metadata": [
                    "RecordMetadata"
                ]
            }
        },
        "SensorInterfaceT.on_send_error": {
            "name": "on_send_error",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "ProducerT"
                ],
                "exc": [
                    "BaseException"
                ],
                "state": [
                    "Any"
                ]
            }
        },
        "SensorInterfaceT.on_assignment_start": {
            "name": "on_assignment_start",
            "location": 91,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ]
            }
        },
        "SensorInterfaceT.on_assignment_error": {
            "name": "on_assignment_error",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ],
                "exc": [
                    "BaseException"
                ]
            }
        },
        "SensorInterfaceT.on_assignment_completed": {
            "name": "on_assignment_completed",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignor": [
                    "PartitionAssignorT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorInterfaceT.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 108,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "SensorInterfaceT.on_rebalance_return": {
            "name": "on_rebalance_return",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorInterfaceT.on_rebalance_end": {
            "name": "on_rebalance_end",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorInterfaceT.on_web_request_start": {
            "name": "on_web_request_start",
            "location": 120,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "request": [
                    "web.Request"
                ]
            }
        },
        "SensorInterfaceT.on_web_request_end": {
            "name": "on_web_request_end",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "request": [
                    "web.Request"
                ],
                "response": [
                    "Optional[web.Response]"
                ],
                "state": [
                    "Dict"
                ]
            }
        },
        "SensorDelegateT.add": {
            "name": "add",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [
                    "SensorT"
                ]
            }
        },
        "SensorDelegateT.remove": {
            "name": "remove",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [
                    "SensorT"
                ]
            }
        }
    },
    "faust-master/faust/types/serializers.py": {
        "RegistryT.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ]
            }
        },
        "RegistryT.loads_key": {
            "name": "loads_key",
            "location": 35,
            "return": [
                "K"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[_ModelArg]"
                ],
                "key": [
                    "Optional[bytes]"
                ]
            }
        },
        "RegistryT.loads_value": {
            "name": "loads_value",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[_ModelArg]"
                ],
                "value": [
                    "Optional[bytes]"
                ]
            }
        },
        "RegistryT.dumps_key": {
            "name": "dumps_key",
            "location": 51,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[_ModelArg]"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "RegistryT.dumps_value": {
            "name": "dumps_value",
            "location": 59,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[_ModelArg]"
                ],
                "value": [
                    "V"
                ]
            }
        },
        "SchemaT.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaT.update": {
            "name": "update",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaT.loads_key": {
            "name": "loads_key",
            "location": 95,
            "return": [
                "KT@@"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "message": [
                    "_Message"
                ]
            }
        },
        "SchemaT.loads_value": {
            "name": "loads_value",
            "location": 101,
            "return": [
                "VT@@"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "message": [
                    "_Message"
                ]
            }
        },
        "SchemaT.dumps_key": {
            "name": "dumps_key",
            "location": 107,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "SchemaT.dumps_value": {
            "name": "dumps_value",
            "location": 113,
            "return": [
                "Tuple[(Any, OpenHeadersArg)]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "value": [
                    "V"
                ]
            }
        },
        "SchemaT.on_dumps_key_prepare_headers": {
            "name": "on_dumps_key_prepare_headers",
            "location": 119,
            "return": [
                "OpenHeadersArg"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "V"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        },
        "SchemaT.on_dumps_value_prepare_headers": {
            "name": "on_dumps_value_prepare_headers",
            "location": 124,
            "return": [
                "OpenHeadersArg"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "V"
                ],
                "headers": [
                    "OpenHeadersArg"
                ]
            }
        }
    },
    "faust-master/faust/types/stores.py": {
        "StoreT.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, URL)]"
                ],
                "app": [
                    "_AppT"
                ],
                "table": [
                    "_CollectionT"
                ]
            }
        },
        "StoreT.persisted_offset": {
            "name": "persisted_offset",
            "location": 65,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "StoreT.set_persisted_offset": {
            "name": "set_persisted_offset",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "StoreT.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[EventT]"
                ],
                "to_key": [
                    "Callable[([Any], KT)]"
                ],
                "to_value": [
                    "Callable[([Any], VT)]"
                ]
            }
        },
        "StoreT.reset_state": {
            "name": "reset_state",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/streams.py": {
        "JoinableT.combine": {
            "name": "combine",
            "location": 64,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinableT.join": {
            "name": "join",
            "location": 68,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinableT.left_join": {
            "name": "left_join",
            "location": 72,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinableT.inner_join": {
            "name": "inner_join",
            "location": 76,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinableT.outer_join": {
            "name": "outer_join",
            "location": 80,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinableT.__and__": {
            "name": "__and__",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "JoinableT.contribute_to_stream": {
            "name": "contribute_to_stream",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "'StreamT'"
                ]
            }
        },
        "JoinableT._human_channel": {
            "name": "_human_channel",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "AsyncIterator[T_co]"
                ]
            }
        },
        "StreamT.get_active_stream": {
            "name": "get_active_stream",
            "location": 146,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.add_processor": {
            "name": "add_processor",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processor": [
                    "Processor[T]"
                ]
            }
        },
        "StreamT.info": {
            "name": "info",
            "location": 154,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.clone": {
            "name": "clone",
            "location": 158,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.enumerate": {
            "name": "enumerate",
            "location": 178,
            "return": [
                "AsyncIterable[Tuple[(int, T_co)]]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ]
            }
        },
        "StreamT.through": {
            "name": "through",
            "location": 182,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(str, ChannelT)]"
                ]
            }
        },
        "StreamT.echo": {
            "name": "echo",
            "location": 186,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.group_by": {
            "name": "group_by",
            "location": 190,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "GroupByKeyArg"
                ]
            }
        },
        "StreamT.derive_topic": {
            "name": "derive_topic",
            "location": 198,
            "return": [
                "TopicT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "StreamT.__copy__": {
            "name": "__copy__",
            "location": 213,
            "return": [
                "'StreamT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.__iter__": {
            "name": "__iter__",
            "location": 217,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.__next__": {
            "name": "__next__",
            "location": 221,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamT.__aiter__": {
            "name": "__aiter__",
            "location": 225,
            "return": [
                "AsyncIterator[T_co]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/tables.py": {
        "CollectionT.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "CollectionT.clone": {
            "name": "clone",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionT.changelog_topic": {
            "name": "changelog_topic",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "TopicT"
                ]
            }
        },
        "CollectionT._changelog_topic_name": {
            "name": "_changelog_topic_name",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionT.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[EventT]"
                ]
            }
        },
        "CollectionT.persisted_offset": {
            "name": "persisted_offset",
            "location": 142,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "CollectionT.reset_state": {
            "name": "reset_state",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionT.send_changelog": {
            "name": "send_changelog",
            "location": 154,
            "return": [
                "FutureMessage"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "Optional[int]"
                ],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "key_serializer": [
                    "CodecArg"
                ],
                "value_serializer": [
                    "CodecArg"
                ]
            }
        },
        "CollectionT.partition_for_key": {
            "name": "partition_for_key",
            "location": 163,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "CollectionT.on_recover": {
            "name": "on_recover",
            "location": 182,
            "return": [
                "RecoverCallback"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "RecoverCallback"
                ]
            }
        },
        "CollectionT.using_window": {
            "name": "using_window",
            "location": 196,
            "return": [
                "'WindowWrapperT'"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "WindowT"
                ]
            }
        },
        "CollectionT.hopping": {
            "name": "hopping",
            "location": 201,
            "return": [
                "'WindowWrapperT'"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Seconds"
                ],
                "step": [
                    "Seconds"
                ],
                "expires": [
                    "Seconds"
                ],
                "key_index": [
                    "bool"
                ]
            }
        },
        "CollectionT.tumbling": {
            "name": "tumbling",
            "location": 207,
            "return": [
                "'WindowWrapperT'"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Seconds"
                ],
                "expires": [
                    "Seconds"
                ],
                "key_index": [
                    "bool"
                ]
            }
        },
        "CollectionT.as_ansitable": {
            "name": "as_ansitable",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionT._relative_now": {
            "name": "_relative_now",
            "location": 217,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "CollectionT._relative_event": {
            "name": "_relative_event",
            "location": 221,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "CollectionT._relative_field": {
            "name": "_relative_field",
            "location": 225,
            "return": [
                "RelativeHandler"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "_FieldDescriptorT"
                ]
            }
        },
        "CollectionT._relative_timestamp": {
            "name": "_relative_timestamp",
            "location": 229,
            "return": [
                "RelativeHandler"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "CollectionT._windowed_contains": {
            "name": "_windowed_contains",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "TableManagerT.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "TableManagerT.add": {
            "name": "add",
            "location": 256,
            "return": [
                "CollectionT"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "CollectionT"
                ]
            }
        },
        "TableManagerT.persist_offset_on_commit": {
            "name": "persist_offset_on_commit",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "StoreT"
                ],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "TableManagerT.on_commit": {
            "name": "on_commit",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offsets": [
                    "MutableMapping[(TP, int)]"
                ]
            }
        },
        "TableManagerT.on_partitions_revoked": {
            "name": "on_partitions_revoked",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revoked": [
                    "Set[TP]"
                ]
            }
        },
        "TableManagerT.on_rebalance_start": {
            "name": "on_rebalance_start",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableManagerT.changelog_topics": {
            "name": "changelog_topics",
            "location": 295,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSetT.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ],
                "table": [
                    "TableT"
                ],
                "wrapper": [
                    "'WindowWrapperT'"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSetT.apply": {
            "name": "apply",
            "location": 313,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Callable[([VT, VT], VT)]"
                ],
                "value": [
                    "VT@@"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSetT.value": {
            "name": "value",
            "location": 320,
            "return": [
                "VT@@"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSetT.current": {
            "name": "current",
            "location": 324,
            "return": [
                "VT@@"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSetT.now": {
            "name": "now",
            "location": 328,
            "return": [
                "VT@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowSetT.delta": {
            "name": "delta",
            "location": 332,
            "return": [
                "VT@@"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowSetT.__iadd__": {
            "name": "__iadd__",
            "location": 336,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__isub__": {
            "name": "__isub__",
            "location": 340,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__imul__": {
            "name": "__imul__",
            "location": 344,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__itruediv__": {
            "name": "__itruediv__",
            "location": 348,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 352,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__imod__": {
            "name": "__imod__",
            "location": 356,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__ipow__": {
            "name": "__ipow__",
            "location": 360,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__ilshift__": {
            "name": "__ilshift__",
            "location": 364,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__irshift__": {
            "name": "__irshift__",
            "location": 368,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__iand__": {
            "name": "__iand__",
            "location": 372,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__ixor__": {
            "name": "__ixor__",
            "location": 376,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowSetT.__ior__": {
            "name": "__ior__",
            "location": 380,
            "return": [
                "'WindowSetT'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "VT@@"
                ]
            }
        },
        "WindowedItemsViewT.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "'WindowWrapperT'"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedItemsViewT.__iter__": {
            "name": "__iter__",
            "location": 393,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedItemsViewT.now": {
            "name": "now",
            "location": 397,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedItemsViewT.current": {
            "name": "current",
            "location": 401,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedItemsViewT.delta": {
            "name": "delta",
            "location": 405,
            "return": [
                "Iterator[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedValuesViewT.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "'WindowWrapperT'"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedValuesViewT.__iter__": {
            "name": "__iter__",
            "location": 420,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedValuesViewT.now": {
            "name": "now",
            "location": 424,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowedValuesViewT.current": {
            "name": "current",
            "location": 428,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowedValuesViewT.delta": {
            "name": "delta",
            "location": 432,
            "return": [
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Seconds"
                ],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapperT.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "TableT"
                ]
            }
        },
        "WindowWrapperT.name": {
            "name": "name",
            "location": 448,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapperT.clone": {
            "name": "clone",
            "location": 452,
            "return": [
                "'WindowWrapperT'"
            ],
            "arguments": {
                "self": [],
                "relative_to": [
                    "RelativeArg"
                ]
            }
        },
        "WindowWrapperT.relative_to_now": {
            "name": "relative_to_now",
            "location": 456,
            "return": [
                "'WindowWrapperT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapperT.relative_to_field": {
            "name": "relative_to_field",
            "location": 460,
            "return": [
                "'WindowWrapperT'"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "_FieldDescriptorT"
                ]
            }
        },
        "WindowWrapperT.relative_to_stream": {
            "name": "relative_to_stream",
            "location": 464,
            "return": [
                "'WindowWrapperT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapperT.get_timestamp": {
            "name": "get_timestamp",
            "location": 468,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "EventT"
                ]
            }
        },
        "WindowWrapperT.__getitem__": {
            "name": "__getitem__",
            "location": 472,
            "return": [
                "WindowSetT"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "WindowWrapperT.keys": {
            "name": "keys",
            "location": 476,
            "return": [
                "KeysView"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapperT.on_set_key": {
            "name": "on_set_key",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "WindowWrapperT.on_del_key": {
            "name": "on_del_key",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Any"
                ]
            }
        },
        "WindowWrapperT.as_ansitable": {
            "name": "as_ansitable",
            "location": 488,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapperT.get_relative_timestamp": {
            "name": "get_relative_timestamp",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_to": [
                    "RelativeArg"
                ]
            }
        }
    },
    "faust-master/faust/types/topics.py": {
        "TopicT.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "TopicT.pattern": {
            "name": "pattern",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Union[(str, Pattern)]"
                ]
            }
        },
        "TopicT.partitions": {
            "name": "partitions",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partitions": [
                    "int"
                ]
            }
        },
        "TopicT.derive": {
            "name": "derive",
            "location": 106,
            "return": [
                "ChannelT"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicT.derive_topic": {
            "name": "derive_topic",
            "location": 110,
            "return": [
                "'TopicT'"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/transports.py": {
        "ProducerBufferT.put": {
            "name": "put",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "FutureMessage"
                ]
            }
        },
        "ProducerBufferT.size": {
            "name": "size",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProducerT.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "'TransportT'"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "ProducerT.send_soon": {
            "name": "send_soon",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "FutureMessage"
                ]
            }
        },
        "ProducerT.key_partition": {
            "name": "key_partition",
            "location": 165,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "ProducerT.supports_headers": {
            "name": "supports_headers",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionManagerT.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "'TransportT'"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "SchedulingStrategyT.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulingStrategyT.iterate": {
            "name": "iterate",
            "location": 265,
            "return": [
                "Iterator[Tuple[(TP, Any)]]"
            ],
            "arguments": {
                "self": [],
                "records": [
                    "Mapping[(TP, List)]"
                ]
            }
        },
        "ConsumerT.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "'TransportT'"
                ],
                "callback": [
                    "ConsumerCallback"
                ],
                "on_partitions_revoked": [
                    "PartitionsRevokedCallback"
                ],
                "on_partitions_assigned": [
                    "PartitionsAssignedCallback"
                ]
            }
        },
        "ConsumerT.track_message": {
            "name": "track_message",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        },
        "ConsumerT.ack": {
            "name": "ack",
            "location": 335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        },
        "ConsumerT.assignment": {
            "name": "assignment",
            "location": 343,
            "return": [
                "Set[TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerT.highwater": {
            "name": "highwater",
            "location": 347,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "ConsumerT.stop_flow": {
            "name": "stop_flow",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerT.resume_flow": {
            "name": "resume_flow",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerT.pause_partitions": {
            "name": "pause_partitions",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Iterable[TP]"
                ]
            }
        },
        "ConsumerT.resume_partitions": {
            "name": "resume_partitions",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Iterable[TP]"
                ]
            }
        },
        "ConsumerT.topic_partitions": {
            "name": "topic_partitions",
            "location": 397,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "ConsumerT.key_partition": {
            "name": "key_partition",
            "location": 401,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "key": [
                    "Optional[bytes]"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "ConsumerT.close": {
            "name": "close",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerT.verify_recovery_event_path": {
            "name": "verify_recovery_event_path",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "ConsumerT.unacked": {
            "name": "unacked",
            "location": 417,
            "return": [
                "Set[Message]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerT.on_buffer_full": {
            "name": "on_buffer_full",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "ConsumerT.on_buffer_drop": {
            "name": "on_buffer_drop",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        },
        "ConductorT.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "ConductorT.acks_enabled_for": {
            "name": "acks_enabled_for",
            "location": 445,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "ConductorT.acking_topics": {
            "name": "acking_topics",
            "location": 466,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportT.__init__": {
            "name": "__init__",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "List[URL]"
                ],
                "app": [
                    "_AppT"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "TransportT.create_consumer": {
            "name": "create_consumer",
            "location": 507,
            "return": [
                "ConsumerT"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "ConsumerCallback"
                ]
            }
        },
        "TransportT.create_producer": {
            "name": "create_producer",
            "location": 512,
            "return": [
                "ProducerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportT.create_transaction_manager": {
            "name": "create_transaction_manager",
            "location": 516,
            "return": [
                "TransactionManagerT"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "ConsumerT"
                ],
                "producer": [
                    "ProducerT"
                ]
            }
        },
        "TransportT.create_conductor": {
            "name": "create_conductor",
            "location": 523,
            "return": [
                "ConductorT"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/tuples.py": {
        "_PendingMessage_to_Message": {
            "name": "_PendingMessage_to_Message",
            "location": 69,
            "return": [
                "'Message'"
            ],
            "arguments": {
                "p": [
                    "PendingMessage"
                ]
            }
        },
        "_get_len": {
            "name": "_get_len",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "Optional[bytes]"
                ]
            }
        },
        "tp_set_to_map": {
            "name": "tp_set_to_map",
            "location": 228,
            "return": [
                "MutableMapping[(str, Set[TP])]"
            ],
            "arguments": {
                "tps": [
                    "Set[TP]"
                ]
            }
        },
        "FutureMessage.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "PendingMessage"
                ]
            }
        },
        "FutureMessage.set_result": {
            "name": "set_result",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "RecordMetadata"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "partition": [
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "timestamp": [
                    "float"
                ],
                "timestamp_type": [
                    "int"
                ],
                "headers": [
                    "Optional[HeadersArg]"
                ],
                "key": [
                    "Optional[bytes]"
                ],
                "value": [
                    "Optional[bytes]"
                ],
                "checksum": [
                    "Optional[bytes]"
                ],
                "serialized_key_size": [
                    "int"
                ],
                "serialized_value_size": [
                    "int"
                ],
                "tp": [
                    "TP"
                ],
                "time_in": [
                    "float"
                ],
                "time_out": [
                    "float"
                ],
                "time_total": [
                    "float"
                ]
            }
        },
        "Message.ack": {
            "name": "ack",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "_ConsumerT"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Message.on_final_ack": {
            "name": "on_final_ack",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "_ConsumerT"
                ]
            }
        },
        "Message.incref": {
            "name": "incref",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Message.decref": {
            "name": "decref",
            "location": 194,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Message.from_message": {
            "name": "from_message",
            "location": 199,
            "return": [
                "'Message'"
            ],
            "arguments": {
                "cls": [],
                "message": [
                    "Any"
                ],
                "tp": [
                    "TP"
                ]
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumerMessage.on_final_ack": {
            "name": "on_final_ack",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "_ConsumerT"
                ]
            }
        }
    },
    "faust-master/faust/types/web.py": {
        "CacheBackendT.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ],
                "url": [
                    "Union[(URL, str)]"
                ]
            }
        },
        "CacheT.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Seconds"
                ],
                "key_prefix": [
                    "str"
                ],
                "backend": [
                    "Union[(Type[CacheBackendT], str)]"
                ]
            }
        },
        "CacheT.view": {
            "name": "view",
            "location": 127,
            "return": [
                "Callable[([Callable], Callable)]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Seconds"
                ],
                "include_headers": [
                    "bool"
                ],
                "key_prefix": [
                    "str"
                ]
            }
        },
        "BlueprintT.cache": {
            "name": "cache",
            "location": 140,
            "return": [
                "CacheT"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Seconds"
                ],
                "include_headers": [
                    "bool"
                ],
                "key_prefix": [
                    "str"
                ],
                "backend": [
                    "Union[(Type[CacheBackendT], str)]"
                ]
            }
        },
        "BlueprintT.route": {
            "name": "route",
            "location": 148,
            "return": [
                "RouteDecoratorRet"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ]
            }
        },
        "BlueprintT.static": {
            "name": "static",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "file_or_directory": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "BlueprintT.register": {
            "name": "register",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "_AppT"
                ]
            }
        },
        "BlueprintT.init_webserver": {
            "name": "init_webserver",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "Web"
                ]
            }
        },
        "BlueprintT.on_webserver_init": {
            "name": "on_webserver_init",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "Web"
                ]
            }
        }
    },
    "faust-master/faust/types/windows.py": {
        "WindowRange_from_start": {
            "name": "WindowRange_from_start",
            "location": 14,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "start": [
                    "float"
                ],
                "size": [
                    "float"
                ]
            }
        },
        "WindowT.ranges": {
            "name": "ranges",
            "location": 27,
            "return": [
                "List[WindowRange]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "WindowT.stale": {
            "name": "stale",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ],
                "latest_timestamp": [
                    "float"
                ]
            }
        },
        "WindowT.current": {
            "name": "current",
            "location": 35,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "WindowT.earliest": {
            "name": "earliest",
            "location": 39,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ]
            }
        },
        "WindowT.delta": {
            "name": "delta",
            "location": 43,
            "return": [
                "WindowRange"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ],
                "d": [
                    "Seconds"
                ]
            }
        }
    },
    "faust-master/faust/types/_env.py": {
        "_getenv": {
            "name": "_getenv",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/types/__init__.py": {},
    "faust-master/faust/types/settings/base.py": {
        "SettingsRegistry.setting_names": {
            "name": "setting_names",
            "location": 59,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SettingsRegistry._init_subclass_settings": {
            "name": "_init_subclass_settings",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SettingsRegistry._warn_already_configured": {
            "name": "_warn_already_configured",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SettingsRegistry._warn_already_configured_key": {
            "name": "_warn_already_configured_key",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ],
                "old_value": [
                    "Any"
                ]
            }
        },
        "SettingsRegistry.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsRegistry.on_init": {
            "name": "on_init",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "SettingsRegistry.getenv": {
            "name": "getenv",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "env_name": [
                    "str"
                ]
            }
        },
        "SettingsRegistry._init_entrypoint": {
            "name": "_init_entrypoint",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsRegistry._on_before_init": {
            "name": "_on_before_init",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsRegistry._init_settings": {
            "name": "_init_settings",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": [
                    "Dict"
                ]
            }
        },
        "SettingsRegistry._on_after_init": {
            "name": "_on_after_init",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsRegistry.__post_init__": {
            "name": "__post_init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsRegistry.__getattribute__": {
            "name": "__getattribute__",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "SettingsRegistry.__setattr__": {
            "name": "__setattr__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "SettingsRegistry._init_subclass_settings._new_init": {
            "name": "_new_init",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "_Settings"
                ]
            }
        }
    },
    "faust-master/faust/types/settings/params.py": {
        "to_bool": {
            "name": "to_bool",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "term": [
                    "Union[(str, bool)]"
                ]
            }
        },
        "Enum": {
            "name": "Enum",
            "location": 697,
            "return": [
                "Type[Param[(Union[(str, T)], T)]]"
            ],
            "arguments": {
                "typ": [
                    "T@@"
                ]
            }
        },
        "Symbol": {
            "name": "Symbol",
            "location": 716,
            "return": [
                "Type[Param[(SymbolArg[T], T)]]"
            ],
            "arguments": {
                "typ": [
                    "T@@"
                ]
            }
        },
        "Param.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param._init_options": {
            "name": "_init_options",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.on_get_value": {
            "name": "on_get_value",
            "location": 351,
            "return": [
                "OutputCallable"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "OutputCallable"
                ]
            }
        },
        "Param.on_set_default": {
            "name": "on_set_default",
            "location": 357,
            "return": [
                "OnDefaultCallable"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "OnDefaultCallable"
                ]
            }
        },
        "Param.__get__": {
            "name": "__get__",
            "location": 363,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "type": [
                    "Type"
                ]
            }
        },
        "Param.__set__": {
            "name": "__set__",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Param.on_get": {
            "name": "on_get",
            "location": 375,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ]
            }
        },
        "Param.prepare_get": {
            "name": "prepare_get",
            "location": 386,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "OT@@"
                ]
            }
        },
        "Param.on_set": {
            "name": "on_set",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Any"
                ],
                "value": [
                    "OT@@"
                ]
            }
        },
        "Param.set_class_default": {
            "name": "set_class_default",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type"
                ]
            }
        },
        "Param.on_init_set_value": {
            "name": "on_init_set_value",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "provided_value": [
                    "Optional[IT]"
                ]
            }
        },
        "Param.on_init_set_default": {
            "name": "on_init_set_default",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "provided_value": [
                    "Optional[IT]"
                ]
            }
        },
        "Param.build_deprecation_warning": {
            "name": "build_deprecation_warning",
            "location": 431,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.validate_before": {
            "name": "validate_before",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Param.validate_after": {
            "name": "validate_after",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "OT@@"
                ]
            }
        },
        "Param.prepare_set": {
            "name": "prepare_set",
            "location": 449,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Param.prepare_init_default": {
            "name": "prepare_init_default",
            "location": 462,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Param.to_python": {
            "name": "to_python",
            "location": 468,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Param.active": {
            "name": "active",
            "location": 473,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.deprecated": {
            "name": "deprecated",
            "location": 477,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.class_name": {
            "name": "class_name",
            "location": 481,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.to_python": {
            "name": "to_python",
            "location": 489,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Number._init_options": {
            "name": "_init_options",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_value": [
                    "int"
                ],
                "max_value": [
                    "int"
                ],
                "number_aliases": [
                    "Mapping[(IT, OT)]"
                ]
            }
        },
        "Number.convert": {
            "name": "convert",
            "location": 524,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Number.to_python": {
            "name": "to_python",
            "location": 527,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Number.validate_after": {
            "name": "validate_after",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "OT@@"
                ]
            }
        },
        "Number._out_of_range": {
            "name": "_out_of_range",
            "location": 546,
            "return": [
                "ImproperlyConfigured"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "_Int.convert": {
            "name": "convert",
            "location": 558,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Seconds.to_python": {
            "name": "to_python",
            "location": 599,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "_Seconds"
                ]
            }
        },
        "Credentials.to_python": {
            "name": "to_python",
            "location": 607,
            "return": [
                "Optional[CredentialsT]"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "CredentialsArg"
                ]
            }
        },
        "Dict.to_python": {
            "name": "to_python",
            "location": 622,
            "return": [
                "Mapping[(str, T)]"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "DictArg[T]"
                ]
            }
        },
        "LogHandlers.prepare_init_default": {
            "name": "prepare_init_default",
            "location": 636,
            "return": [
                "List[logging.Handler]"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "Timezone.to_python": {
            "name": "to_python",
            "location": 646,
            "return": [
                "tzinfo"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "Union[(str, tzinfo)]"
                ]
            }
        },
        "BrokerList.to_python": {
            "name": "to_python",
            "location": 662,
            "return": [
                "List[_URL]"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "BrokerArg"
                ]
            }
        },
        "BrokerList.broker_list": {
            "name": "broker_list",
            "location": 665,
            "return": [
                "List[_URL]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "BrokerArg"
                ]
            }
        },
        "URL.to_python": {
            "name": "to_python",
            "location": 673,
            "return": [
                "_URL"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "URLArg"
                ]
            }
        },
        "Path.to_python": {
            "name": "to_python",
            "location": 682,
            "return": [
                "_Path"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "Union[(str, _Path)]"
                ]
            }
        },
        "Path.prepare_path": {
            "name": "prepare_path",
            "location": 688,
            "return": [
                "_Path"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "path": [
                    "_Path"
                ]
            }
        },
        "_Symbol.to_python": {
            "name": "to_python",
            "location": 712,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "IT@@"
                ]
            }
        },
        "Enum.EnumParam.to_python": {
            "name": "to_python",
            "location": 703,
            "return": [
                "T@@"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "_Settings"
                ],
                "value": [
                    "Union[(str, T)]"
                ]
            }
        }
    },
    "faust-master/faust/types/settings/sections.py": {
        "Section.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "SectionType"
                ],
                "title": [
                    "str"
                ],
                "refid": [
                    "str"
                ]
            }
        },
        "Section.setting": {
            "name": "setting",
            "location": 63,
            "return": [
                "Callable[([Callable], OT)]"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Type[_Param[(IT, OT)]]"
                ]
            }
        },
        "Section.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.setting.inner": {
            "name": "inner",
            "location": 66,
            "return": [
                "OT@@"
            ],
            "arguments": {
                "fun": [
                    "Callable"
                ]
            }
        }
    },
    "faust-master/faust/types/settings/settings.py": {
        "Settings.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Settings.on_init": {
            "name": "on_init",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Settings._init_env_prefix": {
            "name": "_init_env_prefix",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Mapping[(str, str)]"
                ],
                "env_prefix": [
                    "str"
                ]
            }
        },
        "Settings.getenv": {
            "name": "getenv",
            "location": 217,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "env_name": [
                    "str"
                ]
            }
        },
        "Settings.relative_to_appdir": {
            "name": "relative_to_appdir",
            "location": 222,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Settings.data_directory_for_version": {
            "name": "data_directory_for_version",
            "location": 231,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int"
                ]
            }
        },
        "Settings.find_old_versiondirs": {
            "name": "find_old_versiondirs",
            "location": 235,
            "return": [
                "Iterable[Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.name": {
            "name": "name",
            "location": 242,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.id": {
            "name": "id",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Settings._prepare_id": {
            "name": "_prepare_id",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Settings.__repr__": {
            "name": "__repr__",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.appdir": {
            "name": "appdir",
            "location": 264,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.MY_SETTING": {
            "name": "MY_SETTING",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.autodiscover": {
            "name": "autodiscover",
            "location": 293,
            "return": [
                "AutodiscoverArg"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.datadir": {
            "name": "datadir",
            "location": 409,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Settings._prepare_datadir": {
            "name": "_prepare_datadir",
            "location": 424,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Settings.tabledir": {
            "name": "tabledir",
            "location": 435,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._prepare_tabledir": {
            "name": "_prepare_tabledir",
            "location": 448,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ]
            }
        },
        "Settings.debug": {
            "name": "debug",
            "location": 457,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.env_prefix": {
            "name": "env_prefix",
            "location": 480,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.id_format": {
            "name": "id_format",
            "location": 492,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.origin": {
            "name": "origin",
            "location": 503,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.timezone": {
            "name": "timezone",
            "location": 523,
            "return": [
                "tzinfo"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.version": {
            "name": "version",
            "location": 535,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.agent_supervisor": {
            "name": "agent_supervisor",
            "location": 557,
            "return": [
                "Type[SupervisorStrategyT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.blocking_timeout": {
            "name": "blocking_timeout",
            "location": 603,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker": {
            "name": "broker",
            "location": 642,
            "return": [
                "List[URL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._prepare_broker": {
            "name": "_prepare_broker",
            "location": 708,
            "return": [
                "BrokerArg"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_consumer": {
            "name": "broker_consumer",
            "location": 717,
            "return": [
                "List[URL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_producer": {
            "name": "broker_producer",
            "location": 732,
            "return": [
                "List[URL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_api_version": {
            "name": "broker_api_version",
            "location": 752,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_check_crcs": {
            "name": "broker_check_crcs",
            "location": 779,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_client_id": {
            "name": "broker_client_id",
            "location": 790,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_commit_every": {
            "name": "broker_commit_every",
            "location": 804,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_commit_interval": {
            "name": "broker_commit_interval",
            "location": 818,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_commit_livelock_soft_timeout": {
            "name": "broker_commit_livelock_soft_timeout",
            "location": 830,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_credentials": {
            "name": "broker_credentials",
            "location": 843,
            "return": [
                "CredentialsT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_heartbeat_interval": {
            "name": "broker_heartbeat_interval",
            "location": 934,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_max_poll_interval": {
            "name": "broker_max_poll_interval",
            "location": 949,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_max_poll_records": {
            "name": "broker_max_poll_records",
            "location": 971,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_rebalance_timeout": {
            "name": "broker_rebalance_timeout",
            "location": 987,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_request_timeout": {
            "name": "broker_request_timeout",
            "location": 1009,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.broker_session_timeout": {
            "name": "broker_session_timeout",
            "location": 1024,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.ssl_context": {
            "name": "ssl_context",
            "location": 1044,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.consumer_api_version": {
            "name": "consumer_api_version",
            "location": 1056,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.consumer_max_fetch_size": {
            "name": "consumer_max_fetch_size",
            "location": 1069,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.consumer_auto_offset_reset": {
            "name": "consumer_auto_offset_reset",
            "location": 1093,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.consumer_group_instance_id": {
            "name": "consumer_group_instance_id",
            "location": 1109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.key_serializer": {
            "name": "key_serializer",
            "location": 1123,
            "return": [
                "CodecArg"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.value_serializer": {
            "name": "value_serializer",
            "location": 1143,
            "return": [
                "CodecArg"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.logging_config": {
            "name": "logging_config",
            "location": 1162,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.loghandlers": {
            "name": "loghandlers",
            "location": 1172,
            "return": [
                "List[logging.Handler]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_acks": {
            "name": "producer_acks",
            "location": 1184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_api_version": {
            "name": "producer_api_version",
            "location": 1212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_compression_type": {
            "name": "producer_compression_type",
            "location": 1224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_linger": {
            "name": "producer_linger",
            "location": 1235,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._prepare_producer_linger": {
            "name": "_prepare_producer_linger",
            "location": 1244,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_max_batch_size": {
            "name": "producer_max_batch_size",
            "location": 1252,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_max_request_size": {
            "name": "producer_max_request_size",
            "location": 1263,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_partitioner": {
            "name": "producer_partitioner",
            "location": 1276,
            "return": [
                "Optional[PartitionerT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_request_timeout": {
            "name": "producer_request_timeout",
            "location": 1326,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.reply_create_topic": {
            "name": "reply_create_topic",
            "location": 1339,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.reply_expires": {
            "name": "reply_expires",
            "location": 1353,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.reply_to": {
            "name": "reply_to",
            "location": 1364,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._prepare_reply_to_default": {
            "name": "_prepare_reply_to_default",
            "location": 1373,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.reply_to_prefix": {
            "name": "reply_to_prefix",
            "location": 1381,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.processing_guarantee": {
            "name": "processing_guarantee",
            "location": 1393,
            "return": [
                "ProcessingGuarantee"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.stream_buffer_maxsize": {
            "name": "stream_buffer_maxsize",
            "location": 1415,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.stream_processing_timeout": {
            "name": "stream_processing_timeout",
            "location": 1447,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.stream_publish_on_commit": {
            "name": "stream_publish_on_commit",
            "location": 1493,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.stream_recovery_delay": {
            "name": "stream_recovery_delay",
            "location": 1512,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.stream_wait_empty": {
            "name": "stream_wait_empty",
            "location": 1526,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.store": {
            "name": "store",
            "location": 1547,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.table_cleanup_interval": {
            "name": "table_cleanup_interval",
            "location": 1564,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.table_key_index_size": {
            "name": "table_key_index_size",
            "location": 1576,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.table_standby_replicas": {
            "name": "table_standby_replicas",
            "location": 1590,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.topic_allow_declare": {
            "name": "topic_allow_declare",
            "location": 1602,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.topic_disable_leader": {
            "name": "topic_disable_leader",
            "location": 1621,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.topic_partitions": {
            "name": "topic_partitions",
            "location": 1635,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.topic_replication_factor": {
            "name": "topic_replication_factor",
            "location": 1652,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.cache": {
            "name": "cache",
            "location": 1669,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web": {
            "name": "web",
            "location": 1685,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web_bind": {
            "name": "web_bind",
            "location": 1695,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web_cors_options": {
            "name": "web_cors_options",
            "location": 1711,
            "return": [
                "Mapping[(str, ResourceOptions)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web_enabled": {
            "name": "web_enabled",
            "location": 1747,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web_host": {
            "name": "web_host",
            "location": 1762,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web_in_thread": {
            "name": "web_in_thread",
            "location": 1777,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web_port": {
            "name": "web_port",
            "location": 1797,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.web_transport": {
            "name": "web_transport",
            "location": 1812,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.canonical_url": {
            "name": "canonical_url",
            "location": 1836,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.worker_redirect_stdouts": {
            "name": "worker_redirect_stdouts",
            "location": 1851,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.worker_redirect_stdouts_level": {
            "name": "worker_redirect_stdouts_level",
            "location": 1865,
            "return": [
                "Severity"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Agent": {
            "name": "Agent",
            "location": 1875,
            "return": [
                "Type[AgentT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.ConsumerScheduler": {
            "name": "ConsumerScheduler",
            "location": 1899,
            "return": [
                "Type[SchedulingStrategyT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Event": {
            "name": "Event",
            "location": 1923,
            "return": [
                "Type[EventT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Schema": {
            "name": "Schema",
            "location": 1946,
            "return": [
                "Type[SchemaT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Stream": {
            "name": "Stream",
            "location": 1969,
            "return": [
                "Type[StreamT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Table": {
            "name": "Table",
            "location": 1992,
            "return": [
                "Type[TableT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.SetTable": {
            "name": "SetTable",
            "location": 2015,
            "return": [
                "Type[TableT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.GlobalTable": {
            "name": "GlobalTable",
            "location": 2038,
            "return": [
                "Type[GlobalTableT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.SetGlobalTable": {
            "name": "SetGlobalTable",
            "location": 2061,
            "return": [
                "Type[GlobalTableT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.TableManager": {
            "name": "TableManager",
            "location": 2084,
            "return": [
                "Type[TableManagerT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Serializers": {
            "name": "Serializers",
            "location": 2109,
            "return": [
                "Type[RegistryT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Worker": {
            "name": "Worker",
            "location": 2134,
            "return": [
                "Type[_WorkerT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.PartitionAssignor": {
            "name": "PartitionAssignor",
            "location": 2159,
            "return": [
                "Type[PartitionAssignorT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.LeaderAssignor": {
            "name": "LeaderAssignor",
            "location": 2184,
            "return": [
                "Type[LeaderAssignorT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Router": {
            "name": "Router",
            "location": 2209,
            "return": [
                "Type[RouterT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Topic": {
            "name": "Topic",
            "location": 2235,
            "return": [
                "Type[TopicT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.HttpClient": {
            "name": "HttpClient",
            "location": 2260,
            "return": [
                "Type[HttpClientT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.Monitor": {
            "name": "Monitor",
            "location": 2286,
            "return": [
                "Type[SensorT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.stream_ack_cancelled_tasks": {
            "name": "stream_ack_cancelled_tasks",
            "location": 2315,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.stream_ack_exceptions": {
            "name": "stream_ack_exceptions",
            "location": 2324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.producer_linger_ms": {
            "name": "producer_linger_ms",
            "location": 2334,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.url": {
            "name": "url",
            "location": 2347,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/types/settings/__init__.py": {},
    "faust-master/faust/utils/codegen.py": {
        "Function": {
            "name": "Function",
            "location": 25,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ],
                "body": [
                    "List[str]"
                ]
            }
        },
        "build_closure_source": {
            "name": "build_closure_source",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ],
                "body": [
                    "List[str]"
                ]
            }
        },
        "build_closure": {
            "name": "build_closure",
            "location": 83,
            "return": [
                "Callable"
            ],
            "arguments": {
                "outer_name": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "build_function": {
            "name": "build_function",
            "location": 96,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "build_function_source": {
            "name": "build_function_source",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ],
                "body": [
                    "List[str]"
                ]
            }
        },
        "Method": {
            "name": "Method",
            "location": 131,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ],
                "body": [
                    "List[str]"
                ]
            }
        },
        "InitMethod": {
            "name": "InitMethod",
            "location": 139,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ],
                "body": [
                    "List[str]"
                ]
            }
        },
        "HashMethod": {
            "name": "HashMethod",
            "location": 146,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "attrs": [
                    "List[str]"
                ]
            }
        },
        "EqMethod": {
            "name": "EqMethod",
            "location": 155,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ]
            }
        },
        "NeMethod": {
            "name": "NeMethod",
            "location": 160,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ]
            }
        },
        "GeMethod": {
            "name": "GeMethod",
            "location": 165,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ]
            }
        },
        "GtMethod": {
            "name": "GtMethod",
            "location": 170,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ]
            }
        },
        "LeMethod": {
            "name": "LeMethod",
            "location": 175,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ]
            }
        },
        "LtMethod": {
            "name": "LtMethod",
            "location": 180,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ]
            }
        },
        "CompareMethod": {
            "name": "CompareMethod",
            "location": 185,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "op": [
                    "str"
                ],
                "fields": [
                    "List[str]"
                ]
            }
        },
        "obj_attrs_tuple": {
            "name": "obj_attrs_tuple",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "obj_name": [
                    "str"
                ],
                "attrs": [
                    "List[str]"
                ]
            }
        },
        "reprkwargs": {
            "name": "reprkwargs",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "kwargs": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "reprcall": {
            "name": "reprcall",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "args": [
                    "Tuple"
                ],
                "kwargs": [
                    "Mapping[(str, Any)]"
                ]
            }
        }
    },
    "faust-master/faust/utils/cron.py": {
        "secs_for_next": {
            "name": "secs_for_next",
            "location": 7,
            "return": [
                "float"
            ],
            "arguments": {
                "cron_format": [
                    "str"
                ],
                "tz": [
                    "tzinfo"
                ]
            }
        }
    },
    "faust-master/faust/utils/functional.py": {
        "consecutive_numbers": {
            "name": "consecutive_numbers",
            "location": 25,
            "return": [
                "Iterator[Sequence[int]]"
            ],
            "arguments": {
                "it": [
                    "Iterable[int]"
                ]
            }
        },
        "deque_prune": {
            "name": "deque_prune",
            "location": 35,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "items": [
                    "Deque[T]"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "deque_pushpopmax": {
            "name": "deque_pushpopmax",
            "location": 44,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "items": [
                    "Deque[T]"
                ],
                "item": [
                    "T@@"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "table": [
                    "Mapping"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "translate.on_reduce": {
            "name": "on_reduce",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "acc": [
                    "str"
                ],
                "kv": [
                    "Tuple[(str, str)]"
                ]
            }
        }
    },
    "faust-master/faust/utils/iso8601.py": {},
    "faust-master/faust/utils/json.py": {
        "str_to_decimal": {
            "name": "str_to_decimal",
            "location": 91,
            "return": [
                "Optional[Decimal]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "maxlen": [
                    "int"
                ]
            }
        },
        "on_default": {
            "name": "on_default",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": [
                    "Any"
                ]
            }
        },
        "JSONEncoder.default": {
            "name": "default",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Any"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Any"
                ],
                "json_dumps": [
                    "Callable"
                ],
                "cls": [
                    "Type[JSONEncoder]"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "json_loads": [
                    "Callable"
                ]
            }
        }
    },
    "faust-master/faust/utils/platforms.py": {
        "max_open_files": {
            "name": "max_open_files",
            "location": 7,
            "return": [
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/utils/tracing.py": {
        "current_span": {
            "name": "current_span",
            "location": 28,
            "return": [
                "Optional[opentracing.Span]"
            ],
            "arguments": {}
        },
        "set_current_span": {
            "name": "set_current_span",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [
                    "opentracing.Span"
                ]
            }
        },
        "noop_span": {
            "name": "noop_span",
            "location": 38,
            "return": [
                "opentracing.Span"
            ],
            "arguments": {}
        },
        "finish_span": {
            "name": "finish_span",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [
                    "Optional[opentracing.Span]"
                ]
            }
        },
        "operation_name_from_fun": {
            "name": "operation_name_from_fun",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "fun": [
                    "Any"
                ]
            }
        },
        "traced_from_parent_span": {
            "name": "traced_from_parent_span",
            "location": 67,
            "return": [
                "Callable"
            ],
            "arguments": {
                "parent_span": [
                    "opentracing.Span"
                ],
                "callback": [
                    "Callable"
                ]
            }
        },
        "_restore_span": {
            "name": "_restore_span",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "span": [
                    "opentracing.Span"
                ],
                "expected_current_span": [
                    "opentracing.Span"
                ]
            }
        },
        "call_with_trace": {
            "name": "call_with_trace",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "span": [
                    "opentracing.Span"
                ],
                "fun": [
                    "Callable"
                ],
                "callback": [
                    "Optional[Tuple[(Callable, Tuple[(Any, ...)])]]"
                ]
            }
        },
        "traced_from_parent_span._wrapper": {
            "name": "_wrapper",
            "location": 71,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fun": [
                    "Callable"
                ]
            }
        },
        "traced_from_parent_span._wrapper._inner": {
            "name": "_inner",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/utils/urls.py": {
        "urllist": {
            "name": "urllist",
            "location": 8,
            "return": [
                "List[URL]"
            ],
            "arguments": {
                "arg": [
                    "URIListArg"
                ]
            }
        },
        "_find_first_actual_scheme": {
            "name": "_find_first_actual_scheme",
            "location": 45,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "urls": [
                    "List[str]"
                ],
                "default_scheme": [
                    "str"
                ]
            }
        },
        "_prepare_str_url": {
            "name": "_prepare_str_url",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "default_scheme": [
                    "str"
                ]
            }
        },
        "_ensure_scheme": {
            "name": "_ensure_scheme",
            "location": 64,
            "return": [
                "URL"
            ],
            "arguments": {
                "default_scheme": [
                    "Optional[str]"
                ],
                "url": [
                    "Union[URL]"
                ]
            }
        }
    },
    "faust-master/faust/utils/venusian.py": {
        "attach": {
            "name": "attach",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "fun": [
                    "Callable"
                ],
                "category": [
                    "str"
                ]
            }
        },
        "_on_found": {
            "name": "_on_found",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "scanner": [
                    "venusian.Scanner"
                ],
                "name": [
                    "str"
                ],
                "obj": [
                    "Any"
                ]
            }
        }
    },
    "faust-master/faust/utils/_iso8601_python.py": {
        "parse": {
            "name": "parse",
            "location": 55,
            "return": [
                "datetime"
            ],
            "arguments": {
                "datetime_string": [
                    "str"
                ]
            }
        },
        "parse_tz": {
            "name": "parse_tz",
            "location": 74,
            "return": [
                "tzinfo"
            ],
            "arguments": {
                "tz": [
                    "str"
                ]
            }
        },
        "_apply_tz_prefix": {
            "name": "_apply_tz_prefix",
            "location": 84,
            "return": [
                "tzinfo"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "hours": [
                    "int"
                ],
                "minutes": [
                    "int"
                ]
            }
        }
    },
    "faust-master/faust/utils/__init__.py": {
        "uuid": {
            "name": "uuid",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "faust-master/faust/utils/kafka/__init__.py": {},
    "faust-master/faust/utils/kafka/protocol/admin.py": {},
    "faust-master/faust/utils/kafka/protocol/api.py": {
        "Response.API_KEY": {
            "name": "API_KEY",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.API_VERSION": {
            "name": "API_VERSION",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.SCHEMA": {
            "name": "SCHEMA",
            "location": 26,
            "return": [
                "Schema"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.API_KEY": {
            "name": "API_KEY",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.API_VERSION": {
            "name": "API_VERSION",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.SCHEMA": {
            "name": "SCHEMA",
            "location": 48,
            "return": [
                "Schema"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.RESPONSE_TYPE": {
            "name": "RESPONSE_TYPE",
            "location": 54,
            "return": [
                "Type[Response]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.expect_response": {
            "name": "expect_response",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/utils/kafka/protocol/__init__.py": {},
    "faust-master/faust/utils/terminal/spinners.py": {
        "Spinner.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO"
                ]
            }
        },
        "Spinner.update": {
            "name": "update",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spinner.stop": {
            "name": "stop",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spinner.reset": {
            "name": "reset",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spinner.write": {
            "name": "write",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Spinner._print": {
            "name": "_print",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Spinner.begin": {
            "name": "begin",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spinner.finish": {
            "name": "finish",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spinner._finish": {
            "name": "_finish",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "file": [
                    "IO"
                ]
            }
        },
        "SpinnerHandler.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spinner": [
                    "Spinner"
                ]
            }
        },
        "SpinnerHandler.emit": {
            "name": "emit",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_record": [
                    "logging.LogRecord"
                ]
            }
        }
    },
    "faust-master/faust/utils/terminal/tables.py": {
        "table": {
            "name": "table",
            "location": 29,
            "return": [
                "Table"
            ],
            "arguments": {
                "data": [
                    "TableDataT"
                ]
            }
        },
        "logtable": {
            "name": "logtable",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "TableDataT"
                ]
            }
        },
        "_get_best_table_type": {
            "name": "_get_best_table_type",
            "location": 73,
            "return": [
                "Type[Table]"
            ],
            "arguments": {
                "tty": [
                    "bool"
                ]
            }
        },
        "dict_as_ansitable": {
            "name": "dict_as_ansitable",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "Mapping"
                ]
            }
        }
    },
    "faust-master/faust/utils/terminal/__init__.py": {},
    "faust-master/faust/web/base.py": {
        "Response.status": {
            "name": "status",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.body": {
            "name": "body",
            "location": 74,
            "return": [
                "_bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 80,
            "return": [
                "MutableMapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.content_length": {
            "name": "content_length",
            "location": 86,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.content_type": {
            "name": "content_type",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.charset": {
            "name": "charset",
            "location": 98,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.chunked": {
            "name": "chunked",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.compression": {
            "name": "compression",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.keep_alive": {
            "name": "keep_alive",
            "location": 116,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.body_length": {
            "name": "body_length",
            "location": 122,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlueprintManager.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "_BPList"
                ]
            }
        },
        "BlueprintManager.add": {
            "name": "add",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "blueprint": [
                    "_BPArg"
                ]
            }
        },
        "BlueprintManager.apply": {
            "name": "apply",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "'Web'"
                ]
            }
        },
        "BlueprintManager._apply_blueprint": {
            "name": "_apply_blueprint",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "'Web'"
                ],
                "prefix": [
                    "str"
                ],
                "bp": [
                    "BlueprintT"
                ]
            }
        },
        "Web.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Web.text": {
            "name": "text",
            "location": 196,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Web.html": {
            "name": "html",
            "location": 205,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Web.json": {
            "name": "json",
            "location": 214,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Web.bytes": {
            "name": "bytes",
            "location": 229,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_bytes"
                ]
            }
        },
        "Web.bytes_to_response": {
            "name": "bytes_to_response",
            "location": 240,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "_bytes"
                ]
            }
        },
        "Web._bytes_to_response": {
            "name": "_bytes_to_response",
            "location": 244,
            "return": [
                "Tuple[(HTTPStatus, Mapping, _bytes)]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "_bytes"
                ]
            }
        },
        "Web._splitheader": {
            "name": "_splitheader",
            "location": 255,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "_bytes"
                ]
            }
        },
        "Web.response_to_bytes": {
            "name": "response_to_bytes",
            "location": 260,
            "return": [
                "_bytes"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Response"
                ]
            }
        },
        "Web._response_to_bytes": {
            "name": "_response_to_bytes",
            "location": 264,
            "return": [
                "_bytes"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int"
                ],
                "headers": [
                    "Mapping"
                ],
                "body": [
                    "_bytes"
                ]
            }
        },
        "Web._headers_serialize": {
            "name": "_headers_serialize",
            "location": 274,
            "return": [
                "_bytes"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Mapping"
                ]
            }
        },
        "Web.route": {
            "name": "route",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "handler": [
                    "Callable"
                ],
                "cors_options": [
                    "Mapping[(str, ResourceOptions)]"
                ]
            }
        },
        "Web.add_static": {
            "name": "add_static",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "path": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "Web.add_view": {
            "name": "add_view",
            "location": 309,
            "return": [
                "View"
            ],
            "arguments": {
                "self": [],
                "view_cls": [
                    "Type[View]"
                ]
            }
        },
        "Web.url_for": {
            "name": "url_for",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "str"
                ]
            }
        },
        "Web._quote_for_url": {
            "name": "_quote_for_url",
            "location": 335,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Web.init_server": {
            "name": "init_server",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web.url": {
            "name": "url",
            "location": 344,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.can_read_body": {
            "name": "can_read_body",
            "location": 370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.match_info": {
            "name": "match_info",
            "location": 396,
            "return": [
                "Mapping[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.query": {
            "name": "query",
            "location": 402,
            "return": [
                "Mapping[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.cookies": {
            "name": "cookies",
            "location": 408,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/web/blueprints.py": {
        "Blueprint.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Blueprint.cache": {
            "name": "cache",
            "location": 111,
            "return": [
                "CacheT"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Seconds"
                ],
                "include_headers": [
                    "bool"
                ],
                "key_prefix": [
                    "str"
                ],
                "backend": [
                    "Union[(Type[CacheBackendT], str)]"
                ]
            }
        },
        "Blueprint.route": {
            "name": "route",
            "location": 121,
            "return": [
                "RouteDecoratorRet"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ]
            }
        },
        "Blueprint.static": {
            "name": "static",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "file_or_directory": [
                    "Union[(str, Path)]"
                ]
            }
        },
        "Blueprint.register": {
            "name": "register",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Blueprint._apply_route": {
            "name": "_apply_route",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "route": [
                    "FutureRoute"
                ],
                "url_prefix": [
                    "Optional[str]"
                ]
            }
        },
        "Blueprint._view_name": {
            "name": "_view_name",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Blueprint.init_webserver": {
            "name": "init_webserver",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "Web"
                ]
            }
        },
        "Blueprint.on_webserver_init": {
            "name": "on_webserver_init",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "Web"
                ]
            }
        },
        "Blueprint._url_with_prefix": {
            "name": "_url_with_prefix",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "Blueprint._apply_static_route": {
            "name": "_apply_static_route",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "Web"
                ],
                "route": [
                    "FutureStaticRoute"
                ],
                "url_prefix": [
                    "Optional[str]"
                ]
            }
        },
        "Blueprint.__repr__": {
            "name": "__repr__",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blueprint.route._inner": {
            "name": "_inner",
            "location": 128,
            "return": [
                "PageArg"
            ],
            "arguments": {
                "handler": [
                    "PageArg"
                ]
            }
        }
    },
    "faust-master/faust/web/exceptions.py": {
        "WebError.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detail": [
                    "str"
                ]
            }
        }
    },
    "faust-master/faust/web/views.py": {
        "takes_model": {
            "name": "takes_model",
            "location": 268,
            "return": [
                "ViewDecorator"
            ],
            "arguments": {
                "Model": [
                    "Type[ModelT]"
                ]
            }
        },
        "gives_model": {
            "name": "gives_model",
            "location": 282,
            "return": [
                "ViewDecorator"
            ],
            "arguments": {
                "Model": [
                    "Type[ModelT]"
                ]
            }
        },
        "View.from_handler": {
            "name": "from_handler",
            "location": 46,
            "return": [
                "Type['View']"
            ],
            "arguments": {
                "cls": [],
                "fun": [
                    "ViewHandlerFun"
                ]
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "web": [
                    "Web"
                ]
            }
        },
        "View.__post_init__": {
            "name": "__post_init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.path_for": {
            "name": "path_for",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "str"
                ]
            }
        },
        "View.url_for": {
            "name": "url_for",
            "location": 114,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "str"
                ],
                "_base_url": [
                    "Union[(str, URL)]"
                ]
            }
        },
        "View.text": {
            "name": "text",
            "location": 171,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "View.html": {
            "name": "html",
            "location": 185,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "View.json": {
            "name": "json",
            "location": 199,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "View.bytes": {
            "name": "bytes",
            "location": 219,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_bytes"
                ]
            }
        },
        "View.bytes_to_response": {
            "name": "bytes_to_response",
            "location": 239,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "_bytes"
                ]
            }
        },
        "View.response_to_bytes": {
            "name": "response_to_bytes",
            "location": 243,
            "return": [
                "_bytes"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Response"
                ]
            }
        },
        "View.route": {
            "name": "route",
            "location": 251,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "handler": [
                    "Callable"
                ]
            }
        },
        "View.notfound": {
            "name": "notfound",
            "location": 256,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "View.error": {
            "name": "error",
            "location": 263,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "takes_model._decorate_view": {
            "name": "_decorate_view",
            "location": 270,
            "return": [
                "ViewHandlerFun"
            ],
            "arguments": {
                "fun": [
                    "ViewHandlerFun"
                ]
            }
        },
        "gives_model._decorate_view": {
            "name": "_decorate_view",
            "location": 287,
            "return": [
                "ViewHandlerFun"
            ],
            "arguments": {
                "fun": [
                    "ViewHandlerFun"
                ]
            }
        }
    },
    "faust-master/faust/web/__init__.py": {},
    "faust-master/faust/web/apps/graph.py": {},
    "faust-master/faust/web/apps/production_index.py": {},
    "faust-master/faust/web/apps/router.py": {},
    "faust-master/faust/web/apps/stats.py": {
        "Assignment._topic_grouped": {
            "name": "_topic_grouped",
            "location": 31,
            "return": [
                "TPMap"
            ],
            "arguments": {
                "cls": [],
                "assignment": [
                    "Set[TP]"
                ]
            }
        }
    },
    "faust-master/faust/web/apps/tables.py": {
        "TableView.table_json": {
            "name": "table_json",
            "location": 28,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "TableT"
                ]
            }
        },
        "TableView.get_table_or_404": {
            "name": "get_table_or_404",
            "location": 32,
            "return": [
                "TableT"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TableView.get_table_value_or_404": {
            "name": "get_table_value_or_404",
            "location": 39,
            "return": [
                "V"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "TableT"
                ],
                "key": [
                    "K"
                ]
            }
        },
        "TableKeyDetail.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/web/apps/__init__.py": {},
    "faust-master/faust/web/cache/cache.py": {
        "iri_to_uri": {
            "name": "iri_to_uri",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "iri": [
                    "str"
                ]
            }
        },
        "Cache.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Seconds"
                ],
                "include_headers": [
                    "bool"
                ],
                "key_prefix": [
                    "str"
                ],
                "backend": [
                    "Union[(Type[CacheBackendT], str)]"
                ]
            }
        },
        "Cache.view": {
            "name": "view",
            "location": 51,
            "return": [
                "Callable[([Callable], Callable)]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Seconds"
                ],
                "include_headers": [
                    "bool"
                ],
                "key_prefix": [
                    "str"
                ]
            }
        },
        "Cache._view_backend": {
            "name": "_view_backend",
            "location": 108,
            "return": [
                "CacheBackendT"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "View"
                ]
            }
        },
        "Cache.can_cache_request": {
            "name": "can_cache_request",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Request"
                ]
            }
        },
        "Cache.can_cache_response": {
            "name": "can_cache_response",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Request"
                ],
                "response": [
                    "Response"
                ]
            }
        },
        "Cache.key_for_request": {
            "name": "key_for_request",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Request"
                ],
                "prefix": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "include_headers": [
                    "bool"
                ]
            }
        },
        "Cache.build_key": {
            "name": "build_key",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Request"
                ],
                "method": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "headers": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "Cache.view._inner": {
            "name": "_inner",
            "location": 58,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fun": [
                    "Callable"
                ]
            }
        }
    },
    "faust-master/faust/web/cache/exceptions.py": {},
    "faust-master/faust/web/cache/__init__.py": {},
    "faust-master/faust/web/cache/backends/base.py": {
        "CacheBackend.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "url": [
                    "Union[(URL, str)]"
                ]
            }
        },
        "CacheBackend._repr_info": {
            "name": "_repr_info",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/web/cache/backends/memory.py": {
        "CacheStorage.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheStorage.get": {
            "name": "get",
            "location": 30,
            "return": [
                "Optional[VT]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ]
            }
        },
        "CacheStorage.last_set_ttl": {
            "name": "last_set_ttl",
            "location": 44,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ]
            }
        },
        "CacheStorage.expire": {
            "name": "expire",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ]
            }
        },
        "CacheStorage.set": {
            "name": "set",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ],
                "value": [
                    "VT@@"
                ]
            }
        },
        "CacheStorage.setex": {
            "name": "setex",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ],
                "timeout": [
                    "float"
                ],
                "value": [
                    "VT@@"
                ]
            }
        },
        "CacheStorage.ttl": {
            "name": "ttl",
            "location": 62,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ]
            }
        },
        "CacheStorage.delete": {
            "name": "delete",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT@@"
                ]
            }
        },
        "CacheStorage.clear": {
            "name": "clear",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheBackend.__post_init__": {
            "name": "__post_init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/web/cache/backends/redis.py": {
        "CacheBackend.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ],
                "url": [
                    "Union[(URL, str)]"
                ]
            }
        },
        "CacheBackend._init_schemes": {
            "name": "_init_schemes",
            "location": 81,
            "return": [
                "Mapping[(str, Type[_RedisClientT])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheBackend._new_client": {
            "name": "_new_client",
            "location": 119,
            "return": [
                "_RedisClientT"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheBackend._client_from_url_and_query": {
            "name": "_client_from_url_and_query",
            "location": 122,
            "return": [
                "_RedisClientT"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "URL"
                ]
            }
        },
        "CacheBackend._prepare_client_kwargs": {
            "name": "_prepare_client_kwargs",
            "location": 149,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "URL"
                ]
            }
        },
        "CacheBackend._as_cluster_kwargs": {
            "name": "_as_cluster_kwargs",
            "location": 154,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str"
                ]
            }
        },
        "CacheBackend._int_from_str": {
            "name": "_int_from_str",
            "location": 160,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ],
                "default": [
                    "int"
                ]
            }
        },
        "CacheBackend._float_from_str": {
            "name": "_float_from_str",
            "location": 165,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ],
                "default": [
                    "float"
                ]
            }
        },
        "CacheBackend._db_from_path": {
            "name": "_db_from_path",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "CacheBackend.client": {
            "name": "client",
            "location": 180,
            "return": [
                "_RedisClientT"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/web/cache/backends/__init__.py": {},
    "faust-master/faust/web/drivers/aiohttp.py": {
        "_prepare_cors_options": {
            "name": "_prepare_cors_options",
            "location": 40,
            "return": [
                "Mapping[(str, ResourceOptions)]"
            ],
            "arguments": {
                "opts": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "_faust_to_aiohttp_options": {
            "name": "_faust_to_aiohttp_options",
            "location": 45,
            "return": [
                "ResourceOptions"
            ],
            "arguments": {
                "opts": [
                    "ResourceOptions"
                ]
            }
        },
        "ServerThread.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "'Web'"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web": [
                    "'Web'"
                ]
            }
        },
        "Web.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "Web.cors": {
            "name": "cors",
            "location": 110,
            "return": [
                "CorsConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web.text": {
            "name": "text",
            "location": 138,
            "return": [
                "base.Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Web.html": {
            "name": "html",
            "location": 153,
            "return": [
                "base.Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Web.json": {
            "name": "json",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Any"
                ]
            }
        },
        "Web.bytes": {
            "name": "bytes",
            "location": 199,
            "return": [
                "base.Response"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_bytes"
                ]
            }
        },
        "Web.route": {
            "name": "route",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "handler": [
                    "Callable"
                ],
                "cors_options": [
                    "Mapping[(str, ResourceOptions)]"
                ]
            }
        },
        "Web._wrap_into_asyncdef": {
            "name": "_wrap_into_asyncdef",
            "location": 235,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable"
                ]
            }
        },
        "Web.add_static": {
            "name": "add_static",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "path": [
                    "Union[(Path, str)]"
                ]
            }
        },
        "Web.bytes_to_response": {
            "name": "bytes_to_response",
            "location": 252,
            "return": [
                "base.Response"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "_bytes"
                ]
            }
        },
        "Web.response_to_bytes": {
            "name": "response_to_bytes",
            "location": 262,
            "return": [
                "_bytes"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "base.Response"
                ]
            }
        },
        "Web._create_site": {
            "name": "_create_site",
            "location": 281,
            "return": [
                "BaseSite"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web._new_transport": {
            "name": "_new_transport",
            "location": 284,
            "return": [
                "BaseSite"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "Web._new_transport_tcp": {
            "name": "_new_transport_tcp",
            "location": 287,
            "return": [
                "BaseSite"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web._new_transport_unix": {
            "name": "_new_transport_unix",
            "location": 294,
            "return": [
                "BaseSite"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web._app": {
            "name": "_app",
            "location": 318,
            "return": [
                "Application"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/faust/web/drivers/__init__.py": {},
    "faust-master/faust/_cython/__init__.py": {},
    "faust-master/t/conftest.py": {
        "patching": {
            "name": "patching",
            "location": 27,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "request": []
            }
        },
        "loop": {
            "name": "loop",
            "location": 47,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "freeze_time": {
            "name": "freeze_time",
            "location": 92,
            "return": [],
            "arguments": {
                "event_loop": [],
                "request": []
            }
        },
        "mock_http_client": {
            "name": "mock_http_client",
            "location": 118,
            "return": [
                "ClientSession"
            ],
            "arguments": {}
        },
        "_collected_environ": {
            "name": "_collected_environ",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "_verify_environ": {
            "name": "_verify_environ",
            "location": 204,
            "return": [],
            "arguments": {
                "_collected_environ": []
            }
        },
        "alive_threads": {
            "name": "alive_threads",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "_recorded_threads_at_startup": {
            "name": "_recorded_threads_at_startup",
            "location": 224,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "threads_not_lingering": {
            "name": "threads_not_lingering",
            "location": 232,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_recorded_tasks_at_startup": {
            "name": "_recorded_tasks_at_startup",
            "location": 247,
            "return": [],
            "arguments": {
                "request": [],
                "loop": []
            }
        },
        "tasks_not_lingering": {
            "name": "tasks_not_lingering",
            "location": 255,
            "return": [],
            "arguments": {
                "request": [],
                "loop": [],
                "event_loop": [],
                "_recorded_tasks_at_startup": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 279,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "_patching.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "request": []
            }
        },
        "_patching.__getattr__": {
            "name": "__getattr__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_patching.__call__": {
            "name": "__call__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "value": [],
                "name": [],
                "new": []
            }
        },
        "_patching._value_or_mock": {
            "name": "_value_or_mock",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "new": [],
                "name": [],
                "path": []
            }
        },
        "_patching.setattr": {
            "name": "setattr",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "name": [],
                "value": []
            }
        },
        "_patching.setitem": {
            "name": "setitem",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "dic": [],
                "name": [],
                "value": [],
                "new": []
            }
        },
        "mock_http_client.raise_for_status": {
            "name": "raise_for_status",
            "location": 131,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/helpers.py": {
        "message": {
            "name": "message",
            "location": 8,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "new_event": {
            "name": "new_event",
            "location": 29,
            "return": [],
            "arguments": {
                "app": [],
                "key": [],
                "value": []
            }
        }
    },
    "faust-master/t/__init__.py": {},
    "faust-master/t/bench/base.py": {
        "Benchmark.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "topic": []
            }
        },
        "Benchmark.install": {
            "name": "install",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "main_name": []
            }
        },
        "Benchmark.create_benchmark_agent": {
            "name": "create_benchmark_agent",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Benchmark.create_produce_command": {
            "name": "create_produce_command",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Benchmark.generate_values": {
            "name": "generate_values",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "max_messages": [
                    "int"
                ]
            }
        },
        "Benchmark.produce.on_published": {
            "name": "on_published",
            "location": 91,
            "return": [],
            "arguments": {
                "meta": []
            }
        }
    },
    "faust-master/t/bench/baseline.py": {},
    "faust-master/t/bench/forward.py": {},
    "faust-master/t/bench/__init__.py": {},
    "faust-master/t/consistency/consistency_checker.py": {
        "BaseKafkaTableBuilder.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "loop": []
            }
        },
        "BaseKafkaTableBuilder.get_key": {
            "name": "get_key",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BaseKafkaTableBuilder.get_value": {
            "name": "get_value",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BaseKafkaTableBuilder._highwaters": {
            "name": "_highwaters",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConsistencyChecker.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "changelog": [],
                "loop": []
            }
        },
        "ConsistencyChecker._analyze": {
            "name": "_analyze",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConsistencyChecker._analyze_keys": {
            "name": "_analyze_keys",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConsistencyChecker._get_messages_for_key": {
            "name": "_get_messages_for_key",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ConsistencyChecker._analyze_non_atomic_commit": {
            "name": "_analyze_non_atomic_commit",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ConsistencyChecker._analyze_key_partitions": {
            "name": "_analyze_key_partitions",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConsistencyChecker._assert_results": {
            "name": "_assert_results",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/consistency/test_consistency.py": {
        "Stresser.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "num_workers": [],
                "num_producers": [],
                "loop": []
            }
        },
        "Stresser._stopped": {
            "name": "_stopped",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stresser._running": {
            "name": "_running",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stresser._stopped_producers": {
            "name": "_stopped_producers",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stresser._running_producers": {
            "name": "_running_producers",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stresser.stop_stresser": {
            "name": "stop_stresser",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stresser._should": {
            "name": "_should",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/consistency/__init__.py": {},
    "faust-master/t/docs/__init__.py": {},
    "faust-master/t/docs/testing/test_figB_agent_to_agent.py": {
        "test_app": {
            "name": "test_app",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "mock_coro": {
            "name": "mock_coro",
            "location": 37,
            "return": [],
            "arguments": {
                "return_value": []
            }
        }
    },
    "faust-master/t/docs/testing/test_figC_windowed_table.py": {},
    "faust-master/t/docs/testing/__init__.py": {},
    "faust-master/t/functional/conftest.py": {
        "create_appmarks": {
            "name": "create_appmarks",
            "location": 19,
            "return": [],
            "arguments": {
                "name": [],
                "store": [],
                "cache": []
            }
        },
        "app": {
            "name": "app",
            "location": 32,
            "return": [],
            "arguments": {
                "event_loop": [],
                "request": []
            }
        },
        "web": {
            "name": "web",
            "location": 55,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "logging": {
            "name": "logging",
            "location": 67,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "mocked_redis": {
            "name": "mocked_redis",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 120,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "faust-master/t/functional/helpers.py": {},
    "faust-master/t/functional/test_aiokafka.py": {
        "test_TP_TopicPartition_hashability": {
            "name": "test_TP_TopicPartition_hashability",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/functional/test_app.py": {
        "_dummy_partitioner": {
            "name": "_dummy_partitioner",
            "location": 43,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_settings.App": {
            "name": "App",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "test_settings.test_env_with_prefix": {
            "name": "test_env_with_prefix",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_env": {
            "name": "test_env",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "env": [],
                "setting": [],
                "expected_value": []
            }
        },
        "test_settings.assert_expected": {
            "name": "assert_expected",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected_value": []
            }
        },
        "test_settings.test_defaults": {
            "name": "test_defaults",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_reply_prefix_unique": {
            "name": "test_reply_prefix_unique",
            "location": 580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_app_config": {
            "name": "test_app_config",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_broker_as_URL": {
            "name": "test_broker_as_URL",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_store_as_URL": {
            "name": "test_store_as_URL",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_cache_as_URL": {
            "name": "test_cache_as_URL",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_web_as_URL": {
            "name": "test_web_as_URL",
            "location": 601,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_datadir_as_Path": {
            "name": "test_datadir_as_Path",
            "location": 605,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_tabledir_is_relative_to_path": {
            "name": "test_tabledir_is_relative_to_path",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.assert_config_equivalent": {
            "name": "assert_config_equivalent",
            "location": 616,
            "return": [
                "App"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "version": [],
                "broker": [],
                "store": [],
                "cache": [],
                "web": [],
                "web_enabled": [],
                "autodiscover": [],
                "origin": [],
                "canonical_url": [],
                "broker_client_id": [],
                "datadir": [],
                "tabledir": [],
                "processing_guarantee": [],
                "blocking_timeout": [],
                "broker_api_version": [],
                "broker_request_timeout": [],
                "broker_heartbeat_interval": [],
                "broker_session_timeout": [],
                "broker_rebalance_timeout": [],
                "broker_commit_every": [],
                "broker_commit_interval": [],
                "broker_commit_livelock_soft_timeout": [],
                "broker_check_crcs": [],
                "broker_producer": [],
                "broker_consumer": [],
                "consumer_api_version": [],
                "producer_partitioner": [],
                "producer_request_timeout": [],
                "producer_api_version": [],
                "producer_linger": [],
                "table_cleanup_interval": [],
                "table_key_index_size": [],
                "key_serializer": [],
                "value_serializer": [],
                "table_standby_replicas": [],
                "topic_replication_factor": [],
                "topic_allow_declare": [],
                "topic_disable_leader": [],
                "reply_to": [],
                "reply_create_topic": [],
                "reply_expires": [],
                "stream_buffer_maxsize": [],
                "stream_wait_empty": [],
                "stream_publish_on_commit": [],
                "stream_recovery_delay": [],
                "stream_processing_timeout": [],
                "web_bind": [],
                "web_port": [],
                "web_host": [],
                "web_transport": [],
                "web_in_thread": [],
                "web_cors_options": [],
                "worker_redirect_stdouts": [],
                "worker_redirect_stdouts_level": [],
                "broker_max_poll_records": [],
                "broker_max_poll_interval": [],
                "timezone": [],
                "logging_config": [],
                "consumer_auto_offset_reset": [],
                "ConsumerScheduler": []
            }
        },
        "test_settings.test_custom_host_port_to_canonical": {
            "name": "test_custom_host_port_to_canonical",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "web_bind": [],
                "web_port": [],
                "web_host": []
            }
        },
        "test_settings.test_producer_linger_ms__compat": {
            "name": "test_producer_linger_ms__compat",
            "location": 830,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_id_no_version": {
            "name": "test_id_no_version",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_version_cannot_be_zero": {
            "name": "test_version_cannot_be_zero",
            "location": 837,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_url": {
            "name": "test_compat_url",
            "location": 842,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_client_id": {
            "name": "test_compat_client_id",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_commit_interval": {
            "name": "test_compat_commit_interval",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_create_reply_topic": {
            "name": "test_compat_create_reply_topic",
            "location": 854,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_num_standby_replicas": {
            "name": "test_compat_num_standby_replicas",
            "location": 861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_stream_ack_cancelled_tasks": {
            "name": "test_compat_stream_ack_cancelled_tasks",
            "location": 866,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_stream_ack_exceptions": {
            "name": "test_compat_stream_ack_exceptions",
            "location": 872,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_default_partitions": {
            "name": "test_compat_default_partitions",
            "location": 877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_compat_replication_factor": {
            "name": "test_compat_replication_factor",
            "location": 882,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_warns_when_key_already_configured": {
            "name": "test_warns_when_key_already_configured",
            "location": 887,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_broker_with_no_scheme_set": {
            "name": "test_broker_with_no_scheme_set",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_consumer_api_version__defaults_to_broker": {
            "name": "test_consumer_api_version__defaults_to_broker",
            "location": 903,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_settings.test_producer_api_version__defaults_to_broker": {
            "name": "test_producer_api_version__defaults_to_broker",
            "location": 911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BootStrategy.test_init": {
            "name": "test_init",
            "location": 922,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BootStrategy.test_sensors": {
            "name": "test_sensors",
            "location": 942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BootStrategy.test_kafka_consumer": {
            "name": "test_kafka_consumer",
            "location": 946,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BootStrategy.test_kafka_producer": {
            "name": "test_kafka_producer",
            "location": 964,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BootStrategy.test_web_server": {
            "name": "test_web_server",
            "location": 976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BootStrategy.test_disable_kafka": {
            "name": "test_disable_kafka",
            "location": 983,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BootStrategy.test_disable_kafka_consumer": {
            "name": "test_disable_kafka_consumer",
            "location": 993,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/functional/test_channels.py": {
        "channel": {
            "name": "channel",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_schema__default": {
            "name": "test_schema__default",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_schema__from_schema": {
            "name": "test_schema__from_schema",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_schema__overriding": {
            "name": "test_schema__overriding",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_repr__active_partitions_empty": {
            "name": "test_repr__active_partitions_empty",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_repr__with_active_partitions": {
            "name": "test_repr__with_active_partitions",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_label": {
            "name": "test_label",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_send_soon": {
            "name": "test_send_soon",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_stream": {
            "name": "test_stream",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_get_topic_name": {
            "name": "test_get_topic_name",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_clone": {
            "name": "test_clone",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_derive": {
            "name": "test_derive",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "test_clone_using_queue": {
            "name": "test_clone_using_queue",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_as_future_message__eager_partitioning": {
            "name": "test_as_future_message__eager_partitioning",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_as_future_message__eager_partitioning_on_channel": {
            "name": "test_as_future_message__eager_partitioning_on_channel",
            "location": 251,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/functional/test_faust.py": {
        "test_dir": {
            "name": "test_dir",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/functional/test_models.py": {
        "test_parameters": {
            "name": "test_parameters",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_paramters_with_custom_init": {
            "name": "test_paramters_with_custom_init",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_parameters_with_custom_init_and_super": {
            "name": "test_parameters_with_custom_init_and_super",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_datetimes": {
            "name": "test_datetimes",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_datetimes__isodates_compat": {
            "name": "test_datetimes__isodates_compat",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_decimals": {
            "name": "test_decimals",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "test_decimals_compat": {
            "name": "test_decimals_compat",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "test_custom_coercion": {
            "name": "test_custom_coercion",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_constructor": {
            "name": "test_constructor",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "test_submodels": {
            "name": "test_submodels",
            "location": 458,
            "return": [],
            "arguments": {}
        },
        "test_submodels_forward_reference": {
            "name": "test_submodels_forward_reference",
            "location": 480,
            "return": [],
            "arguments": {}
        },
        "test_derive": {
            "name": "test_derive",
            "location": 497,
            "return": [],
            "arguments": {}
        },
        "test_classvar_is_not_a_field": {
            "name": "test_classvar_is_not_a_field",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "test_constructor_from_data": {
            "name": "test_constructor_from_data",
            "location": 538,
            "return": [],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 559,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_eq__incompatible": {
            "name": "test_eq__incompatible",
            "location": 563,
            "return": [],
            "arguments": {}
        },
        "test_ne": {
            "name": "test_ne",
            "location": 581,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_json": {
            "name": "test_json",
            "location": 585,
            "return": [],
            "arguments": {}
        },
        "test_dumps": {
            "name": "test_dumps",
            "location": 636,
            "return": [],
            "arguments": {
                "record": []
            }
        },
        "test_subclass_default_values": {
            "name": "test_subclass_default_values",
            "location": 641,
            "return": [],
            "arguments": {}
        },
        "test_subclass_preserves_required_values": {
            "name": "test_subclass_preserves_required_values",
            "location": 658,
            "return": [],
            "arguments": {}
        },
        "test_too_many_arguments_raises_TypeError": {
            "name": "test_too_many_arguments_raises_TypeError",
            "location": 676,
            "return": [],
            "arguments": {}
        },
        "test_fields_with_concrete_polymorphic_type__dict": {
            "name": "test_fields_with_concrete_polymorphic_type__dict",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "test_fields_with_concrete_polymorphic_type__dict_optional": {
            "name": "test_fields_with_concrete_polymorphic_type__dict_optional",
            "location": 696,
            "return": [],
            "arguments": {}
        },
        "test_fields_with_concrete_polymorphic_type__tuple": {
            "name": "test_fields_with_concrete_polymorphic_type__tuple",
            "location": 706,
            "return": [],
            "arguments": {}
        },
        "test_fields_with_concrete_polymorphic_type__list": {
            "name": "test_fields_with_concrete_polymorphic_type__list",
            "location": 713,
            "return": [],
            "arguments": {}
        },
        "test_fields_with_concrete_polymorphic_type__set": {
            "name": "test_fields_with_concrete_polymorphic_type__set",
            "location": 720,
            "return": [],
            "arguments": {}
        },
        "test_fields_with_concrete_polymorphic_type__frozenset": {
            "name": "test_fields_with_concrete_polymorphic_type__frozenset",
            "location": 727,
            "return": [],
            "arguments": {}
        },
        "test_supports_post_init": {
            "name": "test_supports_post_init",
            "location": 734,
            "return": [],
            "arguments": {}
        },
        "test_default_no_blessed_key": {
            "name": "test_default_no_blessed_key",
            "location": 747,
            "return": [],
            "arguments": {}
        },
        "test_default_multiple_levels_no_blessed_key": {
            "name": "test_default_multiple_levels_no_blessed_key",
            "location": 766,
            "return": [],
            "arguments": {}
        },
        "test_polymorphic_fields": {
            "name": "test_polymorphic_fields",
            "location": 791,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_compat_enabled_blessed_key": {
            "name": "test_compat_enabled_blessed_key",
            "location": 810,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test__polymorphic_fields_deeply_nested": {
            "name": "test__polymorphic_fields_deeply_nested",
            "location": 829,
            "return": [],
            "arguments": {}
        },
        "test_compat_blessed_key_deeply_nested": {
            "name": "test_compat_blessed_key_deeply_nested",
            "location": 860,
            "return": [],
            "arguments": {}
        },
        "test_adtribute_payload": {
            "name": "test_adtribute_payload",
            "location": 926,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_overwrite_asdict": {
            "name": "test_overwrite_asdict",
            "location": 993,
            "return": [],
            "arguments": {}
        },
        "test_prepare_dict": {
            "name": "test_prepare_dict",
            "location": 1003,
            "return": [],
            "arguments": {}
        },
        "test_custom_init_calling_model_init": {
            "name": "test_custom_init_calling_model_init",
            "location": 1017,
            "return": [],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 1034,
            "return": [],
            "arguments": {}
        },
        "test_ident": {
            "name": "test_ident",
            "location": 1038,
            "return": [],
            "arguments": {}
        },
        "test_list_field_refers_to_self": {
            "name": "test_list_field_refers_to_self",
            "location": 1042,
            "return": [],
            "arguments": {}
        },
        "test_optional_modelfield": {
            "name": "test_optional_modelfield",
            "location": 1058,
            "return": [],
            "arguments": {}
        },
        "test_optional_modelfield_with_coercion": {
            "name": "test_optional_modelfield_with_coercion",
            "location": 1075,
            "return": [],
            "arguments": {}
        },
        "test_subclass_inherit_flags": {
            "name": "test_subclass_inherit_flags",
            "location": 1089,
            "return": [],
            "arguments": {
                "flag": [],
                "expected_default": []
            }
        },
        "test_abstract_model_repr": {
            "name": "test_abstract_model_repr",
            "location": 1104,
            "return": [],
            "arguments": {}
        },
        "test_raises_when_defaults_in_wrong_order": {
            "name": "test_raises_when_defaults_in_wrong_order",
            "location": 1114,
            "return": [],
            "arguments": {}
        },
        "test_maybe_namespace_raises_for_missing_abstract_type": {
            "name": "test_maybe_namespace_raises_for_missing_abstract_type",
            "location": 1123,
            "return": [],
            "arguments": {}
        },
        "test_compat_loads_DeprecationWarning": {
            "name": "test_compat_loads_DeprecationWarning",
            "location": 1132,
            "return": [],
            "arguments": {}
        },
        "test_model_overriding_Options_sets_options": {
            "name": "test_model_overriding_Options_sets_options",
            "location": 1141,
            "return": [],
            "arguments": {}
        },
        "test_model_with_custom_hash": {
            "name": "test_model_with_custom_hash",
            "location": 1156,
            "return": [],
            "arguments": {}
        },
        "test_model_with_custom_eq": {
            "name": "test_model_with_custom_eq",
            "location": 1166,
            "return": [],
            "arguments": {}
        },
        "test_Record_comparison": {
            "name": "test_Record_comparison",
            "location": 1176,
            "return": [],
            "arguments": {}
        },
        "test_maybe_model": {
            "name": "test_maybe_model",
            "location": 1204,
            "return": [],
            "arguments": {}
        },
        "test_StringField": {
            "name": "test_StringField",
            "location": 1218,
            "return": [],
            "arguments": {}
        },
        "test_StringField_optional__explicit": {
            "name": "test_StringField_optional__explicit",
            "location": 1244,
            "return": [],
            "arguments": {}
        },
        "test_StringField_optional__Optional": {
            "name": "test_StringField_optional__Optional",
            "location": 1257,
            "return": [],
            "arguments": {}
        },
        "test_validation_ensures_types_match": {
            "name": "test_validation_ensures_types_match",
            "location": 1269,
            "return": [],
            "arguments": {}
        },
        "test_Decimal_max_digits": {
            "name": "test_Decimal_max_digits",
            "location": 1301,
            "return": [],
            "arguments": {}
        },
        "test_StringField_trim_whitespace": {
            "name": "test_StringField_trim_whitespace",
            "location": 1312,
            "return": [],
            "arguments": {}
        },
        "test_BytesField": {
            "name": "test_BytesField",
            "location": 1320,
            "return": [],
            "arguments": {}
        },
        "test_BytesField_trim_whitespace": {
            "name": "test_BytesField_trim_whitespace",
            "location": 1328,
            "return": [],
            "arguments": {}
        },
        "test_field_descriptors_may_mix_with_non_defaults": {
            "name": "test_field_descriptors_may_mix_with_non_defaults",
            "location": 1336,
            "return": [],
            "arguments": {}
        },
        "test_field_descriptors_throws_type_error": {
            "name": "test_field_descriptors_throws_type_error",
            "location": 1349,
            "return": [],
            "arguments": {}
        },
        "test_implicit_descritor_types": {
            "name": "test_implicit_descritor_types",
            "location": 1359,
            "return": [],
            "arguments": {}
        },
        "test_exclude": {
            "name": "test_exclude",
            "location": 1375,
            "return": [],
            "arguments": {}
        },
        "test_custom_field_validation": {
            "name": "test_custom_field_validation",
            "location": 1397,
            "return": [],
            "arguments": {}
        },
        "test_custom_field__internal_errot": {
            "name": "test_custom_field__internal_errot",
            "location": 1425,
            "return": [],
            "arguments": {}
        },
        "test_datetime_does_not_coerce": {
            "name": "test_datetime_does_not_coerce",
            "location": 1442,
            "return": [],
            "arguments": {}
        },
        "test_datetime_custom_date_parser": {
            "name": "test_datetime_custom_date_parser",
            "location": 1451,
            "return": [],
            "arguments": {}
        },
        "test_float_does_not_coerce": {
            "name": "test_float_does_not_coerce",
            "location": 1460,
            "return": [],
            "arguments": {}
        },
        "test_payload_with_reserved_keyword": {
            "name": "test_payload_with_reserved_keyword",
            "location": 1469,
            "return": [],
            "arguments": {}
        },
        "test_lazy_creation": {
            "name": "test_lazy_creation",
            "location": 1500,
            "return": [],
            "arguments": {}
        },
        "test_Sensitive": {
            "name": "test_Sensitive",
            "location": 1506,
            "return": [],
            "arguments": {}
        },
        "test_Secret": {
            "name": "test_Secret",
            "location": 1567,
            "return": [],
            "arguments": {}
        },
        "test_FieldDescriptor.test_getattr": {
            "name": "test_getattr",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_adtribute_payload.__post_init__": {
            "name": "__post_init__",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Sensitive.exclaim": {
            "name": "exclaim",
            "location": 1550,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "test_Sensitive.upper": {
            "name": "upper",
            "location": 1557,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "test_paramters_with_custom_init.Point.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "test_parameters_with_custom_init_and_super.Point.__post_init__": {
            "name": "__post_init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_custom_coercion.Foo.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "test_custom_coercion.Foo.__eq__": {
            "name": "__eq__",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_custom_coercion.Foo.__hash__": {
            "name": "__hash__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_custom_coercion.Foo.__json__": {
            "name": "__json__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_custom_coercion.Foo.__repr__": {
            "name": "__repr__",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_supports_post_init.X.__post_init__": {
            "name": "__post_init__",
            "location": 740,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__polymorphic_fields_deeply_nested.BaseAttribution.__post_init__": {
            "name": "__post_init__",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_compat_blessed_key_deeply_nested.BaseAttribution.__post_init__": {
            "name": "__post_init__",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_adtribute_payload.BaseAttribution.__post_init__": {
            "name": "__post_init__",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_prepare_dict.Quote._prepare_dict": {
            "name": "_prepare_dict",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "test_custom_init_calling_model_init.Quote.__init__": {
            "name": "__init__",
            "location": 1023,
            "return": [],
            "arguments": {
                "self": [],
                "ask_price": [
                    "str"
                ],
                "bid_price": [
                    "str"
                ]
            }
        },
        "test_model_with_custom_hash.X.__hash__": {
            "name": "__hash__",
            "location": 1160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_model_with_custom_eq.X.__eq__": {
            "name": "__eq__",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_custom_field_validation.ChoiceField.__init__": {
            "name": "__init__",
            "location": 1401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "List[str]"
                ]
            }
        },
        "test_custom_field_validation.ChoiceField.validate": {
            "name": "validate",
            "location": 1407,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "test_custom_field__internal_errot.XField.prepare_value": {
            "name": "prepare_value",
            "location": 1429,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "coerce": []
            }
        },
        "test_overwrite_asdict.R.asdict": {
            "name": "asdict",
            "location": 999,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/functional/test_streams.py": {
        "new_stream": {
            "name": "new_stream",
            "location": 19,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "new_topic_stream": {
            "name": "new_topic_stream",
            "location": 24,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "_new_stream": {
            "name": "_new_stream",
            "location": 29,
            "return": [],
            "arguments": {
                "app": [],
                "channel": []
            }
        },
        "_prepare_app": {
            "name": "_prepare_app",
            "location": 33,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_through_with_concurrency_index": {
            "name": "test_through_with_concurrency_index",
            "location": 131,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_group_by_with_concurrency_index": {
            "name": "test_group_by_with_concurrency_index",
            "location": 149,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_group_by_callback_must_have_name": {
            "name": "test_group_by_callback_must_have_name",
            "location": 157,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "assert_events_acked": {
            "name": "assert_events_acked",
            "location": 246,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "mock_stream_event_ack": {
            "name": "mock_stream_event_ack",
            "location": 482,
            "return": [],
            "arguments": {
                "stream": [],
                "return_value": []
            }
        },
        "mock_event_ack": {
            "name": "mock_event_ack",
            "location": 486,
            "return": [],
            "arguments": {
                "event": [],
                "return_value": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 501,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 508,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_repr__combined": {
            "name": "test_repr__combined",
            "location": 512,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_label": {
            "name": "test_label",
            "location": 516,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_iter_raises": {
            "name": "test_iter_raises",
            "location": 520,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_derive_topic_from_nontopic_channel_raises": {
            "name": "test_derive_topic_from_nontopic_channel_raises",
            "location": 526,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_stream_filter.myfilter": {
            "name": "myfilter",
            "location": 197,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_chained_streams._chain": {
            "name": "_chain",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_chained_streams.test_get_root_stream": {
            "name": "test_get_root_stream",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_chained_streams.test_get_active_stream": {
            "name": "test_get_active_stream",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_chained_streams.test_iter_ll_forwards": {
            "name": "test_iter_ll_forwards",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_chained_streams.test_iter_ll_backwards": {
            "name": "test_iter_ll_backwards",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_chained_streams.test_get_active_stream__loop_in_linkedlist": {
            "name": "test_get_active_stream__loop_in_linkedlist",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_chained_streams.test_get_root_stream__loop_in_linkedlist": {
            "name": "test_get_root_stream__loop_in_linkedlist",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_take__no_event_crashes.NoCurrentEventStream.current_event": {
            "name": "current_event",
            "location": 632,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "faust-master/t/functional/__init__.py": {},
    "faust-master/t/functional/agents/helpers.py": {
        "AgentCase.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "AgentCase.Message": {
            "name": "Message",
            "location": 167,
            "return": [
                "MessageT"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ],
                "offset": [
                    "int"
                ],
                "timestamp": [
                    "float"
                ],
                "timestamp_type": [
                    "int"
                ],
                "headers": [
                    "Optional[HeadersArg]"
                ],
                "key": [
                    "Optional[bytes]"
                ],
                "value": [
                    "Optional[bytes]"
                ],
                "checksum": [
                    "Optional[bytes]"
                ]
            }
        },
        "AgentCase.next_offset": {
            "name": "next_offset",
            "location": 192,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "TP"
                ]
            }
        }
    },
    "faust-master/t/functional/agents/test_concurrency.py": {
        "AgentConcurrencyCase.on_init": {
            "name": "on_init",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/functional/agents/test_current_agent.py": {},
    "faust-master/t/functional/agents/test_isolated_partitions.py": {
        "AgentIsolatedCase.on_init": {
            "name": "on_init",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/functional/agents/__init__.py": {},
    "faust-master/t/functional/models/test_typing.py": {
        "Xi": {
            "name": "Xi",
            "location": 43,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_comprehension": {
            "name": "test_comprehension",
            "location": 426,
            "return": [],
            "arguments": {
                "case": []
            }
        },
        "test_compile": {
            "name": "test_compile",
            "location": 433,
            "return": [],
            "arguments": {
                "case": []
            }
        }
    },
    "faust-master/t/functional/models/__init__.py": {},
    "faust-master/t/functional/sensors/test_statsd.py": {
        "mon": {
            "name": "mon",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "stream_from_channel": {
            "name": "stream_from_channel",
            "location": 12,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "stream_from_topic": {
            "name": "stream_from_topic",
            "location": 16,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "stream_from_multiple_topics": {
            "name": "stream_from_multiple_topics",
            "location": 20,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "stream_from_combined_streams": {
            "name": "stream_from_combined_streams",
            "location": 24,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_stream_label": {
            "name": "test_stream_label",
            "location": 34,
            "return": [],
            "arguments": {
                "make_stream": [],
                "expected": []
            }
        }
    },
    "faust-master/t/functional/sensors/__init__.py": {},
    "faust-master/t/functional/serializers/test_registry.py": {
        "test_loads_key": {
            "name": "test_loads_key",
            "location": 124,
            "return": [],
            "arguments": {
                "payload": [],
                "typ": [],
                "serializer": [],
                "expected": []
            }
        },
        "test_loads_key__expected_model_received_None": {
            "name": "test_loads_key__expected_model_received_None",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_loads_key__propagates_MemoryError": {
            "name": "test_loads_key__propagates_MemoryError",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_loads_value__propagates_MemoryError": {
            "name": "test_loads_value__propagates_MemoryError",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_loads_value__expected_model_received_None": {
            "name": "test_loads_value__expected_model_received_None",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_loads_value": {
            "name": "test_loads_value",
            "location": 154,
            "return": [],
            "arguments": {
                "payload": [],
                "typ": [],
                "serializer": [],
                "expected": []
            }
        },
        "test_loads_value_missing_key_raises_error": {
            "name": "test_loads_value_missing_key_raises_error",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_loads_key_missing_key_raises_error": {
            "name": "test_loads_key_missing_key_raises_error",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_dumps_value__bytes": {
            "name": "test_dumps_value__bytes",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_serializer_type": {
            "name": "test_serializer_type",
            "location": 187,
            "return": [],
            "arguments": {
                "typ": [],
                "alt": [],
                "expected": []
            }
        },
        "test_prepare_payload": {
            "name": "test_prepare_payload",
            "location": 198,
            "return": [],
            "arguments": {
                "typ": [],
                "value": [],
                "expected_value": []
            }
        }
    },
    "faust-master/t/functional/serializers/__init__.py": {},
    "faust-master/t/functional/web/conftest.py": {
        "web_client": {
            "name": "web_client",
            "location": 7,
            "return": [],
            "arguments": {
                "loop": [],
                "aiohttp_client": [],
                "web": []
            }
        },
        "router_same": {
            "name": "router_same",
            "location": 18,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "faust-master/t/functional/web/test_cache.py": {
        "test_cache": {
            "name": "test_cache",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_key_for_request": {
            "name": "test_key_for_request",
            "location": 131,
            "return": [],
            "arguments": {
                "include_headers": []
            }
        },
        "no_aredis": {
            "name": "no_aredis",
            "location": 270,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_cache_repr": {
            "name": "test_cache_repr",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "bp": {
            "name": "bp",
            "location": 371,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "ACachedView.__post_init__": {
            "name": "__post_init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_RedisScheme.test_single_client": {
            "name": "test_single_client",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_RedisScheme.test_cluster_client": {
            "name": "test_cluster_client",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "faust-master/t/functional/web/test_tables.py": {
        "table_foo": {
            "name": "table_foo",
            "location": 5,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "table_bar": {
            "name": "table_bar",
            "location": 10,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "tables": {
            "name": "tables",
            "location": 15,
            "return": [],
            "arguments": {
                "table_foo": [],
                "table_bar": []
            }
        }
    },
    "faust-master/t/functional/web/test_views.py": {
        "inject_blueprint": {
            "name": "inject_blueprint",
            "location": 41,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "faust-master/t/functional/web/__init__.py": {},
    "faust-master/t/integration/app.py": {},
    "faust-master/t/integration/conftest.py": {
        "app": {
            "name": "app",
            "location": 13,
            "return": [
                "AppT"
            ],
            "arguments": {}
        },
        "main_path": {
            "name": "main_path",
            "location": 22,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "_create_faust_cli": {
            "name": "_create_faust_cli",
            "location": 29,
            "return": [
                "Callable[(..., CommandReturns)]"
            ],
            "arguments": {
                "executable": [
                    "Path"
                ]
            }
        },
        "faust": {
            "name": "faust",
            "location": 56,
            "return": [
                "Callable[(..., CommandReturns)]"
            ],
            "arguments": {
                "main_path": [
                    "Path"
                ]
            }
        },
        "faust_json": {
            "name": "faust_json",
            "location": 61,
            "return": [],
            "arguments": {
                "main_path": [
                    "Path"
                ]
            }
        },
        "faust_color": {
            "name": "faust_color",
            "location": 66,
            "return": [
                "Callable[(..., CommandReturns)]"
            ],
            "arguments": {
                "main_path": [
                    "Path"
                ]
            }
        },
        "_create_faust_cli.call_faust_cli": {
            "name": "call_faust_cli",
            "location": 37,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        }
    },
    "faust-master/t/integration/cli/test_agents.py": {
        "test_json": {
            "name": "test_json",
            "location": 1,
            "return": [],
            "arguments": {
                "faust_json": []
            }
        },
        "test_tabulated": {
            "name": "test_tabulated",
            "location": 21,
            "return": [],
            "arguments": {
                "faust": []
            }
        },
        "test_colors": {
            "name": "test_colors",
            "location": 27,
            "return": [],
            "arguments": {
                "faust_color": []
            }
        },
        "test_json_no_local": {
            "name": "test_json_no_local",
            "location": 33,
            "return": [],
            "arguments": {
                "faust_json": []
            }
        }
    },
    "faust-master/t/integration/cli/test_base.py": {
        "test_command_returns_nonzero_exit_status": {
            "name": "test_command_returns_nonzero_exit_status",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/integration/cli/test_model.py": {
        "test_Arena.test_json": {
            "name": "test_json",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "faust_json": []
            }
        },
        "test_Arena.test_tabulated": {
            "name": "test_tabulated",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "faust": []
            }
        },
        "test_Arena.test_colors": {
            "name": "test_colors",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "faust_color": []
            }
        },
        "test_Point.test_json": {
            "name": "test_json",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "faust_json": []
            }
        },
        "test_Point.test_tabulated": {
            "name": "test_tabulated",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "faust": []
            }
        },
        "test_Point.test_colors": {
            "name": "test_colors",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "faust_color": []
            }
        }
    },
    "faust-master/t/integration/cli/test_models.py": {
        "test_json": {
            "name": "test_json",
            "location": 1,
            "return": [],
            "arguments": {
                "faust_json": []
            }
        },
        "test_tabulated": {
            "name": "test_tabulated",
            "location": 16,
            "return": [],
            "arguments": {
                "faust": []
            }
        },
        "test_colors": {
            "name": "test_colors",
            "location": 22,
            "return": [],
            "arguments": {
                "faust_color": []
            }
        },
        "test_json_no_local": {
            "name": "test_json_no_local",
            "location": 28,
            "return": [],
            "arguments": {
                "faust_json": []
            }
        }
    },
    "faust-master/t/integration/cli/__init__.py": {},
    "faust-master/t/meticulous/assignor/test_copartitioned_assignor.py": {
        "is_valid": {
            "name": "is_valid",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "cli_assignments": [
                    "MutableMapping[(str, CopartitionedAssignment)]"
                ],
                "num_partitions": [
                    "int"
                ],
                "replicas": [
                    "int"
                ]
            }
        },
        "client_addition_sticky": {
            "name": "client_addition_sticky",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "old": [
                    "MutableMapping[(str, CopartitionedAssignment)]"
                ],
                "new": [
                    "MutableMapping[(str, CopartitionedAssignment)]"
                ]
            }
        },
        "client_removal_sticky": {
            "name": "client_removal_sticky",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "old": [
                    "MutableMapping[(str, CopartitionedAssignment)]"
                ],
                "new": [
                    "MutableMapping[(str, CopartitionedAssignment)]"
                ]
            }
        },
        "test_fresh_assignment": {
            "name": "test_fresh_assignment",
            "location": 66,
            "return": [],
            "arguments": {
                "partitions": [],
                "replicas": [],
                "num_clients": []
            }
        },
        "test_add_new_clients": {
            "name": "test_add_new_clients",
            "location": 83,
            "return": [],
            "arguments": {
                "partitions": [],
                "replicas": [],
                "num_clients": [],
                "num_additional_clients": []
            }
        },
        "test_remove_clients": {
            "name": "test_remove_clients",
            "location": 112,
            "return": [],
            "arguments": {
                "partitions": [],
                "replicas": [],
                "num_clients": [],
                "num_removal_clients": []
            }
        }
    },
    "faust-master/t/meticulous/assignor/__init__.py": {},
    "faust-master/t/old/app.py": {},
    "faust-master/t/old/test_simple.py": {
        "_build_data": {
            "name": "_build_data",
            "location": 10,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        }
    },
    "faust-master/t/old/__init__.py": {},
    "faust-master/t/regression/__init__.py": {},
    "faust-master/t/regression/i323/conftest.py": {
        "app": {
            "name": "app",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i323/test_autodiscover.py": {
        "test_main": {
            "name": "test_main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i323/__init__.py": {},
    "faust-master/t/regression/i323/proj323/faust.py": {
        "create_app": {
            "name": "create_app",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i323/proj323/__init__.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i323/proj323/foo/__init__.py": {},
    "faust-master/t/regression/i323/proj323/foo/bar/__init__.py": {},
    "faust-master/t/regression/i323/proj323/foo/bar/baz/commands.py": {},
    "faust-master/t/regression/i323/proj323/foo/bar/baz/__init__.py": {},
    "faust-master/t/regression/i324/conftest.py": {
        "app": {
            "name": "app",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i324/test_autodiscover.py": {
        "test_main": {
            "name": "test_main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i324/__init__.py": {},
    "faust-master/t/regression/i324/proj324/faust.py": {
        "create_app": {
            "name": "create_app",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i324/proj324/__init__.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "faust-master/t/regression/i324/proj324/__main__.py": {},
    "faust-master/t/regression/i324/proj324/foo/test_x.py": {},
    "faust-master/t/regression/i324/proj324/foo/__init__.py": {},
    "faust-master/t/regression/i324/proj324/foo/bar/__init__.py": {},
    "faust-master/t/regression/i324/proj324/foo/bar/baz/commands.py": {},
    "faust-master/t/regression/i324/proj324/foo/bar/baz/__init__.py": {},
    "faust-master/t/stress/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 59,
            "return": [
                "faust.App"
            ],
            "arguments": {
                "name": [],
                "origin": [],
                "base": []
            }
        },
        "create_stress_app": {
            "name": "create_stress_app",
            "location": 71,
            "return": [
                "StressApp"
            ],
            "arguments": {
                "name": [],
                "origin": []
            }
        },
        "StressApp.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StressApp.add_system_check": {
            "name": "add_system_check",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "Check"
                ]
            }
        },
        "StressApp.register_stress_producer": {
            "name": "register_stress_producer",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "fun": [
                    "ProducerFun"
                ]
            }
        },
        "StressApp.system_checks": {
            "name": "system_checks",
            "location": 51,
            "return": [
                "SystemChecks"
            ],
            "arguments": {
                "self": []
            }
        },
        "StressApp.logpusher": {
            "name": "logpusher",
            "location": 55,
            "return": [
                "LogPusher"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/stress/config.py": {
        "loghandlers": {
            "name": "loghandlers",
            "location": 22,
            "return": [
                "List[SentryHandler]"
            ],
            "arguments": {}
        }
    },
    "faust-master/t/stress/killer.py": {
        "Span.seconds_to_sleep": {
            "name": "seconds_to_sleep",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chaos.iterate_over_scheduled_time": {
            "name": "iterate_over_scheduled_time",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/stress/models.py": {
        "generate_withdrawals": {
            "name": "generate_withdrawals",
            "location": 14,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "generate_withdrawals_dict": {
            "name": "generate_withdrawals_dict",
            "location": 19,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "faust-master/t/stress/producer.py": {
        "install_produce_command": {
            "name": "install_produce_command",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "faust-master/t/stress/__init__.py": {},
    "faust-master/t/stress/reports/app.py": {
        "get_reporting_topic": {
            "name": "get_reporting_topic",
            "location": 10,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "get_error_topic": {
            "name": "get_error_topic",
            "location": 14,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "get_reporting_app": {
            "name": "get_reporting_app",
            "location": 80,
            "return": [
                "DashboardApp"
            ],
            "arguments": {}
        },
        "SimpleCheck.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str"
                ]
            }
        },
        "DashboardApp.on_webserver_init": {
            "name": "on_webserver_init",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "web": []
            }
        }
    },
    "faust-master/t/stress/reports/checks.py": {
        "_transitioned_to_false": {
            "name": "_transitioned_to_false",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "previous": [
                    "bool"
                ],
                "current": [
                    "bool"
                ]
            }
        },
        "Check.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "get_value": [
                    "Callable[([], Any)]"
                ],
                "operator": [
                    "Callable[([Any, Any], bool)]"
                ]
            }
        },
        "Check.to_representation": {
            "name": "to_representation",
            "location": 54,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "severity": []
            }
        },
        "Check.asdict": {
            "name": "asdict",
            "location": 65,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.get_value": {
            "name": "get_value",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.compare": {
            "name": "compare",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "prev_value": [
                    "Any"
                ],
                "current_value": [
                    "Any"
                ]
            }
        },
        "Check.store_previous_value": {
            "name": "store_previous_value",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "current_value": []
            }
        },
        "Check.get_state_for_faults": {
            "name": "get_state_for_faults",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "faults": [
                    "int"
                ]
            }
        },
        "Check.color": {
            "name": "color",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.label": {
            "name": "label",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemChecks.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "AppT"
                ]
            }
        },
        "SystemChecks.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemChecks.pause": {
            "name": "pause",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemChecks.add": {
            "name": "add",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "Check"
                ]
            }
        },
        "SystemChecks.remove": {
            "name": "remove",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "faust-master/t/stress/reports/collector.py": {},
    "faust-master/t/stress/reports/logging.py": {
        "LogPusher.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "faust.App"
                ]
            }
        },
        "LogPusher.put": {
            "name": "put",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Error"
                ]
            }
        },
        "LogHandler.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "faust.App"
                ]
            }
        },
        "LogHandler.emit": {
            "name": "emit",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "LogHandler._emit": {
            "name": "_emit",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        }
    },
    "faust-master/t/stress/reports/models.py": {
        "Status.key": {
            "name": "key",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Status.details": {
            "name": "details",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/stress/reports/states.py": {},
    "faust-master/t/stress/reports/web.py": {},
    "faust-master/t/stress/reports/__init__.py": {},
    "faust-master/t/stress/tests/__init__.py": {},
    "faust-master/t/stress/tests/forwarder/app.py": {},
    "faust-master/t/stress/tests/forwarder/__init__.py": {},
    "faust-master/t/stress/tests/simple/app.py": {},
    "faust-master/t/stress/tests/simple/__init__.py": {},
    "faust-master/t/stress/tests/tables/app.py": {
        "PartitionsNotStarved.compare": {
            "name": "compare",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "prev_value": [],
                "current_value": []
            }
        },
        "PartitionsNotStarved.get_value": {
            "name": "get_value",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartitionsNotStarved.store_previous_value": {
            "name": "store_previous_value",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "current_value": []
            }
        }
    },
    "faust-master/t/stress/tests/tables/__init__.py": {},
    "faust-master/t/unit/conftest.py": {
        "app": {
            "name": "app",
            "location": 10,
            "return": [],
            "arguments": {
                "event_loop": [],
                "request": []
            }
        },
        "web": {
            "name": "web",
            "location": 33,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 37,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "faust-master/t/unit/test_auth.py": {
        "test_SASLCredentials.test_constructor": {
            "name": "test_constructor",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "credentials": [],
                "expected_fields": [],
                "reason": []
            }
        },
        "test_GSSAPICredentials.test_constructor": {
            "name": "test_constructor",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "credentials": [],
                "expected_fields": [],
                "reason": []
            }
        },
        "test_SSLCredentials.test_constructor": {
            "name": "test_constructor",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SSLCredentials.test_having_context": {
            "name": "test_having_context",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/test_events.py": {
        "test_Event.key": {
            "name": "key",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Event.value": {
            "name": "value",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Event.message": {
            "name": "message",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Event.event": {
            "name": "event",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Event.test_attach": {
            "name": "test_attach",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Event.test_repr": {
            "name": "test_repr",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/test_faust.py": {},
    "faust-master/t/unit/test_joins.py": {
        "test_eq_ne": {
            "name": "test_eq_ne",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/test_streams.py": {
        "test_Stream.stream": {
            "name": "stream",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test_join": {
            "name": "test_join",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test_left_join": {
            "name": "test_left_join",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test_inner_join": {
            "name": "test_inner_join",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test_outer_join": {
            "name": "test_outer_join",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test_combine__finalized": {
            "name": "test_combine__finalized",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test_group_by__finalized": {
            "name": "test_group_by__finalized",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test_through__finalized": {
            "name": "test_through__finalized",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Stream.test__set_current_event": {
            "name": "test__set_current_event",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/test_topics.py": {
        "test_Topic.topic": {
            "name": "topic",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.topic_allow_empty": {
            "name": "topic_allow_empty",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.message": {
            "name": "message",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.message_empty_value": {
            "name": "message_empty_value",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_schema__default": {
            "name": "test_schema__default",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_schema__from_schema": {
            "name": "test_schema__from_schema",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_schema_loads_key__loads_arg_optional": {
            "name": "test_schema_loads_key__loads_arg_optional",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_schema_loads_value__loads_arg_optional": {
            "name": "test_schema_loads_value__loads_arg_optional",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_schema__overriding": {
            "name": "test_schema__overriding",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_init_key_serializer_taken_from_key_type": {
            "name": "test_init_key_serializer_taken_from_key_type",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_Topic.test_on_published": {
            "name": "test_on_published",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_on_published__error": {
            "name": "test_on_published__error",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_aiter_when_iterator": {
            "name": "test_aiter_when_iterator",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_send_soon": {
            "name": "test_send_soon",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test__topic_name_or_default__str": {
            "name": "test__topic_name_or_default__str",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test__topic_name_or_default__default": {
            "name": "test__topic_name_or_default__default",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test__topic_name_or_default__channel": {
            "name": "test__topic_name_or_default__channel",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_set_pattern__raise_when_topics": {
            "name": "test_set_pattern__raise_when_topics",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_set_partitions__raise_when_zero": {
            "name": "test_set_partitions__raise_when_zero",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_derive_topic__raise_when_no_sub": {
            "name": "test_derive_topic__raise_when_no_sub",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_derive_topic__raise_if_pattern_and_prefix": {
            "name": "test_derive_topic__raise_if_pattern_and_prefix",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_get_topic_name__raise_when_pattern": {
            "name": "test_get_topic_name__raise_when_pattern",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Topic.test_get_topic_name__raise_if_multitopic": {
            "name": "test_get_topic_name__raise_if_multitopic",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/test_worker.py": {
        "CoroEq.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "CoroEq.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_Worker.worker": {
            "name": "worker",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_Worker.test_constructor": {
            "name": "test_constructor",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_Worker.test_set_sensors": {
            "name": "test_set_sensors",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_Worker.test_set_workdir": {
            "name": "test_set_workdir",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_Worker.test_on_startup_end_spinner": {
            "name": "test_on_startup_end_spinner",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_on_startup_end_spinner__no_spinner": {
            "name": "test_on_startup_end_spinner__no_spinner",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_on_startup_end_spinner__notatty": {
            "name": "test_on_startup_end_spinner__notatty",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_on_shutdown_immediately": {
            "name": "test_on_shutdown_immediately",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_on_init_dependencies": {
            "name": "test_on_init_dependencies",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "worker": [],
                "app": []
            }
        },
        "test_Worker.test_on_init_dependencies__sensors_to_app": {
            "name": "test_on_init_dependencies__sensors_to_app",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "worker": [],
                "app": []
            }
        },
        "test_Worker.test_change_workdir": {
            "name": "test_change_workdir",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_change_workdir__already_cwd": {
            "name": "test_change_workdir__already_cwd",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_autodiscover": {
            "name": "test_autodiscover",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_autodiscover__disabled": {
            "name": "test_autodiscover__disabled",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_setproctitle": {
            "name": "test_setproctitle",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "worker": [],
                "app": []
            }
        },
        "test_Worker.test_proc_ident": {
            "name": "test_proc_ident",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "worker": [],
                "app": []
            }
        },
        "test_Worker.test_proc_web_ident__unix": {
            "name": "test_proc_web_ident__unix",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "worker": [],
                "app": []
            }
        },
        "test_Worker.test_proc_web_ident__tcp": {
            "name": "test_proc_web_ident__tcp",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_on_worker_shutdown": {
            "name": "test_on_worker_shutdown",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_on_setup_root_logger": {
            "name": "test_on_setup_root_logger",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_disable_spinner_if_level_below_WARN": {
            "name": "test_disable_spinner_if_level_below_WARN",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "loglevel": [],
                "expected": [],
                "worker": []
            }
        },
        "test_Worker.test_setup_spinner_handler": {
            "name": "test_setup_spinner_handler",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_setup_spinner_handler__when_no_spinner": {
            "name": "test_setup_spinner_handler__when_no_spinner",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        }
    },
    "faust-master/t/unit/__init__.py": {},
    "faust-master/t/unit/agents/test_actor.py": {
        "FakeActor.traceback": {
            "name": "traceback",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.agent": {
            "name": "agent",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.stream": {
            "name": "stream",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.it": {
            "name": "it",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.actor": {
            "name": "actor",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.test_constructor": {
            "name": "test_constructor",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.test_cancel": {
            "name": "test_cancel",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.test_cancel__when_no_task": {
            "name": "test_cancel__when_no_task",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Actor.test_repr": {
            "name": "test_repr",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncIterableActor.test_aiter": {
            "name": "test_aiter",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AwaitableActor.test_await": {
            "name": "test_await",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/agents/test_agent.py": {
        "test_AgentService.agent": {
            "name": "agent",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentService.test_new_supervisor": {
            "name": "test_new_supervisor",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentService.test_get_supervisor_strategy": {
            "name": "test_get_supervisor_strategy",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentService.test_get_active_partitions": {
            "name": "test_get_active_partitions",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentService.test_label": {
            "name": "test_label",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.agent": {
            "name": "agent",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.isolated_agent": {
            "name": "isolated_agent",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.foo_topic": {
            "name": "foo_topic",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.agent2": {
            "name": "agent2",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_init_schema_and_channel": {
            "name": "test_init_schema_and_channel",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_init_key_type_and_channel": {
            "name": "test_init_key_type_and_channel",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_init_value_type_and_channel": {
            "name": "test_init_value_type_and_channel",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_isolated_partitions_cannot_have_concurrency": {
            "name": "test_isolated_partitions_cannot_have_concurrency",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_agent_call_reuse_stream": {
            "name": "test_agent_call_reuse_stream",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_cancel": {
            "name": "test_cancel",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_on_first_isolated_partition_assigned": {
            "name": "test_on_first_isolated_partition_assigned",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_info": {
            "name": "test_info",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_clone": {
            "name": "test_clone",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_stream__active_partitions": {
            "name": "test_stream__active_partitions",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_maybe_unwrap_reply_request": {
            "name": "test_maybe_unwrap_reply_request",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "expected": []
            }
        },
        "test_Agent.test_create_req": {
            "name": "test_create_req",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_create_req__use_reply_headers": {
            "name": "test_create_req__use_reply_headers",
            "location": 713,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_create_req__model": {
            "name": "test_create_req__model",
            "location": 729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_create_req__requires_reply_to": {
            "name": "test_create_req__requires_reply_to",
            "location": 749,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_response_class": {
            "name": "test_response_class",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected_class": []
            }
        },
        "test_Agent.test_get_strtopic__agent": {
            "name": "test_get_strtopic__agent",
            "location": 843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_get_strtopic__topic": {
            "name": "test_get_strtopic__topic",
            "location": 846,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_get_strtopic__str": {
            "name": "test_get_strtopic__str",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_get_strtopic__channel_raises": {
            "name": "test_get_strtopic__channel_raises",
            "location": 852,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_get_topic_names": {
            "name": "test_get_topic_names",
            "location": 856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_get_topic_names__channel": {
            "name": "test_get_topic_names__channel",
            "location": 860,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_repr": {
            "name": "test_repr",
            "location": 864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_channel": {
            "name": "test_channel",
            "location": 867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_prepare_channel__not_channel": {
            "name": "test_prepare_channel__not_channel",
            "location": 880,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_add_sink": {
            "name": "test_add_sink",
            "location": 884,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_channel_iterator": {
            "name": "test_channel_iterator",
            "location": 889,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_label": {
            "name": "test_label",
            "location": 899,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Agent.test_slurp.on_delegate": {
            "name": "on_delegate",
            "location": 489,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_Agent.test_slurp__headers.on_delegate": {
            "name": "on_delegate",
            "location": 527,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_Agent.test_context_calls_sink.dummy_sink": {
            "name": "dummy_sink",
            "location": 906,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "faust-master/t/unit/agents/test_manager.py": {
        "test_AgentManager.create_agent": {
            "name": "create_agent",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "topic_names": []
            }
        },
        "test_AgentManager.agents": {
            "name": "agents",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentManager.agent1": {
            "name": "agent1",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentManager.agent2": {
            "name": "agent2",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentManager.many": {
            "name": "many",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentManager.test_constructor": {
            "name": "test_constructor",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentManager.test_hashable": {
            "name": "test_hashable",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentManager.test_service_reset": {
            "name": "test_service_reset",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AgentManager.test_update_topic_index": {
            "name": "test_update_topic_index",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/agents/test_replies.py": {
        "test_ReplyPromise": {
            "name": "test_ReplyPromise",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_ReplyConsumer.c": {
            "name": "c",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ReplyConsumer.test_reply_topic": {
            "name": "test_reply_topic",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BarrierState.test_iterate__completion.se": {
            "name": "se",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/agents/__init__.py": {},
    "faust-master/t/unit/app/test_base.py": {
        "test_App.test_stream": {
            "name": "test_stream",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_new_producer": {
            "name": "test_new_producer",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_new_transport": {
            "name": "test_new_transport",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "broker_url": [],
                "broker_consumer_url": []
            }
        },
        "test_App.test_new_producer_transport": {
            "name": "test_new_producer_transport",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "broker_url": [],
                "broker_producer_url": []
            }
        },
        "test_App.test_on_rebalance_start__existing_state": {
            "name": "test_on_rebalance_start__existing_state",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_on_rebalance_return__no_state": {
            "name": "test_on_rebalance_return__no_state",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_on_rebalance_return__has_state": {
            "name": "test_on_rebalance_return__has_state",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_on_rebalance_start_end": {
            "name": "test_on_rebalance_start_end",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_trace": {
            "name": "test_trace",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_traced": {
            "name": "test_traced",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test__start_span_from_rebalancing": {
            "name": "test__start_span_from_rebalancing",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_on_rebalance_when_stopped": {
            "name": "test_on_rebalance_when_stopped",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_update_assignment": {
            "name": "test_update_assignment",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "prev": [],
                "new": [],
                "expected_revoked": [],
                "expected_assigned": []
            }
        },
        "test_App.test_worker_init": {
            "name": "test_worker_init",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_worker_init_post_autodiscover": {
            "name": "test_worker_init_post_autodiscover",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discover": {
            "name": "test_discover",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discover__disabled": {
            "name": "test_discover__disabled",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discover__unknown_module": {
            "name": "test_discover__unknown_module",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discovery_modules__bool": {
            "name": "test_discovery_modules__bool",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discovery_modules__callable": {
            "name": "test_discovery_modules__callable",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discovery_modules__list": {
            "name": "test_discovery_modules__list",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discovery_modules__list_no_origin": {
            "name": "test_discovery_modules__list_no_origin",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discovery_modules__disabled": {
            "name": "test_discovery_modules__disabled",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discovery_modules__without_origin": {
            "name": "test_discovery_modules__without_origin",
            "location": 504,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_discover_ignore": {
            "name": "test_discover_ignore",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test__on_autodiscovery_error": {
            "name": "test__on_autodiscovery_error",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_main": {
            "name": "test_main",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_channel": {
            "name": "test_channel",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_agent": {
            "name": "test_agent",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_task": {
            "name": "test_task",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_service": {
            "name": "test_service",
            "location": 765,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_is_leader": {
            "name": "test_is_leader",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_Table": {
            "name": "test_Table",
            "location": 781,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_GlobalTable": {
            "name": "test_GlobalTable",
            "location": 785,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_SetTable": {
            "name": "test_SetTable",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_SetGlobalTable": {
            "name": "test_SetGlobalTable",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_page": {
            "name": "test_page",
            "location": 799,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_page__with_cors_options": {
            "name": "test_page__with_cors_options",
            "location": 811,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_page__view_class_but_not_view": {
            "name": "test_page__view_class_but_not_view",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_table_route__compat_shard_param": {
            "name": "test_table_route__compat_shard_param",
            "location": 898,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_table_route__query_param_and_shard_param": {
            "name": "test_table_route__query_param_and_shard_param",
            "location": 905,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_table_route__missing_param": {
            "name": "test_table_route__missing_param",
            "location": 913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_command": {
            "name": "test_command",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_command__with_base": {
            "name": "test_command__with_base",
            "location": 925,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_Worker": {
            "name": "test_Worker",
            "location": 964,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_create_directories": {
            "name": "test_create_directories",
            "location": 970,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_repr": {
            "name": "test_repr",
            "location": 989,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_repr__unfinialized": {
            "name": "test_repr__unfinialized",
            "location": 992,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_monitor": {
            "name": "test_monitor",
            "location": 996,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_fetcher": {
            "name": "test_fetcher",
            "location": 1016,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_reply_consumer": {
            "name": "test_reply_consumer",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_label": {
            "name": "test_label",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_cache": {
            "name": "test_cache",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_http_client": {
            "name": "test_http_client",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_leader_assignor": {
            "name": "test_leader_assignor",
            "location": 1057,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppConfiguration.test_conf__before_finalized": {
            "name": "test_conf__before_finalized",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppConfiguration.test_set_conf": {
            "name": "test_set_conf",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppConfiguration.test_config_From_object": {
            "name": "test_config_From_object",
            "location": 1085,
            "return": [],
            "arguments": {
                "self": [],
                "config_source": []
            }
        },
        "test_AppConfiguration.test_finalize__no_id": {
            "name": "test_finalize__no_id",
            "location": 1114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppConfiguration.test_load_settings_from_source__no_attribute": {
            "name": "test_load_settings_from_source__no_attribute",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppConfiguration.test_load_settings_from_source__import_error": {
            "name": "test_load_settings_from_source__import_error",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppConfiguration.test_load_settings_with_compat_and_new_settings": {
            "name": "test_load_settings_with_compat_and_new_settings",
            "location": 1132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_App.test_traced.foo": {
            "name": "foo",
            "location": 261,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "test_App.test_timer__sleep_stopped.on_sleep": {
            "name": "on_sleep",
            "location": 650,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "test_App.test_timer__on_leader_not_leader.on_sleep": {
            "name": "on_sleep",
            "location": 667,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "test_App.test_timer__on_leader_is_leader.on_sleep": {
            "name": "on_sleep",
            "location": 689,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "test_App.test_crontab__on_leader_not_leader.on_sleep": {
            "name": "on_sleep",
            "location": 734,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "test_App.test_crontab__on_leader_is_leader.on_sleep": {
            "name": "on_sleep",
            "location": 756,
            "return": [],
            "arguments": {
                "seconds": []
            }
        }
    },
    "faust-master/t/unit/app/test_router.py": {
        "test_Router.assignor": {
            "name": "assignor",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Router.router": {
            "name": "router",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Router.test_constructor": {
            "name": "test_constructor",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Router.test__get_serialized_key": {
            "name": "test__get_serialized_key",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Router.test_key_store": {
            "name": "test_key_store",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Router.test_table_metadata": {
            "name": "test_table_metadata",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Router.test_tables_metadata": {
            "name": "test_tables_metadata",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/app/test_service.py": {
        "test_AppService.test_on_init_dependencies": {
            "name": "test_on_init_dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppService.test_components_client": {
            "name": "test_components_client",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppService.test_components_producer_only": {
            "name": "test_components_producer_only",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppService.test_components_server": {
            "name": "test_components_server",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppService.test_prepare_subservice": {
            "name": "test_prepare_subservice",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppService.test_prepare_subservice__class": {
            "name": "test_prepare_subservice__class",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppService.test_label": {
            "name": "test_label",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppService.test_on_started_init_extra_tasks.t1": {
            "name": "t1",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_AppService.test_on_started_init_extra_tasks.t2": {
            "name": "t2",
            "location": 111,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/cli/conftest.py": {
        "context": {
            "name": "context",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/cli/test_base.py": {
        "test_call_command": {
            "name": "test_call_command",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_call_command__no_exit": {
            "name": "test_call_command__no_exit",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_call_command__custom_ins": {
            "name": "test_call_command__custom_ins",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_compat_option": {
            "name": "test_compat_option",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_find_app": {
            "name": "test_find_app",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_find_app__attribute_error": {
            "name": "test_find_app__attribute_error",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_find_app__app_is_module": {
            "name": "test_find_app__app_is_module",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_find_app__app_is_module_but_has_app": {
            "name": "test_find_app__app_is_module_but_has_app",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "test__prepare_cli": {
            "name": "test__prepare_cli",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_argument.test_repr": {
            "name": "test_repr",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_option.test_repr": {
            "name": "test_repr",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Group.group": {
            "name": "group",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Group.test_get_help": {
            "name": "test_get_help",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Group.test_get_usage": {
            "name": "test_get_usage",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Group.test_maybe_import_app": {
            "name": "test_maybe_import_app",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "argv": [],
                "expected_chdir": [],
                "expected_app": []
            }
        },
        "test_Group.test_maybe_import_app__missing_argument": {
            "name": "test_maybe_import_app__missing_argument",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.ctx": {
            "name": "ctx",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.command": {
            "name": "command",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_parse": {
            "name": "test_parse",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test__parse": {
            "name": "test__parse",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test__call__": {
            "name": "test__call__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_run_using_worker": {
            "name": "test_run_using_worker",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_on_worker_created": {
            "name": "test_on_worker_created",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_as_service": {
            "name": "test_as_service",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_worker_for_service": {
            "name": "test_worker_for_service",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test__Worker": {
            "name": "test__Worker",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_tabulate__when_text": {
            "name": "test_tabulate__when_text",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_tabulate__when_json": {
            "name": "test_tabulate__when_json",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_tabulate_json": {
            "name": "test_tabulate_json",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_tabulate_json__headers": {
            "name": "test_tabulate_json__headers",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_table": {
            "name": "test_table",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_color": {
            "name": "test_color",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_dark": {
            "name": "test_dark",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_bold": {
            "name": "test_bold",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_bold_tail": {
            "name": "test_bold_tail",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_table_wrap": {
            "name": "test_table_wrap",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_say": {
            "name": "test_say",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_carp": {
            "name": "test_carp",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_dumps": {
            "name": "test_dumps",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_loglevel": {
            "name": "test_loglevel",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_blocking_timeout": {
            "name": "test_blocking_timeout",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Command.test_console_port": {
            "name": "test_console_port",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.ctx": {
            "name": "ctx",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.command": {
            "name": "command",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_finalize_app__str": {
            "name": "test_finalize_app__str",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_finalize_app__concrete": {
            "name": "test_finalize_app__concrete",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_blocking_timeout": {
            "name": "test_blocking_timeout",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_app_from_str": {
            "name": "test_app_from_str",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_app_from_str__empty": {
            "name": "test_app_from_str__empty",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_finalize_concrete_app": {
            "name": "test_finalize_concrete_app",
            "location": 545,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_to_key": {
            "name": "test_to_key",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_to_value": {
            "name": "test_to_value",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_to_model": {
            "name": "test_to_model",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_to_model__bytes": {
            "name": "test_to_model__bytes",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_import_relative_to_app": {
            "name": "test_import_relative_to_app",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_import_relative_to_app__no_origin": {
            "name": "test_import_relative_to_app__no_origin",
            "location": 599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_import_relative_to_app__with_origin": {
            "name": "test_import_relative_to_app__with_origin",
            "location": 607,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_import_relative_to_app__with_origin_l1": {
            "name": "test_import_relative_to_app__with_origin_l1",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_import_relative_to_app__with_origin_l2": {
            "name": "test_import_relative_to_app__with_origin_l2",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_to_topic__missing": {
            "name": "test_to_topic__missing",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_to_topic__agent_prefix": {
            "name": "test_to_topic__agent_prefix",
            "location": 647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_to_topic__topic_name": {
            "name": "test_to_topic__topic_name",
            "location": 653,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_abbreviate_fqdn": {
            "name": "test_abbreviate_fqdn",
            "location": 659,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_abbreviate_fqdn__no_origin": {
            "name": "test_abbreviate_fqdn__no_origin",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AppCommand.test_from_handler_no_params": {
            "name": "test_from_handler_no_params",
            "location": 673,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/cli/test_clean_versions.py": {
        "test_clean_versions.command": {
            "name": "command",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clean_versions.test_remove_old_versiondirs": {
            "name": "test_remove_old_versiondirs",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/cli/test_completion.py": {
        "test_completion.command": {
            "name": "command",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/cli/test_env.py": {
        "test_getenv_not_set": {
            "name": "test_getenv_not_set",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/cli/test_params.py": {
        "test_CaseInsensitiveChoice": {
            "name": "test_CaseInsensitiveChoice",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_TCPPort": {
            "name": "test_TCPPort",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_URLParam": {
            "name": "test_URLParam",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/cli/__init__.py": {},
    "faust-master/t/unit/fixups/test_base.py": {
        "test_Fixup.test_init": {
            "name": "test_init",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_enabled": {
            "name": "test_enabled",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_autodiscover_modules": {
            "name": "test_autodiscover_modules",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_on_worker_init": {
            "name": "test_on_worker_init",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/fixups/test_django.py": {
        "test_Fixup.fixup": {
            "name": "fixup",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_fixup_env_enabled": {
            "name": "test_fixup_env_enabled",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_fixup_env_enabled_no_django": {
            "name": "test_fixup_env_enabled_no_django",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_fixup_env_disabled": {
            "name": "test_fixup_env_disabled",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_wait_for_django_calls_django_setup": {
            "name": "test_wait_for_django_calls_django_setup",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_autodiscover_modules": {
            "name": "test_autodiscover_modules",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_on_worker_init": {
            "name": "test_on_worker_init",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_apps": {
            "name": "test_apps",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fixup.test_settings": {
            "name": "test_settings",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/fixups/__init__.py": {},
    "faust-master/t/unit/livecheck/conftest.py": {
        "livecheck": {
            "name": "livecheck",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "execution": {
            "name": "execution",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "case": {
            "name": "case",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "runner": {
            "name": "runner",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "current_test_stack": {
            "name": "current_test_stack",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "current_execution_stack": {
            "name": "current_execution_stack",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/livecheck/test_app.py": {
        "test_LiveCheckSensor.sensor": {
            "name": "sensor",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheckSensor.test_on_stream_event__no_test": {
            "name": "test_on_stream_event__no_test",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheckSensor.test_on_stream_event": {
            "name": "test_on_stream_event",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_constructor": {
            "name": "test_constructor",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "kwarg": [],
                "value": [],
                "expected_value": []
            }
        },
        "test_LiveCheck.test_current_test": {
            "name": "test_current_test",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test__can_resolve": {
            "name": "test__can_resolve",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "livecheck": []
            }
        },
        "test_LiveCheck.test_on_produce_attach_test_headers": {
            "name": "test_on_produce_attach_test_headers",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_on_produce_attach_test_headers__no_test": {
            "name": "test_on_produce_attach_test_headers__no_test",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_on_produce_attach_test_headers__missing": {
            "name": "test_on_produce_attach_test_headers__missing",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_case_decorator": {
            "name": "test_case_decorator",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_add_case": {
            "name": "test_add_case",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test__install_bus_agent": {
            "name": "test__install_bus_agent",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test__install_test_execution_agent": {
            "name": "test__install_test_execution_agent",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_prepare_case_name": {
            "name": "test_prepare_case_name",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "origin": [],
                "expected": []
            }
        },
        "test_LiveCheck.test_prepare_case_name__no_origin": {
            "name": "test_prepare_case_name__no_origin",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_bus": {
            "name": "test_bus",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_pending_tests": {
            "name": "test_pending_tests",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_LiveCheck.test_reports": {
            "name": "test_reports",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/livecheck/test_case.py": {
        "test_Case.test_constructor": {
            "name": "test_constructor",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [],
                "value": [],
                "expected": []
            }
        },
        "test_Case.test_now": {
            "name": "test_now",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Case.frozen_monotonic": {
            "name": "frozen_monotonic",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Case._patch_monotonic": {
            "name": "_patch_monotonic",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Case.test__maybe_recover_from_failed_state": {
            "name": "test__maybe_recover_from_failed_state",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "initial_state": [],
                "now": [],
                "failed": [],
                "expected_state": []
            }
        },
        "test_Case.test_failed_longer_than": {
            "name": "test_failed_longer_than",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "now": [],
                "failed": [],
                "arg": [],
                "expected": []
            }
        },
        "test_Case.test_seconds_since_last_fail": {
            "name": "test_seconds_since_last_fail",
            "location": 450,
            "return": [],
            "arguments": {
                "self": [],
                "now": [],
                "failed": [],
                "expected": []
            }
        },
        "test_Case.seconds_since_last_fail": {
            "name": "seconds_since_last_fail",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "case": [],
                "now": [],
                "failed": []
            }
        },
        "test_Case.test_current_test": {
            "name": "test_current_test",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Case.test_current_execution": {
            "name": "test_current_execution",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Case.test_label": {
            "name": "test_label",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Case.test__sampler.on_sample": {
            "name": "on_sample",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_Case.test__send_frequency.on_make_fake_request": {
            "name": "on_make_fake_request",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "test_Case.test__send_frequency.on_is_leader": {
            "name": "on_is_leader",
            "location": 316,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/livecheck/test_locals.py": {
        "test_current_execution": {
            "name": "test_current_execution",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/livecheck/test_models.py": {
        "test_State.test_is_ok": {
            "name": "test_is_ok",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_ident": {
            "name": "test_ident",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_short_ident": {
            "name": "test_short_ident",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_now": {
            "name": "test_now",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_human_date__issued_today": {
            "name": "test_human_date__issued_today",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_human_date__issued_before_today": {
            "name": "test_human_date__issued_before_today",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_was_issued_today": {
            "name": "test_was_issued_today",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_was_issued_today__not": {
            "name": "test_was_issued_today__not",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_is_expired": {
            "name": "test_is_expired",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestExecution.test_is_expired__not": {
            "name": "test_is_expired__not",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/livecheck/test_runners.py": {
        "test_TestRunner.test__prepare_args": {
            "name": "test__prepare_args",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestRunner.test__prepare_kwargs": {
            "name": "test__prepare_kwargs",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestRunner.test_log_info": {
            "name": "test_log_info",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestRunner.test_log_info__realtime": {
            "name": "test_log_info__realtime",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestRunner.test_end": {
            "name": "test_end",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TestRunner.test__flush_logs": {
            "name": "test__flush_logs",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/livecheck/test_signals.py": {
        "test_BaseSignal.signal": {
            "name": "signal",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BaseSignal.test__set_name__": {
            "name": "test__set_name__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BaseSignal.test__wakeup_resolvers": {
            "name": "test__wakeup_resolvers",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BaseSignal.test__get_current_value": {
            "name": "test__get_current_value",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BaseSignal.test__index_key": {
            "name": "test__index_key",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BaseSignal.test_repr": {
            "name": "test_repr",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Signal.signal": {
            "name": "signal",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Signal.test__verify_event": {
            "name": "test__verify_event",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Signal.test__wait_for_message_by_key__no_rem.on_get_value": {
            "name": "on_get_value",
            "location": 164,
            "return": [],
            "arguments": {
                "k": []
            }
        },
        "test_Signal.test__wait_for_message_by_key__no_timeout.on_get_value": {
            "name": "on_get_value",
            "location": 189,
            "return": [],
            "arguments": {
                "k": []
            }
        }
    },
    "faust-master/t/unit/livecheck/__init__.py": {},
    "faust-master/t/unit/livecheck/patches/test_aiohttp.py": {},
    "faust-master/t/unit/models/test_fields.py": {
        "test_ValidationError.field": {
            "name": "field",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ValidationError.error": {
            "name": "error",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ValidationError.test_repr": {
            "name": "test_repr",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ValidationError.test_str": {
            "name": "test_str",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FieldDescriptor.test_validate": {
            "name": "test_validate",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BooleanField.model": {
            "name": "model",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BooleanField.field": {
            "name": "field",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BooleanField._new_field": {
            "name": "_new_field",
            "location": 54,
            "return": [
                "BooleanField"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "required": [
                    "bool"
                ]
            }
        },
        "test_BooleanField.test_validate_bool": {
            "name": "test_validate_bool",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_BooleanField.test_validate_other": {
            "name": "test_validate_other",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_BooleanField.test_prepare_value__when_coerce": {
            "name": "test_prepare_value__when_coerce",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected": []
            }
        },
        "test_BooleanField.test_prepare_value__no_coerce": {
            "name": "test_prepare_value__no_coerce",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DecimalField.test_init_options": {
            "name": "test_init_options",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DecimalField.test_infinite": {
            "name": "test_infinite",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_DecimalField.test_max_decimal_places__good": {
            "name": "test_max_decimal_places__good",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "places": [],
                "digits": []
            }
        },
        "test_DecimalField.test_max_decimal_places__bad": {
            "name": "test_max_decimal_places__bad",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_DecimalField.test_max_digits__bad": {
            "name": "test_max_digits__bad",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_BytesField.test_init_options": {
            "name": "test_init_options",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BytesField.test_prepare_value": {
            "name": "test_prepare_value",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "coerce": [],
                "trim": [],
                "expected_result": []
            }
        }
    },
    "faust-master/t/unit/models/test_tags.py": {
        "test_Sensitive.typ": {
            "name": "typ",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensitive.v": {
            "name": "v",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensitive.test_repr": {
            "name": "test_repr",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensitive.test_str": {
            "name": "test_str",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensitive.test_nested": {
            "name": "test_nested",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Secret.typ": {
            "name": "typ",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Secret.test_str": {
            "name": "test_str",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/models/__init__.py": {},
    "faust-master/t/unit/sensors/test_base.py": {
        "message": {
            "name": "message",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "stream": {
            "name": "stream",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "event": {
            "name": "event",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "topic": {
            "name": "topic",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "table": {
            "name": "table",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "producer": {
            "name": "producer",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "assignor": {
            "name": "assignor",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "view": {
            "name": "view",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "req": {
            "name": "req",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "response": {
            "name": "response",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_Sensor.sensor": {
            "name": "sensor",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_message_in": {
            "name": "test_on_message_in",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_stream_event_in": {
            "name": "test_on_stream_event_in",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_stream_event_out": {
            "name": "test_on_stream_event_out",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_message_out": {
            "name": "test_on_message_out",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_topic_buffer_full": {
            "name": "test_on_topic_buffer_full",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_table_get": {
            "name": "test_on_table_get",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_table_set": {
            "name": "test_on_table_set",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_table_del": {
            "name": "test_on_table_del",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_commit_initiated": {
            "name": "test_on_commit_initiated",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_commit_completed": {
            "name": "test_on_commit_completed",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_send_initiated": {
            "name": "test_on_send_initiated",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_send_completed": {
            "name": "test_on_send_completed",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_assignment": {
            "name": "test_on_assignment",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_rebalance": {
            "name": "test_on_rebalance",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_web_request": {
            "name": "test_on_web_request",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_on_send_error": {
            "name": "test_on_send_error",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Sensor.test_asdict": {
            "name": "test_asdict",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.sensor": {
            "name": "sensor",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.sensors": {
            "name": "sensors",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_remove": {
            "name": "test_remove",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_message_in": {
            "name": "test_on_message_in",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_stream_event_in_out": {
            "name": "test_on_stream_event_in_out",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_topic_buffer_full": {
            "name": "test_on_topic_buffer_full",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_message_out": {
            "name": "test_on_message_out",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_table_get": {
            "name": "test_on_table_get",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_table_set": {
            "name": "test_on_table_set",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_table_del": {
            "name": "test_on_table_del",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_commit": {
            "name": "test_on_commit",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_send": {
            "name": "test_on_send",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_assignment": {
            "name": "test_on_assignment",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_rebalance": {
            "name": "test_on_rebalance",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_on_web_request": {
            "name": "test_on_web_request",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SensorDelegate.test_repr": {
            "name": "test_repr",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/sensors/test_datadog.py": {
        "dogstatsd": {
            "name": "dogstatsd",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "statsd": {
            "name": "statsd",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_DatadogStatsClient.client": {
            "name": "client",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogStatsClient.test_incr": {
            "name": "test_incr",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogStatsClient.test_decr": {
            "name": "test_decr",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogStatsClient.test_timed": {
            "name": "test_timed",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogStatsClient.test_histogram": {
            "name": "test_histogram",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.time": {
            "name": "time",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.mon": {
            "name": "mon",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.stream": {
            "name": "stream",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.event": {
            "name": "event",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.table": {
            "name": "table",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.increment_call": {
            "name": "increment_call",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "test_DatadogMonitor.test_raises_if_datadog_not_installed": {
            "name": "test_raises_if_datadog_not_installed",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_statsd": {
            "name": "test_statsd",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_message_in_out": {
            "name": "test_on_message_in_out",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_stream_event_in_out": {
            "name": "test_on_stream_event_in_out",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_table_get": {
            "name": "test_on_table_get",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_table_set": {
            "name": "test_on_table_set",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_table_del": {
            "name": "test_on_table_del",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_commit_completed": {
            "name": "test_on_commit_completed",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_send_initiated_completed": {
            "name": "test_on_send_initiated_completed",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_assignment_start_completed": {
            "name": "test_on_assignment_start_completed",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_assignment_start_error": {
            "name": "test_on_assignment_start_error",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_web_request": {
            "name": "test_on_web_request",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_web_request__None_status": {
            "name": "test_on_web_request__None_status",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.assert_on_web_request": {
            "name": "assert_on_web_request",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "mon": [],
                "response": [],
                "expected_status": []
            }
        },
        "test_DatadogMonitor.test_on_rebalance": {
            "name": "test_on_rebalance",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_count": {
            "name": "test_count",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_on_tp_commit": {
            "name": "test_on_tp_commit",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_DatadogMonitor.test_track_tp_end_offsets": {
            "name": "test_track_tp_end_offsets",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/sensors/test_monitor.py": {
        "test_Monitor.time": {
            "name": "time",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.message": {
            "name": "message",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.stream": {
            "name": "stream",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.topic": {
            "name": "topic",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.event": {
            "name": "event",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.table": {
            "name": "table",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.mon": {
            "name": "mon",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.create_monitor": {
            "name": "create_monitor",
            "location": 50,
            "return": [
                "Monitor"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.create_populated_monitor": {
            "name": "create_populated_monitor",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "messages_active": [],
                "messages_received_total": [],
                "messages_sent": [],
                "messages_s": [],
                "messages_received_by_topic": [],
                "events_active": [],
                "events_total": [],
                "events_s": [],
                "events_runtime_avg": [],
                "events_by_task": [],
                "events_by_stream": [],
                "commit_latency": [],
                "send_latency": [],
                "topic_buffer_full": []
            }
        },
        "test_Monitor.test_init_max_avg_history": {
            "name": "test_init_max_avg_history",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_max_avg_history__default": {
            "name": "test_init_max_avg_history__default",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_max_commit_latency_history": {
            "name": "test_init_max_commit_latency_history",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_max_commit_latency_history__default": {
            "name": "test_init_max_commit_latency_history__default",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_max_send_latency_history": {
            "name": "test_init_max_send_latency_history",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_max_send_latency_history__default": {
            "name": "test_init_max_send_latency_history__default",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_max_assignment_latency_history": {
            "name": "test_init_max_assignment_latency_history",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_max_assignment_latency_history__default": {
            "name": "test_init_max_assignment_latency_history__default",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_init_rebalances": {
            "name": "test_init_rebalances",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_asdict": {
            "name": "test_asdict",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_message_in": {
            "name": "test_on_message_in",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_stream_event_in": {
            "name": "test_on_stream_event_in",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_stream_event_out": {
            "name": "test_on_stream_event_out",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_stream_event_out__missing_state": {
            "name": "test_on_stream_event_out__missing_state",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_topic_buffer_full": {
            "name": "test_on_topic_buffer_full",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_message_out": {
            "name": "test_on_message_out",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_table_get": {
            "name": "test_on_table_get",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_table_set": {
            "name": "test_on_table_set",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_table_del": {
            "name": "test_on_table_del",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_commit_initiated": {
            "name": "test_on_commit_initiated",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_commit_completed": {
            "name": "test_on_commit_completed",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_send_initiated": {
            "name": "test_on_send_initiated",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_send_completed": {
            "name": "test_on_send_completed",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_send_error": {
            "name": "test_on_send_error",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_assignment_start": {
            "name": "test_on_assignment_start",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_assignment_completed": {
            "name": "test_on_assignment_completed",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_assignment_error": {
            "name": "test_on_assignment_error",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_rebalance_start": {
            "name": "test_on_rebalance_start",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_rebalance_return": {
            "name": "test_on_rebalance_return",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_rebalance_end": {
            "name": "test_on_rebalance_end",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_web_request_start": {
            "name": "test_on_web_request_start",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_web_request_end": {
            "name": "test_on_web_request_end",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_web_request_end__None_response": {
            "name": "test_on_web_request_end__None_response",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.assert_on_web_request_end": {
            "name": "assert_on_web_request_end",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "mon": [],
                "time": [],
                "app": [],
                "response": [],
                "expected_status": []
            }
        },
        "test_Monitor.test_TableState_asdict": {
            "name": "test_TableState_asdict",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_on_tp_commit": {
            "name": "test_on_tp_commit",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_track_tp_end_offsets": {
            "name": "test_track_tp_end_offsets",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test__sample": {
            "name": "test__sample",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Monitor.test_service_sampler.on_sample": {
            "name": "on_sample",
            "location": 402,
            "return": [],
            "arguments": {
                "prev_events": [],
                "prev_messages": []
            }
        }
    },
    "faust-master/t/unit/sensors/test_prometheus.py": {
        "test_PrometheusMonitor.time": {
            "name": "time",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.prometheus_client": {
            "name": "prometheus_client",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "counter": [],
                "gauge": [],
                "histogram": [],
                "time": []
            }
        },
        "test_PrometheusMonitor.stream": {
            "name": "stream",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.event": {
            "name": "event",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.table": {
            "name": "table",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.response": {
            "name": "response",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.view": {
            "name": "view",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_prometheus_client_not_installed": {
            "name": "test_prometheus_client_not_installed",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "monkeypatch": []
            }
        },
        "test_PrometheusMonitor.test_on_message_in_out": {
            "name": "test_on_message_in_out",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_stream_event_in_out": {
            "name": "test_on_stream_event_in_out",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_table_get": {
            "name": "test_on_table_get",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "test_PrometheusMonitor.test_on_table_set": {
            "name": "test_on_table_set",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "test_PrometheusMonitor.test_on_table_del": {
            "name": "test_on_table_del",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "test_PrometheusMonitor.test_on_commit_completed": {
            "name": "test_on_commit_completed",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_send_initiated_completed": {
            "name": "test_on_send_initiated_completed",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_assignment_start_completed": {
            "name": "test_on_assignment_start_completed",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_assignment_start_failed": {
            "name": "test_on_assignment_start_failed",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_rebalance": {
            "name": "test_on_rebalance",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_web_request": {
            "name": "test_on_web_request",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "view": []
            }
        },
        "test_PrometheusMonitor.test_on_web_request_none_response": {
            "name": "test_on_web_request_none_response",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "test_PrometheusMonitor.assert_on_web_request": {
            "name": "assert_on_web_request",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "view": [],
                "expected_status": []
            }
        },
        "test_PrometheusMonitor.test_count": {
            "name": "test_count",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_on_tp_commit": {
            "name": "test_on_tp_commit",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_PrometheusMonitor.test_track_tp_end_offsets": {
            "name": "test_track_tp_end_offsets",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/sensors/test_statsd.py": {
        "test_StatsdMonitor.time": {
            "name": "time",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.statsd": {
            "name": "statsd",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.stream": {
            "name": "stream",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.event": {
            "name": "event",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.table": {
            "name": "table",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.req": {
            "name": "req",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.response": {
            "name": "response",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.view": {
            "name": "view",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.mon": {
            "name": "mon",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_statsd": {
            "name": "test_statsd",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_raises_if_statsd_not_installed": {
            "name": "test_raises_if_statsd_not_installed",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_message_in_out": {
            "name": "test_on_message_in_out",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_stream_event_in_out": {
            "name": "test_on_stream_event_in_out",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_table_get": {
            "name": "test_on_table_get",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_table_set": {
            "name": "test_on_table_set",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_table_del": {
            "name": "test_on_table_del",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_commit_completed": {
            "name": "test_on_commit_completed",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_send_initiated_completed": {
            "name": "test_on_send_initiated_completed",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_assignment_start_completed": {
            "name": "test_on_assignment_start_completed",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_assignment_start_failed": {
            "name": "test_on_assignment_start_failed",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_rebalance": {
            "name": "test_on_rebalance",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_web_request": {
            "name": "test_on_web_request",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_web_request__None_response": {
            "name": "test_on_web_request__None_response",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.assert_on_web_request": {
            "name": "assert_on_web_request",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "mon": [],
                "request": [],
                "response": [],
                "view": [],
                "expected_status": []
            }
        },
        "test_StatsdMonitor.test_count": {
            "name": "test_count",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_on_tp_commit": {
            "name": "test_on_tp_commit",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_StatsdMonitor.test_track_tp_end_offsets": {
            "name": "test_track_tp_end_offsets",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/sensors/__init__.py": {},
    "faust-master/t/unit/serializers/test_codecs.py": {
        "test_interface": {
            "name": "test_interface",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_json_subset": {
            "name": "test_json_subset",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "codec": [
                    "str"
                ]
            }
        },
        "test_missing_yaml_library": {
            "name": "test_missing_yaml_library",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary": {
            "name": "test_binary",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "bytes"
                ]
            }
        },
        "test_combinators": {
            "name": "test_combinators",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "test_get_codec": {
            "name": "test_get_codec",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_register": {
            "name": "test_register",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_raw": {
            "name": "test_raw",
            "location": 74,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/serializers/__init__.py": {},
    "faust-master/t/unit/stores/test_base.py": {
        "MyStore.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MyStore.__setitem__": {
            "name": "__setitem__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "MyStore.__delitem__": {
            "name": "__delitem__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MyStore.__iter__": {
            "name": "__iter__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyStore.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyStore.apply_changelog_batch": {
            "name": "apply_changelog_batch",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyStore.reset_state": {
            "name": "reset_state",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.store": {
            "name": "store",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_persisted_offset": {
            "name": "test_persisted_offset",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_set_persisted_offset": {
            "name": "test_set_persisted_offset",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_encode_key": {
            "name": "test_encode_key",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_encode_key__cannot_be_None": {
            "name": "test_encode_key__cannot_be_None",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_encode_value": {
            "name": "test_encode_value",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_decode_key": {
            "name": "test_decode_key",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_decode_value": {
            "name": "test_decode_value",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_repr": {
            "name": "test_repr",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_label": {
            "name": "test_label",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySerializedStore.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySerializedStore._get": {
            "name": "_get",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MySerializedStore._set": {
            "name": "_set",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "MySerializedStore._del": {
            "name": "_del",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MySerializedStore._iterkeys": {
            "name": "_iterkeys",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySerializedStore._itervalues": {
            "name": "_itervalues",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySerializedStore._iteritems": {
            "name": "_iteritems",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySerializedStore._size": {
            "name": "_size",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySerializedStore._contains": {
            "name": "_contains",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MySerializedStore._clear": {
            "name": "_clear",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySerializedStore.reset_state": {
            "name": "reset_state",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SerializedStore.store": {
            "name": "store",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SerializedStore.test_apply_changelog_batch": {
            "name": "test_apply_changelog_batch",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SerializedStore.test_apply_changelog_batch__delete_None_value": {
            "name": "test_apply_changelog_batch__delete_None_value",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SerializedStore.test_apply_changelog_batch__key_is_None": {
            "name": "test_apply_changelog_batch__key_is_None",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SerializedStore.test_setitem__getitem__delitem": {
            "name": "test_setitem__getitem__delitem",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/stores/test_memory.py": {
        "test_Store.store": {
            "name": "store",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_clear": {
            "name": "test_clear",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_apply_changelog_batch": {
            "name": "test_apply_changelog_batch",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_apply_changelog_batch__deletes_key_for_None_value": {
            "name": "test_apply_changelog_batch__deletes_key_for_None_value",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.mock_event_to_key_value": {
            "name": "mock_event_to_key_value",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "test_Store.mock_event": {
            "name": "mock_event",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "test_Store.mock_to_key_value": {
            "name": "mock_to_key_value",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "test_Store.test_persisted_offset": {
            "name": "test_persisted_offset",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_reset_state": {
            "name": "test_reset_state",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/stores/test_rocksdb.py": {
        "MockIterator.from_values": {
            "name": "from_values",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "MockIterator.__iter__": {
            "name": "__iter__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_RocksDBOptions.test_init": {
            "name": "test_init",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_RocksDBOptions.test_defaults": {
            "name": "test_defaults",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_RocksDBOptions.test_open": {
            "name": "test_open",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.table": {
            "name": "table",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.rocks": {
            "name": "rocks",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.no_rocks": {
            "name": "no_rocks",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.store": {
            "name": "store",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.db_for_partition": {
            "name": "db_for_partition",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_default_key_index_size": {
            "name": "test_default_key_index_size",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_set_key_index_size": {
            "name": "test_set_key_index_size",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_no_rocksdb": {
            "name": "test_no_rocksdb",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_url_without_path_adds_table_name": {
            "name": "test_url_without_path_adds_table_name",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_url_having_path": {
            "name": "test_url_having_path",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_init": {
            "name": "test_init",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_persisted_offset": {
            "name": "test_persisted_offset",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_set_persisted_offset": {
            "name": "test_set_persisted_offset",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_apply_changelog_batch": {
            "name": "test_apply_changelog_batch",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.current_event": {
            "name": "current_event",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__set": {
            "name": "test__set",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_db_for_partition": {
            "name": "test_db_for_partition",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_open_for_partition": {
            "name": "test_open_for_partition",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__get__missing": {
            "name": "test__get__missing",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__get": {
            "name": "test__get",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__get__dbvalue_is_None": {
            "name": "test__get__dbvalue_is_None",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_get_bucket_for_key__is_in_index": {
            "name": "test_get_bucket_for_key__is_in_index",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_get_bucket_for_key__no_dbs": {
            "name": "test_get_bucket_for_key__no_dbs",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.new_db": {
            "name": "new_db",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "exists": []
            }
        },
        "test_Store.test_get_bucket_for_key__not_in_index": {
            "name": "test_get_bucket_for_key__not_in_index",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__del": {
            "name": "test__del",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_revoke_partitions": {
            "name": "test_revoke_partitions",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__contains": {
            "name": "test__contains",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__dbs_for_key": {
            "name": "test__dbs_for_key",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__dbs_for_actives": {
            "name": "test__dbs_for_actives",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__size": {
            "name": "test__size",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test__iterkeys": {
            "name": "test__iterkeys",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store._setup_keys": {
            "name": "_setup_keys",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store._setup_keys_db": {
            "name": "_setup_keys_db",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "values": [
                    "List[bytes]"
                ]
            }
        },
        "test_Store.test__itervalues": {
            "name": "test__itervalues",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store._setup_items": {
            "name": "_setup_items",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store._setup_items_db": {
            "name": "_setup_items_db",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "values": [
                    "List[Tuple[(bytes, bytes)]]"
                ]
            }
        },
        "test_Store.test__iteritems": {
            "name": "test__iteritems",
            "location": 535,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_clear": {
            "name": "test_clear",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_reset_state": {
            "name": "test_reset_state",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Store.test_apply_changelog_batch.new_event": {
            "name": "new_event",
            "location": 160,
            "return": [
                "Mock"
            ],
            "arguments": {
                "name": [],
                "tp": [
                    "TP"
                ],
                "offset": [],
                "key": [],
                "value": []
            }
        },
        "test_Store.test_open_db_for_partition_retries_recovers.on_call": {
            "name": "on_call",
            "location": 394,
            "return": [],
            "arguments": {
                "partition": []
            }
        }
    },
    "faust-master/t/unit/stores/__init__.py": {},
    "faust-master/t/unit/tables/test_base.py": {
        "MyTable.__post_init__": {
            "name": "__post_init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyTable._has_key": {
            "name": "_has_key",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MyTable._get_key": {
            "name": "_get_key",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MyTable._set_key": {
            "name": "_set_key",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "MyTable._del_key": {
            "name": "_del_key",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MyTable.hopping": {
            "name": "hopping",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyTable.tumbling": {
            "name": "tumbling",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyTable.using_window": {
            "name": "using_window",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyTable.as_ansitable": {
            "name": "as_ansitable",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.table": {
            "name": "table",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_key_type_bytes_implies_raw_serializer": {
            "name": "test_key_type_bytes_implies_raw_serializer",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_hash": {
            "name": "test_hash",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_info": {
            "name": "test_info",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_persisted_offset": {
            "name": "test_persisted_offset",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_reset_state": {
            "name": "test_reset_state",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_send_changelog": {
            "name": "test_send_changelog",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_send_changelog__custom_serializers": {
            "name": "test_send_changelog__custom_serializers",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_send_changelog__no_current_event": {
            "name": "test_send_changelog__no_current_event",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_on_changelog_sent": {
            "name": "test_on_changelog_sent",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_on_changelog_sent__transactions": {
            "name": "test_on_changelog_sent__transactions",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test__verify_source_topic_partitions": {
            "name": "test__verify_source_topic_partitions",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "source_n": [],
                "change_n": [],
                "expect_error": []
            }
        },
        "test_Collection.test_should_expire_keys": {
            "name": "test_should_expire_keys",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_join": {
            "name": "test_join",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_left_join": {
            "name": "test_left_join",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_inner_join": {
            "name": "test_inner_join",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_outer_join": {
            "name": "test_outer_join",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test__join": {
            "name": "test__join",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_clone": {
            "name": "test_clone",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_combine": {
            "name": "test_combine",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_contribute_to_stream": {
            "name": "test_contribute_to_stream",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_new_changelog_topic__window_expires": {
            "name": "test_new_changelog_topic__window_expires",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_new_changelog_topic__default_compacting": {
            "name": "test_new_changelog_topic__default_compacting",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_new_changelog_topic__default_deleting": {
            "name": "test_new_changelog_topic__default_deleting",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_copy": {
            "name": "test_copy",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_and": {
            "name": "test_and",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test__maybe_set_key_ttl": {
            "name": "test__maybe_set_key_ttl",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test__maybe_del_key_ttl": {
            "name": "test__maybe_del_key_ttl",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_apply_window_op": {
            "name": "test_apply_window_op",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_set_del_windowed": {
            "name": "test_set_del_windowed",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_window_ranges": {
            "name": "test_window_ranges",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.mock_ranges": {
            "name": "mock_ranges",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "ranges": []
            }
        },
        "test_Collection.test_relative_now": {
            "name": "test_relative_now",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_relative_now__no_event": {
            "name": "test_relative_now__no_event",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_relative_event": {
            "name": "test_relative_event",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_relative_event__raises_if_no_event": {
            "name": "test_relative_event__raises_if_no_event",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_relative_field": {
            "name": "test_relative_field",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_relative_field__raises_if_no_event": {
            "name": "test_relative_field__raises_if_no_event",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_relative_timestamp": {
            "name": "test_relative_timestamp",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_windowed_now": {
            "name": "test_windowed_now",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_windowed_timestamp": {
            "name": "test_windowed_timestamp",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_windowed_delta": {
            "name": "test_windowed_delta",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_label": {
            "name": "test_label",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_shortlabel": {
            "name": "test_shortlabel",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_apply_changelog_batch": {
            "name": "test_apply_changelog_batch",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_to_key": {
            "name": "test_to_key",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_to_value": {
            "name": "test_to_value",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test__human_channel": {
            "name": "test__human_channel",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_repr_info": {
            "name": "test_repr_info",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_partition_for_key__partitioner": {
            "name": "test_partition_for_key__partitioner",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Collection.test_del_old_keys.get_stale": {
            "name": "get_stale",
            "location": 214,
            "return": [],
            "arguments": {
                "limit": []
            }
        },
        "test_Collection.test_del_old_keys_non_async_cb.get_stale": {
            "name": "get_stale",
            "location": 268,
            "return": [],
            "arguments": {
                "limit": []
            }
        },
        "test_Collection.test_clean_data.on_sleep": {
            "name": "on_sleep",
            "location": 329,
            "return": [],
            "arguments": {
                "secs": []
            }
        },
        "test_Collection.test_del_old_keys.get_stale.is_stale": {
            "name": "is_stale",
            "location": 215,
            "return": [],
            "arguments": {
                "timestamp": [],
                "latest_timestamp": []
            }
        },
        "test_Collection.test_del_old_keys_non_async_cb.get_stale.is_stale": {
            "name": "is_stale",
            "location": 269,
            "return": [],
            "arguments": {
                "timestamp": [],
                "latest_timestamp": []
            }
        }
    },
    "faust-master/t/unit/tables/test_manager.py": {
        "test_Manager.tables": {
            "name": "tables",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_persist_offset_on_commit": {
            "name": "test_persist_offset_on_commit",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_on_commit": {
            "name": "test_on_commit",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_on_commit_tp": {
            "name": "test_on_commit_tp",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_on_rebalance_start": {
            "name": "test_on_rebalance_start",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_hash": {
            "name": "test_hash",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_changelog_topics": {
            "name": "test_changelog_topics",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_changelog_queue": {
            "name": "test_changelog_queue",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_recovery": {
            "name": "test_recovery",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_add": {
            "name": "test_add",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_add__when_recovery_started_raises": {
            "name": "test_add__when_recovery_started_raises",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Manager.test_on_partitions_revoked": {
            "name": "test_on_partitions_revoked",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/tables/test_objects.py": {
        "key": {
            "name": "key",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "table": {
            "name": "table",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "current_event": {
            "name": "current_event",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "ValueType.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "man": [],
                "key": []
            }
        },
        "ValueType.sync_from_storage": {
            "name": "sync_from_storage",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ValueType.as_stored_value": {
            "name": "as_stored_value",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueType.apply_changelog_event": {
            "name": "apply_changelog_event",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [],
                "value": []
            }
        },
        "test_ChangeloggedObjectManager.man": {
            "name": "man",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.storage": {
            "name": "storage",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_send_changelog_event": {
            "name": "test_send_changelog_event",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test__getitem__": {
            "name": "test__getitem__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test__setitem__": {
            "name": "test__setitem__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test__delitem__": {
            "name": "test__delitem__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_table_type_name": {
            "name": "test_table_type_name",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_persisted_offset": {
            "name": "test_persisted_offset",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_set_persisted_offset": {
            "name": "test_set_persisted_offset",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_sync_from_storage": {
            "name": "test_sync_from_storage",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_flush_to_storage": {
            "name": "test_flush_to_storage",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_reset_state": {
            "name": "test_reset_state",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_apply_changelog_batch__key_is_None": {
            "name": "test_apply_changelog_batch__key_is_None",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_apply_changelog_batch__empty": {
            "name": "test_apply_changelog_batch__empty",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedObjectManager.test_apply_changelog_batch": {
            "name": "test_apply_changelog_batch",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/tables/test_recovery.py": {
        "tables": {
            "name": "tables",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "recovery": {
            "name": "recovery",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_recovery_from_offset_0": {
            "name": "test_recovery_from_offset_0",
            "location": 344,
            "return": [],
            "arguments": {
                "highwaters": [],
                "offsets": [],
                "needs_recovery": [],
                "total": [],
                "remaining": []
            }
        },
        "test_Recovery.table": {
            "name": "table",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_init": {
            "name": "test_init",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_add_active": {
            "name": "test_add_active",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_add_standby": {
            "name": "test_add_standby",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_on_partitions_revoked": {
            "name": "test_on_partitions_revoked",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_flush_buffers": {
            "name": "test_flush_buffers",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_need_recovery__yes": {
            "name": "test_need_recovery__yes",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_need_recovery__no": {
            "name": "test_need_recovery__no",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_active_remaining": {
            "name": "test_active_remaining",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_standby_remaining": {
            "name": "test_standby_remaining",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery.test_active_stats": {
            "name": "test_active_stats",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery._setup_active_offsets": {
            "name": "_setup_active_offsets",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "recovery": []
            }
        },
        "test_Recovery.test_standby_stats": {
            "name": "test_standby_stats",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Recovery._setup_standby_offsets": {
            "name": "_setup_standby_offsets",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "recovery": []
            }
        },
        "test_Recovery.test__is_changelog_tp": {
            "name": "test__is_changelog_tp",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/tables/test_sets.py": {
        "key": {
            "name": "key",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "table": {
            "name": "table",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_ChangeloggedSetManager": {
            "name": "test_ChangeloggedSetManager",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_SetWindowSet.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetWindowSet.wset": {
            "name": "wset",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetWindowSet.test_add": {
            "name": "test_add",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetWindowSet.test_discard": {
            "name": "test_discard",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetWindowSet.test__apply_set_operation": {
            "name": "test__apply_set_operation",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.manager": {
            "name": "manager",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.cset": {
            "name": "cset",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_constructor": {
            "name": "test_constructor",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_on_add": {
            "name": "test_on_add",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_on_discard": {
            "name": "test_on_discard",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_on_change__diff": {
            "name": "test_on_change__diff",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_on_change__update": {
            "name": "test_on_change__update",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_sync_from_storage": {
            "name": "test_sync_from_storage",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_as_stored_value": {
            "name": "test_as_stored_value",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_apply_changelog_event__ADD": {
            "name": "test_apply_changelog_event__ADD",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_apply_changelog_event__DISCARD": {
            "name": "test_apply_changelog_event__DISCARD",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_apply_changelog_event__UPDATE": {
            "name": "test_apply_changelog_event__UPDATE",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ChangeloggedSet.test_apply_changelog_event__not_implemented": {
            "name": "test_apply_changelog_event__not_implemented",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.stable": {
            "name": "stable",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.man": {
            "name": "man",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.test_constructor_enabled": {
            "name": "test_constructor_enabled",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.test_constructor_disabled": {
            "name": "test_constructor_disabled",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.test__update": {
            "name": "test__update",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.test__difference_update": {
            "name": "test__difference_update",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.test__clear": {
            "name": "test__clear",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.test__intersection_update": {
            "name": "test__intersection_update",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTableManager.test__symmetric_difference_update": {
            "name": "test__symmetric_difference_update",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTable.stable": {
            "name": "stable",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTable.test_constructor__with_suffix": {
            "name": "test_constructor__with_suffix",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTable.test_constructor__with_specific_name": {
            "name": "test_constructor__with_specific_name",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTable.test__new_store": {
            "name": "test__new_store",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SetTable.test__getitem__": {
            "name": "test__getitem__",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/tables/test_table.py": {
        "event": {
            "name": "event",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_Table.table": {
            "name": "table",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.strict_table": {
            "name": "strict_table",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.create_table": {
            "name": "create_table",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_Table.test_using_window": {
            "name": "test_using_window",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "patch_current": []
            }
        },
        "test_Table.test_hopping": {
            "name": "test_hopping",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "patch_current": []
            }
        },
        "test_Table.test_tumbling": {
            "name": "test_tumbling",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "patch_current": []
            }
        },
        "test_Table.assert_wrapper": {
            "name": "assert_wrapper",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "wrapper": [],
                "table": [],
                "window": []
            }
        },
        "test_Table.assert_current": {
            "name": "assert_current",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "wrapper": [],
                "patch_current": []
            }
        },
        "test_Table.test_missing__when_default": {
            "name": "test_missing__when_default",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_missing__no_default": {
            "name": "test_missing__no_default",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_has_key": {
            "name": "test_has_key",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_get_key": {
            "name": "test_get_key",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_set_key": {
            "name": "test_set_key",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_del_key": {
            "name": "test_del_key",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_as_ansitable": {
            "name": "test_as_ansitable",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_on_key_set__no_event": {
            "name": "test_on_key_set__no_event",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Table.test_on_key_del__no_event": {
            "name": "test_on_key_del__no_event",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/tables/test_wrappers.py": {
        "table": {
            "name": "table",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "wtable": {
            "name": "wtable",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "iwtable": {
            "name": "iwtable",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "event": {
            "name": "event",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "same_items": {
            "name": "same_items",
            "location": 42,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "_maybe_items": {
            "name": "_maybe_items",
            "location": 48,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "same": {
            "name": "same",
            "location": 57,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "current_event": {
            "name": "current_event",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_WindowSet.wset": {
            "name": "wset",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_constructor": {
            "name": "test_constructor",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_apply": {
            "name": "test_apply",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.mock_get_timestamp": {
            "name": "mock_get_timestamp",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "wset": []
            }
        },
        "test_WindowSet.test_apply__custom_event": {
            "name": "test_apply__custom_event",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_value": {
            "name": "test_value",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_now": {
            "name": "test_now",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_current": {
            "name": "test_current",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_current__default_event": {
            "name": "test_current__default_event",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_delta": {
            "name": "test_delta",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_delta__default_event": {
            "name": "test_delta__default_event",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_getitem": {
            "name": "test_getitem",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_getitem__event": {
            "name": "test_getitem__event",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_setitem": {
            "name": "test_setitem",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_setitem__event": {
            "name": "test_setitem__event",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_delitem": {
            "name": "test_delitem",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_delitem__event": {
            "name": "test_delitem__event",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowSet.test_operators": {
            "name": "test_operators",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "meth": [],
                "expected_op": []
            }
        },
        "test_WindowSet.test_repr": {
            "name": "test_repr",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_name": {
            "name": "test_name",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_relative_to": {
            "name": "test_relative_to",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_relative_to_now": {
            "name": "test_relative_to_now",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_relative_to_field": {
            "name": "test_relative_to_field",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_relative_to_stream": {
            "name": "test_relative_to_stream",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_get_timestamp": {
            "name": "test_get_timestamp",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "expected": []
            }
        },
        "test_WindowWrapper.test_get_timestamp__event_is_None": {
            "name": "test_get_timestamp__event_is_None",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_on_recover": {
            "name": "test_on_recover",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_contains": {
            "name": "test_contains",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_getitem": {
            "name": "test_getitem",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_setitem": {
            "name": "test_setitem",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_setitem__key_is_WindowSet": {
            "name": "test_setitem__key_is_WindowSet",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_delitem": {
            "name": "test_delitem",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_len__no_key_index_raises": {
            "name": "test_len__no_key_index_raises",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_as_ansitable__raises": {
            "name": "test_as_ansitable__raises",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_keys_raises": {
            "name": "test_keys_raises",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper.test_relative_handler": {
            "name": "test_relative_handler",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "test_WindowWrapper.test_relative_handler__invalid_handler": {
            "name": "test_relative_handler__invalid_handler",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.wset": {
            "name": "wset",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.data": {
            "name": "data",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.data_with_30s_delta": {
            "name": "data_with_30s_delta",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.remove_a_key": {
            "name": "remove_a_key",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_len": {
            "name": "test_len",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_as_ansitable": {
            "name": "test_as_ansitable",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items": {
            "name": "test_items",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items_keys_in_index_not_in_table": {
            "name": "test_items_keys_in_index_not_in_table",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items_now": {
            "name": "test_items_now",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items_now_keys_in_index_not_in_table": {
            "name": "test_items_now_keys_in_index_not_in_table",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items_current": {
            "name": "test_items_current",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items_current_keys_in_index_not_in_table": {
            "name": "test_items_current_keys_in_index_not_in_table",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items_delta": {
            "name": "test_items_delta",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_items_delta_key_not_in_table": {
            "name": "test_items_delta_key_not_in_table",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_keys": {
            "name": "test_keys",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_keys__now": {
            "name": "test_keys__now",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_keys__current": {
            "name": "test_keys__current",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_keys__delta": {
            "name": "test_keys__delta",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_iter": {
            "name": "test_iter",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values": {
            "name": "test_values",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values_keys_in_index_not_in_table": {
            "name": "test_values_keys_in_index_not_in_table",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values_now": {
            "name": "test_values_now",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values_now_keys_in_index_not_in_table": {
            "name": "test_values_now_keys_in_index_not_in_table",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values_current": {
            "name": "test_values_current",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values_current_keys_in_index_not_in_table": {
            "name": "test_values_current_keys_in_index_not_in_table",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values_delta": {
            "name": "test_values_delta",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_values_delta_key_not_in_table": {
            "name": "test_values_delta_key_not_in_table",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_setitem": {
            "name": "test_setitem",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_WindowWrapper_using_key_index.test_delitem": {
            "name": "test_delitem",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/tables/__init__.py": {},
    "faust-master/t/unit/transport/test_conductor.py": {
        "test_Conductor.con": {
            "name": "con",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.con_client_only": {
            "name": "con_client_only",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_constructor": {
            "name": "test_constructor",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_acks_enabled_for": {
            "name": "test_acks_enabled_for",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_update_tp_index": {
            "name": "test_update_tp_index",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_update_tp_index__active_partitions": {
            "name": "test_update_tp_index__active_partitions",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_update_tp_index__active_partitions_empty": {
            "name": "test_update_tp_index__active_partitions_empty",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_update_callback_map": {
            "name": "test_update_callback_map",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_clear": {
            "name": "test_clear",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_iter": {
            "name": "test_iter",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_hash": {
            "name": "test_hash",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_add": {
            "name": "test_add",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_topic_contain_unsubcribed_topics": {
            "name": "test_topic_contain_unsubcribed_topics",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_flag_changes": {
            "name": "test_flag_changes",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_add_flags_changes": {
            "name": "test_add_flags_changes",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_discard": {
            "name": "test_discard",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_label": {
            "name": "test_label",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Conductor.test_shortlabel": {
            "name": "test_shortlabel",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/transport/test_consumer.py": {
        "test_Fetcher.consumer": {
            "name": "consumer",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Fetcher.fetcher": {
            "name": "fetcher",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TransactionManager.consumer": {
            "name": "consumer",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TransactionManager.producer": {
            "name": "producer",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TransactionManager.transport": {
            "name": "transport",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TransactionManager.manager": {
            "name": "manager",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TransactionManager.test_send_soon": {
            "name": "test_send_soon",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TransactionManager.test_key_partition": {
            "name": "test_key_partition",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TransactionManager.test_supports_headers": {
            "name": "test_supports_headers",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedConsumerAbstractMethods.assignment": {
            "name": "assignment",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedConsumerAbstractMethods.position": {
            "name": "position",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedConsumerAbstractMethods.earliest_offsets": {
            "name": "earliest_offsets",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedConsumerAbstractMethods.highwater": {
            "name": "highwater",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedConsumerAbstractMethods.highwaters": {
            "name": "highwaters",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedConsumerAbstractMethods._to_message": {
            "name": "_to_message",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedConsumerAbstractMethods.topic_partitions": {
            "name": "topic_partitions",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "topic": []
            }
        },
        "MockedConsumerAbstractMethods._new_topicpartition": {
            "name": "_new_topicpartition",
            "location": 379,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [],
                "topic": [],
                "partition": []
            }
        },
        "MockedConsumerAbstractMethods.key_partition": {
            "name": "key_partition",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyConsumer.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.callback": {
            "name": "callback",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.on_P_revoked": {
            "name": "on_P_revoked",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.on_P_assigned": {
            "name": "on_P_assigned",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.consumer": {
            "name": "consumer",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.message": {
            "name": "message",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_on_init_dependencies__default": {
            "name": "test_on_init_dependencies__default",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_on_init_dependencies__exactly_once": {
            "name": "test_on_init_dependencies__exactly_once",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer._setup_records": {
            "name": "_setup_records",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "consumer": [],
                "active_partitions": [],
                "records": [],
                "flow_active": []
            }
        },
        "test_Consumer.test__get_active_partitions__when_empty": {
            "name": "test__get_active_partitions__when_empty",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test__get_active_partitions__when_set": {
            "name": "test__get_active_partitions__when_set",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_stop_flow": {
            "name": "test_stop_flow",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_resume_flow": {
            "name": "test_resume_flow",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_pause_partitions": {
            "name": "test_pause_partitions",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_resume_partitions": {
            "name": "test_resume_partitions",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_read_offset_default": {
            "name": "test_read_offset_default",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_committed_offset_default": {
            "name": "test_committed_offset_default",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_is_changelog_tp": {
            "name": "test_is_changelog_tp",
            "location": 646,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_track_message": {
            "name": "test_track_message",
            "location": 683,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_ack": {
            "name": "test_ack",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "test_Consumer.test_ack__already_acked": {
            "name": "test_ack__already_acked",
            "location": 706,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_ack__disabled": {
            "name": "test_ack__disabled",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_filter_committable_offsets": {
            "name": "test_filter_committable_offsets",
            "location": 816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_filter_tps_with_pending_acks": {
            "name": "test_filter_tps_with_pending_acks",
            "location": 935,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_should_commit": {
            "name": "test_should_commit",
            "location": 956,
            "return": [],
            "arguments": {
                "self": [],
                "tp": [],
                "offset": [],
                "committed": [],
                "should": []
            }
        },
        "test_Consumer.test_new_offset": {
            "name": "test_new_offset",
            "location": 967,
            "return": [],
            "arguments": {
                "self": [],
                "tp": [],
                "acked": [],
                "expected_offset": []
            }
        },
        "test_Consumer.test_new_offset_with_gaps": {
            "name": "test_new_offset_with_gaps",
            "location": 978,
            "return": [],
            "arguments": {
                "self": [],
                "tp": [],
                "acked": [],
                "gaps": [],
                "expected_offset": []
            }
        },
        "test_Consumer.test__add_gap": {
            "name": "test__add_gap",
            "location": 990,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test__add_gap__previous_to_committed": {
            "name": "test__add_gap__previous_to_committed",
            "location": 997,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_close": {
            "name": "test_close",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ConsumerThread.consumer": {
            "name": "consumer",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ConsumerThread.thread": {
            "name": "thread",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.message_callback": {
            "name": "message_callback",
            "location": 1117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.partitions_revoked_callback": {
            "name": "partitions_revoked_callback",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.partitions_assigned_callback": {
            "name": "partitions_assigned_callback",
            "location": 1125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.consumer": {
            "name": "consumer",
            "location": 1129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.test_assignment": {
            "name": "test_assignment",
            "location": 1212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.test_highwater": {
            "name": "test_highwater",
            "location": 1217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.test_topic_partitions": {
            "name": "test_topic_partitions",
            "location": 1222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.test_verify_event_path": {
            "name": "test_verify_event_path",
            "location": 1271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test_getmany__flow_inactive2.se": {
            "name": "se",
            "location": 460,
            "return": [],
            "arguments": {
                "records": []
            }
        },
        "test_Consumer.test_getmany.to_message": {
            "name": "to_message",
            "location": 473,
            "return": [],
            "arguments": {
                "tp": [],
                "record": []
            }
        },
        "test_Consumer.test_wait_empty.on_commit": {
            "name": "on_commit",
            "location": 721,
            "return": [],
            "arguments": {
                "start_new_transaction": []
            }
        },
        "test_Consumer.test_commit_handler.on_sleep": {
            "name": "on_sleep",
            "location": 1008,
            "return": [],
            "arguments": {
                "secs": []
            }
        },
        "test_ConsumerThread.MyConsumerThread.close": {
            "name": "close",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ConsumerThread.MyConsumerThread.pause_partitions": {
            "name": "pause_partitions",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ConsumerThread.MyConsumerThread.resume_partitions": {
            "name": "resume_partitions",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ConsumerThread.MyConsumerThread.stop_flow": {
            "name": "stop_flow",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ConsumerThread.MyConsumerThread.resume_flow": {
            "name": "resume_flow",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.TestThreadDelegateConsumer._new_consumer_thread": {
            "name": "_new_consumer_thread",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.TestThreadDelegateConsumer._new_topicpartition": {
            "name": "_new_topicpartition",
            "location": 1107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.TestThreadDelegateConsumer._to_message": {
            "name": "_to_message",
            "location": 1110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ThreadDelegateConsumer.TestThreadDelegateConsumer.create_topic": {
            "name": "create_topic",
            "location": 1113,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/transport/test_producer.py": {
        "test_ProducerBuffer.buf": {
            "name": "buf",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ProducerBuffer.test_put": {
            "name": "test_put",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ProducerBuffer._put": {
            "name": "_put",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "items": []
            }
        },
        "ProducerTests.test_send_soon": {
            "name": "test_send_soon",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProducerTests.test_key_partition": {
            "name": "test_key_partition",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProducerTests.test_supports_headers": {
            "name": "test_supports_headers",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.producer": {
            "name": "producer",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/transport/test_utils.py": {
        "test_TopicBuffer.test_iter": {
            "name": "test_iter",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TopicBuffer.test_map_from_records": {
            "name": "test_map_from_records",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TopicBuffer.test_next": {
            "name": "test_next",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/transport/drivers/test_aiokafka.py": {
        "thread": {
            "name": "thread",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "callback": {
            "name": "callback",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "on_partitions_revoked": {
            "name": "on_partitions_revoked",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "on_partitions_assigned": {
            "name": "on_partitions_assigned",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_credentials_to_aiokafka": {
            "name": "test_credentials_to_aiokafka",
            "location": 1725,
            "return": [],
            "arguments": {
                "credentials": [],
                "ssl_context": [],
                "expected": []
            }
        },
        "test_credentials_to_aiokafka__invalid": {
            "name": "test_credentials_to_aiokafka__invalid",
            "location": 1729,
            "return": [],
            "arguments": {}
        },
        "test_ConsumerRebalanceListener.handler": {
            "name": "handler",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ConsumerRebalanceListener.thread": {
            "name": "thread",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.thread": {
            "name": "thread",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.consumer": {
            "name": "consumer",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.callback": {
            "name": "callback",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.on_partitions_revoked": {
            "name": "on_partitions_revoked",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.on_partitions_assigned": {
            "name": "on_partitions_assigned",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test__new_topicpartition": {
            "name": "test__new_topicpartition",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test__to_message": {
            "name": "test__to_message",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.test__to_message__no_timestamp": {
            "name": "test__to_message__no_timestamp",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Consumer.mock_record": {
            "name": "mock_record",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "partition": [],
                "offset": [],
                "timestamp": [],
                "timestamp_type": [],
                "headers": [],
                "key": [],
                "value": [],
                "checksum": [],
                "serialized_key_size": [],
                "serialized_value_size": []
            }
        },
        "AIOKafkaConsumerThreadFixtures.cthread": {
            "name": "cthread",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThreadFixtures.tracer": {
            "name": "tracer",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThreadFixtures._consumer": {
            "name": "_consumer",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThreadFixtures.now": {
            "name": "now",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThreadFixtures.tp": {
            "name": "tp",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThreadFixtures.aiotp": {
            "name": "aiotp",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThreadFixtures.logger": {
            "name": "logger",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_verify_event_path_base._set_started": {
            "name": "_set_started",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "test_verify_event_path_base._set_last_request": {
            "name": "_set_last_request",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "last_request": []
            }
        },
        "test_verify_event_path_base._set_last_response": {
            "name": "_set_last_response",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "last_response": []
            }
        },
        "test_verify_event_path_base._set_stream_inbound": {
            "name": "_set_stream_inbound",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "inbound_time": []
            }
        },
        "test_verify_event_path_base._set_last_commit": {
            "name": "_set_last_commit",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "commit_time": []
            }
        },
        "test_verify_event_path_base.aaaa_setup_attributes": {
            "name": "aaaa_setup_attributes",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_verify_event_path_base.setup_consumer": {
            "name": "setup_consumer",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_verify_event_path_base.test_state": {
            "name": "test_state",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_fetch_since_start.test_just_started": {
            "name": "test_just_started",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_fetch_since_start.test_timed_out": {
            "name": "test_timed_out",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_response_since_start.test_just_started": {
            "name": "test_just_started",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_response_since_start.test_timed_out": {
            "name": "test_timed_out",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_recent_fetch.test_recent_fetch": {
            "name": "test_recent_fetch",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_recent_fetch.test_timed_out": {
            "name": "test_timed_out",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_recent_response.test_recent_response": {
            "name": "test_recent_response",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_recent_response.test_timed_out": {
            "name": "test_timed_out",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_highwater_since_start.test_no_monitor": {
            "name": "test_no_monitor",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_highwater_since_start.test_just_started": {
            "name": "test_just_started",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_highwater_since_start.test_timed_out": {
            "name": "test_timed_out",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_stream_idle_no_highwater.test_highwater_same_as_offset": {
            "name": "test_highwater_same_as_offset",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_stream_idle_highwater_no_acks.test_no_acks": {
            "name": "test_no_acks",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_stream_idle_highwater_same_has_acks_everything_OK.test_main": {
            "name": "test_main",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_stream_idle_highwater_no_inbound.test_just_started": {
            "name": "test_just_started",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_stream_idle_highwater_no_inbound.test_timed_out_since_start": {
            "name": "test_timed_out_since_start",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_stream_idle_highwater_no_inbound.test_has_inbound": {
            "name": "test_has_inbound",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_stream_idle_highwater_no_inbound.test_inbound_timed_out": {
            "name": "test_inbound_timed_out",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_commit._configure": {
            "name": "_configure",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "now": [],
                "cthread": []
            }
        },
        "test_VEP_no_commit.test_just_started": {
            "name": "test_just_started",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_commit.test_timed_out_since_start": {
            "name": "test_timed_out_since_start",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_commit.test_timed_out_since_last": {
            "name": "test_timed_out_since_last",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_VEP_no_commit.test_committing_fine": {
            "name": "test_committing_fine",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_constructor": {
            "name": "test_constructor",
            "location": 652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test__create_consumer__client": {
            "name": "test__create_consumer__client",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test__create_consumer__worker": {
            "name": "test__create_consumer__worker",
            "location": 689,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_session_gt_request_timeout": {
            "name": "test_session_gt_request_timeout",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test__create_worker_consumer": {
            "name": "test__create_worker_consumer",
            "location": 707,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test__create_worker_consumer__transaction": {
            "name": "test__create_worker_consumer__transaction",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.assert_create_worker_consumer": {
            "name": "assert_create_worker_consumer",
            "location": 721,
            "return": [],
            "arguments": {
                "self": [],
                "cthread": [],
                "app": [],
                "in_transaction": [],
                "isolation_level": [],
                "api_version": []
            }
        },
        "test_AIOKafkaConsumerThread.test__create_client_consumer": {
            "name": "test__create_client_consumer",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test__start_span": {
            "name": "test__start_span",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_trace_category": {
            "name": "test_trace_category",
            "location": 807,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_transform_span_lazy": {
            "name": "test_transform_span_lazy",
            "location": 810,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_transform_span_flush_spans": {
            "name": "test_transform_span_flush_spans",
            "location": 822,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_span_without_operation_name": {
            "name": "test_span_without_operation_name",
            "location": 832,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_transform_span_lazy_no_consumer": {
            "name": "test_transform_span_lazy_no_consumer",
            "location": 840,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_transform_span_eager": {
            "name": "test_transform_span_eager",
            "location": 853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.assert_setup_lazy_spans": {
            "name": "assert_setup_lazy_spans",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "cthread": [],
                "app": [],
                "tracer": [],
                "expect_lazy": []
            }
        },
        "test_AIOKafkaConsumerThread.test__start_span__no_tracer": {
            "name": "test__start_span__no_tracer",
            "location": 891,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_traced_from_parent_span": {
            "name": "test_traced_from_parent_span",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_start_rebalancing_span": {
            "name": "test_start_rebalancing_span",
            "location": 903,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_start_coordinator_span": {
            "name": "test_start_coordinator_span",
            "location": 909,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_close": {
            "name": "test_close",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_close__no_consumer": {
            "name": "test_close__no_consumer",
            "location": 921,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_seek": {
            "name": "test_seek",
            "location": 1021,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_assignment": {
            "name": "test_assignment",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_highwater": {
            "name": "test_highwater",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_highwater__in_transaction": {
            "name": "test_highwater__in_transaction",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_topic_partitions": {
            "name": "test_topic_partitions",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test__ensure_consumer": {
            "name": "test__ensure_consumer",
            "location": 1083,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_key_partition": {
            "name": "test_key_partition",
            "location": 1185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.test_key_partition__no_metadata": {
            "name": "test_key_partition__no_metadata",
            "location": 1204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_AIOKafkaConsumerThread.assert_calls_thread": {
            "name": "assert_calls_thread",
            "location": 1213,
            "return": [],
            "arguments": {
                "self": [],
                "cthread": [],
                "_consumer": [],
                "method": []
            }
        },
        "test_Producer.producer": {
            "name": "producer",
            "location": 1233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer._producer": {
            "name": "_producer",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test_producer__uses_custom_partitioner": {
            "name": "test_producer__uses_custom_partitioner",
            "location": 1256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test__settings_extra": {
            "name": "test__settings_extra",
            "location": 1292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test__new_producer": {
            "name": "test__new_producer",
            "location": 1298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test__new_producer__using_settings": {
            "name": "test__new_producer__using_settings",
            "location": 1343,
            "return": [],
            "arguments": {
                "self": [],
                "expected_args": []
            }
        },
        "test_Producer.assert_new_producer": {
            "name": "assert_new_producer",
            "location": 1347,
            "return": [],
            "arguments": {
                "self": [],
                "producer": [],
                "acks": [],
                "api_version": [],
                "bootstrap_servers": [],
                "client_id": [],
                "compression_type": [],
                "linger_ms": [],
                "max_batch_size": [],
                "max_request_size": [],
                "request_timeout_ms": [],
                "security_protocol": []
            }
        },
        "test_Producer.test__new_producer__default": {
            "name": "test__new_producer__default",
            "location": 1379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test__new_producer__in_transaction": {
            "name": "test__new_producer__in_transaction",
            "location": 1383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test__producer_type": {
            "name": "test__producer_type",
            "location": 1388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test__ensure_producer": {
            "name": "test__ensure_producer",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test_supports_headers__not_ready": {
            "name": "test_supports_headers__not_ready",
            "location": 1467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test_key_partition": {
            "name": "test_key_partition",
            "location": 1599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Producer.test_supports_headers": {
            "name": "test_supports_headers",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Transport.transport": {
            "name": "transport",
            "location": 1611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Transport.test_constructor": {
            "name": "test_constructor",
            "location": 1614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Transport.test__topic_config": {
            "name": "test__topic_config",
            "location": 1617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Transport.test__topic_config__retention": {
            "name": "test__topic_config__retention",
            "location": 1620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Transport.test__topic_config__compacting": {
            "name": "test__topic_config__compacting",
            "location": 1625,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Transport.test__topic_config__deleting": {
            "name": "test__topic_config__deleting",
            "location": 1630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Transport.test__topic_config__combined": {
            "name": "test__topic_config__combined",
            "location": 1635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AIOKafkaConsumerThreadFixtures.tracer.start_span": {
            "name": "start_span",
            "location": 248,
            "return": [],
            "arguments": {
                "operation_name": []
            }
        },
        "test_AIOKafkaConsumerThread.assert_setup_lazy_spans.foo": {
            "name": "foo",
            "location": 861,
            "return": [],
            "arguments": {}
        },
        "test_AIOKafkaConsumerThread.assert_setup_lazy_spans.bar": {
            "name": "bar",
            "location": 867,
            "return": [],
            "arguments": {}
        },
        "test_AIOKafkaConsumerThread.assert_setup_lazy_spans.REPLACE_WITH_MEMBER_ID": {
            "name": "REPLACE_WITH_MEMBER_ID",
            "location": 873,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/transport/drivers/__init__.py": {},
    "faust-master/t/unit/utils/test_codegen.py": {
        "test_reprkwargs": {
            "name": "test_reprkwargs",
            "location": 10,
            "return": [],
            "arguments": {
                "input": [],
                "expected": []
            }
        },
        "test_reprcall": {
            "name": "test_reprcall",
            "location": 21,
            "return": [],
            "arguments": {
                "name": [],
                "args": [],
                "kwargs": [],
                "expected": []
            }
        }
    },
    "faust-master/t/unit/utils/test_cron.py": {
        "test_secs_for_next": {
            "name": "test_secs_for_next",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_secs_for_next_with_tz": {
            "name": "test_secs_for_next_with_tz",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/utils/test_functional.py": {
        "test_consecutive_numbers": {
            "name": "test_consecutive_numbers",
            "location": 15,
            "return": [],
            "arguments": {
                "numbers": [],
                "expected": []
            }
        },
        "test_deque_pushpop_max": {
            "name": "test_deque_pushpop_max",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/utils/test_iso8601.py": {
        "test_python": {
            "name": "test_python",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_timezone_no_sep": {
            "name": "test_timezone_no_sep",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_parse_error": {
            "name": "test_parse_error",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_parse_tz": {
            "name": "test_parse_tz",
            "location": 30,
            "return": [],
            "arguments": {
                "tz": []
            }
        },
        "test_parse_tz__no_match": {
            "name": "test_parse_tz__no_match",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/utils/test_json.py": {
        "test_str_to_decimal_decimals": {
            "name": "test_str_to_decimal_decimals",
            "location": 13,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_str_to_decimal_None": {
            "name": "test_str_to_decimal_None",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_maxlen": {
            "name": "test_maxlen",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_NaN": {
            "name": "test_NaN",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_Inf": {
            "name": "test_Inf",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_negative_Inf": {
            "name": "test_negative_Inf",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_sNaN": {
            "name": "test_sNaN",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_JSONEncoder": {
            "name": "test_JSONEncoder",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "CanJson.__json__": {
            "name": "__json__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/utils/test_urls.py": {
        "test_urllist_URL": {
            "name": "test_urllist_URL",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_urllist_empty_raises": {
            "name": "test_urllist_empty_raises",
            "location": 14,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_urllist_str": {
            "name": "test_urllist_str",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_urllist_str_no_scheme": {
            "name": "test_urllist_str_no_scheme",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_urllist_URL_no_scheme_scalar_arg": {
            "name": "test_urllist_URL_no_scheme_scalar_arg",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_urllist_URL_no_scheme_list_arg": {
            "name": "test_urllist_URL_no_scheme_list_arg",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_urllist_strsep": {
            "name": "test_urllist_strsep",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_urllist_strsep_no_scheme": {
            "name": "test_urllist_strsep_no_scheme",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_urllist_list_of_strings": {
            "name": "test_urllist_list_of_strings",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_urllist_URLs": {
            "name": "test_urllist_URLs",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_urllist_URLs_no_scheme": {
            "name": "test_urllist_URLs_no_scheme",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/utils/test_utils.py": {
        "test_uuid": {
            "name": "test_uuid",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/utils/test_venusian.py": {
        "test_attach": {
            "name": "test_attach",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_on_found": {
            "name": "test_on_found",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/utils/__init__.py": {},
    "faust-master/t/unit/utils/terminal/test_spinners.py": {
        "spinner": {
            "name": "spinner",
            "location": 6,
            "return": [],
            "arguments": {
                "file": [],
                "isatty": []
            }
        },
        "test_SpinnerHandler": {
            "name": "test_SpinnerHandler",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_SpinnerHandler__no_spinner": {
            "name": "test_SpinnerHandler__no_spinner",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_Spinner.spinner": {
            "name": "spinner",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "file": [],
                "isatty": []
            }
        },
        "test_Spinner.test_constructor": {
            "name": "test_constructor",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Spinner.test_update": {
            "name": "test_update",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Spinner.test_reset": {
            "name": "test_reset",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Spinner.test_write": {
            "name": "test_write",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Spinner.test_write__notatty": {
            "name": "test_write__notatty",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Spinner.test_begin": {
            "name": "test_begin",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Spinner.test_finish": {
            "name": "test_finish",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/utils/terminal/test_tables.py": {
        "fh": {
            "name": "fh",
            "location": 14,
            "return": [],
            "arguments": {
                "isatty": []
            }
        },
        "mock_stdout": {
            "name": "mock_stdout",
            "location": 21,
            "return": [],
            "arguments": {
                "isatty": []
            }
        },
        "mock_logging": {
            "name": "mock_logging",
            "location": 28,
            "return": [],
            "arguments": {
                "isatty": []
            }
        },
        "test_table": {
            "name": "test_table",
            "location": 43,
            "return": [],
            "arguments": {
                "target": [],
                "contexts": [],
                "kwargs": [],
                "expected_tty": []
            }
        },
        "test_logtable": {
            "name": "test_logtable",
            "location": 66,
            "return": [],
            "arguments": {
                "tty": [],
                "contexts": [],
                "headers": [],
                "expected_tty": [],
                "expected_data": []
            }
        },
        "test_get_best_table_type": {
            "name": "test_get_best_table_type",
            "location": 87,
            "return": [],
            "arguments": {
                "tty": [],
                "expected_table_type": []
            }
        },
        "test_table__default_tty": {
            "name": "test_table__default_tty",
            "location": 91,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/utils/terminal/__init__.py": {},
    "faust-master/t/unit/web/test_base.py": {
        "test_BlueprintManager.manager": {
            "name": "manager",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BlueprintManager.test_add": {
            "name": "test_add",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BlueprintManager.test_add__already_applied": {
            "name": "test_add__already_applied",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BlueprintManager.test_apply": {
            "name": "test_apply",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.text": {
            "name": "text",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.html": {
            "name": "html",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.json": {
            "name": "json",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.bytes": {
            "name": "bytes",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.bytes_to_response": {
            "name": "bytes_to_response",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.response_to_bytes": {
            "name": "response_to_bytes",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.route": {
            "name": "route",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyWeb.add_static": {
            "name": "add_static",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.web": {
            "name": "web",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_debug_blueprints": {
            "name": "test_debug_blueprints",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_production_blueprints": {
            "name": "test_production_blueprints",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_url_for": {
            "name": "test_url_for",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_url_for__not_found": {
            "name": "test_url_for__not_found",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_url__on_localhost": {
            "name": "test_url__on_localhost",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_url__not_on_localhost": {
            "name": "test_url__not_on_localhost",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/web/test_blueprints.py": {
        "test_Blueprint.bp": {
            "name": "bp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Blueprint.test_cache__with_prefix": {
            "name": "test_cache__with_prefix",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Blueprint.test_apply_static": {
            "name": "test_apply_static",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Blueprint.test_apply_static__already_prefixed": {
            "name": "test_apply_static__already_prefixed",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Blueprint.test_repr": {
            "name": "test_repr",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/web/test_exceptions.py": {
        "test_WebError": {
            "name": "test_WebError",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_WebError_defaults": {
            "name": "test_WebError_defaults",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "faust-master/t/unit/web/test_views.py": {
        "test_View.web": {
            "name": "web",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.view": {
            "name": "view",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_from_handler": {
            "name": "test_from_handler",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_from_handler__not_callable": {
            "name": "test_from_handler__not_callable",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_init": {
            "name": "test_init",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_path_for": {
            "name": "test_path_for",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_url_for__no_base": {
            "name": "test_url_for__no_base",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_url_for__base": {
            "name": "test_url_for__base",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_text": {
            "name": "test_text",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_html": {
            "name": "test_html",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_json": {
            "name": "test_json",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_bytes": {
            "name": "test_bytes",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_route": {
            "name": "test_route",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_error": {
            "name": "test_error",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_View.test_notfound": {
            "name": "test_notfound",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/web/__init__.py": {},
    "faust-master/t/unit/web/drivers/test_aiohttp.py": {
        "thread": {
            "name": "thread",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "server": {
            "name": "server",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test__prepare_cors_options": {
            "name": "test__prepare_cors_options",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_ServerThread.test_constructor": {
            "name": "test_constructor",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Server.test_constructor": {
            "name": "test_constructor",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_cors": {
            "name": "test_cors",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_text": {
            "name": "test_text",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_json__from_str": {
            "name": "test_json__from_str",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_json__from_bytes": {
            "name": "test_json__from_bytes",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_html": {
            "name": "test_html",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_bytes": {
            "name": "test_bytes",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_add_static": {
            "name": "test_add_static",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test_route__with_cors_options": {
            "name": "test_route__with_cors_options",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test__create_site": {
            "name": "test__create_site",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test__new_transport__tcp": {
            "name": "test__new_transport__tcp",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test__new_transport__unix": {
            "name": "test__new_transport__unix",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Web.test__app__compat_property": {
            "name": "test__app__compat_property",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/web/drivers/__init__.py": {},
    "faust-master/t/unit/windows/test_hopping_window.py": {
        "test_HoppingWindow.test_has_ranges_including_the_value": {
            "name": "test_has_ranges_including_the_value",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_HoppingWindow.test_current_range_is_latest_range": {
            "name": "test_current_range_is_latest_range",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_HoppingWindow.test_earliest_range_is_first_range": {
            "name": "test_earliest_range_is_first_range",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_HoppingWindow.test_non_stale_timestamp": {
            "name": "test_non_stale_timestamp",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_HoppingWindow.test_stale_timestamp": {
            "name": "test_stale_timestamp",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/windows/test_sliding_window.py": {
        "test_SlidingWindow.test_constructor": {
            "name": "test_constructor",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SlidingWindow.test_has_ranges_including_the_value": {
            "name": "test_has_ranges_including_the_value",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SlidingWindow.test_current_range_is_latest_range": {
            "name": "test_current_range_is_latest_range",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SlidingWindow.test_earliest_range_is_first_range": {
            "name": "test_earliest_range_is_first_range",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SlidingWindow.test_non_stale_timestamp": {
            "name": "test_non_stale_timestamp",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SlidingWindow.test_delta": {
            "name": "test_delta",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_SlidingWindow.test_stale_timestamp": {
            "name": "test_stale_timestamp",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "faust-master/t/unit/windows/test_tumbling_window.py": {
        "test_TumblingWindow.test_tumbling_window_has_just_one_range": {
            "name": "test_tumbling_window_has_just_one_range",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TumblingWindow.test_end_range_in_tumbling_window_is_within_range": {
            "name": "test_end_range_in_tumbling_window_is_within_range",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_TumblingWindow.test_earliest_and_current_range_are_the_same": {
            "name": "test_earliest_and_current_range_are_the_same",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
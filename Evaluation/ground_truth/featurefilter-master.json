{
    "featurefilter-master/setup.py": {},
    "featurefilter-master/featurefilter/abstract_transformer.py": {
        "AbstractTransformer.fit": {
            "name": "fit",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "AbstractTransformer.transform": {
            "name": "transform",
            "location": 9,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "AbstractTransformer.fit_transform": {
            "name": "fit_transform",
            "location": 12,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/feature_correlation_filter.py": {
        "FeatureCorrelationFilter.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "max_correlation": [
                    "float"
                ],
                "target_column": [
                    "str"
                ],
                "sample_ratio": [
                    "float"
                ],
                "seed": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "FeatureCorrelationFilter.fit": {
            "name": "fit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "FeatureCorrelationFilter.transform": {
            "name": "transform",
            "location": 74,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/glm_filter.py": {
        "GLMFilter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "target_column": [
                    "str"
                ],
                "categorical_target": [
                    "bool"
                ],
                "top_features": [
                    "int"
                ],
                "threshold": [
                    "float"
                ],
                "model_type": [
                    "str"
                ],
                "model_parameters": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "GLMFilter.fit": {
            "name": "fit",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "GLMFilter.transform": {
            "name": "transform",
            "location": 93,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/na_filter.py": {
        "NaFilter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "max_na_ratio": [
                    "float"
                ],
                "sample_ratio": [
                    "float"
                ],
                "seed": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "NaFilter.fit": {
            "name": "fit",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "NaFilter.transform": {
            "name": "transform",
            "location": 37,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/sklearn_wrapper.py": {
        "SklearnWrapper.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [
                    "SelectorMixin"
                ],
                "target_column": [
                    "str"
                ],
                "sample_ratio": [
                    "float"
                ],
                "seed": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "SklearnWrapper.print_columns_to_drop": {
            "name": "print_columns_to_drop",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SklearnWrapper.fit": {
            "name": "fit",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "SklearnWrapper.transform": {
            "name": "transform",
            "location": 97,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/target_correlation_filter.py": {
        "TargetCorrelationFilter.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "target_column": [
                    "str"
                ],
                "min_correlation": [
                    "float"
                ],
                "max_correlation": [
                    "float"
                ],
                "sample_ratio": [
                    "float"
                ],
                "seed": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "TargetCorrelationFilter.fit": {
            "name": "fit",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "TargetCorrelationFilter.transform": {
            "name": "transform",
            "location": 78,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/tree_based_filter.py": {
        "TreeBasedFilter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "target_column": [
                    "str"
                ],
                "categorical_target": [
                    "bool"
                ],
                "top_features": [
                    "int"
                ],
                "threshold": [
                    "float"
                ],
                "model_type": [
                    "str"
                ],
                "model_parameters": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "TreeBasedFilter.fit": {
            "name": "fit",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "TreeBasedFilter.transform": {
            "name": "transform",
            "location": 73,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/variance_filter.py": {
        "VarianceFilter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "min_variance": [
                    "float"
                ],
                "frequency_cut": [
                    "float"
                ],
                "unique_cut": [
                    "float"
                ],
                "sample_ratio": [
                    "float"
                ],
                "seed": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "VarianceFilter._get_freq_ratio": {
            "name": "_get_freq_ratio",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "column": [
                    "pd.Series"
                ]
            }
        },
        "VarianceFilter._get_percentage_of_unique_values": {
            "name": "_get_percentage_of_unique_values",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "column": [
                    "pd.Series"
                ]
            }
        },
        "VarianceFilter.fit": {
            "name": "fit",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "VarianceFilter.transform": {
            "name": "transform",
            "location": 90,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "featurefilter-master/featurefilter/__init__.py": {},
    "featurefilter-master/tests/test_abstract_transformer.py": {
        "test_fit_raises_not_implemented_error": {
            "name": "test_fit_raises_not_implemented_error",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_transform_raises_not_implemented_error": {
            "name": "test_transform_raises_not_implemented_error",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_fit_transform_raises_not_implemented_error": {
            "name": "test_fit_transform_raises_not_implemented_error",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_feature_correlation_filter.py": {
        "test_fit_high_continuous_correlation": {
            "name": "test_fit_high_continuous_correlation",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_excluding_target_column": {
            "name": "test_excluding_target_column",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_high_negative_continuous_correlation": {
            "name": "test_high_negative_continuous_correlation",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_categorical_correlation": {
            "name": "test_categorical_correlation",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_sample_ratio": {
            "name": "test_sample_ratio",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_sparse_data": {
            "name": "test_sparse_data",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_glm_filter.py": {
        "test_linear_regression_is_default_continuous_model": {
            "name": "test_linear_regression_is_default_continuous_model",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_logistic_regression_is_default_categorical_model": {
            "name": "test_logistic_regression_is_default_categorical_model",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_invalid_model_type": {
            "name": "test_invalid_model_type",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_continuous_logistic_regression_raises_exception": {
            "name": "test_continuous_logistic_regression_raises_exception",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_categorical_linear_regression_raises_exception": {
            "name": "test_categorical_linear_regression_raises_exception",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_ridge_model_type": {
            "name": "test_ridge_model_type",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_lasso_model_type": {
            "name": "test_lasso_model_type",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_elastic_net_model_type": {
            "name": "test_elastic_net_model_type",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_fit_sets_correct_columns_to_drop_with_continuous_target": {
            "name": "test_fit_sets_correct_columns_to_drop_with_continuous_target",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_fit_sets_correct_columns_to_drop_with_categorical_target": {
            "name": "test_fit_sets_correct_columns_to_drop_with_categorical_target",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_setting_model_parameters": {
            "name": "test_setting_model_parameters",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_fit_transform_removes_nothing_by_default": {
            "name": "test_fit_transform_removes_nothing_by_default",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_fit_transform_top_features": {
            "name": "test_fit_transform_top_features",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_fit_transform_threshold": {
            "name": "test_fit_transform_threshold",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "_capture_verbose_output_for_model": {
            "name": "_capture_verbose_output_for_model",
            "location": 149,
            "return": [],
            "arguments": {
                "filter": []
            }
        },
        "test_verbose_output_for_top_features": {
            "name": "test_verbose_output_for_top_features",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_threshold": {
            "name": "test_verbose_output_for_threshold",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_sparse_data": {
            "name": "test_sparse_data",
            "location": 182,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_na_filter.py": {
        "test_fit_returns_none": {
            "name": "test_fit_returns_none",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_fit_sets_correct_columns_to_drop": {
            "name": "test_fit_sets_correct_columns_to_drop",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_transform": {
            "name": "test_transform",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_sample_ratio": {
            "name": "test_sample_ratio",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_sparse_data": {
            "name": "test_sparse_data",
            "location": 54,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_sklearn_pipeline.py": {
        "_build_test_data": {
            "name": "_build_test_data",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "_build_test_pipeline": {
            "name": "_build_test_pipeline",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_pipeline_fit_sets_correct_columns_to_drop": {
            "name": "test_pipeline_fit_sets_correct_columns_to_drop",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_pipeline_fit_transform_returns_correct_dataframe": {
            "name": "test_pipeline_fit_transform_returns_correct_dataframe",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_sklearn_wrapper.py": {
        "test_removing_features_with_low_variance": {
            "name": "test_removing_features_with_low_variance",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_rfe": {
            "name": "test_rfe",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_rfecv": {
            "name": "test_rfecv",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_univariate_feature_selection": {
            "name": "test_univariate_feature_selection",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_missing_target_column": {
            "name": "test_missing_target_column",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_glm_based_feature_selection": {
            "name": "test_glm_based_feature_selection",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_prefit_model": {
            "name": "test_prefit_model",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_tree_based_feature_selection": {
            "name": "test_tree_based_feature_selection",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "_capture_verbose_output_for_model": {
            "name": "_capture_verbose_output_for_model",
            "location": 127,
            "return": [],
            "arguments": {
                "model": [],
                "use_supervised_df": []
            }
        },
        "test_verbose_output_for_variance_threshold": {
            "name": "test_verbose_output_for_variance_threshold",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_from_model": {
            "name": "test_verbose_output_for_select_from_model",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_percentile": {
            "name": "test_verbose_output_for_select_percentile",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_select_fpr": {
            "name": "test_verbose_output_for_select_select_fpr",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_select_fdr": {
            "name": "test_verbose_output_for_select_select_fdr",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_select_fwe": {
            "name": "test_verbose_output_for_select_select_fwe",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_select_k_best": {
            "name": "test_verbose_output_for_select_select_k_best",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_rfe": {
            "name": "test_verbose_output_for_select_rfe",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_select_rfecv": {
            "name": "test_verbose_output_for_select_rfecv",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "test_sparse_data": {
            "name": "test_sparse_data",
            "location": 246,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_target_correlation_filter.py": {
        "test_low_continuous_correlation": {
            "name": "test_low_continuous_correlation",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_high_negative_continuous_correlation": {
            "name": "test_high_negative_continuous_correlation",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_high_positive_continuous_correlation": {
            "name": "test_high_positive_continuous_correlation",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_low_categorical_correlation": {
            "name": "test_low_categorical_correlation",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_sample_ratio": {
            "name": "test_sample_ratio",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_sparse_data": {
            "name": "test_sparse_data",
            "location": 99,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_tree_based_filter.py": {
        "test_decision_tree_is_default_model": {
            "name": "test_decision_tree_is_default_model",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_invalid_model_type": {
            "name": "test_invalid_model_type",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_gradient_boosting_regressor_model_type": {
            "name": "test_gradient_boosting_regressor_model_type",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_gradient_boosting_classifier_model_type": {
            "name": "test_gradient_boosting_classifier_model_type",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_random_forest_regressor_model_type": {
            "name": "test_random_forest_regressor_model_type",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_random_forest_classifier_model_type": {
            "name": "test_random_forest_classifier_model_type",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_fit_returns_none": {
            "name": "test_fit_returns_none",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_fit_sets_correct_columns_to_drop_with_continuous_target": {
            "name": "test_fit_sets_correct_columns_to_drop_with_continuous_target",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_fit_sets_correct_columns_to_drop_with_categorical_target": {
            "name": "test_fit_sets_correct_columns_to_drop_with_categorical_target",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_setting_model_parameters": {
            "name": "test_setting_model_parameters",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_fit_transform_top_features": {
            "name": "test_fit_transform_top_features",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_fit_transform_threshold": {
            "name": "test_fit_transform_threshold",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "_capture_verbose_output_for_model": {
            "name": "_capture_verbose_output_for_model",
            "location": 141,
            "return": [],
            "arguments": {
                "filter": []
            }
        },
        "test_verbose_output_for_top_features": {
            "name": "test_verbose_output_for_top_features",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_verbose_output_for_threshold": {
            "name": "test_verbose_output_for_threshold",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_sparse_data": {
            "name": "test_sparse_data",
            "location": 174,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/pandas-backend/test_pandas_variance_filter.py": {
        "test_fit_returns_none": {
            "name": "test_fit_returns_none",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_fit_sets_correct_columns_to_drop": {
            "name": "test_fit_sets_correct_columns_to_drop",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_transform": {
            "name": "test_transform",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_fit_transform_continuous": {
            "name": "test_fit_transform_continuous",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_sample_ratio": {
            "name": "test_sample_ratio",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_remove_min_variance_for_categorical": {
            "name": "test_remove_min_variance_for_categorical",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_remove_min_variance_for_single_valued_variables": {
            "name": "test_remove_min_variance_for_single_valued_variables",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_sparse_data": {
            "name": "test_sparse_data",
            "location": 88,
            "return": [],
            "arguments": {}
        }
    },
    "featurefilter-master/tests/spark-backend/test_spark_na_filter.py": {
        "test_fit_returns_none": {
            "name": "test_fit_returns_none",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_fit_sets_correct_columns_to_drop": {
            "name": "test_fit_sets_correct_columns_to_drop",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_transform": {
            "name": "test_transform",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    }
}
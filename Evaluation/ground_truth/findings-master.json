{
    "findings-master/script.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "log": []
            }
        },
        "run_bash": {
            "name": "run_bash",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "bash": [
                    "str"
                ]
            }
        },
        "filter_whitelist": {
            "name": "filter_whitelist",
            "location": 106,
            "return": [
                "Set[ID]"
            ],
            "arguments": {
                "ids": [
                    "Set[ID]"
                ],
                "whitelist": [
                    "Set[ID]"
                ]
            }
        },
        "filter_blacklist": {
            "name": "filter_blacklist",
            "location": 113,
            "return": [
                "Set[ID]"
            ],
            "arguments": {
                "ids": [
                    "Set[ID]"
                ],
                "blacklist": [
                    "Set[ID]"
                ]
            }
        },
        "query_failure_ids": {
            "name": "query_failure_ids",
            "location": 120,
            "return": [
                "List[ID]"
            ],
            "arguments": {}
        },
        "query_failure_data": {
            "name": "query_failure_data",
            "location": 135,
            "return": [
                "Result"
            ],
            "arguments": {
                "id_": [
                    "ID"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "query_failures": {
            "name": "query_failures",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "query_successes_failures": {
            "name": "query_successes_failures",
            "location": 153,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {}
        },
        "build_bash_command": {
            "name": "build_bash_command",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "bash": [
                    "str"
                ],
                "sql": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "read_data": {
            "name": "read_data",
            "location": 172,
            "return": [
                "Dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_result": {
            "name": "get_result",
            "location": 180,
            "return": [
                "Result"
            ],
            "arguments": {
                "index": [
                    "int"
                ],
                "id_": [
                    "ID"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "get_results": {
            "name": "get_results",
            "location": 195,
            "return": [
                "List[Result]"
            ],
            "arguments": {}
        },
        "print_stats": {
            "name": "print_stats",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "delete_files_in_directory": {
            "name": "delete_files_in_directory",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": []
            }
        },
        "make_diff_dir": {
            "name": "make_diff_dir",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "diff_directory": [
                    "str"
                ]
            }
        },
        "make_diff_dirs": {
            "name": "make_diff_dirs",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "diff_directory": [
                    "str"
                ],
                "diff_subdirectories": [
                    "List[str]"
                ]
            }
        },
        "write_diff": {
            "name": "write_diff",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "diff_directory": [
                    "str"
                ],
                "diff_subdirectory": [
                    "str"
                ],
                "id_": [
                    "int"
                ],
                "diff": [
                    "str"
                ]
            }
        },
        "format_value": {
            "name": "format_value",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "Decimal"
                ]
            }
        },
        "format_observation_value": {
            "name": "format_observation_value",
            "location": 265,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "observation_value": [
                    "StoreDecimal"
                ]
            }
        },
        "eval_value": {
            "name": "eval_value",
            "location": 275,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "parse_values": {
            "name": "parse_values",
            "location": 286,
            "return": [
                "StoreDecimal"
            ],
            "arguments": {
                "store": [
                    "Store"
                ]
            }
        },
        "get_result_fields": {
            "name": "get_result_fields",
            "location": 290,
            "return": [
                "Tuple[(int, Data, StoreDecimal, StoreDecimal)]"
            ],
            "arguments": {
                "result": [
                    "Result"
                ],
                "diff_type": []
            }
        },
        "alternate_subtractions_and_additions": {
            "name": "alternate_subtractions_and_additions",
            "location": 316,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "diff_lines": [
                    "List[str]"
                ]
            }
        },
        "additions_and_subtractions_only": {
            "name": "additions_and_subtractions_only",
            "location": 324,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "diff_lines": [
                    "List[str]"
                ]
            }
        },
        "remove_insignificant": {
            "name": "remove_insignificant",
            "location": 328,
            "return": [
                "Tuple[(Store, Store)]"
            ],
            "arguments": {
                "control": [
                    "Store"
                ],
                "observation": [
                    "Store"
                ]
            }
        },
        "format_diff": {
            "name": "format_diff",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "diff_lines": [
                    "List[str]"
                ],
                "diff_type": [
                    "str"
                ]
            }
        },
        "nodes_are_equal": {
            "name": "nodes_are_equal",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "store1": [
                    "Store"
                ],
                "store2": [
                    "Store"
                ]
            }
        },
        "is_about_equal": {
            "name": "is_about_equal",
            "location": 351,
            "return": [
                "bool"
            ],
            "arguments": {
                "control": [
                    "str"
                ],
                "observation": [
                    "str"
                ]
            }
        },
        "is_significant": {
            "name": "is_significant",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {
                "control": [
                    "Store"
                ],
                "observation": [
                    "Store"
                ]
            }
        },
        "print_is_significant": {
            "name": "print_is_significant",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": [
                    "Result"
                ]
            }
        },
        "diff_result": {
            "name": "diff_result",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "Result"
                ],
                "diff_type": [
                    "str"
                ]
            }
        }
    },
    "findings-master/server.py": {
        "json_stream": {
            "name": "json_stream",
            "location": 36,
            "return": [],
            "arguments": {
                "obj": [],
                "skipkeys": [],
                "ensure_ascii": [],
                "check_circular": [],
                "allow_nan": [],
                "cls": [],
                "indent": [],
                "separators": [],
                "encoding": [],
                "default": [],
                "sort_keys": []
            }
        },
        "buffered": {
            "name": "buffered",
            "location": 57,
            "return": [],
            "arguments": {
                "iterable": [],
                "buflen": []
            }
        },
        "DateAndDateTimeSupportingJSONEncoder.default": {
            "name": "default",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "JSONTranslator.process_request": {
            "name": "process_request",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "JSONTranslator.process_response": {
            "name": "process_response",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [],
                "resource": []
            }
        },
        "PostgresConnectionPool.process_request": {
            "name": "process_request",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "PostgresConnectionPool.process_response": {
            "name": "process_response",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [],
                "resource": []
            }
        },
        "MatchResource.on_post": {
            "name": "on_post",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "MismatchDataResource.on_post": {
            "name": "on_post",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "StreamedDict.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "f": []
            }
        },
        "StreamedDict.iteritems": {
            "name": "iteritems",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamedDict.__len__": {
            "name": "__len__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamedList.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "f": []
            }
        },
        "StreamedList.__iter__": {
            "name": "__iter__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamedList.__len__": {
            "name": "__len__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataDownloadResource.on_get": {
            "name": "on_get",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "DataDownloadResource.on_get.date_match_record": {
            "name": "date_match_record",
            "location": 186,
            "return": [],
            "arguments": {
                "record": []
            }
        }
    }
}
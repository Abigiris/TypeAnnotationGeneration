{
    "fklearn-master/setup.py": {
        "requirements_from_pip": {
            "name": "requirements_from_pip",
            "location": 11,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "fklearn-master/docs/source/conf.py": {},
    "fklearn-master/src/fklearn/common_docstrings.py": {
        "learner_pred_fn_docstring": {
            "name": "learner_pred_fn_docstring",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "f_name": [
                    "str"
                ],
                "shap": [
                    "bool"
                ]
            }
        },
        "learner_return_docstring": {
            "name": "learner_return_docstring",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/version.py": {
        "version": {
            "name": "version",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "fklearn-master/src/fklearn/__init__.py": {},
    "fklearn-master/src/fklearn/causal/debias.py": {
        "debias_with_regression_formula": {
            "name": "debias_with_regression_formula",
            "location": 15,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ],
                "confounder_formula": [
                    "str"
                ],
                "suffix": [
                    "str"
                ],
                "denoise": [
                    "bool"
                ]
            }
        },
        "debias_with_regression": {
            "name": "debias_with_regression",
            "location": 69,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ],
                "confounder_columns": [
                    "List[str]"
                ],
                "suffix": [
                    "str"
                ],
                "denoise": [
                    "bool"
                ]
            }
        },
        "debias_with_fixed_effects": {
            "name": "debias_with_fixed_effects",
            "location": 124,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ],
                "confounder_columns": [
                    "List[str]"
                ],
                "suffix": [
                    "str"
                ],
                "denoise": [
                    "bool"
                ]
            }
        },
        "debias_with_double_ml": {
            "name": "debias_with_double_ml",
            "location": 175,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ],
                "confounder_columns": [
                    "List[str]"
                ],
                "ml_regressor": [
                    "RegressorMixin"
                ],
                "extra_params": [
                    "Dict[(str, Any)]"
                ],
                "cv": [
                    "int"
                ],
                "suffix": [
                    "str"
                ],
                "denoise": [
                    "bool"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "debias_with_regression_formula.get_resid": {
            "name": "get_resid",
            "location": 61,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "col_to_debias": [
                    "str"
                ]
            }
        },
        "debias_with_fixed_effects.debias_column": {
            "name": "debias_column",
            "location": 167,
            "return": [
                "dict"
            ],
            "arguments": {
                "c": [
                    "str"
                ]
            }
        },
        "debias_with_double_ml.get_cv_resid": {
            "name": "get_cv_resid",
            "location": 241,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "col_to_debias": [
                    "str"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/causal/effects.py": {
        "_apply_effect": {
            "name": "_apply_effect",
            "location": 9,
            "return": [
                "float"
            ],
            "arguments": {
                "evaluator": [
                    "Callable[(..., Dict[(str, float)])]"
                ],
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ]
            }
        },
        "linear_effect": {
            "name": "linear_effect",
            "location": 17,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ]
            }
        },
        "spearman_effect": {
            "name": "spearman_effect",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ]
            }
        },
        "pearson_effect": {
            "name": "pearson_effect",
            "location": 68,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ]
            }
        },
        "exponential_coefficient_effect": {
            "name": "exponential_coefficient_effect",
            "location": 93,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ]
            }
        },
        "logistic_coefficient_effect": {
            "name": "logistic_coefficient_effect",
            "location": 120,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/causal/__init__.py": {},
    "fklearn-master/src/fklearn/causal/cate_learning/double_machine_learning.py": {
        "_cv_estimate": {
            "name": "_cv_estimate",
            "location": 18,
            "return": [
                "Tuple[(pd.Series, List[RegressorMixin])]"
            ],
            "arguments": {
                "model": [
                    "RegressorMixin"
                ],
                "train_data": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "y": [
                    "str"
                ],
                "n_splits": [
                    "int"
                ]
            }
        },
        "non_parametric_double_ml_learner": {
            "name": "non_parametric_double_ml_learner",
            "location": 38,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "feature_columns": [
                    "List[str]"
                ],
                "treatment_column": [
                    "str"
                ],
                "outcome_column": [
                    "str"
                ],
                "debias_model": [
                    "Union[(RegressorMixin, None)]"
                ],
                "debias_feature_columns": [
                    "List[str]"
                ],
                "denoise_model": [
                    "Union[(RegressorMixin, None)]"
                ],
                "denoise_feature_columns": [
                    "List[str]"
                ],
                "final_model": [
                    "Union[(RegressorMixin, None)]"
                ],
                "final_model_feature_columns": [
                    "List[str]"
                ],
                "prediction_column": [
                    "str"
                ],
                "cv_splits": [
                    "int"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "non_parametric_double_ml_learner.p": {
            "name": "p",
            "location": 140,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/causal/cate_learning/__init__.py": {},
    "fklearn-master/src/fklearn/causal/validation/auc.py": {
        "area_under_the_cumulative_effect_curve": {
            "name": "area_under_the_cumulative_effect_curve",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "min_rows": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        },
        "area_under_the_cumulative_gain_curve": {
            "name": "area_under_the_cumulative_gain_curve",
            "location": 64,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "min_rows": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        },
        "area_under_the_relative_cumulative_gain_curve": {
            "name": "area_under_the_relative_cumulative_gain_curve",
            "location": 117,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "min_rows": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/causal/validation/cate.py": {
        "_validate_test_and_control_groups": {
            "name": "_validate_test_and_control_groups",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "group_column": [
                    "str"
                ],
                "control_group_name": [
                    "str"
                ]
            }
        },
        "cate_mean_by_bin": {
            "name": "cate_mean_by_bin",
            "location": 48,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "group_column": [
                    "str"
                ],
                "control_group_name": [
                    "str"
                ],
                "bin_column": [
                    "str"
                ],
                "n_bins": [
                    "int"
                ],
                "allow_dropped_bins": [
                    "bool"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ]
            }
        },
        "cate_mean_by_bin_meta_evaluator": {
            "name": "cate_mean_by_bin_meta_evaluator",
            "location": 120,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "group_column": [
                    "str"
                ],
                "control_group_name": [
                    "str"
                ],
                "bin_column": [
                    "str"
                ],
                "n_bins": [
                    "int"
                ],
                "allow_dropped_bins": [
                    "bool"
                ],
                "inner_evaluator": [
                    "UncurriedEvalFnType"
                ],
                "eval_name": [
                    "str"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/causal/validation/curves.py": {
        "effect_by_segment": {
            "name": "effect_by_segment",
            "location": 12,
            "return": [
                "pd.Series"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "segments": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        },
        "cumulative_effect_curve": {
            "name": "cumulative_effect_curve",
            "location": 56,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "min_rows": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        },
        "cumulative_gain_curve": {
            "name": "cumulative_gain_curve",
            "location": 104,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "min_rows": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        },
        "relative_cumulative_gain_curve": {
            "name": "relative_cumulative_gain_curve",
            "location": 156,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "min_rows": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        },
        "effect_curves": {
            "name": "effect_curves",
            "location": 210,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "treatment": [
                    "str"
                ],
                "outcome": [
                    "str"
                ],
                "prediction": [
                    "str"
                ],
                "min_rows": [
                    "int"
                ],
                "steps": [
                    "int"
                ],
                "effect_fn": [
                    "EffectFnType"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/causal/validation/__init__.py": {},
    "fklearn-master/src/fklearn/data/datasets.py": {
        "make_tutorial_data": {
            "name": "make_tutorial_data",
            "location": 8,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "make_confounded_data": {
            "name": "make_confounded_data",
            "location": 46,
            "return": [
                "Tuple[(pd.DataFrame, pd.DataFrame, pd.DataFrame)]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "make_confounded_data.get_severity": {
            "name": "get_severity",
            "location": 70,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "make_confounded_data.get_treatment": {
            "name": "get_treatment",
            "location": 74,
            "return": [
                "pd.Series"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "make_confounded_data.get_recovery": {
            "name": "get_recovery",
            "location": 79,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/data/__init__.py": {},
    "fklearn-master/src/fklearn/metrics/pd_extractors.py": {
        "evaluator_extractor": {
            "name": "evaluator_extractor",
            "location": 11,
            "return": [],
            "arguments": {
                "result": [],
                "evaluator_name": []
            }
        },
        "combined_evaluator_extractor": {
            "name": "combined_evaluator_extractor",
            "location": 17,
            "return": [],
            "arguments": {
                "result": [],
                "base_extractors": []
            }
        },
        "split_evaluator_extractor_iteration": {
            "name": "split_evaluator_extractor_iteration",
            "location": 22,
            "return": [],
            "arguments": {
                "split_value": [],
                "result": [],
                "split_col": [],
                "base_extractor": [],
                "eval_name": []
            }
        },
        "split_evaluator_extractor": {
            "name": "split_evaluator_extractor",
            "location": 33,
            "return": [],
            "arguments": {
                "result": [],
                "split_col": [],
                "split_values": [],
                "base_extractor": [],
                "eval_name": []
            }
        },
        "temporal_split_evaluator_extractor": {
            "name": "temporal_split_evaluator_extractor",
            "location": 41,
            "return": [],
            "arguments": {
                "result": [],
                "time_col": [],
                "base_extractor": [],
                "time_format": [],
                "eval_name": []
            }
        },
        "learning_curve_evaluator_extractor": {
            "name": "learning_curve_evaluator_extractor",
            "location": 61,
            "return": [],
            "arguments": {
                "result": [],
                "base_extractor": []
            }
        },
        "reverse_learning_curve_evaluator_extractor": {
            "name": "reverse_learning_curve_evaluator_extractor",
            "location": 66,
            "return": [],
            "arguments": {
                "result": [],
                "base_extractor": []
            }
        },
        "stability_curve_evaluator_extractor": {
            "name": "stability_curve_evaluator_extractor",
            "location": 71,
            "return": [],
            "arguments": {
                "result": [],
                "base_extractor": []
            }
        },
        "repeat_split_log": {
            "name": "repeat_split_log",
            "location": 76,
            "return": [],
            "arguments": {
                "split_log": [],
                "results_len": []
            }
        },
        "extract_base_iteration": {
            "name": "extract_base_iteration",
            "location": 86,
            "return": [],
            "arguments": {
                "result": [],
                "extractor": []
            }
        },
        "extract": {
            "name": "extract",
            "location": 99,
            "return": [],
            "arguments": {
                "validator_results": [],
                "extractor": []
            }
        },
        "extract_lc": {
            "name": "extract_lc",
            "location": 104,
            "return": [],
            "arguments": {
                "validator_results": [],
                "extractor": []
            }
        },
        "extract_reverse_lc": {
            "name": "extract_reverse_lc",
            "location": 109,
            "return": [],
            "arguments": {
                "validator_results": [],
                "extractor": []
            }
        },
        "extract_sc": {
            "name": "extract_sc",
            "location": 114,
            "return": [],
            "arguments": {
                "validator_results": [],
                "extractor": []
            }
        },
        "extract_param_tuning_iteration": {
            "name": "extract_param_tuning_iteration",
            "location": 119,
            "return": [],
            "arguments": {
                "iteration": [],
                "tuning_log": [],
                "base_extractor": [],
                "model_learner_name": []
            }
        },
        "extract_tuning": {
            "name": "extract_tuning",
            "location": 125,
            "return": [],
            "arguments": {
                "tuning_log": [],
                "base_extractor": [],
                "model_learner_name": []
            }
        },
        "permutation_extractor": {
            "name": "permutation_extractor",
            "location": 132,
            "return": [],
            "arguments": {
                "results": [],
                "base_extractor": []
            }
        }
    },
    "fklearn-master/src/fklearn/metrics/__init__.py": {},
    "fklearn-master/src/fklearn/preprocessing/rebalancing.py": {
        "rebalance_by_categorical": {
            "name": "rebalance_by_categorical",
            "location": 6,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "pd.DataFrame"
                ],
                "categ_column": [
                    "str"
                ],
                "max_lines_by_categ": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "rebalance_by_continuous": {
            "name": "rebalance_by_continuous",
            "location": 41,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "pd.DataFrame"
                ],
                "continuous_column": [
                    "str"
                ],
                "buckets": [
                    "int"
                ],
                "max_lines_by_categ": [
                    "int"
                ],
                "by_quantile": [
                    "bool"
                ],
                "seed": [
                    "int"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/preprocessing/schema.py": {
        "feature_duplicator": {
            "name": "feature_duplicator",
            "location": 11,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_duplicate": [
                    "Optional[List[str]]"
                ],
                "columns_mapping": [
                    "Optional[Dict[(str, str)]]"
                ],
                "prefix": [
                    "Optional[str]"
                ],
                "suffix": [
                    "Optional[str]"
                ]
            }
        },
        "column_duplicatable": {
            "name": "column_duplicatable",
            "location": 83,
            "return": [
                "Callable"
            ],
            "arguments": {
                "columns_to_bind": [
                    "str"
                ]
            }
        },
        "feature_duplicator.p": {
            "name": "p",
            "location": 64,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "column_duplicatable._decorator": {
            "name": "_decorator",
            "location": 96,
            "return": [
                "Callable"
            ],
            "arguments": {
                "child": [
                    "toolz.curry"
                ]
            }
        },
        "column_duplicatable._decorator._init": {
            "name": "_init",
            "location": 99,
            "return": [
                "Union[(Callable, LearnerReturnType)]"
            ],
            "arguments": {}
        }
    },
    "fklearn-master/src/fklearn/preprocessing/splitting.py": {
        "time_split_dataset": {
            "name": "time_split_dataset",
            "location": 13,
            "return": [
                "Tuple[(pd.DataFrame, pd.DataFrame)]"
            ],
            "arguments": {
                "dataset": [
                    "pd.DataFrame"
                ],
                "train_start_date": [
                    "DateType"
                ],
                "train_end_date": [
                    "DateType"
                ],
                "holdout_end_date": [
                    "DateType"
                ],
                "time_column": [
                    "str"
                ],
                "holdout_start_date": [
                    "DateType"
                ]
            }
        },
        "space_time_split_dataset": {
            "name": "space_time_split_dataset",
            "location": 72,
            "return": [
                "Tuple[(pd.DataFrame, ...)]"
            ],
            "arguments": {
                "dataset": [
                    "pd.DataFrame"
                ],
                "train_start_date": [
                    "DateType"
                ],
                "train_end_date": [
                    "DateType"
                ],
                "holdout_end_date": [
                    "DateType"
                ],
                "split_seed": [
                    "int"
                ],
                "space_holdout_percentage": [
                    "float"
                ],
                "space_column": [
                    "str"
                ],
                "time_column": [
                    "str"
                ],
                "holdout_space": [
                    "np.ndarray"
                ],
                "holdout_start_date": [
                    "DateType"
                ]
            }
        },
        "stratified_split_dataset": {
            "name": "stratified_split_dataset",
            "location": 179,
            "return": [
                "Tuple[(pd.DataFrame, pd.DataFrame)]"
            ],
            "arguments": {
                "dataset": [
                    "pd.DataFrame"
                ],
                "target_column": [
                    "str"
                ],
                "test_size": [
                    "float"
                ],
                "random_state": [
                    "Optional[int]"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/preprocessing/__init__.py": {},
    "fklearn-master/src/fklearn/training/calibration.py": {
        "isotonic_calibration_learner": {
            "name": "isotonic_calibration_learner",
            "location": 14,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "target_column": [
                    "str"
                ],
                "prediction_column": [
                    "str"
                ],
                "output_column": [
                    "str"
                ],
                "y_min": [
                    "float"
                ],
                "y_max": [
                    "float"
                ]
            }
        },
        "find_thresholds_with_same_risk": {
            "name": "find_thresholds_with_same_risk",
            "location": 75,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "sensitive_factor": [
                    "str"
                ],
                "unfair_band_column": [
                    "str"
                ],
                "model_prediction_output": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "output_column_name": [
                    "str"
                ]
            }
        },
        "isotonic_calibration_learner.p": {
            "name": "p",
            "location": 53,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "find_thresholds_with_same_risk._find_thresholds_with_same_risk": {
            "name": "_find_thresholds_with_same_risk",
            "location": 110,
            "return": [
                "list"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "metric_by_band": [
                    "pd.DataFrame"
                ]
            }
        },
        "find_thresholds_with_same_risk.p": {
            "name": "p",
            "location": 141,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/classification.py": {
        "logistic_classification_learner": {
            "name": "logistic_classification_learner",
            "location": 17,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "params": [
                    "LogType"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "xgb_classification_learner": {
            "name": "xgb_classification_learner",
            "location": 100,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "learning_rate": [
                    "float"
                ],
                "num_estimators": [
                    "int"
                ],
                "extra_params": [
                    "LogType"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "_get_catboost_shap_values": {
            "name": "_get_catboost_shap_values",
            "location": 234,
            "return": [
                "np.array"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "cbr": [
                    "Any"
                ],
                "features": [
                    "List"
                ],
                "target": [
                    "str"
                ],
                "weights": [
                    "List"
                ],
                "cat_features": [
                    "List"
                ]
            }
        },
        "catboost_classification_learner": {
            "name": "catboost_classification_learner",
            "location": 275,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "learning_rate": [
                    "float"
                ],
                "num_estimators": [
                    "int"
                ],
                "extra_params": [
                    "LogType"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "nlp_logistic_classification_learner": {
            "name": "nlp_logistic_classification_learner",
            "location": 410,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "text_feature_cols": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "vectorizer_params": [
                    "LogType"
                ],
                "logistic_params": [
                    "LogType"
                ],
                "prediction_column": [
                    "str"
                ]
            }
        },
        "lgbm_classification_learner": {
            "name": "lgbm_classification_learner",
            "location": 499,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "learning_rate": [
                    "float"
                ],
                "num_estimators": [
                    "int"
                ],
                "extra_params": [
                    "LogType"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "logistic_classification_learner.p": {
            "name": "p",
            "location": 69,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "xgb_classification_learner.p": {
            "name": "p",
            "location": 176,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ],
                "apply_shap": [
                    "bool"
                ]
            }
        },
        "catboost_classification_learner.p": {
            "name": "p",
            "location": 354,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ],
                "apply_shap": [
                    "bool"
                ]
            }
        },
        "nlp_logistic_classification_learner.p": {
            "name": "p",
            "location": 463,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "lgbm_classification_learner.p": {
            "name": "p",
            "location": 577,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ],
                "apply_shap": [
                    "bool"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/ensemble.py": {
        "xgb_octopus_classification_learner": {
            "name": "xgb_octopus_classification_learner",
            "location": 16,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "train_set": [
                    "pd.DataFrame"
                ],
                "learning_rate_by_bin": [
                    "Dict[(T, float)]"
                ],
                "num_estimators_by_bin": [
                    "Dict[(T, int)]"
                ],
                "extra_params_by_bin": [
                    "Dict[(T, Dict[(str, Any)])]"
                ],
                "features_by_bin": [
                    "Dict[(T, List[str])]"
                ],
                "train_split_col": [
                    "str"
                ],
                "train_split_bins": [
                    "List"
                ],
                "nthread": [
                    "int"
                ],
                "target_column": [
                    "str"
                ],
                "prediction_column": [
                    "str"
                ]
            }
        },
        "xgb_octopus_classification_learner.p": {
            "name": "p",
            "location": 136,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/imputation.py": {
        "imputer": {
            "name": "imputer",
            "location": 14,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_impute": [
                    "List[str]"
                ],
                "impute_strategy": [
                    "str"
                ],
                "placeholder_value": [
                    "Optional[Any]"
                ]
            }
        },
        "placeholder_imputer": {
            "name": "placeholder_imputer",
            "location": 88,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_impute": [
                    "List[str]"
                ],
                "placeholder_value": [
                    "Any"
                ]
            }
        },
        "imputer.p": {
            "name": "p",
            "location": 59,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_data_set": [
                    "pd.DataFrame"
                ]
            }
        },
        "placeholder_imputer.p": {
            "name": "p",
            "location": 108,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_data_set": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/pipeline.py": {
        "build_pipeline": {
            "name": "build_pipeline",
            "location": 11,
            "return": [
                "LearnerFnType"
            ],
            "arguments": {}
        },
        "build_pipeline._has_one_unfilled_arg": {
            "name": "_has_one_unfilled_arg",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "learner": [
                    "LearnerFnType"
                ]
            }
        },
        "build_pipeline._no_variable_args": {
            "name": "_no_variable_args",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "learner": [
                    "LearnerFnType"
                ],
                "predict_fn": [
                    "PredictFnType"
                ]
            }
        },
        "build_pipeline.pipeline": {
            "name": "pipeline",
            "location": 66,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ]
            }
        },
        "build_pipeline.pipeline.predict_fn": {
            "name": "predict_fn",
            "location": 93,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/regression.py": {
        "linear_regression_learner": {
            "name": "linear_regression_learner",
            "location": 17,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "xgb_regression_learner": {
            "name": "xgb_regression_learner",
            "location": 92,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "learning_rate": [
                    "float"
                ],
                "num_estimators": [
                    "int"
                ],
                "extra_params": [
                    "Dict[(str, Any)]"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "catboost_regressor_learner": {
            "name": "catboost_regressor_learner",
            "location": 204,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "learning_rate": [
                    "float"
                ],
                "num_estimators": [
                    "int"
                ],
                "extra_params": [
                    "Dict[(str, Any)]"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ]
            }
        },
        "gp_regression_learner": {
            "name": "gp_regression_learner",
            "location": 309,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "kernel": [
                    "kernels.Kernel"
                ],
                "alpha": [
                    "float"
                ],
                "extra_variance": [
                    "Union[(str, float)]"
                ],
                "return_std": [
                    "bool"
                ],
                "extra_params": [
                    "Dict[(str, Any)]"
                ],
                "prediction_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "lgbm_regression_learner": {
            "name": "lgbm_regression_learner",
            "location": 409,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "learning_rate": [
                    "float"
                ],
                "num_estimators": [
                    "int"
                ],
                "extra_params": [
                    "Dict[(str, Any)]"
                ],
                "prediction_column": [
                    "str"
                ],
                "weight_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "custom_supervised_model_learner": {
            "name": "custom_supervised_model_learner",
            "location": 523,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "model": [
                    "Any"
                ],
                "supervised_type": [
                    "str"
                ],
                "log": [
                    "Dict[(str, Dict)]"
                ],
                "prediction_column": [
                    "str"
                ]
            }
        },
        "linear_regression_learner.p": {
            "name": "p",
            "location": 68,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "xgb_regression_learner.p": {
            "name": "p",
            "location": 166,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ],
                "apply_shap": [
                    "bool"
                ]
            }
        },
        "catboost_regressor_learner.p": {
            "name": "p",
            "location": 271,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ],
                "apply_shap": [
                    "bool"
                ]
            }
        },
        "gp_regression_learner.p": {
            "name": "p",
            "location": 380,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "lgbm_regression_learner.p": {
            "name": "p",
            "location": 486,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ],
                "apply_shap": [
                    "bool"
                ]
            }
        },
        "custom_supervised_model_learner.p": {
            "name": "p",
            "location": 582,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/transformation.py": {
        "selector": {
            "name": "selector",
            "location": 17,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "training_columns": [
                    "List[str]"
                ],
                "predict_columns": [
                    "List[str]"
                ]
            }
        },
        "capper": {
            "name": "capper",
            "location": 58,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_cap": [
                    "List[str]"
                ],
                "precomputed_caps": [
                    "Dict[(str, float)]"
                ]
            }
        },
        "floorer": {
            "name": "floorer",
            "location": 105,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_floor": [
                    "List[str]"
                ],
                "precomputed_floors": [
                    "Dict[(str, float)]"
                ]
            }
        },
        "ecdfer": {
            "name": "ecdfer",
            "location": 152,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "ascending": [
                    "bool"
                ],
                "prediction_column": [
                    "str"
                ],
                "ecdf_column": [
                    "str"
                ],
                "max_range": [
                    "int"
                ]
            }
        },
        "discrete_ecdfer": {
            "name": "discrete_ecdfer",
            "location": 211,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "ascending": [
                    "bool"
                ],
                "prediction_column": [
                    "str"
                ],
                "ecdf_column": [
                    "str"
                ],
                "max_range": [
                    "int"
                ],
                "round_method": [
                    "Callable"
                ]
            }
        },
        "prediction_ranger": {
            "name": "prediction_ranger",
            "location": 292,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "prediction_min": [
                    "float"
                ],
                "prediction_max": [
                    "float"
                ],
                "prediction_column": [
                    "str"
                ]
            }
        },
        "apply_replacements": {
            "name": "apply_replacements",
            "location": 332,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns": [
                    "List[str]"
                ],
                "vec": [
                    "Dict[(str, Dict)]"
                ],
                "replace_unseen": [
                    "Any"
                ]
            }
        },
        "value_mapper": {
            "name": "value_mapper",
            "location": 367,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "value_maps": [
                    "Dict[(str, Dict)]"
                ],
                "ignore_unseen": [
                    "bool"
                ],
                "replace_unseen_to": [
                    "Any"
                ]
            }
        },
        "truncate_categorical": {
            "name": "truncate_categorical",
            "location": 411,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_truncate": [
                    "List[str]"
                ],
                "percentile": [
                    "float"
                ],
                "replacement": [
                    "Union[(str, float)]"
                ],
                "replace_unseen": [
                    "Union[(str, float)]"
                ],
                "store_mapping": [
                    "bool"
                ]
            }
        },
        "rank_categorical": {
            "name": "rank_categorical",
            "location": 476,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_rank": [
                    "List[str]"
                ],
                "replace_unseen": [
                    "Union[(str, float)]"
                ],
                "store_mapping": [
                    "bool"
                ]
            }
        },
        "count_categorizer": {
            "name": "count_categorizer",
            "location": 534,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_categorize": [
                    "List[str]"
                ],
                "replace_unseen": [
                    "int"
                ],
                "store_mapping": [
                    "bool"
                ]
            }
        },
        "label_categorizer": {
            "name": "label_categorizer",
            "location": 587,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_categorize": [
                    "List[str]"
                ],
                "replace_unseen": [
                    "Union[(str, float)]"
                ],
                "store_mapping": [
                    "bool"
                ]
            }
        },
        "quantile_biner": {
            "name": "quantile_biner",
            "location": 643,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_bin": [
                    "List[str]"
                ],
                "q": [
                    "int"
                ],
                "right": [
                    "bool"
                ]
            }
        },
        "onehot_categorizer": {
            "name": "onehot_categorizer",
            "location": 700,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_categorize": [
                    "List[str]"
                ],
                "hardcode_nans": [
                    "bool"
                ],
                "drop_first_column": [
                    "bool"
                ],
                "store_mapping": [
                    "bool"
                ]
            }
        },
        "target_categorizer": {
            "name": "target_categorizer",
            "location": 770,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_categorize": [
                    "List[str]"
                ],
                "target_column": [
                    "str"
                ],
                "smoothing": [
                    "float"
                ],
                "ignore_unseen": [
                    "bool"
                ],
                "store_mapping": [
                    "bool"
                ]
            }
        },
        "standard_scaler": {
            "name": "standard_scaler",
            "location": 847,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_scale": [
                    "List[str]"
                ]
            }
        },
        "custom_transformer": {
            "name": "custom_transformer",
            "location": 892,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "columns_to_transform": [
                    "List[str]"
                ],
                "transformation_function": [
                    "Callable[([pd.DataFrame], pd.DataFrame)]"
                ],
                "is_vectorized": [
                    "bool"
                ]
            }
        },
        "null_injector": {
            "name": "null_injector",
            "location": 940,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "proportion": [
                    "float"
                ],
                "columns_to_inject": [
                    "Optional[List[str]]"
                ],
                "groups": [
                    "Optional[List[List[str]]]"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "missing_warner": {
            "name": "missing_warner",
            "location": 1001,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "cols_list": [
                    "List[str]"
                ],
                "new_column_name": [
                    "str"
                ],
                "detailed_warning": [
                    "bool"
                ],
                "detailed_column_name": [
                    "Optional[str]"
                ]
            }
        },
        "selector.p": {
            "name": "p",
            "location": 39,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_data_set": [
                    "pd.DataFrame"
                ]
            }
        },
        "capper.p": {
            "name": "p",
            "location": 85,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_data_set": [
                    "pd.DataFrame"
                ]
            }
        },
        "floorer.p": {
            "name": "p",
            "location": 133,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_data_set": [
                    "pd.DataFrame"
                ]
            }
        },
        "ecdfer.p": {
            "name": "p",
            "location": 192,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "discrete_ecdfer.p": {
            "name": "p",
            "location": 277,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "prediction_ranger.p": {
            "name": "p",
            "location": 314,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "value_mapper.new_col_value_map": {
            "name": "new_col_value_map",
            "location": 393,
            "return": [
                "Dict[(Any, Dict)]"
            ],
            "arguments": {
                "old_col_value_map": [
                    "Dict[(Any, Any)]"
                ],
                "new_keys": [
                    "List[Any]"
                ]
            }
        },
        "value_mapper.p": {
            "name": "p",
            "location": 402,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "truncate_categorical.p": {
            "name": "p",
            "location": 454,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "rank_categorical.p": {
            "name": "p",
            "location": 512,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "count_categorizer.p": {
            "name": "p",
            "location": 565,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "label_categorizer.categ_dict": {
            "name": "categ_dict",
            "location": 615,
            "return": [
                "Dict"
            ],
            "arguments": {
                "series": [
                    "pd.Series"
                ]
            }
        },
        "label_categorizer.p": {
            "name": "p",
            "location": 621,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "quantile_biner.p": {
            "name": "p",
            "location": 680,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "onehot_categorizer.p": {
            "name": "p",
            "location": 738,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "target_categorizer.categ_target_dict": {
            "name": "categ_target_dict",
            "location": 811,
            "return": [
                "Dict"
            ],
            "arguments": {
                "column": [
                    "str"
                ]
            }
        },
        "target_categorizer.p": {
            "name": "p",
            "location": 823,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        },
        "standard_scaler.p": {
            "name": "p",
            "location": 872,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_data_set": [
                    "pd.DataFrame"
                ]
            }
        },
        "custom_transformer.p": {
            "name": "p",
            "location": 919,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "null_injector.p": {
            "name": "p",
            "location": 982,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_data_set": [
                    "pd.DataFrame"
                ]
            }
        },
        "missing_warner.p": {
            "name": "p",
            "location": 1029,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "dataset": [
                    "pd.DataFrame"
                ]
            }
        },
        "missing_warner.p.detailed_assignment": {
            "name": "detailed_assignment",
            "location": 1030,
            "return": [
                "np.array"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "cols_to_check": [
                    "List[str]"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/unsupervised.py": {
        "isolation_forest_learner": {
            "name": "isolation_forest_learner",
            "location": 15,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "prediction_column": [
                    "str"
                ],
                "encode_extra_cols": [
                    "bool"
                ]
            }
        },
        "isolation_forest_learner.p": {
            "name": "p",
            "location": 54,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "new_df": [
                    "pd.DataFrame"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/utils.py": {
        "log_learner_time": {
            "name": "log_learner_time",
            "location": 14,
            "return": [
                "UncurriedLearnerFnType"
            ],
            "arguments": {
                "learner": [
                    "UncurriedLearnerFnType"
                ],
                "learner_name": [
                    "str"
                ]
            }
        },
        "print_learner_run": {
            "name": "print_learner_run",
            "location": 25,
            "return": [
                "UncurriedLearnerFnType"
            ],
            "arguments": {
                "learner": [
                    "UncurriedLearnerFnType"
                ],
                "learner_name": [
                    "str"
                ]
            }
        },
        "expand_features_encoded": {
            "name": "expand_features_encoded",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ]
            }
        },
        "log_learner_time.timed_learner": {
            "name": "timed_learner",
            "location": 16,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {}
        },
        "print_learner_run.printed_learner": {
            "name": "printed_learner",
            "location": 27,
            "return": [
                "LearnerReturnType"
            ],
            "arguments": {}
        },
        "expand_features_encoded.fklearn_features": {
            "name": "fklearn_features",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ]
            }
        },
        "expand_features_encoded.feature_prefix": {
            "name": "feature_prefix",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "feature": [
                    "str"
                ]
            }
        },
        "expand_features_encoded.filter_non_listed_features": {
            "name": "filter_non_listed_features",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "fklearn_features": [
                    "List[str]"
                ],
                "features": [
                    "List[str]"
                ]
            }
        },
        "expand_features_encoded.remove_original_pre_encoded_features": {
            "name": "remove_original_pre_encoded_features",
            "location": 71,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "features": [
                    "List[str]"
                ],
                "encoded_features": [
                    "List[str]"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/training/__init__.py": {},
    "fklearn-master/src/fklearn/tuning/model_agnostic_fc.py": {
        "correlation_feature_selection": {
            "name": "correlation_feature_selection",
            "location": 11,
            "return": [
                "LogType"
            ],
            "arguments": {
                "train_set": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "variance_feature_selection": {
            "name": "variance_feature_selection",
            "location": 52,
            "return": [
                "LogType"
            ],
            "arguments": {
                "train_set": [
                    "pd.DataFrame"
                ],
                "features": [
                    "List[str]"
                ],
                "threshold": [
                    "float"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/tuning/parameter_tuners.py": {
        "random_search_tuner": {
            "name": "random_search_tuner",
            "location": 16,
            "return": [
                "List[ValidatorReturnType]"
            ],
            "arguments": {
                "space": [
                    "LogType"
                ],
                "train_set": [
                    "pd.DataFrame"
                ],
                "param_train_fn": [
                    "Callable[([LogType], LearnerFnType)]"
                ],
                "split_fn": [
                    "SplitterFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "iterations": [
                    "int"
                ],
                "random_seed": [
                    "int"
                ],
                "save_intermediary_fn": [
                    "SaveIntermediaryFnType"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        },
        "grid_search_cv": {
            "name": "grid_search_cv",
            "location": 107,
            "return": [
                "List[ValidatorReturnType]"
            ],
            "arguments": {
                "space": [
                    "LogType"
                ],
                "train_set": [
                    "pd.DataFrame"
                ],
                "param_train_fn": [
                    "Callable[([LogType], LearnerFnType)]"
                ],
                "split_fn": [
                    "SplitterFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "save_intermediary_fn": [
                    "SaveIntermediaryFnType"
                ],
                "load_intermediary_fn": [
                    "Callable[([str], List[ValidatorReturnType])]"
                ],
                "warm_start_file": [
                    "str"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        },
        "random_search_tuner.tune_iteration": {
            "name": "tune_iteration",
            "location": 91,
            "return": [
                "ValidatorReturnType"
            ],
            "arguments": {}
        },
        "grid_search_cv.tune_iteration": {
            "name": "tune_iteration",
            "location": 188,
            "return": [
                "ValidatorReturnType"
            ],
            "arguments": {
                "iter_space": [
                    "LogType"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/tuning/samplers.py": {
        "remove_by_feature_importance": {
            "name": "remove_by_feature_importance",
            "location": 16,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "log": [
                    "LogType"
                ],
                "num_removed_by_step": [
                    "int"
                ]
            }
        },
        "remove_features_subsets": {
            "name": "remove_features_subsets",
            "location": 39,
            "return": [
                "List[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "log_list": [
                    "LogListType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "num_removed_by_step": [
                    "int"
                ]
            }
        },
        "remove_by_feature_shuffling": {
            "name": "remove_by_feature_shuffling",
            "location": 75,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "log": [
                    "LogType"
                ],
                "predict_fn": [
                    "PredictFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "eval_data": [
                    "pd.DataFrame"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "max_removed_by_step": [
                    "int"
                ],
                "threshold": [
                    "float"
                ],
                "speed_up_by_importance": [
                    "bool"
                ],
                "parallel": [
                    "bool"
                ],
                "nthread": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "remove_by_feature_shuffling.shuffle": {
            "name": "shuffle",
            "location": 149,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "feature": [
                    "str"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/tuning/selectors.py": {
        "feature_importance_backward_selection": {
            "name": "feature_importance_backward_selection",
            "location": 17,
            "return": [
                "ListLogListType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "param_train_fn": [
                    "TuningLearnerFnType"
                ],
                "features": [
                    "List[str]"
                ],
                "split_fn": [
                    "SplitterFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "num_removed_by_step": [
                    "int"
                ],
                "threshold": [
                    "float"
                ],
                "early_stop": [
                    "int"
                ],
                "iter_limit": [
                    "int"
                ],
                "min_remaining_features": [
                    "int"
                ],
                "save_intermediary_fn": [
                    "SaveIntermediaryFnType"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        },
        "poor_man_boruta_selection": {
            "name": "poor_man_boruta_selection",
            "location": 124,
            "return": [
                "LogListType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "test_data": [
                    "pd.DataFrame"
                ],
                "param_train_fn": [
                    "TuningLearnerFnType"
                ],
                "features": [
                    "List[str]"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "max_removed_by_step": [
                    "int"
                ],
                "threshold": [
                    "float"
                ],
                "early_stop": [
                    "int"
                ],
                "iter_limit": [
                    "int"
                ],
                "min_remaining_features": [
                    "int"
                ],
                "save_intermediary_fn": [
                    "Callable[([LogType], None)]"
                ],
                "speed_up_by_importance": [
                    "bool"
                ],
                "parallel": [
                    "bool"
                ],
                "nthread": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "backward_subset_feature_selection": {
            "name": "backward_subset_feature_selection",
            "location": 284,
            "return": [
                "ListLogListType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "param_train_fn": [
                    "TuningLearnerFnType"
                ],
                "features_sets": [
                    "Dict[(str, List[str])]"
                ],
                "split_fn": [
                    "SplitterFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "threshold": [
                    "float"
                ],
                "num_removed_by_step": [
                    "int"
                ],
                "early_stop": [
                    "int"
                ],
                "iter_limit": [
                    "int"
                ],
                "min_remaining_features": [
                    "int"
                ],
                "save_intermediary_fn": [
                    "SaveIntermediaryFnType"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/tuning/stoppers.py": {
        "aggregate_stop_funcs": {
            "name": "aggregate_stop_funcs",
            "location": 12,
            "return": [
                "StopFnType"
            ],
            "arguments": {}
        },
        "stop_by_iter_num": {
            "name": "stop_by_iter_num",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "ListLogListType"
                ],
                "iter_limit": [
                    "int"
                ]
            }
        },
        "stop_by_no_improvement": {
            "name": "stop_by_no_improvement",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "ListLogListType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "early_stop": [
                    "int"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "stop_by_no_improvement_parallel": {
            "name": "stop_by_no_improvement_parallel",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "ListLogListType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "early_stop": [
                    "int"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "stop_by_num_features": {
            "name": "stop_by_num_features",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "ListLogListType"
                ],
                "min_num_features": [
                    "int"
                ]
            }
        },
        "stop_by_num_features_parallel": {
            "name": "stop_by_num_features_parallel",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "ListLogListType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ],
                "min_num_features": [
                    "int"
                ]
            }
        },
        "aggregate_stop_funcs.p": {
            "name": "p",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "ListLogListType"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/tuning/utils.py": {
        "get_avg_metric_from_extractor": {
            "name": "get_avg_metric_from_extractor",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "logs": [
                    "LogType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ]
            }
        },
        "get_best_performing_log": {
            "name": "get_best_performing_log",
            "location": 15,
            "return": [
                "Dict"
            ],
            "arguments": {
                "log_list": [
                    "LogListType"
                ],
                "extractor": [
                    "ExtractorFnType"
                ],
                "metric_name": [
                    "str"
                ]
            }
        },
        "get_used_features": {
            "name": "get_used_features",
            "location": 20,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "log": [
                    "Dict"
                ]
            }
        },
        "order_feature_importance_avg_from_logs": {
            "name": "order_feature_importance_avg_from_logs",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "log": [
                    "Dict"
                ]
            }
        },
        "gen_key_avgs_from_logs": {
            "name": "gen_key_avgs_from_logs",
            "location": 29,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "logs": [
                    "List[Dict]"
                ]
            }
        },
        "gen_key_avgs_from_iteration": {
            "name": "gen_key_avgs_from_iteration",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "log": [
                    "Dict"
                ]
            }
        },
        "gen_key_avgs_from_dicts": {
            "name": "gen_key_avgs_from_dicts",
            "location": 37,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "obj": [
                    "List"
                ]
            }
        },
        "gen_dict_extract": {
            "name": "gen_dict_extract",
            "location": 42,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "obj": [
                    "Dict"
                ]
            }
        },
        "gen_validator_log": {
            "name": "gen_validator_log",
            "location": 57,
            "return": [
                "ValidatorReturnType"
            ],
            "arguments": {
                "eval_log": [
                    "EvalReturnType"
                ],
                "fold_num": [
                    "int"
                ],
                "test_size": [
                    "int"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/tuning/__init__.py": {},
    "fklearn-master/src/fklearn/types/types.py": {},
    "fklearn-master/src/fklearn/types/__init__.py": {},
    "fklearn-master/src/fklearn/validation/evaluators.py": {
        "generic_sklearn_evaluator": {
            "name": "generic_sklearn_evaluator",
            "location": 20,
            "return": [
                "UncurriedEvalFnType"
            ],
            "arguments": {
                "name_prefix": [
                    "str"
                ],
                "sklearn_metric": [
                    "Callable[(..., float)]"
                ]
            }
        },
        "auc_evaluator": {
            "name": "auc_evaluator",
            "location": 58,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "roc_auc_evaluator": {
            "name": "roc_auc_evaluator",
            "location": 93,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "pr_auc_evaluator": {
            "name": "pr_auc_evaluator",
            "location": 127,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "precision_evaluator": {
            "name": "precision_evaluator",
            "location": 160,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "threshold": [
                    "float"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "recall_evaluator": {
            "name": "recall_evaluator",
            "location": 198,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "threshold": [
                    "float"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "fbeta_score_evaluator": {
            "name": "fbeta_score_evaluator",
            "location": 238,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "threshold": [
                    "float"
                ],
                "beta": [
                    "float"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "logloss_evaluator": {
            "name": "logloss_evaluator",
            "location": 284,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "brier_score_evaluator": {
            "name": "brier_score_evaluator",
            "location": 318,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "expected_calibration_error_evaluator": {
            "name": "expected_calibration_error_evaluator",
            "location": 352,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ],
                "n_bins": [
                    "int"
                ],
                "bin_choice": [
                    "str"
                ]
            }
        },
        "r2_evaluator": {
            "name": "r2_evaluator",
            "location": 442,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "mse_evaluator": {
            "name": "mse_evaluator",
            "location": 475,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "mean_prediction_evaluator": {
            "name": "mean_prediction_evaluator",
            "location": 507,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "correlation_evaluator": {
            "name": "correlation_evaluator",
            "location": 537,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "linear_coefficient_evaluator": {
            "name": "linear_coefficient_evaluator",
            "location": 572,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "spearman_evaluator": {
            "name": "spearman_evaluator",
            "location": 608,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "ndcg_evaluator": {
            "name": "ndcg_evaluator",
            "location": 645,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "k": [
                    "int"
                ],
                "exponential_gain": [
                    "bool"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "combined_evaluators": {
            "name": "combined_evaluators",
            "location": 712,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "evaluators": [
                    "List[EvalFnType]"
                ]
            }
        },
        "split_evaluator": {
            "name": "split_evaluator",
            "location": 734,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "split_col": [
                    "str"
                ],
                "split_values": [
                    "Iterable"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "temporal_split_evaluator": {
            "name": "temporal_split_evaluator",
            "location": 778,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "time_col": [
                    "str"
                ],
                "time_format": [
                    "str"
                ],
                "split_values": [
                    "Iterable[str]"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "permutation_evaluator": {
            "name": "permutation_evaluator",
            "location": 835,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "predict_fn": [
                    "PredictFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "baseline": [
                    "bool"
                ],
                "features": [
                    "List[str]"
                ],
                "shuffle_all_at_once": [
                    "bool"
                ],
                "random_state": [
                    "int"
                ]
            }
        },
        "hash_evaluator": {
            "name": "hash_evaluator",
            "location": 907,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "hash_columns": [
                    "List[str]"
                ],
                "eval_name": [
                    "str"
                ],
                "consider_index": [
                    "bool"
                ]
            }
        },
        "exponential_coefficient_evaluator": {
            "name": "exponential_coefficient_evaluator",
            "location": 956,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "logistic_coefficient_evaluator": {
            "name": "logistic_coefficient_evaluator",
            "location": 993,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "generic_sklearn_evaluator.p": {
            "name": "p",
            "location": 38,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "prediction_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ],
                "eval_name": [
                    "str"
                ]
            }
        },
        "permutation_evaluator.col_shuffler": {
            "name": "col_shuffler",
            "location": 884,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "f": [
                    "str"
                ]
            }
        },
        "permutation_evaluator.permutation_eval": {
            "name": "permutation_eval",
            "location": 887,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "features_to_shuffle": [
                    "List[str]"
                ]
            }
        },
        "hash_evaluator.calculate_dataframe_hash": {
            "name": "calculate_dataframe_hash",
            "location": 941,
            "return": [
                "EvalReturnType"
            ],
            "arguments": {
                "df": [
                    "pd.DataFrame"
                ],
                "eval_name": [
                    "str"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/validation/perturbators.py": {
        "shift_mu": {
            "name": "shift_mu",
            "location": 12,
            "return": [
                "pd.Series"
            ],
            "arguments": {
                "col": [
                    "pd.Series"
                ],
                "perc": [
                    "float"
                ]
            }
        },
        "random_noise": {
            "name": "random_noise",
            "location": 34,
            "return": [
                "pd.Series"
            ],
            "arguments": {
                "col": [
                    "pd.Series"
                ],
                "mag": [
                    "float"
                ]
            }
        },
        "nullify": {
            "name": "nullify",
            "location": 57,
            "return": [
                "pd.Series"
            ],
            "arguments": {
                "col": [
                    "pd.Series"
                ],
                "perc": [
                    "float"
                ]
            }
        },
        "sample_columns": {
            "name": "sample_columns",
            "location": 82,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ],
                "perc": [
                    "float"
                ]
            }
        },
        "perturbator": {
            "name": "perturbator",
            "location": 102,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ],
                "cols": [
                    "List[str]"
                ],
                "corruption_fn": [
                    "ColumnWisePerturbFnType"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/validation/splitters.py": {
        "_log_time_fold": {
            "name": "_log_time_fold",
            "location": 16,
            "return": [
                "LogType"
            ],
            "arguments": {
                "time_fold": [
                    "Tuple[(pd.Series, pd.Series)]"
                ]
            }
        },
        "_get_lc_folds": {
            "name": "_get_lc_folds",
            "location": 22,
            "return": [
                "List[Tuple[(pd.Series, pd.Series)]]"
            ],
            "arguments": {
                "date_range": [
                    "Union[(pd.DatetimeIndex, pd.PeriodIndex)]"
                ],
                "date_fold_filter_fn": [
                    "Callable[([DateType], pd.DataFrame)]"
                ],
                "test_time": [
                    "pd.Series"
                ],
                "time_column": [
                    "str"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "_get_sc_folds": {
            "name": "_get_sc_folds",
            "location": 35,
            "return": [
                "List[Tuple[(pd.Series, pd.Series)]]"
            ],
            "arguments": {
                "date_range": [
                    "Union[(pd.DatetimeIndex, pd.PeriodIndex)]"
                ],
                "date_fold_filter_fn": [
                    "Callable[([DateType], pd.DataFrame)]"
                ],
                "time_column": [
                    "str"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "_get_sc_test_fold_idx_and_logs": {
            "name": "_get_sc_test_fold_idx_and_logs",
            "location": 46,
            "return": [
                "Tuple[(List[LogType], List[List[pd.Index]])]"
            ],
            "arguments": {
                "test_data": [
                    "pd.DataFrame"
                ],
                "train_time": [
                    "pd.Series"
                ],
                "time_column": [
                    "str"
                ],
                "first_test_moment": [
                    "DateType"
                ],
                "last_test_moment": [
                    "DateType"
                ],
                "min_samples": [
                    "int"
                ],
                "freq": [
                    "str"
                ]
            }
        },
        "_lc_fold_to_indexes": {
            "name": "_lc_fold_to_indexes",
            "location": 65,
            "return": [
                "List[Tuple[(pd.Index, List[pd.Index])]]"
            ],
            "arguments": {
                "folds": [
                    "List[Tuple[(pd.Series, pd.Series)]]"
                ]
            }
        },
        "k_fold_splitter": {
            "name": "k_fold_splitter",
            "location": 70,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "n_splits": [
                    "int"
                ],
                "random_state": [
                    "int"
                ],
                "stratify_column": [
                    "str"
                ]
            }
        },
        "out_of_time_and_space_splitter": {
            "name": "out_of_time_and_space_splitter",
            "location": 115,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "n_splits": [
                    "int"
                ],
                "in_time_limit": [
                    "DateType"
                ],
                "time_column": [
                    "str"
                ],
                "space_column": [
                    "str"
                ],
                "holdout_gap": [
                    "timedelta"
                ]
            }
        },
        "time_and_space_learning_curve_splitter": {
            "name": "time_and_space_learning_curve_splitter",
            "location": 176,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "training_time_limit": [
                    "str"
                ],
                "space_column": [
                    "str"
                ],
                "time_column": [
                    "str"
                ],
                "freq": [
                    "str"
                ],
                "space_hold_percentage": [
                    "float"
                ],
                "holdout_gap": [
                    "timedelta"
                ],
                "random_state": [
                    "int"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "time_learning_curve_splitter": {
            "name": "time_learning_curve_splitter",
            "location": 255,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "training_time_limit": [
                    "DateType"
                ],
                "time_column": [
                    "str"
                ],
                "freq": [
                    "str"
                ],
                "holdout_gap": [
                    "timedelta"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "reverse_time_learning_curve_splitter": {
            "name": "reverse_time_learning_curve_splitter",
            "location": 315,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "time_column": [
                    "str"
                ],
                "training_time_limit": [
                    "DateType"
                ],
                "lower_time_limit": [
                    "DateType"
                ],
                "freq": [
                    "str"
                ],
                "holdout_gap": [
                    "timedelta"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "spatial_learning_curve_splitter": {
            "name": "spatial_learning_curve_splitter",
            "location": 381,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "space_column": [
                    "str"
                ],
                "time_column": [
                    "str"
                ],
                "training_limit": [
                    "DateType"
                ],
                "holdout_gap": [
                    "timedelta"
                ],
                "train_percentages": [
                    "Iterable[float]"
                ],
                "random_state": [
                    "int"
                ]
            }
        },
        "stability_curve_time_splitter": {
            "name": "stability_curve_time_splitter",
            "location": 469,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "training_time_limit": [
                    "DateType"
                ],
                "time_column": [
                    "str"
                ],
                "freq": [
                    "str"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "stability_curve_time_in_space_splitter": {
            "name": "stability_curve_time_in_space_splitter",
            "location": 525,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "training_time_limit": [
                    "DateType"
                ],
                "space_column": [
                    "str"
                ],
                "time_column": [
                    "str"
                ],
                "freq": [
                    "str"
                ],
                "space_hold_percentage": [
                    "float"
                ],
                "random_state": [
                    "int"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "stability_curve_time_space_splitter": {
            "name": "stability_curve_time_space_splitter",
            "location": 602,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "training_time_limit": [
                    "DateType"
                ],
                "space_column": [
                    "str"
                ],
                "time_column": [
                    "str"
                ],
                "freq": [
                    "str"
                ],
                "space_hold_percentage": [
                    "float"
                ],
                "random_state": [
                    "int"
                ],
                "min_samples": [
                    "int"
                ]
            }
        },
        "forward_stability_curve_time_splitter": {
            "name": "forward_stability_curve_time_splitter",
            "location": 681,
            "return": [
                "SplitterReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "training_time_start": [
                    "DateType"
                ],
                "training_time_end": [
                    "DateType"
                ],
                "time_column": [
                    "str"
                ],
                "holdout_gap": [
                    "timedelta"
                ],
                "holdout_size": [
                    "timedelta"
                ],
                "step": [
                    "timedelta"
                ],
                "move_training_start_with_steps": [
                    "bool"
                ]
            }
        },
        "_get_sc_test_fold_idx_and_logs.date_filter_fn": {
            "name": "date_filter_fn",
            "location": 55,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "period": [
                    "DateType"
                ]
            }
        },
        "time_and_space_learning_curve_splitter.date_filter_fn": {
            "name": "date_filter_fn",
            "location": 240,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "date": [
                    "DateType"
                ]
            }
        },
        "time_learning_curve_splitter.date_filter_fn": {
            "name": "date_filter_fn",
            "location": 301,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "date": [
                    "DateType"
                ]
            }
        },
        "reverse_time_learning_curve_splitter.date_filter_fn": {
            "name": "date_filter_fn",
            "location": 366,
            "return": [
                "pd.DataFrame"
            ],
            "arguments": {
                "date": [
                    "DateType"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/validation/validator.py": {
        "validator_iteration": {
            "name": "validator_iteration",
            "location": 17,
            "return": [
                "LogType"
            ],
            "arguments": {
                "data": [
                    "pd.DataFrame"
                ],
                "train_index": [
                    "pd.Index"
                ],
                "test_indexes": [
                    "pd.Index"
                ],
                "fold_num": [
                    "int"
                ],
                "train_fn": [
                    "LearnerFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "predict_oof": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "validator": {
            "name": "validator",
            "location": 86,
            "return": [
                "ValidatorReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "split_fn": [
                    "SplitterFnType"
                ],
                "train_fn": [
                    "LearnerFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "perturb_fn_train": [
                    "PerturbFnType"
                ],
                "perturb_fn_test": [
                    "PerturbFnType"
                ],
                "predict_oof": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "parallel_validator_iteration": {
            "name": "parallel_validator_iteration",
            "location": 176,
            "return": [
                "LogType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "fold": [
                    "Tuple[(int, Tuple[(pd.Index, pd.Index)])]"
                ],
                "train_fn": [
                    "LearnerFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "predict_oof": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "parallel_validator": {
            "name": "parallel_validator",
            "location": 187,
            "return": [
                "ValidatorReturnType"
            ],
            "arguments": {
                "train_data": [
                    "pd.DataFrame"
                ],
                "split_fn": [
                    "SplitterFnType"
                ],
                "train_fn": [
                    "LearnerFnType"
                ],
                "eval_fn": [
                    "EvalFnType"
                ],
                "n_jobs": [
                    "int"
                ],
                "predict_oof": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "validator.fold_iter": {
            "name": "fold_iter",
            "location": 143,
            "return": [
                "LogType"
            ],
            "arguments": {
                "fold": [
                    "Tuple[(int, Tuple[(pd.Index, pd.Index)])]"
                ]
            }
        },
        "validator._join_split_log": {
            "name": "_join_split_log",
            "location": 153,
            "return": [
                "Tuple[(LogType, LogType)]"
            ],
            "arguments": {
                "log_tuple": [
                    "Tuple[(LogType, LogType)]"
                ]
            }
        },
        "validator.get_perturbed_columns": {
            "name": "get_perturbed_columns",
            "location": 159,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "perturbator": [
                    "PerturbFnType"
                ]
            }
        },
        "parallel_validator.kwdissoc": {
            "name": "kwdissoc",
            "location": 242,
            "return": [
                "Dict"
            ],
            "arguments": {
                "d": [
                    "Dict"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "fklearn-master/src/fklearn/validation/__init__.py": {},
    "fklearn-master/tests/__init__.py": {},
    "fklearn-master/tests/causal/test_debias.py": {
        "test_debias_with_regression_formula": {
            "name": "test_debias_with_regression_formula",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_debias_with_regression": {
            "name": "test_debias_with_regression",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_debias_with_fixed_effects": {
            "name": "test_debias_with_fixed_effects",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_debias_with_double_ml": {
            "name": "test_debias_with_double_ml",
            "location": 97,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/causal/test_effects.py": {
        "test_linear_effect": {
            "name": "test_linear_effect",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_spearman_effect": {
            "name": "test_spearman_effect",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_pearson_effect": {
            "name": "test_pearson_effect",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_exponential_coefficient_effect": {
            "name": "test_exponential_coefficient_effect",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_logistic_coefficient_effect": {
            "name": "test_logistic_coefficient_effect",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/causal/__init__.py": {},
    "fklearn-master/tests/causal/cate_learning/test_double_machine_learning.py": {
        "test__cv_estimate": {
            "name": "test__cv_estimate",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_non_parametric_double_ml_learner": {
            "name": "test_non_parametric_double_ml_learner",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_non_parametric_double_ml_learner_curry": {
            "name": "test_non_parametric_double_ml_learner_curry",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/causal/cate_learning/__init__.py": {},
    "fklearn-master/tests/causal/validation/cate.py": {
        "test_delta_mean_by_group_and_bin": {
            "name": "test_delta_mean_by_group_and_bin",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_cate_mean_by_bin_meta_evaluator": {
            "name": "test_cate_mean_by_bin_meta_evaluator",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_cate_mean_by_bin_meta_evaluator_errors": {
            "name": "test_cate_mean_by_bin_meta_evaluator_errors",
            "location": 100,
            "return": [],
            "arguments": {
                "problematic_params_pair": []
            }
        }
    },
    "fklearn-master/tests/causal/validation/test_auc.py": {
        "test_area_under_the_cumulative_effect_curve": {
            "name": "test_area_under_the_cumulative_effect_curve",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_area_under_the_cumulative_gain_curve": {
            "name": "test_area_under_the_cumulative_gain_curve",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_area_under_the_relative_cumulative_gain_curve": {
            "name": "test_area_under_the_relative_cumulative_gain_curve",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/causal/validation/test_curves.py": {
        "test_effect_by_segment": {
            "name": "test_effect_by_segment",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_cumulative_effect_curve": {
            "name": "test_cumulative_effect_curve",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_cumulative_gain_curve": {
            "name": "test_cumulative_gain_curve",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_relative_cumulative_gain_curve": {
            "name": "test_relative_cumulative_gain_curve",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_effect_curves": {
            "name": "test_effect_curves",
            "location": 71,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/causal/validation/__init__.py": {},
    "fklearn-master/tests/data/test_data.py": {
        "test_make_tutorial_data": {
            "name": "test_make_tutorial_data",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_make_confounded_data": {
            "name": "test_make_confounded_data",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/data/__init__.py": {},
    "fklearn-master/tests/metrics/test_pd_extractors.py": {
        "create_split_logs_and_evaluator": {
            "name": "create_split_logs_and_evaluator",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test__split_evaluator_extractor_iteration": {
            "name": "test__split_evaluator_extractor_iteration",
            "location": 41,
            "return": [],
            "arguments": {
                "eval_name": [],
                "split_kwargs": [],
                "create_split_logs_and_evaluator": []
            }
        },
        "test__split_evaluator_extractor": {
            "name": "test__split_evaluator_extractor",
            "location": 58,
            "return": [],
            "arguments": {
                "eval_name": [],
                "split_kwargs": [],
                "create_split_logs_and_evaluator": []
            }
        },
        "test__split_evaluator_extractor__when_split_value_is_missing": {
            "name": "test__split_evaluator_extractor__when_split_value_is_missing",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_extract": {
            "name": "test_extract",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "create_split_logs_and_evaluator._create_split_logs_and_evaluator": {
            "name": "_create_split_logs_and_evaluator",
            "location": 26,
            "return": [],
            "arguments": {
                "eval_name": []
            }
        }
    },
    "fklearn-master/tests/metrics/__init__.py": {},
    "fklearn-master/tests/preprocessing/test_rebalancing.py": {
        "test_rebalance_by_categorical": {
            "name": "test_rebalance_by_categorical",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_rebalance_by_continuous": {
            "name": "test_rebalance_by_continuous",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/preprocessing/test_schema.py": {
        "test_feature_duplicator": {
            "name": "test_feature_duplicator",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_column_duplicatable_naming": {
            "name": "test_column_duplicatable_naming",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/preprocessing/test_splitting.py": {
        "test_time_split_dataset": {
            "name": "test_time_split_dataset",
            "location": 39,
            "return": [],
            "arguments": {
                "test_df": []
            }
        },
        "test_space_time_split_dataset": {
            "name": "test_space_time_split_dataset",
            "location": 83,
            "return": [],
            "arguments": {
                "test_df": [],
                "test_df_with_new_id": [],
                "test_df_only_one_point_per_id": []
            }
        },
        "gen_stratified_test_data": {
            "name": "gen_stratified_test_data",
            "location": 235,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "assert_sample_size_per_class": {
            "name": "assert_sample_size_per_class",
            "location": 249,
            "return": [],
            "arguments": {
                "data": [],
                "target_column_name": [],
                "expected_samples_per_class": []
            }
        },
        "test_stratified_split_dataset": {
            "name": "test_stratified_split_dataset",
            "location": 259,
            "return": [],
            "arguments": {
                "sample": [],
                "random_state": [],
                "test_size": []
            }
        }
    },
    "fklearn-master/tests/preprocessing/__init__.py": {},
    "fklearn-master/tests/training/test_calibration.py": {
        "test_isotonic_calibration_learner": {
            "name": "test_isotonic_calibration_learner",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_find_thresholds_with_same_risk": {
            "name": "test_find_thresholds_with_same_risk",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/test_classification.py": {
        "test_logistic_classification_learner": {
            "name": "test_logistic_classification_learner",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_xgb_classification_learner": {
            "name": "test_xgb_classification_learner",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_catboost_classification_learner": {
            "name": "test_catboost_classification_learner",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_nlp_logistic_classification_learner": {
            "name": "test_nlp_logistic_classification_learner",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_lgbm_classification_learner": {
            "name": "test_lgbm_classification_learner",
            "location": 394,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/test_ensemble.py": {
        "test_xgb_octopus_classification_learner": {
            "name": "test_xgb_octopus_classification_learner",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/test_imputation.py": {
        "test_imputer": {
            "name": "test_imputer",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_imputer_with_fill_value": {
            "name": "test_imputer_with_fill_value",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_placeholder_imputer": {
            "name": "test_placeholder_imputer",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/test_pipeline.py": {
        "test_build_pipeline": {
            "name": "test_build_pipeline",
            "location": 15,
            "return": [],
            "arguments": {
                "has_repeated_learners": []
            }
        },
        "test_build_pipeline_no_side_effects": {
            "name": "test_build_pipeline_no_side_effects",
            "location": 56,
            "return": [],
            "arguments": {
                "has_repeated_learners": []
            }
        },
        "test_build_pipeline_idempotency": {
            "name": "test_build_pipeline_idempotency",
            "location": 80,
            "return": [],
            "arguments": {
                "has_repeated_learners": []
            }
        },
        "test_build_pipeline_learner_assertion": {
            "name": "test_build_pipeline_learner_assertion",
            "location": 106,
            "return": [],
            "arguments": {
                "has_repeated_learners": []
            }
        },
        "test_build_pipeline_predict_arguments_assertion": {
            "name": "test_build_pipeline_predict_arguments_assertion",
            "location": 122,
            "return": [],
            "arguments": {
                "has_repeated_learners": []
            }
        },
        "test_build_pipeline_serialisation": {
            "name": "test_build_pipeline_serialisation",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_build_pipeline_with_onehotencoder": {
            "name": "test_build_pipeline_with_onehotencoder",
            "location": 176,
            "return": [],
            "arguments": {
                "has_repeated_learners": []
            }
        },
        "test_build_pipeline_repeated_learners_serialisation": {
            "name": "test_build_pipeline_repeated_learners_serialisation",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_build_pipeline_no_side_effects.side_effect_learner": {
            "name": "side_effect_learner",
            "location": 60,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_build_pipeline_no_side_effects.kwargs_learner": {
            "name": "kwargs_learner",
            "location": 64,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_build_pipeline_idempotency.kwargs_learner": {
            "name": "kwargs_learner",
            "location": 87,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_build_pipeline_idempotency.dummy_learner": {
            "name": "dummy_learner",
            "location": 93,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_build_pipeline_learner_assertion.learner": {
            "name": "learner",
            "location": 108,
            "return": [],
            "arguments": {
                "df": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_build_pipeline_predict_arguments_assertion.invalid_learner": {
            "name": "invalid_learner",
            "location": 126,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_build_pipeline_serialisation.dummy_learner": {
            "name": "dummy_learner",
            "location": 146,
            "return": [],
            "arguments": {
                "df": [],
                "fn": [],
                "call": []
            }
        },
        "test_build_pipeline_serialisation.dummy_learner_2": {
            "name": "dummy_learner_2",
            "location": 150,
            "return": [],
            "arguments": {
                "df": [],
                "fn": [],
                "call": []
            }
        },
        "test_build_pipeline_serialisation.dummy_learner_3": {
            "name": "dummy_learner_3",
            "location": 154,
            "return": [],
            "arguments": {
                "df": [],
                "fn": [],
                "call": []
            }
        },
        "test_build_pipeline_repeated_learners_serialisation.dummy_learner": {
            "name": "dummy_learner",
            "location": 225,
            "return": [],
            "arguments": {
                "df": [],
                "fn": [],
                "call": []
            }
        },
        "test_build_pipeline_repeated_learners_serialisation.dummy_learner_2": {
            "name": "dummy_learner_2",
            "location": 229,
            "return": [],
            "arguments": {
                "df": [],
                "fn": [],
                "call": []
            }
        },
        "test_build_pipeline_no_side_effects.kwargs_learner.p": {
            "name": "p",
            "location": 67,
            "return": [],
            "arguments": {
                "dataset": [],
                "mult": []
            }
        },
        "test_build_pipeline_idempotency.kwargs_learner.p": {
            "name": "p",
            "location": 88,
            "return": [],
            "arguments": {
                "dataset": [],
                "mult": []
            }
        },
        "test_build_pipeline_predict_arguments_assertion.invalid_learner.p": {
            "name": "p",
            "location": 127,
            "return": [],
            "arguments": {
                "dataset": []
            }
        }
    },
    "fklearn-master/tests/training/test_regression.py": {
        "test_linear_regression_learner": {
            "name": "test_linear_regression_learner",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_gp_regression_learner": {
            "name": "test_gp_regression_learner",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_xgb_regression_learner": {
            "name": "test_xgb_regression_learner",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_lgbm_regression_learner": {
            "name": "test_lgbm_regression_learner",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "test_catboost_regressor_learner": {
            "name": "test_catboost_regressor_learner",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_custom_supervised_model_learner": {
            "name": "test_custom_supervised_model_learner",
            "location": 227,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/test_transformation.py": {
        "test_selector": {
            "name": "test_selector",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_capper": {
            "name": "test_capper",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_floorer": {
            "name": "test_floorer",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_prediction_ranger": {
            "name": "test_prediction_ranger",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_value_mapper": {
            "name": "test_value_mapper",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_truncate_categorical": {
            "name": "test_truncate_categorical",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_rank_categorical": {
            "name": "test_rank_categorical",
            "location": 328,
            "return": [],
            "arguments": {}
        },
        "test_count_categorizer": {
            "name": "test_count_categorizer",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "test_label_categorizer": {
            "name": "test_label_categorizer",
            "location": 511,
            "return": [],
            "arguments": {}
        },
        "test_quantile_biner": {
            "name": "test_quantile_biner",
            "location": 626,
            "return": [],
            "arguments": {}
        },
        "test_onehot_categorizer": {
            "name": "test_onehot_categorizer",
            "location": 844,
            "return": [],
            "arguments": {
                "df_train": [],
                "df_test": [],
                "columns_to_categorize": [],
                "drop_first": [],
                "hardcode": [],
                "expected_output_train": [],
                "expected_output_test": []
            }
        },
        "test_target_categorizer": {
            "name": "test_target_categorizer",
            "location": 858,
            "return": [],
            "arguments": {}
        },
        "test_standard_scaler": {
            "name": "test_standard_scaler",
            "location": 1141,
            "return": [],
            "arguments": {}
        },
        "test_custom_transformer": {
            "name": "test_custom_transformer",
            "location": 1242,
            "return": [],
            "arguments": {}
        },
        "test_null_injector": {
            "name": "test_null_injector",
            "location": 1398,
            "return": [],
            "arguments": {}
        },
        "test_ecdfer": {
            "name": "test_ecdfer",
            "location": 1451,
            "return": [],
            "arguments": {}
        },
        "test_discrete_ecdfer": {
            "name": "test_discrete_ecdfer",
            "location": 1524,
            "return": [],
            "arguments": {}
        },
        "test_missing_warner": {
            "name": "test_missing_warner",
            "location": 1582,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/test_unsupervised.py": {
        "test_anomaly_learner": {
            "name": "test_anomaly_learner",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/test_utils.py": {
        "test_expand_features_encoded": {
            "name": "test_expand_features_encoded",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/training/__init__.py": {},
    "fklearn-master/tests/tuning/test_model_agnostic_fc.py": {
        "test_correlation_feature_selection": {
            "name": "test_correlation_feature_selection",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_variance_feature_selection": {
            "name": "test_variance_feature_selection",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/tuning/test_parameter_tuners.py": {
        "test_random_search_tuner": {
            "name": "test_random_search_tuner",
            "location": 11,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_grid_search_tuner": {
            "name": "test_grid_search_tuner",
            "location": 46,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_random_search_tuner.param_train_fn": {
            "name": "param_train_fn",
            "location": 27,
            "return": [],
            "arguments": {
                "space": [],
                "train_set": []
            }
        },
        "test_grid_search_tuner.param_train_fn": {
            "name": "param_train_fn",
            "location": 63,
            "return": [],
            "arguments": {
                "space": [],
                "train_set": []
            }
        }
    },
    "fklearn-master/tests/tuning/test_samplers.py": {
        "logs": {
            "name": "logs",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "parallel_logs": {
            "name": "parallel_logs",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "base_extractor": {
            "name": "base_extractor",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "metric_name": {
            "name": "metric_name",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "train_df": {
            "name": "train_df",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "holdout_df": {
            "name": "holdout_df",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "train_fn": {
            "name": "train_fn",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "eval_fn": {
            "name": "eval_fn",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_remove_by_feature_importance": {
            "name": "test_remove_by_feature_importance",
            "location": 103,
            "return": [],
            "arguments": {
                "logs": []
            }
        },
        "test_remove_features_subsets": {
            "name": "test_remove_features_subsets",
            "location": 109,
            "return": [],
            "arguments": {
                "logs": [],
                "base_extractor": [],
                "metric_name": []
            }
        },
        "test_remove_by_shuffling": {
            "name": "test_remove_by_shuffling",
            "location": 114,
            "return": [],
            "arguments": {
                "train_df": [],
                "holdout_df": [],
                "train_fn": [],
                "eval_fn": [],
                "base_extractor": [],
                "metric_name": [],
                "logs": []
            }
        }
    },
    "fklearn-master/tests/tuning/test_selectors.py": {
        "logs": {
            "name": "logs",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "parallel_logs": {
            "name": "parallel_logs",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "base_extractor": {
            "name": "base_extractor",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "metric_name": {
            "name": "metric_name",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "train_df": {
            "name": "train_df",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "holdout_df": {
            "name": "holdout_df",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "train_fn": {
            "name": "train_fn",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "eval_fn": {
            "name": "eval_fn",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "split_fn": {
            "name": "split_fn",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_feature_importance_backward_selection": {
            "name": "test_feature_importance_backward_selection",
            "location": 111,
            "return": [],
            "arguments": {
                "train_df": [],
                "train_fn": [],
                "eval_fn": [],
                "split_fn": [],
                "base_extractor": [],
                "metric_name": []
            }
        },
        "test_poor_man_boruta_selection": {
            "name": "test_poor_man_boruta_selection",
            "location": 132,
            "return": [],
            "arguments": {
                "train_df": [],
                "holdout_df": [],
                "train_fn": [],
                "eval_fn": [],
                "base_extractor": [],
                "metric_name": []
            }
        },
        "test_backward_subset_feature_selection": {
            "name": "test_backward_subset_feature_selection",
            "location": 160,
            "return": [],
            "arguments": {
                "train_df": [],
                "train_fn": [],
                "eval_fn": [],
                "split_fn": [],
                "base_extractor": [],
                "metric_name": []
            }
        }
    },
    "fklearn-master/tests/tuning/test_stoppers.py": {
        "logs": {
            "name": "logs",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "parallel_logs": {
            "name": "parallel_logs",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "base_extractor": {
            "name": "base_extractor",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "metric_name": {
            "name": "metric_name",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_stop_by_iter_num": {
            "name": "test_stop_by_iter_num",
            "location": 31,
            "return": [],
            "arguments": {
                "logs": []
            }
        },
        "test_stop_by_no_improvement": {
            "name": "test_stop_by_no_improvement",
            "location": 36,
            "return": [],
            "arguments": {
                "logs": [],
                "base_extractor": [],
                "metric_name": []
            }
        },
        "test_stop_by_num_features": {
            "name": "test_stop_by_num_features",
            "location": 44,
            "return": [],
            "arguments": {
                "logs": []
            }
        },
        "test_stop_by_no_improvement_parallel": {
            "name": "test_stop_by_no_improvement_parallel",
            "location": 49,
            "return": [],
            "arguments": {
                "parallel_logs": [],
                "base_extractor": [],
                "metric_name": []
            }
        },
        "test_stop_by_num_features_parallel": {
            "name": "test_stop_by_num_features_parallel",
            "location": 58,
            "return": [],
            "arguments": {
                "parallel_logs": [],
                "base_extractor": [],
                "metric_name": []
            }
        }
    },
    "fklearn-master/tests/tuning/test_utils.py": {
        "logs": {
            "name": "logs",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "base_extractor": {
            "name": "base_extractor",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "metric_name": {
            "name": "metric_name",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "train_df": {
            "name": "train_df",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "holdout_df": {
            "name": "holdout_df",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "train_fn": {
            "name": "train_fn",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_get_avg_metric_from_extractor": {
            "name": "test_get_avg_metric_from_extractor",
            "location": 123,
            "return": [],
            "arguments": {
                "logs": [],
                "base_extractor": [],
                "metric_name": []
            }
        },
        "test_get_best_performing_log": {
            "name": "test_get_best_performing_log",
            "location": 128,
            "return": [],
            "arguments": {
                "logs": [],
                "base_extractor": [],
                "metric_name": []
            }
        },
        "test_get_used_features": {
            "name": "test_get_used_features",
            "location": 133,
            "return": [],
            "arguments": {
                "logs": []
            }
        },
        "test_order_feature_importance_avg_from_logs": {
            "name": "test_order_feature_importance_avg_from_logs",
            "location": 138,
            "return": [],
            "arguments": {
                "logs": []
            }
        },
        "test_gen_key_avgs_from_logs": {
            "name": "test_gen_key_avgs_from_logs",
            "location": 143,
            "return": [],
            "arguments": {
                "logs": []
            }
        },
        "test_gen_key_avgs_from_iteration": {
            "name": "test_gen_key_avgs_from_iteration",
            "location": 148,
            "return": [],
            "arguments": {
                "logs": []
            }
        },
        "test_gen_key_avgs_from_dicts": {
            "name": "test_gen_key_avgs_from_dicts",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_gen_dict_extract": {
            "name": "test_gen_dict_extract",
            "location": 160,
            "return": [],
            "arguments": {
                "logs": []
            }
        }
    },
    "fklearn-master/tests/tuning/__init__.py": {},
    "fklearn-master/tests/validation/test_evaluators.py": {
        "test_combined_evaluators": {
            "name": "test_combined_evaluators",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_mean_prediction_evaluator": {
            "name": "test_mean_prediction_evaluator",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_auc_evaluator": {
            "name": "test_auc_evaluator",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_roc_auc_evaluator": {
            "name": "test_roc_auc_evaluator",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_pr_auc_evaluator": {
            "name": "test_pr_auc_evaluator",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_precision_evaluator": {
            "name": "test_precision_evaluator",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_recall_evaluator": {
            "name": "test_recall_evaluator",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_fbeta_score_evaluator": {
            "name": "test_fbeta_score_evaluator",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_logloss_evaluator": {
            "name": "test_logloss_evaluator",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "test_brier_score_evaluator": {
            "name": "test_brier_score_evaluator",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_binary_calibration_evaluator": {
            "name": "test_binary_calibration_evaluator",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_r2_evaluator": {
            "name": "test_r2_evaluator",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "test_mse_evaluator": {
            "name": "test_mse_evaluator",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "test_correlation_evaluator": {
            "name": "test_correlation_evaluator",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "test_spearman_evaluator": {
            "name": "test_spearman_evaluator",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "test_linear_coefficient_evaluator": {
            "name": "test_linear_coefficient_evaluator",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_ndcg_evaluator": {
            "name": "test_ndcg_evaluator",
            "location": 294,
            "return": [],
            "arguments": {
                "exponential_gain": []
            }
        },
        "test_split_evaluator": {
            "name": "test_split_evaluator",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "test_temporal_split_evaluator": {
            "name": "test_temporal_split_evaluator",
            "location": 340,
            "return": [],
            "arguments": {}
        },
        "test_permutation_evaluator": {
            "name": "test_permutation_evaluator",
            "location": 361,
            "return": [],
            "arguments": {}
        },
        "test_hash_evaluator": {
            "name": "test_hash_evaluator",
            "location": 415,
            "return": [],
            "arguments": {}
        },
        "test_exponential_coefficient_evaluator": {
            "name": "test_exponential_coefficient_evaluator",
            "location": 458,
            "return": [],
            "arguments": {}
        },
        "test_logistic_coefficient_evaluator": {
            "name": "test_logistic_coefficient_evaluator",
            "location": 475,
            "return": [],
            "arguments": {}
        },
        "test_permutation_evaluator.fake_predict": {
            "name": "fake_predict",
            "location": 372,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_permutation_evaluator.fake_predict2": {
            "name": "fake_predict2",
            "location": 403,
            "return": [],
            "arguments": {
                "df": []
            }
        }
    },
    "fklearn-master/tests/validation/test_perturbators.py": {
        "test_shift_mu": {
            "name": "test_shift_mu",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_random_noise": {
            "name": "test_random_noise",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_nullify": {
            "name": "test_nullify",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_sample_columns": {
            "name": "test_sample_columns",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_perturbator": {
            "name": "test_perturbator",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/validation/test_splitters.py": {
        "test_k_fold_splitter": {
            "name": "test_k_fold_splitter",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_out_of_time_and_space_splitter": {
            "name": "test_out_of_time_and_space_splitter",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_time_and_space_learning_curve_splitter": {
            "name": "test_time_and_space_learning_curve_splitter",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_spatial_learning_curve_splitter": {
            "name": "test_spatial_learning_curve_splitter",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_time_learning_curve_splitter": {
            "name": "test_time_learning_curve_splitter",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_reverse_time_learning_curve_splitter": {
            "name": "test_reverse_time_learning_curve_splitter",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_stability_curve_time_splitter": {
            "name": "test_stability_curve_time_splitter",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "test_stability_curve_time_in_space_splitter": {
            "name": "test_stability_curve_time_in_space_splitter",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "test_stability_curve_time_space_splitter": {
            "name": "test_stability_curve_time_space_splitter",
            "location": 263,
            "return": [],
            "arguments": {}
        },
        "test_forward_stability_curve_time_splitter": {
            "name": "test_forward_stability_curve_time_splitter",
            "location": 297,
            "return": [],
            "arguments": {}
        }
    },
    "fklearn-master/tests/validation/test_validator.py": {
        "train_fn": {
            "name": "train_fn",
            "location": 10,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "eval_fn": {
            "name": "eval_fn",
            "location": 29,
            "return": [],
            "arguments": {
                "test_data": []
            }
        },
        "split_fn": {
            "name": "split_fn",
            "location": 33,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "test_validator_iteration": {
            "name": "test_validator_iteration",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_validator": {
            "name": "test_validator",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_parallel_validator": {
            "name": "test_parallel_validator",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "train_fn.p": {
            "name": "p",
            "location": 11,
            "return": [],
            "arguments": {
                "new_df": []
            }
        }
    },
    "fklearn-master/tests/validation/__init__.py": {}
}
{
    "fonduer-master/setup.py": {},
    "fonduer-master/docs/conf.py": {},
    "fonduer-master/src/fonduer/meta.py": {
        "init_logging": {
            "name": "init_logging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "log_dir": [
                    "str"
                ],
                "format": [
                    "str"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "new_sessionmaker": {
            "name": "new_sessionmaker",
            "location": 60,
            "return": [
                "sessionmaker"
            ],
            "arguments": {}
        },
        "_update_meta": {
            "name": "_update_meta",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "conn_string": [
                    "str"
                ]
            }
        },
        "Meta.init": {
            "name": "init",
            "location": 126,
            "return": [
                "Type['Meta']"
            ],
            "arguments": {
                "cls": [],
                "conn_string": [
                    "Optional[str]"
                ]
            }
        },
        "Meta._init_db": {
            "name": "_init_db",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "fonduer-master/src/fonduer/_version.py": {},
    "fonduer-master/src/fonduer/__init__.py": {},
    "fonduer-master/src/fonduer/candidates/candidates.py": {
        "CandidateExtractor.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "candidate_classes": [
                    "List[Type[Candidate]]"
                ],
                "throttlers": [
                    "Optional[List[Callable[([Tuple[(Mention, ...)]], bool)]]]"
                ],
                "self_relations": [
                    "bool"
                ],
                "nested_relations": [
                    "bool"
                ],
                "symmetric_relations": [
                    "bool"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "CandidateExtractor.apply": {
            "name": "apply",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Collection[Document]"
                ],
                "split": [
                    "int"
                ],
                "clear": [
                    "bool"
                ],
                "parallelism": [
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool"
                ]
            }
        },
        "CandidateExtractor.clear": {
            "name": "clear",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int"
                ]
            }
        },
        "CandidateExtractor.clear_all": {
            "name": "clear_all",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int"
                ]
            }
        },
        "CandidateExtractor.get_candidates": {
            "name": "get_candidates",
            "location": 154,
            "return": [
                "List[List[Candidate]]"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Union[(Document, Iterable[Document], None)]"
                ],
                "split": [
                    "int"
                ],
                "sort": [
                    "bool"
                ]
            }
        },
        "CandidateExtractorUDF.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate_classes": [
                    "Union[(Type[Candidate], List[Type[Candidate]])]"
                ],
                "throttlers": [
                    "Union[(Throttler, List[Throttler])]"
                ],
                "self_relations": [
                    "bool"
                ],
                "nested_relations": [
                    "bool"
                ],
                "symmetric_relations": [
                    "bool"
                ]
            }
        },
        "CandidateExtractorUDF.apply": {
            "name": "apply",
            "location": 248,
            "return": [
                "Document"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ],
                "split": [
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/matchers.py": {
        "_Matcher.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Matcher.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Matcher._check_opts": {
            "name": "_check_opts",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Matcher._f": {
            "name": "_f",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "_Matcher.f": {
            "name": "f",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "_Matcher.apply": {
            "name": "apply",
            "location": 58,
            "return": [
                "Iterator[TemporaryContext]"
            ],
            "arguments": {
                "self": [],
                "mentions": [
                    "Iterator[TemporaryContext]"
                ]
            }
        },
        "DictionaryMatch.init": {
            "name": "init",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictionaryMatch._stem": {
            "name": "_stem",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "str"
                ]
            }
        },
        "DictionaryMatch._f": {
            "name": "_f",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "LambdaFunctionMatcher.init": {
            "name": "init",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunctionMatcher._f": {
            "name": "_f",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "Union.f": {
            "name": "f",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "Intersect.f": {
            "name": "f",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "Inverse.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inverse.f": {
            "name": "f",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "Concat.init": {
            "name": "init",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concat.f": {
            "name": "f",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "_RegexMatch.init": {
            "name": "init",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RegexMatch._f": {
            "name": "_f",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "RegexMatchSpan._f": {
            "name": "_f",
            "location": 343,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "RegexMatchEach._f": {
            "name": "_f",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        },
        "PersonMatcher.__init__": {
            "name": "__init__",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocationMatcher.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMatcher.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateMatcher.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberMatcher.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiscMatcher.__init__": {
            "name": "__init__",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunctionFigureMatcher.init": {
            "name": "init",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunctionFigureMatcher._f": {
            "name": "_f",
            "location": 500,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "TemporaryContext"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/mentions.py": {
        "MentionSpace.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionSpace.apply": {
            "name": "apply",
            "location": 39,
            "return": [
                "Iterator[TemporaryContext]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Context"
                ]
            }
        },
        "Ngrams.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "split_tokens": [
                    "Collection[str]"
                ]
            }
        },
        "Ngrams.apply": {
            "name": "apply",
            "location": 74,
            "return": [
                "Iterator[TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Sentence"
                ]
            }
        },
        "MentionNgrams.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "split_tokens": [
                    "Collection[str]"
                ]
            }
        },
        "MentionNgrams.apply": {
            "name": "apply",
            "location": 148,
            "return": [
                "Iterator[TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionFigures.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Optional[str]"
                ]
            }
        },
        "MentionFigures.apply": {
            "name": "apply",
            "location": 180,
            "return": [
                "Iterator[TemporaryFigureMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionSentences.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionSentences.apply": {
            "name": "apply",
            "location": 206,
            "return": [
                "Iterator[TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionParagraphs.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionParagraphs.apply": {
            "name": "apply",
            "location": 231,
            "return": [
                "Iterator[TemporaryParagraphMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionCaptions.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionCaptions.apply": {
            "name": "apply",
            "location": 254,
            "return": [
                "Iterator[TemporaryCaptionMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionCells.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionCells.apply": {
            "name": "apply",
            "location": 277,
            "return": [
                "Iterator[TemporaryCellMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionTables.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionTables.apply": {
            "name": "apply",
            "location": 300,
            "return": [
                "Iterator[TemporaryTableMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionSections.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionSections.apply": {
            "name": "apply",
            "location": 323,
            "return": [
                "Iterator[TemporarySectionMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionDocuments.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionDocuments.apply": {
            "name": "apply",
            "location": 346,
            "return": [
                "Iterator[TemporaryDocumentMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "MentionExtractor.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "mention_classes": [
                    "List[Mention]"
                ],
                "mention_spaces": [
                    "List[MentionSpace]"
                ],
                "matchers": [
                    "List[_Matcher]"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "MentionExtractor.apply": {
            "name": "apply",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Collection[Document]"
                ],
                "clear": [
                    "bool"
                ],
                "parallelism": [
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool"
                ]
            }
        },
        "MentionExtractor.clear": {
            "name": "clear",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionExtractor.clear_all": {
            "name": "clear_all",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionExtractor.get_mentions": {
            "name": "get_mentions",
            "location": 489,
            "return": [
                "List[List[Mention]]"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Union[(Document, Iterable[Document], None)]"
                ],
                "sort": [
                    "bool"
                ]
            }
        },
        "MentionExtractorUDF.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "mention_classes": [
                    "Union[(Mention, List[Mention])]"
                ],
                "mention_spaces": [
                    "Union[(MentionSpace, List[MentionSpace])]"
                ],
                "matchers": [
                    "Union[(_Matcher, List[_Matcher])]"
                ]
            }
        },
        "MentionExtractorUDF.apply": {
            "name": "apply",
            "location": 555,
            "return": [
                "Document"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/__init__.py": {},
    "fonduer-master/src/fonduer/candidates/models/candidate.py": {
        "candidate_subclass": {
            "name": "candidate_subclass",
            "location": 71,
            "return": [
                "Type[Candidate]"
            ],
            "arguments": {
                "class_name": [
                    "str"
                ],
                "args": [
                    "List[Mention]"
                ],
                "table_name": [
                    "Optional[str]"
                ],
                "cardinality": [
                    "Optional[int]"
                ],
                "values": [
                    "Optional[List[Any]]"
                ],
                "nullables": [
                    "Optional[List[bool]]"
                ]
            }
        },
        "Candidate.get_mentions": {
            "name": "get_mentions",
            "location": 44,
            "return": [
                "Tuple[(Mention, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Candidate.__len__": {
            "name": "__len__",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Candidate.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [
                "Mention"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "Candidate.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Candidate.__gt__": {
            "name": "__gt__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_cand": [
                    "'Candidate'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/caption_mention.py": {
        "TemporaryCaptionMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caption": [
                    "Caption"
                ]
            }
        },
        "TemporaryCaptionMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCaptionMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCaptionMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCaptionMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCaptionMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "Type['CaptionMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_instance": {
            "name": "_get_instance",
            "location": 76,
            "return": [
                "'TemporaryCaptionMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptionMention.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporaryCaptionMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/cell_mention.py": {
        "TemporaryCellMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "Cell"
                ]
            }
        },
        "TemporaryCellMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCellMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCellMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCellMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryCellMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "Type['CellMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_instance": {
            "name": "_get_instance",
            "location": 78,
            "return": [
                "'TemporaryCellMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellMention.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporaryCellMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/document_mention.py": {
        "TemporaryDocumentMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "Document"
                ]
            }
        },
        "TemporaryDocumentMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryDocumentMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryDocumentMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryDocumentMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryDocumentMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_table": {
            "name": "_get_table",
            "location": 60,
            "return": [
                "Type['DocumentMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_instance": {
            "name": "_get_instance",
            "location": 73,
            "return": [
                "'TemporaryDocumentMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentMention.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporaryDocumentMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/figure_mention.py": {
        "TemporaryFigureMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "figure": [
                    "Figure"
                ]
            }
        },
        "TemporaryFigureMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryFigureMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryFigureMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryFigureMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryFigureMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "Type['FigureMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_instance": {
            "name": "_get_instance",
            "location": 78,
            "return": [
                "'TemporaryFigureMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigureMention.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporaryFigureMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/implicit_span_mention.py": {
        "TemporaryImplicitSpanMention.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "Sentence"
                ],
                "char_start": [
                    "int"
                ],
                "char_end": [
                    "int"
                ],
                "expander_key": [
                    "str"
                ],
                "position": [
                    "int"
                ],
                "text": [
                    "str"
                ],
                "words": [
                    "List[str]"
                ],
                "lemmas": [
                    "List[str]"
                ],
                "pos_tags": [
                    "List[str]"
                ],
                "ner_tags": [
                    "List[str]"
                ],
                "dep_parents": [
                    "List[int]"
                ],
                "dep_labels": [
                    "List[str]"
                ],
                "page": [
                    "List[Optional[int]]"
                ],
                "top": [
                    "List[Optional[int]]"
                ],
                "left": [
                    "List[Optional[int]]"
                ],
                "bottom": [
                    "List[Optional[int]]"
                ],
                "right": [
                    "List[Optional[int]]"
                ],
                "meta": [
                    "Any"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__ne__": {
            "name": "__ne__",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__hash__": {
            "name": "__hash__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_table": {
            "name": "_get_table",
            "location": 113,
            "return": [
                "Type['ImplicitSpanMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 119,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention.get_attrib_tokens": {
            "name": "get_attrib_tokens",
            "location": 141,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ]
            }
        },
        "TemporaryImplicitSpanMention.get_attrib_span": {
            "name": "get_attrib_span",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__getitem__": {
            "name": "__getitem__",
            "location": 171,
            "return": [
                "'TemporaryImplicitSpanMention'"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "slice"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__repr__": {
            "name": "__repr__",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_instance": {
            "name": "_get_instance",
            "location": 222,
            "return": [
                "'TemporaryImplicitSpanMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplicitSpanMention.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporaryImplicitSpanMention"
                ]
            }
        },
        "ImplicitSpanMention._get_instance": {
            "name": "_get_instance",
            "location": 342,
            "return": [
                "'ImplicitSpanMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplicitSpanMention.__eq__": {
            "name": "__eq__",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "ImplicitSpanMention.__ne__": {
            "name": "__ne__",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "ImplicitSpanMention.__hash__": {
            "name": "__hash__",
            "location": 359,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/mention.py": {
        "mention_subclass": {
            "name": "mention_subclass",
            "location": 66,
            "return": [
                "Type[Mention]"
            ],
            "arguments": {
                "class_name": [
                    "str"
                ],
                "cardinality": [
                    "Optional[int]"
                ],
                "values": [
                    "Optional[List[Any]]"
                ],
                "table_name": [
                    "Optional[str]"
                ]
            }
        },
        "Mention.get_contexts": {
            "name": "get_contexts",
            "location": 39,
            "return": [
                "Tuple[(Context, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mention.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mention.__getitem__": {
            "name": "__getitem__",
            "location": 47,
            "return": [
                "Context"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "Mention.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mention.__gt__": {
            "name": "__gt__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Mention'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/paragraph_mention.py": {
        "TemporaryParagraphMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paragraph": [
                    "Paragraph"
                ]
            }
        },
        "TemporaryParagraphMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryParagraphMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryParagraphMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryParagraphMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryParagraphMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_table": {
            "name": "_get_table",
            "location": 60,
            "return": [
                "Type['ParagraphMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_instance": {
            "name": "_get_instance",
            "location": 79,
            "return": [
                "'TemporaryParagraphMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParagraphMention.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporaryParagraphMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/section_mention.py": {
        "TemporarySectionMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "Section"
                ]
            }
        },
        "TemporarySectionMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporarySectionMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporarySectionMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporarySectionMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporarySectionMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "Type['SectionMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_instance": {
            "name": "_get_instance",
            "location": 77,
            "return": [
                "'TemporarySectionMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SectionMention.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporarySectionMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/span_mention.py": {
        "TemporarySpanMention.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "Sentence"
                ],
                "char_start": [
                    "int"
                ],
                "char_end": [
                    "int"
                ],
                "meta": [
                    "Optional[Any]"
                ]
            }
        },
        "TemporarySpanMention.__len__": {
            "name": "__len__",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporarySpanMention.__ne__": {
            "name": "__ne__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporarySpanMention.__hash__": {
            "name": "__hash__",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_table": {
            "name": "_get_table",
            "location": 69,
            "return": [
                "Type['SpanMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 75,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_word_start_index": {
            "name": "get_word_start_index",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_word_end_index": {
            "name": "get_word_end_index",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_num_words": {
            "name": "get_num_words",
            "location": 97,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._char_to_word_index": {
            "name": "_char_to_word_index",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ci": [
                    "int"
                ]
            }
        },
        "TemporarySpanMention._word_to_char_index": {
            "name": "_word_to_char_index",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "wi": [
                    "int"
                ]
            }
        },
        "TemporarySpanMention.get_attrib_tokens": {
            "name": "get_attrib_tokens",
            "location": 126,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ]
            }
        },
        "TemporarySpanMention.get_attrib_span": {
            "name": "get_attrib_span",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "TemporarySpanMention.get_span": {
            "name": "get_span",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_bbox": {
            "name": "get_bbox",
            "location": 169,
            "return": [
                "Bbox"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.__contains__": {
            "name": "__contains__",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_span": [
                    "object"
                ]
            }
        },
        "TemporarySpanMention.__getitem__": {
            "name": "__getitem__",
            "location": 192,
            "return": [
                "'TemporarySpanMention'"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "slice"
                ]
            }
        },
        "TemporarySpanMention.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_instance": {
            "name": "_get_instance",
            "location": 226,
            "return": [
                "'TemporarySpanMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanMention.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporarySpanMention"
                ]
            }
        },
        "SpanMention._get_instance": {
            "name": "_get_instance",
            "location": 276,
            "return": [
                "'SpanMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanMention.__eq__": {
            "name": "__eq__",
            "location": 281,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "SpanMention.__ne__": {
            "name": "__ne__",
            "location": 287,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "SpanMention.__hash__": {
            "name": "__hash__",
            "location": 293,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/table_mention.py": {
        "TemporaryTableMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Table"
                ]
            }
        },
        "TemporaryTableMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryTableMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryTableMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryTableMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryTableMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "Type['TableMention']"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_instance": {
            "name": "_get_instance",
            "location": 77,
            "return": [
                "'TemporaryTableMention'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableMention.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "tc": [
                    "TemporaryTableMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/temporary_context.py": {
        "TemporaryContext.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryContext.__ne__": {
            "name": "__ne__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryContext.__gt__": {
            "name": "__gt__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryContext.__contains__": {
            "name": "__contains__",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TemporaryContext.__hash__": {
            "name": "__hash__",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext._get_table": {
            "name": "_get_table",
            "location": 64,
            "return": [
                "Type[Context]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext._get_insert_args": {
            "name": "_get_insert_args",
            "location": 67,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext.get_stable_id": {
            "name": "get_stable_id",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/__init__.py": {},
    "fonduer-master/src/fonduer/features/feature_extractors.py": {
        "FeatureExtractor.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "List[str]"
                ],
                "customize_feature_funcs": [
                    "Union[(Feature_func, List[Feature_func])]"
                ]
            }
        },
        "FeatureExtractor.extract": {
            "name": "extract",
            "location": 53,
            "return": [
                "Iterator[Tuple[(int, str, int)]]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "Union[(List[Candidate], Candidate)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/featurizer.py": {
        "Featurizer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "candidate_classes": [
                    "List[Candidate]"
                ],
                "feature_extractors": [
                    "FeatureExtractor"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "Featurizer.update": {
            "name": "update",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Optional[Collection[Document]]"
                ],
                "split": [
                    "int"
                ],
                "parallelism": [
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool"
                ]
            }
        },
        "Featurizer.apply": {
            "name": "apply",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Optional[Collection[Document]]"
                ],
                "split": [
                    "int"
                ],
                "train": [
                    "bool"
                ],
                "clear": [
                    "bool"
                ],
                "parallelism": [
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool"
                ]
            }
        },
        "Featurizer.upsert_keys": {
            "name": "upsert_keys",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Iterable[str]"
                ],
                "candidate_classes": [
                    "Union[(Candidate, Iterable[Candidate], None)]"
                ]
            }
        },
        "Featurizer.drop_keys": {
            "name": "drop_keys",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Iterable[str]"
                ],
                "candidate_classes": [
                    "Union[(Candidate, Iterable[Candidate], None)]"
                ]
            }
        },
        "Featurizer.get_keys": {
            "name": "get_keys",
            "location": 241,
            "return": [
                "List[FeatureKey]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Featurizer._add": {
            "name": "_add",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "records_list": [
                    "List[List[Dict[(str, Any)]]]"
                ]
            }
        },
        "Featurizer.clear": {
            "name": "clear",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool"
                ],
                "split": [
                    "int"
                ]
            }
        },
        "Featurizer.clear_all": {
            "name": "clear_all",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Featurizer._after_apply": {
            "name": "_after_apply",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool"
                ]
            }
        },
        "Featurizer.get_feature_matrices": {
            "name": "get_feature_matrices",
            "location": 297,
            "return": [
                "List[csr_matrix]"
            ],
            "arguments": {
                "self": [],
                "cand_lists": [
                    "List[List[Candidate]]"
                ]
            }
        },
        "FeaturizerUDF.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate_classes": [
                    "Iterable[Type[Candidate]]"
                ],
                "feature_extractors": [
                    "FeatureExtractor"
                ]
            }
        },
        "FeaturizerUDF.apply": {
            "name": "apply",
            "location": 329,
            "return": [
                "List[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/__init__.py": {},
    "fonduer-master/src/fonduer/features/feature_libs/structural_features.py": {
        "extract_structural_features": {
            "name": "extract_structural_features",
            "location": 26,
            "return": [
                "Iterator[Tuple[(int, str, int)]]"
            ],
            "arguments": {
                "candidates": [
                    "Union[(Candidate, List[Candidate])]"
                ]
            }
        },
        "_strlib_unary_features": {
            "name": "_strlib_unary_features",
            "location": 77,
            "return": [
                "Iterator[Tuple[(str, int)]]"
            ],
            "arguments": {
                "span": [
                    "SpanMention"
                ]
            }
        },
        "_strlib_multinary_features": {
            "name": "_strlib_multinary_features",
            "location": 109,
            "return": [
                "Iterator[Tuple[(str, int)]]"
            ],
            "arguments": {
                "spans": [
                    "Tuple[(SpanMention, ...)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/tabular_features.py": {
        "extract_tabular_features": {
            "name": "extract_tabular_features",
            "location": 24,
            "return": [
                "Iterator[Tuple[(int, str, int)]]"
            ],
            "arguments": {
                "candidates": [
                    "Union[(Candidate, List[Candidate])]"
                ]
            }
        },
        "_tablelib_unary_features": {
            "name": "_tablelib_unary_features",
            "location": 74,
            "return": [
                "Iterator[Tuple[(str, int)]]"
            ],
            "arguments": {
                "span": [
                    "SpanMention"
                ]
            }
        },
        "_tablelib_multinary_features": {
            "name": "_tablelib_multinary_features",
            "location": 133,
            "return": [
                "Iterator[Tuple[(str, int)]]"
            ],
            "arguments": {
                "spans": [
                    "Tuple[(SpanMention, ...)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/textual_features.py": {
        "extract_textual_features": {
            "name": "extract_textual_features",
            "location": 34,
            "return": [
                "Iterator[Tuple[(int, str, int)]]"
            ],
            "arguments": {
                "candidates": [
                    "Union[(Candidate, List[Candidate])]"
                ]
            }
        },
        "_compile_entity_feature_generator": {
            "name": "_compile_entity_feature_generator",
            "location": 109,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "_get_ddlib_feats": {
            "name": "_get_ddlib_feats",
            "location": 136,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "span": [
                    "SpanMention"
                ],
                "context": [
                    "Dict[(str, Any)]"
                ],
                "idxs": [
                    "List[int]"
                ]
            }
        },
        "_get_seq_features": {
            "name": "_get_seq_features",
            "location": 153,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "context": [
                    "Dict[(str, Any)]"
                ],
                "idxs": [
                    "List[int]"
                ]
            }
        },
        "_get_window_features": {
            "name": "_get_window_features",
            "location": 160,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "context": [
                    "Dict[(str, Any)]"
                ],
                "idxs": [
                    "List[int]"
                ],
                "window": [
                    "int"
                ],
                "combinations": [
                    "bool"
                ],
                "isolated": [
                    "bool"
                ]
            }
        },
        "_get_word_feats": {
            "name": "_get_word_feats",
            "location": 241,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "span": [
                    "SpanMention"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/tree_structs.py": {
        "corenlp_to_xmltree": {
            "name": "corenlp_to_xmltree",
            "location": 45,
            "return": [
                "XMLTree"
            ],
            "arguments": {
                "obj": [
                    "Union[(Dict, Sentence)]"
                ],
                "prune_root": [
                    "bool"
                ]
            }
        },
        "scrub": {
            "name": "scrub",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "corenlp_to_xmltree_sub": {
            "name": "corenlp_to_xmltree_sub",
            "location": 98,
            "return": [
                "_Element"
            ],
            "arguments": {
                "s": [
                    "Dict[(str, Any)]"
                ],
                "dep_parents": [
                    "List[int]"
                ],
                "rid": [
                    "int"
                ]
            }
        },
        "singular": {
            "name": "singular",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "XMLTree.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml_root": [
                    "_Element"
                ],
                "words": [
                    "Optional[List[str]]"
                ]
            }
        },
        "XMLTree._to_json": {
            "name": "_to_json",
            "location": 28,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "_Element"
                ]
            }
        },
        "XMLTree.to_json": {
            "name": "to_json",
            "location": 35,
            "return": [
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLTree.to_str": {
            "name": "to_str",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/visual_features.py": {
        "extract_visual_features": {
            "name": "extract_visual_features",
            "location": 23,
            "return": [
                "Iterator[Tuple[(int, str, int)]]"
            ],
            "arguments": {
                "candidates": [
                    "Union[(Candidate, List[Candidate])]"
                ]
            }
        },
        "_vizlib_unary_features": {
            "name": "_vizlib_unary_features",
            "location": 76,
            "return": [
                "Iterator[Tuple[(str, int)]]"
            ],
            "arguments": {
                "span": [
                    "SpanMention"
                ]
            }
        },
        "_vizlib_multinary_features": {
            "name": "_vizlib_multinary_features",
            "location": 88,
            "return": [
                "Iterator[Tuple[(str, int)]]"
            ],
            "arguments": {
                "spans": [
                    "Tuple[(SpanMention, ...)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/__init__.py": {},
    "fonduer-master/src/fonduer/features/models/feature.py": {},
    "fonduer-master/src/fonduer/features/models/__init__.py": {},
    "fonduer-master/src/fonduer/learning/dataset.py": {
        "FonduerDataset.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "candidates": [
                    "List[Candidate]"
                ],
                "features": [
                    "csr_matrix"
                ],
                "word2id": [
                    "Dict"
                ],
                "labels": [
                    "Union[(np.array, int)]"
                ],
                "index": [
                    "Optional[List[int]]"
                ]
            }
        },
        "FonduerDataset.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FonduerDataset.__getitem__": {
            "name": "__getitem__",
            "location": 72,
            "return": [
                "Tuple[(Dict[(str, Union[(Tensor, list)])], Dict[(str, Tensor)])]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "FonduerDataset._map_to_id": {
            "name": "_map_to_id",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FonduerDataset._map_features": {
            "name": "_map_features",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FonduerDataset._map_labels": {
            "name": "_map_labels",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/learning/task.py": {
        "loss": {
            "name": "loss",
            "location": 24,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "intermediate_output_dict": [
                    "Dict[(str, Any)]"
                ],
                "Y": [
                    "Tensor"
                ],
                "active": [
                    "Tensor"
                ]
            }
        },
        "output": {
            "name": "output",
            "location": 49,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "intermediate_output_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 59,
            "return": [
                "List[EmmentalTask]"
            ],
            "arguments": {
                "task_names": [
                    "Union[(str, List[str])]"
                ],
                "n_arities": [
                    "Union[(int, List[int])]"
                ],
                "n_features": [
                    "int"
                ],
                "n_classes": [
                    "Union[(int, List[int])]"
                ],
                "emb_layer": [
                    "Optional[EmbeddingModule]"
                ],
                "model": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/utils.py": {
        "save_marginals": {
            "name": "save_marginals",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "X": [
                    "List[Candidate]"
                ],
                "marginals": [
                    "Session"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "confusion_matrix": {
            "name": "confusion_matrix",
            "location": 77,
            "return": [
                "Tuple[(Set, Set, Set)]"
            ],
            "arguments": {
                "pred": [
                    "Set"
                ],
                "gold": [
                    "Set"
                ]
            }
        },
        "mention_to_tokens": {
            "name": "mention_to_tokens",
            "location": 96,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mention": [
                    "Mention"
                ],
                "token_type": [
                    "str"
                ],
                "lowercase": [
                    "bool"
                ]
            }
        },
        "mark": {
            "name": "mark",
            "location": 110,
            "return": [
                "List[Tuple[(int, str)]]"
            ],
            "arguments": {
                "l": [
                    "int"
                ],
                "h": [
                    "int"
                ],
                "idx": [
                    "int"
                ]
            }
        },
        "mark_sentence": {
            "name": "mark_sentence",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "List[str]"
                ],
                "args": [
                    "List[Tuple[(int, int, int)]]"
                ]
            }
        },
        "collect_word_counter": {
            "name": "collect_word_counter",
            "location": 141,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "candidates": [
                    "Union[(List[Candidate], List[List[Candidate]])]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/__init__.py": {},
    "fonduer-master/src/fonduer/learning/models/marginal.py": {
        "Marginal.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/learning/models/prediction.py": {},
    "fonduer-master/src/fonduer/learning/models/__init__.py": {},
    "fonduer-master/src/fonduer/learning/modules/concat_linear.py": {
        "ConcatLinear.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "concat_output_keys": [
                    "List[str]"
                ],
                "input_dim": [
                    "int"
                ],
                "outpt_dim": [
                    "int"
                ]
            }
        },
        "ConcatLinear.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [],
                "intermediate_output_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/modules/soft_cross_entropy_loss.py": {
        "SoftCrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [
                    "List[float]"
                ],
                "reduction": [
                    "str"
                ]
            }
        },
        "SoftCrossEntropyLoss.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Tensor"
                ],
                "target": [
                    "Tensor"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/modules/__init__.py": {},
    "fonduer-master/src/fonduer/packaging/fonduer_model.py": {
        "_load_pyfunc": {
            "name": "_load_pyfunc",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ]
            }
        },
        "log_model": {
            "name": "log_model",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "fonduer_model": [
                    "FonduerModel"
                ],
                "artifact_path": [
                    "str"
                ],
                "preprocessor": [
                    "DocPreprocessor"
                ],
                "parser": [
                    "Parser"
                ],
                "mention_extractor": [
                    "MentionExtractor"
                ],
                "candidate_extractor": [
                    "CandidateExtractor"
                ],
                "conda_env": [
                    "Optional[Union[(Dict, str)]]"
                ],
                "code_paths": [
                    "Optional[List[str]]"
                ],
                "model_type": [
                    "Optional[str]"
                ],
                "labeler": [
                    "Optional[Labeler]"
                ],
                "lfs": [
                    "Optional[List[List[Callable]]]"
                ],
                "label_models": [
                    "Optional[List[LabelModel]]"
                ],
                "featurizer": [
                    "Optional[Featurizer]"
                ],
                "emmental_model": [
                    "Optional[EmmentalModel]"
                ],
                "word2id": [
                    "Optional[Dict]"
                ]
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "fonduer_model": [
                    "FonduerModel"
                ],
                "path": [
                    "str"
                ],
                "preprocessor": [
                    "DocPreprocessor"
                ],
                "parser": [
                    "Parser"
                ],
                "mention_extractor": [
                    "MentionExtractor"
                ],
                "candidate_extractor": [
                    "CandidateExtractor"
                ],
                "mlflow_model": [
                    "Model"
                ],
                "conda_env": [
                    "Optional[Union[(Dict, str)]]"
                ],
                "code_paths": [
                    "Optional[List[str]]"
                ],
                "model_type": [
                    "Optional[str]"
                ],
                "labeler": [
                    "Optional[Labeler]"
                ],
                "lfs": [
                    "Optional[List[List[Callable]]]"
                ],
                "label_models": [
                    "Optional[List[LabelModel]]"
                ],
                "featurizer": [
                    "Optional[Featurizer]"
                ],
                "emmental_model": [
                    "Optional[EmmentalModel]"
                ],
                "word2id": [
                    "Optional[Dict]"
                ]
            }
        },
        "_get_default_conda_env": {
            "name": "_get_default_conda_env",
            "location": 348,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "_save_emmental_model": {
            "name": "_save_emmental_model",
            "location": 369,
            "return": [
                "bytes"
            ],
            "arguments": {
                "emmental_model": [
                    "EmmentalModel"
                ]
            }
        },
        "_load_emmental_model": {
            "name": "_load_emmental_model",
            "location": 376,
            "return": [
                "EmmentalModel"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        },
        "_save_mention_classes": {
            "name": "_save_mention_classes",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_classes": [
                    "List[Mention]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_load_mention_classes": {
            "name": "_load_mention_classes",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_save_candidate_classes": {
            "name": "_save_candidate_classes",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "candidate_classes": [
                    "List[Candidate]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_load_candidate_classes": {
            "name": "_load_candidate_classes",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "FonduerModel._classify": {
            "name": "_classify",
            "location": 54,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "FonduerModel.predict": {
            "name": "predict",
            "location": 58,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "model_input": [
                    "DataFrame"
                ]
            }
        },
        "FonduerModel._process": {
            "name": "_process",
            "location": 81,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "html_path": [
                    "str"
                ],
                "pdf_path": [
                    "Optional[str]"
                ]
            }
        },
        "FonduerModel.convert_features_to_matrix": {
            "name": "convert_features_to_matrix",
            "location": 108,
            "return": [
                "csr_matrix"
            ],
            "arguments": {
                "features": [
                    "List[Dict[(str, Any)]]"
                ],
                "keys": [
                    "List[str]"
                ]
            }
        },
        "FonduerModel.convert_labels_to_matrix": {
            "name": "convert_labels_to_matrix",
            "location": 119,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "labels": [
                    "List[Dict[(str, Any)]]"
                ],
                "keys": [
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/packaging/__init__.py": {},
    "fonduer-master/src/fonduer/parser/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "parallelism": [
                    "int"
                ],
                "structural": [
                    "bool"
                ],
                "blacklist": [
                    "List[str]"
                ],
                "flatten": [
                    "List[str]"
                ],
                "language": [
                    "str"
                ],
                "lingual": [
                    "bool"
                ],
                "lingual_parser": [
                    "Optional[LingualParser]"
                ],
                "strip": [
                    "bool"
                ],
                "replacements": [
                    "List[Tuple[(str, str)]]"
                ],
                "tabular": [
                    "bool"
                ],
                "visual_parser": [
                    "Optional[VisualParser]"
                ]
            }
        },
        "Parser.apply": {
            "name": "apply",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_loader": [
                    "Collection[Document]"
                ],
                "clear": [
                    "bool"
                ],
                "parallelism": [
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool"
                ]
            }
        },
        "Parser._add": {
            "name": "_add",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "doc": [
                    "Union[(Document, None)]"
                ]
            }
        },
        "Parser.clear": {
            "name": "clear",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_last_documents": {
            "name": "get_last_documents",
            "location": 142,
            "return": [
                "List[Document]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_documents": {
            "name": "get_documents",
            "location": 154,
            "return": [
                "List[Document]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserUDF.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "structural": [
                    "bool"
                ],
                "blacklist": [
                    "Union[(str, List[str])]"
                ],
                "flatten": [
                    "Union[(str, List[str])]"
                ],
                "lingual": [
                    "bool"
                ],
                "lingual_parser": [
                    "Optional[LingualParser]"
                ],
                "strip": [
                    "bool"
                ],
                "replacements": [
                    "List[Tuple[(str, str)]]"
                ],
                "tabular": [
                    "bool"
                ],
                "visual_parser": [
                    "Optional[VisualParser]"
                ],
                "language": [
                    "Optional[str]"
                ]
            }
        },
        "ParserUDF.apply": {
            "name": "apply",
            "location": 229,
            "return": [
                "Optional[Document]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "Document"
                ]
            }
        },
        "ParserUDF._parse_table": {
            "name": "_parse_table",
            "location": 266,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HtmlElement"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ParserUDF._parse_figure": {
            "name": "_parse_figure",
            "location": 394,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HtmlElement"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ParserUDF._parse_sentence": {
            "name": "_parse_sentence",
            "location": 472,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "paragraph": [
                    "Paragraph"
                ],
                "node": [
                    "HtmlElement"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ParserUDF._parse_paragraph": {
            "name": "_parse_paragraph",
            "location": 583,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HtmlElement"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ParserUDF._parse_section": {
            "name": "_parse_section",
            "location": 666,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HtmlElement"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ParserUDF._parse_caption": {
            "name": "_parse_caption",
            "location": 703,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HtmlElement"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ParserUDF._parse_node": {
            "name": "_parse_node",
            "location": 752,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "HtmlElement"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ParserUDF.parse": {
            "name": "parse",
            "location": 775,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "Document"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/__init__.py": {},
    "fonduer-master/src/fonduer/parser/lingual_parser/lingual_parser.py": {
        "LingualParser.split_sentences": {
            "name": "split_sentences",
            "location": 10,
            "return": [
                "Iterable[dict]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LingualParser.enrich_sentences_with_NLP": {
            "name": "enrich_sentences_with_NLP",
            "location": 20,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "Collection[Sentence]"
                ]
            }
        },
        "LingualParser.has_NLP_support": {
            "name": "has_NLP_support",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LingualParser.has_tokenizer_support": {
            "name": "has_tokenizer_support",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/lingual_parser/simple_parser.py": {
        "SimpleParser.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delim": [
                    "str"
                ]
            }
        },
        "SimpleParser.split_sentences": {
            "name": "split_sentences",
            "location": 19,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str"
                ]
            }
        },
        "SimpleParser.has_NLP_support": {
            "name": "has_NLP_support",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleParser.has_tokenizer_support": {
            "name": "has_tokenizer_support",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/lingual_parser/spacy_parser.py": {
        "set_custom_boundary": {
            "name": "set_custom_boundary",
            "location": 252,
            "return": [
                "Doc"
            ],
            "arguments": {
                "doc": [
                    "Doc"
                ]
            }
        },
        "SpacyParser.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "Optional[str]"
                ]
            }
        },
        "SpacyParser.has_tokenizer_support": {
            "name": "has_tokenizer_support",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpacyParser.has_NLP_support": {
            "name": "has_NLP_support",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpacyParser.model_installed": {
            "name": "model_installed",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "SpacyParser._load_lang_model": {
            "name": "_load_lang_model",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpacyParser.enrich_sentences_with_NLP": {
            "name": "enrich_sentences_with_NLP",
            "location": 102,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "Collection[Sentence]"
                ]
            }
        },
        "SpacyParser._split_sentences_by_char_limit": {
            "name": "_split_sentences_by_char_limit",
            "location": 177,
            "return": [
                "List[List[Sentence]]"
            ],
            "arguments": {
                "self": [],
                "all_sentences": [
                    "Collection[Sentence]"
                ],
                "batch_char_limit": [
                    "int"
                ]
            }
        },
        "SpacyParser.split_sentences": {
            "name": "split_sentences",
            "location": 191,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TokenPreservingTokenizer.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Vocab"
                ]
            }
        },
        "TokenPreservingTokenizer.__call__": {
            "name": "__call__",
            "location": 288,
            "return": [
                "Doc"
            ],
            "arguments": {
                "self": [],
                "tokenized_sentences": [
                    "List[Sentence]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/lingual_parser/__init__.py": {},
    "fonduer-master/src/fonduer/parser/models/caption.py": {
        "Caption.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caption.__gt__": {
            "name": "__gt__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Caption'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/context.py": {},
    "fonduer-master/src/fonduer/parser/models/document.py": {
        "Document.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__gt__": {
            "name": "__gt__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Document'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/figure.py": {
        "Figure.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Figure.__gt__": {
            "name": "__gt__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Figure'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/paragraph.py": {
        "Paragraph.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.__gt__": {
            "name": "__gt__",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Paragraph'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/section.py": {
        "Section.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.__gt__": {
            "name": "__gt__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Section'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/sentence.py": {
        "SentenceMixin.is_lingual": {
            "name": "is_lingual",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceMixin.is_visual": {
            "name": "is_visual",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceMixin.is_tabular": {
            "name": "is_tabular",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceMixin.is_structural": {
            "name": "is_structural",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LingualMixin.lemmas": {
            "name": "lemmas",
            "location": 57,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LingualMixin.pos_tags": {
            "name": "pos_tags",
            "location": 62,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LingualMixin.ner_tags": {
            "name": "ner_tags",
            "location": 67,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LingualMixin.dep_parents": {
            "name": "dep_parents",
            "location": 72,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LingualMixin.dep_labels": {
            "name": "dep_labels",
            "location": 77,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LingualMixin.is_lingual": {
            "name": "is_lingual",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularMixin.table_id": {
            "name": "table_id",
            "location": 90,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.table": {
            "name": "table",
            "location": 95,
            "return": [
                "relationship"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.cell_id": {
            "name": "cell_id",
            "location": 104,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.cell": {
            "name": "cell",
            "location": 109,
            "return": [
                "relationship"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.row_start": {
            "name": "row_start",
            "location": 118,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.row_end": {
            "name": "row_end",
            "location": 123,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.col_start": {
            "name": "col_start",
            "location": 128,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.col_end": {
            "name": "col_end",
            "location": 133,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TabularMixin.is_tabular": {
            "name": "is_tabular",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularMixin.is_cellular": {
            "name": "is_cellular",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisualMixin.page": {
            "name": "page",
            "location": 150,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VisualMixin.top": {
            "name": "top",
            "location": 158,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VisualMixin.left": {
            "name": "left",
            "location": 163,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VisualMixin.bottom": {
            "name": "bottom",
            "location": 168,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VisualMixin.right": {
            "name": "right",
            "location": 173,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "VisualMixin.is_visual": {
            "name": "is_visual",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisualMixin.get_bbox": {
            "name": "get_bbox",
            "location": 181,
            "return": [
                "Bbox"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuralMixin.xpath": {
            "name": "xpath",
            "location": 201,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "StructuralMixin.html_tag": {
            "name": "html_tag",
            "location": 206,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "StructuralMixin.html_attrs": {
            "name": "html_attrs",
            "location": 212,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "StructuralMixin.is_structural": {
            "name": "is_structural",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence._asdict": {
            "name": "_asdict",
            "location": 325,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__gt__": {
            "name": "__gt__",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Sentence'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/table.py": {
        "Table.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__gt__": {
            "name": "__gt__",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Table'"
                ]
            }
        },
        "Cell.__repr__": {
            "name": "__repr__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__gt__": {
            "name": "__gt__",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "'Cell'"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/utils.py": {
        "construct_stable_id": {
            "name": "construct_stable_id",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "parent_context": [
                    "Context"
                ],
                "polymorphic_type": [
                    "str"
                ],
                "relative_char_offset_start": [
                    "int"
                ],
                "relative_char_offset_end": [
                    "int"
                ]
            }
        },
        "split_stable_id": {
            "name": "split_stable_id",
            "location": 45,
            "return": [
                "Tuple[(str, str, List[int])]"
            ],
            "arguments": {
                "stable_id": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/webpage.py": {
        "Webpage.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/__init__.py": {},
    "fonduer-master/src/fonduer/parser/preprocessors/csv_doc_preprocessor.py": {
        "CSVDocPreprocessor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "max_docs": [
                    "int"
                ],
                "header": [
                    "bool"
                ],
                "delim": [
                    "str"
                ],
                "parser_rule": [
                    "Optional[Dict[(int, Callable)]]"
                ]
            }
        },
        "CSVDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 53,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "CSVDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/doc_preprocessor.py": {
        "DocPreprocessor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "max_docs": [
                    "int"
                ]
            }
        },
        "DocPreprocessor._generate": {
            "name": "_generate",
            "location": 34,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPreprocessor.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPreprocessor.__iter__": {
            "name": "__iter__",
            "location": 51,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPreprocessor._get_docs_for_path": {
            "name": "_get_docs_for_path",
            "location": 55,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ]
            }
        },
        "DocPreprocessor._get_stable_id": {
            "name": "_get_stable_id",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "doc_id": [
                    "str"
                ]
            }
        },
        "DocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 64,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "DocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str"
                ]
            }
        },
        "DocPreprocessor._get_files": {
            "name": "_get_files",
            "location": 70,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/hocr_doc_preprocessor.py": {
        "HOCRDocPreprocessor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "max_docs": [
                    "int"
                ],
                "space": [
                    "bool"
                ]
            }
        },
        "HOCRDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 46,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "HOCRDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HOCRDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str"
                ]
            }
        },
        "HOCRDocPreprocessor._parse_file.get_prop": {
            "name": "get_prop",
            "location": 48,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "node": [
                    "Tag"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "HOCRDocPreprocessor._parse_file.get_bbox": {
            "name": "get_bbox",
            "location": 60,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "node": [
                    "Tag"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/html_doc_preprocessor.py": {
        "HTMLDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 15,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "HTMLDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/text_doc_preprocessor.py": {
        "TextDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 14,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "TextDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/tsv_doc_preprocessor.py": {
        "TSVDocPreprocessor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "max_docs": [
                    "int"
                ],
                "header": [
                    "bool"
                ]
            }
        },
        "TSVDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 37,
            "return": [
                "Iterator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "TSVDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TSVDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/__init__.py": {},
    "fonduer-master/src/fonduer/parser/visual_parser/hocr_visual_parser.py": {
        "HocrVisualParser.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "replacements": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "HocrVisualParser.parse": {
            "name": "parse",
            "location": 37,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ],
                "sentences": [
                    "Iterable[Sentence]"
                ]
            }
        },
        "HocrVisualParser.is_parsable": {
            "name": "is_parsable",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ]
            }
        },
        "HocrVisualParser.parse.attrib_parse": {
            "name": "attrib_parse",
            "location": 47,
            "return": [
                "Dict[(str, Union[(List[int], List[str])])]"
            ],
            "arguments": {
                "html_attrs": [
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/visual_parser/pdf_visual_parser.py": {
        "PdfVisualParser.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf_path": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "PdfVisualParser.parse": {
            "name": "parse",
            "location": 85,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ],
                "sentences": [
                    "Iterable[Sentence]"
                ]
            }
        },
        "PdfVisualParser._extract_pdf_words": {
            "name": "_extract_pdf_words",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfVisualParser._get_linked_pdf_path": {
            "name": "_get_linked_pdf_path",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ]
            }
        },
        "PdfVisualParser.is_parsable": {
            "name": "is_parsable",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ]
            }
        },
        "PdfVisualParser._coordinates_from_HTML": {
            "name": "_coordinates_from_HTML",
            "location": 162,
            "return": [
                "Tuple[(List[PdfWord], Dict[(PdfWordId, Bbox)])]"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Tag"
                ],
                "page_num": [
                    "int"
                ]
            }
        },
        "PdfVisualParser._extract_html_words": {
            "name": "_extract_html_words",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfVisualParser._link_lists": {
            "name": "_link_lists",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_max": [
                    "int"
                ],
                "edit_cost": [
                    "int"
                ],
                "offset_cost": [
                    "int"
                ]
            }
        },
        "PdfVisualParser._update_coordinates": {
            "name": "_update_coordinates",
            "location": 345,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfVisualParser._link_lists.link_exact": {
            "name": "link_exact",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "l": [
                    "int"
                ],
                "u": [
                    "int"
                ]
            }
        },
        "PdfVisualParser._link_lists.link_fuzzy": {
            "name": "link_fuzzy",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "PdfVisualParser._link_lists.get_anchors": {
            "name": "get_anchors",
            "location": 258,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "l": [
                    "int"
                ],
                "u": [
                    "int"
                ]
            }
        },
        "PdfVisualParser._link_lists.display_match_counts": {
            "name": "display_match_counts",
            "location": 275,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/src/fonduer/parser/visual_parser/visual_parser.py": {
        "VisualParser.parse": {
            "name": "parse",
            "location": 12,
            "return": [
                "Iterator[Sentence]"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ],
                "sentences": [
                    "Iterable[Sentence]"
                ]
            }
        },
        "VisualParser.is_parsable": {
            "name": "is_parsable",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/visual_parser/__init__.py": {},
    "fonduer-master/src/fonduer/supervision/labeler.py": {
        "Labeler.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "candidate_classes": [
                    "List[Type[Candidate]]"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "Labeler.update": {
            "name": "update",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Collection[Document]"
                ],
                "split": [
                    "int"
                ],
                "lfs": [
                    "List[List[Callable]]"
                ],
                "parallelism": [
                    "int"
                ],
                "progress_bar": [
                    "bool"
                ],
                "table": [
                    "Table"
                ]
            }
        },
        "Labeler.apply": {
            "name": "apply",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "Collection[Document]"
                ],
                "split": [
                    "int"
                ],
                "train": [
                    "bool"
                ],
                "lfs": [
                    "List[List[Callable]]"
                ],
                "clear": [
                    "bool"
                ],
                "parallelism": [
                    "int"
                ],
                "progress_bar": [
                    "bool"
                ],
                "table": [
                    "Table"
                ]
            }
        },
        "Labeler.get_keys": {
            "name": "get_keys",
            "location": 194,
            "return": [
                "List[LabelKey]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Labeler.upsert_keys": {
            "name": "upsert_keys",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Iterable[Union[(str, Callable)]]"
                ],
                "candidate_classes": [
                    "Optional[Union[(Type[Candidate], List[Type[Candidate]])]]"
                ]
            }
        },
        "Labeler.drop_keys": {
            "name": "drop_keys",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Iterable[Union[(str, Callable)]]"
                ],
                "candidate_classes": [
                    "Optional[Union[(Type[Candidate], List[Type[Candidate]])]]"
                ]
            }
        },
        "Labeler._add": {
            "name": "_add",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "records_list": [
                    "List[List[Dict[(str, Any)]]]"
                ]
            }
        },
        "Labeler.clear": {
            "name": "clear",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool"
                ],
                "split": [
                    "int"
                ],
                "lfs": [
                    "Optional[List[List[Callable]]]"
                ],
                "table": [
                    "Table"
                ]
            }
        },
        "Labeler.clear_all": {
            "name": "clear_all",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Table"
                ]
            }
        },
        "Labeler._after_apply": {
            "name": "_after_apply",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool"
                ],
                "table": [
                    "Table"
                ]
            }
        },
        "Labeler.get_gold_labels": {
            "name": "get_gold_labels",
            "location": 377,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "cand_lists": [
                    "List[List[Candidate]]"
                ],
                "annotator": [
                    "Optional[str]"
                ]
            }
        },
        "Labeler.get_label_matrices": {
            "name": "get_label_matrices",
            "location": 407,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "cand_lists": [
                    "List[List[Candidate]]"
                ]
            }
        },
        "LabelerUDF.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "candidate_classes": [
                    "Union[(Type[Candidate], List[Type[Candidate]])]"
                ]
            }
        },
        "LabelerUDF._f_gen": {
            "name": "_f_gen",
            "location": 436,
            "return": [
                "Iterator[Tuple[(int, str, int)]]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Candidate"
                ]
            }
        },
        "LabelerUDF.apply": {
            "name": "apply",
            "location": 467,
            "return": [
                "List[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ],
                "lfs": [
                    "List[List[Callable]]"
                ],
                "table": [
                    "Table"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/supervision/__init__.py": {},
    "fonduer-master/src/fonduer/supervision/models/label.py": {
        "StableLabel.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/supervision/models/__init__.py": {},
    "fonduer-master/src/fonduer/utils/config.py": {
        "_merge": {
            "name": "_merge",
            "location": 45,
            "return": [
                "Dict"
            ],
            "arguments": {
                "x": [
                    "Dict"
                ],
                "y": [
                    "Dict"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 58,
            "return": [
                "Dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/udf.py": {
        "UDFRunner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "udf_class": [
                    "Type['UDF']"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "UDFRunner.apply": {
            "name": "apply",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_loader": [
                    "Collection[Document]"
                ],
                "clear": [
                    "bool"
                ],
                "parallelism": [
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool"
                ]
            }
        },
        "UDFRunner.clear": {
            "name": "clear",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDFRunner._after_apply": {
            "name": "_after_apply",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDFRunner._add": {
            "name": "_add",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Session"
                ],
                "instance": [
                    "Any"
                ]
            }
        },
        "UDFRunner._apply": {
            "name": "_apply",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_loader": [
                    "Collection[Document]"
                ],
                "parallelism": [
                    "int"
                ]
            }
        },
        "UDF.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_factory": [
                    "sessionmaker"
                ],
                "runner": [
                    "UDFRunner"
                ],
                "in_queue": [
                    "Optional[Queue]"
                ],
                "out_queue": [
                    "Optional[Queue]"
                ],
                "worker_id": [
                    "int"
                ]
            }
        },
        "UDF.run": {
            "name": "run",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDF.apply": {
            "name": "apply",
            "location": 229,
            "return": [
                "Union[(Document, None, List[List[Dict[(str, Any)]]])]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        },
        "UDFRunner._apply.in_thread_func": {
            "name": "in_thread_func",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/src/fonduer/utils/utils.py": {
        "camel_to_under": {
            "name": "camel_to_under",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_as_dict": {
            "name": "get_as_dict",
            "location": 25,
            "return": [
                "Dict"
            ],
            "arguments": {
                "x": [
                    "Union[(Dict, Sentence)]"
                ]
            }
        },
        "tokens_to_ngrams": {
            "name": "tokens_to_ngrams",
            "location": 36,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "tokens": [
                    "List[str]"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "delim": [
                    "str"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_set_of_stable_ids": {
            "name": "get_set_of_stable_ids",
            "location": 51,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "doc": [
                    "Document"
                ],
                "candidate_class": [
                    "'Type[Candidate]'"
                ]
            }
        },
        "get_dict_of_stable_id": {
            "name": "get_dict_of_stable_id",
            "location": 72,
            "return": [
                "Dict[(str, Context)]"
            ],
            "arguments": {
                "doc": [
                    "Document"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_parser.py": {
        "build_node": {
            "name": "build_node",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "type": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "column_constructor": {
            "name": "column_constructor",
            "location": 25,
            "return": [
                "List[Tuple[(str, str, str)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "name": [
                    "Optional[str]"
                ],
                "type": [
                    "str"
                ],
                "delim": [
                    "Optional[str]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_table.py": {
        "_min_range_diff": {
            "name": "_min_range_diff",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "coordinates": [
                    "Tuple[Tuple[(int, int)]]"
                ],
                "absolute": [
                    "bool"
                ]
            }
        },
        "min_row_diff": {
            "name": "min_row_diff",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "cells": [
                    "List[Union[(Cell, Sentence)]]"
                ],
                "absolute": [
                    "bool"
                ]
            }
        },
        "min_col_diff": {
            "name": "min_col_diff",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "cells": [
                    "List[Union[(Cell, Sentence)]]"
                ],
                "absolute": [
                    "bool"
                ]
            }
        },
        "min_axis_diff": {
            "name": "min_axis_diff",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "Union[(Cell, Sentence)]"
                ],
                "b": [
                    "Union[(Cell, Sentence)]"
                ],
                "axis": [
                    "Optional[str]"
                ],
                "absolute": [
                    "bool"
                ]
            }
        },
        "is_row_aligned": {
            "name": "is_row_aligned",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Union[(Cell, Sentence)]"
                ],
                "b": [
                    "Union[(Cell, Sentence)]"
                ],
                "spread": [
                    "List[int]"
                ]
            }
        },
        "is_col_aligned": {
            "name": "is_col_aligned",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Union[(Sentence, Cell)]"
                ],
                "b": [
                    "Union[(Cell, Sentence)]"
                ],
                "spread": [
                    "List[int]"
                ]
            }
        },
        "is_axis_aligned": {
            "name": "is_axis_aligned",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Union[(Cell, Sentence)]"
                ],
                "b": [
                    "Union[(Cell, Sentence)]"
                ],
                "axis": [
                    "Optional[str]"
                ],
                "spread": [
                    "List[int]"
                ]
            }
        },
        "num_rows": {
            "name": "num_rows",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "Union[(Cell, Sentence)]"
                ]
            }
        },
        "num_cols": {
            "name": "num_cols",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "Union[(Cell, Sentence)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_udf.py": {
        "_get_cand_values": {
            "name": "_get_cand_values",
            "location": 36,
            "return": [
                "List[AnnotationMixin]"
            ],
            "arguments": {
                "candidate": [
                    "Candidate"
                ],
                "key_table": [
                    "Table"
                ]
            }
        },
        "_batch_postgres_query": {
            "name": "_batch_postgres_query",
            "location": 52,
            "return": [
                "Iterator[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "table": [
                    "Table"
                ],
                "records": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "get_sparse_matrix_keys": {
            "name": "get_sparse_matrix_keys",
            "location": 101,
            "return": [
                "List"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "key_table": [
                    "Table"
                ]
            }
        },
        "batch_upsert_records": {
            "name": "batch_upsert_records",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "table": [
                    "Table"
                ],
                "records": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "get_sparse_matrix": {
            "name": "get_sparse_matrix",
            "location": 125,
            "return": [
                "List[csr_matrix]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "key_table": [
                    "Table"
                ],
                "cand_lists": [
                    "Union[(Sequence[Candidate], Iterable[Sequence[Candidate]])]"
                ],
                "key": [
                    "Optional[str]"
                ]
            }
        },
        "_convert_mappings_to_matrix": {
            "name": "_convert_mappings_to_matrix",
            "location": 164,
            "return": [
                "csr_matrix"
            ],
            "arguments": {
                "mappings": [
                    "List[Dict[(str, Any)]]"
                ],
                "keys": [
                    "List[str]"
                ]
            }
        },
        "unshift_label_matrix": {
            "name": "unshift_label_matrix",
            "location": 196,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "L_sparse": [
                    "csr_matrix"
                ]
            }
        },
        "shift_label_matrix": {
            "name": "shift_label_matrix",
            "location": 201,
            "return": [
                "csr_matrix"
            ],
            "arguments": {
                "L": [
                    "np.ndarray"
                ]
            }
        },
        "get_docs_from_split": {
            "name": "get_docs_from_split",
            "location": 206,
            "return": [
                "Set[Document]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "candidate_classes": [
                    "Iterable[Type[Candidate]]"
                ],
                "split": [
                    "int"
                ]
            }
        },
        "get_mapping": {
            "name": "get_mapping",
            "location": 223,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "table": [
                    "Table"
                ],
                "candidates": [
                    "Iterable[Candidate]"
                ],
                "generator": [
                    "Callable[([Candidate], Iterator[Tuple])]"
                ]
            }
        },
        "drop_all_keys": {
            "name": "drop_all_keys",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "key_table": [
                    "Table"
                ],
                "candidate_classes": [
                    "Iterable[Type[Candidate]]"
                ]
            }
        },
        "drop_keys": {
            "name": "drop_keys",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "key_table": [
                    "Table"
                ],
                "keys": [
                    "Dict"
                ]
            }
        },
        "upsert_keys": {
            "name": "upsert_keys",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "key_table": [
                    "Table"
                ],
                "keys": [
                    "Dict"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_visual.py": {
        "bbox_from_span": {
            "name": "bbox_from_span",
            "location": 16,
            "return": [
                "Bbox"
            ],
            "arguments": {
                "span": []
            }
        },
        "bbox_from_sentence": {
            "name": "bbox_from_sentence",
            "location": 40,
            "return": [
                "Bbox"
            ],
            "arguments": {
                "sentence": []
            }
        },
        "bbox_horz_aligned": {
            "name": "bbox_horz_aligned",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "Bbox"
                ],
                "box2": [
                    "Bbox"
                ]
            }
        },
        "bbox_vert_aligned": {
            "name": "bbox_vert_aligned",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "Bbox"
                ],
                "box2": [
                    "Bbox"
                ]
            }
        },
        "bbox_vert_aligned_left": {
            "name": "bbox_vert_aligned_left",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "Bbox"
                ],
                "box2": [
                    "Bbox"
                ]
            }
        },
        "bbox_vert_aligned_right": {
            "name": "bbox_vert_aligned_right",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "Bbox"
                ],
                "box2": [
                    "Bbox"
                ]
            }
        },
        "bbox_vert_aligned_center": {
            "name": "bbox_vert_aligned_center",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "Bbox"
                ],
                "box2": [
                    "Bbox"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/visualizer.py": {
        "get_box": {
            "name": "get_box",
            "location": 122,
            "return": [
                "Bbox"
            ],
            "arguments": {
                "span": [
                    "SpanMention"
                ]
            }
        },
        "get_pdf_dim": {
            "name": "get_pdf_dim",
            "location": 137,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "pdf_file": [
                    "str"
                ],
                "page": [
                    "int"
                ]
            }
        },
        "pdf_to_img": {
            "name": "pdf_to_img",
            "location": 156,
            "return": [
                "Image"
            ],
            "arguments": {
                "pdf_file": [
                    "str"
                ],
                "page_num": [
                    "int"
                ],
                "pdf_dim": [
                    "Optional[Tuple[(int, int)]]"
                ]
            }
        },
        "Visualizer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf_path": [
                    "str"
                ]
            }
        },
        "Visualizer.display_boxes": {
            "name": "display_boxes",
            "location": 34,
            "return": [
                "List[Image]"
            ],
            "arguments": {
                "self": [],
                "pdf_file": [
                    "str"
                ],
                "boxes": [
                    "List[Bbox]"
                ],
                "alternate_colors": [
                    "bool"
                ]
            }
        },
        "Visualizer.display_candidates": {
            "name": "display_candidates",
            "location": 73,
            "return": [
                "DisplayHandle"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "List[Candidate]"
                ],
                "pdf_file": [
                    "Optional[str]"
                ]
            }
        },
        "Visualizer.display_words": {
            "name": "display_words",
            "location": 93,
            "return": [
                "DisplayHandle"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "List[Sentence]"
                ],
                "target": [
                    "Optional[str]"
                ],
                "pdf_file": [
                    "Optional[str]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/__init__.py": {},
    "fonduer-master/src/fonduer/utils/data_model_utils/structural.py": {
        "get_tag": {
            "name": "get_tag",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_attributes": {
            "name": "get_attributes",
            "location": 30,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "_get_etree_for_text": {
            "name": "_get_etree_for_text",
            "location": 48,
            "return": [
                "_ElementTree"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_get_node": {
            "name": "_get_node",
            "location": 52,
            "return": [
                "HtmlElement"
            ],
            "arguments": {
                "sentence": [
                    "Sentence"
                ]
            }
        },
        "get_parent_tag": {
            "name": "get_parent_tag",
            "location": 58,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_prev_sibling_tags": {
            "name": "get_prev_sibling_tags",
            "location": 73,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_next_sibling_tags": {
            "name": "get_next_sibling_tags",
            "location": 94,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_ancestor_class_names": {
            "name": "get_ancestor_class_names",
            "location": 115,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_ancestor_tag_names": {
            "name": "get_ancestor_tag_names",
            "location": 134,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_ancestor_id_names": {
            "name": "get_ancestor_id_names",
            "location": 153,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "common_ancestor": {
            "name": "common_ancestor",
            "location": 172,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "c": [
                    "Tuple[(SpanMention, ...)]"
                ]
            }
        },
        "lowest_common_ancestor_depth": {
            "name": "lowest_common_ancestor_depth",
            "location": 191,
            "return": [
                "int"
            ],
            "arguments": {
                "c": [
                    "Tuple[(SpanMention, ...)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/tabular.py": {
        "same_table": {
            "name": "same_table",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "same_row": {
            "name": "same_row",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "same_col": {
            "name": "same_col",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "is_tabular_aligned": {
            "name": "is_tabular_aligned",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "same_cell": {
            "name": "same_cell",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "same_sentence": {
            "name": "same_sentence",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "get_max_col_num": {
            "name": "get_max_col_num",
            "location": 103,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_min_col_num": {
            "name": "get_min_col_num",
            "location": 118,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_max_row_num": {
            "name": "get_max_row_num",
            "location": 133,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_min_row_num": {
            "name": "get_min_row_num",
            "location": 148,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_sentence_ngrams": {
            "name": "get_sentence_ngrams",
            "location": 169,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_neighbor_sentence_ngrams": {
            "name": "get_neighbor_sentence_ngrams",
            "location": 196,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "d": [
                    "int"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_cell_ngrams": {
            "name": "get_cell_ngrams",
            "location": 219,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_neighbor_cell_ngrams": {
            "name": "get_neighbor_cell_ngrams",
            "location": 260,
            "return": [
                "Iterator[Union[(str, Tuple[(str, str)])]]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "dist": [
                    "int"
                ],
                "directions": [
                    "bool"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_row_ngrams": {
            "name": "get_row_ngrams",
            "location": 335,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "spread": [
                    "List[int]"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_col_ngrams": {
            "name": "get_col_ngrams",
            "location": 369,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "spread": [
                    "List[int]"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_aligned_ngrams": {
            "name": "get_aligned_ngrams",
            "location": 403,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "spread": [
                    "List[int]"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_head_ngrams": {
            "name": "get_head_ngrams",
            "location": 437,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "axis": [
                    "Optional[str]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "_get_head_cell": {
            "name": "_get_head_cell",
            "location": 478,
            "return": [
                "Cell"
            ],
            "arguments": {
                "root_cell": [
                    "Cell"
                ],
                "axis": [
                    "str"
                ]
            }
        },
        "_get_table_cells": {
            "name": "_get_table_cells",
            "location": 489,
            "return": [
                "DefaultDict[(Cell, List[Sentence])]"
            ],
            "arguments": {
                "table": [
                    "Table"
                ]
            }
        },
        "_get_axis_ngrams": {
            "name": "_get_axis_ngrams",
            "location": 509,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "axis": [
                    "str"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "spread": [
                    "List[int]"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "_get_aligned_cells": {
            "name": "_get_aligned_cells",
            "location": 537,
            "return": [
                "List[Cell]"
            ],
            "arguments": {
                "root_cell": [
                    "Cell"
                ],
                "axis": [
                    "str"
                ]
            }
        },
        "_get_aligned_sentences": {
            "name": "_get_aligned_sentences",
            "location": 546,
            "return": [
                "List[Sentence]"
            ],
            "arguments": {
                "root_sentence": [
                    "Sentence"
                ],
                "axis": [
                    "str"
                ],
                "spread": [
                    "List[int]"
                ]
            }
        },
        "_other_axis": {
            "name": "_other_axis",
            "location": 560,
            "return": [
                "str"
            ],
            "arguments": {
                "axis": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/textual.py": {
        "same_sentence": {
            "name": "same_sentence",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "get_between_ngrams": {
            "name": "get_between_ngrams",
            "location": 23,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_left_ngrams": {
            "name": "get_left_ngrams",
            "location": 73,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "window": [
                    "int"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_right_ngrams": {
            "name": "get_right_ngrams",
            "location": 105,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "window": [
                    "int"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_sentence_ngrams": {
            "name": "get_sentence_ngrams",
            "location": 137,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        },
        "get_neighbor_sentence_ngrams": {
            "name": "get_neighbor_sentence_ngrams",
            "location": 167,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "d": [
                    "int"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/utils.py": {
        "_to_span": {
            "name": "_to_span",
            "location": 11,
            "return": [
                "TemporarySpanMention"
            ],
            "arguments": {
                "x": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "idx": [
                    "int"
                ]
            }
        },
        "_to_spans": {
            "name": "_to_spans",
            "location": 26,
            "return": [
                "List[TemporarySpanMention]"
            ],
            "arguments": {
                "x": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "is_superset": {
            "name": "is_superset",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Iterable"
                ],
                "b": [
                    "Iterable"
                ]
            }
        },
        "overlap": {
            "name": "overlap",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Iterable"
                ],
                "b": [
                    "Iterable"
                ]
            }
        },
        "get_matches": {
            "name": "get_matches",
            "location": 64,
            "return": [
                "List[Candidate]"
            ],
            "arguments": {
                "lf": [
                    "Callable"
                ],
                "candidate_set": [
                    "Set[Candidate]"
                ],
                "match_values": [
                    "List[int]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/visual.py": {
        "get_page": {
            "name": "get_page",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "is_horz_aligned": {
            "name": "is_horz_aligned",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "is_vert_aligned": {
            "name": "is_vert_aligned",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "is_vert_aligned_left": {
            "name": "is_vert_aligned_left",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "is_vert_aligned_right": {
            "name": "is_vert_aligned_right",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "is_vert_aligned_center": {
            "name": "is_vert_aligned_center",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "same_page": {
            "name": "same_page",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "get_horz_ngrams": {
            "name": "get_horz_ngrams",
            "location": 155,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ],
                "from_sentence": [
                    "bool"
                ]
            }
        },
        "get_vert_ngrams": {
            "name": "get_vert_ngrams",
            "location": 187,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ],
                "from_sentence": [
                    "bool"
                ]
            }
        },
        "_get_direction_ngrams": {
            "name": "_get_direction_ngrams",
            "location": 219,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "direction": [
                    "str"
                ],
                "c": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "attrib": [
                    "str"
                ],
                "n_min": [
                    "int"
                ],
                "n_max": [
                    "int"
                ],
                "lower": [
                    "bool"
                ],
                "from_sentence": [
                    "bool"
                ]
            }
        },
        "get_vert_ngrams_left": {
            "name": "get_vert_ngrams_left",
            "location": 260,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "get_vert_ngrams_right": {
            "name": "get_vert_ngrams_right",
            "location": 266,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "get_vert_ngrams_center": {
            "name": "get_vert_ngrams_center",
            "location": 272,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "get_visual_header_ngrams": {
            "name": "get_visual_header_ngrams",
            "location": 278,
            "return": [],
            "arguments": {
                "c": [],
                "axis": []
            }
        },
        "get_visual_distance": {
            "name": "get_visual_distance",
            "location": 284,
            "return": [],
            "arguments": {
                "c": [],
                "axis": []
            }
        },
        "get_page_vert_percentile": {
            "name": "get_page_vert_percentile",
            "location": 295,
            "return": [
                "float"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "page_width": [
                    "int"
                ],
                "page_height": [
                    "int"
                ]
            }
        },
        "get_page_horz_percentile": {
            "name": "get_page_horz_percentile",
            "location": 340,
            "return": [
                "float"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ],
                "page_width": [
                    "int"
                ],
                "page_height": [
                    "int"
                ]
            }
        },
        "_assign_alignment_features": {
            "name": "_assign_alignment_features",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "sentences_by_key": [
                    "defaultdict"
                ],
                "align_type": [
                    "str"
                ]
            }
        },
        "_preprocess_visual_features": {
            "name": "_preprocess_visual_features",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [
                    "Document"
                ]
            }
        },
        "get_visual_aligned_lemmas": {
            "name": "get_visual_aligned_lemmas",
            "location": 441,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        },
        "get_aligned_lemmas": {
            "name": "get_aligned_lemmas",
            "location": 461,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "mention": [
                    "Union[(Candidate, Mention, TemporarySpanMention)]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/__init__.py": {},
    "fonduer-master/src/fonduer/utils/logging/tensorboard_writer.py": {
        "TensorBoardLogger.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "log_dir": [
                    "str"
                ]
            }
        },
        "TensorBoardLogger.add_scalar": {
            "name": "add_scalar",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "float"
                ],
                "step": [
                    "int"
                ]
            }
        },
        "TensorBoardLogger.close": {
            "name": "close",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/utils/logging/__init__.py": {},
    "fonduer-master/src/fonduer/utils/models/annotation.py": {
        "AnnotationKeyMixin.__tablename__": {
            "name": "__tablename__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationKeyMixin.name": {
            "name": "name",
            "location": 27,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationKeyMixin.candidate_classes": {
            "name": "candidate_classes",
            "location": 32,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationKeyMixin.__table_args__": {
            "name": "__table_args__",
            "location": 37,
            "return": [
                "Tuple[UniqueConstraint]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationKeyMixin.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationMixin.__tablename__": {
            "name": "__tablename__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationMixin.keys": {
            "name": "keys",
            "location": 75,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationMixin.candidate_id": {
            "name": "candidate_id",
            "location": 81,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationMixin.candidate": {
            "name": "candidate",
            "location": 91,
            "return": [
                "relationship"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AnnotationMixin.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/utils/models/__init__.py": {},
    "fonduer-master/tests/conftest.py": {
        "database_session": {
            "name": "database_session",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/test_meta.py": {
        "test_meta_connection_strings": {
            "name": "test_meta_connection_strings",
            "location": 17,
            "return": [],
            "arguments": {
                "database_session": []
            }
        },
        "test_subclass_before_meta_init": {
            "name": "test_subclass_before_meta_init",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/test_postgres.py": {
        "test_preprocessor_parse_file_called_once": {
            "name": "test_preprocessor_parse_file_called_once",
            "location": 27,
            "return": [],
            "arguments": {
                "database_session": [],
                "mocker": []
            }
        },
        "test_cand_gen_cascading_delete": {
            "name": "test_cand_gen_cascading_delete",
            "location": 49,
            "return": [],
            "arguments": {
                "database_session": []
            }
        },
        "test_too_many_clients_error_should_not_happen": {
            "name": "test_too_many_clients_error_should_not_happen",
            "location": 134,
            "return": [],
            "arguments": {
                "database_session": []
            }
        },
        "test_parse_error_doc_skipping": {
            "name": "test_parse_error_doc_skipping",
            "location": 201,
            "return": [],
            "arguments": {
                "database_session": []
            }
        },
        "test_too_many_clients_error_should_not_happen.do_nothing_matcher": {
            "name": "do_nothing_matcher",
            "location": 139,
            "return": [],
            "arguments": {
                "fig": []
            }
        }
    },
    "fonduer-master/tests/__init__.py": {},
    "fonduer-master/tests/candidates/test_candidates.py": {
        "parse_doc": {
            "name": "parse_doc",
            "location": 46,
            "return": [],
            "arguments": {
                "docs_path": [
                    "str"
                ],
                "file_name": [
                    "str"
                ],
                "pdf_path": [
                    "Optional[str]"
                ]
            }
        },
        "test_ngram_split": {
            "name": "test_ngram_split",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_span_char_start_and_char_end": {
            "name": "test_span_char_start_and_char_end",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "test_cand_gen": {
            "name": "test_cand_gen",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_ngrams": {
            "name": "test_ngrams",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "test_row_col_ngram_extraction": {
            "name": "test_row_col_ngram_extraction",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_mention_longest_match": {
            "name": "test_mention_longest_match",
            "location": 395,
            "return": [],
            "arguments": {}
        },
        "test_multimodal_cand": {
            "name": "test_multimodal_cand",
            "location": 452,
            "return": [],
            "arguments": {}
        },
        "test_pickle_subclasses": {
            "name": "test_pickle_subclasses",
            "location": 527,
            "return": [],
            "arguments": {}
        },
        "test_candidate_with_nullable_mentions": {
            "name": "test_candidate_with_nullable_mentions",
            "location": 547,
            "return": [],
            "arguments": {}
        },
        "test_cand_gen.do_nothing_matcher": {
            "name": "do_nothing_matcher",
            "location": 211,
            "return": [],
            "arguments": {
                "fig": []
            }
        },
        "test_row_col_ngram_extraction.get_row_and_column_ngrams": {
            "name": "get_row_and_column_ngrams",
            "location": 373,
            "return": [],
            "arguments": {
                "mention": []
            }
        },
        "test_mention_longest_match.is_birthplace_table_row": {
            "name": "is_birthplace_table_row",
            "location": 408,
            "return": [],
            "arguments": {
                "mention": []
            }
        }
    },
    "fonduer-master/tests/candidates/test_matchers.py": {
        "doc_setup": {
            "name": "doc_setup",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_union": {
            "name": "test_union",
            "location": 42,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_intersect": {
            "name": "test_intersect",
            "location": 93,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_inverse": {
            "name": "test_inverse",
            "location": 140,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_cancat": {
            "name": "test_cancat",
            "location": 201,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_dictionary_match": {
            "name": "test_dictionary_match",
            "location": 247,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_do_not_use_stemmer_when_UnicodeDecodeError": {
            "name": "test_do_not_use_stemmer_when_UnicodeDecodeError",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "test_lambda_function_matcher": {
            "name": "test_lambda_function_matcher",
            "location": 285,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_regex_match": {
            "name": "test_regex_match",
            "location": 307,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_ner_matchers": {
            "name": "test_ner_matchers",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "test_figure_matcher": {
            "name": "test_figure_matcher",
            "location": 400,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        }
    },
    "fonduer-master/tests/candidates/__init__.py": {},
    "fonduer-master/tests/e2e/test_e2e.py": {
        "test_e2e": {
            "name": "test_e2e",
            "location": 67,
            "return": [],
            "arguments": {
                "database_session": []
            }
        }
    },
    "fonduer-master/tests/e2e/test_incremental.py": {
        "test_incremental": {
            "name": "test_incremental",
            "location": 39,
            "return": [],
            "arguments": {
                "database_session": []
            }
        },
        "test_incremental.LF_storage_row_updated": {
            "name": "LF_storage_row_updated",
            "location": 191,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "fonduer-master/tests/e2e/__init__.py": {},
    "fonduer-master/tests/features/test_features.py": {
        "test_unary_relation_feature_extraction": {
            "name": "test_unary_relation_feature_extraction",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_binary_relation_feature_extraction": {
            "name": "test_binary_relation_feature_extraction",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_multinary_relation_feature_extraction": {
            "name": "test_multinary_relation_feature_extraction",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_binary_relation_feature_extraction.feat_ext": {
            "name": "feat_ext",
            "location": 160,
            "return": [],
            "arguments": {
                "candidates": []
            }
        },
        "test_binary_relation_feature_extraction.bad_feat_ext": {
            "name": "bad_feat_ext",
            "location": 176,
            "return": [],
            "arguments": {
                "candidates": []
            }
        },
        "test_multinary_relation_feature_extraction.feat_ext": {
            "name": "feat_ext",
            "location": 301,
            "return": [],
            "arguments": {
                "candidates": []
            }
        },
        "test_multinary_relation_feature_extraction.bad_feat_ext": {
            "name": "bad_feat_ext",
            "location": 319,
            "return": [],
            "arguments": {
                "candidates": []
            }
        }
    },
    "fonduer-master/tests/features/__init__.py": {},
    "fonduer-master/tests/learning/test_utils.py": {
        "test_confusion_matrix": {
            "name": "test_confusion_matrix",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/learning/__init__.py": {},
    "fonduer-master/tests/packaging/test_fonduer_model.py": {
        "setup_common_components": {
            "name": "setup_common_components",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_convert_features_to_matrix": {
            "name": "test_convert_features_to_matrix",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_convert_features_to_matrix_limited_keys": {
            "name": "test_convert_features_to_matrix_limited_keys",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_convert_labels_to_matrix": {
            "name": "test_convert_labels_to_matrix",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_save_subclasses": {
            "name": "test_save_subclasses",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_load_subclasses": {
            "name": "test_load_subclasses",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_save_model": {
            "name": "test_save_model",
            "location": 130,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "Path"
                ],
                "setup_common_components": [
                    "Dict"
                ]
            }
        },
        "test_load_model": {
            "name": "test_load_model",
            "location": 164,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "Path"
                ]
            }
        },
        "test_save_label_model": {
            "name": "test_save_label_model",
            "location": 173,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "Path"
                ],
                "setup_common_components": [
                    "Dict"
                ]
            }
        },
        "test_load_label_model": {
            "name": "test_load_label_model",
            "location": 197,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "Path"
                ]
            }
        },
        "test_save_with_conda_yaml": {
            "name": "test_save_with_conda_yaml",
            "location": 205,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "Path"
                ],
                "setup_common_components": [
                    "Dict"
                ]
            }
        },
        "test_predict": {
            "name": "test_predict",
            "location": 236,
            "return": [],
            "arguments": {
                "mocker": [],
                "setup_common_components": [
                    "Dict"
                ]
            }
        }
    },
    "fonduer-master/tests/packaging/__init__.py": {},
    "fonduer-master/tests/parser/test_parser.py": {
        "get_parser_udf": {
            "name": "get_parser_udf",
            "location": 23,
            "return": [],
            "arguments": {
                "structural": [],
                "blacklist": [],
                "flatten": [],
                "language": [],
                "lingual": [],
                "lingual_parser": [],
                "strip": [],
                "replacements": [],
                "tabular": [],
                "visual": [],
                "visual_parser": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 53,
            "return": [
                "List[Document]"
            ],
            "arguments": {
                "session": [
                    "Session"
                ],
                "docs_path": [
                    "str"
                ],
                "pdf_path": [
                    "str"
                ]
            }
        },
        "test_parse_md_details": {
            "name": "test_parse_md_details",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_parse_wo_tabular": {
            "name": "test_parse_wo_tabular",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_spacy_german": {
            "name": "test_spacy_german",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "test_spacy_japanese": {
            "name": "test_spacy_japanese",
            "location": 279,
            "return": [],
            "arguments": {}
        },
        "test_spacy_chinese": {
            "name": "test_spacy_chinese",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "test_warning_on_missing_pdf": {
            "name": "test_warning_on_missing_pdf",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "test_warning_on_incorrect_filename": {
            "name": "test_warning_on_incorrect_filename",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_parse_md_paragraphs": {
            "name": "test_parse_md_paragraphs",
            "location": 394,
            "return": [],
            "arguments": {}
        },
        "test_simple_parser": {
            "name": "test_simple_parser",
            "location": 482,
            "return": [],
            "arguments": {}
        },
        "test_custom_parser": {
            "name": "test_custom_parser",
            "location": 526,
            "return": [],
            "arguments": {}
        },
        "test_parse_table_span": {
            "name": "test_parse_table_span",
            "location": 537,
            "return": [],
            "arguments": {}
        },
        "test_parse_document_diseases": {
            "name": "test_parse_document_diseases",
            "location": 561,
            "return": [],
            "arguments": {}
        },
        "test_parse_style": {
            "name": "test_parse_style",
            "location": 637,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_doc_skipping": {
            "name": "test_parse_error_doc_skipping",
            "location": 683,
            "return": [],
            "arguments": {}
        },
        "test_parse_multi_sections": {
            "name": "test_parse_multi_sections",
            "location": 703,
            "return": [],
            "arguments": {}
        },
        "test_text_doc_preprocessor": {
            "name": "test_text_doc_preprocessor",
            "location": 730,
            "return": [],
            "arguments": {}
        },
        "test_tsv_doc_preprocessor": {
            "name": "test_tsv_doc_preprocessor",
            "location": 747,
            "return": [],
            "arguments": {}
        },
        "test_csv_doc_preprocessor": {
            "name": "test_csv_doc_preprocessor",
            "location": 769,
            "return": [],
            "arguments": {}
        },
        "test_parser_skips_and_flattens": {
            "name": "test_parser_skips_and_flattens",
            "location": 790,
            "return": [],
            "arguments": {}
        },
        "test_parser_no_image": {
            "name": "test_parser_no_image",
            "location": 842,
            "return": [],
            "arguments": {}
        },
        "test_various_dir_path_formats": {
            "name": "test_various_dir_path_formats",
            "location": 876,
            "return": [],
            "arguments": {
                "database_session": [],
                "docs_path": [],
                "pdf_path": []
            }
        },
        "test_various_pdf_path_formats": {
            "name": "test_various_pdf_path_formats",
            "location": 897,
            "return": [],
            "arguments": {
                "database_session": [],
                "pdf_path": []
            }
        },
        "test_parse_hocr": {
            "name": "test_parse_hocr",
            "location": 906,
            "return": [],
            "arguments": {}
        },
        "test_parse_hocr_with_tables": {
            "name": "test_parse_hocr_with_tables",
            "location": 965,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_preprocessor.py": {
        "test_hocrpreprocessor": {
            "name": "test_hocrpreprocessor",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_hocrpreprocessor_space_false": {
            "name": "test_hocrpreprocessor_space_false",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_simple_parser.py": {
        "test_simple_parser_support": {
            "name": "test_simple_parser_support",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_simple_split_sentences": {
            "name": "test_simple_split_sentences",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_spacy_parser.py": {
        "test_spacy_support": {
            "name": "test_spacy_support",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_spacy_split_sentences": {
            "name": "test_spacy_split_sentences",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_split_sentences_by_char_limit": {
            "name": "test_split_sentences_by_char_limit",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_visual_linker.py": {
        "test_visual_parser_not_affected_by_order_of_sentences": {
            "name": "test_visual_parser_not_affected_by_order_of_sentences",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_non_existent_pdf_path_should_fail": {
            "name": "test_non_existent_pdf_path_should_fail",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_pdf_word_list_is_sorted": {
            "name": "test_pdf_word_list_is_sorted",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/__init__.py": {},
    "fonduer-master/tests/shared/hardware_fonduer_model.py": {
        "HardwareFonduerModel._classify": {
            "name": "_classify",
            "location": 20,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Document"
                ]
            }
        }
    },
    "fonduer-master/tests/shared/hardware_lfs.py": {
        "LF_storage_row": {
            "name": "LF_storage_row",
            "location": 14,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_temperature_row": {
            "name": "LF_temperature_row",
            "location": 19,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_operating_row": {
            "name": "LF_operating_row",
            "location": 24,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_tstg_row": {
            "name": "LF_tstg_row",
            "location": 29,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_to_left": {
            "name": "LF_to_left",
            "location": 38,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_negative_number_left": {
            "name": "LF_negative_number_left",
            "location": 43,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_test_condition_aligned": {
            "name": "LF_test_condition_aligned",
            "location": 54,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_collector_aligned": {
            "name": "LF_collector_aligned",
            "location": 63,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_current_aligned": {
            "name": "LF_current_aligned",
            "location": 75,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_voltage_row_temp": {
            "name": "LF_voltage_row_temp",
            "location": 84,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_voltage_row_part": {
            "name": "LF_voltage_row_part",
            "location": 95,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_typ_row": {
            "name": "LF_typ_row",
            "location": 106,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_complement_left_row": {
            "name": "LF_complement_left_row",
            "location": 111,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_too_many_numbers_row": {
            "name": "LF_too_many_numbers_row",
            "location": 127,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_temp_on_high_page_num": {
            "name": "LF_temp_on_high_page_num",
            "location": 133,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_temp_outside_table": {
            "name": "LF_temp_outside_table",
            "location": 138,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_not_temp_relevant": {
            "name": "LF_not_temp_relevant",
            "location": 143,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_bad_keywords_in_row": {
            "name": "LF_bad_keywords_in_row",
            "location": 158,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_current_in_row": {
            "name": "LF_current_in_row",
            "location": 169,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_non_ce_voltages_in_row": {
            "name": "LF_non_ce_voltages_in_row",
            "location": 195,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "fonduer-master/tests/shared/hardware_matchers.py": {
        "get_digikey_parts_set": {
            "name": "get_digikey_parts_set",
            "location": 32,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "common_prefix_length_diff": {
            "name": "common_prefix_length_diff",
            "location": 48,
            "return": [],
            "arguments": {
                "str1": [],
                "str2": []
            }
        },
        "part_file_name_conditions": {
            "name": "part_file_name_conditions",
            "location": 56,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "ce_v_max_conditions": {
            "name": "ce_v_max_conditions",
            "location": 86,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "ce_v_max_more_conditions1": {
            "name": "ce_v_max_more_conditions1",
            "location": 96,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "ce_v_max_more_conditions": {
            "name": "ce_v_max_more_conditions",
            "location": 108,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "attr_in_table": {
            "name": "attr_in_table",
            "location": 133,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "fonduer-master/tests/shared/hardware_spaces.py": {
        "expand_part_range": {
            "name": "expand_part_range",
            "location": 13,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "atoi": {
            "name": "atoi",
            "location": 149,
            "return": [],
            "arguments": {
                "num_str": []
            }
        },
        "char_range": {
            "name": "char_range",
            "location": 158,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "MentionNgramsPart.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "parts_by_doc": [],
                "n_max": [],
                "expand": [],
                "split_tokens": []
            }
        },
        "MentionNgramsPart.apply": {
            "name": "apply",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        },
        "MentionNgramsTemp.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "n_max": [],
                "split_tokens": []
            }
        },
        "MentionNgramsTemp.apply": {
            "name": "apply",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        },
        "MentionNgramsVolt.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "n_max": [],
                "split_tokens": []
            }
        },
        "MentionNgramsVolt.apply": {
            "name": "apply",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        }
    },
    "fonduer-master/tests/shared/hardware_subclasses.py": {},
    "fonduer-master/tests/shared/hardware_throttlers.py": {
        "temp_throttler": {
            "name": "temp_throttler",
            "location": 14,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "filter_non_parts": {
            "name": "filter_non_parts",
            "location": 22,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "LF_part_miss_match": {
            "name": "LF_part_miss_match",
            "location": 32,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "volt_throttler": {
            "name": "volt_throttler",
            "location": 46,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "fonduer-master/tests/shared/hardware_utils.py": {
        "get_gold_dict": {
            "name": "get_gold_dict",
            "location": 28,
            "return": [],
            "arguments": {
                "filename": [],
                "doc_on": [],
                "part_on": [],
                "val_on": [],
                "attribute": [],
                "docs": []
            }
        },
        "gold": {
            "name": "gold",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "c": [
                    "Candidate"
                ]
            }
        },
        "entity_level_f1": {
            "name": "entity_level_f1",
            "location": 71,
            "return": [],
            "arguments": {
                "candidates": [],
                "gold_file": [],
                "attribute": [],
                "corpus": [],
                "parts_by_doc": []
            }
        },
        "get_implied_parts": {
            "name": "get_implied_parts",
            "location": 134,
            "return": [],
            "arguments": {
                "part": [],
                "doc": [],
                "parts_by_doc": []
            }
        },
        "entity_to_candidates": {
            "name": "entity_to_candidates",
            "location": 143,
            "return": [],
            "arguments": {
                "entity": [],
                "candidate_subset": []
            }
        }
    },
    "fonduer-master/tests/shared/__init__.py": {},
    "fonduer-master/tests/utils/test_config.py": {
        "test_load_config": {
            "name": "test_load_config",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/utils/test_utils_table.py": {
        "test_min_range_diff": {
            "name": "test_min_range_diff",
            "location": 7,
            "return": [],
            "arguments": {
                "caplog": []
            }
        }
    },
    "fonduer-master/tests/utils/test_utils_udf.py": {
        "test_shift_label_matrix": {
            "name": "test_shift_label_matrix",
            "location": 9,
            "return": [],
            "arguments": {
                "caplog": []
            }
        }
    },
    "fonduer-master/tests/utils/test_visualizer.py": {
        "test_visualizer": {
            "name": "test_visualizer",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_get_pdf_dim": {
            "name": "test_get_pdf_dim",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "fonduer-master/tests/utils/__init__.py": {},
    "fonduer-master/tests/utils/data_model_utils/test_structural.py": {
        "get_parser_udf": {
            "name": "get_parser_udf",
            "location": 10,
            "return": [],
            "arguments": {
                "structural": [],
                "blacklist": [],
                "flatten": [],
                "language": [],
                "lingual": [],
                "lingual_parser": [],
                "strip": [],
                "replacements": [],
                "tabular": [],
                "visual": [],
                "visual_parser": [],
                "pdf_path": []
            }
        },
        "doc_setup": {
            "name": "doc_setup",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_ancestors": {
            "name": "test_ancestors",
            "location": 88,
            "return": [],
            "arguments": {
                "doc_setup": [],
                "mention_ids": [],
                "output_common_ancestor": [],
                "output_lcad": []
            }
        }
    },
    "fonduer-master/tests/utils/data_model_utils/test_tabular.py": {
        "mention_setup": {
            "name": "mention_setup",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_same_row": {
            "name": "test_same_row",
            "location": 56,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_same_col": {
            "name": "test_same_col",
            "location": 70,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_is_tabular_aligned": {
            "name": "test_is_tabular_aligned",
            "location": 84,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_same_cell": {
            "name": "test_same_cell",
            "location": 98,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_same_sentence": {
            "name": "test_same_sentence",
            "location": 112,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_min_max_col_num": {
            "name": "test_get_min_max_col_num",
            "location": 126,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_min_max_row_num": {
            "name": "test_get_min_max_row_num",
            "location": 142,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_sentence_ngrams": {
            "name": "test_get_sentence_ngrams",
            "location": 157,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_neighbor_sentence_ngrams": {
            "name": "test_get_neighbor_sentence_ngrams",
            "location": 173,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_cell_ngrams": {
            "name": "test_get_cell_ngrams",
            "location": 184,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_neighbor_cell_ngrams": {
            "name": "test_get_neighbor_cell_ngrams",
            "location": 198,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_row_ngrams": {
            "name": "test_get_row_ngrams",
            "location": 223,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_col_ngrams": {
            "name": "test_get_col_ngrams",
            "location": 238,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_aligned_ngrams": {
            "name": "test_get_aligned_ngrams",
            "location": 252,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        },
        "test_get_head_ngrams": {
            "name": "test_get_head_ngrams",
            "location": 270,
            "return": [],
            "arguments": {
                "mention_setup": []
            }
        }
    },
    "fonduer-master/tests/utils/data_model_utils/test_visual.py": {
        "doc_setup": {
            "name": "doc_setup",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_get_vert_ngrams": {
            "name": "test_get_vert_ngrams",
            "location": 60,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_get_horz_ngrams": {
            "name": "test_get_horz_ngrams",
            "location": 84,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_get_ngrams_that_match_in_string": {
            "name": "test_get_ngrams_that_match_in_string",
            "location": 148,
            "return": [],
            "arguments": {
                "doc_setup": []
            }
        }
    }
}
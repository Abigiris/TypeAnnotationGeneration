{
    "ftoolz-master/setup.py": {
        "BinaryDistribution.has_ext_modules": {
            "name": "has_ext_modules",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/ftoolz/dicttoolz.py": {
        "map_val": {
            "name": "map_val",
            "location": 10,
            "return": [
                "Map[(K, Any)]"
            ],
            "arguments": {
                "d": [
                    "Map[(K, Any)]"
                ],
                "key": [
                    "K@@"
                ],
                "f": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "swap": {
            "name": "swap",
            "location": 26,
            "return": [
                "Map[(K, Any)]"
            ],
            "arguments": {
                "d": [
                    "Map[(K, Any)]"
                ],
                "key1": [
                    "K@@"
                ],
                "key2": [
                    "K@@"
                ]
            }
        },
        "swap_values": {
            "name": "swap_values",
            "location": 43,
            "return": [
                "Map[(K, V)]"
            ],
            "arguments": {
                "d": [
                    "Map[(K, V)]"
                ],
                "key1": [
                    "K@@"
                ],
                "key2": [
                    "K@@"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/itertoolz.py": {
        "associate": {
            "name": "associate",
            "location": 22,
            "return": [
                "Map[(A, B)]"
            ],
            "arguments": {
                "key": [
                    "Callable[([B], A)]"
                ],
                "values": [
                    "Iterable[B]"
                ]
            }
        },
        "associate_to": {
            "name": "associate_to",
            "location": 52,
            "return": [
                "Map[(A, C)]"
            ],
            "arguments": {
                "key": [
                    "Callable[([B], A)]"
                ],
                "value": [
                    "Callable[([B], C)]"
                ],
                "values": [
                    "Iterable[B]"
                ]
            }
        },
        "collect": {
            "name": "collect",
            "location": 87,
            "return": [
                "Seq[E]"
            ],
            "arguments": {
                "items": [
                    "Iterable[E]"
                ]
            }
        },
        "empty": {
            "name": "empty",
            "location": 111,
            "return": [
                "Tuple[(bool, Iterable[E])]"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "enumerate_with_final": {
            "name": "enumerate_with_final",
            "location": 134,
            "return": [
                "Iterable[Tuple[(E, bool, int)]]"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "filter_not_none": {
            "name": "filter_not_none",
            "location": 153,
            "return": [
                "Iterable[E]"
            ],
            "arguments": {
                "it": [
                    "Iterable[Optional[E]]"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 172,
            "return": [
                "Optional[E]"
            ],
            "arguments": {
                "pred": [
                    "Callable[([E], bool)]"
                ],
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 195,
            "return": [
                "Optional[E]"
            ],
            "arguments": {
                "seq": [
                    "Seq[E]"
                ]
            }
        },
        "fold_right": {
            "name": "fold_right",
            "location": 206,
            "return": [
                "B@@"
            ],
            "arguments": {
                "op": [
                    "Callable[([A, B], B)]"
                ],
                "xs": [
                    "Iterable[A]"
                ],
                "z": [
                    "B@@"
                ]
            }
        },
        "head_tail": {
            "name": "head_tail",
            "location": 234,
            "return": [
                "Tuple[(E, Iterable[E])]"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "head_tail_list": {
            "name": "head_tail_list",
            "location": 258,
            "return": [
                "Tuple[(E, List[E])]"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "iter_with_final": {
            "name": "iter_with_final",
            "location": 277,
            "return": [
                "Iterable[Tuple[(E, bool)]]"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 304,
            "return": [
                "Optional[E]"
            ],
            "arguments": {
                "seq": [
                    "Seq[E]"
                ]
            }
        },
        "make_str": {
            "name": "make_str",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ],
                "key": [
                    "Callable[([E], str)]"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "order_by": {
            "name": "order_by",
            "location": 345,
            "return": [
                "Iterable[Optional[E]]"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ],
                "by": [
                    "Seq[K]"
                ],
                "key": [
                    "Callable[([E], Optional[K])]"
                ]
            }
        },
        "positions": {
            "name": "positions",
            "location": 388,
            "return": [
                "Map[(_H, Tuple[(int, ...)])]"
            ],
            "arguments": {
                "it": [
                    "Seq[_H]"
                ]
            }
        },
        "split_by": {
            "name": "split_by",
            "location": 423,
            "return": [
                "Tuple[(Iterable[E], Iterable[E])]"
            ],
            "arguments": {
                "pred": [
                    "Callable[([E], bool)]"
                ],
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 457,
            "return": [
                "Seq[E]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "take_first": {
            "name": "take_first",
            "location": 482,
            "return": [
                "E@@"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "try_take_first": {
            "name": "try_take_first",
            "location": 499,
            "return": [
                "Optional[E]"
            ],
            "arguments": {
                "it": [
                    "Iterable[E]"
                ]
            }
        },
        "try_take_last": {
            "name": "try_take_last",
            "location": 517,
            "return": [
                "Optional[E]"
            ],
            "arguments": {
                "seq": [
                    "Iterable[E]"
                ]
            }
        },
        "positions.item": {
            "name": "item",
            "location": 407,
            "return": [
                "_H@@Hashable@@"
            ],
            "arguments": {
                "idx_item": [
                    "Tuple[(int, _H)]"
                ]
            }
        },
        "positions.collect_idx": {
            "name": "collect_idx",
            "location": 411,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "acc": [
                    "Tuple[(int, ...)]"
                ],
                "idx_item": [
                    "Tuple[(int, _H)]"
                ]
            }
        },
        "positions._empty": {
            "name": "_empty",
            "location": 417,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {}
        }
    },
    "ftoolz-master/ftoolz/predicates.py": {
        "some": {
            "name": "some",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Optional[A]"
                ]
            }
        },
        "none": {
            "name": "none",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Optional[A]"
                ]
            }
        },
        "even": {
            "name": "even",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "odd": {
            "name": "odd",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "vall": {
            "name": "vall",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "vany": {
            "name": "vany",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "ftoolz-master/ftoolz/typing.py": {
        "assert_some": {
            "name": "assert_some",
            "location": 14,
            "return": [
                "A@@"
            ],
            "arguments": {
                "a": [
                    "Optional[A]"
                ]
            }
        },
        "seq": {
            "name": "seq",
            "location": 30,
            "return": [
                "Seq[A]"
            ],
            "arguments": {
                "it": [
                    "Iterable[A]"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/__init__.py": {},
    "ftoolz-master/ftoolz/adt/mutiter.py": {
        "MutIter.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[Iterable[_E]]"
                ]
            }
        },
        "MutIter.add": {
            "name": "add",
            "location": 52,
            "return": [
                "'MutIter'"
            ],
            "arguments": {
                "it": [
                    "'MutIter'"
                ],
                "e": [
                    "_E@@"
                ]
            }
        },
        "MutIter.state": {
            "name": "state",
            "location": 64,
            "return": [
                "Seq[_E]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__iadd__": {
            "name": "__iadd__",
            "location": 75,
            "return": [
                "'MutIter'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "_E@@"
                ]
            }
        },
        "MutIter.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [
                "'MutIter'"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__next__": {
            "name": "__next__",
            "location": 94,
            "return": [
                "_E@@"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__len__": {
            "name": "__len__",
            "location": 111,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__bool__": {
            "name": "__bool__",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__str__": {
            "name": "__str__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/ftoolz/adt/__init__.py": {},
    "ftoolz-master/ftoolz/functoolz/iter.py": {
        "apply": {
            "name": "apply",
            "location": 9,
            "return": [
                "Iterable[B_out]"
            ],
            "arguments": {
                "ff": [
                    "Iterable[Callable[([A_in], B_out)]]"
                ],
                "fa": [
                    "Iterable[A_in]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 59,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "ffa": [
                    "Iterable[Iterable[A]]"
                ]
            }
        },
        "fmap2": {
            "name": "fmap2",
            "location": 84,
            "return": [
                "Iterable[C_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in, B_in], C_out)]"
                ],
                "fa": [
                    "Iterable[A_in]"
                ],
                "fb": [
                    "Iterable[B_in]"
                ]
            }
        },
        "fproduct": {
            "name": "fproduct",
            "location": 131,
            "return": [
                "Iterable[Tuple[(A, B_out)]]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A], B_out)]"
                ],
                "fa": [
                    "Iterable[A]"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 159,
            "return": [
                "Iterable[A_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([int], A_out)]"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 202,
            "return": [
                "Callable[([Iterable[A_in]], Iterable[B_out])]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], B_out)]"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 222,
            "return": [
                "Iterable[Tuple[(A, B)]]"
            ],
            "arguments": {
                "fa": [
                    "Iterable[A]"
                ],
                "fb": [
                    "Iterable[B]"
                ]
            }
        },
        "unit": {
            "name": "unit",
            "location": 264,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "a": [
                    "A"
                ]
            }
        },
        "zip_map": {
            "name": "zip_map",
            "location": 274,
            "return": [
                "Iterable[A_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[(..., A_out)]"
                ]
            }
        },
        "fmap2.ff": {
            "name": "ff",
            "location": 125,
            "return": [
                "Iterable[C_out]"
            ],
            "arguments": {
                "a": [
                    "A_in"
                ]
            }
        },
        "product.ff": {
            "name": "ff",
            "location": 258,
            "return": [
                "Iterable[Tuple[(A, B)]]"
            ],
            "arguments": {
                "a": [
                    "A"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/opt.py": {
        "apply": {
            "name": "apply",
            "location": 7,
            "return": [
                "Optional[B_out]"
            ],
            "arguments": {
                "ff": [
                    "Optional[Callable[([A_in], B_out)]]"
                ],
                "fa": [
                    "Optional[A_in]"
                ]
            }
        },
        "apply2": {
            "name": "apply2",
            "location": 27,
            "return": [
                "Optional[C_out]"
            ],
            "arguments": {
                "ff": [
                    "Optional[Callable[([A_in, B_in], C_out)]]"
                ],
                "fa": [
                    "Optional[A_in]"
                ],
                "fb": [
                    "Optional[B_in]"
                ]
            }
        },
        "applyN": {
            "name": "applyN",
            "location": 50,
            "return": [
                "Optional[A_out]"
            ],
            "arguments": {
                "ff": [
                    "Optional[Callable[(..., A_out)]]"
                ]
            }
        },
        "flatmap": {
            "name": "flatmap",
            "location": 85,
            "return": [
                "Optional[B_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], Optional[B_out])]"
                ],
                "fa": [
                    "Optional[A_in]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 107,
            "return": [
                "Optional[A]"
            ],
            "arguments": {
                "ffa": [
                    "Optional[Optional[A]]"
                ]
            }
        },
        "fmap": {
            "name": "fmap",
            "location": 118,
            "return": [
                "Optional[B_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], B_out)]"
                ],
                "fa": [
                    "Optional[A_in]"
                ]
            }
        },
        "fmap2": {
            "name": "fmap2",
            "location": 135,
            "return": [
                "Optional[C_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in, B_in], C_out)]"
                ],
                "fa": [
                    "Optional[A_in]"
                ],
                "fb": [
                    "Optional[B_in]"
                ]
            }
        },
        "fmap3": {
            "name": "fmap3",
            "location": 160,
            "return": [
                "Optional[D_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in, B_in, C_in], D_out)]"
                ],
                "fa": [
                    "Optional[A_in]"
                ],
                "fb": [
                    "Optional[B_in]"
                ],
                "fc": [
                    "Optional[C_in]"
                ]
            }
        },
        "fmapN": {
            "name": "fmapN",
            "location": 189,
            "return": [
                "Optional[A_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[(..., A_out)]"
                ]
            }
        },
        "fproduct": {
            "name": "fproduct",
            "location": 218,
            "return": [
                "Optional[Tuple[(A, B_out)]]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A], B_out)]"
                ],
                "fa": [
                    "Optional[A]"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 236,
            "return": [
                "Callable[([Optional[A_in]], Optional[B_out])]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], B_out)]"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 254,
            "return": [
                "Optional[Tuple[(A, B)]]"
            ],
            "arguments": {
                "fa": [
                    "Optional[A]"
                ],
                "fb": [
                    "Optional[B]"
                ]
            }
        },
        "fmap2.ff": {
            "name": "ff",
            "location": 154,
            "return": [
                "Optional[C_out]"
            ],
            "arguments": {
                "a": [
                    "A_in"
                ]
            }
        },
        "fmap3.ff": {
            "name": "ff",
            "location": 183,
            "return": [
                "Optional[D_out]"
            ],
            "arguments": {
                "a": [
                    "A_in"
                ]
            }
        },
        "product.ff": {
            "name": "ff",
            "location": 267,
            "return": [
                "Optional[Tuple[(A, B)]]"
            ],
            "arguments": {
                "a": [
                    "A"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/seq.py": {
        "apply": {
            "name": "apply",
            "location": 10,
            "return": [
                "Seq[B_out]"
            ],
            "arguments": {
                "ff": [
                    "Seq[Callable[([A_in], B_out)]]"
                ],
                "fa": [
                    "Seq[A_in]"
                ]
            }
        },
        "flatmap": {
            "name": "flatmap",
            "location": 39,
            "return": [
                "Seq[B_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], Seq[B_out])]"
                ],
                "fa": [
                    "Seq[A_in]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 55,
            "return": [
                "Seq[A]"
            ],
            "arguments": {
                "ffa": [
                    "Seq[Seq[A]]"
                ]
            }
        },
        "fmap": {
            "name": "fmap",
            "location": 68,
            "return": [
                "Seq[B_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], B_out)]"
                ],
                "fa": [
                    "Seq[A_in]"
                ]
            }
        },
        "fmap2": {
            "name": "fmap2",
            "location": 83,
            "return": [
                "Seq[C_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in, B_in], C_out)]"
                ],
                "fa": [
                    "Seq[A_in]"
                ],
                "fb": [
                    "Seq[B_in]"
                ]
            }
        },
        "fproduct": {
            "name": "fproduct",
            "location": 115,
            "return": [
                "Seq[Tuple[(A, B_out)]]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A], B_out)]"
                ],
                "fa": [
                    "Seq[A]"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 131,
            "return": [
                "Seq[A_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[([int], A_out)]"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 174,
            "return": [
                "Callable[([Seq[A_in]], Seq[B_out])]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], B_out)]"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 191,
            "return": [
                "Seq[Tuple[(A, B)]]"
            ],
            "arguments": {
                "fa": [
                    "Seq[A]"
                ],
                "fb": [
                    "Seq[B]"
                ]
            }
        },
        "unit": {
            "name": "unit",
            "location": 218,
            "return": [
                "Seq[A]"
            ],
            "arguments": {
                "a": [
                    "A"
                ]
            }
        },
        "zip_map": {
            "name": "zip_map",
            "location": 228,
            "return": [
                "Seq[A_out]"
            ],
            "arguments": {
                "f": [
                    "Callable[(..., A_out)]"
                ]
            }
        },
        "fmap2.ff": {
            "name": "ff",
            "location": 109,
            "return": [
                "Seq[C_out]"
            ],
            "arguments": {
                "a": [
                    "A_in"
                ]
            }
        },
        "product.ff": {
            "name": "ff",
            "location": 212,
            "return": [
                "Seq[Tuple[(A, B)]]"
            ],
            "arguments": {
                "a": [
                    "A"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/__init__.py": {
        "attempt": {
            "name": "attempt",
            "location": 27,
            "return": [
                "Optional[A]"
            ],
            "arguments": {
                "e": [
                    "Union[(Type[Exception], Tuple[(Type[Exception], ...)])]"
                ],
                "f": [
                    "Callable[(..., A)]"
                ]
            }
        },
        "chain": {
            "name": "chain",
            "location": 63,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "silenced": {
            "name": "silenced",
            "location": 92,
            "return": [
                "Callable[([Callable[(..., A)]], Callable[(..., Optional[A])])]"
            ],
            "arguments": {
                "_f": [
                    "Optional[Callable[(..., A)]]"
                ]
            }
        },
        "try_apply": {
            "name": "try_apply",
            "location": 139,
            "return": [
                "Optional[A]"
            ],
            "arguments": {
                "f": [
                    "Callable[(..., A)]"
                ]
            }
        },
        "try_except": {
            "name": "try_except",
            "location": 154,
            "return": [
                "A@@"
            ],
            "arguments": {
                "e": [
                    "Union[(Type[Exception], Tuple[(Type[Exception], ...)])]"
                ],
                "f": [
                    "Callable[(..., A)]"
                ],
                "g": [
                    "Callable[(..., A)]"
                ]
            }
        },
        "attempt.none": {
            "name": "none",
            "location": 57,
            "return": [
                "Optional[A]"
            ],
            "arguments": {}
        },
        "silenced.decorator": {
            "name": "decorator",
            "location": 129,
            "return": [
                "Callable[(..., Optional[A])]"
            ],
            "arguments": {
                "f": [
                    "Callable[(..., A)]"
                ]
            }
        },
        "silenced.decorator.wrapper": {
            "name": "wrapper",
            "location": 131,
            "return": [
                "Optional[A]"
            ],
            "arguments": {}
        }
    },
    "ftoolz-master/ftoolz/functoolz/traverse/opt.py": {
        "sequence_iter": {
            "name": "sequence_iter",
            "location": 11,
            "return": [
                "Optional[Iterable[A]]"
            ],
            "arguments": {
                "gfa": [
                    "Iterable[Optional[A]]"
                ]
            }
        },
        "sequence_seq": {
            "name": "sequence_seq",
            "location": 41,
            "return": [
                "Optional[Seq[A]]"
            ],
            "arguments": {
                "gfa": [
                    "Seq[Optional[A]]"
                ]
            }
        },
        "traverse_iter": {
            "name": "traverse_iter",
            "location": 60,
            "return": [
                "Optional[Iterable[B]]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], Optional[B])]"
                ],
                "fa": [
                    "Iterable[A_in]"
                ]
            }
        },
        "traverse_seq": {
            "name": "traverse_seq",
            "location": 80,
            "return": [
                "Optional[Seq[B]]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A_in], Optional[B])]"
                ],
                "fa": [
                    "Seq[A_in]"
                ]
            }
        },
        "traverse_iter.op": {
            "name": "op",
            "location": 73,
            "return": [
                "Optional[Iterable[B]]"
            ],
            "arguments": {
                "a": [
                    "A_in"
                ],
                "acc": [
                    "Optional[Iterable[B]]"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/traverse/__init__.py": {},
    "ftoolz-master/ftoolz/unsafe/reflection.py": {
        "abstract": {
            "name": "abstract",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "clz": [
                    "Type"
                ]
            }
        },
        "implementations": {
            "name": "implementations",
            "location": 38,
            "return": [
                "List[Type[T]]"
            ],
            "arguments": {
                "clz": [
                    "Type[T]"
                ],
                "package": [
                    "str"
                ]
            }
        },
        "import_all": {
            "name": "import_all",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        },
        "protected": {
            "name": "protected",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "clz": [
                    "Type[T]"
                ]
            }
        },
        "subclasses": {
            "name": "subclasses",
            "location": 107,
            "return": [
                "Set[Type[T]]"
            ],
            "arguments": {
                "clz": [
                    "Type[T]"
                ],
                "package": [
                    "str"
                ]
            }
        },
        "implementations.load": {
            "name": "load",
            "location": 52,
            "return": [
                "Type[T]"
            ],
            "arguments": {
                "c": [
                    "Type[T]"
                ]
            }
        },
        "subclasses.rec": {
            "name": "rec",
            "location": 140,
            "return": [
                "Set[Type[T]]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/unsafe/__init__.py": {},
    "ftoolz-master/tests/run.py": {},
    "ftoolz-master/tests/__init__.py": {},
    "ftoolz-master/tests/test_unsafe/classes.py": {
        "A.test": {
            "name": "test",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.test2": {
            "name": "test2",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "B.test": {
            "name": "test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.test2": {
            "name": "test2",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "D.test2": {
            "name": "test2",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "E.test": {
            "name": "test",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "E.test2": {
            "name": "test2",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/tests/test_unsafe/test_reflection.py": {
        "ReflectionTest.test_implementations": {
            "name": "test_implementations",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/tests/test_unsafe/__init__.py": {}
}
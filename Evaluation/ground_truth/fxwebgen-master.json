{
    "fxwebgen-master/fxwebgen.py": {},
    "fxwebgen-master/fxwebgen/config.py": {
        "add_arguments": {
            "name": "add_arguments",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "ArgumentParser"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 104,
            "return": [
                "Context"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ]
            }
        },
        "_get_path": {
            "name": "_get_path",
            "location": 170,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "base_path": [
                    "Optional[str]"
                ],
                "args": [
                    "Namespace"
                ],
                "config": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_get_paths": {
            "name": "_get_paths",
            "location": 197,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "base_path": [
                    "Optional[str]"
                ],
                "args": [
                    "Namespace"
                ],
                "config": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_parse_bool": {
            "name": "_parse_bool",
            "location": 227,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "_get_bool": {
            "name": "_get_bool",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ],
                "config": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_get_string": {
            "name": "_get_string",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [
                    "Namespace"
                ],
                "config": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_check_dirs": {
            "name": "_check_dirs",
            "location": 253,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "dirs": [
                    "List[str]"
                ]
            }
        },
        "Option.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "shortcut": [
                    "Optional[str]"
                ],
                "default": [
                    "Any"
                ],
                "description": [
                    "str"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "templater": [
                    "Templater"
                ],
                "output_root": [
                    "str"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/generator.py": {
        "Generator.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Context"
                ]
            }
        },
        "Generator.purge": {
            "name": "purge",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.build": {
            "name": "build",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Generator.before_building_pages": {
            "name": "before_building_pages",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.after_building_pages": {
            "name": "after_building_pages",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.build_pages": {
            "name": "build_pages",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.parse_page": {
            "name": "parse_page",
            "location": 91,
            "return": [
                "Page"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "default_path": [
                    "str"
                ]
            }
        },
        "Generator.build_page": {
            "name": "build_page",
            "location": 96,
            "return": [
                "Page"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Page"
                ]
            }
        },
        "Generator._process_source": {
            "name": "_process_source",
            "location": 102,
            "return": [
                "Page"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "default_path": [
                    "str"
                ]
            }
        },
        "Generator._process_metadata": {
            "name": "_process_metadata",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Page"
                ]
            }
        },
        "Generator._load_datasets_for_page": {
            "name": "_load_datasets_for_page",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Page"
                ]
            }
        },
        "Generator._process_page": {
            "name": "_process_page",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Page"
                ]
            }
        },
        "Generator._write_page": {
            "name": "_write_page",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Page"
                ]
            }
        },
        "Generator.copy_static_files": {
            "name": "copy_static_files",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.get_dataset": {
            "name": "get_dataset",
            "location": 213,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Generator.generate_thumbnails": {
            "name": "generate_thumbnails",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.remove_stale_files": {
            "name": "remove_stale_files",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fxwebgen-master/fxwebgen/imaging.py": {
        "create_thumbnail": {
            "name": "create_thumbnail",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "input_file": [
                    "str"
                ],
                "output_file": [
                    "str"
                ],
                "width": [
                    "Optional[int]"
                ],
                "height": [
                    "Optional[int]"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/main.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.serve": {
            "name": "serve",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fxwebgen-master/fxwebgen/objects.py": {
        "Thumbnail.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original_url": [
                    "str"
                ],
                "width": [
                    "Optional[int]"
                ],
                "height": [
                    "Optional[int]"
                ]
            }
        },
        "Thumbnail.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fxwebgen-master/fxwebgen/postprocessor.py": {
        "replace_absolute_links": {
            "name": "replace_absolute_links",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "_ctx": [
                    "Context"
                ],
                "page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "replace_pelican_links": {
            "name": "replace_pelican_links",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "_ctx": [
                    "Context"
                ],
                "page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "replace_interlinks": {
            "name": "replace_interlinks",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "Context"
                ],
                "page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "extract_toc": {
            "name": "extract_toc",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "_ctx": [
                    "Context"
                ],
                "page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "downgrade_headings": {
            "name": "downgrade_headings",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "Context"
                ],
                "_page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "add_title_as_heading": {
            "name": "add_title_as_heading",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "Context"
                ],
                "page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "bootstrap_admonition": {
            "name": "bootstrap_admonition",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "_ctx": [
                    "Context"
                ],
                "_page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "resize_images": {
            "name": "resize_images",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "_ctx": [
                    "Context"
                ],
                "page": [
                    "Page"
                ],
                "tree": [
                    "BeautifulSoup"
                ]
            }
        },
        "PostProcessor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostProcessor.process_page": {
            "name": "process_page",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Context"
                ],
                "page": [
                    "Page"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/resources.py": {
        "Resource.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "'Kind'"
                ],
                "source": [
                    "Optional[str]"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "Resource.fresh": {
            "name": "fresh",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.source_exists": {
            "name": "source_exists",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kind.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Kind.add": {
            "name": "add",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Resource"
                ]
            }
        },
        "Kind.remove": {
            "name": "remove",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Resource"
                ]
            }
        },
        "Kind.clear": {
            "name": "clear",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kind.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.add_kind": {
            "name": "add_kind",
            "location": 70,
            "return": [
                "Kind"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ResourceManager.add": {
            "name": "add",
            "location": 75,
            "return": [
                "Resource"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "Kind"
                ],
                "source": [
                    "Optional[str]"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "ResourceManager.remove": {
            "name": "remove",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Resource"
                ]
            }
        },
        "ResourceManager.remove_by_kind": {
            "name": "remove_by_kind",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "Kind"
                ]
            }
        },
        "ResourceManager.remove_stale_files": {
            "name": "remove_stale_files",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_dir": [
                    "str"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/server.py": {
        "create_server": {
            "name": "create_server",
            "location": 11,
            "return": [
                "HTTPServer"
            ],
            "arguments": {
                "host": [
                    "Optional[str]"
                ],
                "port": [
                    "Optional[int]"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/templater.py": {
        "to_dict": {
            "name": "to_dict",
            "location": 11,
            "return": [
                "Dict[(Any, Mapping)]"
            ],
            "arguments": {
                "value": [
                    "Iterable[Mapping]"
                ],
                "key": [
                    "Any"
                ]
            }
        },
        "create_templater": {
            "name": "create_templater",
            "location": 15,
            "return": [
                "'Templater'"
            ],
            "arguments": {
                "template_dir": [
                    "str"
                ],
                "global_vars": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Templater.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_dir": [
                    "str"
                ],
                "env": [
                    "Environment"
                ]
            }
        },
        "Templater.clear_cache": {
            "name": "clear_cache",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Templater.load_template_data": {
            "name": "load_template_data",
            "location": 38,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Templater.get_template": {
            "name": "get_template",
            "location": 47,
            "return": [
                "Tuple[(Template, dict)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "Templater.render": {
            "name": "render",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(str, List[str])]"
                ],
                "variables": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/typing.py": {},
    "fxwebgen-master/fxwebgen/utils.py": {
        "file_mtime": {
            "name": "file_mtime",
            "location": 6,
            "return": [
                "float"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "abspath": {
            "name": "abspath",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "base_path": [
                    "Optional[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "get_indent": {
            "name": "get_indent",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "SmartFormatter._fill_text": {
            "name": "_fill_text",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "indent": [
                    "int"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/yaml.py": {
        "load": {
            "name": "load",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "load_path": {
            "name": "load_path",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "load_file": {
            "name": "load_file",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "stream": [
                    "TextIO"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Any"
                ]
            }
        },
        "dump_file": {
            "name": "dump_file",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "IO[str]"
                ],
                "data": [
                    "Any"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/__init__.py": {},
    "fxwebgen-master/fxwebgen/__main__.py": {},
    "fxwebgen-master/fxwebgen/markdown/base.py": {
        "BlockProcessor.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.Markdown"
                ]
            }
        },
        "Stash.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "placeholder": [
                    "str"
                ]
            }
        },
        "Stash.store": {
            "name": "store",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any"
                ]
            }
        },
        "Stash.reset": {
            "name": "reset",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fxwebgen-master/fxwebgen/markdown/bootstrap.py": {
        "dedent": {
            "name": "dedent",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "unindent": [
                    "Optional[str]"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 142,
            "return": [
                "BootstrapExtension"
            ],
            "arguments": {}
        },
        "BootstrapExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.Markdown"
                ]
            }
        },
        "BootstrapPreprocessor.run": {
            "name": "run",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ]
            }
        },
        "BootstrapProcessor.test": {
            "name": "test",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "BootstrapProcessor.run": {
            "name": "run",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "blocks": [
                    "List[str]"
                ]
            }
        },
        "BootstrapProcessor._parse": {
            "name": "_parse",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "tree": [
                    "etree.Element"
                ]
            }
        },
        "BootstrapProcessor._parse_accordion": {
            "name": "_parse_accordion",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "accordion": [
                    "etree.Element"
                ]
            }
        },
        "BootstrapPreprocessor.run.replace": {
            "name": "replace",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "m": [
                    "Match"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/markdown/divs.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 117,
            "return": [
                "DivsExtension"
            ],
            "arguments": {}
        },
        "DivsExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.Markdown"
                ]
            }
        },
        "DivsPreprocessor.run": {
            "name": "run",
            "location": 28,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "elm": [
                    "etree.Element"
                ]
            }
        },
        "DivsProcessor.test": {
            "name": "test",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "DivsProcessor.run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "blocks": [
                    "List[str]"
                ]
            }
        },
        "DivsProcessor.run.parse_blocks": {
            "name": "parse_blocks",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "elm": [
                    "etree.Element"
                ]
            }
        },
        "DivsProcessor.run.process_stash": {
            "name": "process_stash",
            "location": 72,
            "return": [
                "Node"
            ],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/markdown/imagegallery.py": {
        "parse_img_src_as_thumbnail": {
            "name": "parse_img_src_as_thumbnail",
            "location": 104,
            "return": [
                "Optional[Thumbnail]"
            ],
            "arguments": {
                "src": [
                    "str"
                ]
            }
        },
        "parse_size": {
            "name": "parse_size",
            "location": 118,
            "return": [
                "Tuple[(Optional[int], Optional[int])]"
            ],
            "arguments": {
                "size": [
                    "str"
                ]
            }
        },
        "add_thumbnail": {
            "name": "add_thumbnail",
            "location": 128,
            "return": [
                "Thumbnail"
            ],
            "arguments": {
                "md": [
                    "Markdown"
                ],
                "thumbnail": [
                    "Thumbnail"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 139,
            "return": [
                "ImageGalleryExtension"
            ],
            "arguments": {}
        },
        "ImageGalleryExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "Markdown"
                ]
            }
        },
        "ImageGalleryProcessor.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "Markdown"
                ]
            }
        },
        "ImageGalleryProcessor.test": {
            "name": "test",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "ImageGalleryProcessor.run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "blocks": [
                    "List[str]"
                ]
            }
        },
        "ImageLinkInlineProcessor.handleMatch": {
            "name": "handleMatch",
            "location": 80,
            "return": [
                "Tuple[(Optional[etree.Element], Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Pattern"
                ],
                "data": [
                    "Any"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/markdown/__init__.py": {},
    "fxwebgen-master/fxwebgen/pages/base.py": {
        "Page.test": {
            "name": "test",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "path": [
                    "str"
                ]
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Context"
                ],
                "source": [
                    "str"
                ],
                "default_path": [
                    "str"
                ]
            }
        },
        "Page.process": {
            "name": "process",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.webroot": {
            "name": "webroot",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.path": {
            "name": "path",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.filename": {
            "name": "filename",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fxwebgen-master/fxwebgen/pages/html.py": {
        "HtmlPage.test": {
            "name": "test",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "path": [
                    "str"
                ]
            }
        },
        "HtmlPage.process": {
            "name": "process",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fxwebgen-master/fxwebgen/pages/markdown.py": {
        "MarkdownPage.test": {
            "name": "test",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "path": [
                    "str"
                ]
            }
        },
        "MarkdownPage.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Context"
                ],
                "source": [
                    "str"
                ],
                "default_path": [
                    "str"
                ]
            }
        },
        "MarkdownPage.process": {
            "name": "process",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanWithClassPattern.handleMatch": {
            "name": "handleMatch",
            "location": 70,
            "return": [
                "Tuple[(Optional[etree.Element], Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Any"
                ],
                "_data": [
                    "Any"
                ]
            }
        },
        "ExpandVariablesPreprocessor.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.Markdown"
                ],
                "variables": [
                    "dict"
                ]
            }
        },
        "ExpandVariablesPreprocessor.run": {
            "name": "run",
            "location": 84,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ]
            }
        },
        "SnippetsPreprocessor.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.Markdown"
                ],
                "snippets_dir": [
                    "Optional[str]"
                ]
            }
        },
        "SnippetsPreprocessor.run": {
            "name": "run",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ]
            }
        },
        "ExpandVariablesPreprocessor.run.expand_variable": {
            "name": "expand_variable",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "m": [
                    "Match"
                ]
            }
        },
        "SnippetsPreprocessor.run.load_snippet": {
            "name": "load_snippet",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "SnippetsPreprocessor.run.expand_snippets": {
            "name": "expand_snippets",
            "location": 133,
            "return": [
                "Tuple[(List[str], bool)]"
            ],
            "arguments": {
                "old_lines": [
                    "List[str]"
                ]
            }
        }
    },
    "fxwebgen-master/fxwebgen/pages/__init__.py": {},
    "fxwebgen-master/stubs/bs4.py": {
        "Tag.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Tag.find_all": {
            "name": "find_all",
            "location": 15,
            "return": [
                "ResultSet"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "attrs": [
                    "Optional[dict]"
                ],
                "recursive": [
                    "bool"
                ],
                "text": [
                    "Optional[str]"
                ],
                "limit": [
                    "Optional[int]"
                ]
            }
        },
        "Tag.find": {
            "name": "find",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "attrs": [
                    "Optional[dict]"
                ],
                "recursive": [
                    "bool"
                ],
                "text": [
                    "Optional[str]"
                ]
            }
        },
        "Tag.insert": {
            "name": "insert",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ],
                "tag": [
                    "Tag"
                ]
            }
        },
        "Tag.append": {
            "name": "append",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Tag"
                ]
            }
        },
        "Tag.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            }
        },
        "BeautifulSoup.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markup": [
                    "str"
                ],
                "features": [
                    "Any"
                ],
                "builder": [
                    "Any"
                ],
                "parse_only": [
                    "Any"
                ],
                "from_encoding": [
                    "Any"
                ],
                "exclude_encodings": [
                    "Any"
                ]
            }
        },
        "BeautifulSoup.decode": {
            "name": "decode",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pretty_print": [
                    "bool"
                ],
                "eventual_encoding": [
                    "str"
                ],
                "formatter": [
                    "str"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/yaml.py": {
        "load": {
            "name": "load",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "stream": [
                    "Union[(str, IO[str])]"
                ],
                "Loader": [
                    "Any"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 19,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "Any"
                ],
                "stream": [
                    "Optional[IO[str]]"
                ],
                "Dumper": [
                    "Any"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/markdown/blockparser.py": {
        "BlockParser.parseChunk": {
            "name": "parseChunk",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "BlockParser.parseBlocks": {
            "name": "parseBlocks",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "blocks": [
                    "List[str]"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/markdown/blockprocessors.py": {
        "BlockProcessor.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "blockparser.BlockParser"
                ]
            }
        },
        "BlockProcessor.test": {
            "name": "test",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "BlockProcessor.run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ],
                "blocks": [
                    "List[str]"
                ]
            }
        },
        "BlockProcessor.lastChild": {
            "name": "lastChild",
            "location": 19,
            "return": [
                "Optional[etree.Element]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "etree.Element"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/markdown/extensions.py": {
        "Extension.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.Markdown"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/markdown/inlinepatterns.py": {
        "Pattern.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "markdown_instance": [
                    "Optional[mkd.Markdown]"
                ]
            }
        },
        "Pattern.handleMatch": {
            "name": "handleMatch",
            "location": 12,
            "return": [
                "typing.Tuple[(Optional[mkd.util.etree.Element], Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "typing.Pattern"
                ],
                "data": [
                    "typing.Any"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/markdown/preprocessors.py": {
        "Preprocessor.run": {
            "name": "run",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/markdown/util.py": {
        "Processor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "markdown_instance": [
                    "Optional[md.Markdown]"
                ]
            }
        },
        "Registry.get_index_for_name": {
            "name": "get_index_for_name",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Any"
                ],
                "name": [
                    "str"
                ],
                "priority": [
                    "int"
                ]
            }
        },
        "Registry.deregister": {
            "name": "deregister",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "Registry.add": {
            "name": "add",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ],
                "location": [
                    "str"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/markdown/__init__.py": {
        "Markdown.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extensions": [
                    "List[str]"
                ],
                "lazy_ol": [
                    "bool"
                ],
                "extension_configs": [
                    "Optional[dict]"
                ]
            }
        },
        "Markdown.convert": {
            "name": "convert",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "Markdown.registerExtension": {
            "name": "registerExtension",
            "location": 23,
            "return": [
                "Markdown"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "Extension"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/PIL/Image.py": {
        "open": {
            "name": "open",
            "location": 9,
            "return": [
                "Image"
            ],
            "arguments": {
                "fp": [
                    "Union[(str, pathlib.Path, IO[bytes])]"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "Image.save": {
            "name": "save",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "Union[(str, pathlib.Path, IO[bytes])]"
                ],
                "format": [
                    "Optional[str]"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/PIL/__init__.py": {},
    "fxwebgen-master/stubs/resizeimage/resizeimage.py": {
        "resize_width": {
            "name": "resize_width",
            "location": 4,
            "return": [
                "Image"
            ],
            "arguments": {
                "image": [
                    "Image"
                ],
                "size": [
                    "Union[(int, Tuple[(int, int)], List[int])]"
                ]
            }
        },
        "resize_height": {
            "name": "resize_height",
            "location": 5,
            "return": [
                "Image"
            ],
            "arguments": {
                "image": [
                    "Image"
                ],
                "size": [
                    "Union[(int, Tuple[(int, int)], List[int])]"
                ]
            }
        },
        "resize_thumbnail": {
            "name": "resize_thumbnail",
            "location": 6,
            "return": [
                "Image"
            ],
            "arguments": {
                "image": [
                    "Image"
                ],
                "size": [
                    "Union[(int, Tuple[(int, int)], List[int])]"
                ]
            }
        }
    },
    "fxwebgen-master/stubs/resizeimage/__init__.py": {}
}
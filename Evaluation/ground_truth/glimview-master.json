{
    "glimview-master/app.py": {
        "get_entities": {
            "name": "get_entities",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "get_relations": {
            "name": "get_relations",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "query": {
            "name": "query",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "hello": {
            "name": "hello",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "glimview-master/glimview/ModelKB.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "words": [],
                "roles": [],
                "path": [],
                "path_file": []
            }
        },
        "Model.get_word_vector": {
            "name": "get_word_vector",
            "location": 110,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "backoff_to_zero_vector": []
            }
        },
        "Model.get_relation_matrix": {
            "name": "get_relation_matrix",
            "location": 116,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ],
                "backoff_to_identity_matrix": []
            }
        },
        "Model.trans": {
            "name": "trans",
            "location": 127,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "np.ndarray"
                ],
                "m": [
                    "np.ndarray"
                ]
            }
        },
        "Model.calc": {
            "name": "calc",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [],
                "addition_symbol": []
            }
        },
        "Model.show_v": {
            "name": "show_v",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "k": []
            }
        },
        "Model.show_m": {
            "name": "show_m",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "k": []
            }
        },
        "Model.get_score": {
            "name": "get_score",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "relation": [],
                "direction": []
            }
        },
        "Model.show_mm": {
            "name": "show_mm",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "r1": [],
                "r2": [],
                "k": []
            }
        },
        "Model.mm_rank": {
            "name": "mm_rank",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "r1": [],
                "r2": [],
                "r": []
            }
        },
        "Model.code_of": {
            "name": "code_of",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "Model._get_word_vector_if_str": {
            "name": "_get_word_vector_if_str",
            "location": 233,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "word_or_vec": [
                    "Union[(str, np.ndarray)]"
                ],
                "backoff_to_zero_vector": []
            }
        },
        "Model.calc_phrase_from_path": {
            "name": "calc_phrase_from_path",
            "location": 243,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[Union[(str, np.ndarray)]]"
                ],
                "ignore_oov": []
            }
        },
        "Model.calc_phrase_from_path_with_entities": {
            "name": "calc_phrase_from_path_with_entities",
            "location": 280,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[Union[(str, np.ndarray)]]"
                ],
                "ignore_oov": []
            }
        },
        "Model.calc_phrase_from_triples": {
            "name": "calc_phrase_from_triples",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "triples": [],
                "ignore_oov": []
            }
        },
        "Model.get_average_word_vector": {
            "name": "get_average_word_vector",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "words": [
                    "List[str]"
                ],
                "skip_oov": []
            }
        },
        "Model.show_m.calc_deform": {
            "name": "calc_deform",
            "location": 160,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Model.show_m.code_relu": {
            "name": "code_relu",
            "location": 168,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Model.code_of.code_relu": {
            "name": "code_relu",
            "location": 223,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "glimview-master/glimview/util.py": {
        "take": {
            "name": "take",
            "location": 6,
            "return": [],
            "arguments": {
                "n": [],
                "iterable": []
            }
        },
        "chunked": {
            "name": "chunked",
            "location": 10,
            "return": [],
            "arguments": {
                "iterable": [],
                "n": []
            }
        },
        "build_path_expr": {
            "name": "build_path_expr",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "List[str]"
                ]
            }
        }
    },
    "glimview-master/glimview/utilityFuncs.py": {
        "readerLine": {
            "name": "readerLine",
            "location": 9,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "show_top": {
            "name": "show_top",
            "location": 15,
            "return": [],
            "arguments": {
                "k": [],
                "scores": [],
                "lst": []
            }
        },
        "split_wrt_brackets": {
            "name": "split_wrt_brackets",
            "location": 27,
            "return": [],
            "arguments": {
                "str": [],
                "sp": []
            }
        }
    },
    "glimview-master/glimview/__init__.py": {}
}
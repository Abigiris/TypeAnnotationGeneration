{
    "grey-master/black.py": {
        "supports_feature": {
            "name": "supports_feature",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "target_versions": [
                    "Set[TargetVersion]"
                ],
                "feature": [
                    "Feature"
                ]
            }
        },
        "read_pyproject_toml": {
            "name": "read_pyproject_toml",
            "location": 216,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter"
                ],
                "value": [
                    "Union[(str, int, bool, None)]"
                ]
            }
        },
        "target_version_option_callback": {
            "name": "target_version_option_callback",
            "location": 252,
            "return": [
                "List[TargetVersion]"
            ],
            "arguments": {
                "c": [
                    "click.Context"
                ],
                "p": [
                    "Union[(click.Option, click.Parameter)]"
                ],
                "v": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "code": [
                    "Optional[str]"
                ],
                "line_length": [
                    "int"
                ],
                "target_version": [
                    "List[TargetVersion]"
                ],
                "check": [
                    "bool"
                ],
                "diff": [
                    "bool"
                ],
                "fast": [
                    "bool"
                ],
                "pyi": [
                    "bool"
                ],
                "py36": [
                    "bool"
                ],
                "skip_string_normalization": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ],
                "include": [
                    "str"
                ],
                "exclude": [
                    "str"
                ],
                "src": [
                    "Tuple[(str, ...)]"
                ],
                "config": [
                    "Optional[str]"
                ]
            }
        },
        "path_empty": {
            "name": "path_empty",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "Tuple[(str, ...)]"
                ],
                "quiet": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ],
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "reformat_one": {
            "name": "reformat_one",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "Path"
                ],
                "fast": [
                    "bool"
                ],
                "write_back": [
                    "WriteBack"
                ],
                "mode": [
                    "FileMode"
                ],
                "report": [
                    "'Report'"
                ]
            }
        },
        "reformat_many": {
            "name": "reformat_many",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "sources": [
                    "Set[Path]"
                ],
                "fast": [
                    "bool"
                ],
                "write_back": [
                    "WriteBack"
                ],
                "mode": [
                    "FileMode"
                ],
                "report": [
                    "'Report'"
                ]
            }
        },
        "format_file_in_place": {
            "name": "format_file_in_place",
            "location": 633,
            "return": [
                "bool"
            ],
            "arguments": {
                "src": [
                    "Path"
                ],
                "fast": [
                    "bool"
                ],
                "mode": [
                    "FileMode"
                ],
                "write_back": [
                    "WriteBack"
                ],
                "lock": [
                    "Any"
                ]
            }
        },
        "format_stdin_to_stdout": {
            "name": "format_stdin_to_stdout",
            "location": 679,
            "return": [
                "bool"
            ],
            "arguments": {
                "fast": [
                    "bool"
                ]
            }
        },
        "format_file_contents": {
            "name": "format_file_contents",
            "location": 712,
            "return": [
                "FileContent"
            ],
            "arguments": {
                "src_contents": [
                    "str"
                ]
            }
        },
        "format_str": {
            "name": "format_str",
            "location": 734,
            "return": [
                "FileContent"
            ],
            "arguments": {
                "src_contents": [
                    "str"
                ]
            }
        },
        "decode_bytes": {
            "name": "decode_bytes",
            "location": 775,
            "return": [
                "Tuple[(FileContent, Encoding, NewLine)]"
            ],
            "arguments": {
                "src": [
                    "bytes"
                ]
            }
        },
        "get_grammars": {
            "name": "get_grammars",
            "location": 792,
            "return": [
                "List[Grammar]"
            ],
            "arguments": {
                "target_versions": [
                    "Set[TargetVersion]"
                ]
            }
        },
        "lib2to3_parse": {
            "name": "lib2to3_parse",
            "location": 831,
            "return": [
                "Node"
            ],
            "arguments": {
                "src_txt": [
                    "str"
                ],
                "target_versions": [
                    "Iterable[TargetVersion]"
                ]
            }
        },
        "lib2to3_unparse": {
            "name": "lib2to3_unparse",
            "location": 858,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "whitespace": {
            "name": "whitespace",
            "location": 1907,
            "return": [
                "str"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "preceding_leaf": {
            "name": "preceding_leaf",
            "location": 2137,
            "return": [
                "Optional[Leaf]"
            ],
            "arguments": {
                "node": [
                    "Optional[LN]"
                ]
            }
        },
        "child_towards": {
            "name": "child_towards",
            "location": 2155,
            "return": [
                "Optional[LN]"
            ],
            "arguments": {
                "ancestor": [
                    "Node"
                ],
                "descendant": [
                    "LN"
                ]
            }
        },
        "container_of": {
            "name": "container_of",
            "location": 2163,
            "return": [
                "LN"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_split_after_delimiter": {
            "name": "is_split_after_delimiter",
            "location": 2188,
            "return": [
                "Priority"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "previous": [
                    "Optional[Leaf]"
                ]
            }
        },
        "is_split_before_delimiter": {
            "name": "is_split_before_delimiter",
            "location": 2202,
            "return": [
                "Priority"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "previous": [
                    "Optional[Leaf]"
                ]
            }
        },
        "generate_comments": {
            "name": "generate_comments",
            "location": 2302,
            "return": [
                "Iterator[Leaf]"
            ],
            "arguments": {
                "leaf": [
                    "LN"
                ]
            }
        },
        "list_comments": {
            "name": "list_comments",
            "location": 2344,
            "return": [
                "List[ProtoComment]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "make_comment": {
            "name": "make_comment",
            "location": 2380,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "split_line": {
            "name": "split_line",
            "location": 2399,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "line_length": [
                    "int"
                ],
                "inner": [
                    "bool"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "left_hand_split": {
            "name": "left_hand_split",
            "location": 2481,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "right_hand_split": {
            "name": "right_hand_split",
            "location": 2517,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "line_length": [
                    "int"
                ],
                "features": [
                    "Collection[Feature]"
                ],
                "omit": [
                    "Collection[LeafID]"
                ]
            }
        },
        "bracket_split_succeeded_or_raise": {
            "name": "bracket_split_succeeded_or_raise",
            "location": 2606,
            "return": [
                "None"
            ],
            "arguments": {
                "head": [
                    "Line"
                ],
                "body": [
                    "Line"
                ],
                "tail": [
                    "Line"
                ]
            }
        },
        "bracket_split_build_line": {
            "name": "bracket_split_build_line",
            "location": 2632,
            "return": [
                "Line"
            ],
            "arguments": {
                "leaves": [
                    "List[Leaf]"
                ],
                "original": [
                    "Line"
                ],
                "opening_bracket": [
                    "Leaf"
                ]
            }
        },
        "dont_increase_indentation": {
            "name": "dont_increase_indentation",
            "location": 2674,
            "return": [
                "SplitFunc"
            ],
            "arguments": {
                "split_func": [
                    "SplitFunc"
                ]
            }
        },
        "delimiter_split": {
            "name": "delimiter_split",
            "location": 2690,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "standalone_comment_split": {
            "name": "standalone_comment_split",
            "location": 2760,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "is_import": {
            "name": "is_import",
            "location": 2790,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_type_comment": {
            "name": "is_type_comment",
            "location": 2804,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "normalize_prefix": {
            "name": "normalize_prefix",
            "location": 2812,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "normalize_string_prefix": {
            "name": "normalize_string_prefix",
            "location": 2830,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "remove_u_prefix": [
                    "bool"
                ]
            }
        },
        "normalize_string_quotes": {
            "name": "normalize_string_quotes",
            "location": 2846,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "normalize_numeric_literal": {
            "name": "normalize_numeric_literal",
            "location": 2922,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "format_float_or_int_string": {
            "name": "format_float_or_int_string",
            "location": 2958,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "normalize_invisible_parens": {
            "name": "normalize_invisible_parens",
            "location": 2967,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Node"
                ],
                "parens_after": [
                    "Set[str]"
                ]
            }
        },
        "normalize_fmt_off": {
            "name": "normalize_fmt_off",
            "location": 3018,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "convert_one_fmt_off_pair": {
            "name": "convert_one_fmt_off_pair",
            "location": 3025,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "generate_ignored_nodes": {
            "name": "generate_ignored_nodes",
            "location": 3079,
            "return": [
                "Iterator[LN]"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "maybe_make_parens_invisible_in_atom": {
            "name": "maybe_make_parens_invisible_in_atom",
            "location": 3100,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ],
                "parent": [
                    "LN"
                ]
            }
        },
        "is_atom_with_invisible_parens": {
            "name": "is_atom_with_invisible_parens",
            "location": 3136,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_empty_tuple": {
            "name": "is_empty_tuple",
            "location": 3154,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "unwrap_singleton_parenthesis": {
            "name": "unwrap_singleton_parenthesis",
            "location": 3164,
            "return": [
                "Optional[LN]"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "wrap_in_parentheses": {
            "name": "wrap_in_parentheses",
            "location": 3178,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "Node"
                ],
                "child": [
                    "LN"
                ]
            }
        },
        "is_one_tuple": {
            "name": "is_one_tuple",
            "location": 3196,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_walrus_assignment": {
            "name": "is_walrus_assignment",
            "location": 3212,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_yield": {
            "name": "is_yield",
            "location": 3218,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "is_vararg": {
            "name": "is_vararg",
            "location": 3239,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ],
                "within": [
                    "Set[NodeType]"
                ]
            }
        },
        "is_multiline_string": {
            "name": "is_multiline_string",
            "location": 3262,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "is_stub_suite": {
            "name": "is_stub_suite",
            "location": 3268,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "is_stub_body": {
            "name": "is_stub_body",
            "location": 3281,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "max_delimiter_priority_in_atom": {
            "name": "max_delimiter_priority_in_atom",
            "location": 3297,
            "return": [
                "Priority"
            ],
            "arguments": {
                "node": [
                    "LN"
                ]
            }
        },
        "ensure_visible": {
            "name": "ensure_visible",
            "location": 3325,
            "return": [
                "None"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "should_explode": {
            "name": "should_explode",
            "location": 3337,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "opening_bracket": [
                    "Leaf"
                ]
            }
        },
        "get_features_used": {
            "name": "get_features_used",
            "location": 3357,
            "return": [
                "Set[Feature]"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "detect_target_versions": {
            "name": "detect_target_versions",
            "location": 3406,
            "return": [
                "Set[TargetVersion]"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "generate_trailers_to_omit": {
            "name": "generate_trailers_to_omit",
            "location": 3414,
            "return": [
                "Iterator[Set[LeafID]]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "line_length": [
                    "int"
                ]
            }
        },
        "get_future_imports": {
            "name": "get_future_imports",
            "location": 3464,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "get_gitignore": {
            "name": "get_gitignore",
            "location": 3515,
            "return": [
                "PathSpec"
            ],
            "arguments": {
                "root": [
                    "Path"
                ]
            }
        },
        "gen_python_files_in_dir": {
            "name": "gen_python_files_in_dir",
            "location": 3525,
            "return": [
                "Iterator[Path]"
            ],
            "arguments": {
                "path": [
                    "Path"
                ],
                "root": [
                    "Path"
                ],
                "include": [
                    "Pattern[str]"
                ],
                "exclude": [
                    "Pattern[str]"
                ],
                "report": [
                    "'Report'"
                ],
                "gitignore": [
                    "PathSpec"
                ]
            }
        },
        "find_project_root": {
            "name": "find_project_root",
            "location": 3583,
            "return": [
                "Path"
            ],
            "arguments": {
                "srcs": [
                    "Iterable[str]"
                ]
            }
        },
        "parse_ast": {
            "name": "parse_ast",
            "location": 3697,
            "return": [
                "Union[(ast.AST, ast3.AST, ast27.AST)]"
            ],
            "arguments": {
                "src": [
                    "str"
                ]
            }
        },
        "_fixup_ast_constants": {
            "name": "_fixup_ast_constants",
            "location": 3716,
            "return": [
                "Union[(ast.AST, ast3.AST, ast27.AST)]"
            ],
            "arguments": {
                "node": [
                    "Union[(ast.AST, ast3.AST, ast27.AST)]"
                ]
            }
        },
        "assert_equivalent": {
            "name": "assert_equivalent",
            "location": 3732,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dst": [
                    "str"
                ]
            }
        },
        "assert_stable": {
            "name": "assert_stable",
            "location": 3810,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dst": [
                    "str"
                ],
                "mode": [
                    "FileMode"
                ]
            }
        },
        "dump_to_file": {
            "name": "dump_to_file",
            "location": 3827,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "nullcontext": {
            "name": "nullcontext",
            "location": 3840,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {}
        },
        "diff": {
            "name": "diff",
            "location": 3848,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ],
                "a_name": [
                    "str"
                ],
                "b_name": [
                    "str"
                ]
            }
        },
        "cancel": {
            "name": "cancel",
            "location": 3859,
            "return": [
                "None"
            ],
            "arguments": {
                "tasks": [
                    "Iterable['asyncio.Task[Any]']"
                ]
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 3866,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "sub_twice": {
            "name": "sub_twice",
            "location": 3892,
            "return": [
                "str"
            ],
            "arguments": {
                "regex": [
                    "Pattern[str]"
                ],
                "replacement": [
                    "str"
                ],
                "original": [
                    "str"
                ]
            }
        },
        "re_compile_maybe_verbose": {
            "name": "re_compile_maybe_verbose",
            "location": 3901,
            "return": [
                "Pattern[str]"
            ],
            "arguments": {
                "regex": [
                    "str"
                ]
            }
        },
        "enumerate_reversed": {
            "name": "enumerate_reversed",
            "location": 3912,
            "return": [
                "Iterator[Tuple[(Index, T)]]"
            ],
            "arguments": {
                "sequence": [
                    "Sequence[T]"
                ]
            }
        },
        "enumerate_with_length": {
            "name": "enumerate_with_length",
            "location": 3920,
            "return": [
                "Iterator[Tuple[(Index, Leaf, int)]]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "reversed": [
                    "bool"
                ]
            }
        },
        "is_line_short_enough": {
            "name": "is_line_short_enough",
            "location": 3942,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "can_be_split": {
            "name": "can_be_split",
            "location": 3956,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ]
            }
        },
        "can_omit_invisible_parens": {
            "name": "can_omit_invisible_parens",
            "location": 3992,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "line_length": [
                    "int"
                ]
            }
        },
        "get_cache_file": {
            "name": "get_cache_file",
            "location": 4081,
            "return": [
                "Path"
            ],
            "arguments": {
                "mode": [
                    "FileMode"
                ]
            }
        },
        "read_cache": {
            "name": "read_cache",
            "location": 4085,
            "return": [
                "Cache"
            ],
            "arguments": {
                "mode": [
                    "FileMode"
                ]
            }
        },
        "get_cache_info": {
            "name": "get_cache_info",
            "location": 4103,
            "return": [
                "CacheInfo"
            ],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "filter_cached": {
            "name": "filter_cached",
            "location": 4109,
            "return": [
                "Tuple[(Set[Path], Set[Path])]"
            ],
            "arguments": {
                "cache": [
                    "Cache"
                ],
                "sources": [
                    "Iterable[Path]"
                ]
            }
        },
        "write_cache": {
            "name": "write_cache",
            "location": 4125,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "Cache"
                ],
                "sources": [
                    "Iterable[Path]"
                ],
                "mode": [
                    "FileMode"
                ]
            }
        },
        "patch_click": {
            "name": "patch_click",
            "location": 4138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_main": {
            "name": "patched_main",
            "location": 4160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WriteBack.from_configuration": {
            "name": "from_configuration",
            "location": 106,
            "return": [
                "'WriteBack'"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TargetVersion.is_python2": {
            "name": "is_python2",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMode.get_cache_key": {
            "name": "get_cache_key",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visitor.visit": {
            "name": "visit",
            "location": 870,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "Visitor.visit_default": {
            "name": "visit_default",
            "location": 894,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 905,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "DebugVisitor.show": {
            "name": "show",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "code": [
                    "Union[(str, Leaf, Node)]"
                ]
            }
        },
        "BracketTracker.mark": {
            "name": "mark",
            "location": 1060,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.any_open_brackets": {
            "name": "any_open_brackets",
            "location": 1100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BracketTracker.max_delimiter_priority": {
            "name": "max_delimiter_priority",
            "location": 1104,
            "return": [
                "Priority"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "Iterable[LeafID]"
                ]
            }
        },
        "BracketTracker.delimiter_count_with_priority": {
            "name": "delimiter_count_with_priority",
            "location": 1112,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "priority": [
                    "Priority"
                ]
            }
        },
        "BracketTracker.maybe_increment_for_loop_variable": {
            "name": "maybe_increment_for_loop_variable",
            "location": 1123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.maybe_decrement_after_for_loop_variable": {
            "name": "maybe_decrement_after_for_loop_variable",
            "location": 1136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.maybe_increment_lambda_arguments": {
            "name": "maybe_increment_lambda_arguments",
            "location": 1150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.maybe_decrement_after_lambda_arguments": {
            "name": "maybe_decrement_after_lambda_arguments",
            "location": 1163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "BracketTracker.get_open_lsqb": {
            "name": "get_open_lsqb",
            "location": 1176,
            "return": [
                "Optional[Leaf]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.append": {
            "name": "append",
            "location": 1193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ],
                "preformatted": [
                    "bool"
                ]
            }
        },
        "Line.append_safe": {
            "name": "append_safe",
            "location": 1221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ],
                "preformatted": [
                    "bool"
                ]
            }
        },
        "Line.is_comment": {
            "name": "is_comment",
            "location": 1239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_decorator": {
            "name": "is_decorator",
            "location": 1244,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_import": {
            "name": "is_import",
            "location": 1249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class": {
            "name": "is_class",
            "location": 1254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_stub_class": {
            "name": "is_stub_class",
            "location": 1263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_collection_with_optional_trailing_comma": {
            "name": "is_collection_with_optional_trailing_comma",
            "location": 1270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_def": {
            "name": "is_def",
            "location": 1333,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class_paren_empty": {
            "name": "is_class_paren_empty",
            "location": 1352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_triple_quoted_string": {
            "name": "is_triple_quoted_string",
            "location": 1368,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_standalone_comments": {
            "name": "contains_standalone_comments",
            "location": 1376,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "depth_limit": [
                    "int"
                ]
            }
        },
        "Line.contains_uncollapsable_type_comments": {
            "name": "contains_uncollapsable_type_comments",
            "location": 1384,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_unsplittable_type_ignore": {
            "name": "contains_unsplittable_type_ignore",
            "location": 1420,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_multiline_strings": {
            "name": "contains_multiline_strings",
            "location": 1451,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.maybe_remove_trailing_comma": {
            "name": "maybe_remove_trailing_comma",
            "location": 1458,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "closing": [
                    "Leaf"
                ]
            }
        },
        "Line.append_comment": {
            "name": "append_comment",
            "location": 1495,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "Leaf"
                ]
            }
        },
        "Line.comments_after": {
            "name": "comments_after",
            "location": 1532,
            "return": [
                "List[Leaf]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "Line.remove_trailing_comma": {
            "name": "remove_trailing_comma",
            "location": 1536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_complex_subscript": {
            "name": "is_complex_subscript",
            "location": 1544,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 1562,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__bool__": {
            "name": "__bool__",
            "location": 1577,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyLineTracker.maybe_empty_lines": {
            "name": "maybe_empty_lines",
            "location": 1597,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "current_line": [
                    "Line"
                ]
            }
        },
        "EmptyLineTracker._maybe_empty_lines": {
            "name": "_maybe_empty_lines",
            "location": 1615,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "current_line": [
                    "Line"
                ]
            }
        },
        "EmptyLineTracker._maybe_empty_lines_for_class_or_def": {
            "name": "_maybe_empty_lines_for_class_or_def",
            "location": 1654,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "current_line": [
                    "Line"
                ],
                "before": [
                    "int"
                ]
            }
        },
        "LineGenerator.line": {
            "name": "line",
            "location": 1712,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "LineGenerator.visit_default": {
            "name": "visit_default",
            "location": 1728,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "LineGenerator.visit_INDENT": {
            "name": "visit_INDENT",
            "location": 1758,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_DEDENT": {
            "name": "visit_DEDENT",
            "location": 1764,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_stmt": {
            "name": "visit_stmt",
            "location": 1778,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ],
                "keywords": [
                    "Set[str]"
                ],
                "parens": [
                    "Set[str]"
                ]
            }
        },
        "LineGenerator.visit_suite": {
            "name": "visit_suite",
            "location": 1799,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_simple_stmt": {
            "name": "visit_simple_stmt",
            "location": 1806,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_async_stmt": {
            "name": "visit_async_stmt",
            "location": 1822,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_decorators": {
            "name": "visit_decorators",
            "location": 1837,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.visit_SEMI": {
            "name": "visit_SEMI",
            "location": 1843,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_ENDMARKER": {
            "name": "visit_ENDMARKER",
            "location": 1847,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_STANDALONE_COMMENT": {
            "name": "visit_STANDALONE_COMMENT",
            "location": 1852,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "LineGenerator.visit_factor": {
            "name": "visit_factor",
            "location": 1857,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "LineGenerator.__post_init__": {
            "name": "__post_init__",
            "location": 1874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dont_increase_indentation.split_wrapper": {
            "name": "split_wrapper",
            "location": 2681,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        },
        "delimiter_split.append_to_line": {
            "name": "append_to_line",
            "location": 2715,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "standalone_comment_split.append_to_line": {
            "name": "append_to_line",
            "location": 2769,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "leaf": [
                    "Leaf"
                ]
            }
        },
        "get_future_imports.get_imports_from_children": {
            "name": "get_imports_from_children",
            "location": 3468,
            "return": [
                "Generator[(str, None, None)]"
            ],
            "arguments": {
                "children": [
                    "List[LN]"
                ]
            }
        },
        "Report.done": {
            "name": "done",
            "location": 3623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Path"
                ],
                "changed": [
                    "Changed"
                ]
            }
        },
        "Report.failed": {
            "name": "failed",
            "location": 3639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Path"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Report.path_ignored": {
            "name": "path_ignored",
            "location": 3644,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Report.return_code": {
            "name": "return_code",
            "location": 3649,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 3667,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "assert_equivalent._v": {
            "name": "_v",
            "location": 3735,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "node": [
                    "Union[(ast.AST, ast3.AST, ast27.AST)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "split_line.rhs": {
            "name": "rhs",
            "location": 2437,
            "return": [
                "Iterator[Line]"
            ],
            "arguments": {
                "line": [
                    "Line"
                ],
                "features": [
                    "Collection[Feature]"
                ]
            }
        }
    },
    "grey-master/blackd.py": {
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "bind_host": [
                    "str"
                ],
                "bind_port": [
                    "int"
                ]
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 58,
            "return": [
                "web.Application"
            ],
            "arguments": {}
        },
        "parse_python_variant_header": {
            "name": "parse_python_variant_header",
            "location": 152,
            "return": [
                "Tuple[(bool, Set[black.TargetVersion])]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "patched_main": {
            "name": "patched_main",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grey-master/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "grey-master/blib2to3/pygram.py": {
        "initialize": {
            "name": "initialize",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "cache_dir": [
                    "Union[(str, 'os.PathLike[str]', None)]"
                ]
            }
        },
        "Symbols.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Grammar"
                ]
            }
        }
    },
    "grey-master/blib2to3/pytree.py": {
        "type_repr": {
            "name": "type_repr",
            "location": 42,
            "return": [
                "Union[(Text, int)]"
            ],
            "arguments": {
                "type_num": [
                    "int"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 478,
            "return": [
                "NL"
            ],
            "arguments": {
                "gr": [
                    "Grammar"
                ],
                "raw_node": [
                    "RawNode"
                ]
            }
        },
        "generate_matches": {
            "name": "generate_matches",
            "location": 951,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "patterns": [
                    "List[BasePattern]"
                ],
                "nodes": [
                    "List[NL]"
                ]
            }
        },
        "Base.__new__": {
            "name": "__new__",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "Base.prefix": {
            "name": "prefix",
            "location": 99,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base._eq": {
            "name": "_eq",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "_P"
                ],
                "other": [
                    "_P"
                ]
            }
        },
        "Base.clone": {
            "name": "clone",
            "location": 113,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "Base.post_order": {
            "name": "post_order",
            "location": 121,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.pre_order": {
            "name": "pre_order",
            "location": 129,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.replace": {
            "name": "replace",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new": [
                    "Union[(NL, List[NL])]"
                ]
            }
        },
        "Base.get_lineno": {
            "name": "get_lineno",
            "location": 161,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.changed": {
            "name": "changed",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.remove": {
            "name": "remove",
            "location": 177,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.next_sibling": {
            "name": "next_sibling",
            "location": 193,
            "return": [
                "Optional[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.prev_sibling": {
            "name": "prev_sibling",
            "location": 207,
            "return": [
                "Optional[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.leaves": {
            "name": "leaves",
            "location": 220,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.depth": {
            "name": "depth",
            "location": 224,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_suffix": {
            "name": "get_suffix",
            "location": 229,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "children": [
                    "List[NL]"
                ],
                "context": [
                    "Optional[Any]"
                ],
                "prefix": [
                    "Optional[Text]"
                ],
                "fixers_applied": [
                    "Optional[List[Any]]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 278,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 287,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._eq": {
            "name": "_eq",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.clone": {
            "name": "clone",
            "location": 299,
            "return": [
                "'Node'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.post_order": {
            "name": "post_order",
            "location": 308,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.pre_order": {
            "name": "pre_order",
            "location": 314,
            "return": [
                "Iterator[NL]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.prefix": {
            "name": "prefix",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Node.set_child": {
            "name": "set_child",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "child": [
                    "NL"
                ]
            }
        },
        "Node.insert_child": {
            "name": "insert_child",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "child": [
                    "NL"
                ]
            }
        },
        "Node.append_child": {
            "name": "append_child",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "NL"
                ]
            }
        },
        "Node.invalidate_sibling_maps": {
            "name": "invalidate_sibling_maps",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.update_sibling_maps": {
            "name": "update_sibling_maps",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Text"
                ],
                "context": [
                    "Optional[Context]"
                ],
                "prefix": [
                    "Optional[Text]"
                ],
                "fixers_applied": [
                    "List[Any]"
                ]
            }
        },
        "Leaf.__repr__": {
            "name": "__repr__",
            "location": 421,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__str__": {
            "name": "__str__",
            "location": 432,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf._eq": {
            "name": "_eq",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Leaf.clone": {
            "name": "clone",
            "location": 444,
            "return": [
                "'Leaf'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.leaves": {
            "name": "leaves",
            "location": 454,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.post_order": {
            "name": "post_order",
            "location": 457,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.pre_order": {
            "name": "pre_order",
            "location": 461,
            "return": [
                "Iterator['Leaf']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.prefix": {
            "name": "prefix",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "BasePattern.__new__": {
            "name": "__new__",
            "location": 523,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BasePattern.__repr__": {
            "name": "__repr__",
            "location": 528,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern._submatch": {
            "name": "_submatch",
            "location": 535,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "BasePattern.optimize": {
            "name": "optimize",
            "location": 538,
            "return": [
                "'BasePattern'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.match": {
            "name": "match",
            "location": 546,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "NL"
                ],
                "results": [
                    "Optional[_Results]"
                ]
            }
        },
        "BasePattern.match_seq": {
            "name": "match_seq",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[NL]"
                ],
                "results": [
                    "Optional[_Results]"
                ]
            }
        },
        "BasePattern.generate_matches": {
            "name": "generate_matches",
            "location": 582,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[NL]"
                ]
            }
        },
        "LeafPattern.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[int]"
                ],
                "content": [
                    "Optional[Text]"
                ],
                "name": [
                    "Optional[Text]"
                ]
            }
        },
        "LeafPattern.match": {
            "name": "match",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "NL"
                ],
                "results": []
            }
        },
        "LeafPattern._submatch": {
            "name": "_submatch",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "NodePattern.__init__": {
            "name": "__init__",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[int]"
                ],
                "content": [
                    "Optional[Iterable[Text]]"
                ],
                "name": [
                    "Optional[Text]"
                ]
            }
        },
        "NodePattern._submatch": {
            "name": "_submatch",
            "location": 679,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.__init__": {
            "name": "__init__",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[Text]"
                ],
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ],
                "name": [
                    "Optional[Text]"
                ]
            }
        },
        "WildcardPattern.optimize": {
            "name": "optimize",
            "location": 768,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WildcardPattern.match": {
            "name": "match",
            "location": 796,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.match_seq": {
            "name": "match_seq",
            "location": 800,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "WildcardPattern.generate_matches": {
            "name": "generate_matches",
            "location": 811,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._iterative_matches": {
            "name": "_iterative_matches",
            "location": 856,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._bare_name_matches": {
            "name": "_bare_name_matches",
            "location": 885,
            "return": [
                "Tuple[(int, _Results)]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._recursive_matches": {
            "name": "_recursive_matches",
            "location": 902,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "count": []
            }
        },
        "NegatedPattern.__init__": {
            "name": "__init__",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[Any]"
                ]
            }
        },
        "NegatedPattern.match": {
            "name": "match",
            "location": 931,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "NegatedPattern.match_seq": {
            "name": "match_seq",
            "location": 935,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "NegatedPattern.generate_matches": {
            "name": "generate_matches",
            "location": 939,
            "return": [
                "Iterator[Tuple[(int, _Results)]]"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        }
    },
    "grey-master/blib2to3/__init__.py": {},
    "grey-master/blib2to3/pgen2/conv.py": {
        "Converter.run": {
            "name": "run",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "graminit_h": [],
                "graminit_c": []
            }
        },
        "Converter.parse_graminit_h": {
            "name": "parse_graminit_h",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.parse_graminit_c": {
            "name": "parse_graminit_c",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.finish_off": {
            "name": "finish_off",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grey-master/blib2to3/pgen2/driver.py": {
        "_generate_pickle_name": {
            "name": "_generate_pickle_name",
            "location": 172,
            "return": [
                "Text"
            ],
            "arguments": {
                "gt": [
                    "Path"
                ],
                "cache_dir": [
                    "Optional[Path]"
                ]
            }
        },
        "load_grammar": {
            "name": "load_grammar",
            "location": 183,
            "return": [
                "Grammar"
            ],
            "arguments": {
                "gt": [
                    "Text"
                ],
                "gp": [
                    "Optional[Text]"
                ],
                "save": [
                    "bool"
                ],
                "force": [
                    "bool"
                ],
                "logger": [
                    "Optional[Logger]"
                ]
            }
        },
        "_newer": {
            "name": "_newer",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Text"
                ],
                "b": [
                    "Text"
                ]
            }
        },
        "load_packaged_grammar": {
            "name": "load_packaged_grammar",
            "location": 218,
            "return": [
                "grammar.Grammar"
            ],
            "arguments": {
                "package": [
                    "str"
                ],
                "grammar_source": [
                    "Text"
                ],
                "cache_dir": [
                    "Optional[Path]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Grammar"
                ],
                "convert": [
                    "Optional[_Convert]"
                ],
                "logger": [
                    "Optional[Logger]"
                ]
            }
        },
        "Driver.parse_tokens": {
            "name": "parse_tokens",
            "location": 60,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Iterable[Any]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_stream_raw": {
            "name": "parse_stream_raw",
            "location": 121,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[Text]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_stream": {
            "name": "parse_stream",
            "location": 126,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[Text]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_file": {
            "name": "parse_file",
            "location": 130,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ],
                "encoding": [
                    "Optional[Text]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver.parse_string": {
            "name": "parse_string",
            "location": 137,
            "return": [
                "NL"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Text"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Driver._partially_consume_prefix": {
            "name": "_partially_consume_prefix",
            "location": 144,
            "return": [
                "Tuple[(Text, Text)]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Text"
                ],
                "column": [
                    "int"
                ]
            }
        }
    },
    "grey-master/blib2to3/pgen2/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.dump": {
            "name": "dump",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ]
            }
        },
        "Grammar._update": {
            "name": "_update",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Grammar.load": {
            "name": "load",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ]
            }
        },
        "Grammar.loads": {
            "name": "loads",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pkl": [
                    "bytes"
                ]
            }
        },
        "Grammar.copy": {
            "name": "copy",
            "location": 129,
            "return": [
                "_P"
            ],
            "arguments": {
                "self": [
                    "_P"
                ]
            }
        },
        "Grammar.report": {
            "name": "report",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grey-master/blib2to3/pgen2/literals.py": {
        "escape": {
            "name": "escape",
            "location": 25,
            "return": [
                "Text"
            ],
            "arguments": {
                "m": [
                    "Match[Text]"
                ]
            }
        },
        "evalString": {
            "name": "evalString",
            "location": 47,
            "return": [
                "Text"
            ],
            "arguments": {
                "s": [
                    "Text"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grey-master/blib2to3/pgen2/parse.py": {
        "lam_sub": {
            "name": "lam_sub",
            "location": 37,
            "return": [
                "NL"
            ],
            "arguments": {
                "grammar": [
                    "Grammar"
                ],
                "node": [
                    "RawNode"
                ]
            }
        },
        "ParseError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Text"
                ],
                "type": [
                    "Optional[int]"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Grammar"
                ],
                "convert": [
                    "Optional[Convert]"
                ]
            }
        },
        "Parser.setup": {
            "name": "setup",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[int]"
                ]
            }
        },
        "Parser.addtoken": {
            "name": "addtoken",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.classify": {
            "name": "classify",
            "location": 190,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.shift": {
            "name": "shift",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Text]"
                ],
                "newstate": [
                    "int"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.push": {
            "name": "push",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "newdfa": [
                    "DFAS"
                ],
                "newstate": [
                    "int"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "Parser.pop": {
            "name": "pop",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grey-master/blib2to3/pgen2/pgen.py": {
        "generate_grammar": {
            "name": "generate_grammar",
            "location": 428,
            "return": [
                "PgenGrammar"
            ],
            "arguments": {
                "filename": [
                    "Path"
                ]
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Path"
                ],
                "stream": [
                    "Optional[IO[Text]]"
                ]
            }
        },
        "ParserGenerator.make_grammar": {
            "name": "make_grammar",
            "location": 55,
            "return": [
                "PgenGrammar"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_first": {
            "name": "make_first",
            "location": 80,
            "return": [
                "Dict[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "PgenGrammar"
                ],
                "name": [
                    "Text"
                ]
            }
        },
        "ParserGenerator.make_label": {
            "name": "make_label",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "PgenGrammar"
                ],
                "label": [
                    "Text"
                ]
            }
        },
        "ParserGenerator.addfirstsets": {
            "name": "addfirstsets",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.calcfirst": {
            "name": "calcfirst",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text"
                ]
            }
        },
        "ParserGenerator.parse": {
            "name": "parse",
            "location": 177,
            "return": [
                "Tuple[(Dict[(Text, List['DFAState'])], Text)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_dfa": {
            "name": "make_dfa",
            "location": 202,
            "return": [
                "List['DFAState']"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "'NFAState'"
                ],
                "finish": [
                    "'NFAState'"
                ]
            }
        },
        "ParserGenerator.dump_nfa": {
            "name": "dump_nfa",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text"
                ],
                "start": [
                    "'NFAState'"
                ],
                "finish": [
                    "'NFAState'"
                ]
            }
        },
        "ParserGenerator.dump_dfa": {
            "name": "dump_dfa",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text"
                ],
                "dfa": [
                    "Sequence['DFAState']"
                ]
            }
        },
        "ParserGenerator.simplify_dfa": {
            "name": "simplify_dfa",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dfa": [
                    "List['DFAState']"
                ]
            }
        },
        "ParserGenerator.parse_rhs": {
            "name": "parse_rhs",
            "location": 285,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_alt": {
            "name": "parse_alt",
            "location": 302,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_item": {
            "name": "parse_item",
            "location": 311,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_atom": {
            "name": "parse_atom",
            "location": 331,
            "return": [
                "Tuple[('NFAState', 'NFAState')]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.expect": {
            "name": "expect",
            "location": 350,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int"
                ],
                "value": [
                    "Optional[Any]"
                ]
            }
        },
        "ParserGenerator.gettoken": {
            "name": "gettoken",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.raise_error": {
            "name": "raise_error",
            "location": 366,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "NFAState.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NFAState.addarc": {
            "name": "addarc",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next": [
                    "'NFAState'"
                ],
                "label": [
                    "Optional[Text]"
                ]
            }
        },
        "DFAState.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nfaset": [
                    "Dict[(NFAState, Any)]"
                ],
                "final": [
                    "NFAState"
                ]
            }
        },
        "DFAState.addarc": {
            "name": "addarc",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next": [
                    "'DFAState'"
                ],
                "label": [
                    "Text"
                ]
            }
        },
        "DFAState.unifystate": {
            "name": "unifystate",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "'DFAState'"
                ],
                "new": [
                    "'DFAState'"
                ]
            }
        },
        "DFAState.__eq__": {
            "name": "__eq__",
            "location": 411,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "ParserGenerator.make_dfa.closure": {
            "name": "closure",
            "location": 210,
            "return": [
                "Dict[(NFAState, int)]"
            ],
            "arguments": {
                "state": [
                    "NFAState"
                ]
            }
        },
        "ParserGenerator.make_dfa.addclosure": {
            "name": "addclosure",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "NFAState"
                ],
                "base": [
                    "Dict[(NFAState, int)]"
                ]
            }
        }
    },
    "grey-master/blib2to3/pgen2/token.py": {
        "ISTERMINAL": {
            "name": "ISTERMINAL",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "ISNONTERMINAL": {
            "name": "ISNONTERMINAL",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "ISEOF": {
            "name": "ISEOF",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        }
    },
    "grey-master/blib2to3/pgen2/tokenize.py": {
        "group": {
            "name": "group",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "any": {
            "name": "any",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "maybe": {
            "name": "maybe",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "_combinations": {
            "name": "_combinations",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "printtoken": {
            "name": "printtoken",
            "location": 186,
            "return": [],
            "arguments": {
                "type": [],
                "token": [],
                "xxx_todo_changeme": [],
                "xxx_todo_changeme1": [],
                "line": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "readline": [
                    "Callable[([], Text)]"
                ],
                "tokeneater": [
                    "TokenEater"
                ]
            }
        },
        "tokenize_loop": {
            "name": "tokenize_loop",
            "location": 218,
            "return": [],
            "arguments": {
                "readline": [],
                "tokeneater": []
            }
        },
        "_get_normal_name": {
            "name": "_get_normal_name",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "orig_enc": [
                    "str"
                ]
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 307,
            "return": [
                "Tuple[(str, List[bytes])]"
            ],
            "arguments": {
                "readline": [
                    "Callable[([], bytes)]"
                ]
            }
        },
        "untokenize": {
            "name": "untokenize",
            "location": 382,
            "return": [
                "Text"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[TokenInfo]"
                ]
            }
        },
        "generate_tokens": {
            "name": "generate_tokens",
            "location": 404,
            "return": [
                "Iterator[GoodTokenInfo]"
            ],
            "arguments": {
                "readline": [
                    "Callable[([], Text)]"
                ],
                "grammar": [
                    "Optional[Grammar]"
                ]
            }
        },
        "Untokenizer.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Untokenizer.add_whitespace": {
            "name": "add_whitespace",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Coord"
                ]
            }
        },
        "Untokenizer.untokenize": {
            "name": "untokenize",
            "location": 245,
            "return": [
                "Text"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Iterable[TokenInfo]"
                ]
            }
        },
        "Untokenizer.compat": {
            "name": "compat",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Tuple[(int, Text)]"
                ],
                "iterable": [
                    "Iterable[TokenInfo]"
                ]
            }
        },
        "detect_encoding.read_or_stop": {
            "name": "read_or_stop",
            "location": 329,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "detect_encoding.find_cookie": {
            "name": "find_cookie",
            "location": 335,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "line": [
                    "bytes"
                ]
            }
        }
    },
    "grey-master/blib2to3/pgen2/__init__.py": {},
    "grey-master/profiling/dict_big.py": {},
    "grey-master/profiling/dict_huge.py": {},
    "grey-master/profiling/list_big.py": {},
    "grey-master/profiling/list_huge.py": {},
    "grey-master/profiling/mix_big.py": {},
    "grey-master/profiling/mix_huge.py": {},
    "grey-master/profiling/mix_small.py": {},
    "grey-master/tests/test_black.py": {
        "dump_to_stderr": {
            "name": "dump_to_stderr",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_data": {
            "name": "read_data",
            "location": 51,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "cache_dir": {
            "name": "cache_dir",
            "location": 75,
            "return": [
                "Iterator[Path]"
            ],
            "arguments": {
                "exists": [
                    "bool"
                ]
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 85,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {
                "close": [
                    "bool"
                ]
            }
        },
        "skip_if_exception": {
            "name": "skip_if_exception",
            "location": 98,
            "return": [
                "Iterator[None]"
            ],
            "arguments": {
                "e": [
                    "str"
                ]
            }
        },
        "BlackRunner.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackRunner.isolation": {
            "name": "isolation",
            "location": 121,
            "return": [
                "Generator[(BinaryIO, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.assertFormatEqual": {
            "name": "assertFormatEqual",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str"
                ],
                "actual": [
                    "str"
                ]
            }
        },
        "BlackTestCase.invokeBlack": {
            "name": "invokeBlack",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ],
                "exit_code": [
                    "int"
                ],
                "ignore_config": [
                    "bool"
                ]
            }
        },
        "BlackTestCase.checkSourceFile": {
            "name": "checkSourceFile",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_empty": {
            "name": "test_empty",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_ff": {
            "name": "test_empty_ff",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_self": {
            "name": "test_self",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_black": {
            "name": "test_black",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pygram": {
            "name": "test_pygram",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pytree": {
            "name": "test_pytree",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_conv": {
            "name": "test_conv",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_driver": {
            "name": "test_driver",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_grammar": {
            "name": "test_grammar",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_literals": {
            "name": "test_literals",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_parse": {
            "name": "test_parse",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pgen": {
            "name": "test_pgen",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_tokenize": {
            "name": "test_tokenize",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_token": {
            "name": "test_token",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_setup": {
            "name": "test_setup",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping": {
            "name": "test_piping",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping_diff": {
            "name": "test_piping_diff",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_function": {
            "name": "test_function",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_function2": {
            "name": "test_function2",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_function_trailing_comma": {
            "name": "test_function_trailing_comma",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression": {
            "name": "test_expression",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pep_572": {
            "name": "test_pep_572",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pep_572_version_detection": {
            "name": "test_pep_572_version_detection",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression_ff": {
            "name": "test_expression_ff",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression_diff": {
            "name": "test_expression_diff",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fstring": {
            "name": "test_fstring",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pep_570": {
            "name": "test_pep_570",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_detect_pos_only_arguments": {
            "name": "test_detect_pos_only_arguments",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_string_quotes": {
            "name": "test_string_quotes",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_slices": {
            "name": "test_slices",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments": {
            "name": "test_comments",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments2": {
            "name": "test_comments2",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments3": {
            "name": "test_comments3",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments4": {
            "name": "test_comments4",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments5": {
            "name": "test_comments5",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments6": {
            "name": "test_comments6",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments7": {
            "name": "test_comments7",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comment_after_escaped_newline": {
            "name": "test_comment_after_escaped_newline",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cantfit": {
            "name": "test_cantfit",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_import_spacing": {
            "name": "test_import_spacing",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_composition": {
            "name": "test_composition",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_lines": {
            "name": "test_empty_lines",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_remove_parens": {
            "name": "test_remove_parens",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_string_prefixes": {
            "name": "test_string_prefixes",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_numeric_literals": {
            "name": "test_numeric_literals",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_numeric_literals_ignoring_underscores": {
            "name": "test_numeric_literals_ignoring_underscores",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_numeric_literals_py2": {
            "name": "test_numeric_literals_py2",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python2": {
            "name": "test_python2",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python2_print_function": {
            "name": "test_python2_print_function",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python2_unicode_literals": {
            "name": "test_python2_unicode_literals",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_stub": {
            "name": "test_stub",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_async_as_identifier": {
            "name": "test_async_as_identifier",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python37": {
            "name": "test_python37",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fmtonoff": {
            "name": "test_fmtonoff",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fmtonoff2": {
            "name": "test_fmtonoff2",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fmtonoff3": {
            "name": "test_fmtonoff3",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_remove_empty_parentheses_after_class": {
            "name": "test_remove_empty_parentheses_after_class",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_new_line_between_class_and_code": {
            "name": "test_new_line_between_class_and_code",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_bracket_match": {
            "name": "test_bracket_match",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_tuple_assign": {
            "name": "test_tuple_assign",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_beginning_backslash": {
            "name": "test_beginning_backslash",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_tab_comment_indentation": {
            "name": "test_tab_comment_indentation",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_verbose": {
            "name": "test_report_verbose",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_quiet": {
            "name": "test_report_quiet",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_normal": {
            "name": "test_report_normal",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_lib2to3_parse": {
            "name": "test_lib2to3_parse",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_features_used": {
            "name": "test_get_features_used",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_future_imports": {
            "name": "test_get_future_imports",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_debug_visitor": {
            "name": "test_debug_visitor",
            "location": 1045,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_format_file_contents": {
            "name": "test_format_file_contents",
            "location": 1069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_endmarker": {
            "name": "test_endmarker",
            "location": 1089,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_assertFormatEqual": {
            "name": "test_assertFormatEqual",
            "location": 1096,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cache_broken_file": {
            "name": "test_cache_broken_file",
            "location": 1115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cache_single_file_already_cached": {
            "name": "test_cache_single_file_already_cached",
            "location": 1129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cache_multiple_files": {
            "name": "test_cache_multiple_files",
            "location": 1141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_no_cache_when_writeback_diff": {
            "name": "test_no_cache_when_writeback_diff",
            "location": 1162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_no_cache_when_stdin": {
            "name": "test_no_cache_when_stdin",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_read_cache_no_cachefile": {
            "name": "test_read_cache_no_cachefile",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_write_cache_read_cache": {
            "name": "test_write_cache_read_cache",
            "location": 1187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_filter_cached": {
            "name": "test_filter_cached",
            "location": 1197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_write_cache_creates_directory_if_needed": {
            "name": "test_write_cache_creates_directory_if_needed",
            "location": 1213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_failed_formatting_does_not_get_cached": {
            "name": "test_failed_formatting_does_not_get_cached",
            "location": 1221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_write_cache_write_fail": {
            "name": "test_write_cache_write_fail",
            "location": 1237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_check_diff_use_together": {
            "name": "test_check_diff_use_together",
            "location": 1244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_no_files": {
            "name": "test_no_files",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_broken_symlink": {
            "name": "test_broken_symlink",
            "location": 1260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_read_cache_line_lengths": {
            "name": "test_read_cache_line_lengths",
            "location": 1269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_tricky_unicode_symbols": {
            "name": "test_tricky_unicode_symbols",
            "location": 1281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_single_file_force_pyi": {
            "name": "test_single_file_force_pyi",
            "location": 1288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_multi_file_force_pyi": {
            "name": "test_multi_file_force_pyi",
            "location": 1307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pipe_force_pyi": {
            "name": "test_pipe_force_pyi",
            "location": 1331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_single_file_force_py36": {
            "name": "test_single_file_force_py36",
            "location": 1340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_multi_file_force_py36": {
            "name": "test_multi_file_force_py36",
            "location": 1359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_collections": {
            "name": "test_collections",
            "location": 1383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pipe_force_py36": {
            "name": "test_pipe_force_py36",
            "location": 1390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_include_exclude": {
            "name": "test_include_exclude",
            "location": 1401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_gitignore_exclude": {
            "name": "test_gitignore_exclude",
            "location": 1420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_include": {
            "name": "test_empty_include",
            "location": 1441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_exclude": {
            "name": "test_empty_exclude",
            "location": 1471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_invalid_include_exclude": {
            "name": "test_invalid_include_exclude",
            "location": 1498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_preserves_line_endings": {
            "name": "test_preserves_line_endings",
            "location": 1502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_preserves_line_endings_via_stdin": {
            "name": "test_preserves_line_endings_via_stdin",
            "location": 1514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_assert_equivalent_different_asts": {
            "name": "test_assert_equivalent_different_asts",
            "location": 1527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_symlink_out_of_root_directory": {
            "name": "test_symlink_out_of_root_directory",
            "location": 1531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_shhh_click": {
            "name": "test_shhh_click",
            "location": 1572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_root_logger_not_used_directly": {
            "name": "test_root_logger_not_used_directly",
            "location": 1594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_blackd_main": {
            "name": "test_blackd_main",
            "location": 1610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_verbose.out": {
            "name": "out",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_report_verbose.err": {
            "name": "err",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_report_quiet.out": {
            "name": "out",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_report_quiet.err": {
            "name": "err",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_report_normal.out": {
            "name": "out",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_report_normal.err": {
            "name": "err",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_debug_visitor.out": {
            "name": "out",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_debug_visitor.err": {
            "name": "err",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_assertFormatEqual.out": {
            "name": "out",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_assertFormatEqual.err": {
            "name": "err",
            "location": 1103,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_root_logger_not_used_directly.fail": {
            "name": "fail",
            "location": 1595,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grey-master/tests/data/async_as_identifier.py": {},
    "grey-master/tests/data/beginning_backslash.py": {},
    "grey-master/tests/data/blackd_diff.py": {
        "abc": {
            "name": "abc",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/bracketmatch.py": {},
    "grey-master/tests/data/cantfit.py": {},
    "grey-master/tests/data/class_blank_parentheses.py": {
        "public_func_with_blank_parentheses": {
            "name": "public_func_with_blank_parentheses",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "class_under_the_func_with_blank_parentheses": {
            "name": "class_under_the_func_with_blank_parentheses",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "ClassWithSpaceParentheses.test_func": {
            "name": "test_func",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithEmptyFunc.func_with_blank_parentheses": {
            "name": "func_with_blank_parentheses",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "NormalClass.func_for_testing": {
            "name": "func_for_testing",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        }
    },
    "grey-master/tests/data/class_methods_new_line.py": {
        "ClassWithInit.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithTheDocstringAndInit.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVars.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsAndDocstring.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInit.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVars.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstring.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitWithInner.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsWithInner.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsAndDocstringWithInner.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitWithInner.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsWithInner.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstringWithInner.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstringWithInner2.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassSimplestWithInnerWithDocstring.Inner.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grey-master/tests/data/collections.py": {},
    "grey-master/tests/data/comments.py": {
        "function": {
            "name": "function",
            "location": 27,
            "return": [],
            "arguments": {
                "default": []
            }
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grey-master/tests/data/comments2.py": {
        "inline_comments_in_brackets_ruin_everything": {
            "name": "inline_comments_in_brackets_ruin_everything",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "Test._init_host": {
            "name": "_init_host",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed": []
            }
        }
    },
    "grey-master/tests/data/comments3.py": {
        "func": {
            "name": "func",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/comments4.py": {
        "foo": {
            "name": "foo",
            "location": 69,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "foo2": {
            "name": "foo2",
            "location": 85,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "foo3": {
            "name": "foo3",
            "location": 96,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "C.test_fails_invalid_post_data": {
            "name": "test_fails_invalid_post_data",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "pyramid_config": [],
                "db_request": [],
                "post_data": [],
                "message": []
            }
        }
    },
    "grey-master/tests/data/comments5.py": {
        "wat": {
            "name": "wat",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "decorated1": {
            "name": "decorated1",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/comments6.py": {
        "f": {
            "name": "f",
            "location": 80,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "func": {
            "name": "func",
            "location": 86,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "grey-master/tests/data/comments7.py": {
        "func": {
            "name": "func",
            "location": 95,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/comment_after_escaped_newline.py": {
        "bob": {
            "name": "bob",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "bobtwo": {
            "name": "bobtwo",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/composition.py": {
        "C.test": {
            "name": "test",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.omitting_trailers": {
            "name": "omitting_trailers",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.easy_asserts": {
            "name": "easy_asserts",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.tricky_asserts": {
            "name": "tricky_asserts",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grey-master/tests/data/debug_visitor.py": {
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 5,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "LN"
                ]
            }
        },
        "DebugVisitor.show": {
            "name": "show",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "code": [
                    "str"
                ]
            }
        }
    },
    "grey-master/tests/data/empty_lines.py": {
        "f": {
            "name": "f",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 151,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/expression.py": {
        "gen": {
            "name": "gen",
            "location": 475,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/fmtonoff.py": {
        "func_no_args": {
            "name": "func_no_args",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "function_signature_stress_test": {
            "name": "function_signature_stress_test",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "int"
                ],
                "no_annotation": [],
                "text": [
                    "str"
                ]
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 231,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces_types": {
            "name": "spaces_types",
            "location": 236,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "tuple"
                ],
                "c": [
                    "list"
                ],
                "d": [
                    "dict"
                ],
                "e": [
                    "bool"
                ],
                "f": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "h": [
                    "str"
                ],
                "i": [
                    "str"
                ]
            }
        },
        "spaces2": {
            "name": "spaces2",
            "location": 250,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "subscriptlist": {
            "name": "subscriptlist",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "import_as_names": {
            "name": "import_as_names",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "testlist_star_expr": {
            "name": "testlist_star_expr",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "yield_expr": {
            "name": "yield_expr",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "example": {
            "name": "example",
            "location": 297,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "off_and_on_without_data": {
            "name": "off_and_on_without_data",
            "location": 308,
            "return": [],
            "arguments": {}
        },
        "on_and_off_broken": {
            "name": "on_and_off_broken",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "long_lines": {
            "name": "long_lines",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "single_literal_yapf_disable": {
            "name": "single_literal_yapf_disable",
            "location": 376,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/fmtonoff2.py": {
        "test_fader": {
            "name": "test_fader",
            "location": 18,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "check_fader": {
            "name": "check_fader",
            "location": 21,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "verify_fader": {
            "name": "verify_fader",
            "location": 29,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "test_calculate_fades": {
            "name": "test_calculate_fades",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/fmtonoff3.py": {},
    "grey-master/tests/data/force_py36.py": {
        "long_function_name": {
            "name": "long_function_name",
            "location": 7,
            "return": [],
            "arguments": {
                "argument_one": [],
                "argument_two": [],
                "argument_three": [],
                "argument_four": [],
                "argument_five": [],
                "argument_six": []
            }
        }
    },
    "grey-master/tests/data/force_pyi.py": {
        "f": {
            "name": "f",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/fstring.py": {},
    "grey-master/tests/data/function.py": {
        "func_no_args": {
            "name": "func_no_args",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "function_signature_stress_test": {
            "name": "function_signature_stress_test",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "int"
                ],
                "no_annotation": [],
                "text": [
                    "str"
                ]
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 146,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces_types": {
            "name": "spaces_types",
            "location": 151,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "tuple"
                ],
                "c": [
                    "list"
                ],
                "d": [
                    "dict"
                ],
                "e": [
                    "bool"
                ],
                "f": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "h": [
                    "str"
                ],
                "i": [
                    "str"
                ]
            }
        },
        "spaces2": {
            "name": "spaces2",
            "location": 165,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "example": {
            "name": "example",
            "location": 169,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "long_lines": {
            "name": "long_lines",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "trailing_comma": {
            "name": "trailing_comma",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "f": {
            "name": "f",
            "location": 233,
            "return": [
                "A"
            ],
            "arguments": {
                "a": []
            }
        },
        "__await__": {
            "name": "__await__",
            "location": 243,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/function2.py": {
        "f": {
            "name": "f",
            "location": 28,
            "return": [
                "A"
            ],
            "arguments": {
                "a": []
            }
        },
        "g": {
            "name": "g",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "h": {
            "name": "h",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "g.inner": {
            "name": "inner",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "h.inner": {
            "name": "inner",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/function_trailing_comma.py": {
        "f": {
            "name": "f",
            "location": 18,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "xxxxxxxxxxxxxxxxxxxxxxxxxxxx": {
            "name": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            "location": 22,
            "return": [
                "Set['xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx']"
            ],
            "arguments": {}
        }
    },
    "grey-master/tests/data/import_spacing.py": {},
    "grey-master/tests/data/numeric_literals.py": {},
    "grey-master/tests/data/numeric_literals_py2.py": {},
    "grey-master/tests/data/numeric_literals_skip_underscores.py": {},
    "grey-master/tests/data/pep_570.py": {
        "positional_only_arg": {
            "name": "positional_only_arg",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "all_markers": {
            "name": "all_markers",
            "location": 5,
            "return": [],
            "arguments": {
                "c": [],
                "d": []
            }
        },
        "all_markers_with_args_and_kwargs": {
            "name": "all_markers_with_args_and_kwargs",
            "location": 9,
            "return": [],
            "arguments": {
                "c_long_one": [],
                "d_long_one": []
            }
        },
        "all_markers_with_defaults": {
            "name": "all_markers_with_defaults",
            "location": 23,
            "return": [],
            "arguments": {
                "c": [],
                "d": []
            }
        },
        "long_one_with_long_parameter_names": {
            "name": "long_one_with_long_parameter_names",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/pep_572.py": {
        "foo": {
            "name": "foo",
            "location": 16,
            "return": [],
            "arguments": {
                "answer": [
                    "(p := 42)"
                ]
            }
        }
    },
    "grey-master/tests/data/python2.py": {},
    "grey-master/tests/data/python2_print_function.py": {},
    "grey-master/tests/data/python2_unicode_literals.py": {},
    "grey-master/tests/data/python37.py": {
        "f": {
            "name": "f",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "awaited_generator_value": {
            "name": "awaited_generator_value",
            "location": 60,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "make_arange": {
            "name": "make_arange",
            "location": 64,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "grey-master/tests/data/remove_parens.py": {
        "example": {
            "name": "example",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "example1": {
            "name": "example1",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "example1point5": {
            "name": "example1point5",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "example2": {
            "name": "example2",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "example3": {
            "name": "example3",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "example4": {
            "name": "example4",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "example5": {
            "name": "example5",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "example6": {
            "name": "example6",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "example7": {
            "name": "example7",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "example8": {
            "name": "example8",
            "location": 142,
            "return": [],
            "arguments": {}
        }
    },
    "grey-master/tests/data/slices.py": {},
    "grey-master/tests/data/string_prefixes.py": {},
    "grey-master/tests/data/string_quotes.py": {},
    "grey-master/tests/data/stub.py": {
        "f": {
            "name": "f",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "h": {
            "name": "h",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "A.f": {
            "name": "f",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.g": {
            "name": "g",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grey-master/tests/data/tricky_unicode_symbols.py": {},
    "grey-master/tests/data/tupleassign.py": {},
    "grey-master/tests/data/include_exclude_tests/b/.definitely_exclude/a.py": {},
    "grey-master/tests/data/include_exclude_tests/b/dont_exclude/a.py": {},
    "grey-master/tests/data/include_exclude_tests/b/exclude/a.py": {}
}
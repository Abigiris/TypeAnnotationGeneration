{
    "guacamol-master/setup.py": {},
    "guacamol-master/guacamol/assess_distribution_learning.py": {
        "assess_distribution_learning": {
            "name": "assess_distribution_learning",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "DistributionMatchingGenerator"
                ],
                "chembl_training_file": [
                    "str"
                ],
                "json_output_file": [],
                "benchmark_version": []
            }
        },
        "_assess_distribution_learning": {
            "name": "_assess_distribution_learning",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "DistributionMatchingGenerator"
                ],
                "chembl_training_file": [
                    "str"
                ],
                "json_output_file": [
                    "str"
                ],
                "benchmark_version": [
                    "str"
                ],
                "number_samples": [
                    "int"
                ]
            }
        },
        "_evaluate_distribution_learning_benchmarks": {
            "name": "_evaluate_distribution_learning_benchmarks",
            "location": 65,
            "return": [
                "List[DistributionLearningBenchmarkResult]"
            ],
            "arguments": {
                "model": [
                    "DistributionMatchingGenerator"
                ],
                "benchmarks": [
                    "List[DistributionLearningBenchmark]"
                ]
            }
        }
    },
    "guacamol-master/guacamol/assess_goal_directed_generation.py": {
        "assess_goal_directed_generation": {
            "name": "assess_goal_directed_generation",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "goal_directed_molecule_generator": [
                    "GoalDirectedGenerator"
                ],
                "json_output_file": [],
                "benchmark_version": []
            }
        },
        "_evaluate_goal_directed_benchmarks": {
            "name": "_evaluate_goal_directed_benchmarks",
            "location": 46,
            "return": [
                "List[GoalDirectedBenchmarkResult]"
            ],
            "arguments": {
                "goal_directed_molecule_generator": [
                    "GoalDirectedGenerator"
                ],
                "benchmarks": [
                    "List[GoalDirectedBenchmark]"
                ]
            }
        }
    },
    "guacamol-master/guacamol/benchmark_suites.py": {
        "goal_directed_benchmark_suite": {
            "name": "goal_directed_benchmark_suite",
            "location": 14,
            "return": [
                "List[GoalDirectedBenchmark]"
            ],
            "arguments": {
                "version_name": [
                    "str"
                ]
            }
        },
        "distribution_learning_benchmark_suite": {
            "name": "distribution_learning_benchmark_suite",
            "location": 25,
            "return": [
                "List[DistributionLearningBenchmark]"
            ],
            "arguments": {
                "chembl_file_path": [
                    "str"
                ],
                "version_name": [
                    "str"
                ],
                "number_samples": [
                    "int"
                ]
            }
        },
        "goal_directed_suite_v1": {
            "name": "goal_directed_suite_v1",
            "location": 46,
            "return": [
                "List[GoalDirectedBenchmark]"
            ],
            "arguments": {}
        },
        "goal_directed_suite_v2": {
            "name": "goal_directed_suite_v2",
            "location": 90,
            "return": [
                "List[GoalDirectedBenchmark]"
            ],
            "arguments": {}
        },
        "goal_directed_suite_trivial": {
            "name": "goal_directed_suite_trivial",
            "location": 129,
            "return": [
                "List[GoalDirectedBenchmark]"
            ],
            "arguments": {}
        },
        "distribution_learning_suite_v1": {
            "name": "distribution_learning_suite_v1",
            "location": 144,
            "return": [
                "List[DistributionLearningBenchmark]"
            ],
            "arguments": {
                "chembl_file_path": [
                    "str"
                ],
                "number_samples": [
                    "int"
                ]
            }
        }
    },
    "guacamol-master/guacamol/common_scoring_functions.py": {
        "RdkitScoringFunction.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "Callable[([Chem.Mol], float)]"
                ],
                "score_modifier": [
                    "ScoreModifier"
                ]
            }
        },
        "RdkitScoringFunction.score_mol": {
            "name": "score_mol",
            "location": 28,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mol": [
                    "Chem.Mol"
                ]
            }
        },
        "TanimotoScoringFunction.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "fp_type": [],
                "score_modifier": [
                    "ScoreModifier"
                ]
            }
        },
        "TanimotoScoringFunction.score_mol": {
            "name": "score_mol",
            "location": 54,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mol": [
                    "Chem.Mol"
                ]
            }
        },
        "CNS_MPO_ScoringFunction.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_logP": [],
                "maxMW": [],
                "min_tpsa": [],
                "max_tpsa": [],
                "max_hbd": []
            }
        },
        "CNS_MPO_ScoringFunction.score_mol": {
            "name": "score_mol",
            "location": 73,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mol": [
                    "Chem.Mol"
                ]
            }
        },
        "IsomerScoringFunction.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "molecular_formula": [
                    "str"
                ],
                "mean_function": []
            }
        },
        "IsomerScoringFunction.determine_mean_function": {
            "name": "determine_mean_function",
            "location": 113,
            "return": [
                "Callable[([List[float]], float)]"
            ],
            "arguments": {
                "mean_function": [
                    "str"
                ]
            }
        },
        "IsomerScoringFunction.determine_scoring_functions": {
            "name": "determine_scoring_functions",
            "location": 121,
            "return": [
                "List[RdkitScoringFunction]"
            ],
            "arguments": {
                "molecular_formula": [
                    "str"
                ]
            }
        },
        "IsomerScoringFunction.raw_score": {
            "name": "raw_score",
            "location": 137,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        },
        "SMARTSScoringFunction.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "inverse": []
            }
        },
        "SMARTSScoringFunction.score_mol": {
            "name": "score_mol",
            "location": 166,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mol": [
                    "Chem.Mol"
                ]
            }
        }
    },
    "guacamol-master/guacamol/distribution_learning_benchmark.py": {
        "DistributionLearningBenchmarkResult.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "benchmark_name": [
                    "str"
                ],
                "score": [
                    "float"
                ],
                "sampling_time": [
                    "float"
                ],
                "metadata": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DistributionLearningBenchmark.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "number_samples": [
                    "int"
                ]
            }
        },
        "DistributionLearningBenchmark.assess_model": {
            "name": "assess_model",
            "location": 50,
            "return": [
                "DistributionLearningBenchmarkResult"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "DistributionMatchingGenerator"
                ]
            }
        },
        "ValidityBenchmark.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_samples": []
            }
        },
        "ValidityBenchmark.assess_model": {
            "name": "assess_model",
            "location": 67,
            "return": [
                "DistributionLearningBenchmarkResult"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "DistributionMatchingGenerator"
                ]
            }
        },
        "UniquenessBenchmark.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_samples": []
            }
        },
        "UniquenessBenchmark.assess_model": {
            "name": "assess_model",
            "location": 96,
            "return": [
                "DistributionLearningBenchmarkResult"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "DistributionMatchingGenerator"
                ]
            }
        },
        "NoveltyBenchmark.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_samples": [
                    "int"
                ],
                "training_set": [
                    "Iterable[str]"
                ]
            }
        },
        "NoveltyBenchmark.assess_model": {
            "name": "assess_model",
            "location": 129,
            "return": [
                "DistributionLearningBenchmarkResult"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "DistributionMatchingGenerator"
                ]
            }
        },
        "KLDivBenchmark.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_samples": [
                    "int"
                ],
                "training_set": [
                    "List[str]"
                ]
            }
        },
        "KLDivBenchmark.assess_model": {
            "name": "assess_model",
            "location": 187,
            "return": [
                "DistributionLearningBenchmarkResult"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "DistributionMatchingGenerator"
                ]
            }
        }
    },
    "guacamol-master/guacamol/distribution_matching_generator.py": {
        "DistributionMatchingGenerator.generate": {
            "name": "generate",
            "location": 11,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "number_samples": [
                    "int"
                ]
            }
        }
    },
    "guacamol-master/guacamol/frechet_benchmark.py": {
        "FrechetBenchmark.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_set": [
                    "List[str]"
                ],
                "chemnet_model_filename": [],
                "sample_size": []
            }
        },
        "FrechetBenchmark.assess_model": {
            "name": "assess_model",
            "location": 43,
            "return": [
                "DistributionLearningBenchmarkResult"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "DistributionMatchingGenerator"
                ]
            }
        },
        "FrechetBenchmark._load_chemnet": {
            "name": "_load_chemnet",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrechetBenchmark._calculate_distribution_statistics": {
            "name": "_calculate_distribution_statistics",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "molecules": [
                    "List[str]"
                ]
            }
        }
    },
    "guacamol-master/guacamol/goal_directed_benchmark.py": {
        "GoalDirectedBenchmarkResult.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "benchmark_name": [
                    "str"
                ],
                "score": [
                    "float"
                ],
                "optimized_molecules": [
                    "List[Tuple[(str, float)]]"
                ],
                "execution_time": [
                    "float"
                ],
                "number_scoring_function_calls": [
                    "int"
                ],
                "metadata": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GoalDirectedBenchmark.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "objective": [
                    "ScoringFunction"
                ],
                "contribution_specification": [
                    "ScoreContributionSpecification"
                ],
                "starting_population": [
                    "Optional[List[str]]"
                ]
            }
        },
        "GoalDirectedBenchmark.assess_model": {
            "name": "assess_model",
            "location": 60,
            "return": [
                "GoalDirectedBenchmarkResult"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "GoalDirectedGenerator"
                ]
            }
        }
    },
    "guacamol-master/guacamol/goal_directed_generator.py": {
        "GoalDirectedGenerator.generate_optimized_molecules": {
            "name": "generate_optimized_molecules",
            "location": 13,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "scoring_function": [
                    "ScoringFunction"
                ],
                "number_molecules": [
                    "int"
                ],
                "starting_population": [
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "guacamol-master/guacamol/goal_directed_score_contributions.py": {
        "uniform_specification": {
            "name": "uniform_specification",
            "location": 28,
            "return": [
                "ScoreContributionSpecification"
            ],
            "arguments": {}
        },
        "compute_global_score": {
            "name": "compute_global_score",
            "location": 39,
            "return": [
                "Tuple[(float, Dict[(str, float)])]"
            ],
            "arguments": {
                "contribution_specification": [
                    "ScoreContributionSpecification"
                ],
                "scores": [
                    "List[float]"
                ]
            }
        },
        "ScoreContributionSpecification.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributions": [
                    "List[Tuple[(int, float)]]"
                ]
            }
        },
        "ScoreContributionSpecification.top_counts": {
            "name": "top_counts",
            "location": 20,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoreContributionSpecification.weights": {
            "name": "weights",
            "location": 24,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "guacamol-master/guacamol/score_modifier.py": {
        "ScoreModifier.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ChainedModifier.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[ScoreModifier]"
                ]
            }
        },
        "ChainedModifier.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LinearModifier.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "slope": []
            }
        },
        "LinearModifier.__call__": {
            "name": "__call__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SquaredModifier.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_value": [
                    "float"
                ],
                "coefficient": []
            }
        },
        "SquaredModifier.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AbsoluteScoreModifier.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_value": [
                    "float"
                ]
            }
        },
        "AbsoluteScoreModifier.__call__": {
            "name": "__call__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "GaussianModifier.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "float"
                ],
                "sigma": [
                    "float"
                ]
            }
        },
        "GaussianModifier.__call__": {
            "name": "__call__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MinMaxGaussianModifier.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "float"
                ],
                "sigma": [
                    "float"
                ],
                "minimize": []
            }
        },
        "MinMaxGaussianModifier.__call__": {
            "name": "__call__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ClippedScoreModifier.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "upper_x": [
                    "float"
                ],
                "lower_x": [],
                "high_score": [],
                "low_score": []
            }
        },
        "ClippedScoreModifier.__call__": {
            "name": "__call__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SmoothClippedScoreModifier.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "upper_x": [
                    "float"
                ],
                "lower_x": [],
                "high_score": [],
                "low_score": []
            }
        },
        "SmoothClippedScoreModifier.__call__": {
            "name": "__call__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ThresholdedLinearModifier.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "ThresholdedLinearModifier.__call__": {
            "name": "__call__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "guacamol-master/guacamol/scoring_function.py": {
        "ScoringFunction.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score_modifier": [
                    "ScoreModifier"
                ]
            }
        },
        "ScoringFunction.score_modifier": {
            "name": "score_modifier",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "modifier": [
                    "Optional[ScoreModifier]"
                ]
            }
        },
        "ScoringFunction.modify_score": {
            "name": "modify_score",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "raw_score": [
                    "float"
                ]
            }
        },
        "ScoringFunction.score": {
            "name": "score",
            "location": 47,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        },
        "ScoringFunction.score_list": {
            "name": "score_list",
            "location": 54,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "smiles_list": [
                    "List[str]"
                ]
            }
        },
        "MoleculewiseScoringFunction.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score_modifier": [
                    "ScoreModifier"
                ]
            }
        },
        "MoleculewiseScoringFunction.score": {
            "name": "score",
            "location": 85,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        },
        "MoleculewiseScoringFunction.score_list": {
            "name": "score_list",
            "location": 94,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "smiles_list": [
                    "List[str]"
                ]
            }
        },
        "MoleculewiseScoringFunction.raw_score": {
            "name": "raw_score",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        },
        "BatchScoringFunction.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score_modifier": [
                    "ScoreModifier"
                ]
            }
        },
        "BatchScoringFunction.score": {
            "name": "score",
            "location": 124,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        },
        "BatchScoringFunction.score_list": {
            "name": "score_list",
            "location": 127,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "smiles_list": [
                    "List[str]"
                ]
            }
        },
        "BatchScoringFunction.raw_score_list": {
            "name": "raw_score_list",
            "location": 137,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "smiles_list": [
                    "List[str]"
                ]
            }
        },
        "ScoringFunctionBasedOnRdkitMol.raw_score": {
            "name": "raw_score",
            "location": 158,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        },
        "ScoringFunctionBasedOnRdkitMol.score_mol": {
            "name": "score_mol",
            "location": 167,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mol": [
                    "Chem.Mol"
                ]
            }
        },
        "ArithmeticMeanScoringFunction.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scoring_functions": [
                    "List[ScoringFunction]"
                ],
                "weights": []
            }
        },
        "ArithmeticMeanScoringFunction.raw_score_list": {
            "name": "raw_score_list",
            "location": 196,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "smiles_list": [
                    "List[str]"
                ]
            }
        },
        "GeometricMeanScoringFunction.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scoring_functions": [
                    "List[ScoringFunction]"
                ]
            }
        },
        "GeometricMeanScoringFunction.raw_score": {
            "name": "raw_score",
            "location": 222,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        },
        "ScoringFunctionWrapper.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scoring_function": [
                    "ScoringFunction"
                ]
            }
        },
        "ScoringFunctionWrapper.score": {
            "name": "score",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "smiles": []
            }
        },
        "ScoringFunctionWrapper.score_list": {
            "name": "score_list",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "smiles_list": []
            }
        },
        "ScoringFunctionWrapper._increment_evaluation_count": {
            "name": "_increment_evaluation_count",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        }
    },
    "guacamol-master/guacamol/standard_benchmarks.py": {
        "isomers_c11h24": {
            "name": "isomers_c11h24",
            "location": 15,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "mean_function": []
            }
        },
        "isomers_c7h8n2o2": {
            "name": "isomers_c7h8n2o2",
            "location": 31,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "mean_function": []
            }
        },
        "isomers_c9h10n2o2pf2cl": {
            "name": "isomers_c9h10n2o2pf2cl",
            "location": 46,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "mean_function": [],
                "n_samples": []
            }
        },
        "hard_cobimetinib": {
            "name": "hard_cobimetinib",
            "location": 61,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "max_logP": []
            }
        },
        "hard_osimertinib": {
            "name": "hard_osimertinib",
            "location": 84,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "mean_cls": []
            }
        },
        "hard_fexofenadine": {
            "name": "hard_fexofenadine",
            "location": 109,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "mean_cls": []
            }
        },
        "start_pop_ranolazine": {
            "name": "start_pop_ranolazine",
            "location": 135,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "weird_physchem": {
            "name": "weird_physchem",
            "location": 160,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "similarity_cns_mpo": {
            "name": "similarity_cns_mpo",
            "location": 183,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "smiles": [],
                "molecule_name": [],
                "max_logP": []
            }
        },
        "similarity": {
            "name": "similarity",
            "location": 199,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "smiles": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "fp_type": [
                    "str"
                ],
                "threshold": [
                    "float"
                ],
                "rediscovery": [
                    "bool"
                ]
            }
        },
        "logP_benchmark": {
            "name": "logP_benchmark",
            "location": 216,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "target": [
                    "float"
                ]
            }
        },
        "tpsa_benchmark": {
            "name": "tpsa_benchmark",
            "location": 228,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "target": [
                    "float"
                ]
            }
        },
        "cns_mpo": {
            "name": "cns_mpo",
            "location": 240,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "max_logP": []
            }
        },
        "qed_benchmark": {
            "name": "qed_benchmark",
            "location": 246,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "median_camphor_menthol": {
            "name": "median_camphor_menthol",
            "location": 253,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {
                "mean_cls": []
            }
        },
        "novelty_benchmark": {
            "name": "novelty_benchmark",
            "location": 265,
            "return": [
                "DistributionLearningBenchmark"
            ],
            "arguments": {
                "training_set_file": [
                    "str"
                ],
                "number_samples": [
                    "int"
                ]
            }
        },
        "kldiv_benchmark": {
            "name": "kldiv_benchmark",
            "location": 270,
            "return": [
                "DistributionLearningBenchmark"
            ],
            "arguments": {
                "training_set_file": [
                    "str"
                ],
                "number_samples": [
                    "int"
                ]
            }
        },
        "frechet_benchmark": {
            "name": "frechet_benchmark",
            "location": 275,
            "return": [
                "DistributionLearningBenchmark"
            ],
            "arguments": {
                "training_set_file": [
                    "str"
                ],
                "number_samples": [
                    "int"
                ]
            }
        },
        "perindopril_rings": {
            "name": "perindopril_rings",
            "location": 280,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "amlodipine_rings": {
            "name": "amlodipine_rings",
            "location": 294,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "sitagliptin_replacement": {
            "name": "sitagliptin_replacement",
            "location": 307,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "zaleplon_with_other_formula": {
            "name": "zaleplon_with_other_formula",
            "location": 329,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "smarts_with_other_target": {
            "name": "smarts_with_other_target",
            "location": 342,
            "return": [
                "ScoringFunction"
            ],
            "arguments": {
                "smarts": [
                    "str"
                ],
                "other_molecule": [
                    "str"
                ]
            }
        },
        "valsartan_smarts": {
            "name": "valsartan_smarts",
            "location": 359,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "median_tadalafil_sildenafil": {
            "name": "median_tadalafil_sildenafil",
            "location": 369,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "pioglitazone_mpo": {
            "name": "pioglitazone_mpo",
            "location": 382,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "decoration_hop": {
            "name": "decoration_hop",
            "location": 402,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "scaffold_hop": {
            "name": "scaffold_hop",
            "location": 423,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        },
        "ranolazine_mpo": {
            "name": "ranolazine_mpo",
            "location": 447,
            "return": [
                "GoalDirectedBenchmark"
            ],
            "arguments": {}
        }
    },
    "guacamol-master/guacamol/__init__.py": {},
    "guacamol-master/guacamol/data/get_data.py": {
        "get_argparser": {
            "name": "get_argparser",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "extract_chembl": {
            "name": "extract_chembl",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "line": []
            }
        },
        "extract_smilesfile": {
            "name": "extract_smilesfile",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "line": []
            }
        },
        "get_raw_smiles": {
            "name": "get_raw_smiles",
            "location": 88,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "file_name": [],
                "smiles_char_dict": [],
                "open_fn": [],
                "extract_fn": []
            }
        },
        "write_smiles": {
            "name": "write_smiles",
            "location": 131,
            "return": [],
            "arguments": {
                "dataset": [
                    "Iterable[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "compare_hash": {
            "name": "compare_hash",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "output_file": [
                    "str"
                ],
                "correct_hash": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "AllowedSmilesCharDictionary.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "forbidden_symbols": [
                    "Optional[Set[str]]"
                ]
            }
        },
        "AllowedSmilesCharDictionary.allowed": {
            "name": "allowed",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "smiles": [
                    "str"
                ]
            }
        }
    },
    "guacamol-master/guacamol/data/__init__.py": {},
    "guacamol-master/guacamol/utils/chemistry.py": {
        "is_valid": {
            "name": "is_valid",
            "location": 22,
            "return": [],
            "arguments": {
                "smiles": [
                    "str"
                ]
            }
        },
        "canonicalize": {
            "name": "canonicalize",
            "location": 38,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "smiles": [
                    "str"
                ],
                "include_stereocenters": []
            }
        },
        "canonicalize_list": {
            "name": "canonicalize_list",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "smiles_list": [
                    "Iterable[str]"
                ],
                "include_stereocenters": []
            }
        },
        "smiles_to_rdkit_mol": {
            "name": "smiles_to_rdkit_mol",
            "location": 80,
            "return": [
                "Optional[Chem.Mol]"
            ],
            "arguments": {
                "smiles": [
                    "str"
                ]
            }
        },
        "split_charged_mol": {
            "name": "split_charged_mol",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "smiles": [
                    "str"
                ]
            }
        },
        "initialise_neutralisation_reactions": {
            "name": "initialise_neutralisation_reactions",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "neutralise_charges": {
            "name": "neutralise_charges",
            "location": 141,
            "return": [],
            "arguments": {
                "mol": [],
                "reactions": []
            }
        },
        "filter_and_canonicalize": {
            "name": "filter_and_canonicalize",
            "location": 156,
            "return": [],
            "arguments": {
                "smiles": [
                    "str"
                ],
                "holdout_set": [],
                "holdout_fps": [],
                "neutralization_rxns": [],
                "tanimoto_cutoff": [],
                "include_stereocenters": []
            }
        },
        "calculate_internal_pairwise_similarities": {
            "name": "calculate_internal_pairwise_similarities",
            "location": 213,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "smiles_list": [
                    "Collection[str]"
                ]
            }
        },
        "calculate_pairwise_similarities": {
            "name": "calculate_pairwise_similarities",
            "location": 238,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "smiles_list1": [
                    "List[str]"
                ],
                "smiles_list2": [
                    "List[str]"
                ]
            }
        },
        "get_fingerprints_from_smileslist": {
            "name": "get_fingerprints_from_smileslist",
            "location": 265,
            "return": [],
            "arguments": {
                "smiles_list": []
            }
        },
        "get_fingerprints": {
            "name": "get_fingerprints",
            "location": 278,
            "return": [],
            "arguments": {
                "mols": [
                    "Iterable[Chem.Mol]"
                ],
                "radius": [],
                "length": []
            }
        },
        "get_mols": {
            "name": "get_mols",
            "location": 292,
            "return": [
                "Iterable[Chem.Mol]"
            ],
            "arguments": {
                "smiles_list": [
                    "Iterable[str]"
                ]
            }
        },
        "highest_tanimoto_precalc_fps": {
            "name": "highest_tanimoto_precalc_fps",
            "location": 302,
            "return": [],
            "arguments": {
                "mol": [],
                "fps": []
            }
        },
        "continuous_kldiv": {
            "name": "continuous_kldiv",
            "location": 322,
            "return": [
                "float"
            ],
            "arguments": {
                "X_baseline": [
                    "np.ndarray"
                ],
                "X_sampled": [
                    "np.ndarray"
                ]
            }
        },
        "discrete_kldiv": {
            "name": "discrete_kldiv",
            "location": 332,
            "return": [
                "float"
            ],
            "arguments": {
                "X_baseline": [
                    "np.ndarray"
                ],
                "X_sampled": [
                    "np.ndarray"
                ]
            }
        },
        "calculate_pc_descriptors": {
            "name": "calculate_pc_descriptors",
            "location": 341,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "smiles": [
                    "Iterable[str]"
                ],
                "pc_descriptors": [
                    "List[str]"
                ]
            }
        },
        "_calculate_pc_descriptors": {
            "name": "_calculate_pc_descriptors",
            "location": 352,
            "return": [
                "Optional[np.ndarray]"
            ],
            "arguments": {
                "smiles": [
                    "str"
                ],
                "pc_descriptors": [
                    "List[str]"
                ]
            }
        },
        "parse_molecular_formula": {
            "name": "parse_molecular_formula",
            "location": 368,
            "return": [
                "List[Tuple[(str, int)]]"
            ],
            "arguments": {
                "formula": [
                    "str"
                ]
            }
        }
    },
    "guacamol-master/guacamol/utils/data.py": {
        "remove_duplicates": {
            "name": "remove_duplicates",
            "location": 11,
            "return": [],
            "arguments": {
                "list_with_duplicates": []
            }
        },
        "get_random_subset": {
            "name": "get_random_subset",
            "location": 33,
            "return": [
                "List[Any]"
            ],
            "arguments": {
                "dataset": [
                    "List[Any]"
                ],
                "subset_size": [
                    "int"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "download_if_not_present": {
            "name": "download_if_not_present",
            "location": 68,
            "return": [],
            "arguments": {
                "filename": [],
                "uri": []
            }
        },
        "get_time_string": {
            "name": "get_time_string",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "ProgressBar.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressBarUpTo.update_to": {
            "name": "update_to",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "b": [],
                "bsize": [],
                "tsize": []
            }
        }
    },
    "guacamol-master/guacamol/utils/descriptors.py": {
        "logP": {
            "name": "logP",
            "location": 5,
            "return": [
                "float"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "qed": {
            "name": "qed",
            "location": 9,
            "return": [
                "float"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "tpsa": {
            "name": "tpsa",
            "location": 13,
            "return": [
                "float"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "bertz": {
            "name": "bertz",
            "location": 17,
            "return": [
                "float"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "mol_weight": {
            "name": "mol_weight",
            "location": 21,
            "return": [
                "float"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "num_H_donors": {
            "name": "num_H_donors",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "num_H_acceptors": {
            "name": "num_H_acceptors",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "num_rotatable_bonds": {
            "name": "num_rotatable_bonds",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "num_rings": {
            "name": "num_rings",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "num_aromatic_rings": {
            "name": "num_aromatic_rings",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "num_atoms": {
            "name": "num_atoms",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "mol": [
                    "Mol"
                ]
            }
        },
        "AtomCounter.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str"
                ]
            }
        },
        "AtomCounter.__call__": {
            "name": "__call__",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        }
    },
    "guacamol-master/guacamol/utils/fingerprints.py": {
        "get_fingerprint": {
            "name": "get_fingerprint",
            "location": 49,
            "return": [],
            "arguments": {
                "mol": [
                    "Mol"
                ],
                "fp_type": [
                    "str"
                ]
            }
        },
        "_FingerprintCalculator.get_fingerprint": {
            "name": "get_fingerprint",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ],
                "fp_type": [
                    "str"
                ]
            }
        },
        "_FingerprintCalculator.get_AP": {
            "name": "get_AP",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_PHCO": {
            "name": "get_PHCO",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_BPF": {
            "name": "get_BPF",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_BTF": {
            "name": "get_BTF",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_PATH": {
            "name": "get_PATH",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_ECFP4": {
            "name": "get_ECFP4",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_ECFP6": {
            "name": "get_ECFP6",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_FCFP4": {
            "name": "get_FCFP4",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        },
        "_FingerprintCalculator.get_FCFP6": {
            "name": "get_FCFP6",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "mol": [
                    "Mol"
                ]
            }
        }
    },
    "guacamol-master/guacamol/utils/helpers.py": {
        "setup_default_logger": {
            "name": "setup_default_logger",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "guacamol-master/guacamol/utils/math.py": {
        "arithmetic_mean": {
            "name": "arithmetic_mean",
            "location": 6,
            "return": [
                "float"
            ],
            "arguments": {
                "values": [
                    "List[float]"
                ]
            }
        },
        "geometric_mean": {
            "name": "geometric_mean",
            "location": 13,
            "return": [
                "float"
            ],
            "arguments": {
                "values": [
                    "List[float]"
                ]
            }
        }
    },
    "guacamol-master/guacamol/utils/sampling_helpers.py": {
        "sample_valid_molecules": {
            "name": "sample_valid_molecules",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "DistributionMatchingGenerator"
                ],
                "number_molecules": [
                    "int"
                ],
                "max_tries": []
            }
        },
        "sample_unique_molecules": {
            "name": "sample_unique_molecules",
            "location": 37,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "DistributionMatchingGenerator"
                ],
                "number_molecules": [
                    "int"
                ],
                "max_tries": []
            }
        }
    },
    "guacamol-master/guacamol/utils/__init__.py": {},
    "guacamol-master/tests/mock_generator.py": {
        "MockGenerator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "molecules": [
                    "List[str]"
                ]
            }
        },
        "MockGenerator.generate": {
            "name": "generate",
            "location": 16,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "number_samples": [
                    "int"
                ]
            }
        }
    },
    "guacamol-master/tests/test_distribution_learning_benchmarks.py": {
        "test_validity_does_not_penalize_duplicates": {
            "name": "test_validity_does_not_penalize_duplicates",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_validity_score_is_proportion_of_valid_molecules": {
            "name": "test_validity_score_is_proportion_of_valid_molecules",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_uniqueness_penalizes_duplicates": {
            "name": "test_uniqueness_penalizes_duplicates",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_uniqueness_penalizes_duplicates_with_different_smiles_strings": {
            "name": "test_uniqueness_penalizes_duplicates_with_different_smiles_strings",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_uniqueness_does_not_penalize_invalid_molecules": {
            "name": "test_uniqueness_does_not_penalize_invalid_molecules",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_novelty_score_is_zero_if_no_molecule_is_new": {
            "name": "test_novelty_score_is_zero_if_no_molecule_is_new",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_novelty_score_is_one_if_all_molecules_are_new": {
            "name": "test_novelty_score_is_one_if_all_molecules_are_new",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_novelty_score_does_not_penalize_duplicates": {
            "name": "test_novelty_score_does_not_penalize_duplicates",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_novelty_score_penalizes_invalid_molecules": {
            "name": "test_novelty_score_penalizes_invalid_molecules",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_KLdiv_benchmark_same_dist": {
            "name": "test_KLdiv_benchmark_same_dist",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_KLdiv_benchmark_different_dist": {
            "name": "test_KLdiv_benchmark_different_dist",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_distribution_learning_suite_v1": {
            "name": "test_distribution_learning_suite_v1",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "guacamol-master/tests/test_goal_directed_benchmark.py": {
        "test_removes_duplicates": {
            "name": "test_removes_duplicates",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_removes_invalid_molecules": {
            "name": "test_removes_invalid_molecules",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_correct_score_averaging": {
            "name": "test_correct_score_averaging",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_correct_score_with_multiple_contributions": {
            "name": "test_correct_score_with_multiple_contributions",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "MockScoringFunction.score_mol": {
            "name": "score_mol",
            "location": 17,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mol": [
                    "Chem.Mol"
                ]
            }
        },
        "MockGenerator.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "molecules": [
                    "List[str]"
                ]
            }
        },
        "MockGenerator.generate_optimized_molecules": {
            "name": "generate_optimized_molecules",
            "location": 28,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "scoring_function": [
                    "ScoringFunction"
                ],
                "number_molecules": [
                    "int"
                ],
                "starting_population": [
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "guacamol-master/tests/test_sampling_helpers.py": {
        "test_sample_valid_molecules_for_valid_only": {
            "name": "test_sample_valid_molecules_for_valid_only",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_sample_valid_molecules_with_invalid_molecules": {
            "name": "test_sample_valid_molecules_with_invalid_molecules",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_sample_valid_molecules_if_not_enough_valid_generated": {
            "name": "test_sample_valid_molecules_if_not_enough_valid_generated",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_sample_unique_molecules_for_valid_only": {
            "name": "test_sample_unique_molecules_for_valid_only",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_sample_unique_molecules_with_invalid_molecules": {
            "name": "test_sample_unique_molecules_with_invalid_molecules",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_sample_unique_molecules_with_duplicate_molecules": {
            "name": "test_sample_unique_molecules_with_duplicate_molecules",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_sample_unique_molecules_if_not_enough_unique_generated": {
            "name": "test_sample_unique_molecules_if_not_enough_unique_generated",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "guacamol-master/tests/test_score_modifier.py": {
        "test_linear_function_default": {
            "name": "test_linear_function_default",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_linear_function_with_slope": {
            "name": "test_linear_function_with_slope",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_squared_function": {
            "name": "test_squared_function",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_absolute_function": {
            "name": "test_absolute_function",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "gaussian": {
            "name": "gaussian",
            "location": 53,
            "return": [],
            "arguments": {
                "x": [],
                "mu": [],
                "sig": []
            }
        },
        "test_gaussian_function": {
            "name": "test_gaussian_function",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_min_gaussian_function": {
            "name": "test_min_gaussian_function",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_max_gaussian_function": {
            "name": "test_max_gaussian_function",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_tanimoto_threshold_function": {
            "name": "test_tanimoto_threshold_function",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_clipped_function": {
            "name": "test_clipped_function",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_clipped_function_inverted": {
            "name": "test_clipped_function_inverted",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_thresholded_is_special_case_of_clipped_for_positive_input": {
            "name": "test_thresholded_is_special_case_of_clipped_for_positive_input",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_smooth_clipped": {
            "name": "test_smooth_clipped",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_smooth_clipped_inverted": {
            "name": "test_smooth_clipped_inverted",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_chained_modifier": {
            "name": "test_chained_modifier",
            "location": 237,
            "return": [],
            "arguments": {}
        }
    },
    "guacamol-master/tests/test_scoring_functions.py": {
        "test_isomer_scoring_function_uses_geometric_mean_by_default": {
            "name": "test_isomer_scoring_function_uses_geometric_mean_by_default",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_isomer_scoring_function_returns_one_for_correct_molecule": {
            "name": "test_isomer_scoring_function_returns_one_for_correct_molecule",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_isomer_scoring_function_penalizes_additional_atoms": {
            "name": "test_isomer_scoring_function_penalizes_additional_atoms",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_isomer_scoring_function_penalizes_incorrect_number_atoms": {
            "name": "test_isomer_scoring_function_penalizes_incorrect_number_atoms",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_isomer_scoring_function_invalid_molecule": {
            "name": "test_isomer_scoring_function_invalid_molecule",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_smarts_function": {
            "name": "test_smarts_function",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_arithmetic_mean_scoring_function": {
            "name": "test_arithmetic_mean_scoring_function",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_geometric_mean_scoring_function": {
            "name": "test_geometric_mean_scoring_function",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "MockScoringFunction.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "List[float]"
                ]
            }
        },
        "MockScoringFunction.raw_score_list": {
            "name": "raw_score_list",
            "location": 22,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "smiles_list": [
                    "List[str]"
                ]
            }
        }
    },
    "guacamol-master/tests/__init__.py": {},
    "guacamol-master/tests/utils/test_chemistry.py": {
        "test_validity_empty_molecule": {
            "name": "test_validity_empty_molecule",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_validity_incorrect_syntax": {
            "name": "test_validity_incorrect_syntax",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_validity_incorrect_valence": {
            "name": "test_validity_incorrect_valence",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_validity_correct_molecules": {
            "name": "test_validity_correct_molecules",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_isomeric_canonicalisation": {
            "name": "test_isomeric_canonicalisation",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_list_canonicalization_removes_none": {
            "name": "test_list_canonicalization_removes_none",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_internal_sim": {
            "name": "test_internal_sim",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_external_sim": {
            "name": "test_external_sim",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_parse_molecular_formula": {
            "name": "test_parse_molecular_formula",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "guacamol-master/tests/utils/test_data.py": {
        "test_subset": {
            "name": "test_subset",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_subset_if_dataset_too_small": {
            "name": "test_subset_if_dataset_too_small",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_subset_with_no_seed": {
            "name": "test_subset_with_no_seed",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_subset_with_random_seed": {
            "name": "test_subset_with_random_seed",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "guacamol-master/tests/utils/test_descriptors.py": {
        "test_num_atoms": {
            "name": "test_num_atoms",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_num_atoms_does_not_change_mol_instance": {
            "name": "test_num_atoms_does_not_change_mol_instance",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_count_c_atoms": {
            "name": "test_count_c_atoms",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_count_h_atoms": {
            "name": "test_count_h_atoms",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_count_h_atoms_does_not_change_mol_instance": {
            "name": "test_count_h_atoms_does_not_change_mol_instance",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    }
}
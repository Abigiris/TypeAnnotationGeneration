{
    "hackvirtualmachine-master/vm.py": {
        "parse_config": {
            "name": "parse_config",
            "location": 15,
            "return": [
                "Configuration"
            ],
            "arguments": {
                "argv": [
                    "List[Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[Any]"
                ]
            }
        }
    },
    "hackvirtualmachine-master/hack/Generator.py": {
        "push_operation": {
            "name": "push_operation",
            "location": 4,
            "return": [
                "Callable[(..., str)]"
            ],
            "arguments": {
                "operation": [
                    "Callable[(..., List[str])]"
                ]
            }
        },
        "pop_operation": {
            "name": "pop_operation",
            "location": 26,
            "return": [
                "Callable[(..., str)]"
            ],
            "arguments": {
                "operation": [
                    "Callable[(..., List[str])]"
                ]
            }
        },
        "unary_operation": {
            "name": "unary_operation",
            "location": 41,
            "return": [
                "Callable[(..., str)]"
            ],
            "arguments": {
                "operation": [
                    "Callable[(..., List[str])]"
                ]
            }
        },
        "binary_operation": {
            "name": "binary_operation",
            "location": 59,
            "return": [
                "Callable[(..., str)]"
            ],
            "arguments": {
                "operation": [
                    "Callable[(..., List[str])]"
                ]
            }
        },
        "pointer_name": {
            "name": "pointer_name",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "pointer": [
                    "str"
                ]
            }
        },
        "temp_register": {
            "name": "temp_register",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "str"
                ]
            }
        },
        "push_operation.wrapper": {
            "name": "wrapper",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "pop_operation.wrapper": {
            "name": "wrapper",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "unary_operation.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "binary_operation.wrapper": {
            "name": "wrapper",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "Generator.bootstrap": {
            "name": "bootstrap",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.push_static": {
            "name": "push_static",
            "location": 147,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "Generator.push_constant": {
            "name": "push_constant",
            "location": 155,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Generator.push_segment_value": {
            "name": "push_segment_value",
            "location": 163,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Generator.push_pointer": {
            "name": "push_pointer",
            "location": 172,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pointer": [
                    "str"
                ]
            }
        },
        "Generator.push_segment": {
            "name": "push_segment",
            "location": 181,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "str"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "Generator.push_temp": {
            "name": "push_temp",
            "location": 192,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str"
                ]
            }
        },
        "Generator.comparison_operator": {
            "name": "comparison_operator",
            "location": 196,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "str"
                ]
            }
        },
        "Generator.sub": {
            "name": "sub",
            "location": 228,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.add": {
            "name": "add",
            "location": 232,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.neg": {
            "name": "neg",
            "location": 236,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.logical_and": {
            "name": "logical_and",
            "location": 240,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.logical_or": {
            "name": "logical_or",
            "location": 244,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.logical_not": {
            "name": "logical_not",
            "location": 248,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.pop_temp": {
            "name": "pop_temp",
            "location": 252,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str"
                ]
            }
        },
        "Generator.pop_pointer": {
            "name": "pop_pointer",
            "location": 260,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pointer": [
                    "str"
                ]
            }
        },
        "Generator.pop_static": {
            "name": "pop_static",
            "location": 268,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "Generator.pop_segment": {
            "name": "pop_segment",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "str"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "Generator.label": {
            "name": "label",
            "location": 306,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "Generator.goto": {
            "name": "goto",
            "location": 309,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "Generator.if_goto": {
            "name": "if_goto",
            "location": 319,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "Generator.call": {
            "name": "call",
            "location": 334,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "local_variable_count": [
                    "int"
                ]
            }
        },
        "Generator.function": {
            "name": "function",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "local_variable_count": [
                    "int"
                ]
            }
        },
        "Generator.return_statement": {
            "name": "return_statement",
            "location": 381,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hackvirtualmachine-master/hack/Visitor.py": {
        "Visitor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [
                    "Generator"
                ]
            }
        },
        "Visitor.visitProgram": {
            "name": "visitProgram",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ProgramContext"
                ]
            }
        },
        "Visitor.visitStatements": {
            "name": "visitStatements",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementsContext"
                ]
            }
        },
        "Visitor.visitStatement": {
            "name": "visitStatement",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementContext"
                ]
            }
        },
        "Visitor.visitPush": {
            "name": "visitPush",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PushContext"
                ]
            }
        },
        "Visitor.visitPop": {
            "name": "visitPop",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PopContext"
                ]
            }
        },
        "Visitor.visitArithmetic": {
            "name": "visitArithmetic",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ArithmeticContext"
                ]
            }
        },
        "Visitor.visitLogical": {
            "name": "visitLogical",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LogicalContext"
                ]
            }
        },
        "Visitor.visitLabel": {
            "name": "visitLabel",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LabelContext"
                ]
            }
        },
        "Visitor.visitGoto": {
            "name": "visitGoto",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.GotoContext"
                ]
            }
        },
        "Visitor.visitIfGoto": {
            "name": "visitIfGoto",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.IfGotoContext"
                ]
            }
        },
        "Visitor.visitCall": {
            "name": "visitCall",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.CallContext"
                ]
            }
        },
        "Visitor.visitFunction": {
            "name": "visitFunction",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.FunctionContext"
                ]
            }
        },
        "Visitor.visitReturnStatement": {
            "name": "visitReturnStatement",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ReturnStatementContext"
                ]
            }
        }
    },
    "hackvirtualmachine-master/hack/VmToHack.py": {
        "VmToHack.convert": {
            "name": "convert",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "inputs": [
                    "List[Input]"
                ]
            }
        }
    },
    "hackvirtualmachine-master/hack/__init__.py": {},
    "hackvirtualmachine-master/parser/VMLexer.py": {
        "serializedATN": {
            "name": "serializedATN",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "VMLexer.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "output": [
                    "TextIO"
                ]
            }
        }
    },
    "hackvirtualmachine-master/parser/VMListener.py": {
        "VMListener.enterProgram": {
            "name": "enterProgram",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ProgramContext"
                ]
            }
        },
        "VMListener.exitProgram": {
            "name": "exitProgram",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ProgramContext"
                ]
            }
        },
        "VMListener.enterStatements": {
            "name": "enterStatements",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementsContext"
                ]
            }
        },
        "VMListener.exitStatements": {
            "name": "exitStatements",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementsContext"
                ]
            }
        },
        "VMListener.enterStatement": {
            "name": "enterStatement",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementContext"
                ]
            }
        },
        "VMListener.exitStatement": {
            "name": "exitStatement",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementContext"
                ]
            }
        },
        "VMListener.enterPush": {
            "name": "enterPush",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PushContext"
                ]
            }
        },
        "VMListener.exitPush": {
            "name": "exitPush",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PushContext"
                ]
            }
        },
        "VMListener.enterPop": {
            "name": "enterPop",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PopContext"
                ]
            }
        },
        "VMListener.exitPop": {
            "name": "exitPop",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PopContext"
                ]
            }
        },
        "VMListener.enterArithmetic": {
            "name": "enterArithmetic",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ArithmeticContext"
                ]
            }
        },
        "VMListener.exitArithmetic": {
            "name": "exitArithmetic",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ArithmeticContext"
                ]
            }
        },
        "VMListener.enterLogical": {
            "name": "enterLogical",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LogicalContext"
                ]
            }
        },
        "VMListener.exitLogical": {
            "name": "exitLogical",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LogicalContext"
                ]
            }
        },
        "VMListener.enterSegment": {
            "name": "enterSegment",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.SegmentContext"
                ]
            }
        },
        "VMListener.exitSegment": {
            "name": "exitSegment",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.SegmentContext"
                ]
            }
        },
        "VMListener.enterGoto": {
            "name": "enterGoto",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.GotoContext"
                ]
            }
        },
        "VMListener.exitGoto": {
            "name": "exitGoto",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.GotoContext"
                ]
            }
        },
        "VMListener.enterIfGoto": {
            "name": "enterIfGoto",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.IfGotoContext"
                ]
            }
        },
        "VMListener.exitIfGoto": {
            "name": "exitIfGoto",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.IfGotoContext"
                ]
            }
        },
        "VMListener.enterLabel": {
            "name": "enterLabel",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LabelContext"
                ]
            }
        },
        "VMListener.exitLabel": {
            "name": "exitLabel",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LabelContext"
                ]
            }
        },
        "VMListener.enterLabelIdentifier": {
            "name": "enterLabelIdentifier",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LabelIdentifierContext"
                ]
            }
        },
        "VMListener.exitLabelIdentifier": {
            "name": "exitLabelIdentifier",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LabelIdentifierContext"
                ]
            }
        },
        "VMListener.enterCall": {
            "name": "enterCall",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.CallContext"
                ]
            }
        },
        "VMListener.exitCall": {
            "name": "exitCall",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.CallContext"
                ]
            }
        },
        "VMListener.enterArgumentCount": {
            "name": "enterArgumentCount",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ArgumentCountContext"
                ]
            }
        },
        "VMListener.exitArgumentCount": {
            "name": "exitArgumentCount",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ArgumentCountContext"
                ]
            }
        },
        "VMListener.enterFunction": {
            "name": "enterFunction",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.FunctionContext"
                ]
            }
        },
        "VMListener.exitFunction": {
            "name": "exitFunction",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.FunctionContext"
                ]
            }
        },
        "VMListener.enterFunctionName": {
            "name": "enterFunctionName",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.FunctionNameContext"
                ]
            }
        },
        "VMListener.exitFunctionName": {
            "name": "exitFunctionName",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.FunctionNameContext"
                ]
            }
        },
        "VMListener.enterLocalVariableCount": {
            "name": "enterLocalVariableCount",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LocalVariableCountContext"
                ]
            }
        },
        "VMListener.exitLocalVariableCount": {
            "name": "exitLocalVariableCount",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LocalVariableCountContext"
                ]
            }
        },
        "VMListener.enterReturnStatement": {
            "name": "enterReturnStatement",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ReturnStatementContext"
                ]
            }
        },
        "VMListener.exitReturnStatement": {
            "name": "exitReturnStatement",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ReturnStatementContext"
                ]
            }
        }
    },
    "hackvirtualmachine-master/parser/VMParser.py": {
        "serializedATN": {
            "name": "serializedATN",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "VMParser.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "input": [
                    "TokenStream"
                ],
                "output": [
                    "TextIO"
                ]
            }
        },
        "VMParser.program": {
            "name": "program",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.statements": {
            "name": "statements",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.statement": {
            "name": "statement",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.push": {
            "name": "push",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.pop": {
            "name": "pop",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.arithmetic": {
            "name": "arithmetic",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.logical": {
            "name": "logical",
            "location": 589,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.segment": {
            "name": "segment",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.goto": {
            "name": "goto",
            "location": 718,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ifGoto": {
            "name": "ifGoto",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.label": {
            "name": "label",
            "location": 822,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.labelIdentifier": {
            "name": "labelIdentifier",
            "location": 870,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.call": {
            "name": "call",
            "location": 924,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.argumentCount": {
            "name": "argumentCount",
            "location": 974,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.function": {
            "name": "function",
            "location": 1028,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.functionName": {
            "name": "functionName",
            "location": 1078,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.localVariableCount": {
            "name": "localVariableCount",
            "location": 1124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.returnStatement": {
            "name": "returnStatement",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ProgramContext.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.ProgramContext.statements": {
            "name": "statements",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ProgramContext.EOF": {
            "name": "EOF",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ProgramContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ProgramContext.enterRule": {
            "name": "enterRule",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ProgramContext.exitRule": {
            "name": "exitRule",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ProgramContext.accept": {
            "name": "accept",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.StatementsContext.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.StatementsContext.statement": {
            "name": "statement",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "VMParser.StatementsContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementsContext.enterRule": {
            "name": "enterRule",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.StatementsContext.exitRule": {
            "name": "exitRule",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.StatementsContext.accept": {
            "name": "accept",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.StatementContext.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.StatementContext.push": {
            "name": "push",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.pop": {
            "name": "pop",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.arithmetic": {
            "name": "arithmetic",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.logical": {
            "name": "logical",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.label": {
            "name": "label",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.goto": {
            "name": "goto",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.ifGoto": {
            "name": "ifGoto",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.call": {
            "name": "call",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.function": {
            "name": "function",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.returnStatement": {
            "name": "returnStatement",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.StatementContext.enterRule": {
            "name": "enterRule",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.StatementContext.exitRule": {
            "name": "exitRule",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.StatementContext.accept": {
            "name": "accept",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.PushContext.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.PushContext.PUSH": {
            "name": "PUSH",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PushContext.segment": {
            "name": "segment",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PushContext.INT": {
            "name": "INT",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PushContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PushContext.enterRule": {
            "name": "enterRule",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.PushContext.exitRule": {
            "name": "exitRule",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.PushContext.accept": {
            "name": "accept",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.PopContext.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.PopContext.POP": {
            "name": "POP",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PopContext.segment": {
            "name": "segment",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PopContext.INT": {
            "name": "INT",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PopContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.PopContext.enterRule": {
            "name": "enterRule",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.PopContext.exitRule": {
            "name": "exitRule",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.PopContext.accept": {
            "name": "accept",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.ArithmeticContext.__init__": {
            "name": "__init__",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.ArithmeticContext.ADD": {
            "name": "ADD",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ArithmeticContext.SUB": {
            "name": "SUB",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ArithmeticContext.NEG": {
            "name": "NEG",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ArithmeticContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ArithmeticContext.enterRule": {
            "name": "enterRule",
            "location": 505,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ArithmeticContext.exitRule": {
            "name": "exitRule",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ArithmeticContext.accept": {
            "name": "accept",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.LogicalContext.__init__": {
            "name": "__init__",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.LogicalContext.LT": {
            "name": "LT",
            "location": 551,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LogicalContext.EQ": {
            "name": "EQ",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LogicalContext.GT": {
            "name": "GT",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LogicalContext.AND": {
            "name": "AND",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LogicalContext.OR": {
            "name": "OR",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LogicalContext.NOT": {
            "name": "NOT",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LogicalContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LogicalContext.enterRule": {
            "name": "enterRule",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LogicalContext.exitRule": {
            "name": "exitRule",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LogicalContext.accept": {
            "name": "accept",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.SegmentContext.__init__": {
            "name": "__init__",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.SegmentContext.LOCAL": {
            "name": "LOCAL",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.ARGUMENT": {
            "name": "ARGUMENT",
            "location": 621,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.THIS": {
            "name": "THIS",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.THAT": {
            "name": "THAT",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.CONSTANT": {
            "name": "CONSTANT",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.STATIC": {
            "name": "STATIC",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.POINTER": {
            "name": "POINTER",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.TEMP": {
            "name": "TEMP",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.SegmentContext.enterRule": {
            "name": "enterRule",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.SegmentContext.exitRule": {
            "name": "exitRule",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.SegmentContext.accept": {
            "name": "accept",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.GotoContext.__init__": {
            "name": "__init__",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.GotoContext.GOTO": {
            "name": "GOTO",
            "location": 691,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.GotoContext.labelIdentifier": {
            "name": "labelIdentifier",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.GotoContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.GotoContext.enterRule": {
            "name": "enterRule",
            "location": 701,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.GotoContext.exitRule": {
            "name": "exitRule",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.GotoContext.accept": {
            "name": "accept",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.IfGotoContext.__init__": {
            "name": "__init__",
            "location": 739,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.IfGotoContext.IF_GOTO": {
            "name": "IF_GOTO",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.IfGotoContext.labelIdentifier": {
            "name": "labelIdentifier",
            "location": 746,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.IfGotoContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.IfGotoContext.enterRule": {
            "name": "enterRule",
            "location": 753,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.IfGotoContext.exitRule": {
            "name": "exitRule",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.IfGotoContext.accept": {
            "name": "accept",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.LabelContext.__init__": {
            "name": "__init__",
            "location": 791,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.LabelContext.LABEL": {
            "name": "LABEL",
            "location": 795,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LabelContext.labelIdentifier": {
            "name": "labelIdentifier",
            "location": 798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LabelContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 802,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LabelContext.enterRule": {
            "name": "enterRule",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LabelContext.exitRule": {
            "name": "exitRule",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LabelContext.accept": {
            "name": "accept",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.LabelIdentifierContext.__init__": {
            "name": "__init__",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.LabelIdentifierContext.IDENTIFIER": {
            "name": "IDENTIFIER",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LabelIdentifierContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LabelIdentifierContext.enterRule": {
            "name": "enterRule",
            "location": 853,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LabelIdentifierContext.exitRule": {
            "name": "exitRule",
            "location": 857,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LabelIdentifierContext.accept": {
            "name": "accept",
            "location": 861,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.CallContext.__init__": {
            "name": "__init__",
            "location": 889,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.CallContext.CALL": {
            "name": "CALL",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.CallContext.functionName": {
            "name": "functionName",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.CallContext.argumentCount": {
            "name": "argumentCount",
            "location": 900,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.CallContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 904,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.CallContext.enterRule": {
            "name": "enterRule",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.CallContext.exitRule": {
            "name": "exitRule",
            "location": 911,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.CallContext.accept": {
            "name": "accept",
            "location": 915,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.ArgumentCountContext.__init__": {
            "name": "__init__",
            "location": 947,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.ArgumentCountContext.INT": {
            "name": "INT",
            "location": 951,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ArgumentCountContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ArgumentCountContext.enterRule": {
            "name": "enterRule",
            "location": 957,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ArgumentCountContext.exitRule": {
            "name": "exitRule",
            "location": 961,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ArgumentCountContext.accept": {
            "name": "accept",
            "location": 965,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.FunctionContext.__init__": {
            "name": "__init__",
            "location": 993,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.FunctionContext.FUNCTION": {
            "name": "FUNCTION",
            "location": 997,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.FunctionContext.functionName": {
            "name": "functionName",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.FunctionContext.localVariableCount": {
            "name": "localVariableCount",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.FunctionContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.FunctionContext.enterRule": {
            "name": "enterRule",
            "location": 1011,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.FunctionContext.exitRule": {
            "name": "exitRule",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.FunctionContext.accept": {
            "name": "accept",
            "location": 1019,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.FunctionNameContext.__init__": {
            "name": "__init__",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.FunctionNameContext.IDENTIFIER": {
            "name": "IDENTIFIER",
            "location": 1055,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.FunctionNameContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 1058,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.FunctionNameContext.enterRule": {
            "name": "enterRule",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.FunctionNameContext.exitRule": {
            "name": "exitRule",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.FunctionNameContext.accept": {
            "name": "accept",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.LocalVariableCountContext.__init__": {
            "name": "__init__",
            "location": 1097,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.LocalVariableCountContext.INT": {
            "name": "INT",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LocalVariableCountContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.LocalVariableCountContext.enterRule": {
            "name": "enterRule",
            "location": 1107,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LocalVariableCountContext.exitRule": {
            "name": "exitRule",
            "location": 1111,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.LocalVariableCountContext.accept": {
            "name": "accept",
            "location": 1115,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        },
        "VMParser.ReturnStatementContext.__init__": {
            "name": "__init__",
            "location": 1143,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "parent": [
                    "ParserRuleContext"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "VMParser.ReturnStatementContext.RETURN": {
            "name": "RETURN",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ReturnStatementContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 1150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VMParser.ReturnStatementContext.enterRule": {
            "name": "enterRule",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ReturnStatementContext.exitRule": {
            "name": "exitRule",
            "location": 1157,
            "return": [],
            "arguments": {
                "self": [],
                "listener": [
                    "ParseTreeListener"
                ]
            }
        },
        "VMParser.ReturnStatementContext.accept": {
            "name": "accept",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": [
                    "ParseTreeVisitor"
                ]
            }
        }
    },
    "hackvirtualmachine-master/parser/VMVisitor.py": {
        "VMVisitor.visitProgram": {
            "name": "visitProgram",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ProgramContext"
                ]
            }
        },
        "VMVisitor.visitStatements": {
            "name": "visitStatements",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementsContext"
                ]
            }
        },
        "VMVisitor.visitStatement": {
            "name": "visitStatement",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.StatementContext"
                ]
            }
        },
        "VMVisitor.visitPush": {
            "name": "visitPush",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PushContext"
                ]
            }
        },
        "VMVisitor.visitPop": {
            "name": "visitPop",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.PopContext"
                ]
            }
        },
        "VMVisitor.visitArithmetic": {
            "name": "visitArithmetic",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ArithmeticContext"
                ]
            }
        },
        "VMVisitor.visitLogical": {
            "name": "visitLogical",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LogicalContext"
                ]
            }
        },
        "VMVisitor.visitSegment": {
            "name": "visitSegment",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.SegmentContext"
                ]
            }
        },
        "VMVisitor.visitGoto": {
            "name": "visitGoto",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.GotoContext"
                ]
            }
        },
        "VMVisitor.visitIfGoto": {
            "name": "visitIfGoto",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.IfGotoContext"
                ]
            }
        },
        "VMVisitor.visitLabel": {
            "name": "visitLabel",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LabelContext"
                ]
            }
        },
        "VMVisitor.visitLabelIdentifier": {
            "name": "visitLabelIdentifier",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LabelIdentifierContext"
                ]
            }
        },
        "VMVisitor.visitCall": {
            "name": "visitCall",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.CallContext"
                ]
            }
        },
        "VMVisitor.visitArgumentCount": {
            "name": "visitArgumentCount",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ArgumentCountContext"
                ]
            }
        },
        "VMVisitor.visitFunction": {
            "name": "visitFunction",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.FunctionContext"
                ]
            }
        },
        "VMVisitor.visitFunctionName": {
            "name": "visitFunctionName",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.FunctionNameContext"
                ]
            }
        },
        "VMVisitor.visitLocalVariableCount": {
            "name": "visitLocalVariableCount",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.LocalVariableCountContext"
                ]
            }
        },
        "VMVisitor.visitReturnStatement": {
            "name": "visitReturnStatement",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "VMParser.ReturnStatementContext"
                ]
            }
        }
    },
    "hackvirtualmachine-master/parser/__init__.py": {},
    "hackvirtualmachine-master/test/test_hack.py": {
        "convert": {
            "name": "convert",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "vm_input": [
                    "str"
                ]
            }
        },
        "combine": {
            "name": "combine",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "instructions": [
                    "List[str]"
                ]
            }
        },
        "test_push_constant": {
            "name": "test_push_constant",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_push_segment": {
            "name": "test_push_segment",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "segment": [
                    "str"
                ],
                "index": [
                    "int"
                ],
                "hack_segment": [
                    "str"
                ]
            }
        },
        "test_push_temp": {
            "name": "test_push_temp",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_push_temp": {
            "name": "test_invalid_push_temp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_push_static": {
            "name": "test_push_static",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_push_pointer": {
            "name": "test_valid_push_pointer",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "str"
                ],
                "hack_name": [
                    "str"
                ]
            }
        },
        "test_invalid_push_pointer": {
            "name": "test_invalid_push_pointer",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop_temp": {
            "name": "test_pop_temp",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_pop_temp": {
            "name": "test_invalid_pop_temp",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop_segment": {
            "name": "test_pop_segment",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "segment": [
                    "str"
                ],
                "index": [
                    "int"
                ],
                "hack_segment": [
                    "str"
                ]
            }
        },
        "test_pop_static": {
            "name": "test_pop_static",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_pop_pointer": {
            "name": "test_valid_pop_pointer",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "str"
                ],
                "hack_name": [
                    "str"
                ]
            }
        },
        "test_invalid_pop_pointer": {
            "name": "test_invalid_pop_pointer",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_math": {
            "name": "test_math",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_neg": {
            "name": "test_neg",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not": {
            "name": "test_not",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comparison_operators": {
            "name": "test_comparison_operators",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_logical_operators": {
            "name": "test_logical_operators",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_label": {
            "name": "test_label",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_goto": {
            "name": "test_goto",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_if_goto": {
            "name": "test_if_goto",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_call": {
            "name": "test_call",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_function": {
            "name": "test_function",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_return": {
            "name": "test_return",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hackvirtualmachine-master/test/__init__.py": {}
}